using System;

// Token: 0x02000001 RID: 1
internal class <Module>
{
}
using System;

// Token: 0x02000004 RID: 4
// (Invoke) Token: 0x06000004 RID: 4
public delegate void ActionChat(string str);
using System;

// Token: 0x02000005 RID: 5
// (Invoke) Token: 0x06000008 RID: 8
public delegate void ActionPaint(mGraphics g, int x, int y);
using System;

// Token: 0x02000006 RID: 6
// (Invoke) Token: 0x0600000C RID: 12
public delegate void ActionUpdate();
using System;
using System.Collections.Generic;
using System.Threading;

// Token: 0x0200000E RID: 14
internal class AddSetDo
{
	// Token: 0x06000048 RID: 72 RVA: 0x000041F0 File Offset: 0x000023F0
	public static void AddSet1(Item item)
	{
		foreach (SetDo1 setDo in AddSetDo.ListSet1)
		{
			bool flag = setDo.type == (int)item.template.type;
			if (flag)
			{
				AddSetDo.ListSet1.Remove(setDo);
			}
		}
		AddSetDo.ListSet1.Add(new SetDo1((int)item.template.type, item.info));
		GameScr.info1.addInfo("Đã thêm " + item.template.name + " vào set 1", 0);
	}

	// Token: 0x06000049 RID: 73 RVA: 0x000042AC File Offset: 0x000024AC
	public static void AddSet2(Item item)
	{
		foreach (SetDo2 setDo in AddSetDo.ListSet2)
		{
			bool flag = setDo.type == (int)item.template.type;
			if (flag)
			{
				AddSetDo.ListSet2.Remove(setDo);
			}
		}
		AddSetDo.ListSet2.Add(new SetDo2((int)item.template.type, item.info));
		GameScr.info1.addInfo("Đã thêm " + item.template.name + " vào set 2", 0);
	}

	// Token: 0x0600004A RID: 74 RVA: 0x00004368 File Offset: 0x00002568
	public static void MacSet1()
	{
		foreach (SetDo1 setDo in AddSetDo.ListSet1)
		{
			try
			{
				Item[] arrItemBag = global::Char.myCharz().arrItemBag;
				for (int i = 0; i < arrItemBag.Length; i++)
				{
					bool flag = (int)arrItemBag[i].template.type == setDo.type && arrItemBag[i].info == setDo.info;
					if (flag)
					{
						Service.gI().getItem(4, (sbyte)i);
						Thread.Sleep(300);
					}
				}
			}
			catch
			{
			}
		}
		GameScr.info1.addInfo("Đã mặc set 1", 0);
	}

	// Token: 0x0600004B RID: 75 RVA: 0x00004454 File Offset: 0x00002654
	public static void MacSet2()
	{
		foreach (SetDo2 setDo in AddSetDo.ListSet2)
		{
			try
			{
				Item[] arrItemBag = global::Char.myCharz().arrItemBag;
				for (int i = 0; i < arrItemBag.Length; i++)
				{
					bool flag = (int)arrItemBag[i].template.type == setDo.type && arrItemBag[i].info == setDo.info;
					if (flag)
					{
						Service.gI().getItem(4, (sbyte)i);
						Thread.Sleep(300);
					}
				}
			}
			catch
			{
			}
		}
		GameScr.info1.addInfo("Đã mặc set 2", 0);
	}

	// Token: 0x0400004B RID: 75
	public static List<SetDo1> ListSet1 = new List<SetDo1>();



using System;
using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using UnityEngine;

// Token: 0x02000007 RID: 7
public class APhacap
{
	// Token: 0x0600000F RID: 15 RVA: 0x0000206C File Offset: 0x0000026C
	public static void phacap()
	{
		bool flag = GameScr.gI().mobCapcha != null && !MobCapcha.explode;
		if (flag)
		{
			string text = null;
			long num = mSystem.currentTimeMillis();
			string value = Convert.ToBase64String(GameScr.imgCapcha.texture.EncodeToPNG());
			GameScr.info1.addInfo("Đang giải mã hình ảnh, bạn chờ chút! ", 0);
			try
			{
				using (WebClient webClient = new WebClient())
				{
					NameValueCollection nameValueCollection = new NameValueCollection();
					nameValueCollection["merchant_key"] = "58W5PMMW39EWA5L";
					nameValueCollection["image"] = value;
					byte[] bytes;
					try
					{
						bytes = webClient.UploadValues("http://shoptool247.com/SolveCaptcha", nameValueCollection);
					}
					catch
					{
						bytes = webClient.UploadValues("http://shoptool247.com/SolveCaptcha", nameValueCollection);
					}
					text = Encoding.Default.GetString(bytes);
					text = text.Split(new char[]
					{
						':'
					})[3].Split(new char[]
					{
						'"'
					})[1];
				}
			}
			catch (Exception ex)
			{
				File.WriteAllText("log.txt", ex.Message);
				Thread.Sleep(3000);
				new Thread(new ThreadStart(APhacap.phacap)).Start();
				return;
			}
			bool flag2 = !string.IsNullOrEmpty(text);
			if (flag2)
			{
				do
				{
					GameScr.info1.addInfo("Captcha: " + text, 0);
					int num2 = (int)(mSystem.currentTimeMillis() - num);
					bool flag3 = num2 < 5000;
					if (flag3)
					{
						Thread.Sleep(5000 - num2);
					}
					GameScr.gI().keyInput = text;
					bool flag4 = text.Length >= 4 && text.Length <= 7;
					if (flag4)
					{
						for (int i = 0; i < text.Length; i++)
						{
							Service.gI().mobCapcha(text[i]);
							Thread.Sleep(UnityEngine.Random.Range(500, 1000));
						}
					}
					Thread.Sleep(3000);
				}
				while (GameScr.gI().keyInput == text && GameScr.gI().mobCapcha != null);
			}
		}
		bool flag5 = GameScr.gI().mobCapcha != null;
		if (flag5)
		{
			Thread.Sleep(30000);
		}
		APhacap.khoa = true;
	}

	// Token: 0x04000002 RID: 2
	public static bool khoa = true;
}


	// Token: 0x0400004C RID: 76
	public static List<SetDo2> ListSet2 = new List<SetDo2>();
}
using System;

// Token: 0x02000008 RID: 8
public class Archivement
{
	// Token: 0x04000003 RID: 3
	public string info1;

	// Token: 0x04000004 RID: 4
	public string info2;

	// Token: 0x04000005 RID: 5
	public int money;

	// Token: 0x04000006 RID: 6
	public bool isFinish;

	// Token: 0x04000007 RID: 7
	public bool isRecieve;
}
using System;

// Token: 0x02000009 RID: 9
public class ArrayCast
{
	// Token: 0x06000013 RID: 19 RVA: 0x0000230C File Offset: 0x0000050C
	public static sbyte[] cast(byte[] data)
	{
		sbyte[] array = new sbyte[data.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = (sbyte)data[i];
		}
		return array;
	}

	// Token: 0x06000014 RID: 20 RVA: 0x00002344 File Offset: 0x00000544
	public static byte[] cast(sbyte[] data)
	{
		byte[] array = new byte[data.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = (byte)data[i];
		}
		return array;
	}

	// Token: 0x06000015 RID: 21 RVA: 0x0000237C File Offset: 0x0000057C
	public static char[] ToCharArray(sbyte[] data)
	{
		char[] array = new char[data.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = (char)data[i];
		}
		return array;
	}
}
using System;

// Token: 0x0200000A RID: 10
public class Arrow
{
	// Token: 0x06000017 RID: 23 RVA: 0x000023BC File Offset: 0x000005BC
	public Arrow(global::Char charBelong, Arrowpaint arrp)
	{
		this.charBelong = charBelong;
		this.arrp = arrp;
	}

	// Token: 0x06000018 RID: 24 RVA: 0x000023D4 File Offset: 0x000005D4
	public void update()
	{
		bool flag = this.charBelong.mobFocus == null && this.charBelong.charFocus == null;
		if (flag)
		{
			this.endMe();
		}
		else
		{
			bool flag2 = this.charBelong.mobFocus != null;
			if (flag2)
			{
				this.axTo = this.charBelong.mobFocus.x;
				this.ayTo = this.charBelong.mobFocus.y - this.charBelong.mobFocus.h / 4;
			}
			else
			{
				bool flag3 = this.charBelong.charFocus != null;
				if (flag3)
				{
					this.axTo = this.charBelong.charFocus.cx;
					this.ayTo = this.charBelong.charFocus.cy - this.charBelong.charFocus.ch / 4;
				}
			}
			int num = this.axTo - this.ax;
			int num2 = this.ayTo - this.ay;
			int num3 = 5;
			int num4 = 4;
			bool flag4 = num + num2 < 60;
			if (flag4)
			{
				num4 = 3;
			}
			else
			{
				bool flag5 = num + num2 < 30;
				if (flag5)
				{
					num4 = 2;
				}
			}
			bool flag6 = this.ax != this.axTo;
			if (flag6)
			{
				bool flag7 = num > 0 && num < num3;
				if (flag7)
				{
					this.ax = this.axTo;
				}
				else
				{
					bool flag8 = num < 0 && num > -num3;
					if (flag8)
					{
						this.ax = this.axTo;
					}
					else
					{
						this.avx = this.axTo - this.ax << 2;
						this.adx += this.avx;
						this.ax += this.adx >> num4;
						this.adx &= 15;
					}
				}
			}
			bool flag9 = this.ay != this.ayTo;
			if (flag9)
			{
				bool flag10 = num2 > 0 && num2 < num3;
				if (flag10)
				{
					this.ay = this.ayTo;
				}
				else
				{
					bool flag11 = num2 < 0 && num2 > -num3;
					if (flag11)
					{
						this.ay = this.ayTo;
					}
					else
					{
						this.avy = this.ayTo - this.ay << 2;
						this.ady += this.avy;
						this.ay += this.ady >> num4;
						this.ady &= 15;
					}
				}
			}
			int num5 = 0;
			int num6 = 0;
			int num7 = 0;
			int num8 = 0;
			bool flag12 = this.charBelong.mobFocus != null;
			if (flag12)
			{
				num5 = this.axTo - this.charBelong.mobFocus.w / 4;
				num7 = this.axTo + this.charBelong.mobFocus.w / 4;
				num6 = this.ayTo - this.charBelong.mobFocus.h / 4;
				num8 = this.ayTo + this.charBelong.mobFocus.h / 4;
			}
			else
			{
				bool flag13 = this.charBelong.charFocus != null;
				if (flag13)
				{
					num5 = this.axTo - this.charBelong.charFocus.cw / 4;
					num7 = this.axTo + this.charBelong.charFocus.cw / 4;
					num6 = this.ayTo - this.charBelong.charFocus.ch / 4;
					num8 = this.ayTo + this.charBelong.charFocus.ch / 4;
				}
			}
			bool flag14 = this.life > 0;
			if (flag14)
			{
				this.life--;
			}
			bool flag15 = this.life == 0 || (this.ax >= num5 && this.ax <= num7 && this.ay >= num6 && this.ay <= num8);
			if (flag15)
			{
				this.endMe();
			}
		}
	}

	// Token: 0x06000019 RID: 25 RVA: 0x000027E0 File Offset: 0x000009E0
	private void endMe()
	{
		this.charBelong.arr = null;
		this.ax = (this.ay = (this.axTo = (this.ayTo = (this.avx = (this.avy = (this.adx = (this.ady = 0)))))));
		this.charBelong.setAttack();
		bool me = this.charBelong.me;
		if (me)
		{
			this.charBelong.saveLoadPreviousSkill();
		}
	}

	// Token: 0x0600001A RID: 26 RVA: 0x0000286C File Offset: 0x00000A6C
	public void paint(mGraphics g)
	{
		int dx = this.axTo - this.ax;
		int num = this.ayTo - this.ay;
		int num2 = Arrow.findDirIndexFromAngle(Res.angle(dx, -num));
		SmallImage.drawSmallImage(g, this.arrp.imgId[(int)Arrow.FRAME[num2]], this.ax, this.ay, Arrow.TRANSFORM[num2], mGraphics.VCENTER | mGraphics.HCENTER);
	}

	// Token: 0x0600001B RID: 27 RVA: 0x000028DC File Offset: 0x00000ADC
	public static int findDirIndexFromAngle(int angle)
	{
		for (int i = 0; i < Arrow.ARROWINDEX.Length - 1; i++)
		{
			bool flag = angle >= Arrow.ARROWINDEX[i] && angle <= Arrow.ARROWINDEX[i + 1];
			if (flag)
			{
				bool flag2 = i >= 16;
				int result;
				if (flag2)
				{
					result = 0;
				}
				else
				{
					result = i;
				}
				return result;
			}
		}
		return 0;
	}

	// Token: 0x04000008 RID: 8
	public int life;

	// Token: 0x04000009 RID: 9
	public int ax;

	// Token: 0x0400000A RID: 10
	public int ay;

	// Token: 0x0400000B RID: 11
	public int axTo;

	// Token: 0x0400000C RID: 12
	public int ayTo;

	// Token: 0x0400000D RID: 13
	public int avx;

	// Token: 0x0400000E RID: 14
	public int avy;

	// Token: 0x0400000F RID: 15
	public int adx;

	// Token: 0x04000010 RID: 16
	public int ady;

	// Token: 0x04000011 RID: 17
	public global::Char charBelong;

	// Token: 0x04000012 RID: 18
	public Arrowpaint arrp;

	// Token: 0x04000013 RID: 19
	public static sbyte[] FRAME = new sbyte[]
	{
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0
	};

	// Token: 0x04000014 RID: 20
	public static int[] ARROWINDEX = new int[]
	{
		0,
		15,
		37,
		52,
		75,
		105,
		127,
		142,
		165,
		195,
		217,
		232,
		255,
		285,
		307,
		322,
		345,
		370
	};

	// Token: 0x04000015 RID: 21
	public static int[] TRANSFORM = new int[]
	{
		0,
		0,
		0,
		7,
		6,
		6,
		6,
		2,
		2,
		3,
		3,
		4,
		5,
		5,
		5,
		1
	};
}
using System;

// Token: 0x0200000B RID: 11
public class Arrowpaint
{
	// Token: 0x0600001D RID: 29 RVA: 0x00002998 File Offset: 0x00000B98
	public void update()
	{
		bool flag = this.charBelong.mobFocus == null && this.charBelong.charFocus == null;
		if (flag)
		{
			this.endMe();
		}
		else
		{
			bool flag2 = this.charBelong.mobFocus != null;
			if (flag2)
			{
				this.axTo = this.charBelong.mobFocus.x;
				this.ayTo = this.charBelong.mobFocus.y - this.charBelong.mobFocus.h / 4;
			}
			else
			{
				bool flag3 = this.charBelong.charFocus != null;
				if (flag3)
				{
					this.axTo = this.charBelong.charFocus.cx;
					this.ayTo = this.charBelong.charFocus.cy - this.charBelong.charFocus.ch / 4;
				}
			}
			int num = this.axTo - this.ax;
			int num2 = this.ayTo - this.ay;
			int num3 = 5;
			int num4 = 4;
			bool flag4 = num + num2 < 60;
			if (flag4)
			{
				num4 = 3;
			}
			else
			{
				bool flag5 = num + num2 < 30;
				if (flag5)
				{
					num4 = 2;
				}
			}
			bool flag6 = this.ax != this.axTo;
			if (flag6)
			{
				bool flag7 = num > 0 && num < num3;
				if (flag7)
				{
					this.ax = this.axTo;
				}
				else
				{
					bool flag8 = num < 0 && num > -num3;
					if (flag8)
					{
						this.ax = this.axTo;
					}
					else
					{
						this.avx = this.axTo - this.ax << 2;
						this.adx += this.avx;
						this.ax += this.adx >> num4;
						this.adx &= 15;
					}
				}
			}
			bool flag9 = this.ay != this.ayTo;
			if (flag9)
			{
				bool flag10 = num2 > 0 && num2 < num3;
				if (flag10)
				{
					this.ay = this.ayTo;
				}
				else
				{
					bool flag11 = num2 < 0 && num2 > -num3;
					if (flag11)
					{
						this.ay = this.ayTo;
					}
					else
					{
						this.avy = this.ayTo - this.ay << 2;
						this.ady += this.avy;
						this.ay += this.ady >> num4;
						this.ady &= 15;
					}
				}
			}
			int num5 = 0;
			int num6 = 0;
			int num7 = 0;
			int num8 = 0;
			bool flag12 = this.charBelong.mobFocus != null;
			if (flag12)
			{
				num5 = this.axTo - this.charBelong.mobFocus.w / 4;
				num7 = this.axTo + this.charBelong.mobFocus.w / 4;
				num6 = this.ayTo - this.charBelong.mobFocus.h / 4;
				num8 = this.ayTo + this.charBelong.mobFocus.h / 4;
			}
			else
			{
				bool flag13 = this.charBelong.charFocus != null;
				if (flag13)
				{
					num5 = this.axTo - this.charBelong.charFocus.cw / 4;
					num7 = this.axTo + this.charBelong.charFocus.cw / 4;
					num6 = this.ayTo - this.charBelong.charFocus.ch / 4;
					num8 = this.ayTo + this.charBelong.charFocus.ch / 4;
				}
			}
			bool flag14 = this.life > 0;
			if (flag14)
			{
				this.life--;
			}
			bool flag15 = this.life == 0 || (this.ax >= num5 && this.ax <= num7 && this.ay >= num6 && this.ay <= num8);
			if (flag15)
			{
				this.endMe();
			}
		}
	}

	// Token: 0x0600001E RID: 30 RVA: 0x00002DA4 File Offset: 0x00000FA4
	private void endMe()
	{
		this.charBelong.arr = null;
		this.ax = (this.ay = (this.axTo = (this.ayTo = (this.avx = (this.avy = (this.adx = (this.ady = 0)))))));
		this.charBelong.setAttack();
		bool me = this.charBelong.me;
		if (me)
		{
			this.charBelong.saveLoadPreviousSkill();
		}
	}

	// Token: 0x0600001F RID: 31 RVA: 0x00002E30 File Offset: 0x00001030
	public void paint(mGraphics g)
	{
		int dx = this.axTo - this.ax;
		int num = this.ayTo - this.ay;
		int num2 = Arrowpaint.findDirIndexFromAngle(Res.angle(dx, -num));
		SmallImage.drawSmallImage(g, this.imgId[(int)Arrowpaint.FRAME[num2]], this.ax, this.ay, Arrowpaint.TRANSFORM[num2], mGraphics.VCENTER | mGraphics.HCENTER);
	}

	// Token: 0x06000020 RID: 32 RVA: 0x00002E9C File Offset: 0x0000109C
	public static int findDirIndexFromAngle(int angle)
	{
		for (int i = 0; i < Arrowpaint.ARROWINDEX.Length - 1; i++)
		{
			bool flag = angle >= Arrowpaint.ARROWINDEX[i] && angle <= Arrowpaint.ARROWINDEX[i + 1];
			if (flag)
			{
				bool flag2 = i >= 16;
				int result;
				if (flag2)
				{
					result = 0;
				}
				else
				{
					result = i;
				}
				return result;
			}
		}
		return 0;
	}

	// Token: 0x04000016 RID: 22
	public int id;

	// Token: 0x04000017 RID: 23
	public int life;

	// Token: 0x04000018 RID: 24
	public int ax;

	// Token: 0x04000019 RID: 25
	public int ay;

	// Token: 0x0400001A RID: 26
	public int axTo;

	// Token: 0x0400001B RID: 27
	public int ayTo;

	// Token: 0x0400001C RID: 28
	public int avx;

	// Token: 0x0400001D RID: 29
	public int avy;

	// Token: 0x0400001E RID: 30
	public int adx;

	// Token: 0x0400001F RID: 31
	public int ady;

	// Token: 0x04000020 RID: 32
	public global::Char charBelong;

	// Token: 0x04000021 RID: 33
	public int[] imgId = new int[3];

	// Token: 0x04000022 RID: 34
	public static sbyte[] FRAME = new sbyte[]
	{
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0
	};

	// Token: 0x04000023 RID: 35
	public static int[] ARROWINDEX = new int[]
	{
		0,
		15,
		37,
		52,
		75,
		105,
		127,
		142,
		165,
		195,
		217,
		232,
		255,
		285,
		307,
		322,
		345,
		370
	};

	// Token: 0x04000024 RID: 36
	public static int[] TRANSFORM = new int[]
	{
		0,
		0,
		0,
		7,
		6,
		6,
		6,
		2,
		2,
		3,
		3,
		4,
		5,
		5,
		5,
		1
	};
}
using System;
using System.Collections.Generic;
using System.Linq;
using AssemblyCSharp.Mod.PickMob;

// Token: 0x0200001A RID: 26
internal class AttackBoss
{
	// Token: 0x0600008E RID: 142 RVA: 0x000063AC File Offset: 0x000045AC
	public static void AutoBongTai()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 454 || item.template.id == 921);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x0600008F RID: 143 RVA: 0x00006434 File Offset: 0x00004634
	public static void UseBT()
	{
		bool flag = global::Char.myCharz().cHP < global::Char.myCharz().cHPFull / 5L || global::Char.myCharz().cMP < global::Char.myCharz().cMPFull / 5L || !global::Char.myCharz().isNhapThe;
		if (flag)
		{
			AttackBoss.AutoBongTai();
		}
	}

	// Token: 0x06000090 RID: 144 RVA: 0x00006490 File Offset: 0x00004690
	public static void Update()
	{
		bool flag = AttackBoss.IsWaiting();
		if (!flag)
		{
			global::Char @char = global::Char.myCharz();
			bool flag2 = @char.statusMe == 14 || @char.cHP <= 0L;
			if (!flag2)
			{
				bool flag3 = GameCanvas.gameTick % 100 == 0;
				if (flag3)
				{
					AttackBoss.UseBT();
				}
				bool isPemBoss = AttackBoss.IsPemBoss;
				if (isPemBoss)
				{
					bool isCharge = @char.isCharge;
					if (isCharge)
					{
						AttackBoss.Wait(500);
						return;
					}
					bool flag4 = @char.charFocus != null;
					if (flag4)
					{
						bool flag5 = @char.skillInfoPaint() == null;
						if (flag5)
						{
							Skill skillAttack = AttackBoss.GetSkillAttack();
							bool flag6 = skillAttack != null && !skillAttack.paintCanNotUseSkill;
							if (flag6)
							{
								GameScr.gI().doSelectSkill(skillAttack, true);
								global::Char charFocus = @char.charFocus;
								bool flag7 = charFocus.cy > 200 && charFocus.cx > 50;
								if (flag7)
								{
									bool flag8 = Res.distance(charFocus.cx, charFocus.cy, @char.cx, @char.cy) > 75;
									if (flag8)
									{
										AttackBoss.Move(charFocus.cx - 24, charFocus.cy);
									}
								}
							}
						}
					}
				}
				AttackBoss.Wait(2000);
			}
		}
	}

	// Token: 0x06000091 RID: 145 RVA: 0x000065EC File Offset: 0x000047EC
	private static void Move(int x, int y)
	{
		global::Char @char = global::Char.myCharz();
		bool flag = !Pk9rPickMob.IsVuotDiaHinh;
		if (flag)
		{
			@char.currentMovePoint = new MovePoint(x, y);
		}
		else
		{
			int[] pointYsdMax = AttackBoss.GetPointYsdMax(@char.cx, x);
			bool flag2 = pointYsdMax[1] >= y || (pointYsdMax[1] >= @char.cy && (@char.statusMe == 2 || @char.statusMe == 1));
			if (flag2)
			{
				pointYsdMax[0] = x;
				pointYsdMax[1] = y;
			}
			@char.currentMovePoint = new MovePoint(pointYsdMax[0], pointYsdMax[1]);
		}
	}

	// Token: 0x06000092 RID: 146 RVA: 0x00006674 File Offset: 0x00004874
	private static int GetYsd(int xsd)
	{
		global::Char @char = global::Char.myCharz();
		int num = TileMap.pxh;
		int result = -1;
		for (int i = 24; i < TileMap.pxh; i += 24)
		{
			bool flag = TileMap.tileTypeAt(xsd, i, 2);
			if (flag)
			{
				int num2 = Res.abs(i - @char.cy);
				bool flag2 = num2 < num;
				if (flag2)
				{
					num = num2;
					result = i;
				}
			}
		}
		return result;
	}

	// Token: 0x06000093 RID: 147 RVA: 0x000066E4 File Offset: 0x000048E4
	public static void TeleportTo(int x, int y)
	{
		global::Char @char = global::Char.myCharz();
		@char.cx = x;
		@char.cy = y;
		Service.gI().charMove();
		bool flag = !ItemTime.isExistItem(4387);
		if (flag)
		{
			@char.cx = x;
			@char.cy = y;
			Service.gI().charMove();
			@char.cx = x;
			@char.cy = y;
			Service.gI().charMove();
		}
	}

	// Token: 0x06000094 RID: 148 RVA: 0x00006758 File Offset: 0x00004958
	private static int[] GetPointYsdMax(int xStart, int xEnd)
	{
		int num = TileMap.pxh;
		int num2 = -1;
		bool flag = xStart > xEnd;
		if (flag)
		{
			for (int i = xEnd; i < xStart; i += 24)
			{
				int ysd = AttackBoss.GetYsd(i);
				bool flag2 = ysd < num;
				if (flag2)
				{
					num = ysd;
					num2 = i;
				}
			}
		}
		else
		{
			for (int j = xEnd; j > xStart; j -= 24)
			{
				int ysd2 = AttackBoss.GetYsd(j);
				bool flag3 = ysd2 < num;
				if (flag3)
				{
					num = ysd2;
					num2 = j;
				}
			}
		}
		return new int[]
		{
			num2,
			num
		};
	}

	// Token: 0x06000095 RID: 149 RVA: 0x000067F4 File Offset: 0x000049F4
	private static Skill GetSkillAttack()
	{
		Skill skill = null;
		SkillTemplate skillTemplate = new SkillTemplate();
		foreach (sbyte id in AttackBoss.IdSkillsTanSat)
		{
			skillTemplate.id = id;
			Skill skill2 = global::Char.myCharz().getSkill(skillTemplate);
			bool flag = AttackBoss.IsSkillBetter(skill2, skill);
			if (flag)
			{
				skill = skill2;
			}
		}
		return skill;
	}

	// Token: 0x06000096 RID: 150 RVA: 0x0000687C File Offset: 0x00004A7C
	private static bool IsSkillBetter(Skill SkillBetter, Skill skill)
	{
		bool flag = SkillBetter == null;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = !AttackBoss.CanUseSkill(SkillBetter);
			if (flag2)
			{
				result = false;
			}
			else
			{
				bool flag3 = (SkillBetter.template.id == 17 && skill.template.id == 2) || (SkillBetter.template.id == 9 && skill.template.id == 0);
				result = (skill == null || skill.coolDown < SkillBetter.coolDown || flag3);
			}
		}
		return result;
	}

	// Token: 0x06000097 RID: 151 RVA: 0x00006904 File Offset: 0x00004B04
	private static bool CanUseSkill(Skill skill)
	{
		bool flag = mSystem.currentTimeMillis() - skill.lastTimeUseThisSkill > (long)skill.coolDown;
		if (flag)
		{
			skill.paintCanNotUseSkill = false;
		}
		return (!skill.paintCanNotUseSkill || AttackBoss.IdSkillsMelee.Contains(skill.template.id)) && !AttackBoss.IdSkillsCanNotAttack.Contains(skill.template.id) && global::Char.myCharz().cMP >= (long)AttackBoss.GetManaUseSkill(skill);
	}

	// Token: 0x06000098 RID: 152 RVA: 0x00006988 File Offset: 0x00004B88
	private static int GetManaUseSkill(Skill skill)
	{
		bool flag = skill.template.manaUseType == 2;
		int result;
		if (flag)
		{
			result = 1;
		}
		else
		{
			bool flag2 = skill.template.manaUseType == 1;
			if (flag2)
			{
				result = skill.manaUse * (int)global::Char.myCharz().cMPFull / 100;
			}
			else
			{
				result = skill.manaUse;
			}
		}
		return result;
	}

	// Token: 0x06000099 RID: 153 RVA: 0x000069E2 File Offset: 0x00004BE2
	private static void Wait(int time)
	{
		AttackBoss.IsWait = true;
		AttackBoss.TimeStartWait = mSystem.currentTimeMillis();
		AttackBoss.TimeWait = (long)time;
	}

	// Token: 0x0600009A RID: 154 RVA: 0x000069FC File Offset: 0x00004BFC
	private static bool IsWaiting()
	{
		bool flag = AttackBoss.IsWait && mSystem.currentTimeMillis() - AttackBoss.TimeStartWait >= AttackBoss.TimeWait;
		if (flag)
		{
			AttackBoss.IsWait = false;
		}
		return AttackBoss.IsWait;
	}

	// Token: 0x0400006F RID: 111
	private static readonly sbyte[] IdSkillsMelee = new sbyte[]
	{
		0,
		9,
		2,
		17,
		4
	};

	// Token: 0x04000070 RID: 112
	private static readonly sbyte[] IdSkillsCanNotAttack = new sbyte[]
	{
		10,
		11,
		14,
		23,
		7
	};

	// Token: 0x04000071 RID: 113
	private static readonly sbyte[] IdSkillsBase = new sbyte[]
	{
		0,
		2,
		17,
		4,
		12,
		13
	};

	// Token: 0x04000072 RID: 114
	public static List<sbyte> IdSkillsTanSat = new List<sbyte>(AttackBoss.IdSkillsBase);

	// Token: 0x04000073 RID: 115
	public static bool IsPickingItems;

	// Token: 0x04000074 RID: 116
	private static bool IsWait;

	// Token: 0x04000075 RID: 117
	private static long TimeStartWait;

	// Token: 0x04000076 RID: 118
	private static long TimeWait;

	// Token: 0x04000077 RID: 119
	public static bool IsPemBoss = false;
}
using System;
using System.Collections.Generic;
using System.Linq;
using AssemblyCSharp.Mod.Xmap;

// Token: 0x0200000F RID: 15
internal class AutoBroly
{
	// Token: 0x0600004E RID: 78
	private static void Wait(int time)
	{
		AutoBroly.IsWait = true;
		AutoBroly.TimeStartWait = mSystem.currentTimeMillis();
		AutoBroly.TimeWait = (long)time;
	}

	// Token: 0x0600004F RID: 79
	private static bool IsWaiting()
	{
		if (AutoBroly.IsWait && mSystem.currentTimeMillis() - AutoBroly.TimeStartWait >= AutoBroly.TimeWait)
		{
			AutoBroly.IsWait = false;
		}
		return AutoBroly.IsWait;
	}

	// Token: 0x06000050 RID: 80
	public static bool IsBoss()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			if (@char != null && @char.cName.Contains("Broly") && @char.cName.Contains("Super") && @char.cHPFull >= 16070777L)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000051 RID: 81
	public static void SearchBoss()
	{
		int currentZone = TileMap.zoneID;
		int count = GameScr.gI().zones.Length;
		if (AutoBroly.IsBoss())
		{
			AutoBroly.visitedZones.Clear();
			return;
		}
		AutoBroly.visitedZones.Add(currentZone);
		List<int> list = (from z in Enumerable.Range(0, count)
		where z != currentZone && !AutoBroly.visitedZones.Contains(z)
		select z).ToList<int>();
		if (list.Count == 0)
		{
			AutoBroly.visitedZones.Clear();
			return;
		}
		int zoneId = list[AutoBroly.random.Next(list.Count)];
		Service.gI().requestChangeZone(zoneId, -1);
	}

	// Token: 0x06000052 RID: 82
	public static void FocusSuperBroly()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			if (@char != null && @char.cName.Contains("Broly") && @char.cName.Contains("Super") && @char.cHP > 0L && global::Char.myCharz().charFocus != @char)
			{
				global::Char.myCharz().npcFocus = null;
				global::Char.myCharz().mobFocus = null;
				global::Char.myCharz().charFocus = @char;
				return;
			}
		}
	}

	// Token: 0x06000053 RID: 83
	public static void Update()
	{
		AutoPean.Update();
		AutoBroly.KichSuper();
		if (!AutoBroly.IsWaiting())
		{
			if (global::Char.myCharz().cHP <= 0L || global::Char.myCharz().meDead)
			{
				if (AutoBroly.IsBoss() && DataAccount.Type != 1)
				{
					AutoBroly.Map = TileMap.mapID;
					AutoBroly.Khu = TileMap.zoneID;
				}
				Service.gI().returnTownFromDead();
				AutoBroly.Wait(3000);
				return;
			}
			if (AutoBroly.Map != -1 && AutoBroly.Khu != -1 && TileMap.mapID == AutoBroly.Map && TileMap.zoneID == AutoBroly.Khu && !AutoBroly.IsBoss())
			{
				AutoBroly.Map = -1;
				AutoBroly.Khu = -1;
			}
			if (AutoBroly.IsBoss())
			{
				AutoBroly.Map = TileMap.mapID;
				AutoBroly.Khu = TileMap.zoneID;
				AutoBroly.TrangThai = "SP: " + TileMap.mapNames[TileMap.mapID].ToString() + " - " + TileMap.zoneID.ToString();
				if (AutoBroly.visitedZones.Count > 0)
				{
					AutoBroly.visitedZones.Clear();
				}
			}
			else
			{
				AutoBroly.TrangThai = "Không có thông tin ";
			}
			if (AutoBroly.Map != -1 && TileMap.mapID != AutoBroly.Map && !Pk9rXmap.IsXmapRunning)
			{
				XmapController.StartRunToMapId(AutoBroly.Map);
				AutoBroly.Wait(3000);
				return;
			}
			if (TileMap.mapID == AutoBroly.Map && TileMap.zoneID != AutoBroly.Khu && AutoBroly.Khu != -1)
			{
				Service.gI().requestChangeZone(AutoBroly.Khu, -1);
				AutoBroly.Wait(2000);
				return;
			}
			if (TileMap.mapID == AutoBroly.Map && TileMap.zoneID == AutoBroly.Khu && AutoBroly.IsBoss())
			{
				AutoBroly.FocusSuperBroly();
			}
			if (!AutoBroly.IsBoss() && AutoBroly.isDoKhu)
			{
				AutoBroly.SearchBoss();
				AutoBroly.Wait(2000);
				return;
			}
			if (DataAccount.Type == 1)
			{
				if (AutoBroly.NhayNe == 0 && AutoBroly.IsBoss())
				{
					AutoBroly.NhayNe = 1;
					AutoBroly.Wait(1000);
					return;
				}
				if (!AutoBroly.IsBoss() && AutoBroly.NhayNe == 1)
				{
					AutoBroly.NhayNe = 0;
				}
			}
			if (DataAccount.Type == 3)
			{
				if ((double)global::Char.myCharz().cHP <= (double)global::Char.myCharz().cHPFull * 0.05 || (double)global::Char.myCharz().cMP <= (double)global::Char.myCharz().cMPFull * 0.05)
				{
					Console.WriteLine("HP hoặc Ki dưới 5%, bắt đầu ăn đậu.");
					AutoPean.EatPeas();
					AutoBroly.Wait(500);
					return;
				}
				if (AutoBroly.NhayNe == 0 && !AutoBroly.IsBoss())
				{
					AutoBroly.NhayNe = 1;
					AutoBroly.NhayCuoiMap();
					AutoBroly.Wait(1000);
					return;
				}
				if (!AutoBroly.IsBoss() && AutoBroly.NhayNe == 1)
				{
					AutoBroly.NhayNe = 0;
				}
			}
			AutoBroly.Wait(500);
		}
	}

	// Token: 0x06000054 RID: 84
	public static void NhayCuoiMap()
	{
		if (GameScr.getX(2) > 0 && GameScr.getY(2) > 0)
		{
			KsSupper.TelePortTo(GameScr.getX(2) - 50, GameScr.getY(2));
		}
	}

	// Token: 0x06000055 RID: 85
	public static bool IsBroly()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			if (@char != null && @char.cName.Contains("Broly") && !@char.cName.Contains("Super"))
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000056 RID: 86
	public static void Painting(mGraphics g)
	{
		string str = TileMap.mapNames[TileMap.mapID];
		string str2 = " - " + TileMap.zoneID.ToString();
		string str3 = NinjaUtil.getMoneys(global::Char.myCharz().cHP).ToString() + " / " + NinjaUtil.getMoneys(global::Char.myCharz().cHPFull).ToString();
		string str4 = NinjaUtil.getMoneys(global::Char.myCharz().cMP).ToString() + " / " + NinjaUtil.getMoneys(global::Char.myCharz().cMPFull).ToString();
		if (AutoBroly.IsBoss())
		{
			for (int i = 0; i < GameScr.vCharInMap.size(); i++)
			{
				global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
				if (@char != null && @char.cName.Contains("Broly") && @char.cName.Contains("Super") && @char.cHPFull >= 16070777L)
				{
					string st = string.Concat(new string[]
					{
						@char.cName,
						" [ ",
						NinjaUtil.getMoneys(@char.cHP).ToString(),
						" / ",
						NinjaUtil.getMoneys(@char.cHPFull).ToString(),
						" ]"
					});
					mFont.tahoma_7b_yellow.drawString(g, st, 20, GameCanvas.h - (GameCanvas.h - GameCanvas.h / 3), 0);
				}
			}
		}
		if (AutoBroly.IsBroly())
		{
			for (int j = 0; j < GameScr.vCharInMap.size(); j++)
			{
				global::Char char2 = (global::Char)GameScr.vCharInMap.elementAt(j);
				if (char2 != null && char2.cName.Contains("Broly") && !char2.cName.Contains("Super"))
				{
					string st2 = string.Concat(new string[]
					{
						char2.cName,
						" [ ",
						NinjaUtil.getMoneys(char2.cHP).ToString(),
						" / ",
						NinjaUtil.getMoneys(char2.cHPFull).ToString(),
						" ]"
					});
					mFont.tahoma_7b_white.drawString(g, st2, 20, GameCanvas.h - (GameCanvas.h - GameCanvas.h / 3), 0);
				}
			}
		}
		mFont.tahoma_7b_white.drawString(g, "HP: " + str3, 30, GameCanvas.h - (GameCanvas.h - 25), 0);
		mFont.tahoma_7b_white.drawString(g, "MP: " + str4, 30, GameCanvas.h - (GameCanvas.h - 35), 0);
		mFont.tahoma_7b_white.drawString(g, str + " " + str2 + " ", 30, GameCanvas.h - (GameCanvas.h - 10), 0);
		mFont.tahoma_7b_white.drawString(g, AutoBroly.Map.ToString() + " " + AutoBroly.Khu.ToString() + " ", GameCanvas.w - 30, GameCanvas.h - (GameCanvas.h - 10), 0);
	}

	// Token: 0x06000CFC RID: 3324
	public static int Max(int a, int b)
	{
		if (a <= b)
		{
			return b;
		}
		return a;
	}

	// Token: 0x06000CFD RID: 3325
	public static int Min(int a, int b)
	{
		if (a >= b)
		{
			return b;
		}
		return a;
	}

	// Token: 0x06000CFE RID: 3326
	public static int Abs(int x)
	{
		if (x >= 0)
		{
			return x;
		}
		return -x;
	}

	// Token: 0x06000CFF RID: 3327
	public static void KichSuper()
	{
		if (DataAccount.Type != 1)
		{
			return;
		}
		global::Char broly = null;
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char ch = (global::Char)GameScr.vCharInMap.elementAt(i);
			if (ch != null && ch.cName.Contains("Broly") && !ch.cName.Contains("Super"))
			{
				broly = ch;
				break;
			}
		}
		if (broly == null)
		{
			return;
		}
		int myX = global::Char.myCharz().cx;
		int brolyX = broly.cx;
		if (AutoBroly.Abs(myX - brolyX) <= 100 && (AutoBroly.TimeStartWait == 0L || mSystem.currentTimeMillis() - AutoBroly.TimeStartWait >= 300L))
		{
			int dir = (myX < brolyX) ? -1 : 1;
			int newX = brolyX + dir * 100;
			if (newX < 0 || newX > TileMap.pxw)
			{
				newX = brolyX - dir * 100;
				newX = AutoBroly.Max(0, AutoBroly.Min(TileMap.pxw, newX));
			}
			if (AutoBroly.Abs(myX - newX) > 0)
			{
				KsSupper.TelePortTo(newX, global::Char.myCharz().cy);
			}
			AutoBroly.TimeStartWait = mSystem.currentTimeMillis();
		}
	}

	// Token: 0x06000E5B RID: 3675
	public static int Home()
	{
		if (global::Char.myCharz().cgender == 0)
		{
			return 22;
		}
		if (global::Char.myCharz().cgender == 1)
		{
			return 23;
		}
		if (global::Char.myCharz().cgender == 2)
		{
			return 21;
		}
		return -1;
	}

	// Token: 0x0400004D RID: 77
	public static string TrangThai = "Không có thông tin";

	// Token: 0x0400004E RID: 78
	public static int Map = -1;

	// Token: 0x0400004F RID: 79
	public static int Khu = -1;

	// Token: 0x04000050 RID: 80
	private static bool IsWait;

	// Token: 0x04000051 RID: 81
	private static long TimeStartWait;

	// Token: 0x04000052 RID: 82
	private static long TimeWait;

	// Token: 0x04000053 RID: 83
	public static bool isDoKhu = false;

	// Token: 0x04000054 RID: 84
	private static HashSet<int> visitedZones = new HashSet<int>();

	// Token: 0x04000055 RID: 85
	private static Random random = new Random();

	// Token: 0x04000056 RID: 86
	public static int NhayNe = 0;
}
using System;
using System.IO;
using AssemblyCSharp.Mod.Xmap;

// Token: 0x0200001F RID: 31
internal class AutoBuff
{
	// Token: 0x060000EE RID: 238 RVA: 0x0000997C File Offset: 0x00007B7C
	public static void DoiKhu()
	{
		bool flag = TileMap.mapID == AutoBuff.Map && AutoBuff.Map >= 0 && !Pk9rXmap.IsXmapRunning && TileMap.zoneID != AutoBuff.Khu && AutoBuff.Khu >= 0;
		if (flag)
		{
			Service.gI().requestChangeZone(AutoBuff.Khu, -1);
		}
	}

	// Token: 0x060000EF RID: 239 RVA: 0x000099D8 File Offset: 0x00007BD8
	public static void RunToMap()
	{
		bool flag = TileMap.mapID != AutoBuff.Map && AutoBuff.Map >= 0 && !Pk9rXmap.IsXmapRunning;
		if (flag)
		{
			XmapController.StartRunToMapId(AutoBuff.Map);
		}
	}

	// Token: 0x060000F0 RID: 240 RVA: 0x00009A18 File Offset: 0x00007C18
	public static void GetInFor()
	{
		string str = string.Format("Nro_244_Data//Resources//Setting//acc{0}", AutoBuff.ID);
		string path = str + "//map";
		string path2 = str + "//khu";
		string path3 = str + "//toado";
		string path4 = str + "//buffname";
		string path5 = str + "//hopthe";
		try
		{
			bool flag = File.Exists(path);
			if (flag)
			{
				AutoBuff.Map = int.Parse(File.ReadAllText(path).Split(new char[]
				{
					'.'
				})[0]);
			}
			bool flag2 = File.Exists(path2);
			if (flag2)
			{
				AutoBuff.Khu = int.Parse(File.ReadAllText(path2));
			}
			bool flag3 = File.Exists(path3);
			if (flag3)
			{
				AutoBuff.X = int.Parse(File.ReadAllText(path3).Split(new char[]
				{
					'-'
				})[0]);
				AutoBuff.Y = int.Parse(File.ReadAllText(path3).Split(new char[]
				{
					'-'
				})[1]);
			}
			bool flag4 = File.Exists(path4);
			if (flag4)
			{
				AutoBuff.CharNameBuff = File.ReadAllText(path4).Split(new char[]
				{
					','
				})[0];
				AutoBuff.HpBuff = double.Parse(File.ReadAllText(path4).Split(new char[]
				{
					','
				})[1]);
			}
			bool flag5 = !File.Exists(path4);
			if (flag5)
			{
				AutoBuff.CharNameBuff = "s4thanhvo";
				AutoBuff.HpBuff = 100.0;
			}
			bool flag6 = File.Exists(path5);
			if (flag6)
			{
				bool flag7 = GameCanvas.gameTick % 100 == 0 && (global::Char.myCharz().cHP < global::Char.myCharz().cHPFull / 15L || global::Char.myCharz().cMP < global::Char.myCharz().cMPFull / 15L);
				if (flag7)
				{
					AutoBuff.AutoBongTai();
				}
			}
		}
		catch (Exception ex)
		{
			GameScr.info1.addInfo(ex.Message, 0);
		}
	}

	// Token: 0x060000F1 RID: 241 RVA: 0x00009C30 File Offset: 0x00007E30
	public static void AutoBongTai()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 454 || item.template.id == 921);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x060000F2 RID: 242 RVA: 0x00009CB8 File Offset: 0x00007EB8
	public static void ChangeFlagChar()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.charID > 0 && AutoBuff.CharNameBuff != null && @char.cName.Contains(AutoBuff.CharNameBuff);
			if (flag)
			{
				bool flag2 = global::Char.myCharz().cFlag != @char.cFlag;
				if (flag2)
				{
					Service.gI().getFlag(1, @char.cFlag);
					break;
				}
			}
		}
	}

	// Token: 0x060000F3 RID: 243 RVA: 0x00009D54 File Offset: 0x00007F54
	public static void BuffToCHarHP()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.charID > 0 && AutoBuff.CharNameBuff != null && @char.cName.Contains(AutoBuff.CharNameBuff);
			if (flag)
			{
				double num = (double)@char.cHP / (double)@char.cHPFull * 100.0;
				bool flag2 = num >= 0.0 && num < AutoBuff.HpBuff;
				if (flag2)
				{
					AutoBuff.Skill3();
					break;
				}
			}
		}
	}

	// Token: 0x060000F4 RID: 244 RVA: 0x00009E04 File Offset: 0x00008004
	public static void TelePortTo(int x, int y)
	{
		global::Char @char = global::Char.myCharz();
		@char.cx = x;
		@char.cy = y;
		Service.gI().charMove();
		bool flag = !ItemTime.isExistItem(4387);
		if (flag)
		{
			@char.cx = x;
			@char.cy = y + 1;
			Service.gI().charMove();
			@char.cx = x;
			@char.cy = y;
			Service.gI().charMove();
		}
	}

	// Token: 0x060000F5 RID: 245 RVA: 0x00009E78 File Offset: 0x00008078
	public static bool ToaDo()
	{
		return Res.distance(AutoBuff.X, AutoBuff.Y, global::Char.myCharz().cx, global::Char.myCharz().cy) > 100 && AutoBuff.X > 0 && AutoBuff.Y > 0;
	}

	// Token: 0x060000F6 RID: 246 RVA: 0x00009ED0 File Offset: 0x000080D0
	public static void Up()
	{
		bool flag = AutoBuff.ToaDo() && TileMap.mapID == AutoBuff.Map && TileMap.zoneID == AutoBuff.Khu;
		if (flag)
		{
			AutoBuff.TelePortTo(AutoBuff.X, AutoBuff.Y);
		}
	}

	// Token: 0x060000F7 RID: 247 RVA: 0x00009F18 File Offset: 0x00008118
	public static void Update()
	{
		bool flag = GameCanvas.gameTick % 150 == 0;
		if (flag)
		{
			AutoBuff.RunToMap();
		}
		bool flag2 = GameCanvas.gameTick % 200 == 0;
		if (flag2)
		{
			AutoBuff.DoiKhu();
		}
		bool flag3 = GameCanvas.gameTick % 100 == 0;
		if (flag3)
		{
			AutoBuff.GetInFor();
		}
		bool flag4 = GameCanvas.gameTick % 500 == 0;
		if (flag4)
		{
			AutoBuff.Up();
		}
		bool flag5 = GameCanvas.gameTick % 200 == 0;
		if (flag5)
		{
			AutoBuff.ChangeFlagChar();
		}
		bool flag6 = GameCanvas.gameTick % 150 == 0;
		if (flag6)
		{
			AutoBuff.BuffToCHarHP();
		}
	}

	// Token: 0x060000F8 RID: 248 RVA: 0x00009FC4 File Offset: 0x000081C4
	public static void buffme()
	{
		Skill skill;
		bool flag = !AutoBuff.canBuffme(out skill);
		if (!flag)
		{
			Service.gI().selectSkill(7);
			Service.gI().sendPlayerAttack(new MyVector(), AutoBuff.getMyVectorMe(), -1);
			Service.gI().selectSkill((int)global::Char.myCharz().myskill.template.id);
			skill.lastTimeUseThisSkill = mSystem.currentTimeMillis();
		}
	}

	// Token: 0x060000F9 RID: 249 RVA: 0x0000A030 File Offset: 0x00008230
	private static bool canBuffme(out Skill skillBuff)
	{
		skillBuff = global::Char.myCharz().getSkill(new SkillTemplate
		{
			id = 7
		});
		bool flag = skillBuff == null;
		return !flag;
	}

	// Token: 0x060000FA RID: 250 RVA: 0x0000A06C File Offset: 0x0000826C
	private static MyVector getMyVectorMe()
	{
		MyVector myVector = new MyVector();
		myVector.addElement(global::Char.myCharz());
		return myVector;
	}

	// Token: 0x060000FB RID: 251 RVA: 0x0000A094 File Offset: 0x00008294
	public static void Skill3()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && skill.template.id == 7 && GameScr.timehoichieubuff <= 0L;
			if (flag)
			{
				AutoBuff.buffme();
				break;
			}
		}
	}

	// Token: 0x04000094 RID: 148
	public static int Map = -1;

	// Token: 0x04000095 RID: 149
	public static int Khu = -1;

	// Token: 0x04000096 RID: 150
	public static int X;

	// Token: 0x04000097 RID: 151
	public static int Y;

	// Token: 0x04000098 RID: 152
	public static string CharNameBuff;

	// Token: 0x04000099 RID: 153
	public static double HpBuff;

	// Token: 0x0400009A RID: 154
	public const sbyte idskillbuff = 7;

	// Token: 0x0400009B RID: 155
	public static int ID;
}
using System;

// Token: 0x0200002E RID: 46
internal class AutoOut
{
	// Token: 0x060002B0 RID: 688 RVA: 0x000285CC File Offset: 0x000267CC
	public static void TimeOut()
	{
		bool flag = !AutoOut.meow;
		if (flag)
		{
			Random random = new Random();
			AutoOut.timechecklag = random.Next(AutoOut.Min, AutoOut.Max);
			AutoOut.meow = true;
		}
		bool flag2 = mSystem.currentTimeMillis() - AutoOut.thoigian >= 1000L;
		if (flag2)
		{
			AutoOut.checklag++;
		}
		bool flag3 = AutoOut.checklag >= AutoOut.timechecklag;
		if (flag3)
		{
			GameCanvas.startOKDlg("Let him cooooook !!!");
			Main.exit();
		}
	}

	// Token: 0x04000394 RID: 916
	public static bool meow = false;

	// Token: 0x04000395 RID: 917
	public static int checklag;

	// Token: 0x04000396 RID: 918
	public static int timechecklag;

	// Token: 0x04000397 RID: 919
	public static long thoigian;

	// Token: 0x04000398 RID: 920
	public static int Min = 360000;

	// Token: 0x04000399 RID: 921
	public static int Max = 540000;
}
using System;

// Token: 0x02000021 RID: 33
internal class AutoPean
{
	// Token: 0x06000102 RID: 258
	public static int Home()
	{
		if (global::Char.myCharz().cgender == 0)
		{
			return 22;
		}
		if (global::Char.myCharz().cgender == 1)
		{
			return 23;
		}
		if (global::Char.myCharz().cgender == 2)
		{
			return 21;
		}
		return -1;
	}

	// Token: 0x06000103 RID: 259
	private static void Wait(int time)
	{
		AutoPean.IsWait = true;
		AutoPean.TimeStartWait = mSystem.currentTimeMillis();
		AutoPean.TimeWait = (long)time;
	}

	// Token: 0x06000104 RID: 260
	private static bool IsWaiting()
	{
		if (AutoPean.IsWait && mSystem.currentTimeMillis() - AutoPean.TimeStartWait >= AutoPean.TimeWait)
		{
			AutoPean.IsWait = false;
		}
		return AutoPean.IsWait;
	}

	// Token: 0x06000105 RID: 261
	public static void Update()
	{
		if (!AutoPean.IsWaiting())
		{
			if (DataAccount.Type == 3 && TileMap.mapID == AutoPean.Home())
			{
				int numPeasInBag = AutoPean.CountPeasInBag();
				Console.WriteLine("Đang kiểm tra đậu trong hành trang: " + numPeasInBag);
				if (numPeasInBag <= 20)
				{
					Console.WriteLine("Số lượng đậu trong hành trang <= 20, bắt đầu thu đậu.");
					AutoPean.GetPeasFromBox();
					AutoPean.ThuDauTuCay();
					AutoPean.Wait(2000);
					return;
				}
				Console.WriteLine("Số lượng đậu trong hành trang đã đủ (> 20). Không làm gì.");
				return;
			}
			else
			{
				Console.WriteLine("Không ở nhà hoặc không phải type 3, không làm gì.");
				if (DataAccount.Type == 3 && TileMap.mapID == AutoPean.Home() && ((double)global::Char.myCharz().cHP <= (double)global::Char.myCharz().cHPFull * 0.05 || (double)global::Char.myCharz().cMP <= (double)global::Char.myCharz().cMPFull * 0.05))
				{
					Console.WriteLine("HP hoặc Ki dưới 5%, bắt đầu ăn đậu.");
					AutoPean.EatPeas();
					AutoPean.Wait(2000);
					return;
				}
			}
		}
	}

	// Token: 0x06000E05 RID: 3589
	public static int CountPeasInBag()
	{
		int num = 0;
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			if (item != null && item.template.type == 6)
			{
				num += item.quantity;
			}
		}
		return num;
	}

	// Token: 0x06000E06 RID: 3590
	public static void GetPeasFromBox()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBox.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBox[i];
			if (item != null && item.template.type == 6)
			{
				Console.WriteLine("Đang lấy đậu từ hộp đồ: " + item.quantity);
				Service.gI().getItem(1, (sbyte)i);
			}
		}
	}

	// Token: 0x06000E07 RID: 3591
	public static void ThuDauTuCay()
	{
		if (GameScr.gI().magicTree.currPeas > 0)
		{
			Console.WriteLine("Đang thu đậu từ cây kỳ diệu.");
			Service.gI().openMenu(4);
			Service.gI().confirmMenu(4, 0);
			return;
		}
		Console.WriteLine("Cây kỳ diệu không có đậu để thu.");
	}

	// Token: 0x06000E2C RID: 3628
	public static void EatPeas()
	{
		if (AutoPean.CountPeasInBag() > 0)
		{
			Console.WriteLine("Đã ăn đậu.");
			Service.gI().useItem(0, 1, 0, 100);
			return;
		}
		Console.WriteLine("Không có đậu để ăn.");
	}

	// Token: 0x0400009C RID: 156
	private static bool IsWait;

	// Token: 0x0400009D RID: 157
	private static long TimeStartWait;

	// Token: 0x0400009E RID: 158
	private static long TimeWait;
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using AssemblyCSharp.Mod.Xmap;

// Token: 0x02000022 RID: 34
internal class AutoPet
{
	// Token: 0x06000107 RID: 263 RVA: 0x0000A460 File Offset: 0x00008660
	public static bool isBagFull()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			bool flag = global::Char.myCharz().arrItemBag[i] == null;
			if (flag)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x06000108 RID: 264 RVA: 0x0000A4B0 File Offset: 0x000086B0
	public static bool isMuabua()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1628 && item.quantity >= 1;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000109 RID: 265 RVA: 0x0000A524 File Offset: 0x00008724
	public static void AnBuaX2()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1628 && !ItemTime.isExistItem((int)item.template.iconID);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x0600010A RID: 266 RVA: 0x0000A5AC File Offset: 0x000087AC
	public static void findUron()
	{
		for (int i = 0; i < GameScr.vNpc.size(); i++)
		{
			Npc npc = (Npc)GameScr.vNpc.elementAt(i);
			bool flag = npc != null && npc.template.npcTemplateId == 16;
			if (flag)
			{
				global::Char.myCharz().currentMovePoint = new MovePoint(npc.cx, npc.cy - 10);
				break;
			}
		}
	}

	// Token: 0x0600010B RID: 267 RVA: 0x0000A620 File Offset: 0x00008820
	public static void findSanta()
	{
		for (int i = 0; i < GameScr.vNpc.size(); i++)
		{
			Npc npc = (Npc)GameScr.vNpc.elementAt(i);
			bool flag = npc != null && npc.template.npcTemplateId == 39;
			if (flag)
			{
				global::Char.myCharz().currentMovePoint = new MovePoint(npc.cx, npc.cy - 10);
				break;
			}
		}
	}

	// Token: 0x0600010C RID: 268 RVA: 0x0000A694 File Offset: 0x00008894
	public static void XacNhan()
	{
		TField tfield = new TField();
		tfield.setText("5");
		Service.gI().sendClientInput(new TField[]
		{
			tfield
		});
		GameScr.gI().switchToMe();
	}

	// Token: 0x0600010D RID: 269 RVA: 0x0000A6D4 File Offset: 0x000088D4
	public static void MuabuaAndGoback()
	{
		bool flag = GameCanvas.gameTick % 30 == 0 && !AutoPet.isMuabua();
		if (flag)
		{
			bool flag2 = !AutoPet.isBuyItem;
			if (flag2)
			{
				AutoPet.isBuyItem = true;
			}
		}
		bool flag3 = AutoPet.isBuyItem;
		if (flag3)
		{
			bool flag4 = TileMap.mapID != 5 && !Pk9rXmap.IsXmapRunning;
			if (flag4)
			{
				XmapController.StartRunToMapId(5);
			}
			bool flag5 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID == 5 && !AutoPet.isbua;
			if (flag5)
			{
				AutoPet.isbua = true;
				new Thread(new ThreadStart(AutoPet.Buy)).Start();
			}
		}
	}

	// Token: 0x0600010E RID: 270 RVA: 0x0000A780 File Offset: 0x00008980
	public static void Buy()
	{
		Thread.Sleep(5000);
		AutoPet.findSanta();
		Thread.Sleep(10000);
		GameScr.info1.addInfo("Đang Bú Cỏ", 0);
		Service.gI().openMenu(39);
		Service.gI().menu(39, 0, 0);
		Thread.Sleep(2000);
		foreach (Item[] array in global::Char.myCharz().arrItemShop)
		{
			foreach (Item item in array)
			{
				bool flag = item != null && item.template.id == 1628;
				if (flag)
				{
					Service.gI().buyItem(0, 1628, 1);
					Thread.Sleep(1000);
					AutoPet.XacNhan();
					break;
				}
			}
		}
		Thread.Sleep(5000);
		GameScr.info1.addInfo("Mua xong, Quay lại map!", 0);
		Thread.Sleep(3000);
		AutoPet.isBuyItem = false;
		AutoPet.isbua = false;
	}

	// Token: 0x0600010F RID: 271 RVA: 0x0000A898 File Offset: 0x00008A98
	public static void SellItemAndGOback()
	{
		bool flag = GameCanvas.gameTick % 30 == 0 && AutoPet.isBagFull();
		if (flag)
		{
			bool flag2 = !AutoPet.isBando;
			if (flag2)
			{
				AutoPet.isBando = true;
			}
		}
		bool flag3 = AutoPet.isBando;
		if (flag3)
		{
			bool flag4 = TileMap.mapID != 26 && !Pk9rXmap.IsXmapRunning;
			if (flag4)
			{
				XmapController.StartRunToMapId(26);
			}
			bool flag5 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID == 26 && !AutoPet.isSellItem;
			if (flag5)
			{
				AutoPet.isSellItem = true;
				new Thread(new ThreadStart(AutoPet.Sell)).Start();
			}
		}
	}

	// Token: 0x06000110 RID: 272 RVA: 0x0000A944 File Offset: 0x00008B44
	public static void Sell()
	{
		Thread.Sleep(5000);
		AutoPet.findUron();
		Thread.Sleep(5000);
		GameScr.info1.addInfo("Đang bán đồ", 0);
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.type <= 4 && !AutoPet.itemKh(item) && !AutoPet.itemStar(item) && !AutoPet.itemGod(item) && !AutoPet.itemTs(item);
			if (flag)
			{
				Service.gI().saleItem(0, 1, (short)i);
				Service.gI().saleItem(1, 1, (short)i);
				Thread.Sleep(1000);
			}
			Thread.Sleep(1000);
		}
		Thread.Sleep(5000);
		GameScr.info1.addInfo("Bán xong, Quay lại map!", 0);
		Thread.Sleep(3000);
		AutoPet.isSellItem = false;
		AutoPet.isBando = false;
	}

	// Token: 0x06000111 RID: 273 RVA: 0x0000AA58 File Offset: 0x00008C58
	public static bool itemStar(Item item)
	{
		bool result = false;
		for (int i = 0; i < item.itemOption.Length; i++)
		{
			bool flag = item.itemOption[i].optionTemplate.name.StartsWith("#") && item.itemOption[i].optionTemplate.id == 107 && item.itemOption[i].param >= 3;
			if (flag)
			{
				return true;
			}
		}
		return result;
	}

	// Token: 0x06000112 RID: 274 RVA: 0x0000AADC File Offset: 0x00008CDC
	public static bool itemKh(Item item)
	{
		bool result = false;
		for (int i = 0; i < item.itemOption.Length; i++)
		{
			bool flag = item.itemOption[i].optionTemplate.name.StartsWith("$");
			if (flag)
			{
				return true;
			}
		}
		return result;
	}

	// Token: 0x06000113 RID: 275 RVA: 0x0000AB34 File Offset: 0x00008D34
	public static bool itemGod(Item item)
	{
		bool flag = false;
		bool flag2 = item.template.name.Contains("Thần");
		return flag2 || flag;
	}

	// Token: 0x06000114 RID: 276 RVA: 0x0000AB68 File Offset: 0x00008D68
	public static bool itemTs(Item item)
	{
		bool flag = false;
		bool flag2 = item.template.name.Contains("Thiên Sứ");
		return flag2 || flag;
	}

	// Token: 0x06000115 RID: 277 RVA: 0x0000AB9C File Offset: 0x00008D9C
	public static void AutoDuiGa()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag = itemMap != null && itemMap.template.id == 74;
			if (flag)
			{
				Service.gI().pickItem(itemMap.itemMapID);
				break;
			}
		}
	}

	// Token: 0x06000116 RID: 278 RVA: 0x0000AC04 File Offset: 0x00008E04
	private static void AutoUseSkill(int Indexskill)
	{
		bool flag = Indexskill > GameScr.onScreenSkill.Length;
		if (flag)
		{
			Indexskill = 0;
		}
		bool flag2 = Indexskill < 0;
		if (flag2)
		{
			Indexskill = 0;
		}
		bool flag3 = GameScr.onScreenSkill[Indexskill] != null && !GameScr.gI().isCharging() && !GameScr.onScreenSkill[Indexskill].paintCanNotUseSkill && mSystem.currentTimeMillis() - AutoPet.delayChangeskill >= 170L;
		if (flag3)
		{
			bool flag4 = AutoPet.delayUseskill[Indexskill] == -1L;
			if (flag4)
			{
				GameScr.gI().doUseSkill(GameScr.onScreenSkill[Indexskill], true);
				AutoPet.currenuseskill[Indexskill] = mSystem.currentTimeMillis();
				AutoPet.delayChangeskill = mSystem.currentTimeMillis();
			}
			bool flag5 = mSystem.currentTimeMillis() - AutoPet.currenuseskill[Indexskill] >= AutoPet.delayUseskill[Indexskill];
			if (flag5)
			{
				GameScr.gI().doUseSkillNotFocus(GameScr.onScreenSkill[Indexskill]);
				AutoPet.currenuseskill[Indexskill] = mSystem.currentTimeMillis();
				AutoPet.delayChangeskill = mSystem.currentTimeMillis();
			}
		}
	}

	// Token: 0x06000117 RID: 279 RVA: 0x0000ACFC File Offset: 0x00008EFC
	private static void AutoUseSkillSpecial(int Indexskill)
	{
		bool flag = Indexskill > GameScr.onScreenSkill.Length;
		if (flag)
		{
			Indexskill = 0;
		}
		bool flag2 = Indexskill < 0;
		if (flag2)
		{
			Indexskill = 0;
		}
		bool flag3 = GameScr.onScreenSkill[Indexskill] != null && !GameScr.gI().isCharging() && !GameScr.onScreenSkill[Indexskill].paintCanNotUseSkill && mSystem.currentTimeMillis() - AutoPet.delayChangeskill >= 170L;
		if (flag3)
		{
			bool flag4 = AutoPet.delayUseskill[Indexskill] == -1L;
			if (flag4)
			{
				GameScr.gI().doSelectSkill(GameScr.onScreenSkill[Indexskill], true);
				GameScr.gI().doSelectSkill(GameScr.onScreenSkill[Indexskill], true);
				AutoPet.currenuseskill[Indexskill] = mSystem.currentTimeMillis();
				AutoPet.delayChangeskill = mSystem.currentTimeMillis();
			}
			bool flag5 = mSystem.currentTimeMillis() - AutoPet.currenuseskill[Indexskill] >= AutoPet.delayUseskill[Indexskill];
			if (flag5)
			{
				GameScr.gI().doSelectSkill(GameScr.onScreenSkill[Indexskill], true);
				GameScr.gI().doSelectSkill(GameScr.onScreenSkill[Indexskill], true);
				AutoPet.currenuseskill[Indexskill] = mSystem.currentTimeMillis();
				AutoPet.delayChangeskill = mSystem.currentTimeMillis();
			}
		}
	}

	// Token: 0x06000118 RID: 280 RVA: 0x0000AE1C File Offset: 0x0000901C
	public static void buffme()
	{
		Skill skill;
		bool flag = !AutoPet.canBuffme(out skill);
		if (!flag)
		{
			Service.gI().selectSkill(7);
			Service.gI().sendPlayerAttack(new MyVector(), AutoPet.getMyVectorMe(), -1);
			Service.gI().selectSkill((int)global::Char.myCharz().myskill.template.id);
			skill.lastTimeUseThisSkill = mSystem.currentTimeMillis();
		}
	}

	// Token: 0x06000119 RID: 281 RVA: 0x0000AE88 File Offset: 0x00009088
	private static bool canBuffme(out Skill skillBuff)
	{
		skillBuff = global::Char.myCharz().getSkill(new SkillTemplate
		{
			id = 7
		});
		bool flag = skillBuff == null;
		return !flag;
	}

	// Token: 0x0600011A RID: 282 RVA: 0x0000AEC4 File Offset: 0x000090C4
	private static MyVector getMyVectorMe()
	{
		MyVector myVector = new MyVector();
		myVector.addElement(global::Char.myCharz());
		return myVector;
	}

	// Token: 0x0600011B RID: 283 RVA: 0x0000AEEC File Offset: 0x000090EC
	public static void Khiennangluong()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && skill.template.id == 19 && AutoPet.delayUseskill[i] < 1L && GameScr.timehoikhien <= 0L;
			if (flag)
			{
				AutoPet.AutoUseSkill(i);
			}
		}
	}

	// Token: 0x0600011C RID: 284 RVA: 0x0000AF54 File Offset: 0x00009154
	public static void Skill3()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && (skill.template.id == 6 || skill.template.id == 8) && AutoPet.delayUseskill[i] < 1L && GameScr.timehoiskill3 <= 0L;
			if (flag)
			{
				AutoPet.AutoUseSkill(i);
				break;
			}
			bool flag2 = skill != null && skill.template.id == 7 && AutoPet.delayUseskill[i] < 1L && GameScr.timehoichieubuff <= 0L;
			if (flag2)
			{
				AutoPet.buffme();
				break;
			}
		}
	}

	// Token: 0x0600011D RID: 285 RVA: 0x0000B00C File Offset: 0x0000920C
	public static void Skill9()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && (skill.template.id == 24 || skill.template.id == 25 || skill.template.id == 26) && AutoPet.delayUseskill[i] < 1L && GameScr.timehoiskill9 <= 0L;
			if (flag)
			{
				AutoPet.AutoUseSkillSpecial(i);
				break;
			}
		}
	}

	// Token: 0x0600011E RID: 286 RVA: 0x0000B094 File Offset: 0x00009294
	public static void TelePortTo(int x, int y)
	{
		global::Char @char = global::Char.myCharz();
		@char.cx = x;
		@char.cy = y;
		Service.gI().charMove();
		bool flag = !ItemTime.isExistItem(4387);
		if (flag)
		{
			@char.cx = x;
			@char.cy = y + 1;
			Service.gI().charMove();
			@char.cx = x;
			@char.cy = y;
			Service.gI().charMove();
		}
	}

	// Token: 0x0600011F RID: 287 RVA: 0x0000B108 File Offset: 0x00009308
	public static bool isvt()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag = itemMap != null && itemMap.template.id == 343;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000120 RID: 288 RVA: 0x0000B16C File Offset: 0x0000936C
	public static void Camvt()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 343;
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				Service.gI().useItem(3, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x06000121 RID: 289 RVA: 0x0000B1FC File Offset: 0x000093FC
	public static void autoitem()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			global::Char @char = global::Char.myCharz();
			bool flag = itemMap.playerId == @char.charID || itemMap.playerId == -1;
			bool flag2 = itemMap != null && itemMap.template.type <= 4 && flag;
			if (flag2)
			{
				bool flag3 = Res.distance(itemMap.x, itemMap.y, global::Char.myCharz().cx, global::Char.myCharz().cy) >= 100;
				if (flag3)
				{
					AutoPet.TelePortTo(itemMap.x, itemMap.y);
				}
				GameScr.info1.addInfo("Tránh ra cho bé nhặttttttttttt", 0);
				Service.gI().pickItem(itemMap.itemMapID);
				break;
			}
		}
	}

	// Token: 0x06000122 RID: 290 RVA: 0x0000B2EC File Offset: 0x000094EC
	public static bool ToaDo()
	{
		return Res.distance(AutoPet.X, AutoPet.Y, global::Char.myCharz().cx, global::Char.myCharz().cy) > 100 && AutoPet.X > 0 && AutoPet.Y > 0;
	}

	// Token: 0x06000123 RID: 291 RVA: 0x0000B344 File Offset: 0x00009544
	public static void Up()
	{
		bool flag = AutoPet.ToaDo() && TileMap.mapID == AutoPet.Map && TileMap.zoneID == AutoPet.Khu;
		if (flag)
		{
			AutoPet.TelePortTo(AutoPet.X, AutoPet.Y);
		}
	}

	// Token: 0x06000124 RID: 292 RVA: 0x0000B38C File Offset: 0x0000958C
	public static void DoiKhu()
	{
		bool flag = TileMap.mapID == AutoPet.Map && AutoPet.Map >= 0 && !Pk9rXmap.IsXmapRunning && TileMap.zoneID != AutoPet.Khu && AutoPet.Khu >= 0;
		if (flag)
		{
			Service.gI().requestChangeZone(AutoPet.Khu, -1);
		}
	}

	// Token: 0x06000125 RID: 293 RVA: 0x0000B3E8 File Offset: 0x000095E8
	public static void RunToMap()
	{
		bool flag = TileMap.mapID != AutoPet.Map && AutoPet.Map >= 0 && !Pk9rXmap.IsXmapRunning && !AutoPet.isBando && !AutoPet.isBuyItem;
		if (flag)
		{
			XmapController.StartRunToMapId(AutoPet.Map);
		}
	}

	// Token: 0x06000126 RID: 294 RVA: 0x0000B434 File Offset: 0x00009634
	public static void GetKiNang()
	{
		string str = string.Format("Nro_244_Data//Resources//Setting//acc{0}", AutoPet.ID);
		string path = str + "//sk3";
		string path2 = str + "//sk5";
		string path3 = str + "//sk9";
		try
		{
			bool flag = File.Exists(path);
			if (flag)
			{
				bool flag2 = GameCanvas.gameTick % 200 == 0;
				if (flag2)
				{
					AutoPet.Skill3();
				}
			}
			bool flag3 = File.Exists(path2);
			if (flag3)
			{
				bool flag4 = GameCanvas.gameTick % 300 == 0 && global::Char.myCharz().cMP > global::Char.myCharz().cMPFull / 2L;
				if (flag4)
				{
					AutoPet.Khiennangluong();
				}
			}
			bool flag5 = File.Exists(path3);
			if (flag5)
			{
				bool flag6 = GameCanvas.gameTick % 500 == 0 && global::Char.myCharz().cMP > global::Char.myCharz().cMPFull / 2L;
				if (flag6)
				{
					AutoPet.Skill9();
				}
			}
		}
		catch (Exception ex)
		{
			GameScr.info1.addInfo("Auto Skill: " + ex.Message, 0);
		}
	}

	// Token: 0x06000127 RID: 295 RVA: 0x0000B568 File Offset: 0x00009768
	public static void GetInFor()
	{
		string str = string.Format("Nro_244_Data//Resources//Setting//acc{0}", AutoPet.ID);
		string path = str + "//map";
		string path2 = str + "//khu";
		string path3 = str + "//X";
		string path4 = str + "//Y";
		string path5 = str + "//type";
		try
		{
			bool flag = File.Exists(path);
			if (flag)
			{
				AutoPet.Map = int.Parse(File.ReadAllText(path).Split(new char[]
				{
					'.'
				})[0]);
			}
			bool flag2 = File.Exists(path2);
			if (flag2)
			{
				AutoPet.Khu = int.Parse(File.ReadAllText(path2));
			}
			bool flag3 = File.Exists(path3);
			if (flag3)
			{
				AutoPet.X = int.Parse(File.ReadAllText(path3));
			}
			bool flag4 = File.Exists(path4);
			if (flag4)
			{
				AutoPet.Y = int.Parse(File.ReadAllText(path4));
			}
			bool flag5 = File.Exists(path5);
			if (flag5)
			{
				AutoPet.StatusPet = int.Parse(File.ReadAllText(path5).Split(new char[]
				{
					'.'
				})[0]);
			}
			bool flag6 = GameCanvas.gameTick % 100 == 0 && (int)global::Char.myPetz().petStatus != AutoPet.StatusPet;
			if (flag6)
			{
				Service.gI().petStatus((sbyte)AutoPet.StatusPet);
			}
		}
		catch (Exception ex)
		{
			GameScr.info1.addInfo(ex.Message, 0);
		}
	}

	// Token: 0x06000128 RID: 296 RVA: 0x0000B6F0 File Offset: 0x000098F0
	public static void GetChucNangDacBiet()
	{
		string str = string.Format("Nro_244_Data//Resources//Setting//acc{0}", AutoPet.ID);
		string path = str + "//bando";
		string path2 = str + "//muabua";
		try
		{
			bool flag = File.Exists(path);
			if (flag)
			{
				bool flag2 = GameCanvas.gameTick % 20 == 0;
				if (flag2)
				{
					AutoPet.SellItemAndGOback();
				}
			}
			bool flag3 = File.Exists(path2);
			if (flag3)
			{
				bool flag4 = GameCanvas.gameTick % 20 == 0;
				if (flag4)
				{
					AutoPet.MuabuaAndGoback();
				}
				bool flag5 = GameCanvas.gameTick % 200 == 0;
				if (flag5)
				{
					AutoPet.AnBuaX2();
				}
			}
		}
		catch
		{
		}
	}

	// Token: 0x06000129 RID: 297 RVA: 0x0000B7AC File Offset: 0x000099AC
	public static void GetChucNangPhu()
	{
		string str = string.Format("Nro_244_Data//Resources//Setting//acc{0}", AutoPet.ID);
		string path = str + "//kok";
		string path2 = str + "//batco";
		string path3 = str + "//goback";
		string text = str + "//aitem";
		string text2 = str + "//vitem";
		string path4 = str + "//neboss";
		try
		{
			bool flag = File.Exists(path4);
			if (flag)
			{
				bool flag2 = GameCanvas.gameTick % 100 == 0;
				if (flag2)
				{
					AutoPet.NeBossStart();
				}
			}
			bool flag3 = File.Exists(path);
			if (flag3)
			{
				bool flag4 = TileMap.mapID == AutoPet.Map && TileMap.zoneID == AutoPet.Khu;
				if (flag4)
				{
					bool flag5 = AutoPet.X > 0 && AutoPet.Y > 0;
					if (flag5)
					{
						bool flag6 = global::Char.myCharz().cx == AutoPet.X && global::Char.myCharz().cy == AutoPet.Y;
						if (flag6)
						{
							global::Char.myCharz().cx = AutoPet.X;
							global::Char.myCharz().cy = AutoPet.Y - 50;
							Service.gI().charMove();
						}
						bool flag7 = global::Char.myCharz().cx == AutoPet.X && global::Char.myCharz().cy == AutoPet.Y - 50;
						if (flag7)
						{
							global::Char.myCharz().cx = AutoPet.X;
							global::Char.myCharz().cy = AutoPet.Y;
							Service.gI().charMove();
						}
					}
				}
			}
			bool flag8 = File.Exists(path2);
			if (flag8)
			{
				bool flag9 = GameCanvas.gameTick % 100 == 0 && global::Char.myCharz().cFlag != 8;
				if (flag9)
				{
					Service.gI().getFlag(1, 8);
				}
			}
			bool flag10 = !File.Exists(path2);
			if (flag10)
			{
				bool flag11 = GameCanvas.gameTick % 100 == 0 && global::Char.myCharz().cFlag == 8;
				if (flag11)
				{
					Service.gI().getFlag(1, 0);
				}
			}
			bool flag12 = File.Exists(path3);
			if (flag12)
			{
				bool flag13 = GameCanvas.gameTick % 200 == 0 && (global::Char.myCharz().meDead || global::Char.myCharz().cHP <= 0L);
				if (flag13)
				{
					Service.gI().returnTownFromDead();
				}
			}
			bool flag14 = File.Exists(text);
			if (flag14)
			{
				bool flag15 = GameCanvas.gameTick % 20 == 0;
				if (flag15)
				{
					AutoPet.AddUse(text);
				}
				bool flag16 = !AutoPet.isanitem;
				if (flag16)
				{
					new Thread(new ThreadStart(AutoPet.AnItems)).Start();
				}
			}
			bool flag17 = File.Exists(text2);
			if (flag17)
			{
				bool flag18 = GameCanvas.gameTick % 20 == 0;
				if (flag18)
				{
					AutoPet.AddSale(text2);
				}
				bool flag19 = !AutoPet.isvutitem;
				if (flag19)
				{
					new Thread(new ThreadStart(AutoPet.VutItems)).Start();
				}
			}
			bool flag20 = AutoPet.VB.Count > 0 && !File.Exists(text2);
			if (flag20)
			{
				AutoPet.VB.Clear();
			}
			bool flag21 = AutoPet.SD.Count > 0 && !File.Exists(text);
			if (flag21)
			{
				AutoPet.SD.Clear();
			}
		}
		catch
		{
		}
	}

	// Token: 0x0600012A RID: 298 RVA: 0x0000BB3C File Offset: 0x00009D3C
	public static void NeBossStart()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			char c = char.Parse(@char.cName.Substring(0, 1));
			bool flag = @char != null && c >= 'A' && c <= 'Z' && !@char.cName.StartsWith("Đệ tử") && !@char.cName.StartsWith("Ăn trộm");
			if (flag)
			{
				Service.gI().requestChangeZone(-1, -1);
				break;
			}
		}
	}

	// Token: 0x0600012B RID: 299 RVA: 0x0000BBD8 File Offset: 0x00009DD8
	public static void AddUse(string filePath)
	{
		try
		{
			string[] array = File.ReadAllLines(filePath);
			foreach (string text in array)
			{
				IEnumerable<string> source = text.Split(new char[]
				{
					','
				}, StringSplitOptions.RemoveEmptyEntries);
				Func<string, int> selector;
				if ((selector = AutoPet.<>O.<0>__Parse) == null)
				{
					selector = (AutoPet.<>O.<0>__Parse = new Func<string, int>(int.Parse));
				}
				List<int> list = source.Select(selector).ToList<int>();
				foreach (int item in list)
				{
					bool flag = !AutoPet.SD.Contains(item);
					if (flag)
					{
						AutoPet.SD.Add(item);
					}
				}
			}
		}
		catch
		{
		}
	}

	// Token: 0x0600012C RID: 300 RVA: 0x0000BCC0 File Offset: 0x00009EC0
	public static void AddSale(string filePath)
	{
		try
		{
			string[] array = File.ReadAllLines(filePath);
			foreach (string text in array)
			{
				IEnumerable<string> source = text.Split(new char[]
				{
					','
				}, StringSplitOptions.RemoveEmptyEntries);
				Func<string, int> selector;
				if ((selector = AutoPet.<>O.<0>__Parse) == null)
				{
					selector = (AutoPet.<>O.<0>__Parse = new Func<string, int>(int.Parse));
				}
				List<int> list = source.Select(selector).ToList<int>();
				foreach (int item in list)
				{
					bool flag = !AutoPet.VB.Contains(item);
					if (flag)
					{
						AutoPet.VB.Add(item);
					}
				}
			}
		}
		catch
		{
		}
	}

	// Token: 0x0600012D RID: 301 RVA: 0x0000BDA8 File Offset: 0x00009FA8
	public static void AnItems()
	{
		AutoPet.isanitem = true;
		Thread.Sleep(3000);
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && AutoPet.SD.Contains((int)item.template.id) && !ItemTime.isExistItem((int)item.template.iconID);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				Thread.Sleep(2000);
			}
		}
		Thread.Sleep(5000);
		AutoPet.isanitem = false;
	}

	// Token: 0x0600012E RID: 302 RVA: 0x0000BE64 File Offset: 0x0000A064
	public static void VutItems()
	{
		AutoPet.isvutitem = true;
		Thread.Sleep(1000);
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && AutoPet.VB.Contains((int)item.template.id);
			if (flag)
			{
				Service.gI().useItem(1, 1, -1, item.template.id);
				Service.gI().useItem(2, 1, -1, item.template.id);
				Thread.Sleep(300);
			}
			Thread.Sleep(1000);
		}
		Thread.Sleep(1000);
		AutoPet.isvutitem = false;
	}

	// Token: 0x0600012F RID: 303 RVA: 0x0000BF30 File Offset: 0x0000A130
	public static void Painting(mGraphics g)
	{
		int h = GameCanvas.h;
		int w = GameCanvas.w;
		mFont.tahoma_7b_white.drawString(g, TileMap.mapNames[TileMap.mapID] + " - " + TileMap.zoneID.ToString(), w / 2, h - (h - 30), 0);
		mFont.tahoma_7b_white.drawString(g, "X: " + global::Char.myCharz().cx.ToString() + " - Y: " + global::Char.myCharz().cy.ToString(), w / 2, h - (h - 40), 0);
		int num = AutoOut.timechecklag - AutoOut.checklag;
		bool flag = num < 0;
		if (flag)
		{
			num = 0;
		}
		int num2 = num / 100;
		int num3 = num2 / 60;
		num2 %= 60;
		bool flag2 = DataAccount.Type == 1;
		if (flag2)
		{
			mFont.tahoma_7b_white.drawString(g, "Đệ tử : " + NinjaUtil.getMoneys(global::Char.myPetz().cPower), w / 10, h - (h - 70), 0);
			mFont.tahoma_7b_white.drawString(g, "HP :" + NinjaUtil.getMoneys(global::Char.myPetz().cHP) + " / " + NinjaUtil.getMoneys(global::Char.myPetz().cHPFull), w / 10, h - (h - 80), 0);
			mFont.tahoma_7b_white.drawString(g, "KI : " + NinjaUtil.getMoneys(global::Char.myPetz().cMP) + " / " + NinjaUtil.getMoneys(global::Char.myPetz().cMPFull), w / 10, h - (h - 90), 0);
			mFont.tahoma_7b_white.drawString(g, "SĐ : " + NinjaUtil.getMoneys(global::Char.myPetz().cDamFull), w / 10, h - (h - 100), 0);
			mFont.tahoma_7b_white.drawString(g, "DEF : " + NinjaUtil.getMoneys(global::Char.myPetz().cDefull), w / 10, h - (h - 110), 0);
		}
	}

	// Token: 0x06000130 RID: 304 RVA: 0x0000C118 File Offset: 0x0000A318
	public static void Update()
	{
		bool flag = GameCanvas.gameTick % 20 == 0 && TileMap.mapID == AutoPet.Map && TileMap.zoneID == AutoPet.Khu;
		if (flag)
		{
			AutoPet.autoitem();
		}
		bool flag2 = GameCanvas.gameTick % 20 == 0 && TileMap.mapID == global::Char.myCharz().cgender + 21;
		if (flag2)
		{
			AutoPet.AutoDuiGa();
		}
		bool flag3 = GameCanvas.gameTick % 100 == 0;
		if (flag3)
		{
			AutoPet.GetInFor();
			AutoPet.GetChucNangDacBiet();
			bool flag4 = TileMap.mapID == AutoPet.Map && TileMap.zoneID == AutoPet.Khu;
			if (flag4)
			{
				AutoPet.GetKiNang();
				AutoPet.GetChucNangPhu();
			}
		}
		bool flag5 = GameCanvas.gameTick % 150 == 0;
		if (flag5)
		{
			AutoPet.RunToMap();
		}
		bool flag6 = GameCanvas.gameTick % 200 == 0;
		if (flag6)
		{
			AutoPet.DoiKhu();
		}
		bool flag7 = GameCanvas.gameTick % 500 == 0;
		if (flag7)
		{
			AutoPet.Up();
		}
		bool flag8 = GameCanvas.gameTick % 200 == 0 && global::Char.myCharz().isNhapThe;
		if (flag8)
		{
			AutoPet.AutoBongTai();
		}
	}

	// Token: 0x06000131 RID: 305 RVA: 0x0000C24C File Offset: 0x0000A44C
	public static void findMobforPet()
	{
		AutoPet.findMobComplete = false;
		global::Char.myCharz().mobFocus = null;
		MyVector myVector = new MyVector();
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob = (Mob)GameScr.vMob.elementAt(i);
			bool flag = Res.distance(mob.x, mob.y, global::Char.myCharz().cx, global::Char.myCharz().cy) >= 100;
			if (flag)
			{
				myVector.addElement(mob);
				global::Char.myCharz().charFocus = null;
				global::Char.myCharz().npcFocus = null;
				GameScr.gI().doUseSkillNotFocus(GameScr.onScreenSkill[1]);
				global::Char.myCharz().mobFocus = mob;
				AutoPet.SendAttackToMobFocus();
				AutoPet.findMobComplete = true;
				break;
			}
		}
		bool flag2 = !AutoPet.findMobComplete;
		if (flag2)
		{
			AutoPet.findMobforPet();
		}
	}

	// Token: 0x06000132 RID: 306 RVA: 0x0000C338 File Offset: 0x0000A538
	private static void SendAttackToMobFocus()
	{
		try
		{
			MyVector myVector = new MyVector();
			myVector.addElement(global::Char.myCharz().mobFocus);
			Service.gI().sendPlayerAttack(myVector, new MyVector(), 1);
		}
		catch
		{
		}
	}

	// Token: 0x06000133 RID: 307 RVA: 0x0000C388 File Offset: 0x0000A588
	public static void AutoBongTai()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 454 || item.template.id == 921);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
			}
		}
	}

	// Token: 0x06000134 RID: 308 RVA: 0x0000C40C File Offset: 0x0000A60C
	public static void AnNho()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 211 || item.template.id == 212);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
			}
		}
	}

	// Token: 0x0400009F RID: 159
	public static int Map = -1;

	// Token: 0x040000A0 RID: 160
	public static int Khu = -1;

	// Token: 0x040000A1 RID: 161
	public static int X;

	// Token: 0x040000A2 RID: 162
	public static int Y;

	// Token: 0x040000A3 RID: 163
	public static int StatusPet;

	// Token: 0x040000A4 RID: 164
	public static int ID;

	// Token: 0x040000A5 RID: 165
	public static long[] delayUseskill = new long[10];

	// Token: 0x040000A6 RID: 166
	public static bool[] autoskillSeclect = new bool[10];

	// Token: 0x040000A7 RID: 167
	public static long[] currenuseskill = new long[10];

	// Token: 0x040000A8 RID: 168
	public static long delayChangeskill;

	// Token: 0x040000A9 RID: 169
	public static List<int> SD = new List<int>();

	// Token: 0x040000AA RID: 170
	public static List<int> VB = new List<int>();

	// Token: 0x040000AB RID: 171
	public static bool isSellItem = false;

	// Token: 0x040000AC RID: 172
	public static bool isBando = false;

	// Token: 0x040000AD RID: 173
	public static bool isBuyItem = false;

	// Token: 0x040000AE RID: 174
	public static bool isbua = false;

	// Token: 0x040000AF RID: 175
	public static long thoigian;

	// Token: 0x040000B0 RID: 176
	public const sbyte idskillbuff = 7;

	// Token: 0x040000B1 RID: 177
	public static bool isanitem = false;

	// Token: 0x040000B2 RID: 178
	public static bool isvutitem = false;

	// Token: 0x040000B3 RID: 179
	public static bool findMobComplete;

	// Token: 0x020000F9 RID: 249
	[CompilerGenerated]
	private static class <>O
	{
		// Token: 0x040016DF RID: 5855
		public static Func<string, int> <0>__Parse;
	}
}
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using AssemblyCSharp.Mod.PickMob;
using AssemblyCSharp.Mod.Xmap;
using Mod.DungPham.KoiOctiiu957;

// Token: 0x02000023 RID: 35
internal class AutoSKH
{
	// Token: 0x06000137 RID: 311 RVA: 0x0000C514 File Offset: 0x0000A714
	public static bool isMuabua()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1635 && item.quantity >= 1;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000138 RID: 312 RVA: 0x0000C588 File Offset: 0x0000A788
	public static bool iscatdo()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null;
			if (flag)
			{
				for (int j = 0; j < item.itemOption.Length; j++)
				{
					bool flag2 = item.itemOption[j].optionTemplate.name.StartsWith("$");
					if (flag2)
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	// Token: 0x06000139 RID: 313 RVA: 0x0000C61C File Offset: 0x0000A81C
	public static bool ishettdlt()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 521;
			if (flag)
			{
				for (int j = 0; j < item.itemOption.Length; j++)
				{
					bool flag2 = item.itemOption[j].optionTemplate.id == 1 && item.itemOption[j].param < 10;
					if (flag2)
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	// Token: 0x0600013A RID: 314 RVA: 0x0000C6D8 File Offset: 0x0000A8D8
	public static void SellItemAndGOback()
	{
		bool flag = GameCanvas.gameTick % 30 == 0 && AutoSKH.isBagFull();
		if (flag)
		{
			bool flag2 = !AutoSKH.isBando;
			if (flag2)
			{
				AutoSKH.isBando = true;
			}
		}
		bool flag3 = AutoSKH.isBando;
		if (flag3)
		{
			bool flag4 = TileMap.mapID != 26 && !Pk9rXmap.IsXmapRunning;
			if (flag4)
			{
				XmapController.StartRunToMapId(26);
			}
			bool flag5 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID == 26 && !AutoSKH.isSellItem;
			if (flag5)
			{
				AutoSKH.findUron();
				AutoSKH.isSellItem = true;
				new Thread(new ThreadStart(AutoSKH.Sell)).Start();
			}
		}
	}

	// Token: 0x0600013B RID: 315 RVA: 0x0000C788 File Offset: 0x0000A988
	public static void MuabuaAndGoback()
	{
		int num = int.Parse(File.ReadAllText(AutoSKH.slmua));
		int num2 = global::Char.myCharz().luong + global::Char.myCharz().luongKhoa;
		bool flag = GameCanvas.gameTick % 30 == 0 && !AutoSKH.isMuabua() && !AutoSKH.isBando && num2 > num * 10;
		if (flag)
		{
			bool flag2 = !AutoSKH.isBuyItem;
			if (flag2)
			{
				AutoSKH.isBuyItem = true;
			}
		}
		bool flag3 = AutoSKH.isBuyItem;
		if (flag3)
		{
			bool flag4 = TileMap.mapID != 5 && !Pk9rXmap.IsXmapRunning;
			if (flag4)
			{
				XmapController.StartRunToMapId(5);
			}
			bool flag5 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID == 5 && !AutoSKH.isbua;
			if (flag5)
			{
				AutoSKH.findSanta();
				AutoSKH.isbua = true;
				new Thread(new ThreadStart(AutoSKH.Buy)).Start();
			}
		}
	}

	// Token: 0x0600013C RID: 316 RVA: 0x0000C870 File Offset: 0x0000AA70
	public static void CatdoandGoback()
	{
		bool flag = GameCanvas.gameTick % 100 == 0 && AutoSKH.iscatdo() && !AutoSKH.isBando && !AutoSKH.isBuyItem && !AutoSKH.isBoxFull();
		if (flag)
		{
			bool flag2 = !AutoSKH.Chaydicat;
			if (flag2)
			{
				AutoSKH.Chaydicat = true;
			}
		}
		bool chaydicat = AutoSKH.Chaydicat;
		if (chaydicat)
		{
			bool flag3 = TileMap.mapID != global::Char.myCharz().cgender + 21 && !Pk9rXmap.IsXmapRunning;
			if (flag3)
			{
				XmapController.StartRunToMapId(global::Char.myCharz().cgender + 21);
			}
			bool flag4 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID == global::Char.myCharz().cgender + 21 && !AutoSKH.iscat;
			if (flag4)
			{
				AutoSKH.iscat = true;
				new Thread(new ThreadStart(AutoSKH.Cat)).Start();
			}
		}
	}

	// Token: 0x0600013D RID: 317 RVA: 0x0000C958 File Offset: 0x0000AB58
	public static void MuaTdltAndGoback()
	{
		int num = global::Char.myCharz().luong + global::Char.myCharz().luongKhoa;
		bool flag = GameCanvas.gameTick % 100 == 0 && AutoSKH.ishettdlt() && !ItemTime.isExistItem(4387) && !AutoSKH.isBando && !AutoSKH.isBuyItem && !AutoSKH.Chaydicat && num > 22;
		if (flag)
		{
			bool flag2 = !AutoSKH.MuaTdlt;
			if (flag2)
			{
				AutoSKH.MuaTdlt = true;
			}
		}
		bool muaTdlt = AutoSKH.MuaTdlt;
		if (muaTdlt)
		{
			bool flag3 = TileMap.mapID != 5 && !Pk9rXmap.IsXmapRunning;
			if (flag3)
			{
				XmapController.StartRunToMapId(5);
			}
			bool flag4 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID == 5 && !AutoSKH.istdlt;
			if (flag4)
			{
				AutoSKH.findSanta();
				AutoSKH.istdlt = true;
				new Thread(new ThreadStart(AutoSKH.BuyTDLT)).Start();
			}
		}
	}

	// Token: 0x0600013E RID: 318 RVA: 0x0000CA48 File Offset: 0x0000AC48
	public static void BuyTDLT()
	{
		Thread.Sleep(2000);
		AutoSKH.findSanta();
		Thread.Sleep(5000);
		GameScr.info1.addInfo("Đang Mua TDLT", 0);
		Service.gI().openMenu(39);
		Service.gI().menu(39, 0, 0);
		Service.gI().menu(39, 0, 0);
		Thread.Sleep(1000);
		Service.gI().buyItem(1, 1524, 1);
		Thread.Sleep(1000);
		Service.gI().buyItem(1, 1524, 1);
		Thread.Sleep(1000);
		Service.gI().buyItem(1, 1524, 1);
		Thread.Sleep(2000);
		GameScr.info1.addInfo("Mua xong, Quay lại map!", 0);
		Thread.Sleep(5000);
		AutoSKH.MuaTdlt = false;
		AutoSKH.istdlt = false;
	}

	// Token: 0x0600013F RID: 319 RVA: 0x0000CB38 File Offset: 0x0000AD38
	public static void findUron()
	{
		for (int i = 0; i < GameScr.vNpc.size(); i++)
		{
			Npc npc = (Npc)GameScr.vNpc.elementAt(i);
			bool flag = npc != null && npc.template.npcTemplateId == 16;
			if (flag)
			{
				global::Char.myCharz().currentMovePoint = new MovePoint(npc.cx, npc.cy - 10);
				break;
			}
		}
	}

	// Token: 0x06000140 RID: 320 RVA: 0x0000CBAC File Offset: 0x0000ADAC
	public static void findSanta()
	{
		for (int i = 0; i < GameScr.vNpc.size(); i++)
		{
			Npc npc = (Npc)GameScr.vNpc.elementAt(i);
			bool flag = npc != null && npc.template.npcTemplateId == 39;
			if (flag)
			{
				global::Char.myCharz().currentMovePoint = new MovePoint(npc.cx, npc.cy - 10);
				break;
			}
		}
	}

	// Token: 0x06000141 RID: 321 RVA: 0x0000CC20 File Offset: 0x0000AE20
	public static void XacNhan()
	{
		int num = int.Parse(File.ReadAllText(AutoSKH.slmua));
		TField tfield = new TField();
		tfield.setText(num.ToString());
		Service.gI().sendClientInput(new TField[]
		{
			tfield
		});
		GameScr.gI().switchToMe();
	}

	// Token: 0x06000142 RID: 322 RVA: 0x0000CC74 File Offset: 0x0000AE74
	public static void Cat()
	{
		Thread.Sleep(3000);
		GameScr.info1.addInfo("Đang cất đồ", 0);
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.type <= 4 && AutoSKH.itemKh(item);
			if (flag)
			{
				Service.gI().getItem(1, (sbyte)i);
				Thread.Sleep(1000);
				break;
			}
			Thread.Sleep(1000);
		}
		GameScr.info1.addInfo("Quay lại map!", 0);
		Thread.Sleep(3000);
		AutoSKH.iscat = false;
		AutoSKH.Chaydicat = false;
	}

	// Token: 0x06000143 RID: 323 RVA: 0x0000CD3C File Offset: 0x0000AF3C
	public static void Buy()
	{
		Thread.Sleep(5000);
		AutoSKH.findSanta();
		Thread.Sleep(10000);
		GameScr.info1.addInfo("Đang Bú Cỏ", 0);
		Service.gI().openMenu(39);
		Service.gI().menu(39, 0, 0);
		Service.gI().menu(39, 0, 0);
		Thread.Sleep(1000);
		Service.gI().buyItem(0, 1635, 1);
		Thread.Sleep(3000);
		AutoSKH.XacNhan();
		Thread.Sleep(5000);
		GameScr.info1.addInfo("Mua xong, Quay lại map!", 0);
		Thread.Sleep(3000);
		AutoSKH.isBuyItem = false;
		AutoSKH.isbua = false;
	}

	// Token: 0x06000144 RID: 324 RVA: 0x0000CE04 File Offset: 0x0000B004
	public static void Sell()
	{
		Thread.Sleep(5000);
		AutoSKH.findUron();
		Thread.Sleep(5000);
		GameScr.info1.addInfo("Đang bán đồ", 0);
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.type <= 4 && !AutoSKH.itemKh(item) && !AutoSKH.itemStar(item) && !AutoSKH.itemGod(item) && !AutoSKH.itemTs(item);
			if (flag)
			{
				Service.gI().saleItem(0, 1, (short)i);
				Service.gI().saleItem(1, 1, (short)i);
				Thread.Sleep(1000);
			}
			Thread.Sleep(1000);
		}
		Thread.Sleep(5000);
		GameScr.info1.addInfo("Bán xong, Quay lại map!", 0);
		Thread.Sleep(3000);
		AutoSKH.isSellItem = false;
		AutoSKH.isBando = false;
	}

	// Token: 0x06000145 RID: 325 RVA: 0x0000CF18 File Offset: 0x0000B118
	public static bool itemStar(Item item)
	{
		bool result = false;
		for (int i = 0; i < item.itemOption.Length; i++)
		{
			bool flag = item.itemOption[i].optionTemplate.name.StartsWith("#") && item.itemOption[i].optionTemplate.id == 107 && item.itemOption[i].param >= 3;
			if (flag)
			{
				return true;
			}
		}
		return result;
	}

	// Token: 0x06000146 RID: 326 RVA: 0x0000CF9C File Offset: 0x0000B19C
	public static bool itemKh(Item item)
	{
		bool result = false;
		for (int i = 0; i < item.itemOption.Length; i++)
		{
			bool flag = item.itemOption[i].optionTemplate.name.StartsWith("$");
			if (flag)
			{
				return true;
			}
		}
		return result;
	}

	// Token: 0x06000147 RID: 327 RVA: 0x0000CFF4 File Offset: 0x0000B1F4
	public static bool itemGod(Item item)
	{
		bool flag = false;
		bool flag2 = item.template.name.Contains("Thần");
		return flag2 || flag;
	}

	// Token: 0x06000148 RID: 328 RVA: 0x0000D028 File Offset: 0x0000B228
	public static bool itemTs(Item item)
	{
		bool flag = false;
		bool flag2 = item.template.name.Contains("Thiên Sứ");
		return flag2 || flag;
	}

	// Token: 0x06000149 RID: 329 RVA: 0x0000D05C File Offset: 0x0000B25C
	public static void AutoDuiGa()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag = itemMap != null && itemMap.template.id == 74;
			if (flag)
			{
				GameScr.info1.addInfo("Hồi sinh rồi :3", 0);
				Service.gI().pickItem(itemMap.itemMapID);
				break;
			}
		}
	}

	// Token: 0x0600014A RID: 330 RVA: 0x0000D0D4 File Offset: 0x0000B2D4
	public static void autoitem()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			global::Char @char = global::Char.myCharz();
			bool flag = itemMap.playerId == @char.charID || itemMap.playerId == -1;
			bool flag2 = itemMap != null && flag;
			if (flag2)
			{
				bool flag3 = Res.distance(itemMap.x, itemMap.y, global::Char.myCharz().cx, global::Char.myCharz().cy) <= 150;
				if (flag3)
				{
					bool flag4 = global::Char.myCharz().itemFocus != itemMap;
					if (flag4)
					{
						global::Char.myCharz().npcFocus = null;
						global::Char.myCharz().mobFocus = null;
						global::Char.myCharz().charFocus = null;
						global::Char.myCharz().itemFocus = itemMap;
					}
					Service.gI().pickItem(itemMap.itemMapID);
					break;
				}
			}
		}
	}

	// Token: 0x0600014B RID: 331 RVA: 0x0000D1D8 File Offset: 0x0000B3D8
	public static void DoiKhu()
	{
		bool flag = TileMap.mapID == AutoSKH.Map && AutoSKH.Map >= 0 && !Pk9rXmap.IsXmapRunning && TileMap.zoneID != AutoSKH.Khu && AutoSKH.Khu >= 0;
		if (flag)
		{
			Service.gI().requestChangeZone(AutoSKH.Khu, -1);
		}
	}

	// Token: 0x0600014C RID: 332 RVA: 0x0000D234 File Offset: 0x0000B434
	public static void RunToMap()
	{
		bool flag = global::Char.myCharz().cHP < global::Char.myCharz().cHPFull / 100L || global::Char.myCharz().cMP < global::Char.myCharz().cMPFull / 100L;
		int idMap = global::Char.myCharz().cgender + 21;
		bool flag2 = TileMap.mapID != AutoSKH.Map && AutoSKH.Map >= 0 && !Pk9rXmap.IsXmapRunning && !AutoSKH.isBando && !AutoSKH.isBuyItem && !AutoSKH.Chaydicat && !AutoSKH.MuaTdlt && !flag;
		if (flag2)
		{
			XmapController.StartRunToMapId(AutoSKH.Map);
		}
		bool flag3 = GameCanvas.gameTick % 100 == 0 && flag && !Pk9rXmap.IsXmapRunning;
		if (flag3)
		{
			XmapController.StartRunToMapId(idMap);
		}
	}

	// Token: 0x0600014D RID: 333 RVA: 0x0000D300 File Offset: 0x0000B500
	public static bool isBagFull()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			bool flag = global::Char.myCharz().arrItemBag[i] == null;
			if (flag)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x0600014E RID: 334 RVA: 0x0000D350 File Offset: 0x0000B550
	public static bool isBoxFull()
	{
		for (int i = global::Char.myCharz().arrItemBox.Length - 1; i >= 0; i--)
		{
			bool flag = global::Char.myCharz().arrItemBox[i] == null;
			if (flag)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x0600014F RID: 335 RVA: 0x0000D3A0 File Offset: 0x0000B5A0
	public static void ItemPl()
	{
		bool flag = File.Exists(AutoSKH.aitem);
		if (flag)
		{
			bool flag2 = GameCanvas.gameTick % 20 == 0;
			if (flag2)
			{
				AutoSKH.AddUse("Nro_244_Data//Resources//Data//item.txt");
			}
			bool flag3 = !AutoSKH.isanitem;
			if (flag3)
			{
				new Thread(new ThreadStart(AutoSKH.AnItems)).Start();
			}
		}
		bool flag4 = File.Exists(AutoSKH.vitem);
		if (flag4)
		{
			bool flag5 = GameCanvas.gameTick % 20 == 0;
			if (flag5)
			{
				AutoSKH.AddSale("Nro_244_Data//Resources//Data//sale.txt");
			}
			bool flag6 = !AutoSKH.isvutitem;
			if (flag6)
			{
				new Thread(new ThreadStart(AutoSKH.VutItems)).Start();
			}
		}
	}

	// Token: 0x06000150 RID: 336 RVA: 0x0000D454 File Offset: 0x0000B654
	public static void AutoBongTai()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 454 || item.template.id == 921);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
			}
		}
	}

	// Token: 0x06000151 RID: 337 RVA: 0x0000D4D8 File Offset: 0x0000B6D8
	public static void AnNho()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 211 || item.template.id == 212);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
			}
		}
	}

	// Token: 0x06000152 RID: 338 RVA: 0x0000D55C File Offset: 0x0000B75C
	public static void UseTDLT()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 521;
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
			}
		}
	}

	// Token: 0x06000153 RID: 339 RVA: 0x0000D5CC File Offset: 0x0000B7CC
	public static void TDLT()
	{
		bool flag = AutoSKH.Type == 1 && !ItemTime.isExistItem(4387);
		if (flag)
		{
			AutoSKH.UseTDLT();
		}
		bool flag2 = AutoSKH.Type != 1 && ItemTime.isExistItem(4387);
		if (flag2)
		{
			AutoSKH.UseTDLT();
		}
	}

	// Token: 0x06000154 RID: 340 RVA: 0x0000D620 File Offset: 0x0000B820
	public static bool IsBoss()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			char c = char.Parse(@char.cName.Substring(0, 1));
			bool flag = c >= 'A' && c <= 'Z' && !@char.cName.StartsWith("Đệ tử") && !@char.cName.StartsWith("Ăn trộm") && @char.cTypePk == 5;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000155 RID: 341 RVA: 0x0000D6C0 File Offset: 0x0000B8C0
	public static void Neboss()
	{
		bool flag = AutoSKH.IsBoss();
		if (flag)
		{
			int num = GameScr.gI().zones.Length;
			List<int> list = new List<int>();
			int num2 = int.MaxValue;
			for (int i = 0; i < num; i++)
			{
				int num3 = GameScr.gI().numPlayer[i];
				bool flag2 = num3 < num2;
				if (flag2)
				{
					num2 = num3;
					list.Clear();
					list.Add(i);
				}
				else
				{
					bool flag3 = num3 == num2;
					if (flag3)
					{
						list.Add(i);
					}
				}
			}
			bool flag4 = list.Count > 0;
			if (flag4)
			{
				Random random = new Random();
				AutoSKH.Khu = list[random.Next(list.Count)];
			}
		}
	}

	// Token: 0x06000156 RID: 342 RVA: 0x0000D784 File Offset: 0x0000B984
	public static void Update()
	{
		bool flag = TileMap.mapID == AutoSKH.Map && TileMap.zoneID == AutoSKH.Khu;
		if (flag)
		{
			CheckOutTNSM.CheckOutTnsm();
			AutoSKH.XuLyLagGame();
		}
		bool flag2 = GameCanvas.gameTick % 200 == 0 && TileMap.mapID == AutoSKH.Map && TileMap.zoneID == AutoSKH.Khu;
		if (flag2)
		{
			AutoSKH.Neboss();
		}
		global::Char.myCharz().cspeed = 7;
		bool flag3 = AutoSKH.TimeConLai != null && AutoSKH.TimeConLai.Contains("Thời gian tìm set kích hoạt đến") && !AutoSKH.tinhtoan;
		if (flag3)
		{
			AutoSKH.TimeConLai2 = AutoSKH.GetRemainingTime();
			AutoSKH.tinhtoan = true;
		}
		bool flag4 = GameCanvas.gameTick % 200 == 0 && (global::Char.myCharz().cHP <= 0L || global::Char.myCharz().meDead);
		if (flag4)
		{
			Service.gI().returnTownFromDead();
		}
		bool flag5 = GameCanvas.gameTick % 200 == 0;
		if (flag5)
		{
			AutoSKH.TDLT();
		}
		bool flag6 = GameCanvas.gameTick % 110 == 0;
		if (flag6)
		{
			AutoSKH.SellItemAndGOback();
		}
		bool flag7 = GameCanvas.gameTick % 130 == 0 && AutoSKH.Type == 1;
		if (flag7)
		{
			AutoSKH.MuaTdltAndGoback();
		}
		bool flag8 = GameCanvas.gameTick % 100 == 0 && AutoSKH.Aco == 1;
		if (flag8)
		{
			AutoSKH.MuabuaAndGoback();
			bool flag9 = GameCanvas.gameTick % 300 == 0;
			if (flag9)
			{
				AutoSKH.AnCo();
			}
		}
		bool flag10 = GameCanvas.gameTick % 120 == 0;
		if (flag10)
		{
			AutoSKH.CatdoandGoback();
		}
		bool flag11 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID == AutoSKH.Map && TileMap.zoneID == AutoSKH.Khu;
		if (flag11)
		{
			bool flag12 = !Pk9rPickMob.IsTanSat;
			if (flag12)
			{
				Pk9rPickMob.IsTanSat = true;
			}
		}
		bool flag13 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID != AutoSKH.Map;
		if (flag13)
		{
			bool isTanSat = Pk9rPickMob.IsTanSat;
			if (isTanSat)
			{
				Pk9rPickMob.IsTanSat = false;
			}
		}
		bool flag14 = global::Char.myCharz().mobFocus != null;
		if (flag14)
		{
			AutoSkill.AutoSendAttack();
		}
		bool flag15 = GameCanvas.gameTick % 50 == 0;
		if (flag15)
		{
			AutoSKH.ItemPl();
		}
		bool flag16 = GameCanvas.gameTick % 20 == 0 && TileMap.mapID == AutoSKH.Map && TileMap.zoneID == AutoSKH.Khu && AutoSKH.Type == 2;
		if (flag16)
		{
			AutoSKH.autoitem();
		}
		bool flag17 = GameCanvas.gameTick % 20 == 0 && TileMap.mapID == global::Char.myCharz().cgender + 21;
		if (flag17)
		{
			AutoSKH.AutoDuiGa();
		}
		bool flag18 = GameCanvas.gameTick % 150 == 0;
		if (flag18)
		{
			AutoSKH.RunToMap();
		}
		bool flag19 = GameCanvas.gameTick % 200 == 0;
		if (flag19)
		{
			AutoSKH.DoiKhu();
		}
		bool flag20 = GameCanvas.gameTick % 200 == 0 && !global::Char.myCharz().isNhapThe;
		if (flag20)
		{
			AutoSKH.AutoBongTai();
		}
		bool flag21 = GameCanvas.gameTick % 200 == 0 && global::Char.myCharz().cStamina < 100;
		if (flag21)
		{
			AutoSKH.AnNho();
		}
	}

	// Token: 0x06000157 RID: 343 RVA: 0x0000DAD0 File Offset: 0x0000BCD0
	public static void AddUse(string filePath)
	{
		try
		{
			string[] array = File.ReadAllLines(filePath);
			foreach (string text in array)
			{
				IEnumerable<string> source = text.Split(new char[]
				{
					','
				}, StringSplitOptions.RemoveEmptyEntries);
				Func<string, int> selector;
				if ((selector = AutoSKH.<>O.<0>__Parse) == null)
				{
					selector = (AutoSKH.<>O.<0>__Parse = new Func<string, int>(int.Parse));
				}
				List<int> list = source.Select(selector).ToList<int>();
				foreach (int item in list)
				{
					bool flag = !AutoSKH.SD.Contains(item);
					if (flag)
					{
						AutoSKH.SD.Add(item);
					}
				}
			}
		}
		catch
		{
		}
	}

	// Token: 0x06000158 RID: 344 RVA: 0x0000DBB8 File Offset: 0x0000BDB8
	public static void AddSale(string filePath)
	{
		try
		{
			string[] array = File.ReadAllLines(filePath);
			foreach (string text in array)
			{
				IEnumerable<string> source = text.Split(new char[]
				{
					','
				}, StringSplitOptions.RemoveEmptyEntries);
				Func<string, int> selector;
				if ((selector = AutoSKH.<>O.<0>__Parse) == null)
				{
					selector = (AutoSKH.<>O.<0>__Parse = new Func<string, int>(int.Parse));
				}
				List<int> list = source.Select(selector).ToList<int>();
				foreach (int item in list)
				{
					bool flag = !AutoSKH.VB.Contains(item);
					if (flag)
					{
						AutoSKH.VB.Add(item);
					}
				}
			}
		}
		catch
		{
		}
	}

	// Token: 0x06000159 RID: 345 RVA: 0x0000DCA0 File Offset: 0x0000BEA0
	public static void AnItems()
	{
		AutoSKH.isanitem = true;
		Thread.Sleep(3000);
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && AutoSKH.SD.Contains((int)item.template.id) && !ItemTime.isExistItem((int)item.template.iconID);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				Thread.Sleep(2000);
				break;
			}
		}
		Thread.Sleep(5000);
		AutoSKH.isanitem = false;
	}

	// Token: 0x0600015A RID: 346 RVA: 0x0000DD5C File Offset: 0x0000BF5C
	public static void AnCo()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1635 && !ItemTime.isExistItem((int)item.template.iconID);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x0600015B RID: 347 RVA: 0x0000DDE4 File Offset: 0x0000BFE4
	public static void VutItems()
	{
		AutoSKH.isvutitem = true;
		Thread.Sleep(2000);
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && AutoSKH.VB.Contains((int)item.template.id);
			if (flag)
			{
				Service.gI().useItem(1, 1, -1, item.template.id);
				Service.gI().useItem(2, 1, -1, item.template.id);
				Thread.Sleep(300);
			}
			Thread.Sleep(1000);
		}
		Thread.Sleep(2000);
		AutoSKH.isvutitem = false;
	}

	// Token: 0x0600015C RID: 348 RVA: 0x0000DEB0 File Offset: 0x0000C0B0
	public static void Painting(mGraphics g)
	{
		int num = GameCanvas.h - (GameCanvas.h - 40);
		int num2 = 10;
		SmallImage.drawSmallImage(g, 5427, 10, GameCanvas.h - (GameCanvas.h - 5), 0, 0);
		mFont.tahoma_7b_white.drawString(g, "Ngọc: " + NinjaUtil.getMoneys((long)(global::Char.myCharz().luong + global::Char.myCharz().luongKhoa)).ToString(), 15, GameCanvas.h / 2 + 40, 0);
		AutoSKH.<>c__DisplayClass59_0 CS$<>8__locals1;
		CS$<>8__locals1.validSetIds = new HashSet<int>
		{
			127,
			128,
			129,
			130,
			131,
			132,
			133,
			134,
			135,
			233,
			237,
			241,
			245
		};
		Dictionary<string, Dictionary<int, int>> dictionary = new Dictionary<string, Dictionary<int, int>>();
		Dictionary<string, Dictionary<int, int>> dictionary2 = new Dictionary<string, Dictionary<int, int>>();
		AutoSKH.<Painting>g__CountItems|59_0(global::Char.myCharz().arrItemBag, dictionary, ref CS$<>8__locals1);
		AutoSKH.<Painting>g__CountItems|59_0(global::Char.myCharz().arrItemBox, dictionary2, ref CS$<>8__locals1);
		Dictionary<string, Dictionary<int, int>> dictionary3 = new Dictionary<string, Dictionary<int, int>>();
		foreach (KeyValuePair<string, Dictionary<int, int>> keyValuePair in dictionary)
		{
			string key = keyValuePair.Key;
			bool flag = !dictionary3.ContainsKey(key);
			if (flag)
			{
				dictionary3[key] = new Dictionary<int, int>();
			}
			foreach (KeyValuePair<int, int> keyValuePair2 in keyValuePair.Value)
			{
				bool flag2 = !dictionary3[key].ContainsKey(keyValuePair2.Key);
				if (flag2)
				{
					dictionary3[key][keyValuePair2.Key] = 0;
				}
				Dictionary<int, int> dictionary4 = dictionary3[key];
				int key2 = keyValuePair2.Key;
				dictionary4[key2] += keyValuePair2.Value;
			}
		}
		foreach (KeyValuePair<string, Dictionary<int, int>> keyValuePair3 in dictionary2)
		{
			string key3 = keyValuePair3.Key;
			bool flag3 = !dictionary3.ContainsKey(key3);
			if (flag3)
			{
				dictionary3[key3] = new Dictionary<int, int>();
			}
			foreach (KeyValuePair<int, int> keyValuePair4 in keyValuePair3.Value)
			{
				bool flag4 = !dictionary3[key3].ContainsKey(keyValuePair4.Key);
				if (flag4)
				{
					dictionary3[key3][keyValuePair4.Key] = 0;
				}
				Dictionary<int, int> dictionary4 = dictionary3[key3];
				int key2 = keyValuePair4.Key;
				dictionary4[key2] += keyValuePair4.Value;
			}
		}
		int num3 = GameCanvas.w / 2;
		foreach (KeyValuePair<string, Dictionary<int, int>> keyValuePair5 in dictionary3)
		{
			string text = "Set " + keyValuePair5.Key;
			List<string> list = new List<string>();
			foreach (KeyValuePair<int, int> keyValuePair6 in keyValuePair5.Value)
			{
				int key4 = keyValuePair6.Key;
				if (!true)
				{
				}
				string text2;
				switch (key4)
				{
				case 0:
					text2 = "áo";
					break;
				case 1:
					text2 = "quần";
					break;
				case 2:
					text2 = "găng";
					break;
				case 3:
					text2 = "giày";
					break;
				case 4:
					text2 = "rada";
					break;
				default:
					text2 = "khác";
					break;
				}
				if (!true)
				{
				}
				string arg = text2;
				list.Add(string.Format("{0} {1}", keyValuePair6.Value, arg));
			}
			mFont mFont = (keyValuePair5.Value.Count >= 5) ? mFont.tahoma_7b_dark : mFont.tahoma_7b_yellow;
			int width = mFont.getWidth(text);
			int x = num3 - width / 2;
			mFont.tahoma_7b_white.drawString(g, text, x, num, 0);
			num += num2;
			string text3 = string.Join(", ", list.ToArray());
			int width2 = mFont.getWidth(text3);
			int x2 = num3 - width2 / 2;
			mFont.drawString(g, text3, x2, num, 0);
			num += num2 + 5;
		}
		int num4 = 0;
		foreach (KeyValuePair<string, Dictionary<int, int>> keyValuePair7 in dictionary3)
		{
			foreach (int num5 in keyValuePair7.Value.Values)
			{
				num4 += num5;
			}
		}
		bool flag5 = AutoSKH.TimeConLai2 != null;
		if (flag5)
		{
			mFont.tahoma_7b_white.drawString(g, AutoSKH.TimeConLai2, 30, GameCanvas.h - (GameCanvas.h - 5), 0);
		}
		else
		{
			mFont.tahoma_7b_white.drawString(g, ": Hết mầm rồi bé!!!", 30, GameCanvas.h - (GameCanvas.h - 5), 0);
		}
		int num6 = GameScr.gI().zones[TileMap.zoneID];
		string text4 = TileMap.mapNames[TileMap.mapID];
		string text5 = " - " + TileMap.zoneID.ToString();
		string text6 = GameScr.gI().numPlayer[num6].ToString() + "/" + GameScr.gI().maxPlayer[num6].ToString();
		mFont.tahoma_7b_white.drawString(g, string.Concat(new string[]
		{
			TileMap.mapID.ToString(),
			"-",
			text4,
			" ",
			text5,
			" [",
			text6,
			"]"
		}), 30, GameCanvas.h - (GameCanvas.h - 20), 0);
		mFont.tahoma_7b_white.drawString(g, "Tổng : " + num4.ToString() + " món", GameCanvas.w / 2 + 30, GameCanvas.h - (GameCanvas.h - 5), 0);
	}

	// Token: 0x0600015D RID: 349 RVA: 0x0000E64C File Offset: 0x0000C84C
	private static string GetRemainingTime()
	{
		string result;
		try
		{
			int num = AutoSKH.TimeConLai.LastIndexOf("đến");
			bool flag = num == -1;
			if (flag)
			{
				result = "Lỗi: Không tìm thấy 'đến' trong chuỗi.";
			}
			else
			{
				string s = AutoSKH.TimeConLai.Substring(num + 3).Trim();
				DateTime d = DateTime.ParseExact(s, "yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture);
				DateTime now = DateTime.Now;
				TimeSpan timeSpan = d - now;
				bool flag2 = timeSpan.TotalSeconds > 0.0;
				if (flag2)
				{
					result = string.Format(": {0}d {1}h ", timeSpan.Days, timeSpan.Hours);
				}
				else
				{
					result = "Hết mầm rồi bé";
				}
			}
		}
		catch (Exception ex)
		{
			result = "Lỗi xử lý thời gian: " + ex.Message;
		}
		return result;
	}

	// Token: 0x0600015E RID: 350 RVA: 0x0000E728 File Offset: 0x0000C928
	public static void PaintHpKi(mGraphics g)
	{
		int cx = global::Char.myCharz().cx;
		int y = global::Char.myCharz().cy - global::Char.myCharz().ch - 18;
		int y2 = global::Char.myCharz().cy - global::Char.myCharz().ch - 15;
		bool flag = global::Char.myCharz().cHP > 0L;
		if (flag)
		{
			global::Char.myCharz().paintHpmeo(g, cx, y);
		}
		bool flag2 = global::Char.myCharz().cMP > 0L;
		if (flag2)
		{
			global::Char.myCharz().paintKimeo(g, cx, y2);
		}
	}

	// Token: 0x0600015F RID: 351 RVA: 0x0000E7BC File Offset: 0x0000C9BC
	public static void XuLyLagGame()
	{
		bool flag = global::Char.myCharz().statusMe == 16;
		if (flag)
		{
			AutoSKH.Sttm++;
		}
		bool flag2 = AutoSKH.Sttm >= 1000;
		if (flag2)
		{
			GameCanvas.startOKDlg("Laggggggggggggggggggggggggggggggggg");
			Main.exit();
		}
	}

	// Token: 0x06000162 RID: 354 RVA: 0x0000E8A4 File Offset: 0x0000CAA4
	[CompilerGenerated]
	internal static void <Painting>g__CountItems|59_0(Item[] itemList, Dictionary<string, Dictionary<int, int>> storage, ref AutoSKH.<>c__DisplayClass59_0 A_2)
	{
		foreach (Item item in itemList)
		{
			bool flag = item == null || item.itemOption == null || item.quantity <= 0;
			if (!flag)
			{
				HashSet<string> hashSet = new HashSet<string>();
				foreach (ItemOption itemOption2 in item.itemOption)
				{
					bool flag2 = !A_2.validSetIds.Contains(itemOption2.optionTemplate.id);
					if (!flag2)
					{
						string text = itemOption2.optionTemplate.name.Replace("Set ", "").Trim();
						int type = (int)item.template.type;
						bool flag3 = hashSet.Contains(text);
						if (!flag3)
						{
							hashSet.Add(text);
							bool flag4 = !storage.ContainsKey(text);
							if (flag4)
							{
								storage[text] = new Dictionary<int, int>();
							}
							bool flag5 = !storage[text].ContainsKey(type);
							if (flag5)
							{
								storage[text][type] = 0;
							}
							Dictionary<int, int> dictionary = storage[text];
							int key = type;
							dictionary[key] += item.quantity;
						}
					}
				}
			}
		}
	}

	// Token: 0x040000B4 RID: 180
	public static string TimeConLai;

	// Token: 0x040000B5 RID: 181
	public static bool tinhtoan = false;

	// Token: 0x040000B6 RID: 182
	public static string TimeConLai2;

	// Token: 0x040000B7 RID: 183
	public static int Map;

	// Token: 0x040000B8 RID: 184
	public static int Khu;

	// Token: 0x040000B9 RID: 185
	public static int Type;

	// Token: 0x040000BA RID: 186
	public static int Aco;

	// Token: 0x040000BB RID: 187
	public static List<int> SD = new List<int>();

	// Token: 0x040000BC RID: 188
	public static List<int> VB = new List<int>();

	// Token: 0x040000BD RID: 189
	public static bool isSellItem = false;

	// Token: 0x040000BE RID: 190
	public static bool isBando = false;

	// Token: 0x040000BF RID: 191
	public static bool isBuyItem = false;

	// Token: 0x040000C0 RID: 192
	public static bool isbua = false;

	// Token: 0x040000C1 RID: 193
	public static bool iscat = false;

	// Token: 0x040000C2 RID: 194
	public static bool Chaydicat = false;

	// Token: 0x040000C3 RID: 195
	public static bool istdlt = false;

	// Token: 0x040000C4 RID: 196
	public static bool MuaTdlt = false;

	// Token: 0x040000C5 RID: 197
	public static string vitem = "Nro_244_Data//Resources//vut";

	// Token: 0x040000C6 RID: 198
	public static string aitem = "Nro_244_Data//Resources//list";

	// Token: 0x040000C7 RID: 199
	public static string slmua = "Nro_244_Data//Resources//Data//slm.txt";

	// Token: 0x040000C8 RID: 200
	public static bool isanitem = false;

	// Token: 0x040000C9 RID: 201
	public static bool isvutitem = false;

	// Token: 0x040000CA RID: 202
	public static int Sttm = 0;

	// Token: 0x020000FA RID: 250
	[CompilerGenerated]
	private static class <>O
	{
		// Token: 0x040016E0 RID: 5856
		public static Func<string, int> <0>__Parse;
	}
}
using System;
using System.Collections.Generic;
using System.Threading;

// Token: 0x0200000C RID: 12
internal class AutoYadart
{
	// Token: 0x06000023 RID: 35 RVA: 0x00002F6A File Offset: 0x0000116A
	private static void Wait(int time)
	{
		AutoYadart.IsWait = true;
		AutoYadart.TimeStartWait = mSystem.currentTimeMillis();
		AutoYadart.TimeWait = (long)time;
	}

	// Token: 0x06000024 RID: 36 RVA: 0x00002F84 File Offset: 0x00001184
	private static bool IsWaiting()
	{
		bool flag = AutoYadart.IsWait && mSystem.currentTimeMillis() - AutoYadart.TimeStartWait >= AutoYadart.TimeWait;
		if (flag)
		{
			AutoYadart.IsWait = false;
		}
		return AutoYadart.IsWait;
	}

	// Token: 0x06000025 RID: 37 RVA: 0x00002FC8 File Offset: 0x000011C8
	public static void TeleportTo(int x, int y)
	{
		global::Char.myCharz().cx = x;
		global::Char.myCharz().cy = y;
		Service.gI().charMove();
		global::Char.myCharz().cx = x;
		global::Char.myCharz().cy = y + 1;
		Service.gI().charMove();
		global::Char.myCharz().cx = x;
		global::Char.myCharz().cy = y;
		Service.gI().charMove();
	}

	// Token: 0x06000026 RID: 38 RVA: 0x0000303C File Offset: 0x0000123C
	private static long GetCooldownAutoChangeFocus(Skill skill)
	{
		bool flag = skill.coolDown <= 500;
		long result;
		if (flag)
		{
			result = 1000L;
		}
		else
		{
			result = (long)((double)skill.coolDown * 1.2 + 200.0);
		}
		return result;
	}

	// Token: 0x06000027 RID: 39 RVA: 0x00003088 File Offset: 0x00001288
	private static void AutoChangeFocus()
	{
		bool flag = AutoYadart.listTargetAutoChangeFocus.Count == 0;
		if (flag)
		{
			AutoYadart.isAutoChangeFocus = false;
		}
		else
		{
			bool flag2 = global::Char.myCharz().meDead || global::Char.myCharz().statusMe == 14 || global::Char.myCharz().statusMe == 5 || global::Char.myCharz().myskill.template.type == 3 || global::Char.myCharz().myskill.template.id == 10 || global::Char.myCharz().myskill.template.id == 11 || global::Char.myCharz().myskill.paintCanNotUseSkill;
			if (!flag2)
			{
				AutoYadart.cooldownAutoChangeFocus = AutoYadart.GetCooldownAutoChangeFocus(global::Char.myCharz().myskill);
				bool flag3 = AutoYadart.targetIndex >= AutoYadart.listTargetAutoChangeFocus.Count;
				if (flag3)
				{
					AutoYadart.targetIndex = 0;
				}
				bool flag4 = mSystem.currentTimeMillis() - AutoYadart.lastTimeChangeFocus >= AutoYadart.cooldownAutoChangeFocus;
				if (flag4)
				{
					AutoYadart.lastTimeChangeFocus = mSystem.currentTimeMillis();
					global::Char.myCharz().charFocus = GameScr.findCharInMap(AutoYadart.listTargetAutoChangeFocus[AutoYadart.targetIndex].charID);
					AutoYadart.targetIndex++;
					bool flag5 = AutoYadart.targetIndex >= AutoYadart.listTargetAutoChangeFocus.Count;
					if (flag5)
					{
						AutoYadart.targetIndex = 0;
					}
					bool flag6 = global::Char.myCharz().charFocus != null && AutoYadart.isMeCanAttackChar(global::Char.myCharz().charFocus) && (double)global::Math.abs(global::Char.myCharz().charFocus.cx - global::Char.myCharz().cx) < (double)global::Char.myCharz().myskill.dx * 1.5;
					if (flag6)
					{
						global::Char.myCharz().myskill.lastTimeUseThisSkill = mSystem.currentTimeMillis();
						AutoYadart.SendAttackToCharFocus();
					}
				}
			}
		}
	}

	// Token: 0x06000028 RID: 40 RVA: 0x00003268 File Offset: 0x00001468
	private static void SendAttackToCharFocus()
	{
		try
		{
			MyVector myVector = new MyVector();
			myVector.addElement(global::Char.myCharz().charFocus);
			Service.gI().sendPlayerAttack(new MyVector(), myVector, 2);
		}
		catch
		{
		}
	}

	// Token: 0x06000029 RID: 41 RVA: 0x000032B8 File Offset: 0x000014B8
	private static void SendAttackToMobFocus()
	{
		try
		{
			MyVector myVector = new MyVector();
			myVector.addElement(global::Char.myCharz().mobFocus);
			Service.gI().sendPlayerAttack(myVector, new MyVector(), 1);
		}
		catch
		{
		}
	}

	// Token: 0x0600002A RID: 42 RVA: 0x00003308 File Offset: 0x00001508
	private static long GetCoolDown(Skill skill)
	{
		bool flag = skill.template.id != 20 && skill.template.id != 22 && skill.template.id != 7 && skill.template.id != 18 && skill.template.id != 23;
		long result;
		if (flag)
		{
			result = (long)(skill.coolDown + 100);
		}
		else
		{
			result = (long)skill.coolDown + 500L;
		}
		return result;
	}

	// Token: 0x0600002B RID: 43 RVA: 0x0000338C File Offset: 0x0000158C
	private static int GetMySkillIndex()
	{
		int num = 0;
		for (;;)
		{
			bool flag = num < GameScr.keySkill.Length;
			if (!flag)
			{
				goto IL_35;
			}
			bool flag2 = GameScr.keySkill[num] == global::Char.myCharz().myskill;
			if (flag2)
			{
				break;
			}
			num++;
		}
		return num;
		IL_35:
		return 0;
	}

	// Token: 0x0600002C RID: 44 RVA: 0x000033DC File Offset: 0x000015DC
	public static bool isMeCanAttackChar(global::Char ch)
	{
		bool flag = TileMap.mapID == 113;
		bool result;
		if (flag)
		{
			bool flag2 = ch != null && global::Char.myCharz().myskill != null;
			if (flag2)
			{
				bool flag3 = ch.cTypePk != 5;
				result = (!flag3 || ch.cTypePk == 3);
			}
			else
			{
				result = false;
			}
		}
		else
		{
			bool flag4 = ch != null && global::Char.myCharz().myskill != null;
			if (flag4)
			{
				bool flag5 = ch.statusMe != 14 && ch.statusMe != 5 && global::Char.myCharz().myskill.template.type != 2 && ((global::Char.myCharz().cFlag == 8 && ch.cFlag != 0) || (global::Char.myCharz().cFlag != 0 && ch.cFlag == 8) || (global::Char.myCharz().cFlag != ch.cFlag && global::Char.myCharz().cFlag != 0 && ch.cFlag != 0) || (ch.cTypePk == 3 && global::Char.myCharz().cTypePk == 3) || global::Char.myCharz().cTypePk == 5 || ch.cTypePk == 5 || (global::Char.myCharz().cTypePk == 1 && ch.cTypePk == 1) || (global::Char.myCharz().cTypePk == 4 && ch.cTypePk == 4));
				if (flag5)
				{
					result = true;
				}
				else
				{
					bool flag6 = global::Char.myCharz().myskill.template.type == 2;
					result = (flag6 && ch.cTypePk != 5);
				}
			}
			else
			{
				result = false;
			}
		}
		return result;
	}

	// Token: 0x0600002D RID: 45 RVA: 0x00003588 File Offset: 0x00001788
	public static void AutoSendAttack()
	{
		bool flag = global::Char.myCharz().meDead || global::Char.myCharz().cHP <= 0L || global::Char.myCharz().statusMe == 14 || global::Char.myCharz().statusMe == 5 || global::Char.myCharz().myskill.template.type == 3 || global::Char.myCharz().myskill.template.id == 10 || global::Char.myCharz().myskill.template.id == 11 || (global::Char.myCharz().myskill.paintCanNotUseSkill && !GameCanvas.panel.isShow);
		if (!flag)
		{
			int mySkillIndex = AutoYadart.GetMySkillIndex();
			bool flag2 = mSystem.currentTimeMillis() - AutoYadart.lastTimeSendAttack[mySkillIndex] > AutoYadart.GetCoolDown(global::Char.myCharz().myskill);
			if (flag2)
			{
				bool flag3 = GameScr.gI().isMeCanAttackMob(global::Char.myCharz().mobFocus);
				if (flag3)
				{
					global::Char.myCharz().myskill.lastTimeUseThisSkill = mSystem.currentTimeMillis();
					AutoYadart.SendAttackToMobFocus();
					AutoYadart.lastTimeSendAttack[mySkillIndex] = mSystem.currentTimeMillis();
				}
				else
				{
					bool flag4 = global::Char.myCharz().charFocus != null && AutoYadart.isMeCanAttackChar(global::Char.myCharz().charFocus) && (double)global::Math.abs(global::Char.myCharz().charFocus.cx - global::Char.myCharz().cx) < (double)global::Char.myCharz().myskill.dx * 1.7;
					if (flag4)
					{
						global::Char.myCharz().myskill.lastTimeUseThisSkill = mSystem.currentTimeMillis();
						AutoYadart.SendAttackToCharFocus();
						AutoYadart.lastTimeSendAttack[mySkillIndex] = mSystem.currentTimeMillis();
					}
				}
			}
		}
	}

	// Token: 0x0600002E RID: 46 RVA: 0x00003744 File Offset: 0x00001944
	public static void ThemQuai()
	{
		bool flag = mSystem.currentTimeMillis() - AutoYadart.thoigian > 500L;
		if (flag)
		{
			for (int i = 0; i < GameScr.vCharInMap.size(); i++)
			{
				global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
				bool flag2 = @char != null && @char.charID < 0 && @char.cTypePk == 5 && !@char.cName.StartsWith("Đ") && !@char.cName.Contains("Ở dơ") && !@char.cName.Contains("Ăn trộm") && !@char.cName.Contains("Raiti") && !@char.cName.StartsWith("Sói");
				if (flag2)
				{
					bool flag3 = !AutoYadart.listTargetAutoChangeFocus.Contains(@char) && Res.distance(@char.cx, @char.cy, global::Char.myCharz().cx, global::Char.myCharz().cy) <= 100;
					if (flag3)
					{
						AutoYadart.listTargetAutoChangeFocus.Add(@char);
						AutoYadart.thoigian = mSystem.currentTimeMillis();
					}
				}
			}
		}
	}

	// Token: 0x0600002F RID: 47 RVA: 0x00003878 File Offset: 0x00001A78
	public static void Anhat()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			global::Char @char = global::Char.myCharz();
			bool flag = itemMap.playerId == @char.charID || itemMap.playerId == -1;
			bool flag2 = itemMap != null && flag;
			if (flag2)
			{
				Service.gI().pickItem(itemMap.itemMapID);
			}
		}
	}

	// Token: 0x06000030 RID: 48 RVA: 0x000038F4 File Offset: 0x00001AF4
	private static void GanSKillLienHoan()
	{
		for (int i = 0; i < global::Char.myCharz().nClass.skillTemplates.Length; i++)
		{
			SkillTemplate skillTemplate = global::Char.myCharz().nClass.skillTemplates[i];
			Skill skill = global::Char.myCharz().getSkill(skillTemplate);
			bool flag = skill != null;
			if (flag)
			{
				GameScr.keySkill[i] = skill;
			}
			bool flag2 = skill.template.id == 17;
			if (flag2)
			{
				GameScr.keySkill[0] = skill;
			}
			GameScr.gI().saveKeySkillToRMS();
			AutoYadart.ganlh = 1;
		}
	}

	// Token: 0x06000031 RID: 49 RVA: 0x00003988 File Offset: 0x00001B88
	public static void AutoBongTai()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 454 || item.template.id == 921);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				Service.gI().petStatus(0);
			}
		}
	}

	// Token: 0x06000032 RID: 50 RVA: 0x00003A18 File Offset: 0x00001C18
	public static void buffme()
	{
		Skill skill;
		bool flag = !AutoYadart.canBuffme(out skill);
		if (!flag)
		{
			Service.gI().selectSkill(7);
			Service.gI().sendPlayerAttack(new MyVector(), AutoYadart.getMyVectorMe(), -1);
			Service.gI().selectSkill((int)global::Char.myCharz().myskill.template.id);
			skill.lastTimeUseThisSkill = mSystem.currentTimeMillis();
		}
	}

	// Token: 0x06000033 RID: 51 RVA: 0x00003A84 File Offset: 0x00001C84
	private static bool canBuffme(out Skill skillBuff)
	{
		skillBuff = global::Char.myCharz().getSkill(new SkillTemplate
		{
			id = 7
		});
		bool flag = skillBuff == null;
		return !flag;
	}

	// Token: 0x06000034 RID: 52 RVA: 0x00003AC0 File Offset: 0x00001CC0
	private static MyVector getMyVectorMe()
	{
		MyVector myVector = new MyVector();
		myVector.addElement(global::Char.myCharz());
		return myVector;
	}

	// Token: 0x06000035 RID: 53 RVA: 0x00003AE8 File Offset: 0x00001CE8
	public static void Taitaonangluong()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && skill.template.id == 8 && AutoYadart.delayUseskill[i] < 1L;
			if (flag)
			{
				AutoYadart.AutoUseSkill(i);
			}
		}
	}

	// Token: 0x06000036 RID: 54 RVA: 0x00003B44 File Offset: 0x00001D44
	public static void Khiennangluong()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && skill.template.id == 19 && AutoYadart.delayUseskill[i] < 1L;
			if (flag)
			{
				AutoYadart.AutoUseSkill(i);
			}
		}
	}

	// Token: 0x06000037 RID: 55 RVA: 0x00003BA0 File Offset: 0x00001DA0
	public static void Skill3()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && (skill.template.id == 6 || skill.template.id == 7 || skill.template.id == 8) && AutoYadart.delayUseskill[i] < 1L;
			if (flag)
			{
				AutoYadart.AutoUseSkill(i);
			}
		}
	}

	// Token: 0x06000038 RID: 56 RVA: 0x00003C18 File Offset: 0x00001E18
	public static void Skill9()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && (skill.template.id == 24 || skill.template.id == 25 || skill.template.id == 26) && AutoYadart.delayUseskill[i] < 1L;
			if (flag)
			{
				AutoYadart.AutoUseSkillSpecial(i);
			}
		}
	}

	// Token: 0x06000039 RID: 57 RVA: 0x00003C94 File Offset: 0x00001E94
	private static void AutoUseSkill(int Indexskill)
	{
		bool flag = Indexskill > GameScr.onScreenSkill.Length;
		if (flag)
		{
			Indexskill = 0;
		}
		bool flag2 = Indexskill < 0;
		if (flag2)
		{
			Indexskill = 0;
		}
		bool flag3 = GameScr.onScreenSkill[Indexskill] != null && !GameScr.gI().isCharging() && !GameScr.onScreenSkill[Indexskill].paintCanNotUseSkill && mSystem.currentTimeMillis() - AutoYadart.delayChangeskill >= 170L;
		if (flag3)
		{
			bool flag4 = AutoYadart.delayUseskill[Indexskill] == -1L;
			if (flag4)
			{
				GameScr.gI().doUseSkill(GameScr.onScreenSkill[Indexskill], true);
				AutoYadart.currenuseskill[Indexskill] = mSystem.currentTimeMillis();
				AutoYadart.delayChangeskill = mSystem.currentTimeMillis();
			}
			bool flag5 = mSystem.currentTimeMillis() - AutoYadart.currenuseskill[Indexskill] >= AutoYadart.delayUseskill[Indexskill];
			if (flag5)
			{
				GameScr.gI().doUseSkillNotFocus(GameScr.onScreenSkill[Indexskill]);
				AutoYadart.currenuseskill[Indexskill] = mSystem.currentTimeMillis();
				AutoYadart.delayChangeskill = mSystem.currentTimeMillis();
			}
		}
	}

	// Token: 0x0600003A RID: 58 RVA: 0x00003D8C File Offset: 0x00001F8C
	private static void AutoUseSkillSpecial(int Indexskill)
	{
		bool flag = Indexskill > GameScr.onScreenSkill.Length;
		if (flag)
		{
			Indexskill = 0;
		}
		bool flag2 = Indexskill < 0;
		if (flag2)
		{
			Indexskill = 0;
		}
		bool flag3 = GameScr.onScreenSkill[Indexskill] != null && !GameScr.gI().isCharging() && !GameScr.onScreenSkill[Indexskill].paintCanNotUseSkill && mSystem.currentTimeMillis() - AutoYadart.delayChangeskill >= 170L;
		if (flag3)
		{
			bool flag4 = AutoYadart.delayUseskill[Indexskill] == -1L;
			if (flag4)
			{
				GameScr.gI().doUseSkill(GameScr.onScreenSkill[Indexskill], true);
				GameScr.gI().doUseSkill(GameScr.onScreenSkill[Indexskill], true);
				AutoYadart.currenuseskill[Indexskill] = mSystem.currentTimeMillis();
				AutoYadart.delayChangeskill = mSystem.currentTimeMillis();
			}
			bool flag5 = mSystem.currentTimeMillis() - AutoYadart.currenuseskill[Indexskill] >= AutoYadart.delayUseskill[Indexskill];
			if (flag5)
			{
				GameScr.gI().doUseSkillNotFocus(GameScr.onScreenSkill[Indexskill]);
				GameScr.gI().doUseSkill(GameScr.onScreenSkill[Indexskill], true);
				AutoYadart.currenuseskill[Indexskill] = mSystem.currentTimeMillis();
				AutoYadart.delayChangeskill = mSystem.currentTimeMillis();
			}
		}
	}

	// Token: 0x0600003B RID: 59 RVA: 0x00003EA8 File Offset: 0x000020A8
	private static bool isMeHasEnoughMP(Skill skillToUse)
	{
		bool flag = skillToUse.template.manaUseType == 2;
		bool result;
		if (flag)
		{
			result = true;
		}
		else
		{
			bool flag2 = skillToUse.template.manaUseType != 1;
			if (flag2)
			{
				result = (global::Char.myCharz().cMP >= (long)skillToUse.manaUse);
			}
			else
			{
				result = (global::Char.myCharz().cMP >= (long)skillToUse.manaUse * global::Char.myCharz().cMPFull / 100L);
			}
		}
		return result;
	}

	// Token: 0x0600003C RID: 60 RVA: 0x00003F28 File Offset: 0x00002128
	public static void AnNho()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 211 || item.template.id == 212);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
			}
		}
	}

	// Token: 0x0600003D RID: 61 RVA: 0x00003FAC File Offset: 0x000021AC
	public static void AutoFocusChar()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.charID > 0 && @char.cName.Contains(BuffChar.Name);
			if (flag)
			{
				AutoYadart.ABuff = (double)@char.cHP / (double)@char.cHPFull * 100.0;
			}
		}
	}

	// Token: 0x0600003E RID: 62 RVA: 0x00004029 File Offset: 0x00002229
	public static void HoiSinh()
	{
		AutoYadart.ishoisinh = true;
		Thread.Sleep(2000 + DataAccount.ID * 1500);
		AutoYadart.buffme();
		Thread.Sleep(5000);
		AutoYadart.ishoisinh = false;
	}

	// Token: 0x0600003F RID: 63 RVA: 0x00004060 File Offset: 0x00002260
	public static void Update()
	{
	}

	// Token: 0x04000025 RID: 37
	public static bool isLoadKeySkill;

	// Token: 0x04000026 RID: 38
	public static bool isAutoSendAttack;

	// Token: 0x04000027 RID: 39
	private static long[] lastTimeSendAttack;

	// Token: 0x04000028 RID: 40
	public static bool isTrainPet;

	// Token: 0x04000029 RID: 41
	public static bool isPetAskedForUseSkill;

	// Token: 0x0400002A RID: 42
	public static bool[] isAutoUseSkills;

	// Token: 0x0400002B RID: 43
	private static long[] lastTimeUseSkill;

	// Token: 0x0400002C RID: 44
	private static long[] timeAutoSkills;

	// Token: 0x0400002D RID: 45
	public static long[] delayUseskill = new long[10];

	// Token: 0x0400002E RID: 46
	public static bool[] autoskillSeclect = new bool[10];

	// Token: 0x0400002F RID: 47
	public static long[] currenuseskill = new long[10];

	// Token: 0x04000030 RID: 48
	public static long delayChangeskill;

	// Token: 0x04000031 RID: 49
	private static int indexSkillAuto;

	// Token: 0x04000032 RID: 50
	private static bool isAutoChangeFocus;

	// Token: 0x04000033 RID: 51
	private static long cooldownAutoChangeFocus;

	// Token: 0x04000034 RID: 52
	private static long lastTimeChangeFocus;

	// Token: 0x04000035 RID: 53
	private static List<global::Char> listTargetAutoChangeFocus = new List<global::Char>();

	// Token: 0x04000036 RID: 54
	private static int targetIndex;

	// Token: 0x04000037 RID: 55
	private static bool isAutoShield;

	// Token: 0x04000038 RID: 56
	private static string[] inputDelay;

	// Token: 0x04000039 RID: 57
	private static bool isSaveData;

	// Token: 0x0400003A RID: 58
	private static long lastTimeAutoUseSkill;

	// Token: 0x0400003B RID: 59
	private static bool IsWait;

	// Token: 0x0400003C RID: 60
	private static long TimeStartWait;

	// Token: 0x0400003D RID: 61
	private static long TimeWait;

	// Token: 0x0400003E RID: 62
	public static long thoigian;

	// Token: 0x0400003F RID: 63
	public static long thoigian1;

	// Token: 0x04000040 RID: 64
	public const sbyte idskillbuff = 7;

	// Token: 0x04000041 RID: 65
	public static int ganlh = 0;

	// Token: 0x04000042 RID: 66
	public static bool ishoisinh;

	// Token: 0x04000043 RID: 67
	public static double ABuff = 100.0;
}
using System;

// Token: 0x02000024 RID: 36
public class BachTuoc : Mob, IMapObject
{
	// Token: 0x06000163 RID: 355 RVA: 0x0000EA04 File Offset: 0x0000CC04
	public BachTuoc(int id, short px, short py, int templateID, long hp, long maxHp, int s)
	{
		this.mobId = id;
		this.xFirst = (this.x = (int)(px + 20));
		this.y = (int)py;
		this.yFirst = (int)py;
		this.xTo = this.x;
		this.yTo = this.y;
		this.maxHp = maxHp;
		this.hp = hp;
		this.templateId = templateID;
		this.w_hp_bar = 100;
		this.h_hp_bar = 6;
		this.len = this.w_hp_bar;
		base.updateHp_bar();
		this.getDataB();
		this.status = 2;
	}

	// Token: 0x06000164 RID: 356 RVA: 0x0000EB3C File Offset: 0x0000CD3C
	public void getDataB()
	{
		BachTuoc.data = null;
		BachTuoc.data = new EffectData();
		string patch = string.Concat(new string[]
		{
			"/x",
			mGraphics.zoomLevel.ToString(),
			"/effectdata/",
			108.ToString(),
			"/data"
		});
		try
		{
			BachTuoc.data.readData2(patch);
			BachTuoc.data.img = GameCanvas.loadImage("/effectdata/" + 108.ToString() + "/img.png");
		}
		catch (Exception)
		{
			Service.gI().requestModTemplate(this.templateId);
		}
		this.w = BachTuoc.data.width;
		this.h = BachTuoc.data.height;
	}

	// Token: 0x06000165 RID: 357 RVA: 0x0000EC18 File Offset: 0x0000CE18
	public override void setBody(short id)
	{
		this.changBody = true;
		this.smallBody = id;
	}

	// Token: 0x06000166 RID: 358 RVA: 0x0000EC29 File Offset: 0x0000CE29
	public override void clearBody()
	{
		this.changBody = false;
	}

	// Token: 0x06000167 RID: 359 RVA: 0x0000EC34 File Offset: 0x0000CE34
	public new static bool isExistNewMob(string id)
	{
		for (int i = 0; i < Mob.newMob.size(); i++)
		{
			string text = (string)Mob.newMob.elementAt(i);
			bool flag = text.Equals(id);
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000168 RID: 360 RVA: 0x0000EC88 File Offset: 0x0000CE88
	public new void checkFrameTick(int[] array)
	{
		this.tick++;
		bool flag = this.tick > array.Length - 1;
		if (flag)
		{
			this.tick = 0;
		}
		this.frame = array[this.tick];
	}

	// Token: 0x06000169 RID: 361 RVA: 0x0000ECCC File Offset: 0x0000CECC
	private void updateShadown()
	{
		int size = (int)TileMap.size;
		this.xSd = this.x;
		this.wCount = 0;
		bool flag = this.ySd <= 0 || TileMap.tileTypeAt(this.xSd, this.ySd, 2);
		if (!flag)
		{
			bool flag2 = TileMap.tileTypeAt(this.xSd / size, this.ySd / size) == 0;
			if (flag2)
			{
				this.isOutMap = true;
			}
			else
			{
				bool flag3 = TileMap.tileTypeAt(this.xSd / size, this.ySd / size) != 0 && !TileMap.tileTypeAt(this.xSd, this.ySd, 2);
				if (flag3)
				{
					this.xSd = this.x;
					this.ySd = this.y;
					this.isOutMap = false;
				}
			}
			while (this.isOutMap && this.wCount < 10)
			{
				this.wCount++;
				this.ySd += 24;
				bool flag4 = TileMap.tileTypeAt(this.xSd, this.ySd, 2);
				if (flag4)
				{
					bool flag5 = this.ySd % 24 != 0;
					if (flag5)
					{
						this.ySd -= this.ySd % 24;
					}
					break;
				}
			}
		}
	}

	// Token: 0x0600016A RID: 362 RVA: 0x0000EE18 File Offset: 0x0000D018
	private void paintShadow(mGraphics g)
	{
		int size = (int)TileMap.size;
		g.drawImage(BachTuoc.shadowBig, this.xSd, this.yFirst, 3);
		g.setClip(GameScr.cmx, GameScr.cmy - GameCanvas.transY, GameScr.gW, GameScr.gH + 2 * GameCanvas.transY);
	}

	// Token: 0x0600016B RID: 363 RVA: 0x0000EE6E File Offset: 0x0000D06E
	public new void updateSuperEff()
	{
	}

	// Token: 0x0600016C RID: 364 RVA: 0x0000EE74 File Offset: 0x0000D074
	public override void update()
	{
		bool flag = !this.isUpdate();
		if (!flag)
		{
			this.updateShadown();
			switch (this.status)
			{
			case 0:
			case 1:
				this.updateDead();
				break;
			case 2:
				this.updateMobStandWait();
				break;
			case 3:
				this.updateMobAttack();
				break;
			case 5:
				this.timeStatus = 0;
				this.updateMobWalk();
				break;
			case 6:
			{
				this.timeStatus = 0;
				this.p1++;
				this.y += this.p1;
				bool flag2 = this.y >= this.yFirst;
				if (flag2)
				{
					this.y = this.yFirst;
					this.p1 = 0;
					this.status = 5;
				}
				break;
			}
			case 7:
				this.updateInjure();
				break;
			}
		}
	}

	// Token: 0x0600016D RID: 365 RVA: 0x0000EF64 File Offset: 0x0000D164
	private void updateDead()
	{
		this.checkFrameTick(this.stand);
		bool flag = GameCanvas.gameTick % 5 == 0;
		if (flag)
		{
			ServerEffect.addServerEffect(167, Res.random(this.x - this.getW() / 2, this.x + this.getW() / 2), Res.random(this.getY() + this.getH() / 2, this.getY() + this.getH()), 1);
		}
		bool flag2 = this.x != this.xTo || this.y != this.yTo;
		if (flag2)
		{
			this.x += (this.xTo - this.x) / 4;
			this.y += (this.yTo - this.y) / 4;
		}
	}

	// Token: 0x0600016E RID: 366 RVA: 0x0000F03F File Offset: 0x0000D23F
	public new void setInjure()
	{
	}

	// Token: 0x0600016F RID: 367 RVA: 0x0000F044 File Offset: 0x0000D244
	public new void setAttack(global::Char cFocus)
	{
		this.isBusyAttackSomeOne = true;
		this.mobToAttack = null;
		this.cFocus = cFocus;
		this.p1 = 0;
		this.p2 = 0;
		this.status = 3;
		this.tick = 0;
		this.dir = ((cFocus.cx > this.x) ? 1 : -1);
		int cx = cFocus.cx;
		int cy = cFocus.cy;
		bool flag = Res.abs(cx - this.x) < this.w * 2 && Res.abs(cy - this.y) < this.h * 2;
		if (flag)
		{
			bool flag2 = this.x < cx;
			if (flag2)
			{
				this.x = cx - this.w;
			}
			else
			{
				this.x = cx + this.w;
			}
			this.p3 = 0;
		}
		else
		{
			this.p3 = 1;
		}
	}

	// Token: 0x06000170 RID: 368 RVA: 0x0000F124 File Offset: 0x0000D324
	private bool isSpecial()
	{
		return (this.templateId >= 58 && this.templateId <= 65) || this.templateId == 67 || this.templateId == 68;
	}

	// Token: 0x06000171 RID: 369 RVA: 0x0000F16B File Offset: 0x0000D36B
	private void updateInjure()
	{
	}

	// Token: 0x06000172 RID: 370 RVA: 0x0000F170 File Offset: 0x0000D370
	private void updateMobStandWait()
	{
		this.checkFrameTick(this.stand);
		bool flag = this.x != this.xTo || this.y != this.yTo;
		if (flag)
		{
			this.x += (this.xTo - this.x) / 4;
			this.y += (this.yTo - this.y) / 4;
		}
	}

	// Token: 0x06000173 RID: 371 RVA: 0x0000F1EB File Offset: 0x0000D3EB
	public void setFly()
	{
		this.status = 4;
		this.flyUp = true;
	}

	// Token: 0x06000174 RID: 372 RVA: 0x0000F1FC File Offset: 0x0000D3FC
	public void setAttack(global::Char[] cAttack, long[] dame, sbyte type)
	{
		this.charAttack = cAttack;
		this.dameHP = dame;
		this.type = type;
		this.status = 3;
	}

	// Token: 0x06000175 RID: 373 RVA: 0x0000F21C File Offset: 0x0000D41C
	public new void updateMobAttack()
	{
		bool flag = this.type == 3;
		if (flag)
		{
			bool flag2 = this.tick == this.attack1.Length - 1;
			if (flag2)
			{
				this.status = 2;
			}
			this.dir = ((this.x < this.charAttack[0].cx) ? 1 : -1);
			this.checkFrameTick(this.attack1);
			this.x += (this.charAttack[0].cx - this.x) / 4;
			this.y += (this.charAttack[0].cy - this.y) / 4;
			this.xTo = this.x;
			bool flag3 = this.tick == 8;
			if (flag3)
			{
				for (int i = 0; i < this.charAttack.Length; i++)
				{
					this.charAttack[i].doInjure(this.dameHP[i], 0L, false, false);
					ServerEffect.addServerEffect(102, this.charAttack[i].cx, this.charAttack[i].cy, 1);
				}
			}
		}
		bool flag4 = this.type != 4;
		if (!flag4)
		{
			bool flag5 = this.tick == this.attack2.Length - 1;
			if (flag5)
			{
				this.status = 2;
			}
			this.dir = ((this.x < this.charAttack[0].cx) ? 1 : -1);
			this.checkFrameTick(this.attack2);
			bool flag6 = this.tick == 8;
			if (flag6)
			{
				for (int j = 0; j < this.charAttack.Length; j++)
				{
					this.charAttack[j].doInjure(this.dameHP[j], 0L, false, false);
					ServerEffect.addServerEffect(102, this.charAttack[j].cx, this.charAttack[j].cy, 1);
				}
			}
		}
	}

	// Token: 0x06000176 RID: 374 RVA: 0x0000F418 File Offset: 0x0000D618
	public new void updateMobWalk()
	{
		this.checkFrameTick(this.movee);
		this.x += ((this.x >= this.xTo) ? -2 : 2);
		this.y = this.yTo;
		this.dir = ((this.x < this.xTo) ? 1 : -1);
		bool flag = Res.abs(this.x - this.xTo) <= 1;
		if (flag)
		{
			this.x = this.xTo;
			this.status = 2;
		}
	}

	// Token: 0x06000177 RID: 375 RVA: 0x0000F4A8 File Offset: 0x0000D6A8
	public new bool isPaint()
	{
		bool flag = this.x < GameScr.cmx;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = this.x > GameScr.cmx + GameScr.gW;
			if (flag2)
			{
				result = false;
			}
			else
			{
				bool flag3 = this.y < GameScr.cmy;
				if (flag3)
				{
					result = false;
				}
				else
				{
					bool flag4 = this.y > GameScr.cmy + GameScr.gH + 30;
					if (flag4)
					{
						result = false;
					}
					else
					{
						bool flag5 = this.status == 0;
						result = !flag5;
					}
				}
			}
		}
		return result;
	}

	// Token: 0x06000178 RID: 376 RVA: 0x0000F538 File Offset: 0x0000D738
	public new bool isUpdate()
	{
		bool flag = this.status == 0;
		return !flag;
	}

	// Token: 0x06000179 RID: 377 RVA: 0x0000F560 File Offset: 0x0000D760
	public new bool checkIsBoss()
	{
		return this.isBoss || this.levelBoss > 0;
	}

	// Token: 0x0600017A RID: 378 RVA: 0x0000F590 File Offset: 0x0000D790
	public override void paint(mGraphics g)
	{
		bool flag = BachTuoc.data == null || this.isHide;
		if (!flag)
		{
			bool isMafuba = this.isMafuba;
			if (isMafuba)
			{
				bool flag2 = !this.changBody;
				if (flag2)
				{
					BachTuoc.data.paintFrame(g, this.frame, this.xMFB, this.yMFB, (this.dir != 1) ? 1 : 0, 2);
				}
				else
				{
					SmallImage.drawSmallImage(g, (int)this.smallBody, this.xMFB, this.yMFB, (this.dir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
			}
			else
			{
				bool flag3 = this.isShadown && this.status != 0;
				if (flag3)
				{
					this.paintShadow(g);
				}
				g.translate(0, GameCanvas.transY);
				bool flag4 = !this.changBody;
				if (flag4)
				{
					BachTuoc.data.paintFrame(g, this.frame, this.x, this.y + this.fy, (this.dir != 1) ? 1 : 0, 2);
				}
				else
				{
					SmallImage.drawSmallImage(g, (int)this.smallBody, this.x, this.y + this.fy - 9, (this.dir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
				g.translate(0, -GameCanvas.transY);
				int imageWidth = mGraphics.getImageWidth(this.imgHPtem);
				int imageHeight = mGraphics.getImageHeight(this.imgHPtem);
				int num = imageWidth;
				int num2 = this.x - imageWidth;
				int y = this.y - this.h - 5;
				int num3 = imageWidth * 2 * this.per / 100;
				bool flag5 = num3 > num;
				int num4;
				if (flag5)
				{
					num4 = num3 - num;
					bool flag6 = num4 <= 0;
					if (flag6)
					{
						num4 = 0;
					}
				}
				else
				{
					num = num3;
					num4 = 0;
				}
				g.drawImage(GameScr.imgHP_tm_xam, num2, y, mGraphics.TOP | mGraphics.LEFT);
				g.drawImage(GameScr.imgHP_tm_xam, num2 + imageWidth, y, mGraphics.TOP | mGraphics.LEFT);
				g.drawRegion(this.imgHPtem, 0, 0, num, imageHeight, 0, num2, y, mGraphics.TOP | mGraphics.LEFT);
				g.drawRegion(this.imgHPtem, 0, 0, num4, imageHeight, 0, num2 + imageWidth, y, mGraphics.TOP | mGraphics.LEFT);
				bool flag7 = this.shock;
				if (flag7)
				{
					this.tShock++;
					Effect me = new Effect((this.type != 2) ? 22 : 19, this.x + this.tShock * 50, this.y + 25, 2, 1, -1);
					EffecMn.addEff(me);
					Effect me2 = new Effect((this.type != 2) ? 22 : 19, this.x - this.tShock * 50, this.y + 25, 2, 1, -1);
					EffecMn.addEff(me2);
					bool flag8 = this.tShock == 50;
					if (flag8)
					{
						this.tShock = 0;
						this.shock = false;
					}
				}
			}
		}
	}

	// Token: 0x0600017B RID: 379 RVA: 0x0000F8A4 File Offset: 0x0000DAA4
	public new int getHPColor()
	{
		return 16711680;
	}

	// Token: 0x0600017C RID: 380 RVA: 0x0000F8BB File Offset: 0x0000DABB
	public new void startDie()
	{
		this.hp = 0L;
		this.injureThenDie = true;
		this.hp = 0L;
		this.status = 1;
		this.p1 = -3;
		this.p2 = -this.dir;
		this.p3 = 0;
	}

	// Token: 0x0600017D RID: 381 RVA: 0x0000F8F8 File Offset: 0x0000DAF8
	public new void attackOtherMob(Mob mobToAttack)
	{
		this.mobToAttack = mobToAttack;
		this.isBusyAttackSomeOne = true;
		this.cFocus = null;
		this.p1 = 0;
		this.p2 = 0;
		this.status = 3;
		this.tick = 0;
		this.dir = ((mobToAttack.x > this.x) ? 1 : -1);
		int x = mobToAttack.x;
		int y = mobToAttack.y;
		bool flag = Res.abs(x - this.x) < this.w * 2 && Res.abs(y - this.y) < this.h * 2;
		if (flag)
		{
			bool flag2 = this.x < x;
			if (flag2)
			{
				this.x = x - this.w;
			}
			else
			{
				this.x = x + this.w;
			}
			this.p3 = 0;
		}
		else
		{
			this.p3 = 1;
		}
	}

	// Token: 0x0600017E RID: 382 RVA: 0x0000F9D8 File Offset: 0x0000DBD8
	public new int getX()
	{
		return this.x;
	}

	// Token: 0x0600017F RID: 383 RVA: 0x0000F9F0 File Offset: 0x0000DBF0
	public new int getY()
	{
		return this.y - 40;
	}

	// Token: 0x06000180 RID: 384 RVA: 0x0000FA0C File Offset: 0x0000DC0C
	public new int getH()
	{
		return 40;
	}

	// Token: 0x06000181 RID: 385 RVA: 0x0000FA20 File Offset: 0x0000DC20
	public new int getW()
	{
		return 40;
	}

	// Token: 0x06000182 RID: 386 RVA: 0x0000FA34 File Offset: 0x0000DC34
	public new void stopMoving()
	{
		bool flag = this.status == 5;
		if (flag)
		{
			this.status = 2;
			this.p1 = (this.p2 = (this.p3 = 0));
			this.forceWait = 50;
		}
	}

	// Token: 0x06000183 RID: 387 RVA: 0x0000FA7C File Offset: 0x0000DC7C
	public new bool isInvisible()
	{
		return this.status == 0 || this.status == 1;
	}

	// Token: 0x06000184 RID: 388 RVA: 0x0000FAA4 File Offset: 0x0000DCA4
	public new void removeHoldEff()
	{
		bool flag = this.holdEffID != 0;
		if (flag)
		{
			this.holdEffID = 0;
		}
	}

	// Token: 0x06000185 RID: 389 RVA: 0x0000FAC8 File Offset: 0x0000DCC8
	public new void removeBlindEff()
	{
		this.blindEff = false;
	}

	// Token: 0x06000186 RID: 390 RVA: 0x0000FAD2 File Offset: 0x0000DCD2
	public new void removeSleepEff()
	{
		this.sleepEff = false;
	}

	// Token: 0x06000187 RID: 391 RVA: 0x0000FADC File Offset: 0x0000DCDC
	public new void move(short xMoveTo)
	{
		this.xTo = (int)xMoveTo;
		this.status = 5;
	}

	// Token: 0x040000CB RID: 203
	public static Image shadowBig = GameCanvas.loadImage("/mainImage/shadowBig.png");

	// Token: 0x040000CC RID: 204
	public static EffectData data;

	// Token: 0x040000CD RID: 205
	public int xTo;

	// Token: 0x040000CE RID: 206
	public int yTo;

	// Token: 0x040000CF RID: 207
	public bool haftBody;

	// Token: 0x040000D0 RID: 208
	public bool change;

	// Token: 0x040000D1 RID: 209
	private Mob mob1;

	// Token: 0x040000D2 RID: 210
	public new int xSd;

	// Token: 0x040000D3 RID: 211
	public new int ySd;

	// Token: 0x040000D4 RID: 212
	private bool isOutMap;

	// Token: 0x040000D5 RID: 213
	private int wCount;

	// Token: 0x040000D6 RID: 214
	public new bool isShadown = true;

	// Token: 0x040000D7 RID: 215
	private int tick;

	// Token: 0x040000D8 RID: 216
	private int frame;

	// Token: 0x040000D9 RID: 217
	public new static Image imgHP = GameCanvas.loadImage("/mainImage/myTexture2dmobHP.png");

	// Token: 0x040000DA RID: 218
	private bool wy;

	// Token: 0x040000DB RID: 219
	private int wt;

	// Token: 0x040000DC RID: 220
	private int fy;

	// Token: 0x040000DD RID: 221
	private int ty;

	// Token: 0x040000DE RID: 222
	public new int typeSuperEff;

	// Token: 0x040000DF RID: 223
	private global::Char focus;

	// Token: 0x040000E0 RID: 224
	private bool flyUp;

	// Token: 0x040000E1 RID: 225
	private bool flyDown;

	// Token: 0x040000E2 RID: 226
	private int dy;

	// Token: 0x040000E3 RID: 227
	public bool changePos;

	// Token: 0x040000E4 RID: 228
	private int tShock;

	// Token: 0x040000E5 RID: 229
	public new bool isBusyAttackSomeOne = true;

	// Token: 0x040000E6 RID: 230
	private int tA;

	// Token: 0x040000E7 RID: 231
	private global::Char[] charAttack;

	// Token: 0x040000E8 RID: 232
	private long[] dameHP;

	// Token: 0x040000E9 RID: 233
	private sbyte type;

	// Token: 0x040000EA RID: 234
	public new int[] stand = new int[]
	{
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1
	};

	// Token: 0x040000EB RID: 235
	public int[] movee = new int[]
	{
		0,
		0,
		0,
		2,
		2,
		2,
		3,
		3,
		3,
		4,
		4,
		4
	};

	// Token: 0x040000EC RID: 236
	public new int[] attack1 = new int[]
	{
		0,
		0,
		0,
		4,
		4,
		4,
		5,
		5,
		5,
		6,
		6,
		6
	};

	// Token: 0x040000ED RID: 237
	public new int[] attack2 = new int[]
	{
		0,
		0,
		0,
		7,
		7,
		7,
		8,
		8,
		8,
		9,
		9,
		9,
		10,
		10,
		10,
		11,
		11
	};

	// Token: 0x040000EE RID: 238
	public new int[] hurt = new int[]
	{
		1,
		1,
		7,
		7
	};

	// Token: 0x040000EF RID: 239
	private bool shock;

	// Token: 0x040000F0 RID: 240
	private sbyte[] cou = new sbyte[]
	{
		-1,
		1
	};

	// Token: 0x040000F1 RID: 241
	public new global::Char injureBy;

	// Token: 0x040000F2 RID: 242
	public new bool injureThenDie;

	// Token: 0x040000F3 RID: 243
	public new Mob mobToAttack;

	// Token: 0x040000F4 RID: 244
	public new int forceWait;

	// Token: 0x040000F5 RID: 245
	public new bool blindEff;

	// Token: 0x040000F6 RID: 246
	public new bool sleepEff;
}
using System;
using Assets.src.e;

// Token: 0x02000025 RID: 37
public class BackgroudEffect
{
	// Token: 0x06000189 RID: 393 RVA: 0x0000FB10 File Offset: 0x0000DD10
	public BackgroudEffect(int typeS)
	{
		BackgroudEffect.isFog = true;
		BackgroudEffect.initCloud();
		this.typeEff = typeS;
		switch (this.typeEff)
		{
		case 0:
		case 12:
		{
			bool flag = BackgroudEffect.imgHatMua == null;
			if (flag)
			{
				BackgroudEffect.imgHatMua = GameCanvas.loadImageRMS("/bg/mua.png");
			}
			bool flag2 = BackgroudEffect.imgMua1 == null;
			if (flag2)
			{
				BackgroudEffect.imgMua1 = GameCanvas.loadImageRMS("/bg/mua1.png");
			}
			bool flag3 = BackgroudEffect.imgMua2 == null;
			if (flag3)
			{
				BackgroudEffect.imgMua2 = GameCanvas.loadImageRMS("/bg/mua2.png");
			}
			this.sum = Res.random(GameCanvas.w / 3, GameCanvas.w / 2);
			this.x = new int[this.sum];
			this.y = new int[this.sum];
			this.vx = new int[this.sum];
			this.vy = new int[this.sum];
			this.type = new int[this.sum];
			this.t = new int[this.sum];
			this.frame = new int[this.sum];
			this.isRainEffect = new bool[this.sum];
			this.activeEff = new bool[this.sum];
			for (int i = 0; i < this.sum; i++)
			{
				this.y[i] = Res.random(-10, GameCanvas.h + 100) + GameScr.cmy;
				this.x[i] = Res.random(-10, GameCanvas.w + 300) + GameScr.cmx;
				this.t[i] = Res.random(0, 1);
				this.vx[i] = -12;
				this.vy[i] = 12;
				this.type[i] = Res.random(1, 3);
				this.isRainEffect[i] = false;
				bool flag4 = this.type[i] == 2 && i % 2 == 0;
				if (flag4)
				{
					this.isRainEffect[i] = true;
				}
				this.activeEff[i] = false;
				this.frame[i] = Res.random(1, 2);
			}
			break;
		}
		case 1:
		case 2:
		case 5:
		case 6:
		case 7:
		case 11:
		case 15:
		{
			bool flag5 = this.typeEff == 1;
			if (flag5)
			{
				BackgroudEffect.imgLacay = GameCanvas.loadImageRMS("/bg/lacay.png");
				BackgroudEffect.PIXEL = 10;
			}
			bool flag6 = this.typeEff == 2;
			if (flag6)
			{
				BackgroudEffect.imgLacay = GameCanvas.loadImageRMS("/bg/lacay2.png");
				BackgroudEffect.PIXEL = 18;
			}
			bool flag7 = this.typeEff == 5;
			if (flag7)
			{
				BackgroudEffect.imgLacay = GameCanvas.loadImageRMS("/bg/lacay3.png");
				BackgroudEffect.PIXEL = 14;
			}
			bool flag8 = this.typeEff == 6;
			if (flag8)
			{
				BackgroudEffect.imgLacay = GameCanvas.loadImageRMS("/bg/lacay4.png");
				BackgroudEffect.PIXEL = 14;
			}
			bool flag9 = this.typeEff == 7;
			if (flag9)
			{
				BackgroudEffect.imgLacay = GameCanvas.loadImageRMS("/bg/lacay5.png");
				BackgroudEffect.PIXEL = 12;
			}
			bool flag10 = this.typeEff == 11;
			if (flag10)
			{
				BackgroudEffect.imgLacay = GameCanvas.loadImageRMS("/bg/tuyet.png");
			}
			bool flag11 = this.typeEff == 15;
			if (flag11)
			{
				Small small = SmallImage.imgNew[11120];
				bool flag12 = small == null;
				if (flag12)
				{
					SmallImage.createImage(11120);
				}
				BackgroudEffect.PIXEL = 16;
			}
			this.sum = Res.random(15, 25);
			bool flag13 = this.typeEff == 11;
			if (flag13)
			{
				this.sum = 100;
			}
			this.x = new int[this.sum];
			this.y = new int[this.sum];
			this.vx = new int[this.sum];
			this.vy = new int[this.sum];
			this.t = new int[this.sum];
			this.frame = new int[this.sum];
			this.activeEff = new bool[this.sum];
			for (int j = 0; j < this.sum; j++)
			{
				this.x[j] = Res.random(-10, TileMap.pxw + 10);
				this.y[j] = Res.random(0, TileMap.pxh);
				this.frame[j] = Res.random(0, 1);
				this.t[j] = Res.random(0, 1);
				this.vx[j] = Res.random(-3, 3);
				this.vy[j] = Res.random(1, 4);
				bool flag14 = this.typeEff == 11;
				if (flag14)
				{
					this.frame[j] = Res.random(0, 2);
					this.vx[j] = Res.abs(Res.random(1, 3));
					this.vy[j] = Res.abs(Res.random(1, 3));
				}
				bool flag15 = this.typeEff == 15;
				if (flag15)
				{
					this.frame[j] = Res.random(0, 2);
					this.vx[j] = Res.abs(Res.random(1, 3));
					this.vy[j] = Res.abs(Res.random(1, 3));
				}
			}
			break;
		}
		case 3:
			GameCanvas.isBoltEff = true;
			break;
		case 4:
		{
			this.sum = Res.random(5, 10);
			bool flag16 = BackgroudEffect.imgSao == null;
			if (flag16)
			{
				BackgroudEffect.imgSao = GameCanvas.loadImageRMS("/bg/sao.png");
			}
			this.x = new int[this.sum];
			this.y = new int[this.sum];
			this.frame = new int[this.sum];
			this.t = new int[this.sum];
			this.tick = new int[this.sum];
			for (int k = 0; k < this.sum; k++)
			{
				this.x[k] = Res.random(0, GameCanvas.w);
				this.y[k] = Res.random(0, 50);
				bool flag17 = k % 2 == 0;
				if (flag17)
				{
					this.tick[k] = 0;
				}
				else
				{
					bool flag18 = k % 3 == 0;
					if (flag18)
					{
						this.tick[k] = 1;
					}
					else
					{
						bool flag19 = k % 4 == 0;
						if (flag19)
						{
							this.tick[k] = 2;
						}
						else
						{
							this.tick[k] = 3;
						}
					}
				}
				this.t[k] = Res.random(0, 10);
			}
			break;
		}
		case 8:
		{
			this.tStart = Res.random(100, 300);
			bool flag20 = BackgroudEffect.imgShip == null;
			if (flag20)
			{
				BackgroudEffect.imgShip = GameCanvas.loadImageRMS("/bg/ship.png");
			}
			bool flag21 = BackgroudEffect.imgFire1 == null;
			if (flag21)
			{
				BackgroudEffect.imgFire1 = GameCanvas.loadImageRMS("/bg/fire1.png");
			}
			bool flag22 = BackgroudEffect.imgFire2 == null;
			if (flag22)
			{
				BackgroudEffect.imgFire2 = GameCanvas.loadImageRMS("/bg/fire2.png");
			}
			this.isFly = false;
			this.reloadShip();
			break;
		}
		case 9:
		{
			bool flag23 = BackgroudEffect.imgChamTron1 == null;
			if (flag23)
			{
				BackgroudEffect.imgChamTron1 = GameCanvas.loadImageRMS("/bg/cham-tron1.png");
			}
			bool flag24 = BackgroudEffect.imgChamTron2 == null;
			if (flag24)
			{
				BackgroudEffect.imgChamTron2 = GameCanvas.loadImageRMS("/bg/cham-tron2.png");
			}
			this.num = 20;
			this.x = new int[this.num];
			this.y = new int[this.num];
			BackgroudEffect.wP = new int[this.num];
			this.vx = new int[this.num];
			for (int l = 0; l < this.num; l++)
			{
				this.x[l] = Res.abs(Res.random(0, GameCanvas.w));
				this.y[l] = Res.abs(Res.random(10, 80));
				BackgroudEffect.wP[l] = Res.abs(Res.random(1, 3));
				this.vx[l] = BackgroudEffect.wP[l];
			}
			break;
		}
		case 10:
		{
			this.num = 30;
			this.x = new int[this.num];
			this.y = new int[this.num];
			BackgroudEffect.wP = new int[this.num];
			this.vx = new int[this.num];
			int num = 0;
			for (int m = 0; m < this.num; m++)
			{
				this.x[m] = Res.abs(Res.random(0, GameCanvas.w)) + GameScr.cmx;
				num++;
				bool flag25 = num > this.num / 2;
				if (flag25)
				{
					this.y[m] = Res.abs(Res.random(20, 60));
					BackgroudEffect.wP[m] = 10;
				}
				else
				{
					this.y[m] = Res.abs(Res.random(0, 20));
					BackgroudEffect.wP[m] = 7;
				}
				this.vx[m] = BackgroudEffect.wP[m] / 2 - 2;
			}
			break;
		}
		case 13:
		{
			bool flag26 = Res.abs(Res.random(0, 2)) == 0;
			if (flag26)
			{
				bool flag27 = Res.abs(Res.random(0, 2)) == 0;
				if (flag27)
				{
					BackgroudEffect.isPaintFar = true;
				}
				else
				{
					BackgroudEffect.isPaintFar = false;
				}
				BackgroudEffect.nCloud = Res.abs(Res.random(2, 5));
				BackgroudEffect.initCloud();
			}
			break;
		}
		case 14:
		{
			bool flag28 = Res.abs(Res.random(0, 2)) == 0;
			if (flag28)
			{
				BackgroudEffect.isFog = true;
				BackgroudEffect.initCloud();
			}
			break;
		}
		}
	}

	// Token: 0x0600018A RID: 394 RVA: 0x000104CB File Offset: 0x0000E6CB
	public static void clearImage()
	{
		TileMap.yWater = 0;
	}

	// Token: 0x0600018B RID: 395 RVA: 0x000104D4 File Offset: 0x0000E6D4
	public static bool isHaveRain()
	{
		for (int i = 0; i < BackgroudEffect.vBgEffect.size(); i++)
		{
			BackgroudEffect backgroudEffect = (BackgroudEffect)BackgroudEffect.vBgEffect.elementAt(i);
			bool flag = backgroudEffect.typeEff == 0 || backgroudEffect.typeEff == 12;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x0600018C RID: 396 RVA: 0x00010534 File Offset: 0x0000E734
	public static void initCloud()
	{
		bool flag = mSystem.clientType == 1;
		if (flag)
		{
			BackgroudEffect.imgCloud1 = null;
			BackgroudEffect.imgFog = null;
		}
		else
		{
			bool lowGraphic = GameCanvas.lowGraphic;
			if (lowGraphic)
			{
				BackgroudEffect.imgCloud1 = null;
				BackgroudEffect.imgFog = null;
			}
			else
			{
				bool flag2 = BackgroudEffect.nCloud > 0;
				if (flag2)
				{
					bool flag3 = BackgroudEffect.imgCloud1 == null;
					if (flag3)
					{
						BackgroudEffect.imgCloud1 = GameCanvas.loadImage("/bg/fog1.png");
						BackgroudEffect.cloudw = BackgroudEffect.imgCloud1.getWidth();
					}
				}
				else
				{
					BackgroudEffect.imgCloud1 = null;
				}
				bool flag4 = !BackgroudEffect.isFog;
				if (flag4)
				{
					BackgroudEffect.imgFog = null;
				}
				else
				{
					bool flag5 = BackgroudEffect.imgFog == null;
					if (flag5)
					{
						BackgroudEffect.imgFog = GameCanvas.loadImage("/bg/fog0.png");
					}
					BackgroudEffect.fogw = 287;
				}
			}
		}
	}

	// Token: 0x0600018D RID: 397 RVA: 0x00010600 File Offset: 0x0000E800
	public static void updateCloud2()
	{
		bool flag = mSystem.clientType == 1 || GameCanvas.lowGraphic || BackgroudEffect.nCloud <= 0;
		if (!flag)
		{
			int num = (GameCanvas.currentScreen != GameScr.gI()) ? (GameScr.cmx + GameCanvas.w) : TileMap.pxw;
			for (int i = 0; i < BackgroudEffect.nCloud; i++)
			{
				int num2 = i + 1;
				GameCanvas.cloudX[i] -= num2;
				bool flag2 = GameCanvas.cloudX[i] < -BackgroudEffect.cloudw;
				if (flag2)
				{
					GameCanvas.cloudX[i] = num + 100;
				}
			}
		}
	}

	// Token: 0x0600018E RID: 398 RVA: 0x000106A0 File Offset: 0x0000E8A0
	public static void updateFog()
	{
		bool flag = mSystem.clientType != 1 && !GameCanvas.lowGraphic && BackgroudEffect.isFog;
		if (flag)
		{
			BackgroudEffect.xfog--;
			bool flag2 = BackgroudEffect.xfog < -BackgroudEffect.fogw;
			if (flag2)
			{
				BackgroudEffect.xfog = 0;
			}
		}
	}

	// Token: 0x0600018F RID: 399 RVA: 0x000106F0 File Offset: 0x0000E8F0
	public static void paintCloud2(mGraphics g)
	{
		bool flag = mSystem.clientType == 1 || GameCanvas.lowGraphic || BackgroudEffect.nCloud == 0 || BackgroudEffect.imgCloud1 == null;
		if (!flag)
		{
			for (int i = 0; i < BackgroudEffect.nCloud; i++)
			{
				int num = i;
				bool flag2 = num > 3;
				if (flag2)
				{
					num = 3;
				}
				bool flag3 = num == 0;
				if (flag3)
				{
				}
				g.drawImage(BackgroudEffect.imgCloud1, GameCanvas.cloudX[i], GameCanvas.cloudY[i], 3);
			}
		}
	}

	// Token: 0x06000190 RID: 400 RVA: 0x00010778 File Offset: 0x0000E978
	public static void paintFog(mGraphics g)
	{
		bool flag = mSystem.clientType == 1 || GameCanvas.lowGraphic || !BackgroudEffect.isFog || BackgroudEffect.imgFog == null;
		if (!flag)
		{
			for (int i = BackgroudEffect.xfog; i < TileMap.pxw; i += BackgroudEffect.fogw)
			{
				bool flag2 = i >= GameScr.cmx - BackgroudEffect.fogw;
				if (flag2)
				{
					g.drawImageFog(BackgroudEffect.imgFog, i, BackgroudEffect.yfog, 0);
				}
			}
		}
	}

	// Token: 0x06000191 RID: 401 RVA: 0x000107F8 File Offset: 0x0000E9F8
	private void reloadShip()
	{
		int cmx = GameScr.cmx;
		int cmy = GameScr.cmy;
		this.way = Res.random(1, 3);
		this.isFly = false;
		this.speed = Res.random(3, 5);
		bool flag = this.way == 1;
		if (flag)
		{
			this.xShip = -50;
			this.yShip = Res.random(cmy, GameCanvas.h - 100 + cmy);
			this.trans = 0;
		}
		else
		{
			bool flag2 = this.way == 2;
			if (flag2)
			{
				this.xShip = TileMap.pxw + 50;
				this.yShip = Res.random(cmy, GameCanvas.h - 100 + cmy);
				this.trans = 2;
			}
			else
			{
				bool flag3 = this.way == 3;
				if (flag3)
				{
					this.xShip = Res.random(50 + cmx, GameCanvas.w - 50 + cmx);
					this.yShip = -50;
					this.trans = ((Res.random(0, 2) != 0) ? 2 : 0);
				}
				else
				{
					bool flag4 = this.way == 4;
					if (flag4)
					{
						this.xShip = Res.random(50 + cmx, GameCanvas.w - 50 + cmx);
						this.yShip = TileMap.pxh + 50;
						this.trans = ((Res.random(0, 2) != 0) ? 2 : 0);
					}
				}
			}
		}
	}

	// Token: 0x06000192 RID: 402 RVA: 0x00010948 File Offset: 0x0000EB48
	public void paintWater(mGraphics g)
	{
		bool flag = this.typeEff != 10;
		if (!flag)
		{
			g.setColor(this.colorWater);
			for (int i = 0; i < this.num; i++)
			{
				g.drawImage((i >= this.num / 2) ? BackgroudEffect.water1 : BackgroudEffect.water2, this.x[i], this.y[i] + this.yWater, 0);
			}
			bool flag2 = BackgroudEffect.id_water1 != 0 && BackgroudEffect.water3 == null;
			if (flag2)
			{
				BackgroudEffect.water3 = SmallImage.imgNew[(int)BackgroudEffect.id_water1].img;
			}
			bool flag3 = BackgroudEffect.water3 != null;
			if (flag3)
			{
				for (int j = 0; j < this.num / 2; j++)
				{
					g.drawImage(BackgroudEffect.water3, this.x[j], this.y[j] + this.yWater, 0);
				}
			}
		}
	}

	// Token: 0x06000193 RID: 403 RVA: 0x00010A4C File Offset: 0x0000EC4C
	public void paintFar(mGraphics g)
	{
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		bool flag = this.typeEff == 4;
		if (flag)
		{
			for (int i = 0; i < this.sum; i++)
			{
				g.drawRegion(BackgroudEffect.imgSao, 0, 16 * this.frame[i], 16, 16, 0, this.x[i], this.y[i], 0);
			}
		}
		bool flag2 = this.typeEff == 9;
		if (flag2)
		{
			g.setColor(16777215);
			for (int j = 0; j < this.num; j++)
			{
				g.drawImage((BackgroudEffect.wP[j] != 1) ? BackgroudEffect.imgChamTron2 : BackgroudEffect.imgChamTron1, this.x[j], this.y[j], 3);
			}
		}
	}

	// Token: 0x06000194 RID: 404 RVA: 0x00010B30 File Offset: 0x0000ED30
	public void update()
	{
		try
		{
			switch (this.typeEff)
			{
			case 0:
			case 12:
				for (int i = 0; i < this.sum; i++)
				{
					bool flag = i % 3 != 0 && this.typeEff != 12 && TileMap.tileTypeAt(this.x[i], this.y[i] - GameCanvas.transY, 2);
					if (flag)
					{
						this.activeEff[i] = true;
					}
					bool flag2 = i % 3 == 0 && this.y[i] > GameCanvas.h + GameScr.cmy;
					if (flag2)
					{
						this.x[i] = Res.random(-10, GameCanvas.w + 300) + GameScr.cmx;
						this.y[i] = Res.random(-100, 0) + GameScr.cmy;
					}
					bool flag3 = !this.activeEff[i];
					if (flag3)
					{
						this.y[i] += this.vy[i];
						this.x[i] += this.vx[i];
					}
					bool flag4 = !this.activeEff[i];
					if (!flag4)
					{
						this.t[i]++;
						bool flag5 = this.t[i] > 2;
						if (flag5)
						{
							this.frame[i]++;
							this.t[i] = 0;
							bool flag6 = this.frame[i] > 1;
							if (flag6)
							{
								this.frame[i] = 0;
								this.activeEff[i] = false;
								this.x[i] = Res.random(-10, GameCanvas.w + 300) + GameScr.cmx;
								this.y[i] = Res.random(-100, 0) + GameScr.cmy;
							}
						}
					}
				}
				break;
			case 1:
			case 2:
			case 5:
			case 6:
			case 7:
			case 11:
			case 15:
				for (int j = 0; j < this.sum; j++)
				{
					bool flag7 = j % 3 != 0 && TileMap.tileTypeAt(this.x[j], this.y[j] + ((TileMap.tileID == 15) ? 10 : 0), 2);
					if (flag7)
					{
						this.activeEff[j] = true;
					}
					bool flag8 = j % 3 == 0 && this.y[j] > TileMap.pxh;
					if (flag8)
					{
						this.x[j] = Res.random(-10, TileMap.pxw + 50);
						this.y[j] = Res.random(-50, 0);
					}
					bool flag9 = !this.activeEff[j];
					if (flag9)
					{
						for (int k = 0; k < Teleport.vTeleport.size(); k++)
						{
							Teleport teleport = (Teleport)Teleport.vTeleport.elementAt(k);
							bool flag10 = teleport != null && teleport.paintFire && this.x[j] < teleport.x + 80 && this.x[j] > teleport.x - 80 && this.y[j] < teleport.y + 80 && this.y[j] > teleport.y - 80;
							if (flag10)
							{
								this.x[j] += ((this.x[j] >= teleport.x) ? 10 : -10);
							}
						}
						this.y[j] += this.vy[j];
						this.x[j] += this.vx[j];
						this.t[j]++;
						int num = (this.typeEff != 11) ? 4 : 3;
						int num2 = (this.typeEff != 15) ? 4 : 4;
						bool flag11 = this.t[j] > ((this.typeEff == 2) ? 4 : 2);
						if (flag11)
						{
							bool flag12 = this.typeEff != 11 && this.typeEff != 15;
							if (flag12)
							{
								this.frame[j]++;
							}
							this.t[j] = 0;
							bool flag13 = this.frame[j] > num2 - 1;
							if (flag13)
							{
								this.frame[j] = 0;
							}
						}
					}
					else
					{
						this.t[j]++;
						bool flag14 = this.t[j] == 100;
						if (flag14)
						{
							this.t[j] = 0;
							this.x[j] = Res.random(-10, TileMap.pxw + 50);
							this.y[j] = Res.random(-50, 0);
							this.activeEff[j] = false;
						}
					}
				}
				break;
			case 4:
				for (int l = 0; l < this.sum; l++)
				{
					this.t[l]++;
					bool flag15 = this.t[l] > 10;
					if (flag15)
					{
						this.tick[l]++;
						this.t[l] = 0;
						bool flag16 = this.tick[l] > 5;
						if (flag16)
						{
							this.tick[l] = 0;
						}
						this.frame[l] = this.dem[this.tick[l]];
					}
				}
				break;
			case 8:
			{
				this.tFire++;
				bool flag17 = this.tFire == 3;
				if (flag17)
				{
					this.tFire = 0;
					this.frameFire++;
					bool flag18 = this.frameFire > 1;
					if (flag18)
					{
						this.frameFire = 0;
					}
				}
				bool flag19 = GameCanvas.gameTick % this.tStart == 0;
				if (flag19)
				{
					this.isFly = true;
				}
				bool flag20 = !this.isFly;
				if (!flag20)
				{
					bool flag21 = this.way == 1;
					if (flag21)
					{
						this.xShip += this.speed;
						bool flag22 = this.xShip > TileMap.pxw + 50;
						if (flag22)
						{
							this.reloadShip();
						}
					}
					else
					{
						bool flag23 = this.way == 2;
						if (flag23)
						{
							this.xShip -= this.speed;
							bool flag24 = this.xShip < -50;
							if (flag24)
							{
								this.reloadShip();
							}
						}
						else
						{
							bool flag25 = this.way == 3;
							if (flag25)
							{
								this.yShip += this.speed;
								bool flag26 = this.yShip > TileMap.pxh + 50;
								if (flag26)
								{
									this.reloadShip();
								}
							}
							else
							{
								bool flag27 = this.way == 4;
								if (flag27)
								{
									this.yShip -= this.speed;
									bool flag28 = this.yShip < -50;
									if (flag28)
									{
										this.reloadShip();
									}
								}
							}
						}
					}
				}
				break;
			}
			case 9:
				for (int m = 0; m < this.num; m++)
				{
					this.x[m] -= this.vx[m];
					bool flag29 = this.x[m] < -this.vx[m];
					if (flag29)
					{
						BackgroudEffect.wP[m] = Res.abs(Res.random(1, 3));
						this.vx[m] = BackgroudEffect.wP[m];
						this.x[m] = GameCanvas.w + this.vx[m];
					}
				}
				break;
			case 10:
				for (int n = 0; n < this.num; n++)
				{
					this.x[n] -= this.vx[n];
					bool flag30 = this.x[n] < -this.vx[n] + GameScr.cmx;
					if (flag30)
					{
						this.x[n] = GameCanvas.w + this.vx[n] + GameScr.cmx;
					}
				}
				break;
			case 13:
				BackgroudEffect.updateCloud2();
				break;
			case 14:
				BackgroudEffect.updateFog();
				break;
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000195 RID: 405 RVA: 0x000113C0 File Offset: 0x0000F5C0
	public void paintFront(mGraphics g)
	{
		try
		{
			switch (this.typeEff)
			{
			case 0:
			case 12:
			{
				int cmx = GameScr.cmx;
				int cmy = GameScr.cmy;
				for (int i = 0; i < this.sum; i++)
				{
					bool flag = this.type[i] == 2 && this.x[i] >= GameScr.cmx && this.x[i] <= GameCanvas.w + GameScr.cmx && this.y[i] >= GameScr.cmy && this.y[i] <= GameCanvas.h + GameScr.cmy;
					if (flag)
					{
						bool flag2 = this.activeEff[i];
						if (flag2)
						{
							g.drawRegion(BackgroudEffect.imgHatMua, 0, 10 * this.frame[i], 13, 10, 0, this.x[i], this.y[i] - 10, 0);
						}
						else
						{
							g.drawImage(BackgroudEffect.imgMua1, this.x[i], this.y[i], 0);
						}
					}
				}
				break;
			}
			case 1:
			case 2:
			case 5:
			case 6:
			case 7:
			case 11:
			case 15:
			{
				bool flag3 = this.typeEff == 15;
				if (flag3)
				{
					bool flag4 = SmallImage.imgNew[11120] != null && SmallImage.imgNew[11120].img != null;
					if (flag4)
					{
						BackgroudEffect.imgLacay = SmallImage.imgNew[11120].img;
					}
					bool flag5 = BackgroudEffect.imgLacay == null;
					if (flag5)
					{
						break;
					}
				}
				this.paintLacay1(g, BackgroudEffect.imgLacay);
				break;
			}
			case 13:
			{
				bool flag6 = !BackgroudEffect.isPaintFar;
				if (flag6)
				{
					BackgroudEffect.paintCloud2(g);
				}
				break;
			}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000196 RID: 406 RVA: 0x000115DC File Offset: 0x0000F7DC
	public void paintLacay1(mGraphics g, Image img)
	{
		int num = (this.typeEff != 11) ? 4 : 3;
		int num2 = (this.typeEff != 15) ? 4 : 4;
		bool flag = this.typeEff == 11;
		if (flag)
		{
			BackgroudEffect.PIXEL = 5;
		}
		for (int i = 0; i < this.sum; i++)
		{
			bool flag2 = i % 3 == 0 && this.x[i] >= GameScr.cmx && this.x[i] <= GameCanvas.w + GameScr.cmx && this.y[i] >= GameScr.cmy && this.y[i] <= GameCanvas.h + GameScr.cmy && img != null;
			if (flag2)
			{
				g.drawRegion(img, 0, BackgroudEffect.PIXEL * this.frame[i], img.getWidth(), BackgroudEffect.PIXEL, 0, this.x[i], this.y[i], 0);
			}
		}
	}

	// Token: 0x06000197 RID: 407 RVA: 0x000116CC File Offset: 0x0000F8CC
	public void paintLacay2(mGraphics g, Image img)
	{
		int num = (this.typeEff != 11) ? 4 : 3;
		int num2 = (this.typeEff != 15) ? 4 : 4;
		bool flag = this.typeEff == 11;
		if (flag)
		{
			BackgroudEffect.PIXEL = 5;
		}
		for (int i = 0; i < this.sum; i++)
		{
			bool flag2 = i % 3 != 0 && this.x[i] >= GameScr.cmx && this.x[i] <= GameCanvas.w + GameScr.cmx && this.y[i] >= GameScr.cmy && this.y[i] <= GameCanvas.h + GameScr.cmy && img != null;
			if (flag2)
			{
				g.drawRegion(img, 0, BackgroudEffect.PIXEL * this.frame[i], img.getWidth(), BackgroudEffect.PIXEL, 0, this.x[i], this.y[i], 0);
			}
		}
	}

	// Token: 0x06000198 RID: 408 RVA: 0x000117BC File Offset: 0x0000F9BC
	public void paintBehindTile(mGraphics g)
	{
		int num = this.typeEff;
		int num2 = num;
		if (num2 != 8)
		{
			if (num2 == 13)
			{
				bool flag = BackgroudEffect.isPaintFar;
				if (flag)
				{
					BackgroudEffect.paintCloud2(g);
				}
			}
		}
		else
		{
			g.drawRegion(BackgroudEffect.imgShip, 0, 0, BackgroudEffect.imgShip.getWidth(), BackgroudEffect.imgShip.getHeight(), this.trans, this.xShip, this.yShip, 3);
			bool flag2 = this.way == 1 || this.way == 2;
			if (flag2)
			{
				int num3 = (this.trans != 0) ? 25 : -25;
				g.drawRegion(BackgroudEffect.imgFire1, 0, this.frameFire * 8, 20, 8, this.trans, this.xShip + num3, this.yShip + 5, 3);
			}
			else
			{
				int num4 = (this.trans != 0) ? -11 : 11;
				g.drawRegion(BackgroudEffect.imgFire2, 0, this.frameFire * 18, 8, 18, this.trans, this.xShip + num4, this.yShip + 22, 3);
			}
		}
	}

	// Token: 0x06000199 RID: 409 RVA: 0x000118D4 File Offset: 0x0000FAD4
	public void paintBack(mGraphics g)
	{
		switch (this.typeEff)
		{
		case 0:
		{
			int cmx = GameScr.cmx;
			int cmy = GameScr.cmy;
			g.setColor(10742731);
			for (int i = 0; i < this.sum; i++)
			{
				bool flag = this.type[i] != 2 && this.x[i] >= GameScr.cmx && this.x[i] <= GameCanvas.w + GameScr.cmx && this.y[i] >= GameScr.cmy && this.y[i] <= GameCanvas.h + GameScr.cmy;
				if (flag)
				{
					g.drawImage(BackgroudEffect.imgMua2, this.x[i], this.y[i], 0);
				}
			}
			break;
		}
		case 1:
		case 2:
		case 5:
		case 6:
		case 7:
		case 11:
		case 15:
		{
			bool flag2 = this.typeEff == 15;
			if (flag2)
			{
				bool flag3 = SmallImage.imgNew[11120] != null && SmallImage.imgNew[11120].img != null;
				if (flag3)
				{
					BackgroudEffect.imgLacay = SmallImage.imgNew[11120].img;
				}
				bool flag4 = BackgroudEffect.imgLacay == null;
				if (flag4)
				{
					break;
				}
			}
			this.paintLacay2(g, BackgroudEffect.imgLacay);
			break;
		}
		}
	}

	// Token: 0x0600019A RID: 410 RVA: 0x00011A74 File Offset: 0x0000FC74
	public static void addEffect(int id)
	{
		bool flag = !GameCanvas.lowGraphic;
		if (flag)
		{
			BackgroudEffect o = new BackgroudEffect(id);
			BackgroudEffect.vBgEffect.addElement(o);
		}
	}

	// Token: 0x0600019B RID: 411 RVA: 0x00011AA4 File Offset: 0x0000FCA4
	public static void addWater(int color, int yWater)
	{
		BackgroudEffect backgroudEffect = new BackgroudEffect(10);
		backgroudEffect.colorWater = color;
		backgroudEffect.yWater = yWater;
		BackgroudEffect.vBgEffect.addElement(backgroudEffect);
	}

	// Token: 0x0600019C RID: 412 RVA: 0x00011AD4 File Offset: 0x0000FCD4
	public static void paintWaterAll(mGraphics g)
	{
		for (int i = 0; i < BackgroudEffect.vBgEffect.size(); i++)
		{
			((BackgroudEffect)BackgroudEffect.vBgEffect.elementAt(i)).paintWater(g);
		}
	}

	// Token: 0x0600019D RID: 413 RVA: 0x00011B14 File Offset: 0x0000FD14
	public static void paintBehindTileAll(mGraphics g)
	{
		for (int i = 0; i < BackgroudEffect.vBgEffect.size(); i++)
		{
			((BackgroudEffect)BackgroudEffect.vBgEffect.elementAt(i)).paintBehindTile(g);
		}
	}

	// Token: 0x0600019E RID: 414 RVA: 0x00011B54 File Offset: 0x0000FD54
	public static void paintFrontAll(mGraphics g)
	{
		for (int i = 0; i < BackgroudEffect.vBgEffect.size(); i++)
		{
			((BackgroudEffect)BackgroudEffect.vBgEffect.elementAt(i)).paintFront(g);
		}
	}

	// Token: 0x0600019F RID: 415 RVA: 0x00011B94 File Offset: 0x0000FD94
	public static void paintFarAll(mGraphics g)
	{
		for (int i = 0; i < BackgroudEffect.vBgEffect.size(); i++)
		{
			((BackgroudEffect)BackgroudEffect.vBgEffect.elementAt(i)).paintFar(g);
		}
	}

	// Token: 0x060001A0 RID: 416 RVA: 0x00011BD4 File Offset: 0x0000FDD4
	public static void paintBackAll(mGraphics g)
	{
		for (int i = 0; i < BackgroudEffect.vBgEffect.size(); i++)
		{
			((BackgroudEffect)BackgroudEffect.vBgEffect.elementAt(i)).paintBack(g);
		}
	}

	// Token: 0x060001A1 RID: 417 RVA: 0x00011C14 File Offset: 0x0000FE14
	public static void updateEff()
	{
		for (int i = 0; i < BackgroudEffect.vBgEffect.size(); i++)
		{
			((BackgroudEffect)BackgroudEffect.vBgEffect.elementAt(i)).update();
		}
	}

	// Token: 0x040000F7 RID: 247
	public static MyVector vBgEffect = new MyVector();

	// Token: 0x040000F8 RID: 248
	private int[] x;

	// Token: 0x040000F9 RID: 249
	private int[] y;

	// Token: 0x040000FA RID: 250
	private int[] vx;

	// Token: 0x040000FB RID: 251
	private int[] vy;

	// Token: 0x040000FC RID: 252
	public static int[] wP;

	// Token: 0x040000FD RID: 253
	private int num;

	// Token: 0x040000FE RID: 254
	private int xShip;

	// Token: 0x040000FF RID: 255
	private int yShip;

	// Token: 0x04000100 RID: 256
	private int way;

	// Token: 0x04000101 RID: 257
	private int trans;

	// Token: 0x04000102 RID: 258
	private int frameFire;

	// Token: 0x04000103 RID: 259
	private int tFire;

	// Token: 0x04000104 RID: 260
	private int tStart;

	// Token: 0x04000105 RID: 261
	private int speed;

	// Token: 0x04000106 RID: 262
	private bool isFly;

	// Token: 0x04000107 RID: 263
	public static Image imgSnow;

	// Token: 0x04000108 RID: 264
	public static Image imgHatMua;

	// Token: 0x04000109 RID: 265
	public static Image imgMua1;

	// Token: 0x0400010A RID: 266
	public static Image imgMua2;

	// Token: 0x0400010B RID: 267
	public static Image imgSao;

	// Token: 0x0400010C RID: 268
	private static Image imgLacay;

	// Token: 0x0400010D RID: 269
	private static Image imgShip;

	// Token: 0x0400010E RID: 270
	private static Image imgFire1;

	// Token: 0x0400010F RID: 271
	private static Image imgFire2;

	// Token: 0x04000110 RID: 272
	private int[] type;

	// Token: 0x04000111 RID: 273
	private int sum;

	// Token: 0x04000112 RID: 274
	public int typeEff;

	// Token: 0x04000113 RID: 275
	public int xx;

	// Token: 0x04000114 RID: 276
	public int waterY;

	// Token: 0x04000115 RID: 277
	private bool[] isRainEffect;

	// Token: 0x04000116 RID: 278
	private int[] frame;

	// Token: 0x04000117 RID: 279
	private int[] t;

	// Token: 0x04000118 RID: 280
	private bool[] activeEff;

	// Token: 0x04000119 RID: 281
	private int yWater;

	// Token: 0x0400011A RID: 282
	private int colorWater;

	// Token: 0x0400011B RID: 283
	public const int TYPE_MUA = 0;

	// Token: 0x0400011C RID: 284
	public const int TYPE_LATRAIDAT_1 = 1;

	// Token: 0x0400011D RID: 285
	public const int TYPE_LATRAIDAT_2 = 2;

	// Token: 0x0400011E RID: 286
	public const int TYPE_SAMSET = 3;

	// Token: 0x0400011F RID: 287
	public const int TYPE_SAO = 4;

	// Token: 0x04000120 RID: 288
	public const int TYPE_LANAMEK_1 = 5;

	// Token: 0x04000121 RID: 289
	public const int TYPE_LASAYAI_1 = 6;

	// Token: 0x04000122 RID: 290
	public const int TYPE_LANAMEK_2 = 7;

	// Token: 0x04000123 RID: 291
	public const int TYPE_SHIP_TRAIDAT = 8;

	// Token: 0x04000124 RID: 292
	public const int TYPE_HANHTINH = 9;

	// Token: 0x04000125 RID: 293
	public const int TYPE_WATER = 10;

	// Token: 0x04000126 RID: 294
	public const int TYPE_SNOW = 11;

	// Token: 0x04000127 RID: 295
	public const int TYPE_MUA_FRONT = 12;

	// Token: 0x04000128 RID: 296
	public const int TYPE_CLOUD = 13;

	// Token: 0x04000129 RID: 297
	public const int TYPE_FOG = 14;

	// Token: 0x0400012A RID: 298
	public const int TYPE_LUNAR_YEAR = 15;

	// Token: 0x0400012B RID: 299
	public static int PIXEL = 16;

	// Token: 0x0400012C RID: 300
	public static Image water1 = GameCanvas.loadImage("/mainImage/myTexture2dwater1.png");

	// Token: 0x0400012D RID: 301
	public static Image water2 = GameCanvas.loadImage("/mainImage/myTexture2dwater2.png");

	// Token: 0x0400012E RID: 302
	public static Image imgChamTron1;

	// Token: 0x0400012F RID: 303
	public static Image imgChamTron2;

	// Token: 0x04000130 RID: 304
	public static short id_water1;

	// Token: 0x04000131 RID: 305
	public static short id_water2;

	// Token: 0x04000132 RID: 306
	public static Image water3 = null;

	// Token: 0x04000133 RID: 307
	public static bool isFog;

	// Token: 0x04000134 RID: 308
	public static bool isPaintFar;

	// Token: 0x04000135 RID: 309
	public static int nCloud;

	// Token: 0x04000136 RID: 310
	public static Image imgCloud1;

	// Token: 0x04000137 RID: 311
	public static Image imgFog;

	// Token: 0x04000138 RID: 312
	public static int cloudw;

	// Token: 0x04000139 RID: 313
	public static int xfog;

	// Token: 0x0400013A RID: 314
	public static int yfog;

	// Token: 0x0400013B RID: 315
	public static int fogw;

	// Token: 0x0400013C RID: 316
	private int[] dem = new int[]
	{
		0,
		1,
		2,
		1,
		0,
		0
	};

	// Token: 0x0400013D RID: 317
	private int[] tick;
}
using System;

// Token: 0x02000026 RID: 38
public class BallInfo
{
	// Token: 0x060001A3 RID: 419 RVA: 0x00011C8C File Offset: 0x0000FE8C
	public void SetChar()
	{
		this.cFocus = new global::Char();
		this.cFocus.charID = Res.random(-999, -800);
		this.cFocus.head = -1;
		this.cFocus.body = -1;
		this.cFocus.leg = -1;
		this.cFocus.bag = -1;
		this.cFocus.cName = string.Empty;
		this.cFocus.cHP = (this.cFocus.cHPFull = 20L);
	}

	// Token: 0x060001A4 RID: 420 RVA: 0x00011D1B File Offset: 0x0000FF1B
	public void UpdChar()
	{
		this.cFocus.cx = this.x;
		this.cFocus.cy = this.y;
	}

	// Token: 0x0400013E RID: 318
	public int x;

	// Token: 0x0400013F RID: 319
	public int y;

	// Token: 0x04000140 RID: 320
	public int xTo = -999;

	// Token: 0x04000141 RID: 321
	public int yTo = -999;

	// Token: 0x04000142 RID: 322
	public int count;

	// Token: 0x04000143 RID: 323
	public int vy;

	// Token: 0x04000144 RID: 324
	public int vx;

	// Token: 0x04000145 RID: 325
	public int dir;

	// Token: 0x04000146 RID: 326
	public int idImg;

	// Token: 0x04000147 RID: 327
	public bool isPaint = true;

	// Token: 0x04000148 RID: 328
	public bool isDone;

	// Token: 0x04000149 RID: 329
	public bool isSetImg;

	// Token: 0x0400014A RID: 330
	public global::Char cFocus;
}
using System;

// Token: 0x02000027 RID: 39
public class BgItem
{
	// Token: 0x060001A6 RID: 422 RVA: 0x00011D66 File Offset: 0x0000FF66
	public static void clearHashTable()
	{
	}

	// Token: 0x060001A7 RID: 423 RVA: 0x00011D6C File Offset: 0x0000FF6C
	public static bool isExistKeyNews(string keyNew)
	{
		for (int i = 0; i < BgItem.vKeysNew.size(); i++)
		{
			string text = (string)BgItem.vKeysNew.elementAt(i);
			bool flag = text.Equals(keyNew);
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060001A8 RID: 424 RVA: 0x00011DC0 File Offset: 0x0000FFC0
	public static bool isExistKeyLast(string keyLast)
	{
		for (int i = 0; i < BgItem.vKeysLast.size(); i++)
		{
			string text = (string)BgItem.vKeysLast.elementAt(i);
			bool flag = text.Equals(keyLast);
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060001A9 RID: 425 RVA: 0x00011E14 File Offset: 0x00010014
	public bool isNotBlend()
	{
		bool flag = mGraphics.zoomLevel == 1;
		bool result;
		if (flag)
		{
			result = true;
		}
		else
		{
			bool flag2 = TileMap.isInAirMap();
			if (flag2)
			{
				result = true;
			}
			else
			{
				for (int i = 0; i < BgItem.idNotBlend.Length; i++)
				{
					bool flag3 = (int)this.idImage == BgItem.idNotBlend[i];
					if (flag3)
					{
						return true;
					}
				}
				result = false;
			}
		}
		return result;
	}

	// Token: 0x060001AA RID: 426 RVA: 0x00011E7C File Offset: 0x0001007C
	public bool isMiniBg()
	{
		for (int i = 0; i < BgItem.isMiniBgz.Length; i++)
		{
			bool flag = (int)this.idImage == BgItem.isMiniBgz[i];
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060001AB RID: 427 RVA: 0x00011EC0 File Offset: 0x000100C0
	public void changeColor()
	{
		bool flag = this.isNotBlend() || this.layer == 2 || this.layer == 4 || BgItem.imgNew.containsKey(this.idImage.ToString() + "blend" + this.layer.ToString());
		if (!flag)
		{
			Image image = (Image)BgItem.imgNew.get(this.idImage.ToString() + string.Empty);
			bool flag2 = image != null && image.getRealImageWidth() > 4;
			if (flag2)
			{
				sbyte[] array = Rms.loadRMS(string.Concat(new string[]
				{
					"x",
					mGraphics.zoomLevel.ToString(),
					"blend",
					this.idImage.ToString(),
					"layer",
					this.layer.ToString()
				}));
				bool flag3 = array == null;
				if (flag3)
				{
					BgItem.imgNew.put(this.idImage.ToString() + "blend" + this.layer.ToString(), BgItemMn.blendImage(image, (int)this.layer, (int)this.idImage));
				}
				else
				{
					Image v = Image.createImage(array, 0, array.Length);
					BgItem.imgNew.put(this.idImage.ToString() + "blend" + this.layer.ToString(), v);
				}
			}
		}
	}

	// Token: 0x060001AC RID: 428 RVA: 0x00012034 File Offset: 0x00010234
	public void paint(mGraphics g)
	{
		bool flag = global::Char.isLoadingMap || (this.idImage == 279 && GameScr.gI().tMabuEff >= 110);
		if (!flag)
		{
			int cmx = GameScr.cmx;
			int cmy = GameScr.cmy;
			Image image = (this.layer == 2 || this.layer == 4) ? ((Image)BgItem.imgNew.get(this.idImage.ToString() + string.Empty)) : (this.isNotBlend() ? ((Image)BgItem.imgNew.get(this.idImage.ToString() + string.Empty)) : ((Image)BgItem.imgNew.get(this.idImage.ToString() + "blend" + this.layer.ToString())));
			bool flag2 = image == null || this.idImage == 96;
			if (!flag2)
			{
				bool flag3 = this.layer == 4;
				if (flag3)
				{
					this.transX = -cmx / 2 + 100;
				}
				bool flag4 = this.idImage == 28 && this.layer == 3;
				if (flag4)
				{
					this.transX = -cmx / 3 + 200;
				}
				bool flag5 = (this.idImage == 67 || this.idImage == 68 || this.idImage == 69 || this.idImage == 70) && this.layer == 3;
				if (flag5)
				{
					this.transX = -cmx / 3 + 200;
				}
				bool flag6 = this.isMiniBg() && this.layer < 4;
				if (flag6)
				{
					this.transX = -(cmx >> 4) + 50;
					this.transY = (cmy >> 5) - 15;
				}
				int num = this.x + this.dx + this.transX;
				int num2 = this.y + this.dy + this.transY;
				bool flag7 = this.x + this.dx + image.getWidth() + this.transX >= cmx && this.x + this.dx + this.transX <= cmx + GameCanvas.w && this.y + this.dy + this.transY + image.getHeight() >= cmy && this.y + this.dy + this.transY <= cmy + GameCanvas.h;
				if (flag7)
				{
					g.drawRegion(image, 0, 0, mGraphics.getImageWidth(image), mGraphics.getImageHeight(image), this.trans, this.x + this.dx + this.transX, this.y + this.dy + this.transY, 0);
					bool flag8 = this.idImage == 11 && TileMap.mapID != 122;
					if (flag8)
					{
						g.setClip(num, num2 + 24, 48, 14);
						for (int i = 0; i < 2; i++)
						{
							g.drawRegion(TileMap.imgWaterflow, 0, (GameCanvas.gameTick % 8 >> 2) * 24, 24, 24, 0, num + i * 24, num2 + 24, 0);
						}
						g.setClip(GameScr.cmx, GameScr.cmy, GameScr.gW, GameScr.gH);
					}
				}
				bool flag9 = TileMap.isDoubleMap() && this.idImage > 137 && this.idImage != 156 && this.idImage != 159 && this.idImage != 157 && this.idImage != 165 && this.idImage != 167 && this.idImage != 168 && this.idImage != 169 && this.idImage != 170 && this.idImage != 238 && TileMap.pxw - (this.x + this.dx + this.transX) >= cmx && TileMap.pxw - (this.x + this.dx + this.transX + image.getWidth()) <= cmx + GameCanvas.w && this.y + this.dy + this.transY + image.getHeight() >= cmy && this.y + this.dy + this.transY <= cmy + GameCanvas.h && (this.idImage < 241 || this.idImage >= 266);
				if (flag9)
				{
					g.drawRegion(image, 0, 0, mGraphics.getImageWidth(image), mGraphics.getImageHeight(image), 2, TileMap.pxw - (this.x + this.dx + this.transX), this.y + this.dy + this.transY, StaticObj.TOP_RIGHT);
				}
			}
		}
	}

	// Token: 0x0400014B RID: 331
	public int id;

	// Token: 0x0400014C RID: 332
	public int trans;

	// Token: 0x0400014D RID: 333
	public short idImage;

	// Token: 0x0400014E RID: 334
	public int x;

	// Token: 0x0400014F RID: 335
	public int y;

	// Token: 0x04000150 RID: 336
	public int dx;

	// Token: 0x04000151 RID: 337
	public int dy;

	// Token: 0x04000152 RID: 338
	public sbyte layer;

	// Token: 0x04000153 RID: 339
	public int nTilenotMove;

	// Token: 0x04000154 RID: 340
	public int[] tileX;

	// Token: 0x04000155 RID: 341
	public int[] tileY;

	// Token: 0x04000156 RID: 342
	public static MyHashTable imgNew = new MyHashTable();

	// Token: 0x04000157 RID: 343
	public static MyVector vKeysNew = new MyVector();

	// Token: 0x04000158 RID: 344
	public static MyVector vKeysLast = new MyVector();

	// Token: 0x04000159 RID: 345
	private bool isBlur;

	// Token: 0x0400015A RID: 346
	public int transX;

	// Token: 0x0400015B RID: 347
	public int transY;

	// Token: 0x0400015C RID: 348
	public static int[] idNotBlend = new int[]
	{
		79,
		80,
		81,
		82,
		83,
		84,
		85,
		86,
		87,
		88,
		89,
		90,
		91,
		92,
		95,
		144,
		99,
		100,
		101,
		102,
		103,
		104,
		105,
		106,
		107,
		108,
		109,
		110,
		111,
		112,
		113,
		114,
		115,
		117,
		118,
		119,
		120,
		121,
		122,
		123,
		124,
		125,
		126,
		127,
		132,
		133,
		134,
		139,
		140,
		141,
		142,
		143,
		144,
		145,
		146,
		147,
		171,
		121,
		122,
		229,
		218
	};

	// Token: 0x0400015D RID: 349
	public static int[] isMiniBgz = new int[]
	{
		79,
		80,
		81,
		85,
		86,
		90,
		91,
		92,
		99,
		100,
		101,
		102,
		103,
		104,
		105,
		106,
		107,
		108
	};

	// Token: 0x0400015E RID: 350
	public static sbyte[] newSmallVersion;
}
using System;

// Token: 0x02000028 RID: 40
public class BgItemMn
{
	// Token: 0x060001AF RID: 431 RVA: 0x00012598 File Offset: 0x00010798
	public static Image blendImage(Image img, int layer, int idImage)
	{
		int num = TileMap.tileID - 1;
		Image image = img;
		bool flag = num == 0 && layer == 1;
		if (flag)
		{
			image = mGraphics.blend(img, 0.3f, 807956);
		}
		bool flag2 = num == 1 && layer == 1;
		if (flag2)
		{
			image = mGraphics.blend(img, 0.35f, 739339);
		}
		bool flag3 = num == 2 && layer == 1;
		if (flag3)
		{
			image = mGraphics.blend(img, 0.1f, 3977975);
		}
		bool flag4 = num == 3;
		if (flag4)
		{
			bool flag5 = layer == 1;
			if (flag5)
			{
				image = mGraphics.blend(img, 0.2f, 15265992);
			}
			bool flag6 = layer == 3;
			if (flag6)
			{
				image = mGraphics.blend(img, 0.1f, 15265992);
			}
		}
		bool flag7 = num == 4;
		if (flag7)
		{
			bool flag8 = layer == 1;
			if (flag8)
			{
				image = mGraphics.blend(img, 0.3f, 1330178);
			}
			bool flag9 = layer == 3;
			if (flag9)
			{
				image = mGraphics.blend(img, 0.1f, 1330178);
			}
		}
		bool flag10 = num == 6;
		if (flag10)
		{
			bool flag11 = layer == 1;
			if (flag11)
			{
				image = mGraphics.blend(img, 0.3f, 420382);
			}
			bool flag12 = layer == 3;
			if (flag12)
			{
				image = mGraphics.blend(img, 0.15f, 420382);
			}
		}
		bool flag13 = num == 5;
		if (flag13)
		{
			bool flag14 = layer == 1;
			if (flag14)
			{
				image = mGraphics.blend(img, 0.35f, 3270903);
			}
			bool flag15 = layer == 3;
			if (flag15)
			{
				image = mGraphics.blend(img, 0.15f, 3270903);
			}
		}
		bool flag16 = num == 8;
		if (flag16)
		{
			bool flag17 = layer == 1;
			if (flag17)
			{
				image = mGraphics.blend(img, 0.3f, 7094528);
			}
			bool flag18 = layer == 3;
			if (flag18)
			{
				image = mGraphics.blend(img, 0.15f, 7094528);
			}
		}
		bool flag19 = num == 9;
		if (flag19)
		{
			bool flag20 = layer == 1;
			if (flag20)
			{
				image = mGraphics.blend(img, 0.3f, 12113627);
			}
			bool flag21 = layer == 3;
			if (flag21)
			{
				image = mGraphics.blend(img, 0.15f, 12113627);
			}
		}
		bool flag22 = num == 10 && layer == 1;
		if (flag22)
		{
			image = mGraphics.blend(img, 0.3f, 14938312);
		}
		bool flag23 = num == 10 && layer == 1;
		if (flag23)
		{
			image = mGraphics.blend(img, 0.2f, 14938312);
		}
		bool flag24 = num == 11;
		if (flag24)
		{
			bool flag25 = layer == 1;
			if (flag25)
			{
				image = mGraphics.blend(img, 0.3f, 0);
			}
			bool flag26 = layer == 3;
			if (flag26)
			{
				image = mGraphics.blend(img, 0.15f, 0);
			}
		}
		bool flag27 = num > 11;
		if (flag27)
		{
			bool flag28 = layer == 1 || layer == 2;
			if (flag28)
			{
				image = mGraphics.blend(img, 0.3f, 0);
			}
			bool flag29 = layer == 3;
			if (flag29)
			{
				image = mGraphics.blend(img, 0.15f, 0);
			}
		}
		byte[] byteArray = BgItemMn.getByteArray(image);
		Rms.saveRMS(string.Concat(new string[]
		{
			"x",
			mGraphics.zoomLevel.ToString(),
			"blend",
			idImage.ToString(),
			"layer",
			layer.ToString()
		}), ArrayCast.cast(byteArray));
		return image;
	}

	// Token: 0x060001B0 RID: 432 RVA: 0x000128EC File Offset: 0x00010AEC
	public static byte[] getByteArray(Image img)
	{
		byte[] result;
		try
		{
			result = img.texture.EncodeToPNG();
		}
		catch (Exception)
		{
			result = null;
		}
		return result;
	}

	// Token: 0x060001B1 RID: 433 RVA: 0x00012920 File Offset: 0x00010B20
	public static void blendcurrBg(short id, Image img)
	{
		int i = 0;
		while (i < TileMap.vCurrItem.size())
		{
			BgItem bgItem = (BgItem)TileMap.vCurrItem.elementAt(i);
			bool flag = bgItem.idImage == id && !bgItem.isNotBlend() && bgItem.layer != 2 && bgItem.layer != 4 && !BgItem.imgNew.containsKey(bgItem.idImage.ToString() + "blend" + bgItem.layer.ToString());
			if (flag)
			{
				sbyte[] array = Rms.loadRMS(string.Concat(new string[]
				{
					"x",
					mGraphics.zoomLevel.ToString(),
					"blend",
					id.ToString(),
					"layer",
					bgItem.layer.ToString()
				}));
				bool flag2 = array == null;
				if (flag2)
				{
					BgItem.imgNew.put(bgItem.idImage.ToString() + "blend" + bgItem.layer.ToString(), BgItemMn.blendImage(img, (int)bgItem.layer, (int)bgItem.idImage));
				}
				else
				{
					Image v = Image.createImage(array, 0, array.Length);
					BgItem.imgNew.put(bgItem.idImage.ToString() + "blend" + bgItem.layer.ToString(), v);
				}
			}
			IL_148:
			i++;
			continue;
			goto IL_148;
		}
	}
}
using System;

// Token: 0x02000029 RID: 41
public class BigBoss2 : Mob, IMapObject
{
	// Token: 0x060001B3 RID: 435 RVA: 0x00012A98 File Offset: 0x00010C98
	public BigBoss2(int id, short px, short py, int templateID, long hp, long maxHp, int s)
	{
		bool flag = BigBoss2.shadowBig == null;
		if (flag)
		{
			BigBoss2.shadowBig = GameCanvas.loadImage("/mainImage/shadowBig.png");
		}
		this.mobId = id;
		this.xTo = (this.x = (int)(px + 20));
		this.y = (int)py;
		this.yTo = (int)py;
		this.yFirst = (int)py;
		this.hp = hp;
		this.maxHp = maxHp;
		this.templateId = templateID;
		this.w_hp_bar = 100;
		this.h_hp_bar = 6;
		this.len = this.w_hp_bar;
		base.updateHp_bar();
		this.getDataB();
		this.status = 2;
	}

	// Token: 0x060001B4 RID: 436 RVA: 0x00012C24 File Offset: 0x00010E24
	public void getDataB()
	{
		BigBoss2.data = null;
		BigBoss2.data = new EffectData();
		string patch = string.Concat(new string[]
		{
			"/x",
			mGraphics.zoomLevel.ToString(),
			"/effectdata/",
			109.ToString(),
			"/data"
		});
		try
		{
			BigBoss2.data.readData2(patch);
			BigBoss2.data.img = GameCanvas.loadImage("/effectdata/" + 109.ToString() + "/img.png");
		}
		catch (Exception)
		{
			Service.gI().requestModTemplate(this.templateId);
		}
		this.w = BigBoss2.data.width;
		this.h = BigBoss2.data.height;
	}

	// Token: 0x060001B5 RID: 437 RVA: 0x00012D00 File Offset: 0x00010F00
	public override void setBody(short id)
	{
		this.changBody = true;
		this.smallBody = id;
	}

	// Token: 0x060001B6 RID: 438 RVA: 0x00012D11 File Offset: 0x00010F11
	public override void clearBody()
	{
		this.changBody = false;
	}

	// Token: 0x060001B7 RID: 439 RVA: 0x00012D1C File Offset: 0x00010F1C
	public new static bool isExistNewMob(string id)
	{
		for (int i = 0; i < Mob.newMob.size(); i++)
		{
			string text = (string)Mob.newMob.elementAt(i);
			bool flag = text.Equals(id);
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060001B8 RID: 440 RVA: 0x00012D70 File Offset: 0x00010F70
	public new void checkFrameTick(int[] array)
	{
		this.tick++;
		bool flag = this.tick > array.Length - 1;
		if (flag)
		{
			this.tick = 0;
		}
		this.frame = array[this.tick];
	}

	// Token: 0x060001B9 RID: 441 RVA: 0x00012DB4 File Offset: 0x00010FB4
	private void updateShadown()
	{
		int size = (int)TileMap.size;
		this.xSd = this.x;
		this.wCount = 0;
		bool flag = this.ySd <= 0 || TileMap.tileTypeAt(this.xSd, this.ySd, 2);
		if (!flag)
		{
			bool flag2 = TileMap.tileTypeAt(this.xSd / size, this.ySd / size) == 0;
			if (flag2)
			{
				this.isOutMap = true;
			}
			else
			{
				bool flag3 = TileMap.tileTypeAt(this.xSd / size, this.ySd / size) != 0 && !TileMap.tileTypeAt(this.xSd, this.ySd, 2);
				if (flag3)
				{
					this.xSd = this.x;
					this.ySd = this.y;
					this.isOutMap = false;
				}
			}
			while (this.isOutMap && this.wCount < 10)
			{
				this.wCount++;
				this.ySd += 24;
				bool flag4 = TileMap.tileTypeAt(this.xSd, this.ySd, 2);
				if (flag4)
				{
					bool flag5 = this.ySd % 24 != 0;
					if (flag5)
					{
						this.ySd -= this.ySd % 24;
					}
					break;
				}
			}
		}
	}

	// Token: 0x060001BA RID: 442 RVA: 0x00012F00 File Offset: 0x00011100
	private void paintShadow(mGraphics g)
	{
		int size = (int)TileMap.size;
		g.drawImage(BigBoss2.shadowBig, this.xSd, this.yFirst, 3);
		g.setClip(GameScr.cmx, GameScr.cmy - GameCanvas.transY, GameScr.gW, GameScr.gH + 2 * GameCanvas.transY);
	}

	// Token: 0x060001BB RID: 443 RVA: 0x00012F56 File Offset: 0x00011156
	public new void updateSuperEff()
	{
	}

	// Token: 0x060001BC RID: 444 RVA: 0x00012F5C File Offset: 0x0001115C
	public override void update()
	{
		bool flag = !this.isUpdate();
		if (!flag)
		{
			this.updateShadown();
			switch (this.status)
			{
			case 0:
			case 1:
				this.updateDead();
				break;
			case 2:
				this.updateMobStandWait();
				break;
			case 3:
				this.updateMobAttack();
				break;
			case 4:
				this.timeStatus = 0;
				this.updateMobFly();
				break;
			case 5:
				this.timeStatus = 0;
				this.updateMobWalk();
				break;
			case 6:
			{
				this.timeStatus = 0;
				this.p1++;
				this.y += this.p1;
				bool flag2 = this.y >= this.yFirst;
				if (flag2)
				{
					this.y = this.yFirst;
					this.p1 = 0;
					this.status = 5;
				}
				break;
			}
			case 7:
				this.updateInjure();
				break;
			}
		}
	}

	// Token: 0x060001BD RID: 445 RVA: 0x00013060 File Offset: 0x00011260
	private void updateDead()
	{
		this.checkFrameTick(this.stand);
		bool flag = GameCanvas.gameTick % 5 == 0;
		if (flag)
		{
			ServerEffect.addServerEffect(167, Res.random(this.x - this.getW() / 2, this.x + this.getW() / 2), Res.random(this.getY() + this.getH() / 2, this.getY() + this.getH()), 1);
		}
		bool flag2 = this.x != this.xTo || this.y != this.yTo;
		if (flag2)
		{
			this.x += (this.xTo - this.x) / 4;
			this.y += (this.yTo - this.y) / 4;
		}
	}

	// Token: 0x060001BE RID: 446 RVA: 0x0001313C File Offset: 0x0001133C
	private void updateMobFly()
	{
		bool flag = this.flyUp;
		if (flag)
		{
			this.dy++;
			this.y -= this.dy;
			this.checkFrameTick(this.fly);
			bool flag2 = this.y <= -500;
			if (flag2)
			{
				this.flyUp = false;
				this.flyDown = true;
				this.dy = 0;
			}
		}
		bool flag3 = this.flyDown;
		if (flag3)
		{
			this.x = this.xTo;
			this.dy += 2;
			this.y += this.dy;
			this.checkFrameTick(this.hitground);
			bool flag4 = this.y > this.yFirst;
			if (flag4)
			{
				this.y = this.yFirst;
				this.flyDown = false;
				this.dy = 0;
				this.status = 2;
				GameScr.shock_scr = 10;
				this.shock = true;
			}
		}
	}

	// Token: 0x060001BF RID: 447 RVA: 0x00013238 File Offset: 0x00011438
	public new void setInjure()
	{
	}

	// Token: 0x060001C0 RID: 448 RVA: 0x0001323C File Offset: 0x0001143C
	public new void setAttack(global::Char cFocus)
	{
		this.isBusyAttackSomeOne = true;
		this.mobToAttack = null;
		this.cFocus = cFocus;
		this.p1 = 0;
		this.p2 = 0;
		this.status = 3;
		this.tick = 0;
		this.dir = ((cFocus.cx > this.x) ? 1 : -1);
		int cx = cFocus.cx;
		int cy = cFocus.cy;
		bool flag = Res.abs(cx - this.x) < this.w * 2 && Res.abs(cy - this.y) < this.h * 2;
		if (flag)
		{
			bool flag2 = this.x < cx;
			if (flag2)
			{
				this.x = cx - this.w;
			}
			else
			{
				this.x = cx + this.w;
			}
			this.p3 = 0;
		}
		else
		{
			this.p3 = 1;
		}
	}

	// Token: 0x060001C1 RID: 449 RVA: 0x0001331C File Offset: 0x0001151C
	private bool isSpecial()
	{
		return (this.templateId >= 58 && this.templateId <= 65) || this.templateId == 67 || this.templateId == 68;
	}

	// Token: 0x060001C2 RID: 450 RVA: 0x00013363 File Offset: 0x00011563
	private void updateInjure()
	{
	}

	// Token: 0x060001C3 RID: 451 RVA: 0x00013368 File Offset: 0x00011568
	private void updateMobStandWait()
	{
		this.checkFrameTick(this.stand);
		bool flag = this.x != this.xTo || this.y != this.yTo;
		if (flag)
		{
			this.x += (this.xTo - this.x) / 4;
			this.y += (this.yTo - this.y) / 4;
		}
	}

	// Token: 0x060001C4 RID: 452 RVA: 0x000133E3 File Offset: 0x000115E3
	public void setFly()
	{
		this.status = 4;
		this.flyUp = true;
	}

	// Token: 0x060001C5 RID: 453 RVA: 0x000133F4 File Offset: 0x000115F4
	public void setAttack(global::Char[] cAttack, long[] dame, sbyte type)
	{
		this.status = 3;
		this.charAttack = cAttack;
		this.dameHP = dame;
		this.type = type;
		this.tick = 0;
	}

	// Token: 0x060001C6 RID: 454 RVA: 0x0001341C File Offset: 0x0001161C
	public new void updateMobAttack()
	{
		bool flag = this.type == 0;
		if (flag)
		{
			bool flag2 = this.tick == this.attack1.Length - 1;
			if (flag2)
			{
				this.status = 2;
			}
			this.dir = ((this.x < this.charAttack[0].cx) ? 1 : -1);
			this.checkFrameTick(this.attack1);
			this.x += (this.charAttack[0].cx - this.x) / 4;
			this.y += (this.charAttack[0].cy - this.y) / 4;
			this.xTo = this.x;
			bool flag3 = this.tick == 8;
			if (flag3)
			{
				for (int i = 0; i < this.charAttack.Length; i++)
				{
					this.charAttack[i].doInjure(this.dameHP[i], 0L, false, false);
					ServerEffect.addServerEffect(102, this.charAttack[i].cx, this.charAttack[i].cy, 1);
				}
			}
		}
		bool flag4 = this.type == 1;
		if (flag4)
		{
			bool flag5 = this.tick == this.attack2.Length - 1;
			if (flag5)
			{
				this.status = 2;
			}
			this.dir = ((this.x < this.charAttack[0].cx) ? 1 : -1);
			this.checkFrameTick(this.attack2);
			bool flag6 = this.tick == 8;
			if (flag6)
			{
				for (int j = 0; j < this.charAttack.Length; j++)
				{
					MonsterDart.addMonsterDart(this.x + ((this.dir != 1) ? -45 : 45), this.y - 25, true, this.dameHP[j], 0L, this.charAttack[j], 24);
				}
			}
		}
		bool flag7 = this.type != 2;
		if (!flag7)
		{
			bool flag8 = this.tick == this.fly.Length - 1;
			if (flag8)
			{
				this.status = 2;
			}
			this.dir = ((this.x < this.charAttack[0].cx) ? 1 : -1);
			this.checkFrameTick(this.fly);
			this.x += (this.charAttack[0].cx - this.x) / 4;
			this.xTo = this.x;
			this.yTo = this.y;
			bool flag9 = this.tick == 12;
			if (flag9)
			{
				for (int k = 0; k < this.charAttack.Length; k++)
				{
					this.charAttack[k].doInjure(this.dameHP[k], 0L, false, false);
					ServerEffect.addServerEffect(102, this.charAttack[k].cx, this.charAttack[k].cy, 1);
				}
			}
		}
	}

	// Token: 0x060001C7 RID: 455 RVA: 0x0001371F File Offset: 0x0001191F
	public new void updateMobWalk()
	{
	}

	// Token: 0x060001C8 RID: 456 RVA: 0x00013724 File Offset: 0x00011924
	public new bool isPaint()
	{
		bool flag = this.x < GameScr.cmx;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = this.x > GameScr.cmx + GameScr.gW;
			if (flag2)
			{
				result = false;
			}
			else
			{
				bool flag3 = this.y < GameScr.cmy;
				if (flag3)
				{
					result = false;
				}
				else
				{
					bool flag4 = this.y > GameScr.cmy + GameScr.gH + 30;
					if (flag4)
					{
						result = false;
					}
					else
					{
						bool flag5 = this.status == 0;
						result = !flag5;
					}
				}
			}
		}
		return result;
	}

	// Token: 0x060001C9 RID: 457 RVA: 0x000137B4 File Offset: 0x000119B4
	public new bool isUpdate()
	{
		bool flag = this.status == 0;
		return !flag;
	}

	// Token: 0x060001CA RID: 458 RVA: 0x000137DC File Offset: 0x000119DC
	public new bool checkIsBoss()
	{
		return this.isBoss || this.levelBoss > 0;
	}

	// Token: 0x060001CB RID: 459 RVA: 0x0001380C File Offset: 0x00011A0C
	public override void paint(mGraphics g)
	{
		bool flag = BigBoss2.data == null || this.isHide;
		if (!flag)
		{
			bool isMafuba = this.isMafuba;
			if (isMafuba)
			{
				bool flag2 = !this.changBody;
				if (flag2)
				{
					BigBoss2.data.paintFrame(g, this.frame, this.xMFB, this.yMFB, (this.dir != 1) ? 1 : 0, 2);
				}
				else
				{
					SmallImage.drawSmallImage(g, (int)this.smallBody, this.xMFB, this.yMFB, (this.dir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
			}
			else
			{
				bool flag3 = this.isShadown && this.status != 0;
				if (flag3)
				{
					this.paintShadow(g);
				}
				g.translate(0, GameCanvas.transY);
				bool flag4 = !this.changBody;
				if (flag4)
				{
					BigBoss2.data.paintFrame(g, this.frame, this.x, this.y + this.fy, (this.dir != 1) ? 1 : 0, 2);
				}
				else
				{
					SmallImage.drawSmallImage(g, (int)this.smallBody, this.x, this.y + this.fy - 9, (this.dir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
				g.translate(0, -GameCanvas.transY);
				int imageWidth = mGraphics.getImageWidth(this.imgHPtem);
				int imageHeight = mGraphics.getImageHeight(this.imgHPtem);
				int num = imageWidth;
				int num2 = this.x - imageWidth;
				int y = this.y - this.h - 5;
				int num3 = imageWidth * 2 * this.per / 100;
				bool flag5 = num3 > num;
				int num4;
				if (flag5)
				{
					num4 = num3 - num;
					bool flag6 = num4 <= 0;
					if (flag6)
					{
						num4 = 0;
					}
				}
				else
				{
					num = num3;
					num4 = 0;
				}
				g.drawImage(GameScr.imgHP_tm_xam, num2, y, mGraphics.TOP | mGraphics.LEFT);
				g.drawImage(GameScr.imgHP_tm_xam, num2 + imageWidth, y, mGraphics.TOP | mGraphics.LEFT);
				g.drawRegion(this.imgHPtem, 0, 0, num, imageHeight, 0, num2, y, mGraphics.TOP | mGraphics.LEFT);
				g.drawRegion(this.imgHPtem, 0, 0, num4, imageHeight, 0, num2 + imageWidth, y, mGraphics.TOP | mGraphics.LEFT);
				bool flag7 = this.shock;
				if (flag7)
				{
					this.tShock++;
					Effect me = new Effect((this.type != 2) ? 22 : 19, this.x + this.tShock * 50, this.y + 25, 2, 1, -1);
					EffecMn.addEff(me);
					Effect me2 = new Effect((this.type != 2) ? 22 : 19, this.x - this.tShock * 50, this.y + 25, 2, 1, -1);
					EffecMn.addEff(me2);
					bool flag8 = this.tShock == 50;
					if (flag8)
					{
						this.tShock = 0;
						this.shock = false;
					}
				}
			}
		}
	}

	// Token: 0x060001CC RID: 460 RVA: 0x00013B20 File Offset: 0x00011D20
	public new int getHPColor()
	{
		return 16711680;
	}

	// Token: 0x060001CD RID: 461 RVA: 0x00013B37 File Offset: 0x00011D37
	public new void startDie()
	{
		this.hp = 0L;
		this.injureThenDie = true;
		this.hp = 0L;
		this.status = 1;
		this.p1 = -3;
		this.p2 = -this.dir;
		this.p3 = 0;
	}

	// Token: 0x060001CE RID: 462 RVA: 0x00013B74 File Offset: 0x00011D74
	public new void attackOtherMob(Mob mobToAttack)
	{
		this.mobToAttack = mobToAttack;
		this.isBusyAttackSomeOne = true;
		this.cFocus = null;
		this.p1 = 0;
		this.p2 = 0;
		this.status = 3;
		this.tick = 0;
		this.dir = ((mobToAttack.x > this.x) ? 1 : -1);
		int x = mobToAttack.x;
		int y = mobToAttack.y;
		bool flag = Res.abs(x - this.x) < this.w * 2 && Res.abs(y - this.y) < this.h * 2;
		if (flag)
		{
			bool flag2 = this.x < x;
			if (flag2)
			{
				this.x = x - this.w;
			}
			else
			{
				this.x = x + this.w;
			}
			this.p3 = 0;
		}
		else
		{
			this.p3 = 1;
		}
	}

	// Token: 0x060001CF RID: 463 RVA: 0x00013C54 File Offset: 0x00011E54
	public new int getX()
	{
		return this.x;
	}

	// Token: 0x060001D0 RID: 464 RVA: 0x00013C6C File Offset: 0x00011E6C
	public new int getY()
	{
		return this.y - 50;
	}

	// Token: 0x060001D1 RID: 465 RVA: 0x00013C88 File Offset: 0x00011E88
	public new int getH()
	{
		return 40;
	}

	// Token: 0x060001D2 RID: 466 RVA: 0x00013C9C File Offset: 0x00011E9C
	public new int getW()
	{
		return 50;
	}

	// Token: 0x060001D3 RID: 467 RVA: 0x00013CB0 File Offset: 0x00011EB0
	public new void stopMoving()
	{
		bool flag = this.status == 5;
		if (flag)
		{
			this.status = 2;
			this.p1 = (this.p2 = (this.p3 = 0));
			this.forceWait = 50;
		}
	}

	// Token: 0x060001D4 RID: 468 RVA: 0x00013CF8 File Offset: 0x00011EF8
	public new bool isInvisible()
	{
		return this.status == 0 || this.status == 1;
	}

	// Token: 0x060001D5 RID: 469 RVA: 0x00013D20 File Offset: 0x00011F20
	public new void removeHoldEff()
	{
		bool flag = this.holdEffID != 0;
		if (flag)
		{
			this.holdEffID = 0;
		}
	}

	// Token: 0x060001D6 RID: 470 RVA: 0x00013D44 File Offset: 0x00011F44
	public new void removeBlindEff()
	{
		this.blindEff = false;
	}

	// Token: 0x060001D7 RID: 471 RVA: 0x00013D4E File Offset: 0x00011F4E
	public new void removeSleepEff()
	{
		this.sleepEff = false;
	}

	// Token: 0x0400015F RID: 351
	public static Image shadowBig;

	// Token: 0x04000160 RID: 352
	public static EffectData data;

	// Token: 0x04000161 RID: 353
	public int xTo;

	// Token: 0x04000162 RID: 354
	public int yTo;

	// Token: 0x04000163 RID: 355
	public bool haftBody;

	// Token: 0x04000164 RID: 356
	public bool change;

	// Token: 0x04000165 RID: 357
	private Mob mob1;

	// Token: 0x04000166 RID: 358
	public new int xSd;

	// Token: 0x04000167 RID: 359
	public new int ySd;

	// Token: 0x04000168 RID: 360
	private bool isOutMap;

	// Token: 0x04000169 RID: 361
	private int wCount;

	// Token: 0x0400016A RID: 362
	public new bool isShadown = true;

	// Token: 0x0400016B RID: 363
	private int tick;

	// Token: 0x0400016C RID: 364
	private int frame;

	// Token: 0x0400016D RID: 365
	public new static Image imgHP = GameCanvas.loadImage("/mainImage/myTexture2dmobHP.png");

	// Token: 0x0400016E RID: 366
	private bool wy;

	// Token: 0x0400016F RID: 367
	private int wt;

	// Token: 0x04000170 RID: 368
	private int fy;

	// Token: 0x04000171 RID: 369
	private int ty;

	// Token: 0x04000172 RID: 370
	public new int typeSuperEff;

	// Token: 0x04000173 RID: 371
	private global::Char focus;

	// Token: 0x04000174 RID: 372
	private int timeDead;

	// Token: 0x04000175 RID: 373
	private bool flyUp;

	// Token: 0x04000176 RID: 374
	private bool flyDown;

	// Token: 0x04000177 RID: 375
	private int dy;

	// Token: 0x04000178 RID: 376
	public bool changePos;

	// Token: 0x04000179 RID: 377
	private int tShock;

	// Token: 0x0400017A RID: 378
	public new bool isBusyAttackSomeOne = true;

	// Token: 0x0400017B RID: 379
	private int tA;

	// Token: 0x0400017C RID: 380
	private global::Char[] charAttack;

	// Token: 0x0400017D RID: 381
	private long[] dameHP;

	// Token: 0x0400017E RID: 382
	private sbyte type;

	// Token: 0x0400017F RID: 383
	public new int[] stand = new int[]
	{
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1
	};

	// Token: 0x04000180 RID: 384
	public new int[] move = new int[]
	{
		1,
		1,
		1,
		1,
		2,
		2,
		2,
		2,
		3,
		3,
		3,
		3,
		2,
		2,
		2
	};

	// Token: 0x04000181 RID: 385
	public new int[] moveFast = new int[]
	{
		1,
		1,
		2,
		2,
		3,
		3,
		2
	};

	// Token: 0x04000182 RID: 386
	public new int[] attack1 = new int[]
	{
		0,
		0,
		0,
		7,
		7,
		7,
		8,
		8,
		8,
		9,
		9,
		9
	};

	// Token: 0x04000183 RID: 387
	public new int[] attack2 = new int[]
	{
		0,
		0,
		0,
		10,
		10,
		10,
		11,
		11,
		11,
		12,
		12,
		12
	};

	// Token: 0x04000184 RID: 388
	public int[] attack3 = new int[]
	{
		0,
		0,
		1,
		1,
		4,
		4,
		6,
		6,
		8,
		8,
		25,
		25,
		26,
		26,
		28,
		28,
		30,
		30,
		32,
		32,
		2,
		2,
		1,
		1
	};

	// Token: 0x04000185 RID: 389
	public int[] fly = new int[]
	{
		4,
		4,
		4,
		5,
		5,
		5,
		6,
		6,
		6,
		6,
		6,
		6,
		3,
		3,
		3,
		2,
		2,
		2,
		1,
		1,
		1
	};

	// Token: 0x04000186 RID: 390
	public int[] hitground = new int[]
	{
		6,
		6,
		6,
		3,
		3,
		3,
		2,
		2,
		2,
		1,
		1,
		1
	};

	// Token: 0x04000187 RID: 391
	private bool shock;

	// Token: 0x04000188 RID: 392
	private sbyte[] cou = new sbyte[]
	{
		-1,
		1
	};

	// Token: 0x04000189 RID: 393
	public new global::Char injureBy;

	// Token: 0x0400018A RID: 394
	public new bool injureThenDie;

	// Token: 0x0400018B RID: 395
	public new Mob mobToAttack;

	// Token: 0x0400018C RID: 396
	public new int forceWait;

	// Token: 0x0400018D RID: 397
	public new bool blindEff;

	// Token: 0x0400018E RID: 398
	public new bool sleepEff;
}
using System;
using System.IO;

// Token: 0x0200000D RID: 13
internal class BuffChar
{
	// Token: 0x06000042 RID: 66 RVA: 0x000040BB File Offset: 0x000022BB
	private static void Wait(int time)
	{
		BuffChar.IsWait = true;
		BuffChar.TimeStartWait = mSystem.currentTimeMillis();
		BuffChar.TimeWait = (long)time;
	}

	// Token: 0x06000043 RID: 67 RVA: 0x000040D8 File Offset: 0x000022D8
	private static bool IsWaiting()
	{
		bool flag = BuffChar.IsWait && mSystem.currentTimeMillis() - BuffChar.TimeStartWait >= BuffChar.TimeWait;
		if (flag)
		{
			BuffChar.IsWait = false;
		}
		return BuffChar.IsWait;
	}

	// Token: 0x06000044 RID: 68 RVA: 0x0000411C File Offset: 0x0000231C
	public static void LoadFile()
	{
		bool flag = File.Exists(BuffChar.namebuff) && BuffChar.Name == "tienthanh";
		if (flag)
		{
			BuffChar.Name = File.ReadAllText(BuffChar.namebuff);
		}
		bool flag2 = File.Exists(BuffChar.hpbuff) && BuffChar.HP == 0;
		if (flag2)
		{
			BuffChar.HP = int.Parse(File.ReadAllText(BuffChar.hpbuff));
		}
	}

	// Token: 0x06000045 RID: 69 RVA: 0x00004190 File Offset: 0x00002390
	public static void Update()
	{
		bool flag = BuffChar.IsWaiting();
		if (!flag)
		{
			bool flag2 = GameCanvas.gameTick % 100 == 0;
			if (flag2)
			{
				BuffChar.LoadFile();
			}
		}
	}

	// Token: 0x04000044 RID: 68
	private static bool IsWait;

	// Token: 0x04000045 RID: 69
	private static long TimeStartWait;

	// Token: 0x04000046 RID: 70
	private static long TimeWait;

	// Token: 0x04000047 RID: 71
	public static int HP = 0;

	// Token: 0x04000048 RID: 72
	public static string Name = "tienthanh";

	// Token: 0x04000049 RID: 73
	public static string namebuff = "Nro_244_Data//Resources//namebuff";

	// Token: 0x0400004A RID: 74
	public static string hpbuff = "Nro_244_Data//Resources//hpbuff";
}
using System;
using Assets.src.e;
using Assets.src.g;
using UnityEngine;

// Token: 0x0200002A RID: 42
public class Char : IMapObject
{
	// Token: 0x060001D9 RID: 473 RVA: 0x00013D6C File Offset: 0x00011F6C
	public Char()
	{
		this.statusMe = 6;
	}

	// Token: 0x060001DA RID: 474 RVA: 0x00013FD0 File Offset: 0x000121D0
	public void applyCharLevelPercent()
	{
		try
		{
			long num = 1L;
			long num2 = 0L;
			int num3 = 0;
			for (int i = GameScr.exps.Length - 1; i >= 0; i--)
			{
				bool flag = this.cPower >= GameScr.exps[i];
				if (flag)
				{
					num = ((i != GameScr.exps.Length - 1) ? (GameScr.exps[i + 1] - GameScr.exps[i]) : 1L);
					num2 = this.cPower - GameScr.exps[i];
					num3 = i;
					break;
				}
			}
			this.clevel = num3;
			this.cLevelPercent = (long)((int)(num2 * 10000L / num));
		}
		catch (Exception ex)
		{
			Cout.LogError("Loi char level percent: " + ex.ToString());
		}
	}

	// Token: 0x060001DB RID: 475 RVA: 0x000140A0 File Offset: 0x000122A0
	public int getdxSkill()
	{
		bool flag = this.myskill != null;
		int result;
		if (flag)
		{
			result = this.myskill.dx;
		}
		else
		{
			result = 0;
		}
		return result;
	}

	// Token: 0x060001DC RID: 476 RVA: 0x000140D0 File Offset: 0x000122D0
	public int getdySkill()
	{
		bool flag = this.myskill != null;
		int result;
		if (flag)
		{
			result = this.myskill.dy;
		}
		else
		{
			result = 0;
		}
		return result;
	}

	// Token: 0x060001DD RID: 477 RVA: 0x00014100 File Offset: 0x00012300
	public static void taskAction(bool isNextStep)
	{
		Task task = global::Char.myCharz().taskMaint;
		bool flag = task.index > task.contentInfo.Length - 1;
		if (flag)
		{
			task.index = task.contentInfo.Length - 1;
		}
		string text = task.contentInfo[task.index];
		bool flag2 = text != null && !text.Equals(string.Empty);
		if (flag2)
		{
			bool flag3 = text.StartsWith("#");
			if (flag3)
			{
				text = NinjaUtil.replace(text, "#", string.Empty);
				Npc npc = new Npc(5, 0, -100, -100, 5, GameScr.info1.charId[global::Char.myCharz().cgender][2]);
				npc.cx = (npc.cy = -100);
				npc.avatar = GameScr.info1.charId[global::Char.myCharz().cgender][2];
				npc.charID = 5;
				bool flag4 = GameCanvas.currentScreen == GameScr.instance;
				if (flag4)
				{
					ChatPopup.addNextPopUpMultiLine(text, npc);
				}
			}
			else if (isNextStep)
			{
				GameScr.info1.addInfo(text, 0);
			}
		}
		GameScr.isHaveSelectSkill = true;
		Cout.println("TASKx " + global::Char.myCharz().taskMaint.taskId.ToString());
		bool flag5 = global::Char.myCharz().taskMaint.taskId <= 2;
		if (flag5)
		{
			global::Char.myCharz().canFly = false;
		}
		else
		{
			global::Char.myCharz().canFly = true;
		}
		GameScr.gI().left = null;
		bool flag6 = task.taskId == 0;
		if (flag6)
		{
			Hint.isViewMap = false;
			Hint.isViewPotential = false;
			GameScr.gI().right = null;
			GameScr.isHaveSelectSkill = false;
			GameScr.gI().left = null;
			bool flag7 = task.index < 4;
			if (flag7)
			{
				MagicTree.isPaint = false;
				GameScr.isPaintRada = -1;
			}
			bool flag8 = task.index == 4;
			if (flag8)
			{
				GameScr.isPaintRada = 1;
				MagicTree.isPaint = true;
			}
			bool flag9 = task.index >= 5;
			if (flag9)
			{
				GameScr.gI().right = GameScr.gI().cmdFocus;
			}
		}
		bool flag10 = task.taskId == 1;
		if (flag10)
		{
			GameScr.isHaveSelectSkill = true;
		}
		bool flag11 = task.taskId >= 1;
		if (flag11)
		{
			GameScr.gI().right = GameScr.gI().cmdFocus;
			GameScr.gI().left = GameScr.gI().cmdMenu;
		}
		bool flag12 = task.taskId >= 0;
		if (flag12)
		{
			Panel.isPaintMap = true;
		}
		else
		{
			Panel.isPaintMap = false;
		}
		bool flag13 = task.taskId < 12;
		if (flag13)
		{
			GameCanvas.panel.mainTabName = mResources.mainTab1;
		}
		else
		{
			GameCanvas.panel.mainTabName = mResources.mainTab2;
		}
		GameCanvas.panel.tabName[0] = GameCanvas.panel.mainTabName;
		bool flag14 = global::Char.myChar.taskMaint.taskId > 10;
		if (flag14)
		{
			Rms.saveRMSString("fake", "aa");
		}
	}

	// Token: 0x060001DE RID: 478 RVA: 0x00014420 File Offset: 0x00012620
	public string getStrLevel()
	{
		string text = string.Concat(new string[]
		{
			this.strLevel[this.clevel],
			"+",
			(this.cLevelPercent / 100L).ToString(),
			".",
			(this.cLevelPercent % 100L).ToString(),
			"%"
		});
		bool flag = text.Length > 23 && text.IndexOf("cấp ") >= 0;
		if (flag)
		{
			text = Res.replace(text, "cấp ", "c");
		}
		return text;
	}

	// Token: 0x060001DF RID: 479 RVA: 0x000144C8 File Offset: 0x000126C8
	public int avatarz()
	{
		return this.getAvatar(this.head);
	}

	// Token: 0x060001E0 RID: 480 RVA: 0x000144E8 File Offset: 0x000126E8
	public int getAvatar(int headId)
	{
		for (int i = 0; i < global::Char.idHead.Length; i++)
		{
			bool flag = headId == (int)global::Char.idHead[i];
			if (flag)
			{
				return (int)global::Char.idAvatar[i];
			}
		}
		return -1;
	}

	// Token: 0x060001E1 RID: 481 RVA: 0x0001452C File Offset: 0x0001272C
	public void setPowerInfo(string info, short p, short maxP, short sc)
	{
		this.powerPoint = p;
		this.strInfo = info;
		this.maxPowerPoint = maxP;
		this.secondPower = sc;
		this.lastS = (this.currS = mSystem.currentTimeMillis());
	}

	// Token: 0x060001E2 RID: 482 RVA: 0x0001456C File Offset: 0x0001276C
	public void addInfo(string info)
	{
		bool flag = info.ToLower().Contains("sao sư phụ không đánh");
		if (flag)
		{
			AutoPet.findMobforPet();
		}
		bool flag2 = this.chatInfo == null;
		if (flag2)
		{
			this.chatInfo = new Info();
		}
		global::Char cInfo = null;
		this.chatInfo.addInfo(info, 0, cInfo, false);
	}

	// Token: 0x060001E3 RID: 483 RVA: 0x000145C4 File Offset: 0x000127C4
	public int getSys()
	{
		bool flag = this.nClass.classId == 1 || this.nClass.classId == 2;
		int result;
		if (flag)
		{
			result = 1;
		}
		else
		{
			bool flag2 = this.nClass.classId == 3 || this.nClass.classId == 4;
			if (flag2)
			{
				result = 2;
			}
			else
			{
				bool flag3 = this.nClass.classId == 5 || this.nClass.classId == 6;
				if (flag3)
				{
					result = 3;
				}
				else
				{
					result = 0;
				}
			}
		}
		return result;
	}

	// Token: 0x060001E4 RID: 484 RVA: 0x00014650 File Offset: 0x00012850
	public static global::Char myCharz()
	{
		bool flag = global::Char.myChar == null;
		if (flag)
		{
			global::Char.myChar = new global::Char();
			global::Char.myChar.me = true;
			global::Char.myChar.cmtoChar = true;
		}
		return global::Char.myChar;
	}

	// Token: 0x060001E5 RID: 485 RVA: 0x00014698 File Offset: 0x00012898
	public static global::Char myPetz()
	{
		bool flag = global::Char.myPet == null;
		if (flag)
		{
			global::Char.myPet = new global::Char();
			global::Char.myPet.me = false;
		}
		return global::Char.myPet;
	}

	// Token: 0x060001E6 RID: 486 RVA: 0x000146D2 File Offset: 0x000128D2
	public static void clearMyChar()
	{
		global::Char.myChar = null;
	}

	// Token: 0x060001E7 RID: 487 RVA: 0x000146DC File Offset: 0x000128DC
	public void bagSort()
	{
		try
		{
			MyVector myVector = new MyVector();
			for (int i = 0; i < this.arrItemBag.Length; i++)
			{
				Item item = this.arrItemBag[i];
				bool flag = item != null && item.template.isUpToUp && !item.isExpires;
				if (flag)
				{
					myVector.addElement(item);
				}
			}
			for (int j = 0; j < myVector.size(); j++)
			{
				Item item2 = (Item)myVector.elementAt(j);
				bool flag2 = item2 == null;
				if (!flag2)
				{
					for (int k = j + 1; k < myVector.size(); k++)
					{
						Item item3 = (Item)myVector.elementAt(k);
						bool flag3 = item3 != null && item2.template.Equals(item3.template) && item2.isLock == item3.isLock;
						if (flag3)
						{
							item2.quantity += item3.quantity;
							this.arrItemBag[item3.indexUI] = null;
							myVector.setElementAt(null, k);
						}
					}
				}
			}
			for (int l = 0; l < this.arrItemBag.Length; l++)
			{
				bool flag4 = this.arrItemBag[l] == null;
				if (!flag4)
				{
					for (int m = 0; m <= l; m++)
					{
						bool flag5 = this.arrItemBag[m] == null;
						if (flag5)
						{
							this.arrItemBag[m] = this.arrItemBag[l];
							this.arrItemBag[m].indexUI = m;
							this.arrItemBag[l] = null;
							break;
						}
					}
				}
			}
		}
		catch (Exception)
		{
			Cout.println("Char.bagSort()");
		}
	}

	// Token: 0x060001E8 RID: 488 RVA: 0x000148DC File Offset: 0x00012ADC
	public void boxSort()
	{
		try
		{
			MyVector myVector = new MyVector();
			for (int i = 0; i < this.arrItemBox.Length; i++)
			{
				Item item = this.arrItemBox[i];
				bool flag = item != null && item.template.isUpToUp && !item.isExpires;
				if (flag)
				{
					myVector.addElement(item);
				}
			}
			for (int j = 0; j < myVector.size(); j++)
			{
				Item item2 = (Item)myVector.elementAt(j);
				bool flag2 = item2 == null;
				if (!flag2)
				{
					for (int k = j + 1; k < myVector.size(); k++)
					{
						Item item3 = (Item)myVector.elementAt(k);
						bool flag3 = item3 != null && item2.template.Equals(item3.template) && item2.isLock == item3.isLock;
						if (flag3)
						{
							item2.quantity += item3.quantity;
							this.arrItemBox[item3.indexUI] = null;
							myVector.setElementAt(null, k);
						}
					}
				}
			}
			for (int l = 0; l < this.arrItemBox.Length; l++)
			{
				bool flag4 = this.arrItemBox[l] == null;
				if (!flag4)
				{
					for (int m = 0; m <= l; m++)
					{
						bool flag5 = this.arrItemBox[m] == null;
						if (flag5)
						{
							this.arrItemBox[m] = this.arrItemBox[l];
							this.arrItemBox[m].indexUI = m;
							this.arrItemBox[l] = null;
							break;
						}
					}
				}
			}
		}
		catch (Exception)
		{
			Cout.println("Char.boxSort()");
		}
	}

	// Token: 0x060001E9 RID: 489 RVA: 0x00014ADC File Offset: 0x00012CDC
	public void useItem(int indexUI)
	{
		Item item = this.arrItemBag[indexUI];
		bool flag = !item.isTypeBody();
		if (!flag)
		{
			item.isLock = true;
			item.typeUI = 5;
			Item item2 = this.arrItemBody[(int)item.template.type];
			this.arrItemBag[indexUI] = null;
			bool flag2 = item2 != null;
			if (flag2)
			{
				item2.typeUI = 3;
				this.arrItemBody[(int)item.template.type] = null;
				item2.indexUI = indexUI;
				this.arrItemBag[indexUI] = item2;
			}
			item.indexUI = (int)item.template.type;
			this.arrItemBody[item.indexUI] = item;
			for (int i = 0; i < this.arrItemBody.Length; i++)
			{
				Item item3 = this.arrItemBody[i];
				bool flag3 = item3 != null;
				if (flag3)
				{
					bool flag4 = item3.template.type == 0;
					if (flag4)
					{
						this.body = (int)item3.template.part;
					}
					else
					{
						bool flag5 = item3.template.type == 1;
						if (flag5)
						{
							this.leg = (int)item3.template.part;
						}
					}
				}
			}
		}
	}

	// Token: 0x060001EA RID: 490 RVA: 0x00014C14 File Offset: 0x00012E14
	public Skill getSkill(SkillTemplate skillTemplate)
	{
		for (int i = 0; i < this.vSkill.size(); i++)
		{
			bool flag = ((Skill)this.vSkill.elementAt(i)).template.id == skillTemplate.id;
			if (flag)
			{
				return (Skill)this.vSkill.elementAt(i);
			}
		}
		return null;
	}

	// Token: 0x060001EB RID: 491 RVA: 0x00014C80 File Offset: 0x00012E80
	public Waypoint isInEnterOfflinePoint()
	{
		Task task = global::Char.myChar.taskMaint;
		bool flag = task != null && task.taskId == 0 && task.index < 6;
		Waypoint result;
		if (flag)
		{
			result = null;
		}
		else
		{
			int num = TileMap.vGo.size();
			sbyte b = 0;
			while ((int)b < num)
			{
				Waypoint waypoint = (Waypoint)TileMap.vGo.elementAt((int)b);
				bool flag2 = PopUp.vPopups.size() >= num;
				if (flag2)
				{
					PopUp popUp = (PopUp)PopUp.vPopups.elementAt((int)b);
					bool flag3 = !popUp.isPaint;
					if (flag3)
					{
						return null;
					}
				}
				bool flag4 = this.cx >= (int)waypoint.minX && this.cx <= (int)waypoint.maxX && this.cy >= (int)waypoint.minY && this.cy <= (int)waypoint.maxY && waypoint.isEnter && waypoint.isOffline;
				if (flag4)
				{
					return waypoint;
				}
				b += 1;
			}
			result = null;
		}
		return result;
	}

	// Token: 0x060001EC RID: 492 RVA: 0x00014D9C File Offset: 0x00012F9C
	public Waypoint isInEnterOnlinePoint()
	{
		Task task = global::Char.myChar.taskMaint;
		bool flag = task != null && task.taskId == 0 && task.index < 6;
		Waypoint result;
		if (flag)
		{
			result = null;
		}
		else
		{
			int num = TileMap.vGo.size();
			sbyte b = 0;
			while ((int)b < num)
			{
				Waypoint waypoint = (Waypoint)TileMap.vGo.elementAt((int)b);
				bool flag2 = PopUp.vPopups.size() >= num;
				if (flag2)
				{
					PopUp popUp = (PopUp)PopUp.vPopups.elementAt((int)b);
					bool flag3 = !popUp.isPaint;
					if (flag3)
					{
						return null;
					}
				}
				bool flag4 = this.cx >= (int)waypoint.minX && this.cx <= (int)waypoint.maxX && this.cy >= (int)waypoint.minY && this.cy <= (int)waypoint.maxY && waypoint.isEnter && !waypoint.isOffline;
				if (flag4)
				{
					return waypoint;
				}
				b += 1;
			}
			result = null;
		}
		return result;
	}

	// Token: 0x060001ED RID: 493 RVA: 0x00014EB8 File Offset: 0x000130B8
	public bool isInWaypoint()
	{
		bool flag = TileMap.isInAirMap() && this.cy >= TileMap.pxh - 48;
		bool result;
		if (flag)
		{
			result = true;
		}
		else
		{
			bool flag2 = this.isTeleport || this.isUsePlane;
			if (flag2)
			{
				result = false;
			}
			else
			{
				int num = TileMap.vGo.size();
				sbyte b = 0;
				while ((int)b < num)
				{
					Waypoint waypoint = (Waypoint)TileMap.vGo.elementAt((int)b);
					bool flag3 = (TileMap.mapID == 47 || TileMap.isInAirMap()) && this.cy <= (int)(waypoint.minY + waypoint.maxY) && this.cx > (int)waypoint.minX && this.cx < (int)waypoint.maxX;
					if (flag3)
					{
						bool flag4 = TileMap.isInAirMap() && this.cTypePk != 0;
						return !flag4;
					}
					bool flag5 = this.cx >= (int)waypoint.minX && this.cx <= (int)waypoint.maxX && this.cy >= (int)waypoint.minY && this.cy <= (int)waypoint.maxY && !waypoint.isEnter;
					if (flag5)
					{
						return true;
					}
					b += 1;
				}
				result = false;
			}
		}
		return result;
	}

	// Token: 0x060001EE RID: 494 RVA: 0x00015014 File Offset: 0x00013214
	public bool isPunchKickSkill()
	{
		bool flag = this.skillPaint == null;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = this.skillPaint.id >= 0 && this.skillPaint.id <= 6;
			if (flag2)
			{
				result = true;
			}
			else
			{
				bool flag3 = this.skillPaint.id >= 14 && this.skillPaint.id <= 20;
				if (flag3)
				{
					result = true;
				}
				else
				{
					bool flag4 = this.skillPaint.id >= 28 && this.skillPaint.id <= 34;
					if (flag4)
					{
						result = true;
					}
					else
					{
						bool flag5 = this.skillPaint.id >= 63 && this.skillPaint.id <= 69;
						result = flag5;
					}
				}
			}
		}
		return result;
	}

	// Token: 0x060001EF RID: 495 RVA: 0x000150F8 File Offset: 0x000132F8
	public void soundUpdate()
	{
		bool flag = this.me && this.statusMe == 10 && this.cf == 8 && this.ty > 20 && GameCanvas.gameTick % 20 == 0;
		if (flag)
		{
			SoundMn.gI().charFly();
		}
		bool flag2 = this.skillPaint != null && this.skillInfoPaint() != null && this.indexSkill < this.skillInfoPaint().Length && this.isPunchKickSkill() && (this.me || (!this.me && this.cx >= GameScr.cmx && this.cx <= GameScr.cmx + GameCanvas.w)) && GameCanvas.gameTick % 5 == 0;
		if (flag2)
		{
			bool flag3 = this.cf == 9 || this.cf == 10 || this.cf == 11;
			if (flag3)
			{
				SoundMn.gI().charPunch(true, (!this.me) ? 0.05f : 0.1f);
			}
			else
			{
				SoundMn.gI().charPunch(false, (!this.me) ? 0.05f : 0.1f);
			}
		}
	}

	// Token: 0x060001F0 RID: 496 RVA: 0x00015220 File Offset: 0x00013420
	public void updateChargeSkill()
	{
	}

	// Token: 0x060001F1 RID: 497 RVA: 0x00015224 File Offset: 0x00013424
	public virtual void update()
	{
		bool flag = this.isMafuba;
		if (flag)
		{
			this.cf = 23;
			this.countMafuba += 1;
			bool flag2 = this.countMafuba > 150;
			if (flag2)
			{
				this.isMafuba = false;
			}
		}
		else
		{
			this.countMafuba = 0;
			bool flag3 = this.isHide || this.isMabuHold;
			if (!flag3)
			{
				bool flag4 = (!this.isCopy && this.clevel < 14) || this.statusMe == 1 || this.statusMe == 6;
				if (flag4)
				{
				}
				bool flag5 = this.petFollow != null;
				if (flag5)
				{
					bool flag6 = GameCanvas.gameTick % 3 == 0;
					if (flag6)
					{
						bool flag7 = global::Char.myCharz().cdir == 1;
						if (flag7)
						{
							this.petFollow.cmtoX = this.cx - 20;
						}
						bool flag8 = global::Char.myCharz().cdir == -1;
						if (flag8)
						{
							this.petFollow.cmtoX = this.cx + 20;
						}
						this.petFollow.cmtoY = this.cy - 40;
						bool flag9 = this.petFollow.cmx > this.cx;
						if (flag9)
						{
							this.petFollow.dir = -1;
						}
						else
						{
							this.petFollow.dir = 1;
						}
						bool flag10 = this.petFollow.cmtoX < 100;
						if (flag10)
						{
							this.petFollow.cmtoX = 100;
						}
						bool flag11 = this.petFollow.cmtoX > TileMap.pxw - 100;
						if (flag11)
						{
							this.petFollow.cmtoX = TileMap.pxw - 100;
						}
					}
					this.petFollow.update();
				}
				bool flag12 = !this.me && this.cHP <= 0L && this.clanID != -100 && this.statusMe != 14 && this.statusMe != 5;
				if (flag12)
				{
					this.startDie((short)this.cx, (short)this.cy);
				}
				bool flag13 = this.isInjureHp;
				if (flag13)
				{
					this.twHp++;
					bool flag14 = this.twHp == 20;
					if (flag14)
					{
						this.twHp = 0;
						this.isInjureHp = false;
					}
				}
				else
				{
					bool flag15 = this.dHP > this.cHP;
					if (flag15)
					{
						long num = this.dHP - this.cHP >> 1;
						bool flag16 = num < 1L;
						if (flag16)
						{
							num = 1L;
						}
						this.dHP -= num;
					}
					else
					{
						this.dHP = this.cHP;
					}
				}
				bool flag17 = this.secondPower != 0;
				if (flag17)
				{
					this.currS = mSystem.currentTimeMillis();
					bool flag18 = this.currS - this.lastS >= 1000L;
					if (flag18)
					{
						this.lastS = mSystem.currentTimeMillis();
						this.secondPower -= 1;
					}
				}
				bool flag19 = this.isPaintNewSkill;
				if (flag19)
				{
					bool flag20 = GameCanvas.timeNow > this.timeReset_newSkill || this.statusMe == 14 || this.statusMe == 5;
					if (flag20)
					{
						this.timeReset_newSkill = 0L;
						this.isPaintNewSkill = false;
					}
					this.UpdSkillPaint_NEW();
					bool flag21 = this.isShadown;
					if (flag21)
					{
						this.updateShadown();
					}
				}
				else
				{
					bool flag22 = !this.me && GameScr.notPaint;
					if (!flag22)
					{
						bool flag23 = this.sleepEff && GameCanvas.gameTick % 10 == 0;
						if (flag23)
						{
							EffecMn.addEff(new Effect(41, this.cx, this.cy, 3, 1, 1));
						}
						bool flag24 = this.huytSao;
						if (flag24)
						{
							this.huytSao = false;
							EffecMn.addEff(new Effect(39, this.cx, this.cy, 3, 3, 1));
						}
						bool flag25 = this.blindEff && GameCanvas.gameTick % 5 == 0;
						if (flag25)
						{
							ServerEffect.addServerEffect(113, this, 1);
						}
						bool flag26 = this.protectEff;
						if (flag26)
						{
							int y = this.cH_new + 73;
							bool flag27 = GameCanvas.gameTick % 5 == 0;
							if (flag27)
							{
								this.eProtect = new Effect(33, this.cx, y, 3, 3, 1);
							}
							bool flag28 = this.eProtect != null;
							if (flag28)
							{
								this.eProtect.update();
								this.eProtect.x = this.cx;
								this.eProtect.y = y;
							}
						}
						bool flag29 = this.danhHieuEff;
						if (flag29)
						{
							bool flag30 = this.eDanhHieu == null;
							if (flag30)
							{
								string text = (string)GameCanvas.danhHieu.get(this.charID.ToString() + string.Empty);
								bool flag31 = text != null;
								if (flag31)
								{
									string[] array = Res.split(text.Trim(), ",", 0);
									short id = short.Parse(array[0]);
									short num2 = short.Parse(array[1]);
									this.eDanhHieu = new Effect((int)id, this.cx, this.cH_new + 73, 1, -1, -1);
									this.eDanhHieu.timeExist = (long)(num2 * 1000) + mSystem.currentTimeMillis();
								}
							}
							bool flag32 = this.eDanhHieu != null;
							if (flag32)
							{
								this.eDanhHieu.update();
								this.eDanhHieu.x = this.cx;
								this.eDanhHieu.y = this.cH_new;
								bool flag33 = this.eDanhHieu.timeExist <= mSystem.currentTimeMillis();
								if (flag33)
								{
									this.eDanhHieu = null;
									GameCanvas.danhHieu.remove(this.charID.ToString() + string.Empty);
								}
							}
						}
						bool flag34 = this.charFocus != null && this.charFocus.cy < 0;
						if (flag34)
						{
							this.charFocus = null;
						}
						bool flag35 = this.isFusion;
						if (flag35)
						{
							this.tFusion++;
						}
						bool flag36 = this.isNhapThe;
						if (flag36)
						{
							bool flag37 = GameCanvas.gameTick % 25 == 0;
							if (flag37)
							{
								int id2 = 114;
								ServerEffect.addServerEffect(id2, this, 1);
							}
						}
						bool flag38 = this.isSetPos;
						if (flag38)
						{
							this.tpos++;
							bool flag39 = this.tpos != 1;
							if (!flag39)
							{
								this.tpos = 0;
								this.isSetPos = false;
								this.cx = (int)this.xPos;
								this.cy = (int)this.yPos;
								this.cp1 = (this.cp2 = (this.cp3 = 0));
								bool flag40 = this.typePos == 1;
								if (flag40)
								{
									bool flag41 = this.me;
									if (flag41)
									{
										this.cxSend = this.cx;
										this.cySend = this.cy;
									}
									this.currentMovePoint = null;
									this.telePortSkill = false;
									ServerEffect.addServerEffect(173, this.cx, this.cy, 1);
								}
								else
								{
									ServerEffect.addServerEffect(60, this.cx, this.cy, 1);
								}
								bool flag42 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) == 2;
								if (flag42)
								{
									this.statusMe = 1;
								}
								else
								{
									this.statusMe = 4;
								}
							}
						}
						else
						{
							this.soundUpdate();
							bool flag43 = this.stone;
							if (!flag43)
							{
								bool flag44 = this.isFreez;
								if (flag44)
								{
									bool flag45 = GameCanvas.gameTick % 5 == 0;
									if (flag45)
									{
										ServerEffect.addServerEffect(113, this.cx, this.cy, 1);
									}
									this.cf = 23;
									long num3 = mSystem.currentTimeMillis();
									bool flag46 = num3 - this.lastFreez >= 1000L;
									if (flag46)
									{
										this.freezSeconds--;
										this.lastFreez = num3;
										bool flag47 = this.freezSeconds < 0;
										if (flag47)
										{
											this.isFreez = false;
											this.seconds = 0;
											bool flag48 = this.me;
											if (flag48)
											{
												global::Char.myCharz().isLockMove = false;
												GameScr.gI().dem = 0;
												GameScr.gI().isFreez = false;
											}
										}
									}
									bool flag49 = TileMap.tileTypeAt(this.cx / (int)TileMap.size, this.cy / (int)TileMap.size) == 0;
									if (flag49)
									{
										this.ty++;
										this.wt++;
										this.fy += ((!this.wy) ? 1 : -1);
										bool flag50 = this.wt == 10;
										if (flag50)
										{
											this.wt = 0;
											this.wy = !this.wy;
										}
									}
								}
								else
								{
									bool flag51 = this.isWaitMonkey;
									if (flag51)
									{
										this.isLockMove = true;
										this.cf = 17;
										bool flag52 = GameCanvas.gameTick % 5 == 0;
										if (flag52)
										{
											ServerEffect.addServerEffect(154, this.cx, this.cy - 10, 2);
										}
										bool flag53 = GameCanvas.gameTick % 5 == 0;
										if (flag53)
										{
											ServerEffect.addServerEffect(1, this.cx, this.cy + 10, 1);
										}
										this.chargeCount++;
										bool flag54 = this.chargeCount == 500;
										if (flag54)
										{
											this.isWaitMonkey = false;
											this.isLockMove = false;
										}
									}
									else
									{
										bool flag55 = this.isStandAndCharge;
										if (flag55)
										{
											this.chargeCount++;
											bool flag56 = !TileMap.tileTypeAt(global::Char.myCharz().cx, global::Char.myCharz().cy, 2);
											this.updateEffect();
											this.updateSkillPaint();
											this.moveFast = null;
											this.currentMovePoint = null;
											this.cf = 17;
											bool flag57 = flag56 && this.cgender != 2;
											if (flag57)
											{
												this.cf = 12;
											}
											bool flag58 = this.cgender == 2;
											if (flag58)
											{
												bool flag59 = TileMap.mapID == 170;
												if (flag59)
												{
													bool flag60 = GameCanvas.gameTick % 4 == 0;
													if (flag60)
													{
													}
													bool flag61 = GameCanvas.gameTick % 2 == 0;
													if (flag61)
													{
														bool flag62 = this.cdir == 1;
														if (flag62)
														{
															ServerEffect.addServerEffect(70, this.cx - 18, this.cy - this.ch / 2 + 8, 1);
															ServerEffect.addServerEffect(70, this.cx + 23, this.cy - this.ch / 2 + 15, 1);
														}
														else
														{
															ServerEffect.addServerEffect(70, this.cx + 18, this.cy - this.ch / 2 + 8, 1);
															ServerEffect.addServerEffect(70, this.cx - 23, this.cy - this.ch / 2 + 15, 1);
														}
													}
												}
												else
												{
													bool flag63 = GameCanvas.gameTick % 3 == 0;
													if (flag63)
													{
														ServerEffect.addServerEffect(154, this.cx, this.cy - this.ch / 2 + 10, 1);
													}
													bool flag64 = GameCanvas.gameTick % 5 == 0;
													if (flag64)
													{
														ServerEffect.addServerEffect(114, this.cx + Res.random(-20, 20), this.cy + Res.random(-20, 20), 1);
													}
												}
											}
											bool flag65 = this.cgender == 1;
											if (flag65)
											{
												bool flag66 = GameCanvas.gameTick % 4 == 0;
												if (flag66)
												{
												}
												bool flag67 = GameCanvas.gameTick % 2 == 0;
												if (flag67)
												{
													bool flag68 = this.cdir == 1;
													if (flag68)
													{
														ServerEffect.addServerEffect(70, this.cx - 18, this.cy - this.ch / 2 + 8, 1);
														ServerEffect.addServerEffect(70, this.cx + 23, this.cy - this.ch / 2 + 15, 1);
													}
													else
													{
														ServerEffect.addServerEffect(70, this.cx + 18, this.cy - this.ch / 2 + 8, 1);
														ServerEffect.addServerEffect(70, this.cx - 23, this.cy - this.ch / 2 + 15, 1);
													}
												}
											}
											bool flag69 = this.cgender == 0 && GameCanvas.gameTick % 2 == 0;
											if (flag69)
											{
												bool flag70 = this.cdir == 1;
												if (flag70)
												{
													ServerEffect.addServerEffect(70, this.cx - 18, this.cy - this.ch / 2 + 8, 1);
													ServerEffect.addServerEffect(70, this.cx + 23, this.cy - this.ch / 2 + 15, 1);
												}
												else
												{
													ServerEffect.addServerEffect(70, this.cx + 18, this.cy - this.ch / 2 + 8, 1);
													ServerEffect.addServerEffect(70, this.cx - 23, this.cy - this.ch / 2 + 15, 1);
												}
											}
											this.cur = mSystem.currentTimeMillis();
											Res.outz("  7.5 gong namekLazer " + this.cName + "_" + this.cgender.ToString());
											bool flag71 = this.cur - this.last > (long)this.seconds || this.cur - this.last > 10000L;
											if (flag71)
											{
												Res.outz("<*> 8  namekLazer gong xong " + this.cName);
												this.stopUseChargeSkill();
												this.isStandAndCharge = false;
												int skillId = (int)this.myskill.skillId;
												bool flag72 = this.me;
												if (flag72)
												{
													bool flag73 = this.cgender == 2;
													if (flag73)
													{
														Res.outz("<*> 9 [me] xay da xong  " + global::Char.myCharz().myskill.skillId.ToString());
														global::Char.myCharz().setSkillPaint(GameScr.sks[(int)global::Char.myCharz().myskill.skillId], flag56 ? 1 : 0);
													}
													bool flag74 = this.cgender == 1;
													if (flag74)
													{
														Res.outz("<*> 9 [me] namec xong " + global::Char.myCharz().myskill.skillId.ToString());
														this.isCreateDark = true;
														global::Char.myCharz().setSkillPaint(GameScr.sks[(int)global::Char.myCharz().myskill.skillId], flag56 ? 1 : 0);
													}
													bool flag75 = this.cgender == 0;
													if (flag75)
													{
														Res.outz("<*> 9 [me] namec xong " + global::Char.myCharz().myskill.skillId.ToString());
														global::Char.myCharz().setSkillPaint(GameScr.sks[(int)global::Char.myCharz().myskill.skillId], flag56 ? 1 : 0);
													}
													bool flag76 = global::Char.myCharz().myskill.skillId >= 77 && global::Char.myCharz().myskill.skillId <= 83;
													if (flag76)
													{
														Service.gI().skill_not_focus(4);
													}
													skillId = (int)global::Char.myCharz().myskill.skillId;
												}
												else
												{
													bool flag77 = this.cgender == 2;
													if (flag77)
													{
														this.setSkillPaint(GameScr.sks[this.skillTemplateId], flag56 ? 1 : 0);
														Res.outz("<*> 10 xay da xong 111   " + this.skillTemplateId.ToString());
													}
													bool flag78 = this.cgender == 1;
													if (flag78)
													{
														this.setSkillPaint(GameScr.sks[this.skillTemplateId], flag56 ? 1 : 0);
														Res.outz("<*> 10 C_NAMEC xong 222   " + this.skillTemplateId.ToString());
													}
													bool flag79 = this.cgender == 0;
													if (flag79)
													{
														this.setSkillPaint(GameScr.sks[this.skillTemplateId], flag56 ? 1 : 0);
														Res.outz("<*> 10  C_TRAIDAT xong 333   " + this.skillTemplateId.ToString());
													}
													skillId = this.skillTemplateId;
												}
												bool flag80 = this.cgender == 2 && this.statusMe != 14 && this.statusMe != 5 && (skillId < 77 || skillId > 83);
												if (flag80)
												{
													GameScr.gI().activeSuperPower(this.cx, this.cy);
												}
												Res.outz("<*> 11 Hoàn thành skill not focus -  STAND");
											}
											this.chargeCount++;
											bool flag81 = this.chargeCount == 500;
											if (flag81)
											{
												this.stopUseChargeSkill();
											}
										}
										else
										{
											bool flag82 = this.isFlyAndCharge;
											if (flag82)
											{
												this.updateEffect();
												this.updateSkillPaint();
												this.moveFast = null;
												this.currentMovePoint = null;
												this.posDisY++;
												bool flag83 = TileMap.tileTypeAt(this.cx, this.cy - this.ch, 8192);
												if (flag83)
												{
													this.stopUseChargeSkill();
												}
												else
												{
													bool flag84 = this.posDisY == 20;
													if (flag84)
													{
														this.last = mSystem.currentTimeMillis();
													}
													bool flag85 = this.posDisY > 20;
													if (flag85)
													{
														this.cur = mSystem.currentTimeMillis();
														bool flag86 = this.cur - this.last > (long)this.seconds || this.cur - this.last > 10000L;
														if (flag86)
														{
															Res.outz("<*> 12 kết thúc skill  qua cau kinh khi \tFLY " + this.cName);
															this.isFlyAndCharge = false;
															bool flag87 = this.me;
															if (flag87)
															{
																this.isCreateDark = true;
																bool flag88 = TileMap.tileTypeAt(global::Char.myCharz().cx, global::Char.myCharz().cy, 2);
																this.isUseSkillAfterCharge = true;
																this.setSkillPaint(GameScr.sks[(int)global::Char.myCharz().myskill.skillId], (!flag88) ? 1 : 0);
															}
															else
															{
																bool flag89 = TileMap.mapID == 170;
																if (flag89)
																{
																	this.isCreateDark = true;
																	this.isUseSkillAfterCharge = true;
																	bool flag90 = TileMap.tileTypeAt(this.cx, this.cy, 2);
																	this.setSkillPaint(GameScr.sks[this.skillTemplateId], (!flag90) ? 1 : 0);
																}
															}
														}
														else
														{
															this.cf = 32;
															bool flag91 = this.cgender == 0 && GameCanvas.gameTick % 3 == 0;
															if (flag91)
															{
																ServerEffect.addServerEffect(153, this.cx, this.cy - this.ch, 2);
															}
															bool flag92 = TileMap.mapID == 170 && (this.cgender == 2 || this.cgender == 1) && GameCanvas.gameTick % 3 == 0;
															if (flag92)
															{
																ServerEffect.addServerEffect(153, this.cx, this.cy - this.ch, 2);
															}
															this.chargeCount++;
															bool flag93 = this.chargeCount == 500;
															if (flag93)
															{
																this.stopUseChargeSkill();
															}
														}
													}
													else
													{
														bool flag94 = this.statusMe != 14;
														if (flag94)
														{
															this.statusMe = 3;
														}
														this.cvy = -3;
														this.cy += this.cvy;
														this.cf = 7;
													}
												}
											}
											else
											{
												bool flag95 = this.me && GameCanvas.isTouch;
												if (flag95)
												{
													bool flag96 = this.charFocus != null && this.charFocus.charID >= 0 && this.charFocus.cx > 100 && this.charFocus.cx < TileMap.pxw - 100 && this.isInEnterOnlinePoint() == null && this.isInEnterOfflinePoint() == null && !this.isAttacPlayerStatus() && TileMap.mapID != 51 && TileMap.mapID != 52 && GameCanvas.panel.vPlayerMenu.size() > 0 && GameScr.gI().popUpYesNo == null;
													if (flag96)
													{
														int num4 = global::Math.abs(this.cx - this.charFocus.cx);
														int num5 = global::Math.abs(this.cy - this.charFocus.cy);
														bool flag97 = num4 < 60 && num5 < 40;
														if (flag97)
														{
															bool flag98 = this.cmdMenu == null;
															if (flag98)
															{
																this.cmdMenu = new Command(mResources.MENU, 11111);
																this.cmdMenu.isPlaySoundButton = false;
															}
															this.cmdMenu.x = this.charFocus.cx - GameScr.cmx;
															this.cmdMenu.y = this.charFocus.cy - this.charFocus.ch - 30 - GameScr.cmy;
														}
														else
														{
															this.cmdMenu = null;
														}
													}
													else
													{
														this.cmdMenu = null;
													}
												}
												bool flag99 = this.isShadown;
												if (flag99)
												{
													this.updateShadown();
												}
												bool flag100 = this.isTeleport;
												if (!flag100)
												{
													bool flag101 = this.chatInfo != null;
													if (flag101)
													{
														this.chatInfo.update();
													}
													bool flag102 = this.shadowLife > 0;
													if (flag102)
													{
														this.shadowLife--;
													}
													bool flag103 = this.resultTest > 0 && GameCanvas.gameTick % 2 == 0;
													if (flag103)
													{
														this.resultTest -= 1;
														bool flag104 = this.resultTest == 30 || this.resultTest == 60;
														if (flag104)
														{
															this.resultTest = 0;
														}
													}
													this.updateSkillPaint();
													bool flag105 = this.mobMe != null;
													if (flag105)
													{
														this.updateMobMe();
													}
													bool flag106 = this.arr != null;
													if (flag106)
													{
														this.arr.update();
													}
													bool flag107 = this.dart != null;
													if (flag107)
													{
														this.dart.update();
													}
													this.updateEffect();
													bool flag108 = this.holdEffID != 0;
													if (flag108)
													{
														bool flag109 = GameCanvas.gameTick % 5 == 0;
														if (flag109)
														{
															EffecMn.addEff(new Effect(32, this.cx, this.cy + 24, 3, 5, 1));
														}
													}
													else
													{
														bool flag110 = this.blindEff || this.sleepEff;
														if (!flag110)
														{
															bool flag111 = this.holder;
															if (flag111)
															{
																bool flag112 = this.charHold != null && (this.charHold.statusMe == 14 || this.charHold.statusMe == 5);
																if (flag112)
																{
																	this.removeHoleEff();
																}
																bool flag113 = this.mobHold != null && this.mobHold.status == 1;
																if (flag113)
																{
																	this.removeHoleEff();
																}
																bool flag114 = this.me && this.statusMe == 2 && this.currentMovePoint != null;
																if (flag114)
																{
																	this.holder = false;
																	this.charHold = null;
																	this.mobHold = null;
																}
																bool flag115 = TileMap.tileTypeAt(this.cx, this.cy, 2);
																if (flag115)
																{
																	this.cf = 16;
																}
																else
																{
																	this.cf = 31;
																}
															}
															else
															{
																bool flag116 = this.cHP > 0L;
																if (flag116)
																{
																	for (int i = 0; i < this.vEff.size(); i++)
																	{
																		EffectChar effectChar = (EffectChar)this.vEff.elementAt(i);
																		bool flag117 = effectChar.template.type == 0 || effectChar.template.type == 12;
																		if (flag117)
																		{
																			bool isEff = GameCanvas.isEff1;
																			if (isEff)
																			{
																				this.cHP += (long)effectChar.param;
																				this.cMP += (long)effectChar.param;
																			}
																		}
																		else
																		{
																			bool flag118 = effectChar.template.type == 4 || effectChar.template.type == 17;
																			if (flag118)
																			{
																				bool isEff2 = GameCanvas.isEff1;
																				if (isEff2)
																				{
																					this.cHP += (long)effectChar.param;
																				}
																			}
																			else
																			{
																				bool flag119 = effectChar.template.type == 13 && GameCanvas.isEff1;
																				if (flag119)
																				{
																					this.cHP -= this.cHPFull * 3L / 100L;
																					bool flag120 = this.cHP < 1L;
																					if (flag120)
																					{
																						this.cHP = 1L;
																					}
																				}
																			}
																		}
																	}
																	bool flag121 = this.eff5BuffHp > 0 && GameCanvas.isEff2;
																	if (flag121)
																	{
																		this.cHP += (long)this.eff5BuffHp;
																	}
																	bool flag122 = this.eff5BuffMp > 0 && GameCanvas.isEff2;
																	if (flag122)
																	{
																		this.cMP += (long)this.eff5BuffMp;
																	}
																	bool flag123 = this.cHP > this.cHPFull;
																	if (flag123)
																	{
																		this.cHP = this.cHPFull;
																	}
																	bool flag124 = this.cMP > this.cMPFull;
																	if (flag124)
																	{
																		this.cMP = this.cMPFull;
																	}
																}
																bool flag125 = this.cmtoChar;
																if (flag125)
																{
																	GameScr.cmtoX = this.cx - GameScr.gW2;
																	GameScr.cmtoY = this.cy - GameScr.gH23;
																	bool flag126 = !GameCanvas.isTouchControl;
																	if (flag126)
																	{
																		GameScr.cmtoX += GameScr.gW6 * this.cdir;
																	}
																}
																this.tick = (this.tick + 1) % 100;
																bool flag127 = this.me;
																if (flag127)
																{
																	bool flag128 = this.charFocus != null && !GameScr.vCharInMap.contains(this.charFocus);
																	if (flag128)
																	{
																		this.charFocus = null;
																	}
																	bool flag129 = this.cx < 10;
																	if (flag129)
																	{
																		this.cvx = 0;
																		this.cx = 10;
																	}
																	else
																	{
																		bool flag130 = this.cx > TileMap.pxw - 10;
																		if (flag130)
																		{
																			this.cx = TileMap.pxw - 10;
																			this.cvx = 0;
																		}
																	}
																	bool flag131 = !global::Char.ischangingMap && this.isInWaypoint();
																	if (flag131)
																	{
																		Service.gI().charMove();
																		bool flag132 = TileMap.isTrainingMap();
																		if (flag132)
																		{
																			Service.gI().getMapOffline();
																			global::Char.ischangingMap = true;
																		}
																		else
																		{
																			Service.gI().requestChangeMap();
																		}
																		global::Char.isLockKey = true;
																		global::Char.ischangingMap = true;
																		GameCanvas.clearKeyHold();
																		GameCanvas.clearKeyPressed();
																		InfoDlg.showWait();
																		return;
																	}
																	bool flag133 = this.statusMe != 4 && Res.abs(this.cx - this.cxSend) + Res.abs(this.cy - this.cySend) >= 70 && this.cy - this.cySend <= 0 && this.me;
																	if (flag133)
																	{
																		Service.gI().charMove();
																	}
																	bool flag134 = this.isLockMove;
																	if (flag134)
																	{
																		this.currentMovePoint = null;
																	}
																	bool flag135 = this.currentMovePoint != null;
																	if (flag135)
																	{
																		bool flag136 = global::Char.abs(this.cx - this.currentMovePoint.xEnd) <= 16 && global::Char.abs(this.cy - this.currentMovePoint.yEnd) <= 16;
																		if (flag136)
																		{
																			this.cx = (this.currentMovePoint.xEnd + this.cx) / 2;
																			this.cy = this.currentMovePoint.yEnd;
																			this.currentMovePoint = null;
																			GameScr.instance.clickMoving = false;
																			this.checkPerformEndMovePointAction();
																			this.cvx = (this.cvy = 0);
																			bool flag137 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) == 2;
																			if (flag137)
																			{
																				this.statusMe = 1;
																			}
																			else
																			{
																				this.setCharFallFromJump();
																			}
																			Service.gI().charMove();
																		}
																		else
																		{
																			this.cdir = ((this.currentMovePoint.xEnd > this.cx) ? 1 : -1);
																			bool flag138 = TileMap.tileTypeAt(this.cx, this.cy, 2);
																			if (flag138)
																			{
																				this.statusMe = 2;
																				bool flag139 = this.currentMovePoint != null;
																				if (flag139)
																				{
																					this.cvx = this.cspeed * this.cdir;
																					this.cvy = 0;
																				}
																				bool flag140 = global::Char.abs(this.cx - this.currentMovePoint.xEnd) <= 10;
																				if (flag140)
																				{
																					bool flag141 = this.currentMovePoint.yEnd > this.cy;
																					if (flag141)
																					{
																						bool flag142 = false;
																						sbyte b = (this.cdir == 1) ? 1 : -1;
																						for (int j = 0; j < 2; j++)
																						{
																							bool flag143 = TileMap.tileTypeAt(this.currentMovePoint.xEnd + this.chw * (int)b, this.cy + this.chh * j, 2);
																							if (flag143)
																							{
																								flag142 = true;
																								break;
																							}
																						}
																						bool flag144 = flag142;
																						if (flag144)
																						{
																							this.currentMovePoint = null;
																							GameScr.instance.clickMoving = false;
																							this.statusMe = 1;
																							this.cvx = (this.cvy = 0);
																							this.checkPerformEndMovePointAction();
																						}
																						else
																						{
																							SoundMn.gI().charJump();
																							this.cx = this.currentMovePoint.xEnd;
																							this.statusMe = 10;
																							this.cvy = -5;
																							this.cvx = 0;
																							Res.outz("Jum lun");
																						}
																					}
																					else
																					{
																						SoundMn.gI().charJump();
																						this.cx = this.currentMovePoint.xEnd;
																						this.statusMe = 10;
																						this.cvy = -5;
																						this.cvx = 0;
																					}
																				}
																				bool flag145 = this.cdir == 1;
																				if (flag145)
																				{
																					bool flag146 = TileMap.tileTypeAt(this.cx + this.chw, this.cy - this.chh, 4);
																					if (flag146)
																					{
																						this.cvx = this.cspeed * this.cdir;
																						this.statusMe = 10;
																						this.cvy = -5;
																					}
																				}
																				else
																				{
																					bool flag147 = TileMap.tileTypeAt(this.cx - this.chw - 1, this.cy - this.chh, 8);
																					if (flag147)
																					{
																						this.cvx = this.cspeed * this.cdir;
																						this.statusMe = 10;
																						this.cvy = -5;
																					}
																				}
																			}
																			else
																			{
																				bool flag148 = this.currentMovePoint.yEnd < this.cy + 10;
																				if (flag148)
																				{
																					this.statusMe = 10;
																					this.cvy = -5;
																					bool flag149 = global::Char.abs(this.cy - this.currentMovePoint.yEnd) <= 10;
																					if (flag149)
																					{
																						this.cy = this.currentMovePoint.yEnd;
																						this.cvy = 0;
																					}
																					bool flag150 = global::Char.abs(this.cx - this.currentMovePoint.xEnd) <= 10;
																					if (flag150)
																					{
																						this.cvx = 0;
																					}
																					else
																					{
																						this.cvx = this.cspeed * this.cdir;
																					}
																				}
																				else
																				{
																					bool flag151 = TileMap.tileTypeAt(this.cx, this.cy, 2);
																					if (flag151)
																					{
																						this.currentMovePoint = null;
																						GameScr.instance.clickMoving = false;
																						this.statusMe = 1;
																						this.cvx = (this.cvy = 0);
																						this.checkPerformEndMovePointAction();
																					}
																					else
																					{
																						bool flag152 = this.statusMe == 10 || this.statusMe == 2;
																						if (flag152)
																						{
																							this.cvy = 0;
																						}
																						this.statusMe = 4;
																					}
																				}
																				bool flag153 = this.currentMovePoint.yEnd > this.cy;
																				if (flag153)
																				{
																					bool flag154 = this.cdir == 1;
																					if (flag154)
																					{
																						bool flag155 = TileMap.tileTypeAt(this.cx + this.chw, this.cy - this.chh, 4);
																						if (flag155)
																						{
																							this.cvx = (this.cvy = 0);
																							this.statusMe = 4;
																							this.currentMovePoint = null;
																							GameScr.instance.clickMoving = false;
																							this.checkPerformEndMovePointAction();
																						}
																					}
																					else
																					{
																						bool flag156 = TileMap.tileTypeAt(this.cx - this.chw - 1, this.cy - this.chh, 8);
																						if (flag156)
																						{
																							this.cvx = (this.cvy = 0);
																							this.statusMe = 4;
																							this.currentMovePoint = null;
																							GameScr.instance.clickMoving = false;
																							this.checkPerformEndMovePointAction();
																						}
																					}
																				}
																			}
																		}
																	}
																	this.searchFocus();
																}
																else
																{
																	this.checkHideCharName();
																	bool flag157 = this.statusMe == 1 || this.statusMe == 6;
																	if (flag157)
																	{
																		bool flag158 = false;
																		bool flag159 = this.currentMovePoint != null;
																		if (flag159)
																		{
																			bool flag160 = global::Char.abs(this.currentMovePoint.xEnd - this.cx) < 17 && global::Char.abs(this.currentMovePoint.yEnd - this.cy) < 25;
																			if (flag160)
																			{
																				this.cx = this.currentMovePoint.xEnd;
																				this.cy = this.currentMovePoint.yEnd;
																				this.currentMovePoint = null;
																				bool flag161 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) == 2;
																				if (flag161)
																				{
																					this.statusMe = 1;
																					this.cp3 = 0;
																					GameCanvas.gI().startDust(-1, this.cx - -8, this.cy);
																					GameCanvas.gI().startDust(1, this.cx - 8, this.cy);
																				}
																				else
																				{
																					this.statusMe = 4;
																					this.cvy = 0;
																					this.cp1 = 0;
																				}
																				flag158 = true;
																			}
																			else
																			{
																				bool flag162 = (this.statusBeforeNothing == 10 || this.cf == 8) && this.vMovePoints.size() > 0;
																				if (flag162)
																				{
																					flag158 = true;
																				}
																				else
																				{
																					bool flag163 = this.cy == this.currentMovePoint.yEnd;
																					if (flag163)
																					{
																						bool flag164 = this.cx != this.currentMovePoint.xEnd;
																						if (flag164)
																						{
																							this.cx = (this.cx + this.currentMovePoint.xEnd) / 2;
																							this.cf = GameCanvas.gameTick % 5 + 2;
																						}
																					}
																					else
																					{
																						bool flag165 = this.cy < this.currentMovePoint.yEnd;
																						if (flag165)
																						{
																							this.cf = 12;
																							this.cx = (this.cx + this.currentMovePoint.xEnd) / 2;
																							bool flag166 = this.cvy < 0;
																							if (flag166)
																							{
																								this.cvy = 0;
																							}
																							this.cy += this.cvy;
																							bool flag167 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) == 2;
																							if (flag167)
																							{
																								GameCanvas.gI().startDust(-1, this.cx - -8, this.cy);
																								GameCanvas.gI().startDust(1, this.cx - 8, this.cy);
																							}
																							this.cvy++;
																							bool flag168 = this.cvy > 16;
																							if (flag168)
																							{
																								this.cy = (this.cy + this.currentMovePoint.yEnd) / 2;
																							}
																						}
																						else
																						{
																							this.cf = 7;
																							this.cx = (this.cx + this.currentMovePoint.xEnd) / 2;
																							this.cy = (this.cy + this.currentMovePoint.yEnd) / 2;
																						}
																					}
																				}
																			}
																		}
																		else
																		{
																			flag158 = true;
																		}
																		bool flag169 = flag158 && this.vMovePoints.size() > 0;
																		if (flag169)
																		{
																			this.currentMovePoint = (MovePoint)this.vMovePoints.firstElement();
																			this.vMovePoints.removeElementAt(0);
																			bool flag170 = this.currentMovePoint.status == 2;
																			if (flag170)
																			{
																				bool flag171 = (TileMap.tileTypeAtPixel(this.cx, this.cy + 12) & 2) != 2;
																				if (flag171)
																				{
																					this.statusMe = 10;
																					this.cp1 = 0;
																					this.cp2 = 0;
																					this.cvx = -(this.cx - this.currentMovePoint.xEnd) / 10;
																					this.cvy = -(this.cy - this.currentMovePoint.yEnd) / 10;
																					bool flag172 = this.cx - this.currentMovePoint.xEnd > 0;
																					if (flag172)
																					{
																						this.cdir = -1;
																					}
																					else
																					{
																						bool flag173 = this.cx - this.currentMovePoint.xEnd < 0;
																						if (flag173)
																						{
																							this.cdir = 1;
																						}
																					}
																				}
																				else
																				{
																					this.statusMe = 2;
																					bool flag174 = this.cx - this.currentMovePoint.xEnd > 0;
																					if (flag174)
																					{
																						this.cdir = -1;
																					}
																					else
																					{
																						bool flag175 = this.cx - this.currentMovePoint.xEnd < 0;
																						if (flag175)
																						{
																							this.cdir = 1;
																						}
																					}
																					this.cvx = this.cspeed * this.cdir;
																					this.cvy = 0;
																				}
																			}
																			else
																			{
																				bool flag176 = this.currentMovePoint.status == 3;
																				if (flag176)
																				{
																					bool flag177 = (TileMap.tileTypeAtPixel(this.cx, this.cy + 23) & 2) != 2;
																					if (flag177)
																					{
																						this.statusMe = 10;
																						this.cp1 = 0;
																						this.cp2 = 0;
																						this.cvx = -(this.cx - this.currentMovePoint.xEnd) / 10;
																						this.cvy = -(this.cy - this.currentMovePoint.yEnd) / 10;
																						bool flag178 = this.cx - this.currentMovePoint.xEnd > 0;
																						if (flag178)
																						{
																							this.cdir = -1;
																						}
																						else
																						{
																							bool flag179 = this.cx - this.currentMovePoint.xEnd < 0;
																							if (flag179)
																							{
																								this.cdir = 1;
																							}
																						}
																					}
																					else
																					{
																						this.statusMe = 3;
																						GameCanvas.gI().startDust(-1, this.cx - -8, this.cy);
																						GameCanvas.gI().startDust(1, this.cx - 8, this.cy);
																						bool flag180 = this.cx - this.currentMovePoint.xEnd > 0;
																						if (flag180)
																						{
																							this.cdir = -1;
																						}
																						else
																						{
																							bool flag181 = this.cx - this.currentMovePoint.xEnd < 0;
																							if (flag181)
																							{
																								this.cdir = 1;
																							}
																						}
																						this.cvx = global::Char.abs(this.cx - this.currentMovePoint.xEnd) / 10 * this.cdir;
																						this.cvy = -10;
																					}
																				}
																				else
																				{
																					bool flag182 = this.currentMovePoint.status == 4;
																					if (flag182)
																					{
																						this.statusMe = 4;
																						bool flag183 = this.cx - this.currentMovePoint.xEnd > 0;
																						if (flag183)
																						{
																							this.cdir = -1;
																						}
																						else
																						{
																							bool flag184 = this.cx - this.currentMovePoint.xEnd < 0;
																							if (flag184)
																							{
																								this.cdir = 1;
																							}
																						}
																						this.cvx = global::Char.abs(this.cx - this.currentMovePoint.xEnd) / 9 * this.cdir;
																						this.cvy = 0;
																					}
																					else
																					{
																						this.cx = this.currentMovePoint.xEnd;
																						this.cy = this.currentMovePoint.yEnd;
																						this.currentMovePoint = null;
																					}
																				}
																			}
																		}
																	}
																}
																switch (this.statusMe)
																{
																case 1:
																	this.updateCharStand();
																	break;
																case 2:
																	this.updateCharRun();
																	break;
																case 3:
																	this.updateCharJump();
																	break;
																case 4:
																	this.updateCharFall();
																	break;
																case 5:
																	this.updateCharDeadFly();
																	break;
																case 6:
																{
																	bool flag185 = this.isInjure <= 0;
																	if (flag185)
																	{
																		this.cf = 0;
																	}
																	else
																	{
																		bool flag186 = this.statusBeforeNothing == 10;
																		if (flag186)
																		{
																			this.cx += this.cvx;
																		}
																		else
																		{
																			bool flag187 = this.cf <= 1;
																			if (flag187)
																			{
																				this.cp1++;
																				bool flag188 = this.cp1 > 6;
																				if (flag188)
																				{
																					this.cf = 0;
																				}
																				else
																				{
																					this.cf = 1;
																				}
																				bool flag189 = this.cp1 > 10;
																				if (flag189)
																				{
																					this.cp1 = 0;
																				}
																			}
																		}
																	}
																	bool flag190 = this.cf != 7 && this.cf != 12 && (TileMap.tileTypeAtPixel(this.cx, this.cy + 1) & 2) != 2;
																	if (flag190)
																	{
																		this.cvx = 0;
																		this.cvy = 0;
																		this.statusMe = 4;
																		this.cf = 7;
																	}
																	bool flag191 = this.me;
																	if (!flag191)
																	{
																		this.cp3++;
																		bool flag192 = this.cp3 > 10;
																		if (flag192)
																		{
																			bool flag193 = (TileMap.tileTypeAtPixel(this.cx, this.cy + 1) & 2) != 2;
																			if (flag193)
																			{
																				this.cy += 5;
																			}
																			else
																			{
																				this.cf = 0;
																			}
																		}
																		bool flag194 = this.cp3 > 50;
																		if (flag194)
																		{
																			this.cp3 = 0;
																			this.currentMovePoint = null;
																		}
																	}
																	break;
																}
																case 9:
																	this.updateCharAutoJump();
																	break;
																case 10:
																	this.updateCharFly();
																	break;
																case 12:
																	this.updateSkillStand();
																	break;
																case 13:
																	this.updateSkillFall();
																	break;
																case 14:
																{
																	this.cp1++;
																	bool flag195 = this.cp1 > 30;
																	if (flag195)
																	{
																		this.cp1 = 0;
																	}
																	bool flag196 = this.cp1 % 15 < 5;
																	if (flag196)
																	{
																		this.cf = 0;
																	}
																	else
																	{
																		this.cf = 1;
																	}
																	break;
																}
																case 16:
																	this.updateResetPoint();
																	break;
																}
																bool flag197 = this.isInjure > 0;
																if (flag197)
																{
																	this.cf = 23;
																	this.isInjure -= 1;
																}
																bool flag198 = this.wdx != 0 || this.wdy != 0;
																if (flag198)
																{
																	this.startDie(this.wdx, this.wdy);
																	this.wdx = 0;
																	this.wdy = 0;
																}
																bool flag199 = this.moveFast != null;
																if (flag199)
																{
																	bool flag200 = this.moveFast[0] == 0;
																	if (flag200)
																	{
																		short[] array2 = this.moveFast;
																		int num6 = 0;
																		array2[num6] += 1;
																		ServerEffect.addServerEffect(60, this, 1);
																	}
																	else
																	{
																		bool flag201 = this.moveFast[0] < 10;
																		if (flag201)
																		{
																			short[] array3 = this.moveFast;
																			int num7 = 0;
																			array3[num7] += 1;
																		}
																		else
																		{
																			this.cx = (int)this.moveFast[1];
																			this.cy = (int)this.moveFast[2];
																			this.moveFast = null;
																			ServerEffect.addServerEffect(60, this, 1);
																			bool flag202 = this.me;
																			if (flag202)
																			{
																				bool flag203 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) != 2;
																				if (flag203)
																				{
																					this.statusMe = 4;
																					global::Char.myCharz().setAutoSkillPaint(GameScr.sks[38], 1);
																				}
																				else
																				{
																					Service.gI().charMove();
																					global::Char.myCharz().setAutoSkillPaint(GameScr.sks[38], 0);
																				}
																			}
																		}
																	}
																}
																bool flag204 = this.statusMe != 10;
																if (flag204)
																{
																	this.fy = 0;
																}
																bool flag205 = this.isCharge;
																if (flag205)
																{
																	this.cf = 17;
																	bool flag206 = GameCanvas.gameTick % 4 == 0;
																	if (flag206)
																	{
																		ServerEffect.addServerEffect(1, this.cx, this.cy + GameCanvas.transY, 1);
																	}
																	bool flag207 = this.me;
																	if (flag207)
																	{
																		long num8 = mSystem.currentTimeMillis();
																		bool flag208 = num8 - this.last >= 1000L;
																		if (flag208)
																		{
																			Res.outz("%= " + this.myskill.damage.ToString());
																			this.last = num8;
																			this.cHP += this.cHPFull * (long)this.myskill.damage / 100L;
																			this.cMP += this.cMPFull * (long)this.myskill.damage / 100L;
																			bool flag209 = this.cHP < this.cHPFull;
																			if (flag209)
																			{
																				GameScr.startFlyText("+" + (this.cHPFull * (long)this.myskill.damage / 100L).ToString() + " " + mResources.HP, this.cx, this.cy - this.ch - 20, 0, -1, mFont.HP);
																			}
																			bool flag210 = this.cMP < this.cMPFull;
																			if (flag210)
																			{
																				GameScr.startFlyText("+" + (this.cMPFull * (long)this.myskill.damage / 100L).ToString() + " " + mResources.KI, this.cx, this.cy - this.ch - 20, 0, -2, mFont.MP);
																			}
																			Service.gI().skill_not_focus(2);
																		}
																	}
																}
																bool flag211 = this.isFlyUp;
																if (flag211)
																{
																	bool flag212 = this.me;
																	if (flag212)
																	{
																		global::Char.isLockKey = true;
																		this.statusMe = 3;
																		this.cvy = -8;
																		bool flag213 = this.cy <= TileMap.pxh - 240;
																		if (flag213)
																		{
																			this.isFlyUp = false;
																			global::Char.isLockKey = false;
																			this.statusMe = 4;
																		}
																	}
																	else
																	{
																		this.statusMe = 3;
																		this.cvy = -8;
																		bool flag214 = this.cy <= TileMap.pxh - 240;
																		if (flag214)
																		{
																			this.cvy = 0;
																			this.isFlyUp = false;
																			this.cvy = 0;
																			this.statusMe = 1;
																		}
																	}
																}
																this.updateMount();
																this.updEffChar();
																this.updateEye();
																this.updateFHead();
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x060001F2 RID: 498 RVA: 0x00018090 File Offset: 0x00016290
	private void updateEffect()
	{
		bool flag = this.effPaints != null;
		if (flag)
		{
			for (int i = 0; i < this.effPaints.Length; i++)
			{
				bool flag2 = this.effPaints[i] == null;
				if (!flag2)
				{
					bool flag3 = this.effPaints[i].eMob != null;
					if (flag3)
					{
						bool flag4 = !this.effPaints[i].isFly;
						if (flag4)
						{
							this.effPaints[i].eMob.setInjure();
							this.effPaints[i].eMob.injureBy = this;
							bool flag5 = this.me;
							if (flag5)
							{
								this.effPaints[i].eMob.hpInjure = global::Char.myCharz().cDamFull / 2L - global::Char.myCharz().cDamFull * (long)NinjaUtil.randomNumber(11) / 100L;
							}
							int num = this.effPaints[i].eMob.h >> 1;
							bool flag6 = this.effPaints[i].eMob.isBigBoss();
							if (flag6)
							{
								num = this.effPaints[i].eMob.getY() + 20;
							}
							GameScr.startSplash(this.effPaints[i].eMob.x, this.effPaints[i].eMob.y - num, this.cdir);
							this.effPaints[i].isFly = true;
						}
					}
					else
					{
						bool flag7 = this.effPaints[i].eChar != null && !this.effPaints[i].isFly;
						if (flag7)
						{
							bool flag8 = this.effPaints[i].eChar.charID >= 0;
							if (flag8)
							{
								this.effPaints[i].eChar.doInjure();
							}
							GameScr.startSplash(this.effPaints[i].eChar.cx, this.effPaints[i].eChar.cy - (this.effPaints[i].eChar.ch >> 1), this.cdir);
							this.effPaints[i].isFly = true;
						}
					}
					this.effPaints[i].index++;
					bool flag9 = this.effPaints[i].index >= this.effPaints[i].effCharPaint.arrEfInfo.Length;
					if (flag9)
					{
						this.effPaints[i] = null;
					}
				}
			}
		}
		bool flag10 = this.indexEff >= 0 && this.eff != null && GameCanvas.gameTick % 2 == 0;
		if (flag10)
		{
			this.indexEff++;
			bool flag11 = this.indexEff >= this.eff.arrEfInfo.Length;
			if (flag11)
			{
				this.indexEff = -1;
				this.eff = null;
			}
		}
		bool flag12 = this.indexEffTask >= 0 && this.effTask != null && GameCanvas.gameTick % 2 == 0;
		if (flag12)
		{
			this.indexEffTask++;
			bool flag13 = this.indexEffTask >= this.effTask.arrEfInfo.Length;
			if (flag13)
			{
				this.indexEffTask = -1;
				this.effTask = null;
			}
		}
	}

	// Token: 0x060001F3 RID: 499 RVA: 0x000183D8 File Offset: 0x000165D8
	private void checkPerformEndMovePointAction()
	{
		bool flag = this.endMovePointCommand != null;
		if (flag)
		{
			Command command = this.endMovePointCommand;
			this.endMovePointCommand = null;
			command.performAction();
		}
	}

	// Token: 0x060001F4 RID: 500 RVA: 0x0001840C File Offset: 0x0001660C
	private void checkHideCharName()
	{
		bool flag = GameCanvas.gameTick % 20 != 0 || this.charID < 0;
		if (!flag)
		{
			this.paintName = true;
			for (int i = 0; i < GameScr.vCharInMap.size(); i++)
			{
				global::Char @char = null;
				try
				{
					@char = (global::Char)GameScr.vCharInMap.elementAt(i);
				}
				catch (Exception)
				{
				}
				bool flag2 = @char != null && !@char.Equals(this) && ((@char.cy == this.cy && Res.abs(@char.cx - this.cx) < 35) || (this.cy - @char.cy < 32 && this.cy - @char.cy > 0 && Res.abs(@char.cx - this.cx) < 24));
				if (flag2)
				{
					this.paintName = false;
				}
			}
			for (int j = 0; j < GameScr.vNpc.size(); j++)
			{
				Npc npc = null;
				try
				{
					npc = (Npc)GameScr.vNpc.elementAt(j);
				}
				catch (Exception)
				{
				}
				bool flag3 = npc != null && npc.cy == this.cy && Res.abs(npc.cx - this.cx) < 24;
				if (flag3)
				{
					this.paintName = false;
				}
			}
		}
	}

	// Token: 0x060001F5 RID: 501 RVA: 0x00018598 File Offset: 0x00016798
	private void updateMobMe()
	{
		bool flag = this.tMobMeBorn != 0;
		if (flag)
		{
			this.tMobMeBorn--;
		}
		bool flag2 = this.tMobMeBorn == 0;
		if (flag2)
		{
			this.mobMe.xFirst = ((this.cdir != 1) ? (this.cx + 30) : (this.cx - 30));
			this.mobMe.yFirst = this.cy - 60;
			int num = this.mobMe.xFirst - this.mobMe.x;
			int num2 = this.mobMe.yFirst - this.mobMe.y;
			this.mobMe.x += num / 4;
			this.mobMe.y += num2 / 4;
			this.mobMe.dir = this.cdir;
		}
	}

	// Token: 0x060001F6 RID: 502 RVA: 0x0001867C File Offset: 0x0001687C
	private void updateSkillPaint()
	{
		bool flag = this.statusMe == 14 || this.statusMe == 5;
		if (!flag)
		{
			bool flag2 = this.skillPaint != null && ((this.charFocus != null && this.isMeCanAttackOtherPlayer(this.charFocus) && this.charFocus.statusMe == 14) || (this.mobFocus != null && this.mobFocus.status == 0));
			if (flag2)
			{
				bool flag3 = !this.me;
				if (flag3)
				{
					bool flag4 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) == 2;
					if (flag4)
					{
						this.statusMe = 1;
					}
					else
					{
						this.statusMe = 6;
					}
					this.cp3 = 0;
				}
				this.indexSkill = 0;
				this.skillPaint = null;
				this.skillPaintRandomPaint = null;
				this.eff0 = (this.eff1 = (this.eff2 = null));
				this.i0 = (this.i1 = (this.i2 = 0));
				this.mobFocus = null;
				this.charFocus = null;
				this.effPaints = null;
				this.currentMovePoint = null;
				this.arr = null;
				bool flag5 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) != 2;
				if (flag5)
				{
					this.delayFall = 5;
				}
			}
			bool flag6 = this.skillPaint != null && this.arr == null && this.skillInfoPaint() != null && this.indexSkill >= this.skillInfoPaint().Length;
			if (flag6)
			{
				bool flag7 = !this.me;
				if (flag7)
				{
					bool flag8 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) == 2;
					if (flag8)
					{
						this.statusMe = 1;
					}
					else
					{
						this.statusMe = 6;
					}
					this.cp3 = 0;
				}
				this.indexSkill = 0;
				Res.outz("remove 2");
				this.skillPaint = null;
				this.skillPaintRandomPaint = null;
				this.eff0 = (this.eff1 = (this.eff2 = null));
				this.i0 = (this.i1 = (this.i2 = 0));
				this.arr = null;
				bool flag9 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) != 2;
				if (flag9)
				{
					this.delayFall = 5;
				}
			}
			SkillInfoPaint[] array = this.skillInfoPaint();
			bool flag10 = array == null || this.indexSkill < 0 || this.indexSkill > array.Length - 1;
			if (!flag10)
			{
				bool flag11 = array[this.indexSkill].effS0Id != 0;
				if (flag11)
				{
					this.eff0 = GameScr.efs[array[this.indexSkill].effS0Id - 1];
					this.i0 = (this.dx0 = (this.dy0 = 0));
				}
				bool flag12 = array[this.indexSkill].effS1Id != 0;
				if (flag12)
				{
					this.eff1 = GameScr.efs[array[this.indexSkill].effS1Id - 1];
					this.i1 = (this.dx1 = (this.dy1 = 0));
				}
				bool flag13 = array[this.indexSkill].effS2Id != 0;
				if (flag13)
				{
					this.eff2 = GameScr.efs[array[this.indexSkill].effS2Id - 1];
					this.i2 = (this.dx2 = (this.dy2 = 0));
				}
				SkillInfoPaint[] array2 = array;
				int num = this.indexSkill;
				bool flag14 = array2 != null && array2[num] != null && num >= 0 && num <= array2.Length - 1 && array2[num].arrowId != 0;
				if (flag14)
				{
					int arrowId = array2[num].arrowId;
					bool flag15 = arrowId >= 100;
					if (flag15)
					{
						bool flag16 = this.mobFocus == null;
						object obj;
						if (flag16)
						{
							IMapObject mapObject = this.charFocus;
							obj = mapObject;
						}
						else
						{
							obj = this.mobFocus;
						}
						IMapObject mapObject2 = (IMapObject)obj;
						bool flag17 = mapObject2 != null;
						if (flag17)
						{
							int num2 = Res.abs(mapObject2.getX() - this.cx);
							int num3 = Res.abs(mapObject2.getY() - this.cy);
							bool flag18 = num2 > 4 * num3;
							int num4;
							if (flag18)
							{
								num4 = 0;
							}
							else
							{
								num4 = ((mapObject2.getY() >= this.cy) ? 3 : -3);
								bool flag19 = mapObject2 is BigBoss;
								if (flag19)
								{
									BigBoss bigBoss = (BigBoss)mapObject2;
									bool haftBody = bigBoss.haftBody;
									if (haftBody)
									{
										num4 = -20;
									}
								}
							}
							this.dart = new PlayerDart(this, arrowId - 100, this.skillPaintRandomPaint, this.cx + (array2[num].adx - 10) * this.cdir, this.cy + array2[num].ady + num4);
							bool flag20 = this.myskill != null;
							if (flag20)
							{
								bool flag21 = this.myskill.template.id == 1;
								if (flag21)
								{
									SoundMn.gI().traidatKame();
								}
								else
								{
									bool flag22 = this.myskill.template.id == 3;
									if (flag22)
									{
										SoundMn.gI().namekKame();
									}
									else
									{
										bool flag23 = this.myskill.template.id == 5;
										if (flag23)
										{
											SoundMn.gI().xaydaKame();
										}
										else
										{
											bool flag24 = this.myskill.template.id == 11;
											if (flag24)
											{
												SoundMn.gI().nameLazer();
											}
										}
									}
								}
							}
						}
						else
						{
							bool flag25 = this.isFlyAndCharge || this.isUseSkillAfterCharge;
							if (flag25)
							{
								this.stopUseChargeSkill();
							}
						}
					}
					else
					{
						Res.outz("g");
						this.arr = new Arrow(this, GameScr.arrs[arrowId - 1]);
						this.arr.life = 10;
						this.arr.ax = this.cx + array2[num].adx;
						this.arr.ay = this.cy + array2[num].ady;
					}
				}
				bool flag26 = (this.mobFocus != null || (!this.me && this.charFocus != null) || (this.me && this.charFocus != null && (this.isMeCanAttackOtherPlayer(this.charFocus) || this.isSelectingSkillBuffToPlayer()) && this.arr == null && this.dart == null)) && this.indexSkill == array.Length - 1;
				if (flag26)
				{
					this.setAttack();
					bool flag27 = this.me && this.myskill.template.isAttackSkill();
					if (flag27)
					{
						this.saveLoadPreviousSkill();
					}
				}
				bool flag28 = this.me;
				if (!flag28)
				{
					IMapObject mapObject3 = null;
					bool flag29 = this.mobFocus != null;
					if (flag29)
					{
						mapObject3 = this.mobFocus;
					}
					else
					{
						bool flag30 = this.charFocus != null;
						if (flag30)
						{
							mapObject3 = this.charFocus;
						}
					}
					bool flag31 = mapObject3 == null;
					if (!flag31)
					{
						bool flag32 = Res.abs(mapObject3.getX() - this.cx) < 10;
						if (flag32)
						{
							bool flag33 = mapObject3.getX() > this.cx;
							if (flag33)
							{
								this.cx -= 10;
							}
							else
							{
								this.cx += 10;
							}
						}
						bool flag34 = mapObject3.getX() > this.cx;
						if (flag34)
						{
							this.cdir = 1;
						}
						else
						{
							this.cdir = -1;
						}
					}
				}
			}
		}
	}

	// Token: 0x060001F7 RID: 503 RVA: 0x00018E11 File Offset: 0x00017011
	public void saveLoadPreviousSkill()
	{
	}

	// Token: 0x060001F8 RID: 504 RVA: 0x00018E14 File Offset: 0x00017014
	public void setResetPoint(int x, int y)
	{
		InfoDlg.hide();
		this.currentMovePoint = null;
		int num = this.cx - x;
		bool flag = this.cy - y == 0;
		if (flag)
		{
			this.cx = x;
			global::Char.ischangingMap = false;
			global::Char.isLockKey = false;
		}
		else
		{
			this.statusMe = 16;
			this.cp2 = x;
			this.cp3 = y;
			this.cp1 = 0;
			global::Char.myCharz().cxSend = x;
			global::Char.myCharz().cySend = y;
		}
	}

	// Token: 0x060001F9 RID: 505 RVA: 0x00018E90 File Offset: 0x00017090
	private void updateCharDeadFly()
	{
		this.isFreez = false;
		bool flag = this.isCharge;
		if (flag)
		{
			this.isCharge = false;
			SoundMn.gI().taitaoPause();
			Service.gI().skill_not_focus(3);
		}
		this.cp1++;
		this.cx += (this.cp2 - this.cx) / 4;
		bool flag2 = this.cp1 > 7;
		if (flag2)
		{
			this.cy += (this.cp3 - this.cy) / 4;
		}
		else
		{
			this.cy += this.cp1 - 10;
		}
		bool flag3 = Res.abs(this.cp2 - this.cx) < 4 && Res.abs(this.cp3 - this.cy) < 10;
		if (flag3)
		{
			this.cx = this.cp2;
			this.cy = this.cp3;
			this.statusMe = 14;
			bool flag4 = this.me;
			if (flag4)
			{
				GameScr.gI().resetButton();
				Service.gI().charMove();
			}
		}
		this.cf = 23;
	}

	// Token: 0x060001FA RID: 506 RVA: 0x00018FBC File Offset: 0x000171BC
	private void updateResetPoint()
	{
		InfoDlg.hide();
		GameCanvas.clearAllPointerEvent();
		this.currentMovePoint = null;
		this.cp1++;
		this.cx += (this.cp2 - this.cx) / 4;
		bool flag = this.cp1 > 7;
		if (flag)
		{
			this.cy += (this.cp3 - this.cy) / 4;
		}
		else
		{
			this.cy += this.cp1 - 10;
		}
		bool flag2 = Res.abs(this.cp2 - this.cx) < 4 && Res.abs(this.cp3 - this.cy) < 10;
		if (flag2)
		{
			this.cx = this.cp2;
			this.cy = this.cp3;
			this.statusMe = 1;
			this.cp3 = 0;
			global::Char.ischangingMap = false;
			Service.gI().charMove();
		}
		this.cf = 23;
	}

	// Token: 0x060001FB RID: 507 RVA: 0x000190BF File Offset: 0x000172BF
	public void updateSkillFall()
	{
	}

	// Token: 0x060001FC RID: 508 RVA: 0x000190C4 File Offset: 0x000172C4
	public void updateSkillStand()
	{
		this.ty = 0;
		this.cp1++;
		bool flag = this.cdir == 1;
		if (flag)
		{
			bool flag2 = (TileMap.tileTypeAtPixel(this.cx + this.chw, this.cy - this.chh) & 4) == 4;
			if (flag2)
			{
				this.cvx = 0;
			}
		}
		else
		{
			bool flag3 = (TileMap.tileTypeAtPixel(this.cx - this.chw, this.cy - this.chh) & 8) == 8;
			if (flag3)
			{
				this.cvx = 0;
			}
		}
		bool flag4 = this.cy > this.ch && TileMap.tileTypeAt(this.cx, this.cy - this.ch + 24, 8192);
		if (flag4)
		{
			bool flag5 = !TileMap.tileTypeAt(this.cx, this.cy, 2);
			if (flag5)
			{
				this.statusMe = 4;
				this.cp1 = 0;
				this.cp2 = 0;
				this.cvy = 1;
			}
			else
			{
				this.cy = TileMap.tileYofPixel(this.cy);
			}
		}
		this.cx += this.cvx;
		this.cy += this.cvy;
		bool flag6 = this.cy < 0;
		if (flag6)
		{
			this.cy = (this.cvy = 0);
		}
		bool flag7 = this.cvy == 0;
		if (flag7)
		{
			bool flag8 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) != 2;
			if (flag8)
			{
				this.statusMe = 4;
				this.cvx = (this.cspeed >> 1) * this.cdir;
				this.cp1 = (this.cp2 = 0);
			}
		}
		else
		{
			bool flag9 = this.cvy < 0;
			if (flag9)
			{
				this.cvy++;
				bool flag10 = this.cvy == 0;
				if (flag10)
				{
					this.cvy = 1;
				}
			}
			else
			{
				bool flag11 = this.cvy < 20 && this.cp1 % 5 == 0;
				if (flag11)
				{
					this.cvy++;
				}
				bool flag12 = this.cvy > 3;
				if (flag12)
				{
					this.cvy = 3;
				}
				bool flag13 = (TileMap.tileTypeAtPixel(this.cx, this.cy + 3) & 2) == 2 && this.cy <= TileMap.tileXofPixel(this.cy + 3);
				if (flag13)
				{
					this.cvx = (this.cvy = 0);
					this.cy = TileMap.tileXofPixel(this.cy + 3);
				}
			}
		}
		bool flag14 = this.cvx > 0;
		if (flag14)
		{
			this.cvx--;
		}
		else
		{
			bool flag15 = this.cvx < 0;
			if (flag15)
			{
				this.cvx++;
			}
		}
	}

	// Token: 0x060001FD RID: 509 RVA: 0x000193B4 File Offset: 0x000175B4
	public void updateCharAutoJump()
	{
		this.isFreez = false;
		bool flag = this.isCharge;
		if (flag)
		{
			this.isCharge = false;
			SoundMn.gI().taitaoPause();
			Service.gI().skill_not_focus(3);
		}
		this.cx += this.cvx * this.cdir;
		this.cy += this.cvyJump;
		this.cvyJump++;
		bool flag2 = this.cp1 == 0;
		if (flag2)
		{
			this.cf = 7;
		}
		else
		{
			this.cf = 23;
		}
		bool flag3 = this.cvyJump == -3;
		if (flag3)
		{
			this.cf = 8;
		}
		else
		{
			bool flag4 = this.cvyJump == -2;
			if (flag4)
			{
				this.cf = 9;
			}
			else
			{
				bool flag5 = this.cvyJump == -1;
				if (flag5)
				{
					this.cf = 10;
				}
				else
				{
					bool flag6 = this.cvyJump == 0;
					if (flag6)
					{
						this.cf = 11;
					}
				}
			}
		}
		bool flag7 = this.cvyJump == 0;
		if (flag7)
		{
			this.statusMe = 6;
			this.cp3 = 0;
			((MovePoint)this.vMovePoints.firstElement()).status = 4;
			this.isJump = true;
			this.cp1 = 0;
			this.cvy = 1;
		}
	}

	// Token: 0x060001FE RID: 510 RVA: 0x00019504 File Offset: 0x00017704
	public int getVx(int size, int dx, int dy)
	{
		bool flag = dy > 0 && !TileMap.tileTypeAt(this.cx, this.cy, 2);
		if (flag)
		{
			bool flag2 = dx - dy <= 10;
			if (flag2)
			{
				return 5;
			}
			bool flag3 = dx - dy <= 30;
			if (flag3)
			{
				return 6;
			}
			bool flag4 = dx - dy <= 50;
			if (flag4)
			{
				return 7;
			}
			bool flag5 = dx - dy <= 70;
			if (flag5)
			{
				return 8;
			}
		}
		bool flag6 = dx <= 30;
		int result;
		if (flag6)
		{
			result = 4;
		}
		else
		{
			bool flag7 = dx <= 160;
			if (flag7)
			{
				result = 5;
			}
			else
			{
				bool flag8 = dx <= 270;
				if (flag8)
				{
					result = 6;
				}
				else
				{
					bool flag9 = dx <= 320;
					if (flag9)
					{
						result = 7;
					}
					else
					{
						result = 8;
					}
				}
			}
		}
		return result;
	}

	// Token: 0x060001FF RID: 511 RVA: 0x000195E4 File Offset: 0x000177E4
	public void hide()
	{
		this.isHide = true;
		EffecMn.addEff(new Effect(107, this.cx, this.cy + 25, 3, 15, 1));
	}

	// Token: 0x06000200 RID: 512 RVA: 0x0001960E File Offset: 0x0001780E
	public void show()
	{
		this.isHide = false;
		EffecMn.addEff(new Effect(107, this.cx, this.cy + 25, 3, 10, 1));
	}

	// Token: 0x06000201 RID: 513 RVA: 0x00019638 File Offset: 0x00017838
	public int getVy(int size, int dx, int dy)
	{
		bool flag = dy <= 10;
		int result;
		if (flag)
		{
			result = 5;
		}
		else
		{
			bool flag2 = dy <= 20;
			if (flag2)
			{
				result = 6;
			}
			else
			{
				bool flag3 = dy <= 30;
				if (flag3)
				{
					result = 7;
				}
				else
				{
					bool flag4 = dy <= 40;
					if (flag4)
					{
						result = 8;
					}
					else
					{
						bool flag5 = dy <= 50;
						if (flag5)
						{
							result = 9;
						}
						else
						{
							result = 10;
						}
					}
				}
			}
		}
		return result;
	}

	// Token: 0x06000202 RID: 514 RVA: 0x000196A8 File Offset: 0x000178A8
	public int returnAct(int xFirst, int yFirst, int xEnd, int yEnd)
	{
		int num = xEnd - xFirst;
		int num2 = yEnd - yFirst;
		bool flag = num == 0 && num2 == 0;
		int result;
		if (flag)
		{
			result = 1;
		}
		else
		{
			bool flag2 = num2 == 0 && yFirst % 24 == 0 && TileMap.tileTypeAt(xFirst, yFirst, 2);
			if (flag2)
			{
				result = 2;
			}
			else
			{
				bool flag3 = num2 > 0 && (yFirst % 24 != 0 || !TileMap.tileTypeAt(xFirst, yFirst, 2));
				if (flag3)
				{
					result = 4;
				}
				else
				{
					this.cvy = -10;
					this.cp1 = 0;
					this.cdir = ((num > 0) ? 1 : -1);
					bool flag4 = num <= 5;
					if (flag4)
					{
						this.cvx = 0;
					}
					else
					{
						bool flag5 = num <= 10;
						if (flag5)
						{
							this.cvx = 3;
						}
						else
						{
							this.cvx = 5;
						}
					}
					result = 9;
				}
			}
		}
		return result;
	}

	// Token: 0x06000203 RID: 515 RVA: 0x0001977C File Offset: 0x0001797C
	public void setAutoJump()
	{
		int num = ((MovePoint)this.vMovePoints.firstElement()).xEnd - this.cx;
		this.cvyJump = -10;
		this.cp1 = 0;
		this.cdir = ((num > 0) ? 1 : -1);
		bool flag = num <= 6;
		if (flag)
		{
			this.cvx = 0;
		}
		else
		{
			bool flag2 = num <= 20;
			if (flag2)
			{
				this.cvx = 3;
			}
			else
			{
				this.cvx = 5;
			}
		}
	}

	// Token: 0x06000204 RID: 516 RVA: 0x000197FC File Offset: 0x000179FC
	public void updateCharStand()
	{
		this.isSoundJump = false;
		this.isAttack = false;
		this.isAttFly = false;
		this.cvx = 0;
		this.cvy = 0;
		this.cp1++;
		bool flag = this.cp1 > 30;
		if (flag)
		{
			this.cp1 = 0;
		}
		bool flag2 = this.cp1 % 15 < 5;
		if (flag2)
		{
			this.cf = 0;
		}
		else
		{
			this.cf = 1;
		}
		this.updateCharInBridge();
		bool flag3 = !this.me;
		if (flag3)
		{
			this.cp3++;
			bool flag4 = this.cp3 > 50;
			if (flag4)
			{
				this.cp3 = 0;
				this.currentMovePoint = null;
			}
		}
		this.updateSuperEff();
		bool flag5 = !this.me || GameScr.vCharInMap.size() == 0 || TileMap.mapID != 50;
		if (!flag5)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(0);
			bool flag6 = !@char.changePos;
			if (flag6)
			{
				bool flag7 = @char.statusMe != 2;
				if (flag7)
				{
					@char.moveTo(this.cx - 45, this.cy, 0);
				}
				@char.lastUpdateTime = mSystem.currentTimeMillis();
				bool flag8 = Res.abs(this.cx - 45 - @char.cx) <= 10;
				if (flag8)
				{
					@char.changePos = true;
				}
			}
			else
			{
				bool flag9 = @char.statusMe != 2;
				if (flag9)
				{
					@char.moveTo(this.cx + 45, this.cy, 0);
				}
				@char.lastUpdateTime = mSystem.currentTimeMillis();
				bool flag10 = Res.abs(this.cx + 45 - @char.cx) <= 10;
				if (flag10)
				{
					@char.changePos = false;
				}
			}
			bool flag11 = GameCanvas.gameTick % 100 == 0;
			if (flag11)
			{
				@char.addInfo("Cắc cùm cum");
			}
		}
	}

	// Token: 0x06000205 RID: 517 RVA: 0x000199F8 File Offset: 0x00017BF8
	public void updateSuperEff()
	{
		bool flag = this.isCopy || this.isFusion || this.isSetPos || this.isPet || this.isMiniPet || this.isMonkey == 1;
		if (!flag)
		{
			bool flag2 = this.me;
			if (flag2)
			{
				bool flag3 = !global::Char.isPaintAura2 && this.idAuraEff > -1;
				if (flag3)
				{
					return;
				}
			}
			else
			{
				bool flag4 = this.idAuraEff > -1;
				if (flag4)
				{
					return;
				}
			}
			this.ty++;
			bool flag5 = this.clevel >= 14;
			if (!flag5)
			{
				bool flag6 = this.clevel >= 9 && !GameCanvas.lowGraphic && (this.ty == 40 || this.ty == 50);
				if (flag6)
				{
					GameCanvas.gI().startDust(-1, this.cx - -8, this.cy);
					GameCanvas.gI().startDust(1, this.cx - 8, this.cy);
					this.addDustEff(1);
				}
				bool flag7 = this.ty <= 50 || this.clevel < 9;
				if (!flag7)
				{
					bool flag8 = this.cgender == 0;
					if (flag8)
					{
						bool flag9 = this.clevel >= 13;
						if (flag9)
						{
							bool flag10 = GameCanvas.gameTick % 25 == 0;
							if (flag10)
							{
								int id = 114;
								ServerEffect.addServerEffect(id, this, 1);
							}
							bool flag11 = GameCanvas.gameTick % 4 == 0;
							if (flag11)
							{
								int id = 132;
								ServerEffect.addServerEffect(id, this, 1);
							}
						}
						else
						{
							bool flag12 = GameCanvas.gameTick % 25 == 0;
							if (flag12)
							{
								int id = 173 + (this.clevel - 10);
								ServerEffect.addServerEffect(id, this, 1);
							}
						}
					}
					bool flag13 = this.cgender == 1;
					if (flag13)
					{
						bool flag14 = GameCanvas.gameTick % 4 == 0;
						if (flag14)
						{
							int id = 132;
							ServerEffect.addServerEffect(id, this, 1);
						}
						bool flag15 = this.clevel >= 13 && GameCanvas.gameTick % 7 == 0;
						if (flag15)
						{
							int id = 131;
							ServerEffect.addServerEffect(id, this, 1);
						}
					}
					bool flag16 = this.cgender == 2;
					if (flag16)
					{
						bool flag17 = GameCanvas.gameTick % 7 == 0;
						if (flag17)
						{
							int id = 131;
							ServerEffect.addServerEffect(id, this, 1);
						}
						bool flag18 = this.clevel >= 13 && GameCanvas.gameTick % 25 == 0;
						if (flag18)
						{
							int id = 114;
							ServerEffect.addServerEffect(id, this, 1);
						}
					}
				}
			}
		}
	}

	// Token: 0x06000206 RID: 518 RVA: 0x00019C98 File Offset: 0x00017E98
	public float getSoundVolumn()
	{
		bool flag = this.me;
		float result;
		if (flag)
		{
			result = 0.1f;
		}
		else
		{
			int num = Res.abs(global::Char.myChar.cx - this.cx);
			bool flag2 = num >= 0 && num <= 50;
			if (flag2)
			{
				result = 0.1f;
			}
			else
			{
				result = 0.05f;
			}
		}
		return result;
	}

	// Token: 0x06000207 RID: 519 RVA: 0x00019CF8 File Offset: 0x00017EF8
	public void updateCharRun()
	{
		int num = (this.isMonkey != 1 || this.me) ? 1 : 1;
		bool flag = this.cx >= GameScr.cmx && this.cx <= GameScr.cmx + GameCanvas.w;
		if (flag)
		{
			bool flag2 = this.isMonkey == 0;
			if (flag2)
			{
				SoundMn.gI().charRun(this.getSoundVolumn());
			}
			else
			{
				SoundMn.gI().monkeyRun(this.getSoundVolumn());
			}
		}
		this.ty = 0;
		this.isFreez = false;
		bool flag3 = this.isCharge;
		if (flag3)
		{
			this.isCharge = false;
			SoundMn.gI().taitaoPause();
			Service.gI().skill_not_focus(3);
		}
		int num2 = 0;
		bool flag4 = !this.me && this.currentMovePoint != null;
		if (flag4)
		{
			num2 = global::Char.abs(this.cx - this.currentMovePoint.xEnd);
		}
		this.cp1++;
		bool flag5 = this.cp1 >= 10;
		if (flag5)
		{
			this.cp1 = 0;
			this.cBonusSpeed = 0;
		}
		this.cf = (this.cp1 >> 1) + 2;
		bool flag6 = (TileMap.tileTypeAtPixel(this.cx, this.cy - 1) & 64) == 64;
		if (flag6)
		{
			this.cx += this.cvx * num >> 1;
		}
		else
		{
			this.cx += this.cvx * num;
		}
		bool flag7 = this.cdir == 1;
		if (flag7)
		{
			bool flag8 = TileMap.tileTypeAt(this.cx + this.chw, this.cy - this.chh, 4);
			if (flag8)
			{
				bool flag9 = this.me;
				if (flag9)
				{
					this.cvx = 0;
					this.cx = TileMap.tileXofPixel(this.cx + this.chw) - this.chw;
				}
				else
				{
					this.stop();
				}
			}
		}
		else
		{
			bool flag10 = TileMap.tileTypeAt(this.cx - this.chw - 1, this.cy - this.chh, 8);
			if (flag10)
			{
				bool flag11 = this.me;
				if (flag11)
				{
					this.cvx = 0;
					this.cx = TileMap.tileXofPixel(this.cx - this.chw - 1) + (int)TileMap.size + this.chw;
				}
				else
				{
					this.stop();
				}
			}
		}
		bool flag12 = this.me;
		if (flag12)
		{
			bool flag13 = this.cvx > 0;
			if (flag13)
			{
				this.cvx--;
			}
			else
			{
				bool flag14 = this.cvx < 0;
				if (flag14)
				{
					this.cvx++;
				}
				else
				{
					bool flag15 = this.cx - this.cxSend != 0 && this.me;
					if (flag15)
					{
						Service.gI().charMove();
					}
					this.statusMe = 1;
					this.cBonusSpeed = 0;
				}
			}
		}
		bool flag16 = (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) != 2;
		if (flag16)
		{
			bool flag17 = this.me;
			if (flag17)
			{
				bool flag18 = this.cx - this.cxSend != 0 || this.cy - this.cySend != 0;
				if (flag18)
				{
					Service.gI().charMove();
				}
				this.cf = 7;
				this.statusMe = 4;
				this.delayFall = 0;
				this.cvx = 3 * this.cdir;
				this.cp2 = 0;
			}
			else
			{
				this.stop();
			}
		}
		bool flag19 = !this.me && this.currentMovePoint != null;
		if (flag19)
		{
			int num3 = global::Char.abs(this.cx - this.currentMovePoint.xEnd);
			bool flag20 = num3 > num2;
			if (flag20)
			{
				this.stop();
			}
		}
		GameCanvas.gI().startDust(this.cdir, this.cx - (this.cdir << 3), this.cy);
		this.updateCharInBridge();
		this.addDustEff(2);
	}

	// Token: 0x06000208 RID: 520 RVA: 0x0001A110 File Offset: 0x00018310
	private void stop()
	{
		this.statusMe = 6;
		this.cp3 = 0;
		this.cvx = 0;
		this.cvy = 0;
		this.cp1 = (this.cp2 = 0);
	}

	// Token: 0x06000209 RID: 521 RVA: 0x0001A14C File Offset: 0x0001834C
	public static int abs(int i)
	{
		return (i <= 0) ? (-i) : i;
	}

	// Token: 0x0600020A RID: 522 RVA: 0x0001A168 File Offset: 0x00018368
	public void updateCharJump()
	{
		this.setMountIsStart();
		this.ty = 0;
		this.isFreez = false;
		bool flag = this.isCharge;
		if (flag)
		{
			this.isCharge = false;
			SoundMn.gI().taitaoPause();
			Service.gI().skill_not_focus(3);
		}
		this.addDustEff(3);
		this.cx += this.cvx;
		this.cy += this.cvy;
		bool flag2 = this.cy < 0;
		if (flag2)
		{
			this.cy = 0;
			this.cvy = -1;
		}
		this.cvy++;
		bool flag3 = this.cvy > 0;
		if (flag3)
		{
			this.cvy = 0;
		}
		bool flag4 = !this.me && this.currentMovePoint != null;
		if (flag4)
		{
			int num = this.currentMovePoint.xEnd - this.cx;
			bool flag5 = num > 0;
			if (flag5)
			{
				bool flag6 = this.cvx > num;
				if (flag6)
				{
					this.cvx = num;
				}
				bool flag7 = this.cvx < 0;
				if (flag7)
				{
					this.cvx = num;
				}
			}
			else
			{
				bool flag8 = num < 0;
				if (flag8)
				{
					bool flag9 = this.cvx < num;
					if (flag9)
					{
						this.cvx = num;
					}
					bool flag10 = this.cvx > 0;
					if (flag10)
					{
						this.cvx = num;
					}
				}
				else
				{
					this.cvx = num;
				}
			}
		}
		bool flag11 = this.cdir == 1;
		if (flag11)
		{
			bool flag12 = (TileMap.tileTypeAtPixel(this.cx + this.chw, this.cy - 1) & 4) == 4 && this.cx <= TileMap.tileXofPixel(this.cx + this.chw) + 12;
			if (flag12)
			{
				this.cx = TileMap.tileXofPixel(this.cx + this.chw) - this.chw;
				this.cvx = 0;
			}
		}
		else
		{
			bool flag13 = (TileMap.tileTypeAtPixel(this.cx - this.chw, this.cy - 1) & 8) == 8 && this.cx >= TileMap.tileXofPixel(this.cx - this.chw) + 12;
			if (flag13)
			{
				this.cx = TileMap.tileXofPixel(this.cx + 24 - this.chw) + this.chw;
				this.cvx = 0;
			}
		}
		bool flag14 = this.cvy == 0;
		if (flag14)
		{
			bool flag15 = !this.isAttFly;
			if (flag15)
			{
				bool flag16 = this.me;
				if (flag16)
				{
					this.setCharFallFromJump();
				}
				else
				{
					this.stop();
				}
			}
			else
			{
				this.setCharFallFromJump();
			}
		}
		bool flag17 = this.me && !global::Char.ischangingMap && this.isInWaypoint();
		if (flag17)
		{
			Service.gI().charMove();
			bool flag18 = TileMap.isTrainingMap();
			if (flag18)
			{
				global::Char.ischangingMap = true;
				Service.gI().getMapOffline();
			}
			else
			{
				Service.gI().requestChangeMap();
			}
			global::Char.isLockKey = true;
			global::Char.ischangingMap = true;
			GameCanvas.clearKeyHold();
			GameCanvas.clearKeyPressed();
			InfoDlg.showWait();
		}
		else
		{
			bool flag19 = this.statusMe != 16 && (TileMap.tileTypeAt(this.cx, this.cy - this.ch + 24, 8192) || this.cy < 0);
			if (flag19)
			{
				this.statusMe = 4;
				this.cp1 = 0;
				this.cp2 = 0;
				this.cvy = 1;
				this.delayFall = 0;
				bool flag20 = this.cy < 0;
				if (flag20)
				{
					this.cy = 0;
				}
				this.cy = TileMap.tileYofPixel(this.cy + 25);
				GameCanvas.clearKeyHold();
			}
			bool flag21 = this.cp3 < 0;
			if (flag21)
			{
				this.cp3++;
			}
			this.cf = 7;
			bool flag22 = !this.me && this.currentMovePoint != null && this.cy < this.currentMovePoint.yEnd;
			if (flag22)
			{
				this.stop();
			}
		}
	}

	// Token: 0x0600020B RID: 523 RVA: 0x0001A594 File Offset: 0x00018794
	public bool checkInRangeJump(int x1, int xw1, int xmob, int y1, int yh1, int ymob)
	{
		bool flag = xmob > xw1 || xmob < x1 || ymob > y1 || ymob < yh1;
		return !flag;
	}

	// Token: 0x0600020C RID: 524 RVA: 0x0001A5C8 File Offset: 0x000187C8
	public void setCharFallFromJump()
	{
		this.cyStartFall = this.cy;
		this.cp1 = 0;
		this.cp2 = 0;
		this.statusMe = 10;
		this.cvx = this.cdir << 2;
		this.cvy = 0;
		this.cy = TileMap.tileYofPixel(this.cy) + 12;
		bool flag = this.me && (this.cx - this.cxSend != 0 || this.cy - this.cySend != 0) && (Res.abs(global::Char.myCharz().cx - global::Char.myCharz().cxSend) > 96 || Res.abs(global::Char.myCharz().cy - global::Char.myCharz().cySend) > 24);
		if (flag)
		{
			Service.gI().charMove();
		}
	}

	// Token: 0x0600020D RID: 525 RVA: 0x0001A69C File Offset: 0x0001889C
	public void updateCharFall()
	{
		bool flag = this.holder;
		if (!flag)
		{
			this.ty = 0;
			bool flag2 = this.cy + 4 >= TileMap.pxh;
			if (flag2)
			{
				this.statusMe = 1;
				bool flag3 = this.me;
				if (flag3)
				{
					SoundMn.gI().charFall();
				}
				this.cvx = (this.cvy = 0);
				this.cp3 = 0;
			}
			else
			{
				bool flag4 = this.cy % 24 == 0 && (TileMap.tileTypeAtPixel(this.cx, this.cy) & 2) == 2;
				if (flag4)
				{
					this.delayFall = 0;
					bool flag5 = this.me;
					if (flag5)
					{
						bool flag6 = this.cy - this.cySend > 0;
						if (flag6)
						{
							Service.gI().charMove();
						}
						else
						{
							bool flag7 = this.cx - this.cxSend != 0 || this.cy - this.cySend < 0;
							if (flag7)
							{
								Service.gI().charMove();
							}
						}
						this.cvx = (this.cvy = 0);
						this.cp1 = (this.cp2 = 0);
						this.statusMe = 1;
						this.cp3 = 0;
						return;
					}
					this.stop();
					this.cf = 0;
					GameCanvas.gI().startDust(-1, this.cx - -8, this.cy);
					GameCanvas.gI().startDust(1, this.cx - 8, this.cy);
					this.addDustEff(1);
				}
				bool flag8 = this.delayFall > 0;
				if (flag8)
				{
					this.delayFall--;
					bool flag9 = this.delayFall % 10 > 5;
					if (flag9)
					{
						this.cy++;
					}
					else
					{
						this.cy--;
					}
				}
				else
				{
					bool flag10 = this.cvy < -4;
					if (flag10)
					{
						this.cf = 7;
					}
					else
					{
						this.cf = 12;
					}
					this.cx += this.cvx;
					bool flag11 = !this.me && this.currentMovePoint != null;
					if (flag11)
					{
						int num = this.currentMovePoint.xEnd - this.cx;
						bool flag12 = num > 0;
						if (flag12)
						{
							bool flag13 = this.cvx > num;
							if (flag13)
							{
								this.cvx = num;
							}
							bool flag14 = this.cvx < 0;
							if (flag14)
							{
								this.cvx = num;
							}
						}
						else
						{
							bool flag15 = num < 0;
							if (flag15)
							{
								bool flag16 = this.cvx < num;
								if (flag16)
								{
									this.cvx = num;
								}
								bool flag17 = this.cvx > 0;
								if (flag17)
								{
									this.cvx = num;
								}
							}
							else
							{
								this.cvx = num;
							}
						}
					}
					this.cvy++;
					bool flag18 = this.cvy > 8;
					if (flag18)
					{
						this.cvy = 8;
					}
					bool flag19 = this.skillPaintRandomPaint == null;
					if (flag19)
					{
						this.cy += this.cvy;
					}
					bool flag20 = this.cdir == 1;
					if (flag20)
					{
						bool flag21 = (TileMap.tileTypeAtPixel(this.cx + this.chw, this.cy - 1) & 4) == 4 && this.cx <= TileMap.tileXofPixel(this.cx + this.chw) + 12;
						if (flag21)
						{
							this.cx = TileMap.tileXofPixel(this.cx + this.chw) - this.chw;
							this.cvx = 0;
						}
					}
					else
					{
						bool flag22 = (TileMap.tileTypeAtPixel(this.cx - this.chw, this.cy - 1) & 8) == 8 && this.cx >= TileMap.tileXofPixel(this.cx - this.chw) + 12;
						if (flag22)
						{
							this.cx = TileMap.tileXofPixel(this.cx + 24 - this.chw) + this.chw;
							this.cvx = 0;
						}
					}
					bool flag23 = this.cvy > 3 && (this.cyStartFall == 0 || this.cyStartFall <= TileMap.tileYofPixel(this.cy + 3)) && (TileMap.tileTypeAtPixel(this.cx, this.cy + 3) & 2) == 2;
					if (flag23)
					{
						bool flag24 = this.me;
						if (flag24)
						{
							this.cyStartFall = 0;
							this.cvx = (this.cvy = 0);
							this.cp1 = (this.cp2 = 0);
							this.cy = TileMap.tileXofPixel(this.cy + 3);
							this.statusMe = 1;
							bool flag25 = this.me;
							if (flag25)
							{
								SoundMn.gI().charFall();
							}
							this.cp3 = 0;
							GameCanvas.gI().startDust(-1, this.cx - -8, this.cy);
							GameCanvas.gI().startDust(1, this.cx - 8, this.cy);
							this.addDustEff(1);
							bool flag26 = this.cy - this.cySend > 0;
							if (flag26)
							{
								bool flag27 = this.me;
								if (flag27)
								{
									Service.gI().charMove();
								}
							}
							else
							{
								bool flag28 = (this.cx - this.cxSend != 0 || this.cy - this.cySend < 0) && this.me;
								if (flag28)
								{
									Service.gI().charMove();
								}
							}
						}
						else
						{
							this.stop();
							this.cy = TileMap.tileXofPixel(this.cy + 3);
							this.cf = 0;
							GameCanvas.gI().startDust(-1, this.cx - -8, this.cy);
							GameCanvas.gI().startDust(1, this.cx - 8, this.cy);
							this.addDustEff(1);
							this.currentMovePoint = null;
						}
					}
					else
					{
						this.cf = 12;
						bool flag29 = this.me;
						if (flag29)
						{
							bool flag30 = !this.isAttack;
							if (flag30)
							{
							}
						}
						else
						{
							bool flag31 = (TileMap.tileTypeAtPixel(this.cx, this.cy + 1) & 2) == 2;
							if (flag31)
							{
								this.cf = 0;
							}
							bool flag32 = this.currentMovePoint != null && this.cy > this.currentMovePoint.yEnd;
							if (flag32)
							{
								this.stop();
								this.cy = TileMap.tileXofPixel(this.cy + 3);
								this.currentMovePoint = null;
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x0600020E RID: 526 RVA: 0x0001AD2C File Offset: 0x00018F2C
	public void updateCharFly()
	{
		int num = (this.isMonkey != 1 || this.me) ? 1 : 2;
		this.setMountIsStart();
		bool flag = this.statusMe != 16 && (TileMap.tileTypeAt(this.cx, this.cy - this.ch + 24, 8192) || this.cy < 0);
		if (flag)
		{
			bool flag2 = this.cy - this.ch < 0;
			if (flag2)
			{
				this.cy = this.ch;
			}
			this.cf = 7;
			this.statusMe = 4;
			this.cvx = 0;
			this.cp2 = 0;
			this.currentMovePoint = null;
		}
		else
		{
			int num2 = this.cy;
			bool flag3 = this.isHead_Fly(this.head);
			if (flag3)
			{
				bool flag4 = GameCanvas.gameTick % 3 == 0;
				if (flag4)
				{
					this.cp1++;
				}
				bool flag5 = this.cp1 > 4;
				if (flag5)
				{
					this.cp1 = 0;
				}
				this.cf = this.cp1 + 2;
			}
			else
			{
				this.cp1++;
				bool flag6 = this.cp1 >= 9;
				if (flag6)
				{
					this.cp1 = 0;
					bool flag7 = !this.me;
					if (flag7)
					{
						this.cvx = (this.cvy = 0);
					}
					this.cBonusSpeed = 0;
				}
				this.cf = 8;
				bool flag8 = Res.abs(this.cvx) <= 4 && this.me;
				if (flag8)
				{
					bool flag9 = this.currentMovePoint != null;
					if (flag9)
					{
						int num3 = global::Char.abs(this.cx - this.currentMovePoint.xEnd);
						int num4 = global::Char.abs(this.cy - this.currentMovePoint.yEnd);
						bool flag10 = num3 > num4 * 10;
						if (flag10)
						{
							this.cf = 8;
						}
						else
						{
							bool flag11 = num3 > num4 && num3 > 48 && num4 > 32;
							if (flag11)
							{
								this.cf = 8;
							}
							else
							{
								this.cf = 7;
							}
						}
					}
					else
					{
						bool flag12 = this.cvy < 0;
						if (flag12)
						{
							this.cvy = 0;
						}
						bool flag13 = this.cvy > 16;
						if (flag13)
						{
							this.cvy = 16;
						}
						this.cf = 7;
					}
				}
				bool flag14 = !this.me;
				if (flag14)
				{
					bool flag15 = global::Char.abs(this.cvx) < 2;
					if (flag15)
					{
						this.cvx = (this.cdir << 1) * num;
					}
					bool flag16 = this.cvy != 0;
					if (flag16)
					{
						this.cf = 7;
					}
					bool flag17 = global::Char.abs(this.cvx) <= 2;
					if (flag17)
					{
						this.cp2++;
						bool flag18 = this.cp2 > 32;
						if (flag18)
						{
							this.statusMe = 4;
							this.cvx = 0;
							this.cvy = 0;
						}
					}
				}
			}
			bool flag19 = this.cdir == 1;
			if (flag19)
			{
				bool flag20 = TileMap.tileTypeAt(this.cx + this.chw, this.cy - 1, 4);
				if (flag20)
				{
					this.cvx = 0;
					this.cx = TileMap.tileXofPixel(this.cx + this.chw) - this.chw;
					bool flag21 = this.cvy == 0;
					if (flag21)
					{
						this.currentMovePoint = null;
					}
				}
			}
			else
			{
				bool flag22 = TileMap.tileTypeAt(this.cx - this.chw - 1, this.cy - 1, 8);
				if (flag22)
				{
					this.cvx = 0;
					this.cx = TileMap.tileXofPixel(this.cx - this.chw - 1) + (int)TileMap.size + this.chw;
					bool flag23 = this.cvy == 0;
					if (flag23)
					{
						this.currentMovePoint = null;
					}
				}
			}
			this.cx += this.cvx * num;
			this.cy += this.cvy * num;
			bool flag24 = !this.isMount && num2 - this.cy == 0;
			if (flag24)
			{
				this.ty++;
				this.wt++;
				this.fy += ((!this.wy) ? 1 : -1);
				bool flag25 = this.wt == 10;
				if (flag25)
				{
					this.wt = 0;
					this.wy = !this.wy;
				}
				bool flag26 = this.ty > 20;
				if (flag26)
				{
					this.delayFall = 10;
					bool flag27 = GameCanvas.gameTick % 3 == 0;
					if (flag27)
					{
						ServerEffect.addServerEffect(111, this.cx + ((this.cdir != 1) ? 27 : -17), this.cy + this.fy + 13, 1, (this.cdir != 1) ? 2 : 0);
					}
				}
			}
			bool flag28 = !this.me;
			if (!flag28)
			{
				bool flag29 = this.cvx > 0;
				if (flag29)
				{
					this.cvx--;
				}
				else
				{
					bool flag30 = this.cvx < 0;
					if (flag30)
					{
						this.cvx++;
					}
					else
					{
						bool flag31 = this.cvy == 0;
						if (flag31)
						{
							this.statusMe = 4;
							this.checkDelayFallIfTooHigh();
							Service.gI().charMove();
						}
					}
				}
				bool flag32 = (TileMap.tileTypeAtPixel(this.cx, this.cy + 20) & 2) == 2 || (TileMap.tileTypeAtPixel(this.cx, this.cy + 40) & 2) == 2;
				if (flag32)
				{
					bool flag33 = this.cvy == 0;
					if (flag33)
					{
						this.delayFall = 0;
					}
					this.cyStartFall = 0;
					this.cvx = (this.cvy = 0);
					this.cp1 = (this.cp2 = 0);
					this.statusMe = 4;
					this.addDustEff(3);
				}
				bool flag34 = global::Char.abs(this.cx - this.cxSend) > 96 || global::Char.abs(this.cy - this.cySend) > 24;
				if (flag34)
				{
					Service.gI().charMove();
				}
			}
		}
	}

	// Token: 0x0600020F RID: 527 RVA: 0x0001B370 File Offset: 0x00019570
	private bool isHead_Fly(int head2)
	{
		bool flag = global::Char.Arr_Head_FlyMove.Length != 0;
		if (flag)
		{
			for (int i = 0; i < global::Char.Arr_Head_FlyMove.Length; i++)
			{
				bool flag2 = (int)global::Char.Arr_Head_FlyMove[i] == head2;
				if (flag2)
				{
					return true;
				}
			}
		}
		return false;
	}

	// Token: 0x06000210 RID: 528 RVA: 0x0001B3C0 File Offset: 0x000195C0
	public void setMount(int cid, int ctrans, int cgender)
	{
		this.idcharMount = cid;
		this.transMount = ctrans;
		this.genderMount = cgender;
		this.speedMount = 30;
		bool flag = this.transMount < 0;
		if (flag)
		{
			this.transMount = 0;
			this.xMount = GameScr.cmx + GameCanvas.w + 50;
			this.dxMount = -19;
		}
		else
		{
			bool flag2 = this.transMount == 1;
			if (flag2)
			{
				this.transMount = 2;
				this.xMount = GameScr.cmx - 100;
				this.dxMount = -33;
			}
		}
		this.dyMount = -17;
		this.yMount = this.cy;
		this.frameMount = 0;
		this.frameNewMount = 0;
		this.isMount = false;
		this.isEndMount = false;
	}

	// Token: 0x06000211 RID: 529 RVA: 0x0001B47C File Offset: 0x0001967C
	public void updateMount()
	{
		this.frameMount++;
		bool flag = this.frameMount > this.FrameMount.Length - 1;
		if (flag)
		{
			this.frameMount = 0;
		}
		this.frameNewMount++;
		bool flag2 = this.frameNewMount > 1000;
		if (flag2)
		{
			this.frameNewMount = 0;
		}
		bool flag3 = this.isStartMount && !this.isMount;
		if (flag3)
		{
			this.yMount = this.cy;
			bool flag4 = this.transMount == 0;
			if (flag4)
			{
				bool flag5 = this.xMount - this.cx >= this.speedMount;
				if (flag5)
				{
					this.xMount -= this.speedMount;
				}
				else
				{
					this.xMount = this.cx;
					this.isMount = true;
					this.isEndMount = false;
				}
			}
			else
			{
				bool flag6 = this.transMount == 2;
				if (flag6)
				{
					bool flag7 = this.cx - this.xMount >= this.speedMount;
					if (flag7)
					{
						this.xMount += this.speedMount;
					}
					else
					{
						this.xMount = this.cx;
						this.isMount = true;
						this.isEndMount = false;
					}
				}
			}
		}
		else
		{
			bool flag8 = this.isMount;
			if (flag8)
			{
				bool flag9 = this.statusMe == 14 || this.ySd - this.cy < 24;
				if (flag9)
				{
					this.setMountIsEnd();
				}
				bool flag10 = this.cp1 % 15 < 5;
				if (flag10)
				{
					this.cf = 0;
				}
				else
				{
					this.cf = 1;
				}
				this.transMount = this.cdir;
				this.updateSuperEff();
				bool flag11 = this.transMount < 0;
				if (flag11)
				{
					this.transMount = 0;
					this.dxMount = -19;
				}
				else
				{
					bool flag12 = this.transMount == 1;
					if (flag12)
					{
						this.transMount = 2;
						this.dxMount = -31;
						bool flag13 = this.isEventMount;
						if (flag13)
						{
							this.dxMount = -38;
						}
					}
				}
				bool flag14 = this.skillInfoPaint() != null;
				if (flag14)
				{
					this.dyMount = -15;
				}
				else
				{
					this.dyMount = -17;
				}
				this.yMount = this.cy;
				this.xMount = this.cx;
			}
			else
			{
				bool flag15 = this.isEndMount;
				if (flag15)
				{
					bool flag16 = this.transMount == 0;
					if (flag16)
					{
						bool flag17 = this.xMount > GameScr.cmx - 100;
						if (flag17)
						{
							this.xMount -= 20;
						}
						else
						{
							this.isStartMount = false;
							this.isMount = false;
							this.isEndMount = false;
						}
					}
					else
					{
						bool flag18 = this.transMount == 2;
						if (flag18)
						{
							bool flag19 = this.xMount < GameScr.cmx + GameCanvas.w + 50;
							if (flag19)
							{
								this.xMount += 20;
							}
							else
							{
								this.isStartMount = false;
								this.isMount = false;
								this.isEndMount = false;
							}
						}
					}
				}
				else
				{
					bool flag20 = !this.isStartMount || !this.isMount || !this.isEndMount;
					if (flag20)
					{
						this.xMount = GameScr.cmx - 100;
						this.yMount = GameScr.cmy - 100;
					}
				}
			}
		}
	}

	// Token: 0x06000212 RID: 530 RVA: 0x0001B7DC File Offset: 0x000199DC
	public void getMountData()
	{
		bool flag = Mob.arrMobTemplate[50].data == null;
		if (flag)
		{
			Mob.arrMobTemplate[50].data = new EffectData();
			string text = "/Mob/" + 50.ToString();
			DataInputStream dataInputStream = MyStream.readFile(text);
			bool flag2 = dataInputStream != null;
			if (flag2)
			{
				Mob.arrMobTemplate[50].data.readData(text + "/data");
				Mob.arrMobTemplate[50].data.img = GameCanvas.loadImage(text + "/img.png");
			}
			else
			{
				Service.gI().requestModTemplate(50);
			}
			Mob.lastMob.addElement(50.ToString() + string.Empty);
		}
	}

	// Token: 0x06000213 RID: 531 RVA: 0x0001B8B0 File Offset: 0x00019AB0
	public void checkFrameTick(int[] array)
	{
		this.t++;
		bool flag = this.t > array.Length - 1;
		if (flag)
		{
			this.t = 0;
		}
		this.fM = array[this.t];
	}

	// Token: 0x06000214 RID: 532 RVA: 0x0001B8F4 File Offset: 0x00019AF4
	public void paintMount1(mGraphics g)
	{
		bool flag = this.xMount <= GameScr.cmx || this.xMount >= GameScr.cmx + GameCanvas.w;
		if (!flag)
		{
			bool flag2 = this.me;
			if (flag2)
			{
				bool flag3 = !this.isEndMount && !this.isStartMount && !this.isMount;
				if (!flag3)
				{
					bool flag4 = this.idMount >= global::Char.ID_NEW_MOUNT;
					if (flag4)
					{
						string nameImg = this.strMount + ((int)(this.idMount - global::Char.ID_NEW_MOUNT)).ToString() + "_0";
						FrameImage fraImage = mSystem.getFraImage(nameImg);
						if (fraImage != null)
						{
							fraImage.drawFrame(this.frameNewMount / 2 % fraImage.nFrame, this.xMount, this.yMount + this.fy, this.transMount, 3, g);
						}
					}
					else
					{
						bool flag5 = this.isSpeacialMount;
						if (!flag5)
						{
							bool flag6 = this.isEventMount;
							if (flag6)
							{
								g.drawRegion(global::Char.imgEventMountWing, 0, (int)(this.FrameMount[this.frameMount] * 60), 60, 60, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
							}
							else
							{
								bool flag7 = this.genderMount == 2;
								if (flag7)
								{
									bool flag8 = !this.isMountVip;
									if (flag8)
									{
										g.drawRegion(global::Char.imgMount_XD, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
									}
									else
									{
										g.drawRegion(global::Char.imgMount_XD_VIP, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
									}
								}
								else
								{
									bool flag9 = this.genderMount == 1;
									if (flag9)
									{
										bool flag10 = !this.isMountVip;
										if (flag10)
										{
											g.drawRegion(global::Char.imgMount_NM, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
										}
										else
										{
											g.drawRegion(global::Char.imgMount_NM_VIP, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				bool flag11 = this.me;
				if (!flag11)
				{
					bool flag12 = this.idMount >= global::Char.ID_NEW_MOUNT;
					if (flag12)
					{
						string nameImg2 = this.strMount + ((int)(this.idMount - global::Char.ID_NEW_MOUNT)).ToString() + "_0";
						FrameImage fraImage2 = mSystem.getFraImage(nameImg2);
						if (fraImage2 != null)
						{
							fraImage2.drawFrame(this.frameNewMount / 2 % fraImage2.nFrame, this.xMount, this.yMount + this.fy, this.transMount, 3, g);
						}
					}
					else
					{
						bool flag13 = this.isSpeacialMount;
						if (!flag13)
						{
							bool flag14 = this.isEventMount;
							if (flag14)
							{
								g.drawRegion(global::Char.imgEventMountWing, 0, (int)(this.FrameMount[this.frameMount] * 60), 60, 60, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
							}
							else
							{
								bool flag15 = !this.isMount;
								if (!flag15)
								{
									bool flag16 = this.genderMount == 2;
									if (flag16)
									{
										bool flag17 = !this.isMountVip;
										if (flag17)
										{
											g.drawRegion(global::Char.imgMount_XD, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
										}
										else
										{
											g.drawRegion(global::Char.imgMount_XD_VIP, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
										}
									}
									else
									{
										bool flag18 = this.genderMount == 1;
										if (flag18)
										{
											bool flag19 = !this.isMountVip;
											if (flag19)
											{
												g.drawRegion(global::Char.imgMount_NM, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
											}
											else
											{
												g.drawRegion(global::Char.imgMount_NM_VIP, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x06000215 RID: 533 RVA: 0x0001BE78 File Offset: 0x0001A078
	public void paintMount2(mGraphics g)
	{
		bool flag = this.xMount <= GameScr.cmx || this.xMount >= GameScr.cmx + GameCanvas.w;
		if (!flag)
		{
			bool flag2 = this.me;
			if (flag2)
			{
				bool flag3 = !this.isEndMount && !this.isStartMount && !this.isMount;
				if (!flag3)
				{
					bool flag4 = this.idMount >= global::Char.ID_NEW_MOUNT;
					if (flag4)
					{
						string nameImg = this.strMount + ((int)(this.idMount - global::Char.ID_NEW_MOUNT)).ToString() + "_1";
						FrameImage fraImage = mSystem.getFraImage(nameImg);
						if (fraImage != null)
						{
							fraImage.drawFrame(this.frameNewMount / 2 % fraImage.nFrame, this.xMount, this.yMount + this.fy, this.transMount, 3, g);
						}
					}
					else
					{
						bool flag5 = this.isSpeacialMount;
						if (flag5)
						{
							this.checkFrameTick(this.move);
							bool flag6 = Mob.arrMobTemplate[50] != null && Mob.arrMobTemplate[50].data != null;
							if (flag6)
							{
								Mob.arrMobTemplate[50].data.paintFrame(g, this.fM, this.xMount + ((this.cdir != 1) ? 8 : -8), this.yMount + 35, (this.cdir != 1) ? 1 : 0, 0);
							}
							else
							{
								this.getMountData();
							}
						}
						else
						{
							bool flag7 = this.isEventMount;
							if (flag7)
							{
								g.drawRegion(global::Char.imgEventMount, 0, (int)(this.FrameMount[this.frameMount] * 60), 60, 60, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
							}
							else
							{
								bool flag8 = this.genderMount == 0;
								if (flag8)
								{
									bool flag9 = !this.isMountVip;
									if (flag9)
									{
										g.drawRegion(global::Char.imgMount_TD, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
									}
									else
									{
										g.drawRegion(global::Char.imgMount_TD_VIP, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
									}
								}
								else
								{
									bool flag10 = this.genderMount == 1;
									if (flag10)
									{
										bool flag11 = !this.isMountVip;
										if (flag11)
										{
											g.drawRegion(global::Char.imgMount_NM_1, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
										}
										else
										{
											g.drawRegion(global::Char.imgMount_NM_1_VIP, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				bool flag12 = this.me;
				if (!flag12)
				{
					bool flag13 = this.idMount >= global::Char.ID_NEW_MOUNT;
					if (flag13)
					{
						string nameImg2 = this.strMount + ((int)(this.idMount - global::Char.ID_NEW_MOUNT)).ToString() + "_1";
						FrameImage fraImage2 = mSystem.getFraImage(nameImg2);
						if (fraImage2 != null)
						{
							fraImage2.drawFrame(this.frameNewMount / 2 % fraImage2.nFrame, this.xMount, this.yMount + this.fy, this.transMount, 3, g);
						}
					}
					else
					{
						bool flag14 = this.isSpeacialMount;
						if (flag14)
						{
							this.checkFrameTick(this.move);
							bool flag15 = Mob.arrMobTemplate[50] != null && Mob.arrMobTemplate[50].data != null;
							if (flag15)
							{
								Mob.arrMobTemplate[50].data.paintFrame(g, this.fM, this.xMount + ((this.cdir != 1) ? 8 : -8), this.yMount + 35, (this.cdir != 1) ? 1 : 0, 0);
							}
							else
							{
								this.getMountData();
							}
						}
						else
						{
							bool flag16 = this.isEventMount;
							if (flag16)
							{
								g.drawRegion(global::Char.imgEventMount, 0, (int)(this.FrameMount[this.frameMount] * 60), 60, 60, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
							}
							bool flag17 = !this.isMount;
							if (!flag17)
							{
								bool flag18 = this.genderMount == 0;
								if (flag18)
								{
									bool flag19 = !this.isMountVip;
									if (flag19)
									{
										g.drawRegion(global::Char.imgMount_TD, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
									}
									else
									{
										g.drawRegion(global::Char.imgMount_TD_VIP, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
									}
								}
								else
								{
									bool flag20 = this.genderMount == 1;
									if (flag20)
									{
										bool flag21 = !this.isMountVip;
										if (flag21)
										{
											g.drawRegion(global::Char.imgMount_NM_1, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
										}
										else
										{
											g.drawRegion(global::Char.imgMount_NM_1_VIP, 0, (int)(this.FrameMount[this.frameMount] * 40), 50, 40, this.transMount, this.xMount + this.dxMount, this.yMount + this.dyMount + this.fy, 0);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x06000216 RID: 534 RVA: 0x0001C4FC File Offset: 0x0001A6FC
	public void setMountIsStart()
	{
		bool flag = this.me;
		if (flag)
		{
			this.isHaveMount = this.checkHaveMount();
			bool flag2 = TileMap.isVoDaiMap();
			if (flag2)
			{
				this.isHaveMount = false;
			}
		}
		bool flag3 = this.isHaveMount;
		if (flag3)
		{
			bool flag4 = this.ySd - this.cy <= 20;
			if (flag4)
			{
				this.xChar = this.cx;
			}
			bool flag5 = this.xdis < 100;
			if (flag5)
			{
				this.xdis = Res.abs(this.xChar - this.cx);
			}
			bool flag6 = this.xdis >= 70 && this.ySd - this.cy > 30 && !this.isStartMount && !this.isEndMount;
			if (flag6)
			{
				this.setMount(this.charID, this.cdir, this.cgender);
				this.isStartMount = true;
			}
		}
	}

	// Token: 0x06000217 RID: 535 RVA: 0x0001C5EC File Offset: 0x0001A7EC
	public void setMountIsEnd()
	{
		bool flag = this.ySd - this.cy < 24 && !this.isEndMount;
		if (flag)
		{
			this.isStartMount = false;
			this.isMount = false;
			this.isEndMount = true;
			this.xdis = 0;
		}
	}

	// Token: 0x06000218 RID: 536 RVA: 0x0001C63C File Offset: 0x0001A83C
	public bool checkHaveMount()
	{
		bool result = false;
		short num = -1;
		Item[] array = this.arrItemBody;
		for (int i = 0; i < array.Length; i++)
		{
			bool flag = array[i] != null && (array[i].template.type == 24 || array[i].template.type == 23);
			if (flag)
			{
				num = ((array[i].template.part < 0) ? array[i].template.id : (global::Char.ID_NEW_MOUNT + array[i].template.part));
				result = true;
				break;
			}
		}
		this.isMountVip = false;
		this.isSpeacialMount = false;
		this.isEventMount = false;
		this.idMount = -1;
		short num2 = num;
		short num3 = num2;
		if (num3 - 349 > 2)
		{
			if (num3 != 396)
			{
				if (num3 != 532)
				{
					bool flag2 = num >= global::Char.ID_NEW_MOUNT;
					if (flag2)
					{
						this.idMount = num;
					}
				}
				else
				{
					this.isSpeacialMount = true;
				}
			}
			else
			{
				this.isEventMount = true;
			}
		}
		else
		{
			this.isMountVip = true;
		}
		return result;
	}

	// Token: 0x06000219 RID: 537 RVA: 0x0001C75C File Offset: 0x0001A95C
	private void checkDelayFallIfTooHigh()
	{
		bool flag = true;
		for (int i = 0; i < 150; i += 24)
		{
			bool flag2 = (TileMap.tileTypeAtPixel(this.cx, this.cy + i) & 2) == 2 || this.cy + i > TileMap.tmh * (int)TileMap.size - 24;
			if (flag2)
			{
				flag = false;
				break;
			}
		}
		bool flag3 = flag;
		if (flag3)
		{
			this.delayFall = 40;
		}
	}

	// Token: 0x0600021A RID: 538 RVA: 0x0001C7D0 File Offset: 0x0001A9D0
	public void setDefaultPart()
	{
		this.setDefaultWeapon();
		this.setDefaultBody();
		this.setDefaultLeg();
	}

	// Token: 0x0600021B RID: 539 RVA: 0x0001C7E8 File Offset: 0x0001A9E8
	public void setDefaultWeapon()
	{
		bool flag = this.cgender == 0;
		if (flag)
		{
			this.wp = 0;
		}
	}

	// Token: 0x0600021C RID: 540 RVA: 0x0001C80C File Offset: 0x0001AA0C
	public void setDefaultBody()
	{
		bool flag = this.cgender == 0;
		if (flag)
		{
			this.body = 57;
		}
		else
		{
			bool flag2 = this.cgender == 1;
			if (flag2)
			{
				this.body = 59;
			}
			else
			{
				bool flag3 = this.cgender == 2;
				if (flag3)
				{
					this.body = 57;
				}
			}
		}
	}

	// Token: 0x0600021D RID: 541 RVA: 0x0001C864 File Offset: 0x0001AA64
	public void setDefaultLeg()
	{
		bool flag = this.cgender == 0;
		if (flag)
		{
			this.leg = 58;
		}
		else
		{
			bool flag2 = this.cgender == 1;
			if (flag2)
			{
				this.leg = 60;
			}
			else
			{
				bool flag3 = this.cgender == 2;
				if (flag3)
				{
					this.leg = 58;
				}
			}
		}
	}

	// Token: 0x0600021E RID: 542 RVA: 0x0001C8BC File Offset: 0x0001AABC
	public bool isSelectingSkillUseAlone()
	{
		return this.myskill != null && this.myskill.template.isUseAlone();
	}

	// Token: 0x0600021F RID: 543 RVA: 0x0001C8EC File Offset: 0x0001AAEC
	public bool isUseSkillSpec()
	{
		return this.myskill != null && this.myskill.template.isSkillSpec();
	}

	// Token: 0x06000220 RID: 544 RVA: 0x0001C91C File Offset: 0x0001AB1C
	public bool isSelectingSkillBuffToPlayer()
	{
		return this.myskill != null && this.myskill.template.isBuffToPlayer();
	}

	// Token: 0x06000221 RID: 545 RVA: 0x0001C94C File Offset: 0x0001AB4C
	public bool isUseChargeSkill()
	{
		return !this.isUseSkillAfterCharge && this.myskill != null && (this.myskill.template.id == 10 || this.myskill.template.id == 11);
	}

	// Token: 0x06000222 RID: 546 RVA: 0x0001C99C File Offset: 0x0001AB9C
	public void setSkillPaint(SkillPaint skillPaint, int sType)
	{
		this.hasSendAttack = false;
		bool flag = this.stone || (this.me && this.myskill.template.id == 9 && this.cHP <= this.cHPFull / 10L);
		if (!flag)
		{
			bool flag2 = this.me;
			if (flag2)
			{
				bool flag3 = this.mobFocus == null && this.charFocus == null;
				if (flag3)
				{
					this.stopUseChargeSkill();
				}
				bool flag4 = this.mobFocus != null && (this.mobFocus.status == 1 || this.mobFocus.status == 0);
				if (flag4)
				{
					this.stopUseChargeSkill();
				}
				bool flag5 = this.charFocus != null && (this.charFocus.statusMe == 14 || this.charFocus.statusMe == 5);
				if (flag5)
				{
					this.stopUseChargeSkill();
				}
				bool flag6 = (this.myskill.template.id == 23 && ((this.charFocus != null && this.charFocus.holdEffID != 0) || (this.mobFocus != null && this.mobFocus.holdEffID != 0) || this.holdEffID != 0)) || this.sleepEff || this.blindEff;
				if (flag6)
				{
					return;
				}
			}
			Res.outz("skill id= " + skillPaint.id.ToString());
			bool flag7 = (this.me && this.dart != null) || TileMap.isOfflineMap();
			if (!flag7)
			{
				long num = mSystem.currentTimeMillis();
				bool flag8 = this.me;
				if (flag8)
				{
					bool flag9 = this.isSelectingSkillBuffToPlayer() && this.charFocus == null;
					if (flag9)
					{
						return;
					}
					bool flag10 = num - this.myskill.lastTimeUseThisSkill < (long)this.myskill.coolDown;
					if (flag10)
					{
						this.myskill.paintCanNotUseSkill = true;
						return;
					}
					this.myskill.lastTimeUseThisSkill = num;
					bool flag11 = this.myskill.template.manaUseType == 2;
					if (flag11)
					{
						this.cMP = 1L;
					}
					else
					{
						bool flag12 = this.myskill.template.manaUseType != 1;
						if (flag12)
						{
							this.cMP -= (long)this.myskill.manaUse;
						}
						else
						{
							this.cMP -= (long)this.myskill.manaUse * this.cMPFull / 100L;
						}
					}
					global::Char.myCharz().cStamina--;
					GameScr.gI().isInjureMp = true;
					GameScr.gI().twMp = 0L;
					bool flag13 = this.cMP < 0L;
					if (flag13)
					{
						this.cMP = 0L;
					}
				}
				bool flag14 = this.me;
				if (flag14)
				{
					bool flag15 = this.myskill.template.id == 10;
					if (flag15)
					{
						Service.gI().skill_not_focus(4);
					}
					bool flag16 = this.myskill.template.id == 11;
					if (flag16)
					{
						Service.gI().skill_not_focus(4);
					}
					bool flag17 = this.myskill.template.id == 7;
					if (flag17)
					{
						SoundMn.gI().hoisinh();
					}
					bool flag18 = this.myskill.template.id == 6;
					if (flag18)
					{
						Service.gI().skill_not_focus(0);
						GameScr.gI().isUseFreez = true;
						SoundMn.gI().thaiduonghasan();
					}
					bool flag19 = this.myskill.template.id == 8;
					if (flag19)
					{
						bool flag20 = !this.isCharge;
						if (flag20)
						{
							Service.gI().skill_not_focus(1);
							this.isCharge = true;
							this.last = (this.cur = mSystem.currentTimeMillis());
						}
						else
						{
							Service.gI().skill_not_focus(3);
							this.isCharge = false;
						}
					}
					bool flag21 = this.myskill.template.id == 13;
					if (flag21)
					{
						bool flag22 = this.isMonkey != 0;
						if (flag22)
						{
							GameScr.gI().auto = 0;
						}
						else
						{
							bool flag23 = !this.isCreateDark;
							if (flag23)
							{
								Service.gI().skill_not_focus(6);
								this.chargeCount = 0;
								this.isWaitMonkey = true;
							}
						}
						return;
					}
					bool flag24 = this.myskill.template.id == 14;
					if (flag24)
					{
						Service.gI().skill_not_focus(7);
						this.useChargeSkill(true);
					}
					bool flag25 = this.myskill.template.id == 21;
					if (flag25)
					{
						Service.gI().skill_not_focus(10);
						return;
					}
					bool flag26 = this.myskill.template.id == 12;
					if (flag26)
					{
						Service.gI().skill_not_focus(8);
					}
					bool flag27 = this.myskill.template.id == 19;
					if (flag27)
					{
						Service.gI().skill_not_focus(9);
						return;
					}
				}
				bool flag28 = this.isMonkey == 1 && skillPaint.id >= 35 && skillPaint.id <= 41;
				if (flag28)
				{
					skillPaint = GameScr.sks[106];
				}
				bool flag29 = skillPaint.id >= 128 && skillPaint.id <= 134;
				if (flag29)
				{
					skillPaint = GameScr.sks[skillPaint.id - 65];
					bool flag30 = this.charFocus != null;
					if (flag30)
					{
						this.cx = this.charFocus.cx;
						this.cy = this.charFocus.cy;
						this.currentMovePoint = null;
					}
					bool flag31 = this.mobFocus != null;
					if (flag31)
					{
						this.cx = this.mobFocus.x;
						this.cy = this.mobFocus.y;
						this.currentMovePoint = null;
					}
					ServerEffect.addServerEffect(60, this.cx, this.cy, 1);
					this.telePortSkill = true;
				}
				bool flag32 = skillPaint.id >= 107 && skillPaint.id <= 113;
				if (flag32)
				{
					skillPaint = GameScr.sks[skillPaint.id - 44];
					EffecMn.addEff(new Effect(23, this.cx, this.cy + this.ch / 2, 3, 2, 1));
				}
				this.setAutoSkillPaint(skillPaint, sType);
			}
		}
	}

	// Token: 0x06000223 RID: 547 RVA: 0x0001D02C File Offset: 0x0001B22C
	public void useSkillNotFocus()
	{
		GameScr.gI().auto = 0;
		global::Char.myCharz().setSkillPaint(GameScr.sks[(int)global::Char.myCharz().myskill.skillId], (!TileMap.tileTypeAt(global::Char.myCharz().cx, global::Char.myCharz().cy, 2)) ? 1 : 0);
	}

	// Token: 0x06000224 RID: 548 RVA: 0x0001D088 File Offset: 0x0001B288
	public void sendUseChargeSkill()
	{
		bool flag = this.me && (this.isFreez || this.isUsePlane);
		if (flag)
		{
			GameScr.gI().auto = 0;
		}
		else
		{
			long num = mSystem.currentTimeMillis();
			bool flag2 = this.me && num - this.myskill.lastTimeUseThisSkill < (long)this.myskill.coolDown;
			if (flag2)
			{
				this.myskill.paintCanNotUseSkill = true;
			}
			else
			{
				bool flag3 = this.myskill.template.id == 10;
				if (flag3)
				{
					this.useChargeSkill(false);
				}
				bool flag4 = this.myskill.template.id == 11;
				if (flag4)
				{
					this.useChargeSkill(true);
				}
			}
		}
	}

	// Token: 0x06000225 RID: 549 RVA: 0x0001D14C File Offset: 0x0001B34C
	public void stopUseChargeSkill()
	{
		this.isFlyAndCharge = false;
		this.isStandAndCharge = false;
		this.isUseSkillAfterCharge = false;
		this.isCreateDark = false;
		bool flag = this.me && this.statusMe != 14 && this.statusMe != 5;
		if (flag)
		{
			this.isLockMove = false;
		}
		GameScr.gI().auto = 0;
	}

	// Token: 0x06000226 RID: 550 RVA: 0x0001D1B0 File Offset: 0x0001B3B0
	public void useChargeSkill(bool isGround)
	{
		bool flag = this.isCreateDark;
		if (!flag)
		{
			GameScr.gI().auto = 0;
			if (isGround)
			{
				bool flag2 = this.isStandAndCharge;
				if (!flag2)
				{
					this.chargeCount = 0;
					this.seconds = 50000;
					this.posDisY = 0;
					this.last = mSystem.currentTimeMillis();
					bool flag3 = this.me;
					if (flag3)
					{
						this.isLockMove = true;
						bool flag4 = this.cgender == 1;
						if (flag4)
						{
							Service.gI().skill_not_focus(4);
						}
						bool flag5 = TileMap.mapID == 170 && this.cgender != 1;
						if (flag5)
						{
							Service.gI().skill_not_focus(4);
						}
					}
					bool flag6 = this.cgender == 1;
					if (flag6)
					{
						SoundMn.gI().gongName();
					}
					bool flag7 = TileMap.mapID == 170 && this.cgender != 1;
					if (flag7)
					{
						SoundMn.gI().gongName();
					}
					this.isStandAndCharge = true;
				}
			}
			else
			{
				bool flag8 = !this.isFlyAndCharge;
				if (flag8)
				{
					bool flag9 = this.me;
					if (flag9)
					{
						GameScr.gI().auto = 0;
						this.isLockMove = true;
						Service.gI().skill_not_focus(4);
					}
					this.isUseSkillAfterCharge = false;
					this.chargeCount = 0;
					this.isFlyAndCharge = true;
					this.posDisY = 0;
					this.seconds = 50000;
					this.isFlying = TileMap.tileTypeAt(this.cx, this.cy, 2);
				}
			}
		}
	}

	// Token: 0x06000227 RID: 551 RVA: 0x0001D348 File Offset: 0x0001B548
	public void setAutoSkillPaint(SkillPaint skillPaint, int sType)
	{
		this.skillPaint = skillPaint;
		Res.outz("set auto skill " + ((skillPaint == null) ? "null" : "ko null"));
		bool flag = skillPaint.id >= 0 && skillPaint.id <= 6;
		if (flag)
		{
			int num = Res.random(0, skillPaint.id + 4) - 1;
			bool flag2 = num < 0;
			if (flag2)
			{
				num = 0;
			}
			bool flag3 = num > 6;
			if (flag3)
			{
				num = 6;
			}
			this.skillPaintRandomPaint = GameScr.sks[num];
		}
		else
		{
			bool flag4 = skillPaint.id >= 14 && skillPaint.id <= 20;
			if (flag4)
			{
				int num2 = Res.random(0, skillPaint.id - 14 + 4) - 1;
				bool flag5 = num2 < 0;
				if (flag5)
				{
					num2 = 0;
				}
				bool flag6 = num2 > 6;
				if (flag6)
				{
					num2 = 6;
				}
				this.skillPaintRandomPaint = GameScr.sks[num2 + 14];
			}
			else
			{
				bool flag7 = skillPaint.id >= 28 && skillPaint.id <= 34;
				if (flag7)
				{
					int num3 = Res.random(0, ((this.isMonkey != 1) ? skillPaint.id : 105) - ((this.isMonkey != 1) ? 28 : 105) + 4) - 1;
					bool flag8 = num3 < 0;
					if (flag8)
					{
						num3 = 0;
					}
					bool flag9 = num3 > 6;
					if (flag9)
					{
						num3 = 6;
					}
					bool flag10 = this.isMonkey == 1;
					if (flag10)
					{
						num3 = 0;
					}
					this.skillPaintRandomPaint = GameScr.sks[num3 + ((this.isMonkey != 1) ? 28 : 105)];
				}
				else
				{
					bool flag11 = skillPaint.id >= 63 && skillPaint.id <= 69;
					if (flag11)
					{
						int num4 = Res.random(0, skillPaint.id - 63 + 4) - 1;
						bool flag12 = num4 < 0;
						if (flag12)
						{
							num4 = 0;
						}
						bool flag13 = num4 > 6;
						if (flag13)
						{
							num4 = 6;
						}
						this.skillPaintRandomPaint = GameScr.sks[num4 + 63];
					}
					else
					{
						bool flag14 = skillPaint.id >= 107 && skillPaint.id <= 109;
						if (flag14)
						{
							int num5 = Res.random(0, skillPaint.id - 107 + 4) - 1;
							bool flag15 = num5 < 0;
							if (flag15)
							{
								num5 = 0;
							}
							bool flag16 = num5 > 6;
							if (flag16)
							{
								num5 = 6;
							}
							this.skillPaintRandomPaint = GameScr.sks[num5 + 107];
						}
						else
						{
							this.skillPaintRandomPaint = skillPaint;
						}
					}
				}
			}
		}
		this.sType = sType;
		this.indexSkill = 0;
		this.i0 = (this.i1 = (this.i2 = (this.dx0 = (this.dx1 = (this.dx2 = (this.dy0 = (this.dy1 = (this.dy2 = 0))))))));
		this.eff0 = null;
		this.eff1 = null;
		this.eff2 = null;
		this.cvy = 0;
	}

	// Token: 0x06000228 RID: 552 RVA: 0x0001D654 File Offset: 0x0001B854
	public SkillInfoPaint[] skillInfoPaint()
	{
		bool flag = this.skillPaint == null;
		SkillInfoPaint[] result;
		if (flag)
		{
			result = null;
		}
		else
		{
			bool flag2 = this.skillPaintRandomPaint == null;
			if (flag2)
			{
				result = null;
			}
			else
			{
				bool flag3 = this.sType == 0;
				if (flag3)
				{
					result = this.skillPaintRandomPaint.skillStand;
				}
				else
				{
					result = this.skillPaintRandomPaint.skillfly;
				}
			}
		}
		return result;
	}

	// Token: 0x06000229 RID: 553 RVA: 0x0001D6B4 File Offset: 0x0001B8B4
	public void setAttack()
	{
		bool flag = this.me;
		if (flag)
		{
			SkillPaint skillPaint = this.skillPaintRandomPaint;
			bool flag2 = this.dart != null;
			if (flag2)
			{
				skillPaint = this.dart.skillPaint;
			}
			bool flag3 = skillPaint == null;
			if (!flag3)
			{
				MyVector myVector = new MyVector();
				MyVector myVector2 = new MyVector();
				bool flag4 = this.charFocus != null;
				if (flag4)
				{
					myVector2.addElement(this.charFocus);
				}
				else
				{
					bool flag5 = this.mobFocus != null;
					if (flag5)
					{
						myVector.addElement(this.mobFocus);
					}
				}
				this.effPaints = new EffectPaint[myVector.size() + myVector2.size()];
				for (int i = 0; i < myVector.size(); i++)
				{
					this.effPaints[i] = new EffectPaint();
					this.effPaints[i].effCharPaint = GameScr.efs[skillPaint.effectHappenOnMob - 1];
					bool flag6 = !this.isSelectingSkillUseAlone();
					if (flag6)
					{
						this.effPaints[i].eMob = (Mob)myVector.elementAt(i);
					}
				}
				for (int j = 0; j < myVector2.size(); j++)
				{
					this.effPaints[j + myVector.size()] = new EffectPaint();
					this.effPaints[j + myVector.size()].effCharPaint = GameScr.efs[skillPaint.effectHappenOnMob - 1];
					this.effPaints[j + myVector.size()].eChar = (global::Char)myVector2.elementAt(j);
				}
				int type = 0;
				bool flag7 = this.mobFocus != null;
				if (flag7)
				{
					type = 1;
				}
				else
				{
					bool flag8 = this.charFocus != null;
					if (flag8)
					{
						type = 2;
					}
				}
				bool flag9 = myVector.size() == 0 && myVector2.size() == 0;
				if (flag9)
				{
					this.stopUseChargeSkill();
				}
				bool flag10 = this.me && !this.isSelectingSkillUseAlone() && !this.hasSendAttack;
				if (flag10)
				{
					Service.gI().sendPlayerAttack(myVector, myVector2, type);
					this.hasSendAttack = true;
				}
			}
		}
		else
		{
			SkillPaint skillPaint2 = this.skillPaintRandomPaint;
			bool flag11 = this.dart != null;
			if (flag11)
			{
				skillPaint2 = this.dart.skillPaint;
			}
			bool flag12 = skillPaint2 == null;
			if (!flag12)
			{
				bool flag13 = this.attMobs != null;
				if (flag13)
				{
					this.effPaints = new EffectPaint[this.attMobs.Length];
					for (int k = 0; k < this.attMobs.Length; k++)
					{
						this.effPaints[k] = new EffectPaint();
						this.effPaints[k].effCharPaint = GameScr.efs[skillPaint2.effectHappenOnMob - 1];
						this.effPaints[k].eMob = this.attMobs[k];
					}
					this.attMobs = null;
				}
				else
				{
					bool flag14 = this.attChars != null;
					if (flag14)
					{
						this.effPaints = new EffectPaint[this.attChars.Length];
						for (int l = 0; l < this.attChars.Length; l++)
						{
							this.effPaints[l] = new EffectPaint();
							this.effPaints[l].effCharPaint = GameScr.efs[skillPaint2.effectHappenOnMob - 1];
							this.effPaints[l].eChar = this.attChars[l];
						}
						this.attChars = null;
					}
				}
			}
		}
	}

	// Token: 0x0600022A RID: 554 RVA: 0x0001DA38 File Offset: 0x0001BC38
	public bool isOutX()
	{
		bool flag = this.cx < GameScr.cmx;
		bool result;
		if (flag)
		{
			result = true;
		}
		else
		{
			bool flag2 = this.cx > GameScr.cmx + GameScr.gW;
			result = flag2;
		}
		return result;
	}

	// Token: 0x0600022B RID: 555 RVA: 0x0001DA80 File Offset: 0x0001BC80
	public bool isPaint()
	{
		bool flag = this.cy < GameScr.cmy;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = this.cy > GameScr.cmy + GameScr.gH + 30;
			if (flag2)
			{
				result = false;
			}
			else
			{
				bool flag3 = this.isOutX();
				if (flag3)
				{
					result = false;
				}
				else
				{
					bool flag4 = this.isSetPos;
					if (flag4)
					{
						result = false;
					}
					else
					{
						bool flag5 = this.isFusion;
						result = !flag5;
					}
				}
			}
		}
		return result;
	}

	// Token: 0x0600022C RID: 556 RVA: 0x0001DAF9 File Offset: 0x0001BCF9
	public void createShadow(int x, int y, int life)
	{
		this.shadowX = x;
		this.shadowY = y;
		this.shadowLife = life;
	}

	// Token: 0x0600022D RID: 557 RVA: 0x0001DB11 File Offset: 0x0001BD11
	public void setMabuHold(bool m)
	{
		this.isMabuHold = m;
	}

	// Token: 0x0600022E RID: 558 RVA: 0x0001DB1C File Offset: 0x0001BD1C
	public void paintHpmeo(mGraphics g, int x, int y)
	{
		int imageWidth = mGraphics.getImageWidth(GameScr.imgHP_tm_xam);
		int imageHeight = mGraphics.getImageHeight(GameScr.imgHP_tm_xam);
		int num = imageWidth * (int)this.cHP / (int)this.cHPFull;
		int w = num;
		g.drawImage(GameScr.imgHP_tm_xam, x - (imageWidth >> 1), y, mGraphics.TOP | mGraphics.LEFT);
		bool flag = this.cHP * 100L / this.cHPFull < 10L;
		if (flag)
		{
			this.imgHPtem = GameScr.imgHP_tm_xam;
		}
		else
		{
			bool flag2 = this.cHP * 100L / this.cHPFull < 70L;
			if (flag2)
			{
				this.imgHPtem = GameScr.imgHP_tm_vang;
			}
			else
			{
				this.imgHPtem = GameScr.imgHP_tm_do;
			}
		}
		g.drawRegion(this.imgHPtem, 0, 0, w, imageHeight, 0, x - (imageWidth >> 1), y, mGraphics.TOP | mGraphics.LEFT);
	}

	// Token: 0x0600022F RID: 559 RVA: 0x0001DBF8 File Offset: 0x0001BDF8
	public void paintKimeo(mGraphics g, int x, int y)
	{
		int imageWidth = mGraphics.getImageWidth(GameScr.imgHP_tm_xam);
		int imageHeight = mGraphics.getImageHeight(GameScr.imgHP_tm_xam);
		int num = imageWidth * (int)this.cMP / (int)this.cMPFull;
		int w = num;
		g.drawImage(GameScr.imgHP_tm_xam, x - (imageWidth >> 1), y, mGraphics.TOP | mGraphics.LEFT);
		bool flag = this.cMP * 100L / this.cMPFull < 10L;
		if (flag)
		{
			this.imgHPtem = GameScr.imgHP_tm_xam;
		}
		else
		{
			bool flag2 = this.cMP * 100L / this.cMPFull < 70L;
			if (flag2)
			{
				this.imgHPtem = GameScr.imgHP_tm_xanh;
			}
			else
			{
				this.imgHPtem = GameScr.imgHP_tm_vang;
			}
		}
		g.drawRegion(this.imgHPtem, 0, 0, w, imageHeight, 0, x - (imageWidth >> 1), y, mGraphics.TOP | mGraphics.LEFT);
	}

	// Token: 0x06000230 RID: 560 RVA: 0x0001DCD4 File Offset: 0x0001BED4
	public virtual void paint(mGraphics g)
	{
		bool flag = this.isHide;
		if (!flag)
		{
			AutoSKH.PaintHpKi(g);
			bool flag2 = this.isMafuba;
			if (flag2)
			{
				this.paintCharWithoutSkill(g);
			}
			else
			{
				bool flag3 = this.isMabuHold;
				if (flag3)
				{
					bool flag4 = this.cmtoChar;
					if (flag4)
					{
						GameScr.cmtoX = this.cx - GameScr.gW2;
						GameScr.cmtoY = this.cy - GameScr.gH23;
						bool flag5 = !GameCanvas.isTouchControl;
						if (flag5)
						{
							GameScr.cmtoX += GameScr.gW6 * this.cdir;
						}
					}
				}
				else
				{
					bool flag6 = !this.isPaint() || (!this.me && GameScr.notPaint);
					if (!flag6)
					{
						bool flag7 = this.petFollow != null;
						if (flag7)
						{
							this.petFollow.paint(g);
						}
						this.paintMount1(g);
						bool flag8 = (TileMap.isInAirMap() && this.cy >= TileMap.pxh - 48) || this.isTeleport;
						if (!flag8)
						{
							bool flag9 = this.holder && GameCanvas.gameTick % 2 == 0;
							if (flag9)
							{
								g.setColor(16185600);
								bool flag10 = this.charHold != null;
								if (flag10)
								{
									g.drawLine(this.cx, this.cy - this.ch / 2, this.charHold.cx, this.charHold.cy - this.charHold.ch / 2);
								}
								bool flag11 = this.mobHold != null;
								if (flag11)
								{
									g.drawLine(this.cx, this.cy - this.ch / 2, this.mobHold.x, this.mobHold.y - this.mobHold.h / 2);
								}
							}
							this.paintSuperEffBehind(g);
							this.paintAuraBehind(g);
							this.paintEffBehind(g);
							this.paintEff_Lvup_behind(g);
							this.paintEff_Pet(g);
							bool flag12 = this.shadowLife > 0;
							if (flag12)
							{
								bool flag13 = GameCanvas.gameTick % 2 == 0;
								if (flag13)
								{
									this.paintCharBody(g, this.shadowX, this.shadowY, this.cdir, 25, true);
								}
								else
								{
									bool flag14 = this.shadowLife > 5;
									if (flag14)
									{
										this.paintCharBody(g, this.shadowX, this.shadowY, this.cdir, 7, true);
									}
								}
							}
							bool flag15 = !this.isPaint() && this.skillPaint != null && (this.skillPaint.id < 70 || this.skillPaint.id > 76) && (this.skillPaint.id < 77 || this.skillPaint.id > 83);
							if (flag15)
							{
								bool flag16 = this.skillPaint != null;
								if (flag16)
								{
									this.indexSkill = this.skillInfoPaint().Length;
									this.skillPaint = null;
								}
								this.effPaints = null;
								this.eff = null;
								this.effTask = null;
								this.indexEff = -1;
								this.indexEffTask = -1;
							}
							else
							{
								bool flag17 = this.statusMe != 15 && (this.moveFast == null || this.moveFast[0] <= 0);
								if (flag17)
								{
									this.paintCharName_HP_MP_Overhead(g);
									bool flag18 = this.skillPaint == null || this.skillInfoPaint() == null || this.indexSkill >= this.skillInfoPaint().Length;
									if (flag18)
									{
										this.paintCharWithoutSkill(g);
									}
									bool flag19 = this.arr != null;
									if (flag19)
									{
										this.arr.paint(g);
									}
									bool flag20 = this.dart != null;
									if (flag20)
									{
										this.dart.paint(g);
									}
									this.paintEffect(g);
									bool flag21 = this.mobMe != null;
									if (flag21)
									{
									}
									this.paintMount2(g);
									this.paintEff_Lvup_front(g);
									this.paintSuperEffFront(g);
									this.paintAuraFront(g);
									this.paintEffFront(g);
									this.paint_map_line(g);
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x06000231 RID: 561 RVA: 0x0001E0F4 File Offset: 0x0001C2F4
	private void paint_map_line(mGraphics g)
	{
		bool flag = this.isPaintNewSkill || this.x_hint == 0 || this.y_hint == 0 || this.statusMe == 14;
		if (!flag)
		{
			int arg = 0;
			int x = this.cx - 30;
			int y = this.cy - 15;
			int num = -30;
			int num2 = 5;
			bool flag2 = Res.abs(this.cy - (int)this.y_hint) > 150;
			if (flag2)
			{
				bool flag3 = this.cy > (int)this.y_hint;
				if (flag3)
				{
					arg = 7;
					x = this.cx;
					y = this.cy - 15 - 60;
				}
				else
				{
					arg = 5;
					x = this.cx;
					y = this.cy - 15 + 60;
				}
			}
			else
			{
				bool flag4 = this.cx > (int)this.x_hint;
				if (flag4)
				{
					arg = 2;
				}
				else
				{
					bool flag5 = this.cx <= (int)this.x_hint;
					if (flag5)
					{
						x = this.cx + 30;
					}
				}
			}
			bool flag6 = GameCanvas.gameTick % 10 >= 5;
			if (flag6)
			{
				bool flag7 = Res.abs(this.cx - (int)this.x_hint) > 100;
				if (flag7)
				{
					g.drawRegion(GameScr.arrow, 0, 0, 13, 16, arg, x, y, StaticObj.VCENTER_HCENTER);
				}
				else
				{
					bool flag8 = Res.abs(this.cx - (int)this.x_hint) < 50;
					if (flag8)
					{
						g.drawImage(Panel.imgBantay, (int)this.x_hint + num, (int)(this.y_hint - 60) + num2, 0);
					}
				}
			}
		}
	}

	// Token: 0x06000232 RID: 562 RVA: 0x0001E284 File Offset: 0x0001C484
	private void paintEff_Pet(mGraphics g)
	{
		for (int i = 0; i < this.vEffChar.size(); i++)
		{
			Effect effect = (Effect)this.vEffChar.elementAt(i);
			bool flag = effect.effId >= 201;
			if (flag)
			{
				effect.paint(g);
			}
		}
	}

	// Token: 0x06000233 RID: 563 RVA: 0x0001E2E0 File Offset: 0x0001C4E0
	private void paintSuperEffBehind(mGraphics g)
	{
		bool flag = (this.me && !global::Char.isPaintAura2) || this.idAuraEff > -1 || (this.statusMe != 1 && this.statusMe != 6) || mSystem.currentTimeMillis() - this.timeBlue <= 0L || this.isCopy || this.clevel < 16;
		if (!flag)
		{
			int num = 7598;
			int num2 = 4;
			bool flag2 = this.clevel >= 19;
			if (flag2)
			{
				num = 7676;
			}
			bool flag3 = this.clevel >= 22;
			if (flag3)
			{
				num = 7677;
			}
			bool flag4 = this.clevel >= 25;
			if (flag4)
			{
				num = 7678;
			}
			bool flag5 = num != -1;
			if (flag5)
			{
				Small small = SmallImage.imgNew[num];
				bool flag6 = small == null;
				if (flag6)
				{
					SmallImage.createImage(num);
				}
				else
				{
					int y = GameCanvas.gameTick / 4 % num2 * (mGraphics.getImageHeight(small.img) / num2);
					g.drawRegion(small.img, 0, y, mGraphics.getImageWidth(small.img), mGraphics.getImageHeight(small.img) / num2, 0, this.cx, this.cy + 2, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
			}
		}
	}

	// Token: 0x06000234 RID: 564 RVA: 0x0001E42C File Offset: 0x0001C62C
	private void paintSuperEffFront(mGraphics g)
	{
		bool flag = !global::Char.isPaintAura2;
		if (!flag)
		{
			bool flag2 = this.statusMe == 1 || this.statusMe == 6;
			if (flag2)
			{
				bool flag3 = mSystem.currentTimeMillis() - this.timeBlue <= 0L;
				if (!flag3)
				{
					bool flag4 = this.isCopy;
					if (flag4)
					{
						bool flag5 = GameCanvas.gameTick % 2 == 0;
						if (flag5)
						{
							this.tBlue++;
						}
						bool flag6 = this.tBlue > 6;
						if (flag6)
						{
							this.tBlue = 0;
						}
						g.drawImage(GameCanvas.imgViolet[this.tBlue], this.cx, this.cy + 9, mGraphics.BOTTOM | mGraphics.HCENTER);
					}
					else
					{
						bool flag7 = this.clevel >= 14 && !GameCanvas.lowGraphic;
						if (flag7)
						{
							bool flag8 = false;
							bool flag9 = mSystem.currentTimeMillis() - this.timeBlue > -1000L && this.IsAddDust1;
							if (flag9)
							{
								flag8 = true;
								this.IsAddDust1 = false;
							}
							bool flag10 = mSystem.currentTimeMillis() - this.timeBlue > -500L && this.IsAddDust2;
							if (flag10)
							{
								flag8 = true;
								this.IsAddDust2 = false;
							}
							bool flag11 = flag8;
							if (flag11)
							{
								GameCanvas.gI().startDust(-1, this.cx - -8, this.cy);
								GameCanvas.gI().startDust(1, this.cx - 8, this.cy);
								this.addDustEff(1);
							}
						}
						bool flag12 = this.clevel == 14;
						if (flag12)
						{
							bool flag13 = GameCanvas.gameTick % 2 == 0;
							if (flag13)
							{
								this.tBlue++;
							}
							bool flag14 = this.tBlue > 6;
							if (flag14)
							{
								this.tBlue = 0;
							}
							g.drawImage(GameCanvas.imgBlue[this.tBlue], this.cx, this.cy + 9, mGraphics.BOTTOM | mGraphics.HCENTER);
						}
						else
						{
							bool flag15 = this.clevel == 15;
							if (flag15)
							{
								bool flag16 = GameCanvas.gameTick % 2 == 0;
								if (flag16)
								{
									this.tBlue++;
								}
								bool flag17 = this.tBlue > 6;
								if (flag17)
								{
									this.tBlue = 0;
								}
								g.drawImage(GameCanvas.imgViolet[this.tBlue], this.cx, this.cy + 9, mGraphics.BOTTOM | mGraphics.HCENTER);
							}
							else
							{
								bool flag18 = this.clevel < 16;
								if (!flag18)
								{
									int num = -1;
									int num2 = 4;
									bool flag19 = this.clevel >= 16 && this.clevel < 22;
									if (flag19)
									{
										num = 7599;
										num2 = 4;
									}
									bool flag20 = num != -1;
									if (flag20)
									{
										Small small = SmallImage.imgNew[num];
										bool flag21 = small == null;
										if (flag21)
										{
											SmallImage.createImage(num);
										}
										else
										{
											int y = GameCanvas.gameTick / 4 % num2 * (mGraphics.getImageHeight(small.img) / num2);
											g.drawRegion(small.img, 0, y, mGraphics.getImageWidth(small.img), mGraphics.getImageHeight(small.img) / num2, 0, this.cx, this.cy + 2, mGraphics.BOTTOM | mGraphics.HCENTER);
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				this.timeBlue = mSystem.currentTimeMillis() + 1500L;
				this.IsAddDust1 = true;
				this.IsAddDust2 = true;
			}
		}
	}

	// Token: 0x06000235 RID: 565 RVA: 0x0001E7C0 File Offset: 0x0001C9C0
	private void paintEffect(mGraphics g)
	{
		bool flag = this.effPaints != null;
		if (flag)
		{
			for (int i = 0; i < this.effPaints.Length; i++)
			{
				bool flag2 = this.effPaints[i] == null;
				if (!flag2)
				{
					bool flag3 = this.effPaints[i].eMob != null;
					if (flag3)
					{
						int y = this.effPaints[i].eMob.y;
						bool flag4 = this.effPaints[i].eMob is BigBoss;
						if (flag4)
						{
							y = this.effPaints[i].eMob.y - 60;
						}
						bool flag5 = this.effPaints[i].eMob is BigBoss2;
						if (flag5)
						{
							y = this.effPaints[i].eMob.y - 50;
						}
						bool flag6 = this.effPaints[i].eMob is BachTuoc;
						if (flag6)
						{
							y = this.effPaints[i].eMob.y - 40;
						}
						SmallImage.drawSmallImage(g, this.effPaints[i].getImgId(), this.effPaints[i].eMob.x, y, 0, mGraphics.BOTTOM | mGraphics.HCENTER);
					}
					else
					{
						bool flag7 = this.effPaints[i].eChar != null;
						if (flag7)
						{
							SmallImage.drawSmallImage(g, this.effPaints[i].getImgId(), this.effPaints[i].eChar.cx, this.effPaints[i].eChar.cy, 0, mGraphics.BOTTOM | mGraphics.HCENTER);
						}
					}
				}
			}
		}
		bool flag8 = this.indexEff >= 0 && this.eff != null;
		if (flag8)
		{
			SmallImage.drawSmallImage(g, this.eff.arrEfInfo[this.indexEff].idImg, this.cx + this.eff.arrEfInfo[this.indexEff].dx, this.cy + this.eff.arrEfInfo[this.indexEff].dy, 0, mGraphics.VCENTER | mGraphics.HCENTER);
		}
		bool flag9 = this.indexEffTask >= 0 && this.effTask != null;
		if (flag9)
		{
			SmallImage.drawSmallImage(g, this.effTask.arrEfInfo[this.indexEffTask].idImg, this.cx + this.effTask.arrEfInfo[this.indexEffTask].dx, this.cy + this.effTask.arrEfInfo[this.indexEffTask].dy, 0, mGraphics.VCENTER | mGraphics.HCENTER);
		}
	}

	// Token: 0x06000236 RID: 566 RVA: 0x0001EA77 File Offset: 0x0001CC77
	private void paintArrowAttack(mGraphics g)
	{
	}

	// Token: 0x06000237 RID: 567 RVA: 0x0001EA7C File Offset: 0x0001CC7C
	public void paintHp(mGraphics g, int x, int y)
	{
		int num = (int)((long)((int)this.cHP * 100) / this.cHPFull) / 10 - 1;
		bool flag = num < 0;
		if (flag)
		{
			num = 0;
		}
		bool flag2 = num > 9;
		if (flag2)
		{
			num = 9;
		}
		bool flag3 = !this.me;
		if (flag3)
		{
			g.drawRegion(Mob.imgHP, 0, 6 * (9 - num), 9, 6, 0, x, y - mFont.tahoma_7.getHeight() - 6, 3);
		}
		bool flag4 = this.cTypePk == 0 && (global::Char.myCharz().cFlag == 0 || this.cFlag == 0 || (this.cFlag != 8 && global::Char.myCharz().cFlag != 8 && this.cFlag == global::Char.myCharz().cFlag));
		if (!flag4)
		{
			this.len = (int)(this.cHP * 100L / this.cHPFull * (long)this.w_hp_bar) / 100;
			num = (int)(this.cHP * 100L / this.cHPFull);
			bool flag5 = num < 30;
			if (flag5)
			{
				this.imgHPtem = GameScr.imgHP_tm_do;
			}
			else
			{
				bool flag6 = num < 60;
				if (flag6)
				{
					this.imgHPtem = GameScr.imgHP_tm_vang;
				}
				else
				{
					this.imgHPtem = GameScr.imgHP_tm_xanh;
				}
			}
			int imageWidth = mGraphics.getImageWidth(GameScr.imgHP_tm_xam);
			int imageHeight = mGraphics.getImageHeight(GameScr.imgHP_tm_xam);
			int w = imageWidth * num / 100;
			g.drawImage(GameScr.imgHP_tm_xam, x - (imageWidth >> 1), y - 1, mGraphics.TOP | mGraphics.LEFT);
			bool flag7 = this.len < 5;
			if (flag7)
			{
				bool flag8 = GameCanvas.gameTick % 6 < 3;
				if (flag8)
				{
					g.drawRegion(this.imgHPtem, 0, 0, w, imageHeight, 0, x - (imageWidth >> 1), y - 1, mGraphics.TOP | mGraphics.LEFT);
				}
			}
			else
			{
				g.drawRegion(this.imgHPtem, 0, 0, w, imageHeight, 0, x - (imageWidth >> 1), y - 1, mGraphics.TOP | mGraphics.LEFT);
			}
		}
	}

	// Token: 0x06000238 RID: 568 RVA: 0x0001EC78 File Offset: 0x0001CE78
	public int getClassColor()
	{
		int result = 9145227;
		bool flag = this.nClass.classId == 1 || this.nClass.classId == 2;
		if (flag)
		{
			result = 16711680;
		}
		else
		{
			bool flag2 = this.nClass.classId == 3 || this.nClass.classId == 4;
			if (flag2)
			{
				result = 33023;
			}
			else
			{
				bool flag3 = this.nClass.classId == 5 || this.nClass.classId == 6;
				if (flag3)
				{
					result = 7443811;
				}
			}
		}
		return result;
	}

	// Token: 0x06000239 RID: 569 RVA: 0x0001ED18 File Offset: 0x0001CF18
	public void paintNameInSameParty(mGraphics g)
	{
		bool flag = this.cTypePk != 3 && this.cTypePk != 5 && this.isPaint();
		if (flag)
		{
			bool flag2 = global::Char.myCharz().charFocus == null || !global::Char.myCharz().charFocus.Equals(this);
			if (flag2)
			{
				mFont.tahoma_7_yellow.drawString(g, this.cName, this.cx, this.cy - this.ch - mFont.tahoma_7_green.getHeight() - 5, mFont.CENTER, mFont.tahoma_7_grey);
			}
			else
			{
				bool flag3 = global::Char.myCharz().charFocus != null && global::Char.myCharz().charFocus.Equals(this);
				if (flag3)
				{
					mFont.tahoma_7_yellow.drawString(g, this.cName, this.cx, this.cy - this.ch - mFont.tahoma_7_green.getHeight() - 10, mFont.CENTER, mFont.tahoma_7_grey);
				}
			}
		}
	}

	// Token: 0x0600023A RID: 570 RVA: 0x0001EE14 File Offset: 0x0001D014
	private void paintCharName_HP_MP_Overhead(mGraphics g)
	{
		Part part = GameScr.parts[this.getFHead(this.head)];
		int num = global::Char.CharInfo[this.cf][0][2] - (int)part.pi[global::Char.CharInfo[this.cf][0][0]].dy + 5;
		bool flag = (this.isInvisiblez && !this.me) || (!this.me && TileMap.mapID == 113 && this.cy >= 360);
		if (!flag)
		{
			bool flag2 = this.me;
			if (flag2)
			{
				num += 5;
				this.paintHp(g, this.cx, this.cy - num + 3);
				bool flag3 = this.fraDanhHieu != null;
				if (flag3)
				{
					int x = this.cx - this.fraDanhHieu.frameWidth / 2;
					int y = this.cy - num + 3 - mFont.tahoma_7.getHeight() - (this.fraDanhHieu.frameHeight + 5);
					bool flag4 = GameCanvas.gameTick % 5 == 0;
					if (flag4)
					{
						this.danhHieuFramme++;
					}
					bool flag5 = this.danhHieuFramme >= this.fraDanhHieu.nFrame;
					if (flag5)
					{
						this.danhHieuFramme = 0;
					}
					this.fraDanhHieu.drawFrame(this.danhHieuFramme, x, y, 0, mGraphics.TOP | mGraphics.LEFT, g);
				}
			}
			else
			{
				bool flag6 = global::Char.myChar.clan != null && this.clanID == global::Char.myChar.clan.ID;
				bool flag7 = this.cTypePk == 3 || this.cTypePk == 5;
				bool flag8 = this.cTypePk == 4;
				bool flag9 = this.cName.StartsWith("$");
				if (flag9)
				{
					this.cName = this.cName.Substring(1);
					this.isPet = true;
				}
				bool flag10 = this.cName.StartsWith("#");
				if (flag10)
				{
					this.cName = this.cName.Substring(1);
					this.isMiniPet = true;
				}
				bool flag11 = global::Char.myCharz().charFocus != null && global::Char.myCharz().charFocus.Equals(this);
				if (flag11)
				{
					num += 5;
					this.paintHp(g, this.cx, this.cy - num + 3);
					bool flag12 = this.fraDanhHieu != null;
					if (flag12)
					{
						int x2 = this.cx - this.fraDanhHieu.frameWidth / 2;
						int y2 = this.cy - num + 3 - mFont.tahoma_7.getHeight() - (this.fraDanhHieu.frameHeight + 5);
						bool flag13 = GameCanvas.gameTick % 5 == 0;
						if (flag13)
						{
							this.danhHieuFramme++;
						}
						bool flag14 = this.danhHieuFramme >= this.fraDanhHieu.nFrame;
						if (flag14)
						{
							this.danhHieuFramme = 0;
						}
						this.fraDanhHieu.drawFrame(this.danhHieuFramme, x2, y2, 0, mGraphics.TOP | mGraphics.LEFT, g);
					}
				}
				num += mFont.tahoma_7_white.getHeight();
				mFont mFont = mFont.tahoma_7_whiteSmall;
				bool flag15 = this.isPet || this.isMiniPet;
				if (flag15)
				{
					mFont = mFont.tahoma_7_blue1Small;
				}
				else
				{
					bool flag16 = flag7;
					if (flag16)
					{
						mFont = mFont.nameFontRed;
					}
					else
					{
						bool flag17 = flag8;
						if (flag17)
						{
							mFont = mFont.nameFontYellow;
						}
						else
						{
							bool flag18 = flag6;
							if (flag18)
							{
								mFont = mFont.nameFontGreen;
							}
						}
					}
				}
				bool flag19 = TileMap.mapID == 170;
				if (flag19)
				{
					bool flag20 = this.flagImage == 2325;
					if (flag20)
					{
						mFont = mFont.tahoma_7_blue;
					}
					else
					{
						bool flag21 = this.flagImage == 2323;
						if (flag21)
						{
							mFont = mFont.tahoma_7_red;
						}
					}
				}
				bool flag22 = (this.paintName || flag7 || flag8) && !flag6;
				if (flag22)
				{
					bool flag23 = mSystem.clientType == 1;
					if (flag23)
					{
						mFont.drawString(g, this.cName, this.cx, this.cy - num, mFont.CENTER, mFont.tahoma_7_greySmall);
					}
					else
					{
						mFont.drawString(g, this.cName, this.cx, this.cy - num, mFont.CENTER);
					}
					num += mFont.tahoma_7.getHeight();
				}
				bool flag24 = flag6;
				if (flag24)
				{
					bool flag25 = global::Char.myCharz().charFocus != null && global::Char.myCharz().charFocus.Equals(this);
					if (flag25)
					{
						mFont.drawString(g, this.cName, this.cx, this.cy - num, mFont.CENTER, mFont.tahoma_7_greySmall);
					}
					else
					{
						bool flag26 = this.charFocus == null;
						if (flag26)
						{
							mFont.drawString(g, this.cName, this.cx - 10, this.cy - num + 3, mFont.LEFT, mFont.tahoma_7_grey);
							this.paintHp(g, this.cx - 16, this.cy - num + 10);
						}
					}
				}
			}
		}
	}

	// Token: 0x0600023B RID: 571 RVA: 0x0001F32C File Offset: 0x0001D52C
	public void paintShadow(mGraphics g)
	{
		bool flag = this.isMabuHold || this.head == 377 || this.leg == 471 || this.isTeleport || this.isFlyUp;
		if (!flag)
		{
			int size = (int)TileMap.size;
			bool flag2 = (TileMap.mapID < 114 || TileMap.mapID > 120) && TileMap.mapID != 127 && TileMap.mapID != 128 && !TileMap.tileTypeAt(this.xSd + size / 2, this.ySd + 1, 4);
			if (flag2)
			{
				bool flag3 = TileMap.tileTypeAt((this.xSd - size / 2) / size, (this.ySd + 1) / size) == 0;
				if (flag3)
				{
					g.setClip(this.xSd / size * size, (this.ySd - 30) / size * size, 100, 100);
				}
				else
				{
					bool flag4 = TileMap.tileTypeAt((this.xSd + size / 2) / size, (this.ySd + 1) / size) == 0;
					if (flag4)
					{
						g.setClip(this.xSd / size * size, (this.ySd - 30) / size * size, size, 100);
					}
					else
					{
						bool flag5 = TileMap.tileTypeAt(this.xSd - size / 2, this.ySd + 1, 8);
						if (flag5)
						{
							g.setClip(this.xSd / 24 * size, (this.ySd - 30) / size * size, size, 100);
						}
					}
				}
			}
			g.drawImage(TileMap.bong, this.xSd, this.ySd, 3);
			g.setClip(GameScr.cmx, GameScr.cmy - GameCanvas.transY, GameScr.gW, GameScr.gH + 2 * GameCanvas.transY);
		}
	}

	// Token: 0x0600023C RID: 572 RVA: 0x0001F4E4 File Offset: 0x0001D6E4
	public void updateShadown()
	{
		int i = 0;
		this.xSd = this.cx;
		bool flag = TileMap.tileTypeAt(this.cx, this.cy, 2);
		if (flag)
		{
			this.ySd = this.cy;
		}
		else
		{
			this.ySd = this.cy;
			while (i < 30)
			{
				i++;
				this.ySd += 24;
				bool flag2 = TileMap.tileTypeAt(this.xSd, this.ySd, 2);
				if (flag2)
				{
					bool flag3 = this.ySd % 24 != 0;
					if (flag3)
					{
						this.ySd -= this.ySd % 24;
					}
					break;
				}
			}
		}
	}

	// Token: 0x0600023D RID: 573 RVA: 0x0001F594 File Offset: 0x0001D794
	private void paintCharWithoutSkill(mGraphics g)
	{
		try
		{
			bool flag = this.isMafuba;
			if (flag)
			{
				this.paintCharBody(g, this.xMFB, this.yMFB, this.cdir, this.cf, false);
			}
			else
			{
				bool flag2 = this.isInvisiblez;
				if (flag2)
				{
					bool flag3 = this.me;
					if (flag3)
					{
						bool flag4 = GameCanvas.gameTick % 50 == 48 || GameCanvas.gameTick % 50 == 90;
						if (flag4)
						{
						}
					}
				}
				else
				{
					this.paintCharBody(g, this.cx, this.cy + this.fy, this.cdir, this.cf, true);
				}
				bool flag5 = this.isLockAttack;
				if (flag5)
				{
				}
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("Loi paint char without skill: " + ex.ToString());
		}
	}

	// Token: 0x0600023E RID: 574 RVA: 0x0001F67C File Offset: 0x0001D87C
	public void paintBag(mGraphics g, short[] id, int x, int y, int dir, bool isPaintChar)
	{
		int num = 0;
		int num2 = 0;
		bool flag = this.statusMe == 6;
		if (flag)
		{
			num = 8;
			num2 = 17;
		}
		bool flag2 = this.statusMe == 1;
		if (flag2)
		{
			bool flag3 = this.cp1 % 15 < 5;
			if (flag3)
			{
				num = 8;
				num2 = 17;
			}
			else
			{
				num = 8;
				num2 = 18;
			}
		}
		bool flag4 = this.statusMe == 2;
		if (flag4)
		{
			bool flag5 = this.cf <= 3;
			if (flag5)
			{
				num = 7;
				num2 = 17;
			}
			else
			{
				num = 7;
				num2 = 18;
			}
		}
		bool flag6 = this.statusMe == 3 || this.statusMe == 9;
		if (flag6)
		{
			num = 5;
			num2 = 20;
		}
		bool flag7 = this.statusMe == 4;
		if (flag7)
		{
			bool flag8 = this.cf == 8;
			if (flag8)
			{
				num = 5;
				num2 = 16;
			}
			else
			{
				num = 5;
				num2 = 20;
			}
		}
		bool flag9 = this.statusMe == 10;
		if (flag9)
		{
			bool flag10 = this.cf == 8;
			if (flag10)
			{
				num = 0;
				num2 = 23;
			}
			else
			{
				num = 5;
				num2 = 22;
			}
		}
		bool flag11 = this.isInjure > 0;
		if (flag11)
		{
			num = 5;
			num2 = 18;
		}
		bool flag12 = this.skillPaint != null && this.skillInfoPaint() != null && this.indexSkill < this.skillInfoPaint().Length;
		if (flag12)
		{
			num = -1;
			num2 = 17;
		}
		this.fBag++;
		bool flag13 = this.fBag > 10000;
		if (flag13)
		{
			this.fBag = 0;
		}
		sbyte b = (sbyte)(this.fBag / 4 % id.Length);
		bool flag14 = !isPaintChar;
		if (flag14)
		{
			bool flag15 = id.Length == 2;
			if (flag15)
			{
				b = 1;
			}
			bool flag16 = id.Length == 3;
			if (flag16)
			{
				bool flag17 = id[2] >= 0;
				if (flag17)
				{
					b = 2;
					bool flag18 = GameCanvas.gameTick % 10 > 5;
					if (flag18)
					{
						b = 1;
					}
				}
				else
				{
					b = 1;
				}
			}
		}
		else
		{
			bool flag19 = id.Length > 1 && (b == 0 || b == 1) && this.statusMe != 1 && this.statusMe != 6;
			if (flag19)
			{
				this.fBag = 0;
				b = 0;
				bool flag20 = GameCanvas.gameTick % 10 > 5;
				if (flag20)
				{
					b = 1;
				}
			}
		}
		SmallImage.drawSmallImage(g, (int)id[(int)b], x + ((dir != 1) ? num : (-num)), y - num2, (dir != 1) ? 2 : 0, StaticObj.VCENTER_HCENTER);
	}

	// Token: 0x0600023F RID: 575 RVA: 0x0001F8D8 File Offset: 0x0001DAD8
	public bool isCharBodyImageID(int id)
	{
		Part part = GameScr.parts[this.head];
		Part part2 = GameScr.parts[this.leg];
		Part part3 = GameScr.parts[this.body];
		int i = 0;
		while (i < global::Char.CharInfo.Length)
		{
			bool flag = id == (int)part.pi[global::Char.CharInfo[i][0][0]].id;
			bool result;
			if (flag)
			{
				result = true;
			}
			else
			{
				bool flag2 = id == (int)part2.pi[global::Char.CharInfo[i][1][0]].id;
				if (flag2)
				{
					result = true;
				}
				else
				{
					bool flag3 = id == (int)part3.pi[global::Char.CharInfo[i][2][0]].id;
					if (!flag3)
					{
						i++;
						continue;
					}
					result = true;
				}
			}
			return result;
		}
		return false;
	}

	// Token: 0x06000240 RID: 576 RVA: 0x0001F9A4 File Offset: 0x0001DBA4
	public void paintHead(mGraphics g, int cx, int cy, int look)
	{
		Part part = GameScr.parts[this.head];
		SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, cx, cy, (look != 0) ? 2 : 0, mGraphics.RIGHT | mGraphics.VCENTER);
	}

	// Token: 0x06000241 RID: 577 RVA: 0x0001F9F4 File Offset: 0x0001DBF4
	public void paintHeadWithXY(mGraphics g, int x, int y, int look)
	{
		Part part = GameScr.parts[this.head];
		SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, x + global::Char.CharInfo[0][0][1] + (int)part.pi[global::Char.CharInfo[0][0][0]].dx - 3, y + 3, look, mGraphics.LEFT | mGraphics.BOTTOM);
	}

	// Token: 0x06000242 RID: 578 RVA: 0x0001FA64 File Offset: 0x0001DC64
	public void paintCharBody(mGraphics g, int cx, int cy, int cdir, int cf, bool isPaintBag)
	{
		this.ph = GameScr.parts[this.head];
		this.pl = GameScr.parts[this.leg];
		this.pb = GameScr.parts[this.body];
		bool flag = this.bag >= 0 && this.statusMe != 14;
		if (flag)
		{
			bool flag2 = !ClanImage.idImages.containsKey(this.bag.ToString() + string.Empty);
			if (flag2)
			{
				ClanImage.idImages.put(this.bag.ToString() + string.Empty, new ClanImage());
				Service.gI().requestBagImage(this.bag);
			}
			else
			{
				ClanImage clanImage = (ClanImage)ClanImage.idImages.get(this.bag.ToString() + string.Empty);
				bool flag3 = clanImage.idImage != null && isPaintBag;
				if (flag3)
				{
					this.paintBag(g, clanImage.idImage, cx, cy, cdir, true);
				}
			}
		}
		int num = 2;
		int anchor = 24;
		int anchor2 = StaticObj.TOP_RIGHT;
		int num2 = -1;
		bool flag4 = cdir == 1;
		if (flag4)
		{
			num = 0;
			anchor = 0;
			anchor2 = 0;
			num2 = 1;
		}
		bool flag5 = this.statusMe == 14;
		if (flag5)
		{
			bool flag6 = GameCanvas.gameTick % 4 > 0;
			if (flag6)
			{
				g.drawImage(ItemMap.imageFlare, cx, cy - this.ch - 11, mGraphics.HCENTER | mGraphics.VCENTER);
			}
			int num3 = 0;
			bool flag7 = this.head == 89 || this.head == 457 || this.head == 460 || this.head == 461 || this.head == 462 || this.head == 463 || this.head == 464 || this.head == 465 || this.head == 466;
			if (flag7)
			{
				num3 = 15;
			}
			bool flag8 = this.head == 1291;
			if (flag8)
			{
				num3 = 23;
			}
			SmallImage.drawSmallImage(g, 834, cx, cy - global::Char.CharInfo[cf][2][2] + (int)this.pb.pi[global::Char.CharInfo[cf][2][0]].dy - 2 + num3, num, StaticObj.TOP_CENTER);
			SmallImage.drawSmallImage(g, 79, cx, cy - this.ch - 8, 0, mGraphics.HCENTER | mGraphics.BOTTOM);
			SmallImage.drawSmallImage(g, (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].id, cx + (global::Char.CharInfo[cf][0][1] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dx) * num2, cy - global::Char.CharInfo[cf][0][2] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dy, num, anchor);
			this.paintHat_behind(g, cf, cy - global::Char.CharInfo[cf][2][2] + (int)this.pb.pi[global::Char.CharInfo[cf][2][0]].dy);
			bool flag9 = this.isHead_2Fr(this.head);
			if (flag9)
			{
				Part part = GameScr.parts[this.getFHead(this.head)];
				SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[cf][0][0]].id, cx + (global::Char.CharInfo[cf][0][1] + (int)part.pi[global::Char.CharInfo[cf][0][0]].dx) * num2, cy - global::Char.CharInfo[cf][0][2] + (int)part.pi[global::Char.CharInfo[cf][0][0]].dy, num, anchor);
			}
			else
			{
				SmallImage.drawSmallImage(g, (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].id, cx + (global::Char.CharInfo[cf][0][1] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dx) * num2, cy - global::Char.CharInfo[cf][0][2] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dy, num, anchor);
			}
			this.paintHat_front(g, cf, cy - global::Char.CharInfo[cf][2][2] + (int)this.pb.pi[global::Char.CharInfo[cf][2][0]].dy);
			this.paintRedEye(g, cx + (global::Char.CharInfo[cf][0][1] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dx) * num2, cy - global::Char.CharInfo[cf][0][2] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dy, num, anchor);
		}
		else
		{
			this.paintHat_behind(g, cf, cy - global::Char.CharInfo[cf][2][2] + (int)this.pb.pi[global::Char.CharInfo[cf][2][0]].dy);
			try
			{
				bool flag10 = this.isHead_2Fr(this.head);
				if (flag10)
				{
					Part part2 = GameScr.parts[this.getFHead(this.head)];
					SmallImage.drawSmallImage(g, (int)part2.pi[global::Char.CharInfo[cf][0][0]].id, cx + (global::Char.CharInfo[cf][0][1] + (int)part2.pi[global::Char.CharInfo[cf][0][0]].dx) * num2, cy - global::Char.CharInfo[cf][0][2] + (int)part2.pi[global::Char.CharInfo[cf][0][0]].dy, num, anchor);
				}
				else
				{
					SmallImage.drawSmallImage(g, (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].id, cx + (global::Char.CharInfo[cf][0][1] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dx) * num2, cy - global::Char.CharInfo[cf][0][2] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dy, num, anchor);
				}
				SmallImage.drawSmallImage(g, (int)this.pl.pi[global::Char.CharInfo[cf][1][0]].id, cx + (global::Char.CharInfo[cf][1][1] + (int)this.pl.pi[global::Char.CharInfo[cf][1][0]].dx) * num2, cy - global::Char.CharInfo[cf][1][2] + (int)this.pl.pi[global::Char.CharInfo[cf][1][0]].dy, num, anchor);
				SmallImage.drawSmallImage(g, (int)this.pb.pi[global::Char.CharInfo[cf][2][0]].id, cx + (global::Char.CharInfo[cf][2][1] + (int)this.pb.pi[global::Char.CharInfo[cf][2][0]].dx) * num2, cy - global::Char.CharInfo[cf][2][2] + (int)this.pb.pi[global::Char.CharInfo[cf][2][0]].dy, num, anchor);
				this.paintRedEye(g, cx + (global::Char.CharInfo[cf][0][1] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dx) * num2, cy - global::Char.CharInfo[cf][0][2] + (int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dy, num, anchor);
			}
			catch (Exception ex)
			{
				Debug.LogError(">>>>>>err: " + ex.ToString());
			}
		}
		this.ch = ((this.isMonkey != 1 && !this.isFusion) ? (global::Char.CharInfo[0][0][2] + (int)this.ph.pi[global::Char.CharInfo[0][0][0]].dy + 10) : 60);
		int num4 = (int)((Res.abs((int)this.ph.pi[global::Char.CharInfo[cf][0][0]].dy) < 22) ? this.ph.pi[global::Char.CharInfo[cf][0][0]].dy : ((this.ph.pi[global::Char.CharInfo[cf][0][0]].dy >= 0) ? (this.ph.pi[global::Char.CharInfo[cf][0][0]].dy - 5) : (this.ph.pi[global::Char.CharInfo[cf][0][0]].dy + 5)));
		this.cH_new = cy - global::Char.CharInfo[cf][0][2] + num4;
		bool flag11 = this.statusMe == 1 && this.charID > 0 && !this.isMask && !this.isUseChargeSkill() && !this.isWaitMonkey && this.skillPaint == null && cf != 23 && this.bag < 0 && ((GameCanvas.gameTick + this.charID) % 30 == 0 || this.isFreez);
		if (flag11)
		{
			g.drawImage((this.cgender != 1) ? global::Char.eyeTraiDat : global::Char.eyeNamek, cx + -((this.cgender != 1) ? 2 : 2) * num2, cy - 32 + ((this.cgender != 1) ? 11 : 10) - cf, anchor2);
		}
		bool flag12 = this.eProtect != null;
		if (flag12)
		{
			this.eProtect.paint(g);
		}
		bool flag13 = this.eDanhHieu != null;
		if (flag13)
		{
			this.eDanhHieu.paint(g);
		}
		this.paintPKFlag(g);
	}

	// Token: 0x06000243 RID: 579 RVA: 0x0002045C File Offset: 0x0001E65C
	public void paintCharWithSkill(mGraphics g)
	{
		this.ty = 0;
		SkillInfoPaint[] array = this.skillInfoPaint();
		this.cf = array[this.indexSkill].status;
		this.paintCharWithoutSkill(g);
		bool flag = this.cdir == 1;
		if (flag)
		{
			bool flag2 = this.eff0 != null;
			if (flag2)
			{
				bool flag3 = this.dx0 == 0;
				if (flag3)
				{
					this.dx0 = array[this.indexSkill].e0dx;
				}
				bool flag4 = this.dy0 == 0;
				if (flag4)
				{
					this.dy0 = array[this.indexSkill].e0dy;
				}
				SmallImage.drawSmallImage(g, this.eff0.arrEfInfo[this.i0].idImg, this.cx + this.dx0 + this.eff0.arrEfInfo[this.i0].dx, this.cy + this.dy0 + this.eff0.arrEfInfo[this.i0].dy, 0, mGraphics.VCENTER | mGraphics.HCENTER);
				this.i0++;
				bool flag5 = this.i0 >= this.eff0.arrEfInfo.Length;
				if (flag5)
				{
					this.eff0 = null;
					this.i0 = (this.dx0 = (this.dy0 = 0));
				}
			}
			bool flag6 = this.eff1 != null;
			if (flag6)
			{
				bool flag7 = this.dx1 == 0;
				if (flag7)
				{
					this.dx1 = array[this.indexSkill].e1dx;
				}
				bool flag8 = this.dy1 == 0;
				if (flag8)
				{
					this.dy1 = array[this.indexSkill].e1dy;
				}
				SmallImage.drawSmallImage(g, this.eff1.arrEfInfo[this.i1].idImg, this.cx + this.dx1 + this.eff1.arrEfInfo[this.i1].dx, this.cy + this.dy1 + this.eff1.arrEfInfo[this.i1].dy, 0, mGraphics.VCENTER | mGraphics.HCENTER);
				this.i1++;
				bool flag9 = this.i1 >= this.eff1.arrEfInfo.Length;
				if (flag9)
				{
					this.eff1 = null;
					this.i1 = (this.dx1 = (this.dy1 = 0));
				}
			}
			bool flag10 = this.eff2 != null;
			if (flag10)
			{
				bool flag11 = this.dx2 == 0;
				if (flag11)
				{
					this.dx2 = array[this.indexSkill].e2dx;
				}
				bool flag12 = this.dy2 == 0;
				if (flag12)
				{
					this.dy2 = array[this.indexSkill].e2dy;
				}
				SmallImage.drawSmallImage(g, this.eff2.arrEfInfo[this.i2].idImg, this.cx + this.dx2 + this.eff2.arrEfInfo[this.i2].dx, this.cy + this.dy2 + this.eff2.arrEfInfo[this.i2].dy, 0, mGraphics.VCENTER | mGraphics.HCENTER);
				this.i2++;
				bool flag13 = this.i2 >= this.eff2.arrEfInfo.Length;
				if (flag13)
				{
					this.eff2 = null;
					this.i2 = (this.dx2 = (this.dy2 = 0));
				}
			}
		}
		else
		{
			bool flag14 = this.eff0 != null;
			if (flag14)
			{
				bool flag15 = this.dx0 == 0;
				if (flag15)
				{
					this.dx0 = array[this.indexSkill].e0dx;
				}
				bool flag16 = this.dy0 == 0;
				if (flag16)
				{
					this.dy0 = array[this.indexSkill].e0dy;
				}
				SmallImage.drawSmallImage(g, this.eff0.arrEfInfo[this.i0].idImg, this.cx - this.dx0 - this.eff0.arrEfInfo[this.i0].dx, this.cy + this.dy0 + this.eff0.arrEfInfo[this.i0].dy, 2, mGraphics.VCENTER | mGraphics.HCENTER);
				this.i0++;
				bool flag17 = this.i0 >= this.eff0.arrEfInfo.Length;
				if (flag17)
				{
					this.eff0 = null;
					this.i0 = 0;
					this.dx0 = 0;
					this.dy0 = 0;
				}
			}
			bool flag18 = this.eff1 != null;
			if (flag18)
			{
				bool flag19 = this.dx1 == 0;
				if (flag19)
				{
					this.dx1 = array[this.indexSkill].e1dx;
				}
				bool flag20 = this.dy1 == 0;
				if (flag20)
				{
					this.dy1 = array[this.indexSkill].e1dy;
				}
				SmallImage.drawSmallImage(g, this.eff1.arrEfInfo[this.i1].idImg, this.cx - this.dx1 - this.eff1.arrEfInfo[this.i1].dx, this.cy + this.dy1 + this.eff1.arrEfInfo[this.i1].dy, 2, mGraphics.VCENTER | mGraphics.HCENTER);
				this.i1++;
				bool flag21 = this.i1 >= this.eff1.arrEfInfo.Length;
				if (flag21)
				{
					this.eff1 = null;
					this.i1 = 0;
					this.dx1 = 0;
					this.dy1 = 0;
				}
			}
			bool flag22 = this.eff2 != null;
			if (flag22)
			{
				bool flag23 = this.dx2 == 0;
				if (flag23)
				{
					this.dx2 = array[this.indexSkill].e2dx;
				}
				bool flag24 = this.dy2 == 0;
				if (flag24)
				{
					this.dy2 = array[this.indexSkill].e2dy;
				}
				SmallImage.drawSmallImage(g, this.eff2.arrEfInfo[this.i2].idImg, this.cx - this.dx2 - this.eff2.arrEfInfo[this.i2].dx, this.cy + this.dy2 + this.eff2.arrEfInfo[this.i2].dy, 2, mGraphics.VCENTER | mGraphics.HCENTER);
				this.i2++;
				bool flag25 = this.i2 >= this.eff2.arrEfInfo.Length;
				if (flag25)
				{
					this.eff2 = null;
					this.i2 = 0;
					this.dx2 = 0;
					this.dy2 = 0;
				}
			}
		}
		this.indexSkill++;
	}

	// Token: 0x06000244 RID: 580 RVA: 0x00020B6C File Offset: 0x0001ED6C
	public static int getIndexChar(int ID)
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char.charID == ID;
			if (flag)
			{
				return i;
			}
		}
		return -1;
	}

	// Token: 0x06000245 RID: 581 RVA: 0x00020BC0 File Offset: 0x0001EDC0
	public void moveTo(int toX, int toY, int type)
	{
		bool flag = type == 1 || Res.abs(toX - this.cx) > 100 || Res.abs(toY - this.cy) > 300;
		if (flag)
		{
			this.createShadow(this.cx, this.cy, 10);
			this.cx = toX;
			this.cy = toY;
			this.vMovePoints.removeAllElements();
			this.statusMe = 6;
			this.cp3 = 0;
			this.currentMovePoint = null;
			this.cf = 25;
		}
		else
		{
			int dir = 0;
			int act = 0;
			int num = toX - this.cx;
			int num2 = toY - this.cy;
			bool flag2 = num == 0 && num2 == 0;
			if (flag2)
			{
				act = 1;
				this.cp3 = 0;
			}
			else
			{
				bool flag3 = num2 == 0;
				if (flag3)
				{
					act = 2;
					bool flag4 = num > 0;
					if (flag4)
					{
						dir = 1;
					}
					bool flag5 = num < 0;
					if (flag5)
					{
						dir = -1;
					}
				}
				else
				{
					bool flag6 = num2 != 0;
					if (flag6)
					{
						bool flag7 = num2 < 0;
						if (flag7)
						{
							act = 3;
						}
						bool flag8 = num2 > 0;
						if (flag8)
						{
							act = 4;
						}
						bool flag9 = num < 0;
						if (flag9)
						{
							dir = -1;
						}
						bool flag10 = num > 0;
						if (flag10)
						{
							dir = 1;
						}
					}
				}
			}
			this.vMovePoints.addElement(new MovePoint(toX, toY, act, dir));
			bool flag11 = this.statusMe != 6;
			if (flag11)
			{
				this.statusBeforeNothing = this.statusMe;
			}
			this.statusMe = 6;
			this.cp3 = 0;
		}
	}

	// Token: 0x06000246 RID: 582 RVA: 0x00020D38 File Offset: 0x0001EF38
	public static void getcharInjure(int cID, int dx, int dy, long HP)
	{
		global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(cID);
		bool flag = @char.vMovePoints.size() != 0;
		if (flag)
		{
			MovePoint movePoint = (MovePoint)@char.vMovePoints.lastElement();
			int xEnd = movePoint.xEnd + dx;
			int yEnd = movePoint.yEnd + dy;
			global::Char char2 = (global::Char)GameScr.vCharInMap.elementAt(cID);
			char2.cHP -= HP;
			bool flag2 = char2.cHP < 0L;
			if (flag2)
			{
				char2.cHP = 0L;
			}
			char2.cHPShow = ((global::Char)GameScr.vCharInMap.elementAt(cID)).cHP - HP;
			char2.statusMe = 6;
			char2.cp3 = 0;
			char2.vMovePoints.addElement(new MovePoint(xEnd, yEnd, 8, char2.cdir));
		}
	}

	// Token: 0x06000247 RID: 583 RVA: 0x00020E1C File Offset: 0x0001F01C
	public bool isMagicTree()
	{
		bool flag = GameScr.gI().magicTree != null;
		bool result;
		if (flag)
		{
			int x = GameScr.gI().magicTree.x;
			int y = GameScr.gI().magicTree.y;
			bool flag2 = this.cx > x - 30 && this.cx < x + 30 && this.cy > y - 30 && this.cy < y + 30;
			result = flag2;
		}
		else
		{
			result = false;
		}
		return result;
	}

	// Token: 0x06000248 RID: 584 RVA: 0x00020EA8 File Offset: 0x0001F0A8
	public void searchItem()
	{
		int[] array = new int[]
		{
			-1,
			-1,
			-1,
			-1
		};
		bool flag = this.itemFocus != null;
		if (!flag)
		{
			for (int i = 0; i < GameScr.vItemMap.size(); i++)
			{
				ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
				int num = global::Math.abs(global::Char.myCharz().cx - itemMap.x);
				int num2 = global::Math.abs(global::Char.myCharz().cy - itemMap.y);
				int num3 = (num <= num2) ? num2 : num;
				bool flag2 = num > 48 || num2 > 48 || (this.itemFocus != null && num3 >= array[3]);
				if (!flag2)
				{
					bool flag3 = GameScr.gI().auto != 0 && GameScr.gI().isBagFull();
					if (flag3)
					{
						bool flag4 = itemMap.template.type == 9;
						if (flag4)
						{
							this.itemFocus = itemMap;
							array[3] = num3;
						}
					}
					else
					{
						this.itemFocus = itemMap;
						array[3] = num3;
					}
				}
			}
		}
	}

	// Token: 0x06000249 RID: 585 RVA: 0x00020FD0 File Offset: 0x0001F1D0
	public void searchFocus()
	{
		bool flag = global::Char.myCharz().skillPaint != null || global::Char.myCharz().arr != null || global::Char.myCharz().dart != null;
		if (flag)
		{
			this.timeFocusToMob = 200;
		}
		else
		{
			bool flag2 = this.timeFocusToMob > 0;
			if (flag2)
			{
				this.timeFocusToMob--;
			}
			else
			{
				bool flag3 = global::Char.isManualFocus && this.charFocus != null && (this.charFocus.statusMe == 15 || this.charFocus.isInvisiblez);
				if (flag3)
				{
					this.charFocus = null;
				}
				bool flag4 = GameCanvas.gameTick % 2 == 0 || this.isMeCanAttackOtherPlayer(this.charFocus);
				if (!flag4)
				{
					int num = 0;
					bool flag5 = this.nClass != null && (this.nClass.classId == 0 || this.nClass.classId == 1 || this.nClass.classId == 3 || this.nClass.classId == 5);
					if (flag5)
					{
						num = 40;
					}
					int[] array = new int[]
					{
						-1,
						-1,
						-1,
						-1
					};
					int num2 = GameScr.cmx - 10;
					int num3 = GameScr.cmx + GameCanvas.w + 10;
					int num4 = GameScr.cmy;
					int num5 = GameScr.cmy + GameCanvas.h - GameScr.cmdBarH + 10;
					bool flag6 = global::Char.isManualFocus;
					if (flag6)
					{
						bool flag7 = (this.mobFocus != null && this.mobFocus.status != 1 && this.mobFocus.status != 0 && num2 <= this.mobFocus.x && this.mobFocus.x <= num3 && num4 <= this.mobFocus.y && this.mobFocus.y <= num5) || (this.npcFocus != null && num2 <= this.npcFocus.cx && this.npcFocus.cx <= num3 && num4 <= this.npcFocus.cy && this.npcFocus.cy <= num5) || (this.charFocus != null && num2 <= this.charFocus.cx && this.charFocus.cx <= num3 && num4 <= this.charFocus.cy && this.charFocus.cy <= num5) || (this.itemFocus != null && num2 <= this.itemFocus.x && this.itemFocus.x <= num3 && num4 <= this.itemFocus.y && this.itemFocus.y <= num5);
						if (flag7)
						{
							return;
						}
						global::Char.isManualFocus = false;
					}
					num2 = global::Char.myCharz().cx - 80;
					num3 = global::Char.myCharz().cx + 80;
					num4 = global::Char.myCharz().cy - 30;
					num5 = global::Char.myCharz().cy + 30;
					bool flag8 = this.npcFocus != null && this.npcFocus.template.npcTemplateId == 6;
					if (flag8)
					{
						num2 = global::Char.myCharz().cx - 20;
						num3 = global::Char.myCharz().cx + 20;
						num4 = global::Char.myCharz().cy - 10;
						num5 = global::Char.myCharz().cy + 10;
					}
					bool flag9 = this.npcFocus == null;
					if (flag9)
					{
						for (int i = 0; i < GameScr.vNpc.size(); i++)
						{
							Npc npc = (Npc)GameScr.vNpc.elementAt(i);
							bool flag10 = npc.statusMe != 15;
							if (flag10)
							{
								int num6 = global::Math.abs(global::Char.myCharz().cx - npc.cx);
								int num7 = global::Math.abs(global::Char.myCharz().cy - npc.cy);
								int num8 = (num6 <= num7) ? num7 : num6;
								num2 = global::Char.myCharz().cx - 80;
								num3 = global::Char.myCharz().cx + 80;
								num4 = global::Char.myCharz().cy - 30;
								num5 = global::Char.myCharz().cy + 30;
								bool flag11 = npc.template.npcTemplateId == 6;
								if (flag11)
								{
									num2 = global::Char.myCharz().cx - 20;
									num3 = global::Char.myCharz().cx + 20;
									num4 = global::Char.myCharz().cy - 10;
									num5 = global::Char.myCharz().cy + 10;
								}
								bool flag12 = num2 <= npc.cx && npc.cx <= num3 && num4 <= npc.cy && npc.cy <= num5 && (this.npcFocus == null || num8 < array[1]);
								if (flag12)
								{
									this.npcFocus = npc;
									array[1] = num8;
								}
							}
						}
					}
					else
					{
						bool flag13 = num2 <= this.npcFocus.cx && this.npcFocus.cx <= num3 && num4 <= this.npcFocus.cy && this.npcFocus.cy <= num5;
						if (flag13)
						{
							this.clearFocus(1);
							return;
						}
						this.deFocusNPC();
						for (int j = 0; j < GameScr.vNpc.size(); j++)
						{
							Npc npc2 = (Npc)GameScr.vNpc.elementAt(j);
							bool flag14 = npc2.statusMe != 15;
							if (flag14)
							{
								int num9 = global::Math.abs(global::Char.myCharz().cx - npc2.cx);
								int num10 = global::Math.abs(global::Char.myCharz().cy - npc2.cy);
								int num11 = (num9 <= num10) ? num10 : num9;
								num2 = global::Char.myCharz().cx - 80;
								num3 = global::Char.myCharz().cx + 80;
								num4 = global::Char.myCharz().cy - 30;
								num5 = global::Char.myCharz().cy + 30;
								bool flag15 = npc2.template.npcTemplateId == 6;
								if (flag15)
								{
									num2 = global::Char.myCharz().cx - 20;
									num3 = global::Char.myCharz().cx + 20;
									num4 = global::Char.myCharz().cy - 10;
									num5 = global::Char.myCharz().cy + 10;
								}
								bool flag16 = num2 <= npc2.cx && npc2.cx <= num3 && num4 <= npc2.cy && npc2.cy <= num5 && (this.npcFocus == null || num11 < array[1]);
								if (flag16)
								{
									this.npcFocus = npc2;
									array[1] = num11;
								}
							}
						}
					}
					bool flag17 = this.itemFocus == null;
					if (flag17)
					{
						for (int k = 0; k < GameScr.vItemMap.size(); k++)
						{
							ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(k);
							int num12 = global::Math.abs(global::Char.myCharz().cx - itemMap.x);
							int num13 = global::Math.abs(global::Char.myCharz().cy - itemMap.y);
							int num14 = (num12 <= num13) ? num13 : num12;
							bool flag18 = num12 > 48 || num13 > 48 || (this.itemFocus != null && num14 >= array[3]);
							if (!flag18)
							{
								bool flag19 = GameScr.gI().auto != 0 && GameScr.gI().isBagFull();
								if (flag19)
								{
									bool flag20 = itemMap.template.type == 9;
									if (flag20)
									{
										this.itemFocus = itemMap;
										array[3] = num14;
									}
								}
								else
								{
									this.itemFocus = itemMap;
									array[3] = num14;
								}
							}
						}
					}
					else
					{
						bool flag21 = num2 <= this.itemFocus.x && this.itemFocus.x <= num3 && num4 <= this.itemFocus.y && this.itemFocus.y <= num5;
						if (flag21)
						{
							this.clearFocus(3);
							return;
						}
						this.itemFocus = null;
						for (int l = 0; l < GameScr.vItemMap.size(); l++)
						{
							ItemMap itemMap2 = (ItemMap)GameScr.vItemMap.elementAt(l);
							int num15 = global::Math.abs(global::Char.myCharz().cx - itemMap2.x);
							int num16 = global::Math.abs(global::Char.myCharz().cy - itemMap2.y);
							int num17 = (num15 <= num16) ? num16 : num15;
							bool flag22 = num2 > itemMap2.x || itemMap2.x > num3 || num4 > itemMap2.y || itemMap2.y > num5 || (this.itemFocus != null && num17 >= array[3]);
							if (!flag22)
							{
								bool flag23 = GameScr.gI().auto != 0 && GameScr.gI().isBagFull();
								if (flag23)
								{
									bool flag24 = itemMap2.template.type == 9;
									if (flag24)
									{
										this.itemFocus = itemMap2;
										array[3] = num17;
									}
								}
								else
								{
									this.itemFocus = itemMap2;
									array[3] = num17;
								}
							}
						}
					}
					num2 = global::Char.myCharz().cx - global::Char.myCharz().getdxSkill() - 10;
					num3 = global::Char.myCharz().cx + global::Char.myCharz().getdxSkill() + 10;
					num4 = global::Char.myCharz().cy - global::Char.myCharz().getdySkill() - num - 20;
					num5 = global::Char.myCharz().cy + global::Char.myCharz().getdySkill() + 20;
					bool flag25 = num5 > global::Char.myCharz().cy + 30;
					if (flag25)
					{
						num5 = global::Char.myCharz().cy + 30;
					}
					bool flag26 = this.mobFocus == null;
					if (flag26)
					{
						for (int m = 0; m < GameScr.vMob.size(); m++)
						{
							Mob mob = (Mob)GameScr.vMob.elementAt(m);
							int num18 = global::Math.abs(global::Char.myCharz().cx - mob.x);
							int num19 = global::Math.abs(global::Char.myCharz().cy - mob.y);
							int num20 = (num18 <= num19) ? num19 : num18;
							bool flag27 = num2 <= mob.x && mob.x <= num3 && num4 <= mob.y && mob.y <= num5 && (this.mobFocus == null || num20 < array[0]);
							if (flag27)
							{
								this.mobFocus = mob;
								array[0] = num20;
							}
						}
					}
					else
					{
						bool flag28 = this.mobFocus.status != 1 && this.mobFocus.status != 0 && num2 <= this.mobFocus.x && this.mobFocus.x <= num3 && num4 <= this.mobFocus.y && this.mobFocus.y <= num5;
						if (flag28)
						{
							this.clearFocus(0);
							return;
						}
						this.mobFocus = null;
						for (int n = 0; n < GameScr.vMob.size(); n++)
						{
							Mob mob2 = (Mob)GameScr.vMob.elementAt(n);
							int num21 = global::Math.abs(global::Char.myCharz().cx - mob2.x);
							int num22 = global::Math.abs(global::Char.myCharz().cy - mob2.y);
							int num23 = (num21 <= num22) ? num22 : num21;
							bool flag29 = num2 <= mob2.x && mob2.x <= num3 && num4 <= mob2.y && mob2.y <= num5 && (this.mobFocus == null || num23 < array[0]);
							if (flag29)
							{
								this.mobFocus = mob2;
								array[0] = num23;
							}
						}
					}
					bool flag30 = this.charFocus == null;
					if (flag30)
					{
						for (int num24 = 0; num24 < GameScr.vCharInMap.size(); num24++)
						{
							global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(num24);
							bool flag31 = @char.statusMe != 15 && !@char.isInvisiblez && this.wdx == 0 && this.wdy == 0;
							if (flag31)
							{
								int num25 = global::Math.abs(global::Char.myCharz().cx - @char.cx);
								int num26 = global::Math.abs(global::Char.myCharz().cy - @char.cy);
								int num27 = (num25 <= num26) ? num26 : num25;
								bool flag32 = num2 <= @char.cx && @char.cx <= num3 && num4 <= @char.cy && @char.cy <= num5 && (this.charFocus == null || num27 < array[2]);
								if (flag32)
								{
									this.charFocus = @char;
									array[2] = num27;
								}
							}
						}
					}
					else
					{
						bool flag33 = num2 <= this.charFocus.cx && this.charFocus.cx <= num3 && num4 <= this.charFocus.cy && this.charFocus.cy <= num5 && this.charFocus.statusMe != 15 && !this.charFocus.isInvisiblez;
						if (flag33)
						{
							this.clearFocus(2);
							return;
						}
						this.charFocus = null;
						for (int num28 = 0; num28 < GameScr.vCharInMap.size(); num28++)
						{
							global::Char char2 = (global::Char)GameScr.vCharInMap.elementAt(num28);
							bool flag34 = char2.statusMe != 15 && !char2.isInvisiblez && this.wdx == 0 && this.wdy == 0;
							if (flag34)
							{
								int num29 = global::Math.abs(global::Char.myCharz().cx - char2.cx);
								int num30 = global::Math.abs(global::Char.myCharz().cy - char2.cy);
								int num31 = (num29 <= num30) ? num30 : num29;
								bool flag35 = num2 <= char2.cx && char2.cx <= num3 && num4 <= char2.cy && char2.cy <= num5 && (this.charFocus == null || num31 < array[2]);
								if (flag35)
								{
									this.charFocus = char2;
									array[2] = num31;
								}
							}
						}
					}
					int num32 = -1;
					for (int num33 = 0; num33 < array.Length; num33++)
					{
						bool flag36 = num32 == -1;
						if (flag36)
						{
							bool flag37 = array[num33] != -1;
							if (flag37)
							{
								num32 = num33;
							}
						}
						else
						{
							bool flag38 = array[num33] < array[num32] && array[num33] != -1;
							if (flag38)
							{
								num32 = num33;
							}
						}
					}
					this.clearFocus(num32);
					bool flag39 = this.me && this.isAttacPlayerStatus();
					if (flag39)
					{
						bool flag40 = this.mobFocus != null && !this.mobFocus.isMobMe;
						if (flag40)
						{
							this.mobFocus = null;
						}
						this.npcFocus = null;
						this.itemFocus = null;
					}
				}
			}
		}
	}

	// Token: 0x0600024A RID: 586 RVA: 0x00021F20 File Offset: 0x00020120
	public void clearFocus(int index)
	{
		switch (index)
		{
		case 0:
			this.deFocusNPC();
			this.charFocus = null;
			this.itemFocus = null;
			break;
		case 1:
			this.mobFocus = null;
			this.charFocus = null;
			this.itemFocus = null;
			break;
		case 2:
			this.mobFocus = null;
			this.deFocusNPC();
			this.itemFocus = null;
			break;
		case 3:
			this.mobFocus = null;
			this.deFocusNPC();
			this.charFocus = null;
			break;
		}
	}

	// Token: 0x0600024B RID: 587 RVA: 0x00021FA8 File Offset: 0x000201A8
	public static bool isCharInScreen(global::Char c)
	{
		int cmx = GameScr.cmx;
		int num = GameScr.cmx + GameCanvas.w;
		int num2 = GameScr.cmy + 10;
		int num3 = GameScr.cmy + GameScr.gH;
		return c.statusMe != 15 && !c.isInvisiblez && cmx <= c.cx && c.cx <= num && num2 <= c.cy && c.cy <= num3;
	}

	// Token: 0x0600024C RID: 588 RVA: 0x0002202C File Offset: 0x0002022C
	public bool isAttacPlayerStatus()
	{
		return this.cTypePk == 4 || this.cTypePk == 3;
	}

	// Token: 0x0600024D RID: 589 RVA: 0x00022054 File Offset: 0x00020254
	public void setHoldChar(global::Char r)
	{
		bool flag = this.cx < r.cx;
		if (flag)
		{
			this.cdir = 1;
		}
		else
		{
			this.cdir = -1;
		}
		this.charHold = r;
		this.holder = true;
	}

	// Token: 0x0600024E RID: 590 RVA: 0x00022098 File Offset: 0x00020298
	public void setHoldMob(Mob r)
	{
		bool flag = this.cx < r.x;
		if (flag)
		{
			this.cdir = 1;
		}
		else
		{
			this.cdir = -1;
		}
		this.mobHold = r;
		this.holder = true;
	}

	// Token: 0x0600024F RID: 591 RVA: 0x000220DC File Offset: 0x000202DC
	public void findNextFocusByKey()
	{
		Res.outz("focus size= " + this.focus.size().ToString());
		bool flag = (global::Char.myCharz().skillPaint != null || global::Char.myCharz().arr != null || global::Char.myCharz().dart != null || global::Char.myCharz().skillInfoPaint() != null) && this.focus.size() == 0;
		if (!flag)
		{
			this.focus.removeAllElements();
			int num = 0;
			int num2 = GameScr.cmx + 10;
			int num3 = GameScr.cmx + GameCanvas.w - 10;
			int num4 = GameScr.cmy + 10;
			int num5 = GameScr.cmy + GameScr.gH;
			for (int i = 0; i < GameScr.vCharInMap.size(); i++)
			{
				global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
				bool flag2 = @char.statusMe != 15 && !@char.isInvisiblez && num2 <= @char.cx && @char.cx <= num3 && num4 <= @char.cy && @char.cy <= num5 && @char.charID != -114 && (TileMap.mapID != 129 || (TileMap.mapID == 129 && global::Char.myCharz().cy > 264));
				if (flag2)
				{
					this.focus.addElement(@char);
					bool flag3 = this.charFocus != null && @char.Equals(this.charFocus);
					if (flag3)
					{
						num = this.focus.size();
					}
				}
			}
			bool flag4 = this.me && this.isAttacPlayerStatus();
			if (flag4)
			{
				Res.outz("co the tan cong nguoi");
				for (int j = 0; j < GameScr.vMob.size(); j++)
				{
					Mob mob = (Mob)GameScr.vMob.elementAt(j);
					bool flag5 = !GameScr.gI().isMeCanAttackMob(mob);
					if (flag5)
					{
						Res.outz("khong the tan cong quai");
						this.mobFocus = null;
					}
					else
					{
						Res.outz("co the tan ong quai");
						this.focus.addElement(mob);
						bool flag6 = this.mobFocus != null;
						if (flag6)
						{
							num = this.focus.size();
						}
					}
				}
				this.npcFocus = null;
				this.itemFocus = null;
				bool flag7 = this.focus.size() > 0;
				if (flag7)
				{
					bool flag8 = num >= this.focus.size();
					if (flag8)
					{
						num = 0;
					}
					this.focusManualTo(this.focus.elementAt(num));
				}
				else
				{
					this.mobFocus = null;
					this.deFocusNPC();
					this.charFocus = null;
					this.itemFocus = null;
					global::Char.isManualFocus = false;
				}
			}
			else
			{
				for (int k = 0; k < GameScr.vItemMap.size(); k++)
				{
					ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(k);
					bool flag9 = num2 <= itemMap.x && itemMap.x <= num3 && num4 <= itemMap.y && itemMap.y <= num5;
					if (flag9)
					{
						this.focus.addElement(itemMap);
						bool flag10 = this.itemFocus != null && itemMap.Equals(this.itemFocus);
						if (flag10)
						{
							num = this.focus.size();
						}
					}
				}
				for (int l = 0; l < GameScr.vMob.size(); l++)
				{
					Mob mob2 = (Mob)GameScr.vMob.elementAt(l);
					bool flag11 = mob2.status != 1 && mob2.status != 0 && num2 <= mob2.x && mob2.x <= num3 && num4 <= mob2.y && mob2.y <= num5;
					if (flag11)
					{
						this.focus.addElement(mob2);
						bool flag12 = this.mobFocus != null && mob2.Equals(this.mobFocus);
						if (flag12)
						{
							num = this.focus.size();
						}
					}
				}
				for (int m = 0; m < GameScr.vNpc.size(); m++)
				{
					Npc npc = (Npc)GameScr.vNpc.elementAt(m);
					bool flag13 = npc.statusMe != 15 && num2 <= npc.cx && npc.cx <= num3 && num4 <= npc.cy && npc.cy <= num5;
					if (flag13)
					{
						this.focus.addElement(npc);
						bool flag14 = this.npcFocus != null && npc.Equals(this.npcFocus);
						if (flag14)
						{
							num = this.focus.size();
						}
					}
				}
				bool flag15 = this.focus.size() > 0;
				if (flag15)
				{
					bool flag16 = num >= this.focus.size();
					if (flag16)
					{
						num = 0;
					}
					this.focusManualTo(this.focus.elementAt(num));
				}
				else
				{
					this.mobFocus = null;
					this.deFocusNPC();
					this.charFocus = null;
					this.itemFocus = null;
					global::Char.isManualFocus = false;
				}
			}
		}
	}

	// Token: 0x06000250 RID: 592 RVA: 0x00022650 File Offset: 0x00020850
	public void deFocusNPC()
	{
		bool flag = this.me && this.npcFocus != null;
		if (flag)
		{
			bool flag2 = !GameCanvas.menu.showMenu;
			if (flag2)
			{
				global::Char.chatPopup = null;
			}
			this.npcFocus = null;
		}
	}

	// Token: 0x06000251 RID: 593 RVA: 0x00022698 File Offset: 0x00020898
	public void updateCharInBridge()
	{
		bool flag = !GameCanvas.lowGraphic;
		if (flag)
		{
			bool flag2 = TileMap.tileTypeAt(this.cx, this.cy + 1, 1024);
			if (flag2)
			{
				TileMap.setTileTypeAtPixel(this.cx, this.cy + 1, 512);
				TileMap.setTileTypeAtPixel(this.cx, this.cy - 2, 512);
			}
			bool flag3 = TileMap.tileTypeAt(this.cx - (int)TileMap.size, this.cy + 1, 512);
			if (flag3)
			{
				TileMap.killTileTypeAt(this.cx - (int)TileMap.size, this.cy + 1, 512);
				TileMap.killTileTypeAt(this.cx - (int)TileMap.size, this.cy - 2, 512);
			}
			bool flag4 = TileMap.tileTypeAt(this.cx + (int)TileMap.size, this.cy + 1, 512);
			if (flag4)
			{
				TileMap.killTileTypeAt(this.cx + (int)TileMap.size, this.cy + 1, 512);
				TileMap.killTileTypeAt(this.cx + (int)TileMap.size, this.cy - 2, 512);
			}
		}
	}

	// Token: 0x06000252 RID: 594 RVA: 0x000227CC File Offset: 0x000209CC
	public static void sort(int[] data)
	{
		int num = 5;
		for (int i = 0; i < num - 1; i++)
		{
			for (int j = i + 1; j < num; j++)
			{
				bool flag = data[i] < data[j];
				if (flag)
				{
					int num2 = data[j];
					data[j] = data[i];
					data[i] = num2;
				}
			}
		}
	}

	// Token: 0x06000253 RID: 595 RVA: 0x00022828 File Offset: 0x00020A28
	public static bool setInsc(int cmX, int cmWx, int x, int cmy, int cmyH, int y)
	{
		bool flag = x > cmWx || x < cmX || y > cmyH || y < cmy;
		return !flag;
	}

	// Token: 0x06000254 RID: 596 RVA: 0x0002285C File Offset: 0x00020A5C
	public void kickOption(Item item, int maxKick)
	{
		int num = 0;
		bool flag = item == null || item.options == null;
		if (!flag)
		{
			for (int i = 0; i < item.options.size(); i++)
			{
				ItemOption itemOption = (ItemOption)item.options.elementAt(i);
				itemOption.active = 0;
				bool flag2 = itemOption.optionTemplate.type == 2;
				if (flag2)
				{
					bool flag3 = num < maxKick;
					if (flag3)
					{
						itemOption.active = 1;
						num++;
					}
				}
				else
				{
					bool flag4 = itemOption.optionTemplate.type == 3 && item.upgrade >= 4;
					if (flag4)
					{
						itemOption.active = 1;
					}
					else
					{
						bool flag5 = itemOption.optionTemplate.type == 4 && item.upgrade >= 8;
						if (flag5)
						{
							itemOption.active = 1;
						}
						else
						{
							bool flag6 = itemOption.optionTemplate.type == 5 && item.upgrade >= 12;
							if (flag6)
							{
								itemOption.active = 1;
							}
							else
							{
								bool flag7 = itemOption.optionTemplate.type == 6 && item.upgrade >= 14;
								if (flag7)
								{
									itemOption.active = 1;
								}
								else
								{
									bool flag8 = itemOption.optionTemplate.type == 7 && item.upgrade >= 16;
									if (flag8)
									{
										itemOption.active = 1;
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x06000255 RID: 597 RVA: 0x000229E4 File Offset: 0x00020BE4
	public void doInjure(long HPShow, long MPShow, bool isCrit, bool isMob)
	{
		this.isCrit = isCrit;
		this.isMob = isMob;
		Res.outz(string.Concat(new string[]
		{
			"CHP= ",
			this.cHP.ToString(),
			" dame -= ",
			HPShow.ToString(),
			" HP FULL= ",
			this.cHPFull.ToString()
		}));
		this.cHP -= HPShow;
		this.cMP -= MPShow;
		GameScr.gI().isInjureHp = true;
		GameScr.gI().twHp = 0L;
		GameScr.gI().isInjureMp = true;
		GameScr.gI().twMp = 0L;
		bool flag = this.cHP < 0L;
		if (flag)
		{
			this.cHP = 0L;
		}
		bool flag2 = this.cMP < 0L;
		if (flag2)
		{
			this.cMP = 0L;
		}
		bool flag3 = isMob || (!isMob && this.cTypePk != 4 && this.damMP != -100L);
		if (flag3)
		{
			bool flag4 = HPShow <= 0L;
			if (flag4)
			{
				bool flag5 = this.me;
				if (flag5)
				{
					GameScr.startFlyText(mResources.miss, this.cx, this.cy - this.ch, 0, -2, mFont.MISS_ME);
				}
				else
				{
					GameScr.startFlyText(mResources.miss, this.cx, this.cy - this.ch, 0, -2, mFont.MISS);
				}
			}
			else
			{
				GameScr.startFlyText("-" + HPShow.ToString(), this.cx, this.cy - this.ch, 0, -2, isCrit ? mFont.FATAL : mFont.RED);
			}
		}
		bool flag6 = HPShow > 0L;
		if (flag6)
		{
			this.isInjure = 6;
		}
		ServerEffect.addServerEffect(80, this, 1);
		bool flag7 = this.isDie;
		if (flag7)
		{
			this.isDie = false;
			global::Char.isLockKey = false;
			this.startDie((short)this.xSd, (short)this.ySd);
		}
	}

	// Token: 0x06000256 RID: 598 RVA: 0x00022BF4 File Offset: 0x00020DF4
	public void doInjure()
	{
		GameScr.gI().isInjureHp = true;
		GameScr.gI().twHp = 0L;
		GameScr.gI().isInjureMp = true;
		GameScr.gI().twMp = 0L;
		this.isInjure = 6;
		ServerEffect.addServerEffect(8, this, 1);
		this.isInjureHp = true;
		this.twHp = 0;
	}

	// Token: 0x06000257 RID: 599 RVA: 0x00022C50 File Offset: 0x00020E50
	public void startDie(short toX, short toY)
	{
		this.isMonkey = 0;
		this.isWaitMonkey = false;
		bool flag = this.me && this.isDie;
		if (!flag)
		{
			bool flag2 = this.me;
			if (flag2)
			{
				this.isLockMove = true;
				for (int i = 0; i < GameScr.vCharInMap.size(); i++)
				{
					global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
					@char.killCharId = -9999;
				}
				bool flag3 = GameCanvas.panel != null && GameCanvas.panel.cp != null;
				if (flag3)
				{
					GameCanvas.panel.cp = null;
				}
				bool flag4 = GameCanvas.panel2 != null && GameCanvas.panel2.cp != null;
				if (flag4)
				{
					GameCanvas.panel2.cp = null;
				}
			}
			this.statusMe = 5;
			this.cp2 = (int)toX;
			this.cp3 = (int)toY;
			this.cp1 = 0;
			this.cHP = 0L;
			this.testCharId = -9999;
			this.killCharId = -9999;
			bool flag5 = this.me && this.myskill != null && this.myskill.template.id != 14;
			if (flag5)
			{
				this.stopUseChargeSkill();
			}
			this.cTypePk = 0;
		}
	}

	// Token: 0x06000258 RID: 600 RVA: 0x00022DA4 File Offset: 0x00020FA4
	public void waitToDie(short toX, short toY)
	{
		this.wdx = toX;
		this.wdy = toY;
	}

	// Token: 0x06000259 RID: 601 RVA: 0x00022DB8 File Offset: 0x00020FB8
	public void liveFromDead()
	{
		this.cHP = this.cHPFull;
		this.cMP = this.cMPFull;
		this.statusMe = 1;
		this.cp1 = (this.cp2 = (this.cp3 = 0));
		ServerEffect.addServerEffect(109, this, 2);
		GameScr.gI().center = null;
		GameScr.isHaveSelectSkill = true;
	}

	// Token: 0x0600025A RID: 602 RVA: 0x00022E1C File Offset: 0x0002101C
	public bool doUsePotion()
	{
		bool flag = this.arrItemBag == null;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			for (int i = 0; i < this.arrItemBag.Length; i++)
			{
				bool flag2 = this.arrItemBag[i] != null && this.arrItemBag[i].template.type == 6;
				if (flag2)
				{
					Service.gI().useItem(0, 1, -1, this.arrItemBag[i].template.id);
					return true;
				}
			}
			result = false;
		}
		return result;
	}

	// Token: 0x0600025B RID: 603 RVA: 0x00022EA8 File Offset: 0x000210A8
	public bool isLang()
	{
		return TileMap.mapID == 1 || TileMap.mapID == 27 || TileMap.mapID == 72 || TileMap.mapID == 10 || TileMap.mapID == 17 || TileMap.mapID == 22 || TileMap.mapID == 32 || TileMap.mapID == 38 || TileMap.mapID == 43 || TileMap.mapID == 48;
	}

	// Token: 0x0600025C RID: 604 RVA: 0x00022F20 File Offset: 0x00021120
	public bool isMeCanAttackOtherPlayer(global::Char cAtt)
	{
		bool flag = cAtt == null || global::Char.myCharz().myskill == null || global::Char.myCharz().myskill.template.type == 2 || (global::Char.myCharz().myskill.template.type == 4 && cAtt.statusMe != 14 && cAtt.statusMe != 5);
		return !flag && (((cAtt.cTypePk == 3 && global::Char.myCharz().cTypePk == 3) || (global::Char.myCharz().cTypePk == 5 || cAtt.cTypePk == 5 || (global::Char.myCharz().cTypePk == 1 && cAtt.cTypePk == 1)) || (global::Char.myCharz().cTypePk == 4 && cAtt.cTypePk == 4) || (global::Char.myCharz().testCharId >= 0 && global::Char.myCharz().testCharId == cAtt.charID) || (global::Char.myCharz().killCharId >= 0 && global::Char.myCharz().killCharId == cAtt.charID && !this.isLang()) || (cAtt.killCharId >= 0 && cAtt.killCharId == global::Char.myCharz().charID && !this.isLang()) || (global::Char.myCharz().cFlag == 8 && cAtt.cFlag != 0) || (global::Char.myCharz().cFlag != 0 && cAtt.cFlag == 8) || (global::Char.myCharz().cFlag != cAtt.cFlag && global::Char.myCharz().cFlag != 0 && cAtt.cFlag != 0)) && cAtt.statusMe != 14) && cAtt.statusMe != 5;
	}

	// Token: 0x0600025D RID: 605 RVA: 0x000230D4 File Offset: 0x000212D4
	public void clearTask()
	{
		global::Char.myCharz().taskMaint = null;
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			bool flag = global::Char.myCharz().arrItemBag[i] != null && global::Char.myCharz().arrItemBag[i].template.type == 8;
			if (flag)
			{
				global::Char.myCharz().arrItemBag[i] = null;
			}
		}
		Npc.clearEffTask();
	}

	// Token: 0x0600025E RID: 606 RVA: 0x00023150 File Offset: 0x00021350
	public int getX()
	{
		return this.cx;
	}

	// Token: 0x0600025F RID: 607 RVA: 0x00023168 File Offset: 0x00021368
	public int getY()
	{
		return this.cy;
	}

	// Token: 0x06000260 RID: 608 RVA: 0x00023180 File Offset: 0x00021380
	public int getH()
	{
		return 32;
	}

	// Token: 0x06000261 RID: 609 RVA: 0x00023194 File Offset: 0x00021394
	public int getW()
	{
		return 24;
	}

	// Token: 0x06000262 RID: 610 RVA: 0x000231A8 File Offset: 0x000213A8
	public void focusManualTo(object objectz)
	{
		bool flag = objectz is Mob;
		if (flag)
		{
			this.mobFocus = (Mob)objectz;
			this.deFocusNPC();
			this.charFocus = null;
			this.itemFocus = null;
		}
		else
		{
			bool flag2 = objectz is Npc;
			if (flag2)
			{
				global::Char.myCharz().mobFocus = null;
				global::Char.myCharz().deFocusNPC();
				global::Char.myCharz().npcFocus = (Npc)objectz;
				global::Char.myCharz().charFocus = null;
				global::Char.myCharz().itemFocus = null;
			}
			else
			{
				bool flag3 = objectz is global::Char;
				if (flag3)
				{
					global::Char.myCharz().mobFocus = null;
					global::Char.myCharz().deFocusNPC();
					global::Char.myCharz().charFocus = (global::Char)objectz;
					global::Char.myCharz().itemFocus = null;
				}
				else
				{
					bool flag4 = objectz is ItemMap;
					if (flag4)
					{
						global::Char.myCharz().mobFocus = null;
						global::Char.myCharz().deFocusNPC();
						global::Char.myCharz().charFocus = null;
						global::Char.myCharz().itemFocus = (ItemMap)objectz;
					}
				}
			}
		}
		global::Char.isManualFocus = true;
	}

	// Token: 0x06000263 RID: 611 RVA: 0x000232C3 File Offset: 0x000214C3
	public void stopMoving()
	{
	}

	// Token: 0x06000264 RID: 612 RVA: 0x000232C6 File Offset: 0x000214C6
	public void cancelAttack()
	{
	}

	// Token: 0x06000265 RID: 613 RVA: 0x000232CC File Offset: 0x000214CC
	public bool isInvisible()
	{
		return false;
	}

	// Token: 0x06000266 RID: 614 RVA: 0x000232E0 File Offset: 0x000214E0
	public bool focusToAttack()
	{
		return this.mobFocus != null || (this.charFocus != null && this.isMeCanAttackOtherPlayer(this.charFocus));
	}

	// Token: 0x06000267 RID: 615 RVA: 0x00023314 File Offset: 0x00021514
	public void addDustEff(int type)
	{
		bool lowGraphic = GameCanvas.lowGraphic;
		if (!lowGraphic)
		{
			switch (type)
			{
			case 1:
			{
				bool flag = this.clevel >= 9;
				if (flag)
				{
					Effect effect = new Effect(19, this.cx - 5, this.cy + 20, 2, 1, -1);
					EffecMn.addEff(effect);
				}
				break;
			}
			case 2:
			{
				bool flag2 = (!this.me || this.isMonkey != 1) && this.isNhapThe && GameCanvas.gameTick % 5 == 0;
				if (flag2)
				{
					Effect effect2 = new Effect(22, this.cx - 5, this.cy + 35, 2, 1, -1);
					EffecMn.addEff(effect2);
				}
				break;
			}
			case 3:
			{
				bool flag3 = this.clevel >= 9 && this.ySd - this.cy <= 5;
				if (flag3)
				{
					Effect effect3 = new Effect(19, this.cx - 5, this.ySd + 20, 2, 1, -1);
					EffecMn.addEff(effect3);
				}
				break;
			}
			}
		}
	}

	// Token: 0x06000268 RID: 616 RVA: 0x00023430 File Offset: 0x00021630
	public bool isGetFlagImage(sbyte getFlag)
	{
		bool result = true;
		for (int i = 0; i < GameScr.vFlag.size(); i++)
		{
			PKFlag pkflag = (PKFlag)GameScr.vFlag.elementAt(i);
			bool flag = pkflag != null;
			if (flag)
			{
				bool flag2 = pkflag.cflag == getFlag;
				if (flag2)
				{
					return true;
				}
				result = false;
			}
		}
		return result;
	}

	// Token: 0x06000269 RID: 617 RVA: 0x00023498 File Offset: 0x00021698
	private void paintPKFlag(mGraphics g)
	{
		bool flag = this.cdir == 1;
		if (flag)
		{
			bool flag2 = this.cFlag != 0 && this.cFlag != -1;
			if (flag2)
			{
				SmallImage.drawSmallImage(g, this.flagImage, this.cx - 10, this.cy - this.ch - ((!this.me) ? 30 : 30) + ((GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0), 2, 0);
			}
		}
		else
		{
			bool flag3 = this.cFlag != 0 && this.cFlag != -1;
			if (flag3)
			{
				SmallImage.drawSmallImage(g, this.flagImage, this.cx, this.cy - this.ch - ((!this.me) ? 30 : 30) + ((GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0), 0, 0);
			}
		}
	}

	// Token: 0x0600026A RID: 618 RVA: 0x00023588 File Offset: 0x00021788
	public void removeHoleEff()
	{
		bool flag = this.holder;
		if (flag)
		{
			this.holder = false;
			this.charHold = null;
			this.mobHold = null;
		}
		else
		{
			this.holdEffID = 0;
			this.charHold = null;
			this.mobHold = null;
		}
	}

	// Token: 0x0600026B RID: 619 RVA: 0x000235D0 File Offset: 0x000217D0
	public void removeProtectEff()
	{
		this.protectEff = false;
		this.eProtect = null;
	}

	// Token: 0x0600026C RID: 620 RVA: 0x000235E1 File Offset: 0x000217E1
	public void removeBlindEff()
	{
		this.blindEff = false;
	}

	// Token: 0x0600026D RID: 621 RVA: 0x000235EC File Offset: 0x000217EC
	public void removeEffect()
	{
		bool flag = this.holdEffID != 0;
		if (flag)
		{
			this.holdEffID = 0;
		}
		bool flag2 = this.holder;
		if (flag2)
		{
			this.holder = false;
		}
		bool flag3 = this.protectEff;
		if (flag3)
		{
			this.protectEff = false;
		}
		this.eProtect = null;
		this.charHold = null;
		this.mobHold = null;
		this.blindEff = false;
		this.sleepEff = false;
	}

	// Token: 0x0600026E RID: 622 RVA: 0x0002365C File Offset: 0x0002185C
	public void setPos(short xPos, short yPos, sbyte typePos)
	{
		this.isSetPos = true;
		this.xPos = xPos;
		this.yPos = yPos;
		this.typePos = typePos;
		this.tpos = 0;
		bool flag = this.me;
		if (flag)
		{
			bool flag2 = GameCanvas.panel != null;
			if (flag2)
			{
				GameCanvas.panel.hide();
			}
			bool flag3 = GameCanvas.panel2 != null;
			if (flag3)
			{
				GameCanvas.panel2.hide();
			}
		}
	}

	// Token: 0x0600026F RID: 623 RVA: 0x000236CB File Offset: 0x000218CB
	public void removeHuytSao()
	{
		this.huytSao = false;
	}

	// Token: 0x06000270 RID: 624 RVA: 0x000236D5 File Offset: 0x000218D5
	public void fusionComplete()
	{
		this.isFusion = false;
		global::Char.isLockKey = false;
		this.tFusion = 0;
	}

	// Token: 0x06000271 RID: 625 RVA: 0x000236EC File Offset: 0x000218EC
	public void setFusion(sbyte fusion)
	{
		this.tFusion = 0;
		bool flag = fusion == 4 || fusion == 5;
		if (flag)
		{
			bool flag2 = this.me;
			if (flag2)
			{
				Service.gI().funsion(fusion);
			}
		}
		bool flag3 = fusion == 6;
		if (flag3)
		{
		}
		bool flag4 = this.me;
		if (flag4)
		{
			GameCanvas.panel.hideNow();
			global::Char.isLockKey = true;
		}
		this.isFusion = true;
		bool flag5 = fusion == 1;
		if (flag5)
		{
			this.isNhapThe = false;
		}
		else
		{
			this.isNhapThe = true;
		}
	}

	// Token: 0x06000272 RID: 626 RVA: 0x00023776 File Offset: 0x00021976
	public void removeSleepEff()
	{
		this.sleepEff = false;
	}

	// Token: 0x06000273 RID: 627 RVA: 0x00023780 File Offset: 0x00021980
	public void setPartOld()
	{
		this.headTemp = this.head;
		this.bodyTemp = this.body;
		this.legTemp = this.leg;
		this.bagTemp = this.bag;
	}

	// Token: 0x06000274 RID: 628 RVA: 0x000237B4 File Offset: 0x000219B4
	public void setPartTemp(int head, int body, int leg, int bag)
	{
		bool flag = head != -1;
		if (flag)
		{
			this.head = head;
		}
		bool flag2 = body != -1;
		if (flag2)
		{
			this.body = body;
		}
		bool flag3 = leg != -1;
		if (flag3)
		{
			this.leg = leg;
		}
		bool flag4 = bag != -1;
		if (flag4)
		{
			this.bag = bag;
		}
	}

	// Token: 0x06000275 RID: 629 RVA: 0x00023814 File Offset: 0x00021A14
	public void resetPartTemp()
	{
		bool flag = this.headTemp != -1;
		if (flag)
		{
			this.head = this.headTemp;
			this.headTemp = -1;
		}
		bool flag2 = this.bodyTemp != -1;
		if (flag2)
		{
			this.body = this.bodyTemp;
			this.bodyTemp = -1;
		}
		bool flag3 = this.legTemp != -1;
		if (flag3)
		{
			this.leg = this.legTemp;
			this.legTemp = -1;
		}
		bool flag4 = this.bagTemp != -1;
		if (flag4)
		{
			this.bag = this.bagTemp;
			this.bagTemp = -1;
		}
	}

	// Token: 0x06000276 RID: 630 RVA: 0x000238B8 File Offset: 0x00021AB8
	public Effect getEffById(int id)
	{
		for (int i = 0; i < this.vEffChar.size(); i++)
		{
			Effect effect = (Effect)this.vEffChar.elementAt(i);
			bool flag = effect.effId == id;
			if (flag)
			{
				return effect;
			}
		}
		return null;
	}

	// Token: 0x06000277 RID: 631 RVA: 0x0002390D File Offset: 0x00021B0D
	public void addEffChar(Effect e)
	{
		this.removeEffChar(0, e.effId);
		this.vEffChar.addElement(e);
	}

	// Token: 0x06000278 RID: 632 RVA: 0x0002392C File Offset: 0x00021B2C
	public void removeEffChar(int type, int id)
	{
		bool flag = type == -1;
		if (flag)
		{
			this.vEffChar.removeAllElements();
		}
		else
		{
			bool flag2 = this.getEffById(id) != null;
			if (flag2)
			{
				this.vEffChar.removeElement(this.getEffById(id));
			}
		}
	}

	// Token: 0x06000279 RID: 633 RVA: 0x00023978 File Offset: 0x00021B78
	public void paintEffBehind(mGraphics g)
	{
		for (int i = 0; i < this.vEffChar.size(); i++)
		{
			Effect effect = (Effect)this.vEffChar.elementAt(i);
			bool flag = effect.layer == 0;
			if (flag)
			{
				bool flag2 = true;
				bool flag3 = effect.isStand == 0;
				if (flag3)
				{
					flag2 = (this.statusMe == 1 || this.statusMe == 6);
				}
				bool flag4 = flag2;
				if (flag4)
				{
					effect.paint(g);
				}
			}
		}
	}

	// Token: 0x0600027A RID: 634 RVA: 0x00023A00 File Offset: 0x00021C00
	public void paintEffFront(mGraphics g)
	{
		for (int i = 0; i < this.vEffChar.size(); i++)
		{
			Effect effect = (Effect)this.vEffChar.elementAt(i);
			bool flag = effect.layer == 1;
			if (flag)
			{
				bool flag2 = true;
				bool flag3 = effect.isStand == 0;
				if (flag3)
				{
					flag2 = (this.statusMe == 1 || this.statusMe == 6);
				}
				bool flag4 = flag2;
				if (flag4)
				{
					effect.paint(g);
				}
			}
		}
	}

	// Token: 0x0600027B RID: 635 RVA: 0x00023A88 File Offset: 0x00021C88
	public void updEffChar()
	{
		for (int i = 0; i < this.vEffChar.size(); i++)
		{
			((Effect)this.vEffChar.elementAt(i)).update();
		}
	}

	// Token: 0x0600027C RID: 636 RVA: 0x00023ACC File Offset: 0x00021CCC
	public int checkLuong()
	{
		return this.luong + this.luongKhoa;
	}

	// Token: 0x0600027D RID: 637 RVA: 0x00023AEC File Offset: 0x00021CEC
	public void updateEye()
	{
		bool flag = this.head != 934;
		if (!flag)
		{
			bool flag2 = GameCanvas.timeNow - this.timeAddChopmat > 0L;
			if (flag2)
			{
				this.fChopmat++;
				bool flag3 = this.fChopmat > this.frEye.Length - 1;
				if (flag3)
				{
					this.fChopmat = 0;
					this.timeAddChopmat = GameCanvas.timeNow + (long)Res.random(2000, 3500);
					this.frEye = this.frChopCham;
					bool flag4 = Res.random(2) == 0;
					if (flag4)
					{
						this.frEye = this.frChopNhanh;
					}
				}
			}
			else
			{
				this.fChopmat = 0;
			}
		}
	}

	// Token: 0x0600027E RID: 638 RVA: 0x00023BA8 File Offset: 0x00021DA8
	private void paintRedEye(mGraphics g, int xx, int yy, int trans, int anchor)
	{
		bool flag = this.head != 934 || (this.statusMe != 1 && this.statusMe != 6);
		if (!flag)
		{
			bool flag2 = global::Char.fraRedEye == null || global::Char.fraRedEye.imgFrame == null;
			if (flag2)
			{
				Image img = mSystem.loadImage("/redeye.png");
				global::Char.fraRedEye = new FrameImage(img, 14, 10);
			}
			else
			{
				bool flag3 = this.frEye[this.fChopmat] != -1;
				if (flag3)
				{
					int num = 8;
					int num2 = 15;
					bool flag4 = trans == 2;
					if (flag4)
					{
						num = -8;
					}
					global::Char.fraRedEye.drawFrame(this.frEye[this.fChopmat], xx + num, yy + num2, trans, anchor, g);
				}
			}
		}
	}

	// Token: 0x0600027F RID: 639 RVA: 0x00023C78 File Offset: 0x00021E78
	public bool isHead_2Fr(int idHead)
	{
		for (int i = 0; i < global::Char.Arr_Head_2Fr.Length; i++)
		{
			bool flag = global::Char.Arr_Head_2Fr[i][0] == idHead;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000280 RID: 640 RVA: 0x00023CB8 File Offset: 0x00021EB8
	private void updateFHead()
	{
		bool flag = this.isHead_2Fr(this.head);
		if (flag)
		{
			this.fHead++;
			bool flag2 = this.fHead > 10000;
			if (flag2)
			{
				this.fHead = 0;
			}
		}
		else
		{
			this.fHead = 0;
		}
	}

	// Token: 0x06000281 RID: 641 RVA: 0x00023D0C File Offset: 0x00021F0C
	private int getFHead(int idHead)
	{
		for (int i = 0; i < global::Char.Arr_Head_2Fr.Length; i++)
		{
			bool flag = global::Char.Arr_Head_2Fr[i][0] == idHead;
			if (flag)
			{
				return global::Char.Arr_Head_2Fr[i][this.fHead / 4 % global::Char.Arr_Head_2Fr[i].Length];
			}
		}
		return idHead;
	}

	// Token: 0x06000282 RID: 642 RVA: 0x00023D68 File Offset: 0x00021F68
	public void paintAuraBehind(mGraphics g)
	{
		bool flag = (!this.me || global::Char.isPaintAura) && this.idAuraEff > -1 && (this.statusMe == 1 || this.statusMe == 6) && !GameCanvas.panel.isShow && mSystem.currentTimeMillis() - this.timeBlue > 0L;
		if (flag)
		{
			string nameImg = this.strEffAura + this.idAuraEff.ToString() + "_0";
			FrameImage fraImage = mSystem.getFraImage(nameImg);
			if (fraImage != null)
			{
				fraImage.drawFrame(GameCanvas.gameTick / 4 % fraImage.nFrame, this.cx, this.cy, (this.cdir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER, g);
			}
		}
	}

	// Token: 0x06000283 RID: 643 RVA: 0x00023E28 File Offset: 0x00022028
	public void paintAuraFront(mGraphics g)
	{
		bool flag = (this.me && !global::Char.isPaintAura) || this.idAuraEff <= -1;
		if (!flag)
		{
			bool flag2 = this.statusMe == 1 || this.statusMe == 6;
			if (flag2)
			{
				bool flag3 = !GameCanvas.panel.isShow && !GameCanvas.lowGraphic;
				if (flag3)
				{
					bool flag4 = false;
					bool flag5 = mSystem.currentTimeMillis() - this.timeBlue > -1000L && this.IsAddDust1;
					if (flag5)
					{
						flag4 = true;
						this.IsAddDust1 = false;
					}
					bool flag6 = mSystem.currentTimeMillis() - this.timeBlue > -500L && this.IsAddDust2;
					if (flag6)
					{
						flag4 = true;
						this.IsAddDust2 = false;
					}
					bool flag7 = flag4;
					if (flag7)
					{
						GameCanvas.gI().startDust(-1, this.cx - -8, this.cy);
						GameCanvas.gI().startDust(1, this.cx - 8, this.cy);
						this.addDustEff(1);
					}
					bool flag8 = mSystem.currentTimeMillis() - this.timeBlue > 0L;
					if (flag8)
					{
						string nameImg = this.strEffAura + this.idAuraEff.ToString() + "_1";
						FrameImage fraImage = mSystem.getFraImage(nameImg);
						if (fraImage != null)
						{
							fraImage.drawFrame(GameCanvas.gameTick / 4 % fraImage.nFrame, this.cx, this.cy + 2, (this.cdir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER, g);
						}
					}
				}
			}
			else
			{
				this.timeBlue = mSystem.currentTimeMillis() + 1500L;
				this.IsAddDust1 = true;
				this.IsAddDust2 = true;
			}
		}
	}

	// Token: 0x06000284 RID: 644 RVA: 0x00023FE8 File Offset: 0x000221E8
	public void paintEff_Lvup_behind(mGraphics g)
	{
		bool flag = this.idEff_Set_Item != -1;
		if (flag)
		{
			bool flag2 = this.fraEff != null;
			if (flag2)
			{
				this.fraEff.drawFrame(GameCanvas.gameTick / 4 % this.fraEff.nFrame, this.cx, this.cy + 3, (this.cdir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER, g);
			}
			else
			{
				this.fraEff = mSystem.getFraImage(this.strEff_Set_Item + this.idEff_Set_Item.ToString() + "_0");
			}
		}
	}

	// Token: 0x06000285 RID: 645 RVA: 0x0002408C File Offset: 0x0002228C
	public void paintEff_Lvup_front(mGraphics g)
	{
		bool flag = this.idEff_Set_Item != -1;
		if (flag)
		{
			bool flag2 = this.fraEffSub != null;
			if (flag2)
			{
				this.fraEffSub.drawFrame(GameCanvas.gameTick / 4 % this.fraEffSub.nFrame, this.cx, this.cy + 8, (this.cdir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER, g);
			}
			else
			{
				this.fraEffSub = mSystem.getFraImage(this.strEff_Set_Item + this.idEff_Set_Item.ToString() + "_1");
			}
		}
	}

	// Token: 0x06000286 RID: 646 RVA: 0x00024130 File Offset: 0x00022330
	public void paintHat_behind(mGraphics g, int cf, int yh)
	{
		try
		{
			bool flag = this.idHat == -1;
			if (!flag)
			{
				bool flag2 = this.isFrNgang(cf);
				if (flag2)
				{
					bool flag3 = this.fraHat_behind_2 != null;
					if (flag3)
					{
						this.fraHat_behind_2.drawFrame(GameCanvas.gameTick / 4 % this.fraHat_behind_2.nFrame, this.cx + global::Char.hatInfo[cf][0] * ((this.cdir == 1) ? 1 : -1), yh + global::Char.hatInfo[cf][1], (this.cdir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER, g);
					}
					else
					{
						this.fraHat_behind_2 = mSystem.getFraImage(this.strHat_behind + this.strNgang + this.idHat.ToString());
					}
				}
				else
				{
					bool flag4 = this.fraHat_behind != null;
					if (flag4)
					{
						this.fraHat_behind.drawFrame(GameCanvas.gameTick / 4 % this.fraHat_behind.nFrame, this.cx + global::Char.hatInfo[cf][0] * ((this.cdir == 1) ? 1 : -1), yh + global::Char.hatInfo[cf][1], (this.cdir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER, g);
					}
					else
					{
						this.fraHat_behind = mSystem.getFraImage(this.strHat_behind + this.idHat.ToString());
					}
				}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000287 RID: 647 RVA: 0x000242BC File Offset: 0x000224BC
	public void paintHat_front(mGraphics g, int cf, int yh)
	{
		try
		{
			bool flag = this.idHat == -1;
			if (!flag)
			{
				bool flag2 = this.isFrNgang(cf);
				if (flag2)
				{
					bool flag3 = this.fraHat_font_2 != null;
					if (flag3)
					{
						this.fraHat_font_2.drawFrame(GameCanvas.gameTick / 4 % this.fraHat_font_2.nFrame, this.cx + global::Char.hatInfo[cf][0] * ((this.cdir == 1) ? 1 : -1), yh + global::Char.hatInfo[cf][1], (this.cdir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER, g);
					}
					else
					{
						this.fraHat_font_2 = mSystem.getFraImage(this.strHat_font + this.strNgang + this.idHat.ToString());
					}
				}
				else
				{
					bool flag4 = this.fraHat_font != null;
					if (flag4)
					{
						this.fraHat_font.drawFrame(GameCanvas.gameTick / 4 % this.fraHat_font.nFrame, this.cx + global::Char.hatInfo[cf][0] * ((this.cdir == 1) ? 1 : -1), yh + global::Char.hatInfo[cf][1], (this.cdir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER, g);
					}
					else
					{
						this.fraHat_font = mSystem.getFraImage(this.strHat_font + this.idHat.ToString());
					}
				}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000288 RID: 648 RVA: 0x00024448 File Offset: 0x00022648
	public bool isFrNgang(int fr)
	{
		return fr == 2 || fr == 3 || fr == 4 || fr == 5 || fr == 6 || fr == 9 || fr == 10 || fr == 13 || fr == 14 || fr == 15 || fr == 16 || fr == 26 || fr == 27 || fr == 28 || fr == 29;
	}

	// Token: 0x06000289 RID: 649 RVA: 0x000244B0 File Offset: 0x000226B0
	public void sendNewAttack(short idTemplateSkill)
	{
		short x = -1;
		short y = -1;
		bool flag = this.mobFocus != null;
		if (flag)
		{
			x = (short)this.mobFocus.x;
			y = (short)this.mobFocus.y;
		}
		bool flag2 = this.charFocus != null && !this.charFocus.isPet && !this.charFocus.isMiniPet;
		if (flag2)
		{
			x = (short)this.charFocus.cx;
			y = (short)this.charFocus.cy;
		}
		Service.gI().new_skill_not_focus((sbyte)idTemplateSkill, (sbyte)this.cdir, x, y);
	}

	// Token: 0x0600028A RID: 650 RVA: 0x00024548 File Offset: 0x00022748
	public void SetSkillPaint_NEW(short idskillPaint, bool isFly, sbyte typeFrame, sbyte typePaint, sbyte dir, short timeGong, sbyte typeItem)
	{
		this.isPaintNewSkill = true;
		this.timeReset_newSkill = GameCanvas.timeNow + 10000L;
		this.idskillPaint = idskillPaint;
		this.isFly = isFly;
		this.typeFrame = typeFrame;
		this.typePaint = typePaint;
		this.typeItem = typeItem;
		this.cdir = (int)dir;
		this.count_NEW = 0;
		this.stt = 0;
		long lastTimeUseThisSkill = mSystem.currentTimeMillis();
		bool flag = this.me;
		if (flag)
		{
			this.saveLoadPreviousSkill();
			this.myskill.lastTimeUseThisSkill = lastTimeUseThisSkill;
			bool flag2 = this.myskill.template.manaUseType == 2;
			if (flag2)
			{
				this.cMP = 1L;
			}
			else
			{
				bool flag3 = this.myskill.template.manaUseType != 1;
				if (flag3)
				{
					this.cMP -= (long)this.myskill.manaUse;
				}
				else
				{
					this.cMP -= (long)this.myskill.manaUse * this.cMPFull / 100L;
				}
			}
			global::Char.myCharz().cStamina--;
			GameScr.gI().isInjureMp = true;
			GameScr.gI().twMp = 0L;
			bool flag4 = this.cMP < 0L;
			if (flag4)
			{
				this.cMP = 0L;
			}
		}
		switch (idskillPaint)
		{
		case 24:
			GameScr.addEffectEnd_Target(18, 0, (int)typePaint, this.clone(), null, 3, timeGong, 0);
			GameScr.addEffectEnd_Target(21, 0, (int)typePaint, this.clone(), null, 1, timeGong, 0);
			break;
		case 25:
			GameScr.addEffectEnd_Target(19, 0, (int)typePaint, this.clone(), null, 3, timeGong, 0);
			GameScr.addEffectEnd_Target(22, 0, (int)typePaint, this.clone(), null, 1, timeGong, 0);
			break;
		case 26:
			GameScr.addEffectEnd_Target(20, 0, (int)typePaint, this.clone(), null, 3, timeGong, 0);
			GameScr.addEffectEnd_Target(23, 0, (int)typePaint, this.clone(), null, 1, timeGong, 0);
			break;
		}
		bool flag5 = this.typeFrame == 1;
		if (flag5)
		{
			bool flag6 = !this.isFly;
			if (flag6)
			{
				this.fr_start = new byte[]
				{
					20,
					20,
					20,
					20,
					20,
					20,
					19
				};
				this.fr_atk = new byte[]
				{
					20
				};
				this.fr_end = new byte[1];
			}
			else
			{
				this.fr_start = new byte[]
				{
					31,
					31,
					31,
					31,
					31,
					31,
					30
				};
				this.fr_atk = new byte[]
				{
					31
				};
				this.fr_end = new byte[]
				{
					12
				};
			}
		}
		bool flag7 = this.typeFrame == 2;
		if (flag7)
		{
			bool flag8 = !this.isFly;
			if (flag8)
			{
				this.fr_start = new byte[]
				{
					20
				};
				this.fr_atk = new byte[]
				{
					13,
					13,
					13,
					14,
					14,
					14
				};
				this.fr_end = new byte[1];
			}
			else
			{
				this.fr_start = new byte[]
				{
					31
				};
				this.fr_atk = new byte[]
				{
					26,
					26,
					26,
					27,
					27,
					27
				};
				this.fr_end = new byte[]
				{
					12
				};
			}
		}
		bool flag9 = this.typeFrame == 4;
		if (flag9)
		{
			bool flag10 = !this.isFly;
			if (flag10)
			{
				this.fr_start = new byte[]
				{
					17,
					17,
					17,
					18,
					18,
					18
				};
				this.fr_atk = new byte[]
				{
					18
				};
				this.fr_end = new byte[1];
			}
			else
			{
				this.fr_start = new byte[]
				{
					7,
					7,
					7,
					12,
					12,
					12,
					12
				};
				this.fr_atk = new byte[]
				{
					12
				};
				this.fr_end = new byte[]
				{
					12
				};
			}
		}
		bool flag11 = this.typeFrame == 3;
		if (flag11)
		{
			bool flag12 = !this.isFly;
			if (flag12)
			{
				this.fr_start = new byte[]
				{
					24,
					24,
					24,
					17,
					17,
					17,
					18,
					18,
					18
				};
				this.fr_atk = new byte[]
				{
					20
				};
				this.fr_end = new byte[1];
			}
			else
			{
				this.fr_start = new byte[]
				{
					23,
					23,
					23,
					7,
					7,
					7,
					12,
					12,
					12,
					12
				};
				this.fr_atk = new byte[]
				{
					31
				};
				this.fr_end = new byte[]
				{
					12
				};
			}
		}
	}

	// Token: 0x0600028B RID: 651 RVA: 0x0002499C File Offset: 0x00022B9C
	public void SetSkillPaint_STT(int stt, short idskillPaint, Point targetDame, short timeDame, short rangeDame, sbyte typePaint, Point[] listObj, sbyte typeItem)
	{
		this.stt = stt;
		this.idskillPaint = idskillPaint;
		this.count_NEW = 0;
		this.targetDame = targetDame;
		this.typePaint = typePaint;
		this.timeDame = mSystem.currentTimeMillis() + (long)timeDame;
		this.rangeDame = rangeDame;
		this.typeItem = typeItem;
		bool flag = this.stt == 1;
		if (flag)
		{
			bool flag2 = this.idskillPaint == 24;
			if (flag2)
			{
				GameScr.addEffectEnd_Target(18, 1, (int)typePaint, this, null, 3, timeDame, 0);
				GameScr.addEffectEnd_Target(24, 0, (int)typePaint, this, this.targetDame, 1, timeDame, rangeDame);
			}
			bool flag3 = this.idskillPaint == 25;
			if (flag3)
			{
				GameScr.addEffectEnd_Target(19, 0, (int)typePaint, this, null, 3, timeDame, 0);
				GameScr.addEffectEnd_Target(25, 0, (int)typePaint, this, this.targetDame, 1, timeDame, rangeDame);
			}
			bool flag4 = this.idskillPaint == 26;
			if (flag4)
			{
				GameScr.addEffectEnd_Target(20, 0, (int)typePaint, this, null, 3, timeDame, 0);
				GameScr.addEffectEnd(26, (int)typeItem, (int)typePaint, targetDame.x, targetDame.y, 1, 0, timeDame, listObj);
			}
		}
	}

	// Token: 0x0600028C RID: 652 RVA: 0x00024AB0 File Offset: 0x00022CB0
	public void UpdSkillPaint_NEW()
	{
		bool flag = this.stt == 0;
		if (flag)
		{
			bool flag2 = this.isFly && this.count_NEW < 20;
			if (flag2)
			{
				this.cvy = -3;
				this.cy += this.cvy;
			}
			bool flag3 = this.fr_start.Length == 1;
			if (flag3)
			{
				this.cf = (int)this.fr_start[0];
			}
			else
			{
				bool flag4 = this.count_NEW > this.fr_start.Length - 1;
				if (flag4)
				{
					this.cf = (int)this.fr_start[this.fr_start.Length - 1];
				}
				else
				{
					this.cf = (int)this.fr_start[this.count_NEW];
				}
			}
		}
		else
		{
			bool flag5 = this.stt == 1;
			if (flag5)
			{
				this.cf = (int)this.fr_atk[this.count_NEW % this.fr_atk.Length];
				bool flag6 = mSystem.currentTimeMillis() - this.timeDame > 0L;
				if (flag6)
				{
					this.SetSkillPaint_STT(2, 0, null, 0, 0, 0, null, 0);
				}
				bool flag7 = this.count_NEW % 5 == 0;
				if (flag7)
				{
					GameScr.shock_scr = 5;
				}
				bool flag8 = this.typeFrame == 1 && this.count_NEW < 10 && !TileMap.tileTypeAt(this.cx - (this.chw + 1) * this.cdir, this.cy, (this.cdir != 1) ? 4 : 8);
				if (flag8)
				{
					this.cx -= this.cdir;
				}
				bool flag9 = this.typeFrame != 2;
				if (flag9)
				{
				}
			}
			else
			{
				bool flag10 = this.stt == 2;
				if (flag10)
				{
					bool flag11 = this.fr_end.Length == 1;
					if (flag11)
					{
						this.cf = (int)this.fr_end[0];
					}
					else
					{
						bool flag12 = this.count_NEW > this.fr_end.Length - 1;
						if (flag12)
						{
							this.cf = (int)this.fr_end[this.fr_end.Length - 1];
						}
						else
						{
							this.cf = (int)this.fr_end[this.count_NEW];
						}
					}
					bool flag13 = this.isFly;
					if (flag13)
					{
						this.cvx = (this.cvy = 0);
						this.statusMe = 4;
					}
					this.isPaintNewSkill = false;
				}
			}
		}
		this.count_NEW++;
	}

	// Token: 0x0600028D RID: 653 RVA: 0x00024D18 File Offset: 0x00022F18
	public global::Char clone()
	{
		global::Char @char = new global::Char();
		@char.charID = this.charID;
		@char.cx = this.cx;
		@char.cy = this.cy;
		@char.cdir = this.cdir;
		bool flag = this.arrItemBody != null;
		if (flag)
		{
			@char.arrItemBody = new Item[this.arrItemBody.Length];
			for (int i = 0; i < this.arrItemBody.Length; i++)
			{
				bool flag2 = this.arrItemBody[i] == null;
				if (flag2)
				{
					@char.arrItemBody[i] = null;
				}
				else
				{
					@char.arrItemBody[i] = this.arrItemBody[i].clone();
				}
			}
		}
		return @char;
	}

	// Token: 0x0600028E RID: 654 RVA: 0x00024DD4 File Offset: 0x00022FD4
	public bool containsCaiTrang(int v)
	{
		bool flag = this.arrItemBody != null;
		if (flag)
		{
			for (int i = 0; i < this.arrItemBody.Length; i++)
			{
				bool flag2 = this.arrItemBody[i] != null && this.arrItemBody[i].template != null && (int)this.arrItemBody[i].template.id == v;
				if (flag2)
				{
					return true;
				}
			}
		}
		Res.err("tim kiem id cai trang " + v.ToString() + " ko tim thay");
		return false;
	}

	// Token: 0x0600028F RID: 655 RVA: 0x00024E68 File Offset: 0x00023068
	public void printlog()
	{
		string text = string.Empty;
		string str = text;
		text = str + "isInjure " + this.isInjure.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isMonkey.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isAddChopMat.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isAttack.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isAttFly.ToString() + "\n";
		str = text;
		text = str + "isInjure " + global::Char.ischangingMap.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isCharge.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isCopy.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isCreateDark.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isCrit.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isDirtyPostion.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isEndMount.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isEventMount.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isMafuba.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isFusion.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isFeetEff.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isFlying.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isWaitMonkey.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isUseSkillSpec().ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isDie.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isDie.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isDie.ToString() + "\n";
		str = text;
		text = str + "isInjure " + this.isDie.ToString() + "\n";
		Res.outz(text);
	}

	// Token: 0x06000290 RID: 656 RVA: 0x00025138 File Offset: 0x00023338
	public void setDanhHieu(int smallDanhHieu, int frame)
	{
		bool flag = this.mainImg == null;
		if (flag)
		{
			this.mainImg = ImgByName.getImagePath("banner_" + 0.ToString(), ImgByName.hashImagePath);
		}
		bool flag2 = this.mainImg.img != null;
		if (flag2)
		{
			int num = this.mainImg.img.getHeight() / (int)this.mainImg.nFrame;
			bool flag3 = num < 1;
			if (flag3)
			{
				num = 1;
			}
			this.fraDanhHieu = new FrameImage(this.mainImg.img, this.mainImg.img.getWidth(), num);
		}
		Res.err("===== tim thay DanhHieu ve danh hieu ra");
	}

	// Token: 0x06000291 RID: 657 RVA: 0x000251F0 File Offset: 0x000233F0
	// Note: this type is marked as 'beforefieldinit'.
	static Char()
	{
		int[][] array = new int[32][];
		array[0] = new int[]
		{
			5,
			-7
		};
		array[1] = new int[]
		{
			5,
			-7
		};
		array[2] = new int[]
		{
			5,
			-8
		};
		array[3] = new int[]
		{
			5,
			-7
		};
		array[4] = new int[]
		{
			5,
			-6
		};
		array[5] = new int[]
		{
			5,
			-8
		};
		array[6] = new int[]
		{
			5,
			-7
		};
		int num = 7;
		int[] array2 = new int[2];
		array2[0] = 9;
		array[num] = array2;
		array[8] = new int[]
		{
			11,
			1
		};
		int num2 = 9;
		int[] array3 = new int[2];
		array3[0] = 4;
		array[num2] = array3;
		array[10] = new int[]
		{
			4,
			-1
		};
		array[11] = new int[]
		{
			4,
			8
		};
		array[12] = new int[]
		{
			6,
			5
		};
		array[13] = new int[]
		{
			6,
			-6
		};
		array[14] = new int[]
		{
			2,
			-5
		};
		array[15] = new int[]
		{
			7,
			-8
		};
		array[16] = new int[]
		{
			7,
			-6
		};
		int num3 = 17;
		int[] array4 = new int[2];
		array4[0] = 8;
		array[num3] = array4;
		array[18] = new int[]
		{
			7,
			5
		};
		array[19] = new int[]
		{
			9,
			-7
		};
		array[20] = new int[]
		{
			7,
			-3
		};
		array[21] = new int[]
		{
			2,
			8
		};
		array[22] = new int[]
		{
			4,
			5
		};
		array[23] = new int[]
		{
			10,
			-5
		};
		array[24] = new int[]
		{
			9,
			-5
		};
		array[25] = new int[]
		{
			9,
			-5
		};
		array[26] = new int[]
		{
			6,
			-6
		};
		array[27] = new int[]
		{
			2,
			-5
		};
		array[28] = new int[]
		{
			7,
			-8
		};
		array[29] = new int[]
		{
			7,
			-6
		};
		array[30] = new int[]
		{
			9,
			-7
		};
		array[31] = new int[]
		{
			7,
			-3
		};
		global::Char.hatInfo = array;
		global::Char.Arr_Head_FlyMove = new short[0];
	}

	// Token: 0x0400018F RID: 399
	public string xuStr;

	// Token: 0x04000190 RID: 400
	public string luongStr;

	// Token: 0x04000191 RID: 401
	public string luongKhoaStr;

	// Token: 0x04000192 RID: 402
	public long lastUpdateTime;

	// Token: 0x04000193 RID: 403
	public bool meLive;

	// Token: 0x04000194 RID: 404
	public bool isMask;

	// Token: 0x04000195 RID: 405
	public bool isTeleport;

	// Token: 0x04000196 RID: 406
	public bool isUsePlane;

	// Token: 0x04000197 RID: 407
	public int shadowX;

	// Token: 0x04000198 RID: 408
	public int shadowY;

	// Token: 0x04000199 RID: 409
	public int shadowLife;

	// Token: 0x0400019A RID: 410
	public bool isNhapThe;

	// Token: 0x0400019B RID: 411
	public PetFollow petFollow;

	// Token: 0x0400019C RID: 412
	public int rank;

	// Token: 0x0400019D RID: 413
	public const sbyte A_STAND = 1;

	// Token: 0x0400019E RID: 414
	public const sbyte A_RUN = 2;

	// Token: 0x0400019F RID: 415
	public const sbyte A_JUMP = 3;

	// Token: 0x040001A0 RID: 416
	public const sbyte A_FALL = 4;

	// Token: 0x040001A1 RID: 417
	public const sbyte A_DEADFLY = 5;

	// Token: 0x040001A2 RID: 418
	public const sbyte A_NOTHING = 6;

	// Token: 0x040001A3 RID: 419
	public const sbyte A_ATTK = 7;

	// Token: 0x040001A4 RID: 420
	public const sbyte A_INJURE = 8;

	// Token: 0x040001A5 RID: 421
	public const sbyte A_AUTOJUMP = 9;

	// Token: 0x040001A6 RID: 422
	public const sbyte A_FLY = 10;

	// Token: 0x040001A7 RID: 423
	public const sbyte SKILL_STAND = 12;

	// Token: 0x040001A8 RID: 424
	public const sbyte SKILL_FALL = 13;

	// Token: 0x040001A9 RID: 425
	public const sbyte A_DEAD = 14;

	// Token: 0x040001AA RID: 426
	public const sbyte A_HIDE = 15;

	// Token: 0x040001AB RID: 427
	public const sbyte A_RESETPOINT = 16;

	// Token: 0x040001AC RID: 428
	public static ChatPopup chatPopup;

	// Token: 0x040001AD RID: 429
	public long cPower;

	// Token: 0x040001AE RID: 430
	public Info chatInfo;

	// Token: 0x040001AF RID: 431
	public sbyte petStatus;

	// Token: 0x040001B0 RID: 432
	public int cx = 24;

	// Token: 0x040001B1 RID: 433
	public int cy = 24;

	// Token: 0x040001B2 RID: 434
	public int cvx;

	// Token: 0x040001B3 RID: 435
	public int cvy;

	// Token: 0x040001B4 RID: 436
	public int cp1;

	// Token: 0x040001B5 RID: 437
	public int cp2;

	// Token: 0x040001B6 RID: 438
	public int cp3;

	// Token: 0x040001B7 RID: 439
	public int statusMe = 5;

	// Token: 0x040001B8 RID: 440
	public int cdir = 1;

	// Token: 0x040001B9 RID: 441
	public int charID;

	// Token: 0x040001BA RID: 442
	public int cgender;

	// Token: 0x040001BB RID: 443
	public int ctaskId;

	// Token: 0x040001BC RID: 444
	public int menuSelect;

	// Token: 0x040001BD RID: 445
	public int cBonusSpeed;

	// Token: 0x040001BE RID: 446
	public int cspeed = 4;

	// Token: 0x040001BF RID: 447
	public int cCriticalFull;

	// Token: 0x040001C0 RID: 448
	public int clevel;

	// Token: 0x040001C1 RID: 449
	public int xReload;

	// Token: 0x040001C2 RID: 450
	public int yReload;

	// Token: 0x040001C3 RID: 451
	public int cyStartFall;

	// Token: 0x040001C4 RID: 452
	public int saveStatus;

	// Token: 0x040001C5 RID: 453
	public int eff5BuffHp;

	// Token: 0x040001C6 RID: 454
	public int eff5BuffMp;

	// Token: 0x040001C7 RID: 455
	public int cdameDown;

	// Token: 0x040001C8 RID: 456
	public int cStr;

	// Token: 0x040001C9 RID: 457
	public long cMP;

	// Token: 0x040001CA RID: 458
	public long cHP;

	// Token: 0x040001CB RID: 459
	public long cHPNew;

	// Token: 0x040001CC RID: 460
	public long cHPShow;

	// Token: 0x040001CD RID: 461
	public long cHPFull;

	// Token: 0x040001CE RID: 462
	public long cMPFull;

	// Token: 0x040001CF RID: 463
	public long cDamFull;

	// Token: 0x040001D0 RID: 464
	public long cDefull;

	// Token: 0x040001D1 RID: 465
	public long cLevelPercent;

	// Token: 0x040001D2 RID: 466
	public long cTiemNang;

	// Token: 0x040001D3 RID: 467
	public long cNangdong;

	// Token: 0x040001D4 RID: 468
	public long damHP;

	// Token: 0x040001D5 RID: 469
	public long damMP;

	// Token: 0x040001D6 RID: 470
	public bool isMob;

	// Token: 0x040001D7 RID: 471
	public bool isCrit;

	// Token: 0x040001D8 RID: 472
	public bool isDie;

	// Token: 0x040001D9 RID: 473
	public int pointUydanh;

	// Token: 0x040001DA RID: 474
	public int pointNon;

	// Token: 0x040001DB RID: 475
	public int pointVukhi;

	// Token: 0x040001DC RID: 476
	public int pointAo;

	// Token: 0x040001DD RID: 477
	public int pointLien;

	// Token: 0x040001DE RID: 478
	public int pointGangtay;

	// Token: 0x040001DF RID: 479
	public int pointNhan;

	// Token: 0x040001E0 RID: 480
	public int pointQuan;

	// Token: 0x040001E1 RID: 481
	public int pointNgocboi;

	// Token: 0x040001E2 RID: 482
	public int pointGiay;

	// Token: 0x040001E3 RID: 483
	public int pointPhu;

	// Token: 0x040001E4 RID: 484
	public int countFinishDay;

	// Token: 0x040001E5 RID: 485
	public int countLoopBoos;

	// Token: 0x040001E6 RID: 486
	public int limitTiemnangso;

	// Token: 0x040001E7 RID: 487
	public int limitKynangso;

	// Token: 0x040001E8 RID: 488
	public short[] potential = new short[4];

	// Token: 0x040001E9 RID: 489
	public string cName = string.Empty;

	// Token: 0x040001EA RID: 490
	public int clanID;

	// Token: 0x040001EB RID: 491
	public sbyte ctypeClan;

	// Token: 0x040001EC RID: 492
	public Clan clan;

	// Token: 0x040001ED RID: 493
	public sbyte role;

	// Token: 0x040001EE RID: 494
	public int cw = 22;

	// Token: 0x040001EF RID: 495
	public int ch = 32;

	// Token: 0x040001F0 RID: 496
	public int chw = 11;

	// Token: 0x040001F1 RID: 497
	public int chh = 16;

	// Token: 0x040001F2 RID: 498
	public Command cmdMenu;

	// Token: 0x040001F3 RID: 499
	public bool canFly = true;

	// Token: 0x040001F4 RID: 500
	public bool cmtoChar;

	// Token: 0x040001F5 RID: 501
	public bool me;

	// Token: 0x040001F6 RID: 502
	public bool cFinishedAttack;

	// Token: 0x040001F7 RID: 503
	public bool cchistlast;

	// Token: 0x040001F8 RID: 504
	public bool isAttack;

	// Token: 0x040001F9 RID: 505
	public bool isAttFly;

	// Token: 0x040001FA RID: 506
	public int cwpt;

	// Token: 0x040001FB RID: 507
	public int cwplv;

	// Token: 0x040001FC RID: 508
	public int cf;

	// Token: 0x040001FD RID: 509
	public int tick;

	// Token: 0x040001FE RID: 510
	public static bool fallAttack;

	// Token: 0x040001FF RID: 511
	public bool isJump;

	// Token: 0x04000200 RID: 512
	public bool autoFall;

	// Token: 0x04000201 RID: 513
	public bool attack = true;

	// Token: 0x04000202 RID: 514
	public long xu;

	// Token: 0x04000203 RID: 515
	public int xuInBox;

	// Token: 0x04000204 RID: 516
	public int yen;

	// Token: 0x04000205 RID: 517
	public int gold_lock;

	// Token: 0x04000206 RID: 518
	public int luong;

	// Token: 0x04000207 RID: 519
	public int luongKhoa;

	// Token: 0x04000208 RID: 520
	public NClass nClass;

	// Token: 0x04000209 RID: 521
	public Command endMovePointCommand;

	// Token: 0x0400020A RID: 522
	public MyVector vSkill = new MyVector();

	// Token: 0x0400020B RID: 523
	public MyVector vSkillFight = new MyVector();

	// Token: 0x0400020C RID: 524
	public MyVector vEff = new MyVector();

	// Token: 0x0400020D RID: 525
	public Skill myskill;

	// Token: 0x0400020E RID: 526
	public Task taskMaint;

	// Token: 0x0400020F RID: 527
	public bool paintName = true;

	// Token: 0x04000210 RID: 528
	public Archivement[] arrArchive;

	// Token: 0x04000211 RID: 529
	public Item[] arrItemBag;

	// Token: 0x04000212 RID: 530
	public Item[] arrItemBox;

	// Token: 0x04000213 RID: 531
	public Item[] arrItemBody;

	// Token: 0x04000214 RID: 532
	public Skill[] arrPetSkill;

	// Token: 0x04000215 RID: 533
	public Item[][] arrItemShop;

	// Token: 0x04000216 RID: 534
	public string[][] infoSpeacialSkill;

	// Token: 0x04000217 RID: 535
	public short[][] imgSpeacialSkill;

	// Token: 0x04000218 RID: 536
	public short cResFire;

	// Token: 0x04000219 RID: 537
	public short cResIce;

	// Token: 0x0400021A RID: 538
	public short cResWind;

	// Token: 0x0400021B RID: 539
	public short cMiss;

	// Token: 0x0400021C RID: 540
	public short cExactly;

	// Token: 0x0400021D RID: 541
	public short cFatal;

	// Token: 0x0400021E RID: 542
	public sbyte cPk;

	// Token: 0x0400021F RID: 543
	public sbyte cTypePk;

	// Token: 0x04000220 RID: 544
	public short cReactDame;

	// Token: 0x04000221 RID: 545
	public short sysUp;

	// Token: 0x04000222 RID: 546
	public short sysDown;

	// Token: 0x04000223 RID: 547
	public int avatar;

	// Token: 0x04000224 RID: 548
	public int skillTemplateId;

	// Token: 0x04000225 RID: 549
	public Mob mobFocus;

	// Token: 0x04000226 RID: 550
	public Mob mobMe;

	// Token: 0x04000227 RID: 551
	public int tMobMeBorn;

	// Token: 0x04000228 RID: 552
	public Npc npcFocus;

	// Token: 0x04000229 RID: 553
	public global::Char charFocus;

	// Token: 0x0400022A RID: 554
	public ItemMap itemFocus;

	// Token: 0x0400022B RID: 555
	public MyVector focus = new MyVector();

	// Token: 0x0400022C RID: 556
	public Mob[] attMobs;

	// Token: 0x0400022D RID: 557
	public global::Char[] attChars;

	// Token: 0x0400022E RID: 558
	public short[] moveFast;

	// Token: 0x0400022F RID: 559
	public int testCharId = -9999;

	// Token: 0x04000230 RID: 560
	public int killCharId = -9999;

	// Token: 0x04000231 RID: 561
	public sbyte resultTest;

	// Token: 0x04000232 RID: 562
	public int countKill;

	// Token: 0x04000233 RID: 563
	public int countKillMax;

	// Token: 0x04000234 RID: 564
	public bool isInvisiblez;

	// Token: 0x04000235 RID: 565
	public bool isShadown = true;

	// Token: 0x04000236 RID: 566
	public const sbyte PK_NORMAL = 0;

	// Token: 0x04000237 RID: 567
	public const sbyte PK_PHE = 1;

	// Token: 0x04000238 RID: 568
	public const sbyte PK_BANG = 2;

	// Token: 0x04000239 RID: 569
	public const sbyte PK_THIDAU = 3;

	// Token: 0x0400023A RID: 570
	public const sbyte PK_LUYENTAP = 4;

	// Token: 0x0400023B RID: 571
	public const sbyte PK_TUDO = 5;

	// Token: 0x0400023C RID: 572
	public MyVector taskOrders = new MyVector();

	// Token: 0x0400023D RID: 573
	public int cStamina;

	// Token: 0x0400023E RID: 574
	public static short[] idHead;

	// Token: 0x0400023F RID: 575
	public static short[] idAvatar;

	// Token: 0x04000240 RID: 576
	public int exp;

	// Token: 0x04000241 RID: 577
	public string[] strLevel;

	// Token: 0x04000242 RID: 578
	public string currStrLevel;

	// Token: 0x04000243 RID: 579
	public static Image eyeTraiDat = GameCanvas.loadImage("/mainImage/myTexture2dmat-trai-dat.png");

	// Token: 0x04000244 RID: 580
	public static Image eyeNamek = GameCanvas.loadImage("/mainImage/myTexture2dmat-namek.png");

	// Token: 0x04000245 RID: 581
	public bool isFreez;

	// Token: 0x04000246 RID: 582
	public bool isCharge;

	// Token: 0x04000247 RID: 583
	public int seconds;

	// Token: 0x04000248 RID: 584
	public int freezSeconds;

	// Token: 0x04000249 RID: 585
	public long last;

	// Token: 0x0400024A RID: 586
	public long cur;

	// Token: 0x0400024B RID: 587
	public long lastFreez;

	// Token: 0x0400024C RID: 588
	public long currFreez;

	// Token: 0x0400024D RID: 589
	public bool isFlyUp;

	// Token: 0x0400024E RID: 590
	public static MyVector vItemTime = new MyVector();

	// Token: 0x0400024F RID: 591
	public static short ID_NEW_MOUNT = 30000;

	// Token: 0x04000250 RID: 592
	public short idMount;

	// Token: 0x04000251 RID: 593
	public bool isHaveMount;

	// Token: 0x04000252 RID: 594
	public bool isMountVip;

	// Token: 0x04000253 RID: 595
	public bool isEventMount;

	// Token: 0x04000254 RID: 596
	public bool isSpeacialMount;

	// Token: 0x04000255 RID: 597
	public static Image imgMount_TD = GameCanvas.loadImage("/mainImage/myTexture2dthucuoi10.png");

	// Token: 0x04000256 RID: 598
	public static Image imgMount_NM = GameCanvas.loadImage("/mainImage/myTexture2dthucuoi20.png");

	// Token: 0x04000257 RID: 599
	public static Image imgMount_NM_1 = GameCanvas.loadImage("/mainImage/myTexture2dthucuoi21.png");

	// Token: 0x04000258 RID: 600
	public static Image imgMount_XD = GameCanvas.loadImage("/mainImage/myTexture2dthucuoi30.png");

	// Token: 0x04000259 RID: 601
	public static Image imgMount_TD_VIP = GameCanvas.loadImage("/mainImage/myTexture2dthucuoi11.png");

	// Token: 0x0400025A RID: 602
	public static Image imgMount_NM_VIP = GameCanvas.loadImage("/mainImage/myTexture2dthucuoi22.png");

	// Token: 0x0400025B RID: 603
	public static Image imgMount_NM_1_VIP = GameCanvas.loadImage("/mainImage/myTexture2dthucuoi23.png");

	// Token: 0x0400025C RID: 604
	public static Image imgMount_XD_VIP = GameCanvas.loadImage("/mainImage/myTexture2dthucuoi31.png");

	// Token: 0x0400025D RID: 605
	public static Image imgEventMount = GameCanvas.loadImage("/mainImage/myTexture2drong.png");

	// Token: 0x0400025E RID: 606
	public static Image imgEventMountWing = GameCanvas.loadImage("/mainImage/myTexture2dcanhrong.png");

	// Token: 0x0400025F RID: 607
	public sbyte[] FrameMount = new sbyte[]
	{
		0,
		0,
		1,
		1,
		2,
		2,
		1,
		1
	};

	// Token: 0x04000260 RID: 608
	public int frameMount;

	// Token: 0x04000261 RID: 609
	public int frameNewMount;

	// Token: 0x04000262 RID: 610
	public int transMount;

	// Token: 0x04000263 RID: 611
	public int genderMount;

	// Token: 0x04000264 RID: 612
	public int idcharMount;

	// Token: 0x04000265 RID: 613
	public int xMount;

	// Token: 0x04000266 RID: 614
	public int yMount;

	// Token: 0x04000267 RID: 615
	public int dxMount;

	// Token: 0x04000268 RID: 616
	public int dyMount;

	// Token: 0x04000269 RID: 617
	public int xChar;

	// Token: 0x0400026A RID: 618
	public int xdis;

	// Token: 0x0400026B RID: 619
	public int speedMount;

	// Token: 0x0400026C RID: 620
	public bool isStartMount;

	// Token: 0x0400026D RID: 621
	public bool isMount;

	// Token: 0x0400026E RID: 622
	public bool isEndMount;

	// Token: 0x0400026F RID: 623
	public sbyte cFlag;

	// Token: 0x04000270 RID: 624
	public int flagImage;

	// Token: 0x04000271 RID: 625
	public short x_hint;

	// Token: 0x04000272 RID: 626
	public short y_hint;

	// Token: 0x04000273 RID: 627
	public short s_danhHieu1;

	// Token: 0x04000274 RID: 628
	public static int[][][] CharInfo = new int[][][]
	{
		new int[][]
		{
			new int[]
			{
				0,
				-13,
				34
			},
			new int[]
			{
				1,
				-8,
				10
			},
			new int[]
			{
				1,
				-9,
				16
			},
			new int[]
			{
				1,
				-9,
				45
			}
		},
		new int[][]
		{
			new int[]
			{
				0,
				-13,
				35
			},
			new int[]
			{
				1,
				-8,
				10
			},
			new int[]
			{
				1,
				-9,
				17
			},
			new int[]
			{
				1,
				-9,
				46
			}
		},
		new int[][]
		{
			new int[]
			{
				1,
				-10,
				33
			},
			new int[]
			{
				2,
				-10,
				11
			},
			new int[]
			{
				2,
				-8,
				16
			},
			new int[]
			{
				1,
				-12,
				49
			}
		},
		new int[][]
		{
			new int[]
			{
				1,
				-10,
				32
			},
			new int[]
			{
				3,
				-12,
				10
			},
			new int[]
			{
				3,
				-11,
				15
			},
			new int[]
			{
				1,
				-13,
				47
			}
		},
		new int[][]
		{
			new int[]
			{
				1,
				-10,
				34
			},
			new int[]
			{
				4,
				-8,
				11
			},
			new int[]
			{
				4,
				-7,
				17
			},
			new int[]
			{
				1,
				-12,
				47
			}
		},
		new int[][]
		{
			new int[]
			{
				1,
				-10,
				34
			},
			new int[]
			{
				5,
				-12,
				11
			},
			new int[]
			{
				5,
				-9,
				17
			},
			new int[]
			{
				1,
				-13,
				49
			}
		},
		new int[][]
		{
			new int[]
			{
				1,
				-10,
				33
			},
			new int[]
			{
				6,
				-10,
				10
			},
			new int[]
			{
				6,
				-8,
				16
			},
			new int[]
			{
				1,
				-12,
				47
			}
		},
		new int[][]
		{
			new int[]
			{
				0,
				-9,
				36
			},
			new int[]
			{
				7,
				-5,
				17
			},
			new int[]
			{
				7,
				-11,
				25
			},
			new int[]
			{
				1,
				-8,
				49
			}
		},
		new int[][]
		{
			new int[]
			{
				0,
				-7,
				35
			},
			new int[]
			{
				0,
				-18,
				22
			},
			new int[]
			{
				7,
				-10,
				25
			},
			new int[]
			{
				1,
				-7,
				48
			}
		},
		new int[][]
		{
			new int[]
			{
				1,
				-11,
				35
			},
			new int[]
			{
				10,
				-3,
				25
			},
			new int[]
			{
				12,
				-10,
				26
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				1,
				-11,
				37
			},
			new int[]
			{
				11,
				-3,
				25
			},
			new int[]
			{
				12,
				-11,
				27
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-14,
				34
			},
			new int[]
			{
				12,
				-8,
				21
			},
			new int[]
			{
				9,
				-7,
				31
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-12,
				35
			},
			new int[]
			{
				8,
				-5,
				14
			},
			new int[]
			{
				8,
				-15,
				29
			},
			new int[]
			{
				1,
				-9,
				49
			}
		},
		new int[][]
		{
			new int[]
			{
				1,
				-9,
				34
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				10,
				-7,
				19
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				1,
				-13,
				34
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				11,
				-10,
				19
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				1,
				-8,
				32
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				2,
				-6,
				15
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				1,
				-8,
				32
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				13,
				-12,
				16
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-10,
				31
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				7,
				-13,
				20
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-11,
				32
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				8,
				-15,
				26
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-9,
				33
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				14,
				-8,
				18
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-11,
				33
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				15,
				-6,
				19
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-16,
				31
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				9,
				-8,
				28
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-14,
				34
			},
			new int[]
			{
				1,
				-8,
				10
			},
			new int[]
			{
				8,
				-16,
				28
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-8,
				36
			},
			new int[]
			{
				7,
				-5,
				17
			},
			new int[]
			{
				0,
				-5,
				25
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-9,
				31
			},
			new int[]
			{
				9,
				-12,
				9
			},
			new int[]
			{
				0,
				-6,
				20
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				2,
				-9,
				36
			},
			new int[]
			{
				13,
				-5,
				17
			},
			new int[]
			{
				16,
				-11,
				25
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				1,
				-9,
				34
			},
			new int[]
			{
				8,
				-5,
				13
			},
			new int[]
			{
				10,
				-7,
				19
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				1,
				-13,
				34
			},
			new int[]
			{
				8,
				-5,
				13
			},
			new int[]
			{
				11,
				-10,
				19
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				1,
				-8,
				32
			},
			new int[]
			{
				8,
				-5,
				13
			},
			new int[]
			{
				2,
				-6,
				15
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				1,
				-8,
				32
			},
			new int[]
			{
				8,
				-5,
				13
			},
			new int[]
			{
				13,
				-12,
				16
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-9,
				33
			},
			new int[]
			{
				8,
				-5,
				13
			},
			new int[]
			{
				14,
				-8,
				18
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-11,
				33
			},
			new int[]
			{
				8,
				-5,
				13
			},
			new int[]
			{
				15,
				-6,
				19
			},
			new int[3]
		},
		new int[][]
		{
			new int[]
			{
				0,
				-16,
				32
			},
			new int[]
			{
				8,
				-5,
				13
			},
			new int[]
			{
				9,
				-8,
				29
			},
			new int[3]
		}
	};

	// Token: 0x04000275 RID: 629
	public static int[] CHAR_WEAPONX = new int[]
	{
		-2,
		-6,
		22,
		21,
		19,
		22,
		10,
		-2,
		-2,
		5,
		19
	};

	// Token: 0x04000276 RID: 630
	public static int[] CHAR_WEAPONY = new int[]
	{
		9,
		22,
		25,
		17,
		26,
		37,
		36,
		49,
		50,
		52,
		36
	};

	// Token: 0x04000277 RID: 631
	private static global::Char myChar;

	// Token: 0x04000278 RID: 632
	private static global::Char myPet;

	// Token: 0x04000279 RID: 633
	public static int[] listAttack;

	// Token: 0x0400027A RID: 634
	public static int[][] listIonC;

	// Token: 0x0400027B RID: 635
	public int cvyJump;

	// Token: 0x0400027C RID: 636
	private int indexUseSkill = -1;

	// Token: 0x0400027D RID: 637
	public int cxSend;

	// Token: 0x0400027E RID: 638
	public int cySend;

	// Token: 0x0400027F RID: 639
	public int cdirSend = 1;

	// Token: 0x04000280 RID: 640
	public int cxFocus;

	// Token: 0x04000281 RID: 641
	public int cyFocus;

	// Token: 0x04000282 RID: 642
	public int cactFirst = 5;

	// Token: 0x04000283 RID: 643
	public MyVector vMovePoints = new MyVector();

	// Token: 0x04000284 RID: 644
	public static string[][] inforClass = new string[][]
	{
		new string[]
		{
			"1",
			"1",
			"chiêu 1",
			"0"
		},
		new string[]
		{
			"2",
			"2",
			"chiêu 2",
			"5"
		}
	};

	// Token: 0x04000285 RID: 645
	public static int[][] inforSkill = new int[][]
	{
		new int[]
		{
			1,
			0,
			1,
			1000,
			40,
			1,
			0,
			20,
			0,
			0,
			0,
			0
		},
		new int[]
		{
			2,
			1,
			10,
			1000,
			100,
			1,
			0,
			40,
			0,
			0,
			0,
			0
		},
		new int[]
		{
			2,
			2,
			11,
			800,
			100,
			1,
			0,
			45,
			0,
			0,
			0,
			0
		},
		new int[]
		{
			2,
			3,
			12,
			600,
			100,
			1,
			0,
			50,
			0,
			0,
			0,
			0
		},
		new int[]
		{
			2,
			4,
			13,
			500,
			100,
			1,
			0,
			55,
			0,
			0,
			0,
			0
		},
		new int[]
		{
			3,
			1,
			14,
			500,
			100,
			1,
			0,
			60,
			0,
			0,
			0,
			0
		},
		new int[]
		{
			3,
			2,
			14,
			500,
			100,
			1,
			0,
			60,
			0,
			0,
			0,
			0
		},
		new int[]
		{
			3,
			3,
			14,
			500,
			100,
			1,
			0,
			60,
			0,
			0,
			0,
			0
		},
		new int[]
		{
			3,
			4,
			14,
			500,
			100,
			1,
			0,
			60,
			0,
			0,
			0,
			0
		},
		new int[]
		{
			3,
			5,
			14,
			500,
			100,
			1,
			0,
			60,
			0,
			0,
			0,
			0
		}
	};

	// Token: 0x04000286 RID: 646
	public static bool flag;

	// Token: 0x04000287 RID: 647
	public static bool ischangingMap;

	// Token: 0x04000288 RID: 648
	public static bool isLockKey;

	// Token: 0x04000289 RID: 649
	public static bool isLoadingMap;

	// Token: 0x0400028A RID: 650
	public bool isLockMove;

	// Token: 0x0400028B RID: 651
	public bool isLockAttack;

	// Token: 0x0400028C RID: 652
	public string strInfo;

	// Token: 0x0400028D RID: 653
	public short powerPoint;

	// Token: 0x0400028E RID: 654
	public short maxPowerPoint;

	// Token: 0x0400028F RID: 655
	public short secondPower;

	// Token: 0x04000290 RID: 656
	public long lastS;

	// Token: 0x04000291 RID: 657
	public long currS;

	// Token: 0x04000292 RID: 658
	public const int C_XAYDA_2 = 2;

	// Token: 0x04000293 RID: 659
	public const int C_NAMEC_1 = 1;

	// Token: 0x04000294 RID: 660
	public const int C_TRAIDAT_0 = 0;

	// Token: 0x04000295 RID: 661
	public bool havePet = true;

	// Token: 0x04000296 RID: 662
	public MovePoint currentMovePoint;

	// Token: 0x04000297 RID: 663
	public int bom;

	// Token: 0x04000298 RID: 664
	public int delayFall;

	// Token: 0x04000299 RID: 665
	private bool isSoundJump;

	// Token: 0x0400029A RID: 666
	public int lastFrame;

	// Token: 0x0400029B RID: 667
	private Effect eProtect;

	// Token: 0x0400029C RID: 668
	private Effect eDanhHieu;

	// Token: 0x0400029D RID: 669
	private int twHp;

	// Token: 0x0400029E RID: 670
	public bool isInjureHp;

	// Token: 0x0400029F RID: 671
	public bool changePos;

	// Token: 0x040002A0 RID: 672
	public bool isHide;

	// Token: 0x040002A1 RID: 673
	private int count;

	// Token: 0x040002A2 RID: 674
	private bool wy;

	// Token: 0x040002A3 RID: 675
	public int wt;

	// Token: 0x040002A4 RID: 676
	public int fy;

	// Token: 0x040002A5 RID: 677
	public int ty;

	// Token: 0x040002A6 RID: 678
	private int t;

	// Token: 0x040002A7 RID: 679
	private int fM;

	// Token: 0x040002A8 RID: 680
	public int[] move = new int[]
	{
		1,
		1,
		1,
		1,
		2,
		2,
		2,
		2,
		3,
		3,
		3,
		3,
		2,
		2,
		2
	};

	// Token: 0x040002A9 RID: 681
	private string strMount = "mount_";

	// Token: 0x040002AA RID: 682
	public int headICON = -1;

	// Token: 0x040002AB RID: 683
	public int head;

	// Token: 0x040002AC RID: 684
	public int leg;

	// Token: 0x040002AD RID: 685
	public int body;

	// Token: 0x040002AE RID: 686
	public int bag;

	// Token: 0x040002AF RID: 687
	public int wp;

	// Token: 0x040002B0 RID: 688
	public int indexEff = -1;

	// Token: 0x040002B1 RID: 689
	public int indexEffTask = -1;

	// Token: 0x040002B2 RID: 690
	public EffectCharPaint eff;

	// Token: 0x040002B3 RID: 691
	public EffectCharPaint effTask;

	// Token: 0x040002B4 RID: 692
	public int indexSkill;

	// Token: 0x040002B5 RID: 693
	public int i0;

	// Token: 0x040002B6 RID: 694
	public int i1;

	// Token: 0x040002B7 RID: 695
	public int i2;

	// Token: 0x040002B8 RID: 696
	public int dx0;

	// Token: 0x040002B9 RID: 697
	public int dx1;

	// Token: 0x040002BA RID: 698
	public int dx2;

	// Token: 0x040002BB RID: 699
	public int dy0;

	// Token: 0x040002BC RID: 700
	public int dy1;

	// Token: 0x040002BD RID: 701
	public int dy2;

	// Token: 0x040002BE RID: 702
	public EffectCharPaint eff0;

	// Token: 0x040002BF RID: 703
	public EffectCharPaint eff1;

	// Token: 0x040002C0 RID: 704
	public EffectCharPaint eff2;

	// Token: 0x040002C1 RID: 705
	public Arrow arr;

	// Token: 0x040002C2 RID: 706
	public PlayerDart dart;

	// Token: 0x040002C3 RID: 707
	public bool isCreateDark;

	// Token: 0x040002C4 RID: 708
	public SkillPaint skillPaint;

	// Token: 0x040002C5 RID: 709
	public SkillPaint skillPaintRandomPaint;

	// Token: 0x040002C6 RID: 710
	public EffectPaint[] effPaints;

	// Token: 0x040002C7 RID: 711
	public int sType;

	// Token: 0x040002C8 RID: 712
	public sbyte isInjure;

	// Token: 0x040002C9 RID: 713
	public bool isUseSkillAfterCharge;

	// Token: 0x040002CA RID: 714
	public bool isFlyAndCharge;

	// Token: 0x040002CB RID: 715
	public bool isStandAndCharge;

	// Token: 0x040002CC RID: 716
	private bool isFlying;

	// Token: 0x040002CD RID: 717
	public int posDisY;

	// Token: 0x040002CE RID: 718
	private int chargeCount;

	// Token: 0x040002CF RID: 719
	private bool hasSendAttack;

	// Token: 0x040002D0 RID: 720
	public bool isMabuHold;

	// Token: 0x040002D1 RID: 721
	private long timeBlue;

	// Token: 0x040002D2 RID: 722
	private int tBlue;

	// Token: 0x040002D3 RID: 723
	private bool IsAddDust1;

	// Token: 0x040002D4 RID: 724
	private bool IsAddDust2;

	// Token: 0x040002D5 RID: 725
	public int len = 24;

	// Token: 0x040002D6 RID: 726
	public int w_hp_bar = 24;

	// Token: 0x040002D7 RID: 727
	private int per = 100;

	// Token: 0x040002D8 RID: 728
	private int per_tem = 100;

	// Token: 0x040002D9 RID: 729
	private Image imgHPtem;

	// Token: 0x040002DA RID: 730
	private bool isPet;

	// Token: 0x040002DB RID: 731
	private bool isMiniPet;

	// Token: 0x040002DC RID: 732
	private int iiii;

	// Token: 0x040002DD RID: 733
	private int danhHieuFramme;

	// Token: 0x040002DE RID: 734
	public int xSd;

	// Token: 0x040002DF RID: 735
	public int ySd;

	// Token: 0x040002E0 RID: 736
	private bool isOutMap;

	// Token: 0x040002E1 RID: 737
	private int fBag;

	// Token: 0x040002E2 RID: 738
	private Part ph;

	// Token: 0x040002E3 RID: 739
	private Part pl;

	// Token: 0x040002E4 RID: 740
	private Part pb;

	// Token: 0x040002E5 RID: 741
	public int cH_new = 32;

	// Token: 0x040002E6 RID: 742
	private int statusBeforeNothing;

	// Token: 0x040002E7 RID: 743
	private int timeFocusToMob;

	// Token: 0x040002E8 RID: 744
	public static bool isManualFocus = false;

	// Token: 0x040002E9 RID: 745
	private global::Char charHold;

	// Token: 0x040002EA RID: 746
	private Mob mobHold;

	// Token: 0x040002EB RID: 747
	private int nInjure;

	// Token: 0x040002EC RID: 748
	public short wdx;

	// Token: 0x040002ED RID: 749
	public short wdy;

	// Token: 0x040002EE RID: 750
	public bool isDirtyPostion;

	// Token: 0x040002EF RID: 751
	public Skill lastNormalSkill;

	// Token: 0x040002F0 RID: 752
	public bool currentFireByShortcut;

	// Token: 0x040002F1 RID: 753
	public int cDamGoc;

	// Token: 0x040002F2 RID: 754
	public int cHPGoc;

	// Token: 0x040002F3 RID: 755
	public int cMPGoc;

	// Token: 0x040002F4 RID: 756
	public int cDefGoc;

	// Token: 0x040002F5 RID: 757
	public int cCriticalGoc;

	// Token: 0x040002F6 RID: 758
	public sbyte hpFrom1000TiemNang;

	// Token: 0x040002F7 RID: 759
	public sbyte mpFrom1000TiemNang;

	// Token: 0x040002F8 RID: 760
	public sbyte damFrom1000TiemNang;

	// Token: 0x040002F9 RID: 761
	public sbyte defFrom1000TiemNang = 1;

	// Token: 0x040002FA RID: 762
	public sbyte criticalFrom1000Tiemnang = 1;

	// Token: 0x040002FB RID: 763
	public short cMaxStamina;

	// Token: 0x040002FC RID: 764
	public short expForOneAdd;

	// Token: 0x040002FD RID: 765
	public sbyte isMonkey;

	// Token: 0x040002FE RID: 766
	public bool isCopy;

	// Token: 0x040002FF RID: 767
	public bool isWaitMonkey;

	// Token: 0x04000300 RID: 768
	private bool isFeetEff;

	// Token: 0x04000301 RID: 769
	public bool meDead;

	// Token: 0x04000302 RID: 770
	public int holdEffID;

	// Token: 0x04000303 RID: 771
	public bool holder;

	// Token: 0x04000304 RID: 772
	public bool protectEff;

	// Token: 0x04000305 RID: 773
	public bool danhHieuEff = true;

	// Token: 0x04000306 RID: 774
	private bool isSetPos;

	// Token: 0x04000307 RID: 775
	private int tpos;

	// Token: 0x04000308 RID: 776
	private short xPos;

	// Token: 0x04000309 RID: 777
	private short yPos;

	// Token: 0x0400030A RID: 778
	private sbyte typePos;

	// Token: 0x0400030B RID: 779
	private bool isMyFusion;

	// Token: 0x0400030C RID: 780
	public bool isFusion;

	// Token: 0x0400030D RID: 781
	public int tFusion;

	// Token: 0x0400030E RID: 782
	public bool huytSao;

	// Token: 0x0400030F RID: 783
	public bool blindEff;

	// Token: 0x04000310 RID: 784
	public bool telePortSkill;

	// Token: 0x04000311 RID: 785
	public bool sleepEff;

	// Token: 0x04000312 RID: 786
	public bool stone;

	// Token: 0x04000313 RID: 787
	public int perCentMp = 100;

	// Token: 0x04000314 RID: 788
	public long dHP;

	// Token: 0x04000315 RID: 789
	public int headTemp = -1;

	// Token: 0x04000316 RID: 790
	public int bodyTemp = -1;

	// Token: 0x04000317 RID: 791
	public int legTemp = -1;

	// Token: 0x04000318 RID: 792
	public int bagTemp = -1;

	// Token: 0x04000319 RID: 793
	public int wpTemp = -1;

	// Token: 0x0400031A RID: 794
	public MyVector vEffChar = new MyVector("vEff");

	// Token: 0x0400031B RID: 795
	public static FrameImage fraRedEye;

	// Token: 0x0400031C RID: 796
	private int fChopmat;

	// Token: 0x0400031D RID: 797
	private bool isAddChopMat;

	// Token: 0x0400031E RID: 798
	private long timeAddChopmat;

	// Token: 0x0400031F RID: 799
	private int[] frChopNhanh = new int[]
	{
		-1,
		-1,
		-1,
		-1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		-1,
		-1,
		-1,
		-1
	};

	// Token: 0x04000320 RID: 800
	private int[] frChopCham = new int[]
	{
		-1,
		-1,
		-1,
		-1,
		0,
		0,
		1,
		1,
		1,
		0,
		0,
		1,
		1,
		1,
		0,
		0,
		1,
		1,
		1,
		-1,
		-1,
		-1,
		-1
	};

	// Token: 0x04000321 RID: 801
	private int[] frEye = new int[]
	{
		-1,
		-1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		1,
		1,
		0,
		0,
		-1,
		-1
	};

	// Token: 0x04000322 RID: 802
	public static int[][] Arr_Head_2Fr = new int[][]
	{
		new int[]
		{
			542,
			543
		}
	};

	// Token: 0x04000323 RID: 803
	private int fHead;

	// Token: 0x04000324 RID: 804
	private string strEffAura = "aura_";

	// Token: 0x04000325 RID: 805
	public short idAuraEff = -1;

	// Token: 0x04000326 RID: 806
	public static bool isPaintAura = true;

	// Token: 0x04000327 RID: 807
	public static bool isPaintAura2 = true;

	// Token: 0x04000328 RID: 808
	private FrameImage fraEff;

	// Token: 0x04000329 RID: 809
	private FrameImage fraEffSub;

	// Token: 0x0400032A RID: 810
	private string strEff_Set_Item = "set_eff_";

	// Token: 0x0400032B RID: 811
	public short idEff_Set_Item = -1;

	// Token: 0x0400032C RID: 812
	private FrameImage fraHat_behind;

	// Token: 0x0400032D RID: 813
	private FrameImage fraHat_font;

	// Token: 0x0400032E RID: 814
	private FrameImage fraHat_behind_2;

	// Token: 0x0400032F RID: 815
	private FrameImage fraHat_font_2;

	// Token: 0x04000330 RID: 816
	private string strHat_behind = "hat_sau_";

	// Token: 0x04000331 RID: 817
	private string strHat_font = "hat_truoc_";

	// Token: 0x04000332 RID: 818
	private string strNgang = "ngang_";

	// Token: 0x04000333 RID: 819
	public short idHat = -1;

	// Token: 0x04000334 RID: 820
	public static int[][] hatInfo;

	// Token: 0x04000335 RID: 821
	public static short[] Arr_Head_FlyMove;

	// Token: 0x04000336 RID: 822
	public const byte TYPE_SKILL_KAMEX10 = 1;

	// Token: 0x04000337 RID: 823
	public const byte TYPE_SKILL_FINAL = 2;

	// Token: 0x04000338 RID: 824
	public const byte TYPE_SKILL_MAFUBA = 3;

	// Token: 0x04000339 RID: 825
	public const byte TYPE_SKILL_GENKI = 4;

	// Token: 0x0400033A RID: 826
	public bool isPaintNewSkill;

	// Token: 0x0400033B RID: 827
	private bool isFly;

	// Token: 0x0400033C RID: 828
	private long timeReset_newSkill;

	// Token: 0x0400033D RID: 829
	private sbyte typeFrame;

	// Token: 0x0400033E RID: 830
	private short idskillPaint;

	// Token: 0x0400033F RID: 831
	private byte[] fr_start;

	// Token: 0x04000340 RID: 832
	private byte[] fr_atk;

	// Token: 0x04000341 RID: 833
	private byte[] fr_end;

	// Token: 0x04000342 RID: 834
	private int count_NEW;

	// Token: 0x04000343 RID: 835
	private int stt;

	// Token: 0x04000344 RID: 836
	private short rangeDame;

	// Token: 0x04000345 RID: 837
	private sbyte typePaint;

	// Token: 0x04000346 RID: 838
	private sbyte typeItem;

	// Token: 0x04000347 RID: 839
	private Point targetDame;

	// Token: 0x04000348 RID: 840
	private long timeDame;

	// Token: 0x04000349 RID: 841
	public bool isMafuba;

	// Token: 0x0400034A RID: 842
	private short countMafuba;

	// Token: 0x0400034B RID: 843
	public int xMFB;

	// Token: 0x0400034C RID: 844
	public int yMFB;

	// Token: 0x0400034D RID: 845
	public int timeGongSkill;

	// Token: 0x0400034E RID: 846
	private FrameImage fraDanhHieu;

	// Token: 0x0400034F RID: 847
	private MainImage mainImg;
}
using System;

// Token: 0x0200002C RID: 44
public class ChatPopup : Effect2, IActionListener
{
	// Token: 0x06000293 RID: 659 RVA: 0x0002615C File Offset: 0x0002435C
	public static void addNextPopUpMultiLine(string strNext, Npc next)
	{
		ChatPopup.nextMultiChatPopUp = strNext;
		ChatPopup.nextChar = next;
		bool flag = ChatPopup.currChatPopup == null;
		if (flag)
		{
			ChatPopup.addChatPopupMultiLine(ChatPopup.nextMultiChatPopUp, 100000, ChatPopup.nextChar);
			ChatPopup.nextMultiChatPopUp = null;
			ChatPopup.nextChar = null;
		}
	}

	// Token: 0x06000294 RID: 660 RVA: 0x000261A8 File Offset: 0x000243A8
	public static void addBigMessage(string chat, int howLong, Npc c)
	{
		string[] array = new string[]
		{
			chat
		};
		bool flag = c.charID != 5 && GameScr.info1.isDone;
		if (flag)
		{
			GameScr.info1.isUpdate = false;
		}
		GameScr.info1.addInfo(chat, 0);
	}

	// Token: 0x06000295 RID: 661 RVA: 0x000261F8 File Offset: 0x000243F8
	public static void addChatPopupMultiLine(string chat, int howLong, Npc c)
	{
		string[] array = Res.split(chat, "\n", 0);
		GameScr.info1.addInfo(chat, 0);
	}

	// Token: 0x06000296 RID: 662 RVA: 0x00026220 File Offset: 0x00024420
	public static ChatPopup addChatPopupWithIcon(string chat, int howLong, Npc c, int idIcon)
	{
		ChatPopup.performDelay = 10;
		ChatPopup chatPopup = new ChatPopup();
		chatPopup.sayWidth = GameCanvas.w - 30 - (GameCanvas.menu.showMenu ? GameCanvas.menu.menuX : 0);
		bool flag = chatPopup.sayWidth > 320;
		if (flag)
		{
			chatPopup.sayWidth = 320;
		}
		bool flag2 = chat.Length < 10;
		if (flag2)
		{
			chatPopup.sayWidth = 64;
		}
		bool flag3 = GameCanvas.w == 128;
		if (flag3)
		{
			chatPopup.sayWidth = 128;
		}
		chatPopup.says = mFont.tahoma_7_red.splitFontArray(chat, chatPopup.sayWidth - 10);
		chatPopup.delay = howLong;
		chatPopup.c = c;
		chatPopup.iconID = idIcon;
		global::Char.chatPopup = chatPopup;
		chatPopup.ch = 15 - chatPopup.sayRun + chatPopup.says.Length * 12 + 10;
		bool flag4 = chatPopup.ch > GameCanvas.h - 80;
		if (flag4)
		{
			chatPopup.ch = GameCanvas.h - 80;
		}
		chatPopup.mH = 10;
		bool showMenu = GameCanvas.menu.showMenu;
		if (showMenu)
		{
			chatPopup.mH = 0;
		}
		Effect2.vEffect2.addElement(chatPopup);
		ChatPopup.isHavePetNpc = false;
		bool flag5 = c != null && c.charID == 5;
		if (flag5)
		{
			ChatPopup.isHavePetNpc = true;
			GameScr.info1.addInfo(string.Empty, 1);
		}
		ChatPopup.curr = (ChatPopup.last = mSystem.currentTimeMillis());
		chatPopup.ch += 15;
		return chatPopup;
	}

	// Token: 0x06000297 RID: 663 RVA: 0x000263B8 File Offset: 0x000245B8
	public static ChatPopup addChatPopup(string chat, int howLong, Npc c)
	{
		Lmao.NpxBox = chat;
		Lmao.CapCha = chat;
		ChatPopup.performDelay = 10;
		ChatPopup chatPopup = new ChatPopup();
		chatPopup.sayWidth = GameCanvas.w - 30 - (GameCanvas.menu.showMenu ? GameCanvas.menu.menuX : 0);
		bool flag = chatPopup.sayWidth > 320;
		if (flag)
		{
			chatPopup.sayWidth = 320;
		}
		bool flag2 = chat.Length < 10;
		if (flag2)
		{
			chatPopup.sayWidth = 64;
		}
		bool flag3 = GameCanvas.w == 128;
		if (flag3)
		{
			chatPopup.sayWidth = 128;
		}
		chatPopup.says = mFont.tahoma_7_red.splitFontArray(chat, chatPopup.sayWidth - 10);
		chatPopup.delay = howLong;
		chatPopup.c = c;
		global::Char.chatPopup = chatPopup;
		chatPopup.ch = 15 - chatPopup.sayRun + chatPopup.says.Length * 12 + 10;
		bool flag4 = chatPopup.ch > GameCanvas.h - 80;
		if (flag4)
		{
			chatPopup.ch = GameCanvas.h - 80;
		}
		chatPopup.mH = 10;
		bool showMenu = GameCanvas.menu.showMenu;
		if (showMenu)
		{
			chatPopup.mH = 0;
		}
		Effect2.vEffect2.addElement(chatPopup);
		ChatPopup.isHavePetNpc = false;
		bool flag5 = c != null && c.charID == 5;
		if (flag5)
		{
			ChatPopup.isHavePetNpc = true;
			GameScr.info1.addInfo(string.Empty, 1);
		}
		ChatPopup.curr = (ChatPopup.last = mSystem.currentTimeMillis());
		return chatPopup;
	}

	// Token: 0x06000298 RID: 664 RVA: 0x00026544 File Offset: 0x00024744
	public override void update()
	{
		bool flag = ChatPopup.scr != null;
		if (flag)
		{
			GameScr.info1.isUpdate = false;
			ChatPopup.scr.updatecm();
		}
		else
		{
			GameScr.info1.isUpdate = true;
		}
		bool showMenu = GameCanvas.menu.showMenu;
		if (showMenu)
		{
			this.strY = 0;
			this.cx = GameCanvas.w / 2 - this.sayWidth / 2 - 1;
			this.cy = GameCanvas.menu.menuY - this.ch;
		}
		else
		{
			this.strY = 0;
			bool flag2 = GameScr.gI().right != null || GameScr.gI().left != null || GameScr.gI().center != null || this.cmdNextLine != null || this.cmdMsg1 != null;
			if (flag2)
			{
				this.strY = 5;
				this.cx = GameCanvas.w / 2 - this.sayWidth / 2 - 1;
				this.cy = GameCanvas.h - 20 - this.ch;
			}
			else
			{
				this.cx = GameCanvas.w / 2 - this.sayWidth / 2 - 1;
				this.cy = GameCanvas.h - 5 - this.ch;
			}
		}
		bool flag3 = this.delay > 0;
		if (flag3)
		{
			this.delay--;
		}
		bool flag4 = ChatPopup.performDelay > 0;
		if (flag4)
		{
			ChatPopup.performDelay--;
		}
		else
		{
			GameScr.info1.info.time = 0;
			for (int i = 0; i < GameScr.info1.info.infoWaitToShow.size(); i++)
			{
				bool flag5 = ((InfoItem)GameScr.info1.info.infoWaitToShow.elementAt(i)).speed != 70;
				if (flag5)
				{
					((InfoItem)GameScr.info1.info.infoWaitToShow.elementAt(i)).speed = 10;
				}
			}
		}
		bool flag6 = this.sayRun > 1;
		if (flag6)
		{
			this.sayRun--;
		}
		bool flag7 = (this.c != null && global::Char.chatPopup != null && global::Char.chatPopup != this) || (this.c != null && global::Char.chatPopup == null) || this.delay <= 0;
		if (flag7)
		{
			Effect2.vEffect2Outside.removeElement(this);
			Effect2.vEffect2.removeElement(this);
		}
	}

	// Token: 0x06000299 RID: 665 RVA: 0x000267BC File Offset: 0x000249BC
	public override void paint(mGraphics g)
	{
		bool flag = GameScr.gI().activeRongThan && GameScr.gI().isUseFreez;
		if (!flag)
		{
			GameCanvas.resetTrans(g);
			int num = this.cx;
			int num2 = this.cy;
			int num3 = this.sayWidth + 2;
			int num4 = this.ch;
			bool flag2 = (num <= 0 || num2 <= 0) && !GameCanvas.panel.isShow;
			if (!flag2)
			{
				bool flag3 = this.c != null;
				if (flag3)
				{
					int num5 = (GameCanvas.gameTick % 10 <= 2) ? 1 : 0;
					SmallImage.drawSmallImage(g, this.c.avatar, this.cx + 14, this.cy + num5, 0, StaticObj.BOTTOM_LEFT);
				}
				bool flag4 = this.iconID != 0;
				if (flag4)
				{
					int num5 = (GameCanvas.gameTick % 10 <= 2) ? 1 : 0;
					SmallImage.drawSmallImage(g, this.iconID, this.cx + num3 / 2, this.cy + this.ch - 15 + num5, 0, StaticObj.VCENTER_HCENTER);
				}
				PopUp.paintPopUp(g, num, num2, num3, num4, 16777215, false);
				bool flag5 = ChatPopup.scr != null;
				if (flag5)
				{
					g.setClip(num, num2, num3, num4 - 16);
					g.translate(0, -ChatPopup.scr.cmy);
				}
				int tx = 0;
				int ty = 0;
				bool flag6 = this.isClip;
				if (flag6)
				{
					tx = g.getTranslateX();
					ty = g.getTranslateY();
					g.setClip(num, num2 + 1, num3, num4 - 17);
					g.translate(0, -ChatPopup.cmyText);
				}
				int num6 = -1;
				for (int i = 0; i < this.says.Length; i++)
				{
					bool flag7 = this.says[i].StartsWith("--");
					if (flag7)
					{
						g.setColor(0);
						g.fillRect(num + 10, this.cy + this.sayRun + i * 12 + 6, num3 - 20, 1);
					}
					else
					{
						mFont mFont = mFont.tahoma_7;
						int num7 = 2;
						string st = this.says[i];
						bool flag8 = this.says[i].StartsWith("|");
						int num8;
						if (flag8)
						{
							string[] array = Res.split(this.says[i], "|", 0);
							bool flag9 = array.Length == 3;
							if (flag9)
							{
								st = array[2];
							}
							bool flag10 = array.Length == 4;
							if (flag10)
							{
								st = array[3];
								num7 = int.Parse(array[2]);
							}
							num8 = int.Parse(array[1]);
							num6 = num8;
						}
						else
						{
							num8 = num6;
						}
						switch (num8)
						{
						case -1:
							mFont = mFont.tahoma_7;
							break;
						case 0:
							mFont = mFont.tahoma_7b_dark;
							break;
						case 1:
							mFont = mFont.tahoma_7b_green;
							break;
						case 2:
							mFont = mFont.tahoma_7b_blue;
							break;
						case 3:
							mFont = mFont.tahoma_7_red;
							break;
						case 4:
							mFont = mFont.tahoma_7_green;
							break;
						case 5:
							mFont = mFont.tahoma_7_blue;
							break;
						case 7:
							mFont = mFont.tahoma_7b_red;
							break;
						case 8:
							mFont = mFont.tahoma_7b_yellow;
							break;
						}
						bool flag11 = this.says[i].StartsWith("<");
						if (flag11)
						{
							string[] array2 = Res.split(this.says[i], "<", 0);
							string[] array3 = Res.split(array2[1], ">", 1);
							bool flag12 = this.second == 0;
							if (flag12)
							{
								this.second = int.Parse(array3[1]);
							}
							else
							{
								ChatPopup.curr = mSystem.currentTimeMillis();
								bool flag13 = ChatPopup.curr - ChatPopup.last >= 1000L;
								if (flag13)
								{
									ChatPopup.last = ChatPopup.curr;
									this.second--;
								}
							}
							st = this.second.ToString() + " " + array3[2];
							mFont.drawString(g, st, this.cx + this.sayWidth / 2, this.cy + this.sayRun + i * 12 - this.strY + 12, num7);
						}
						else
						{
							bool flag14 = num7 == 2;
							if (flag14)
							{
								mFont.drawString(g, st, this.cx + this.sayWidth / 2, this.cy + this.sayRun + i * 12 - this.strY + 12, num7);
							}
							bool flag15 = num7 == 1;
							if (flag15)
							{
								mFont.drawString(g, st, this.cx + this.sayWidth - 5, this.cy + this.sayRun + i * 12 - this.strY + 12, num7);
							}
						}
					}
				}
				bool flag16 = this.isClip;
				if (flag16)
				{
					GameCanvas.resetTrans(g);
					g.translate(tx, ty);
				}
				bool flag17 = this.maxStarSlot > 4;
				if (flag17)
				{
					this.nMaxslot_tren = (int)((this.maxStarSlot + 1) / 2);
					this.nMaxslot_duoi = (int)this.maxStarSlot - this.nMaxslot_tren;
					int[] array4 = new int[(int)this.maxStarSlot];
					int[] array5 = new int[(int)this.maxStarSlot];
					for (int j = 0; j < this.nMaxslot_tren; j++)
					{
						g.drawImage(Panel.imgMaxStar, num + num3 / 2 - this.nMaxslot_tren * 20 / 2 + j * 20 + mGraphics.getImageWidth(Panel.imgMaxStar), num2 + num4 - 17, 3);
						array4[j] = num + num3 / 2 - this.nMaxslot_tren * 20 / 2 + j * 20 + mGraphics.getImageWidth(Panel.imgMaxStar);
						array5[j] = num2 + num4 - 17;
					}
					for (int k = 0; k < this.nMaxslot_duoi; k++)
					{
						g.drawImage(Panel.imgMaxStar, num + num3 / 2 - this.nMaxslot_duoi * 20 / 2 + k * 20 + mGraphics.getImageWidth(Panel.imgMaxStar), num2 + num4 - 8, 3);
						array4[this.nMaxslot_tren + k] = num + num3 / 2 - this.nMaxslot_duoi * 20 / 2 + k * 20 + mGraphics.getImageWidth(Panel.imgMaxStar);
						array5[this.nMaxslot_tren + k] = num2 + num4 - 8;
					}
					bool flag18 = this.maxStarSlot >= 7;
					if (flag18)
					{
						for (int l = 7; l < (int)this.maxStarSlot; l++)
						{
							bool flag19 = this.starCuongHoa[l];
							if (flag19)
							{
								g.drawImage(Panel.imgStarCuongHoa, array4[l], array5[l], 3);
							}
						}
					}
					bool flag20 = this.starSlot > 0;
					if (flag20)
					{
						this.imgStar = Panel.imgStar;
						bool flag21 = (int)this.starSlot >= this.nMaxslot_tren;
						if (flag21)
						{
							this.nslot_duoi = (int)this.starSlot - this.nMaxslot_tren;
							for (int m = 0; m < this.nMaxslot_tren; m++)
							{
								g.drawImage(this.imgStar, num + num3 / 2 - this.nMaxslot_tren * 20 / 2 + m * 20 + mGraphics.getImageWidth(this.imgStar), num2 + num4 - 17, 3);
							}
							for (int n = 0; n < this.nslot_duoi; n++)
							{
								bool flag22 = n + this.nMaxslot_tren >= ChatPopup.numSlot;
								if (flag22)
								{
									this.imgStar = Panel.imgStar8;
								}
								g.drawImage(this.imgStar, num + num3 / 2 - this.nMaxslot_duoi * 20 / 2 + n * 20 + mGraphics.getImageWidth(this.imgStar), num2 + num4 - 8, 3);
							}
						}
						else
						{
							for (int num9 = 0; num9 < (int)this.starSlot; num9++)
							{
								g.drawImage(this.imgStar, num + num3 / 2 - this.nMaxslot_tren * 20 / 2 + num9 * 20 + mGraphics.getImageWidth(this.imgStar), num2 + num4 - 17, 3);
							}
						}
					}
				}
				else
				{
					for (int num10 = 0; num10 < (int)this.maxStarSlot; num10++)
					{
						g.drawImage(Panel.imgMaxStar, num + num3 / 2 - (int)(this.maxStarSlot * 20 / 2) + num10 * 20 + mGraphics.getImageWidth(Panel.imgMaxStar), num2 + num4 - 13, 3);
					}
					bool flag23 = this.starSlot > 0;
					if (flag23)
					{
						for (int num11 = 0; num11 < (int)this.starSlot; num11++)
						{
							g.drawImage(Panel.imgStar, num + num3 / 2 - (int)(this.maxStarSlot * 20 / 2) + num11 * 20 + mGraphics.getImageWidth(Panel.imgStar), num2 + num4 - 13, 3);
						}
					}
				}
				this.paintCmd(g);
			}
		}
	}

	// Token: 0x0600029A RID: 666 RVA: 0x000270A0 File Offset: 0x000252A0
	public void paintRada(mGraphics g, int cmyText)
	{
		int num = this.cx;
		int num2 = this.cy;
		int num3 = this.sayWidth;
		int num4 = this.ch;
		int translateX = g.getTranslateX();
		int translateY = g.getTranslateY();
		g.translate(0, -cmyText);
		bool flag = (num <= 0 || num2 <= 0) && !GameCanvas.panel.isShow;
		if (!flag)
		{
			int num5 = -1;
			for (int i = 0; i < this.says.Length; i++)
			{
				bool flag2 = this.says[i].StartsWith("--");
				if (flag2)
				{
					g.setColor(16777215);
					g.fillRect(num + 10, this.cy + this.sayRun + i * 12 - 6, num3 - 20, 1);
				}
				else
				{
					mFont mFont = mFont.tahoma_7_white;
					int num6 = 2;
					string st = this.says[i];
					bool flag3 = this.says[i].StartsWith("|");
					int num7;
					if (flag3)
					{
						string[] array = Res.split(this.says[i], "|", 0);
						bool flag4 = array.Length == 3;
						if (flag4)
						{
							st = array[2];
						}
						bool flag5 = array.Length == 4;
						if (flag5)
						{
							st = array[3];
							num6 = int.Parse(array[2]);
						}
						num7 = int.Parse(array[1]);
						num5 = num7;
					}
					else
					{
						num7 = num5;
					}
					switch (num7)
					{
					case -1:
						mFont = mFont.tahoma_7_white;
						break;
					case 0:
						mFont = mFont.tahoma_7b_white;
						break;
					case 1:
						mFont = mFont.tahoma_7b_green;
						break;
					case 2:
						mFont = mFont.tahoma_7b_red;
						break;
					}
					bool flag6 = this.says[i].StartsWith("<");
					if (flag6)
					{
						string[] array2 = Res.split(this.says[i], "<", 0);
						string[] array3 = Res.split(array2[1], ">", 1);
						bool flag7 = this.second == 0;
						if (flag7)
						{
							this.second = int.Parse(array3[1]);
						}
						else
						{
							ChatPopup.curr = mSystem.currentTimeMillis();
							bool flag8 = ChatPopup.curr - ChatPopup.last >= 1000L;
							if (flag8)
							{
								ChatPopup.last = ChatPopup.curr;
								this.second--;
							}
						}
						st = this.second.ToString() + " " + array3[2];
						mFont.drawString(g, st, this.cx + this.sayWidth / 2, this.cy + this.sayRun + i * 12 - this.strY, num6);
					}
					else
					{
						bool flag9 = num6 == 2;
						if (flag9)
						{
							mFont.drawString(g, st, this.cx + this.sayWidth / 2, this.cy + this.sayRun + i * 12 - this.strY, num6);
						}
						bool flag10 = num6 == 1;
						if (flag10)
						{
							mFont.drawString(g, st, this.cx + this.sayWidth - 5, this.cy + this.sayRun + i * 12 - this.strY, num6);
						}
					}
				}
			}
			GameCanvas.resetTrans(g);
			g.translate(translateX, translateY);
		}
	}

	// Token: 0x0600029B RID: 667 RVA: 0x000273FC File Offset: 0x000255FC
	private void doKeyText(int type)
	{
		ChatPopup.cmyText += 12 * type;
		bool flag = ChatPopup.cmyText < 0;
		if (flag)
		{
			ChatPopup.cmyText = 0;
		}
		bool flag2 = ChatPopup.cmyText > this.lim;
		if (flag2)
		{
			ChatPopup.cmyText = this.lim;
		}
	}

	// Token: 0x0600029C RID: 668 RVA: 0x0002744C File Offset: 0x0002564C
	public void updateKey()
	{
		bool flag = this.isClip;
		if (flag)
		{
			bool flag2 = GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22];
			if (flag2)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] = false;
				this.doKeyText(1);
			}
			bool flag3 = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21];
			if (flag3)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] = false;
				this.doKeyText(-1);
			}
			bool flag4 = GameCanvas.isPointerHoldIn(this.cx, 0, this.sayWidth + 2, this.ch);
			if (flag4)
			{
				bool isPointerMove = GameCanvas.isPointerMove;
				if (isPointerMove)
				{
					bool flag5 = this.pyy == 0;
					if (flag5)
					{
						this.pyy = GameCanvas.py;
					}
					this.pxx = this.pyy - GameCanvas.py;
					bool flag6 = this.pxx != 0;
					if (flag6)
					{
						ChatPopup.cmyText += this.pxx;
						this.pyy = GameCanvas.py;
					}
					bool flag7 = ChatPopup.cmyText < 0;
					if (flag7)
					{
						ChatPopup.cmyText = 0;
					}
					bool flag8 = ChatPopup.cmyText > this.lim;
					if (flag8)
					{
						ChatPopup.cmyText = this.lim;
					}
				}
				else
				{
					this.pyy = 0;
					this.pyy = 0;
				}
			}
		}
		bool flag9 = ChatPopup.scr != null;
		if (flag9)
		{
			bool isTouch = GameCanvas.isTouch;
			if (isTouch)
			{
				ChatPopup.scr.updateKey();
			}
			bool flag10 = GameCanvas.keyHold[(!Main.isPC) ? 2 : 21];
			if (flag10)
			{
				ChatPopup.scr.cmtoY -= 12;
				bool flag11 = ChatPopup.scr.cmtoY < 0;
				if (flag11)
				{
					ChatPopup.scr.cmtoY = 0;
				}
			}
			bool flag12 = GameCanvas.keyHold[(!Main.isPC) ? 8 : 22];
			if (flag12)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] = false;
				ChatPopup.scr.cmtoY += 12;
				bool flag13 = ChatPopup.scr.cmtoY > ChatPopup.scr.cmyLim;
				if (flag13)
				{
					ChatPopup.scr.cmtoY = ChatPopup.scr.cmyLim;
				}
			}
		}
		bool flag14 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] || mScreen.getCmdPointerLast(GameCanvas.currentScreen.center);
		if (flag14)
		{
			GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
			mScreen.keyTouch = -1;
			bool flag15 = this.cmdNextLine != null;
			if (flag15)
			{
				this.cmdNextLine.performAction();
			}
			else
			{
				bool flag16 = this.cmdMsg1 != null;
				if (flag16)
				{
					this.cmdMsg1.performAction();
				}
				else
				{
					bool flag17 = this.cmdMsg2 != null;
					if (flag17)
					{
						this.cmdMsg2.performAction();
					}
				}
			}
		}
		bool flag18 = ChatPopup.scr == null || !ChatPopup.scr.pointerIsDowning;
		if (flag18)
		{
			bool flag19 = this.cmdMsg1 != null && (GameCanvas.keyPressed[12] || GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] || mScreen.getCmdPointerLast(this.cmdMsg1));
			if (flag19)
			{
				GameCanvas.keyPressed[12] = false;
				GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
				GameCanvas.isPointerClick = false;
				GameCanvas.isPointerJustRelease = false;
				this.cmdMsg1.performAction();
				mScreen.keyTouch = -1;
			}
			bool flag20 = this.cmdMsg2 != null && (GameCanvas.keyPressed[13] || mScreen.getCmdPointerLast(this.cmdMsg2));
			if (flag20)
			{
				GameCanvas.keyPressed[13] = false;
				GameCanvas.isPointerClick = false;
				GameCanvas.isPointerJustRelease = false;
				this.cmdMsg2.performAction();
				mScreen.keyTouch = -1;
			}
		}
	}

	// Token: 0x0600029D RID: 669 RVA: 0x00027820 File Offset: 0x00025A20
	public void paintCmd(mGraphics g)
	{
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
		GameCanvas.paintz.paintTabSoft(g);
		bool flag = this.cmdNextLine != null;
		if (flag)
		{
			GameCanvas.paintz.paintCmdBar(g, null, this.cmdNextLine, null);
		}
		bool flag2 = this.cmdMsg1 != null;
		if (flag2)
		{
			GameCanvas.paintz.paintCmdBar(g, this.cmdMsg1, null, this.cmdMsg2);
		}
	}

	// Token: 0x0600029E RID: 670 RVA: 0x000278B0 File Offset: 0x00025AB0
	public void perform(int idAction, object p)
	{
		bool flag = idAction == 1000;
		if (flag)
		{
			try
			{
				GameMidlet.instance.platformRequest((string)p);
			}
			catch (Exception)
			{
			}
			bool flag2 = !Main.isPC;
			if (flag2)
			{
				GameMidlet.instance.notifyDestroyed();
			}
			else
			{
				idAction = 1001;
			}
			GameCanvas.endDlg();
		}
		bool flag3 = idAction == 1001;
		if (flag3)
		{
			ChatPopup.scr = null;
			global::Char.chatPopup = null;
			ChatPopup.serverChatPopUp = null;
			GameScr.info1.isUpdate = true;
			global::Char.isLockKey = false;
			bool flag4 = ChatPopup.isHavePetNpc;
			if (flag4)
			{
				GameScr.info1.info.time = 0;
				GameScr.info1.info.info.speed = 10;
			}
		}
		bool flag5 = idAction != 8000 || ChatPopup.performDelay > 0;
		if (!flag5)
		{
			int num = ChatPopup.currChatPopup.currentLine;
			num++;
			bool flag6 = num >= ChatPopup.currChatPopup.lines.Length;
			if (flag6)
			{
				global::Char.chatPopup = null;
				ChatPopup.currChatPopup = null;
				GameScr.info1.isUpdate = true;
				global::Char.isLockKey = false;
				bool flag7 = ChatPopup.nextMultiChatPopUp != null;
				if (flag7)
				{
					ChatPopup.addChatPopupMultiLine(ChatPopup.nextMultiChatPopUp, 100000, ChatPopup.nextChar);
					ChatPopup.nextMultiChatPopUp = null;
					ChatPopup.nextChar = null;
				}
				else
				{
					bool flag8 = !ChatPopup.isHavePetNpc;
					if (!flag8)
					{
						GameScr.info1.info.time = 0;
						for (int i = 0; i < GameScr.info1.info.infoWaitToShow.size(); i++)
						{
							bool flag9 = ((InfoItem)GameScr.info1.info.infoWaitToShow.elementAt(i)).speed == 10000000;
							if (flag9)
							{
								((InfoItem)GameScr.info1.info.infoWaitToShow.elementAt(i)).speed = 10;
							}
						}
					}
				}
			}
			else
			{
				ChatPopup chatPopup = ChatPopup.addChatPopup(ChatPopup.currChatPopup.lines[num], ChatPopup.currChatPopup.delay, ChatPopup.currChatPopup.c);
				chatPopup.currentLine = num;
				chatPopup.lines = ChatPopup.currChatPopup.lines;
				chatPopup.cmdNextLine = ChatPopup.currChatPopup.cmdNextLine;
				ChatPopup.currChatPopup = chatPopup;
			}
		}
	}

	// Token: 0x04000350 RID: 848
	public int sayWidth = 100;

	// Token: 0x04000351 RID: 849
	public int delay;

	// Token: 0x04000352 RID: 850
	public int sayRun;

	// Token: 0x04000353 RID: 851
	public string[] says;

	// Token: 0x04000354 RID: 852
	public int cx;

	// Token: 0x04000355 RID: 853
	public int cy;

	// Token: 0x04000356 RID: 854
	public int ch;

	// Token: 0x04000357 RID: 855
	public int cmx;

	// Token: 0x04000358 RID: 856
	public int cmy;

	// Token: 0x04000359 RID: 857
	public int lim;

	// Token: 0x0400035A RID: 858
	public Npc c;

	// Token: 0x0400035B RID: 859
	private bool outSide;

	// Token: 0x0400035C RID: 860
	public static long curr;

	// Token: 0x0400035D RID: 861
	public static long last;

	// Token: 0x0400035E RID: 862
	private int currentLine;

	// Token: 0x0400035F RID: 863
	private string[] lines;

	// Token: 0x04000360 RID: 864
	public Command cmdNextLine;

	// Token: 0x04000361 RID: 865
	public Command cmdMsg1;

	// Token: 0x04000362 RID: 866
	public Command cmdMsg2;

	// Token: 0x04000363 RID: 867
	public static ChatPopup currChatPopup;

	// Token: 0x04000364 RID: 868
	public static ChatPopup serverChatPopUp;

	// Token: 0x04000365 RID: 869
	public static string nextMultiChatPopUp;

	// Token: 0x04000366 RID: 870
	public static Npc nextChar;

	// Token: 0x04000367 RID: 871
	public bool isShopDetail;

	// Token: 0x04000368 RID: 872
	public sbyte starSlot;

	// Token: 0x04000369 RID: 873
	public sbyte maxStarSlot;

	// Token: 0x0400036A RID: 874
	public static Scroll scr;

	// Token: 0x0400036B RID: 875
	public static bool isHavePetNpc;

	// Token: 0x0400036C RID: 876
	public int mH;

	// Token: 0x0400036D RID: 877
	public static int performDelay;

	// Token: 0x0400036E RID: 878
	public int dx;

	// Token: 0x0400036F RID: 879
	public int dy;

	// Token: 0x04000370 RID: 880
	public int second;

	// Token: 0x04000371 RID: 881
	private Point[] saoPoint = new Point[14];

	// Token: 0x04000372 RID: 882
	private int indexStar;

	// Token: 0x04000373 RID: 883
	private int indexStar2;

	// Token: 0x04000374 RID: 884
	public bool[] starCuongHoa = new bool[20];

	// Token: 0x04000375 RID: 885
	public static int numSlot = 7;

	// Token: 0x04000376 RID: 886
	private int nMaxslot_duoi;

	// Token: 0x04000377 RID: 887
	private int nMaxslot_tren;

	// Token: 0x04000378 RID: 888
	private int nslot_duoi;

	// Token: 0x04000379 RID: 889
	private Image imgStar;

	// Token: 0x0400037A RID: 890
	public int strY;

	// Token: 0x0400037B RID: 891
	private int iconID;

	// Token: 0x0400037C RID: 892
	public bool isClip;

	// Token: 0x0400037D RID: 893
	public static int cmyText;

	// Token: 0x0400037E RID: 894
	private int pxx;

	// Token: 0x0400037F RID: 895
	private int pyy;
}
using System;

// Token: 0x0200002D RID: 45
public class ChatTextField : IActionListener
{
	// Token: 0x060002A1 RID: 673 RVA: 0x00027B58 File Offset: 0x00025D58
	public ChatTextField()
	{
		this.tfChat = new TField();
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.tfChat.showSubTextField = false;
		}
		bool isIPhone = Main.isIPhone;
		if (isIPhone)
		{
			this.tfChat.isPaintMouse = false;
		}
		this.tfChat.name = "chat";
		bool isWindowsPhone2 = Main.isWindowsPhone;
		if (isWindowsPhone2)
		{
			this.tfChat.strInfo = this.tfChat.name;
		}
		this.tfChat.width = GameCanvas.w - 6;
		bool flag = Main.isPC && this.tfChat.width > 250;
		if (flag)
		{
			this.tfChat.width = 250;
		}
		this.tfChat.height = mScreen.ITEM_HEIGHT + 2;
		this.tfChat.x = GameCanvas.w / 2 - this.tfChat.width / 2;
		this.tfChat.isFocus = true;
		this.tfChat.setMaxTextLenght(80);
	}

	// Token: 0x060002A2 RID: 674 RVA: 0x00027C74 File Offset: 0x00025E74
	public void initChatTextField()
	{
		this.left = new Command(mResources.OK, this, 8000, null, 1, GameCanvas.h - mScreen.cmdH + 1);
		this.right = new Command(mResources.DELETE, this, 8001, null, GameCanvas.w - 70, GameCanvas.h - mScreen.cmdH + 1);
		this.center = null;
		this.w = this.tfChat.width + 20;
		this.h = this.tfChat.height + 26;
		this.x = GameCanvas.w / 2 - this.w / 2;
		this.y = this.tfChat.y - 18;
		bool flag = Main.isPC && this.w > 320;
		if (flag)
		{
			this.w = 320;
		}
		this.left.x = this.x;
		this.right.x = this.x + this.w - 68;
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.tfChat.y -= 5;
			this.y -= 20;
			this.h += 30;
			this.left.x = GameCanvas.w / 2 - 68 - 5;
			this.right.x = GameCanvas.w / 2 + 5;
			this.left.y = GameCanvas.h - 30;
			this.right.y = GameCanvas.h - 30;
		}
		this.cmdChat = new Command();
		ActionChat actionChat = delegate(string str)
		{
			this.tfChat.justReturnFromTextBox = false;
			this.tfChat.setText(str);
			this.parentScreen.onChatFromMe(str, this.to);
			this.tfChat.setText(string.Empty);
			this.right.caption = mResources.CLOSE;
		};
		this.cmdChat.actionChat = actionChat;
		this.cmdChat2 = new Command();
		this.cmdChat2.actionChat = delegate(string str)
		{
			this.tfChat.justReturnFromTextBox = false;
			bool flag2 = this.parentScreen != null;
			if (flag2)
			{
				this.tfChat.setText(str);
				this.parentScreen.onChatFromMe(str, this.to);
				this.tfChat.setText(string.Empty);
				this.tfChat.clearKb();
				bool flag3 = this.right != null;
				if (flag3)
				{
					this.right.performAction();
				}
			}
			this.isShow = false;
		};
		this.yBegin = this.tfChat.y;
		this.yUp = GameCanvas.h / 2 - 2 * this.tfChat.height;
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.tfChat.showSubTextField = false;
		}
		bool isIPhone = Main.isIPhone;
		if (isIPhone)
		{
			this.tfChat.isPaintMouse = false;
		}
	}

	// Token: 0x060002A3 RID: 675 RVA: 0x00027EB2 File Offset: 0x000260B2
	public void updateWhenKeyBoardVisible()
	{
	}

	// Token: 0x060002A4 RID: 676 RVA: 0x00027EB8 File Offset: 0x000260B8
	public void keyPressed(int keyCode)
	{
		bool flag = this.isShow;
		if (flag)
		{
			this.tfChat.keyPressed(keyCode);
		}
		bool flag2 = this.tfChat.getText().Equals(string.Empty);
		if (flag2)
		{
			this.right.caption = mResources.CLOSE;
		}
		else
		{
			this.right.caption = mResources.DELETE;
		}
	}

	// Token: 0x060002A5 RID: 677 RVA: 0x00027F20 File Offset: 0x00026120
	public static ChatTextField gI()
	{
		return (ChatTextField.instance != null) ? ChatTextField.instance : (ChatTextField.instance = new ChatTextField());
	}

	// Token: 0x060002A6 RID: 678 RVA: 0x00027F4C File Offset: 0x0002614C
	public void startChat(int firstCharacter, IChatable parentScreen, string to)
	{
		this.right.caption = mResources.CLOSE;
		this.to = to;
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.tfChat.showSubTextField = false;
		}
		bool isIPhone = Main.isIPhone;
		if (isIPhone)
		{
			this.tfChat.isPaintMouse = false;
		}
		this.tfChat.keyPressed(firstCharacter);
		bool flag = !this.tfChat.getText().Equals(string.Empty) && GameCanvas.currentDialog == null;
		if (flag)
		{
			this.parentScreen = parentScreen;
			this.isShow = true;
		}
	}

	// Token: 0x060002A7 RID: 679 RVA: 0x00027FE4 File Offset: 0x000261E4
	public void startChat(IChatable parentScreen, string to)
	{
		this.right.caption = mResources.CLOSE;
		this.to = to;
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.tfChat.showSubTextField = false;
		}
		bool isIPhone = Main.isIPhone;
		if (isIPhone)
		{
			this.tfChat.isPaintMouse = false;
		}
		bool flag = GameCanvas.currentDialog == null;
		if (flag)
		{
			this.isShow = true;
			this.tfChat.isFocus = true;
			bool flag2 = !Main.isPC;
			if (flag2)
			{
				ipKeyboard.openKeyBoard(this.strChat, ipKeyboard.TEXT, string.Empty, this.cmdChat);
				this.tfChat.setFocusWithKb(true);
			}
		}
		this.tfChat.setText(string.Empty);
		this.tfChat.clearAll();
		this.isPublic = false;
	}

	// Token: 0x060002A8 RID: 680 RVA: 0x000280B4 File Offset: 0x000262B4
	public void startChat2(IChatable parentScreen, string to)
	{
		this.tfChat.setFocusWithKb(true);
		this.to = to;
		this.parentScreen = parentScreen;
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.tfChat.showSubTextField = false;
		}
		bool isIPhone = Main.isIPhone;
		if (isIPhone)
		{
			this.tfChat.isPaintMouse = false;
		}
		bool flag = GameCanvas.currentDialog == null;
		if (flag)
		{
			this.isShow = true;
			bool flag2 = !Main.isPC;
			if (flag2)
			{
				ipKeyboard.openKeyBoard(this.strChat, ipKeyboard.TEXT, string.Empty, this.cmdChat2);
				this.tfChat.setFocusWithKb(true);
			}
		}
		this.tfChat.setText(string.Empty);
		this.tfChat.clearAll();
		this.isPublic = false;
	}

	// Token: 0x060002A9 RID: 681 RVA: 0x0002817B File Offset: 0x0002637B
	public void updateKey()
	{
	}

	// Token: 0x060002AA RID: 682 RVA: 0x00028180 File Offset: 0x00026380
	public void update()
	{
		bool flag = !this.isShow;
		if (!flag)
		{
			this.tfChat.update();
			bool isWindowsPhone = Main.isWindowsPhone;
			if (isWindowsPhone)
			{
				this.updateWhenKeyBoardVisible();
			}
			bool justReturnFromTextBox = this.tfChat.justReturnFromTextBox;
			if (justReturnFromTextBox)
			{
				this.tfChat.justReturnFromTextBox = false;
				this.parentScreen.onChatFromMe(this.tfChat.getText(), this.to);
				this.tfChat.setText(string.Empty);
				this.right.caption = mResources.CLOSE;
			}
			bool flag2 = !Main.isPC;
			if (!flag2)
			{
				bool flag3 = GameCanvas.keyPressed[15];
				if (flag3)
				{
					bool flag4 = this.left != null && this.tfChat.getText() != string.Empty;
					if (flag4)
					{
						this.left.performAction();
					}
					GameCanvas.keyPressed[15] = false;
					GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
				}
				bool flag5 = GameCanvas.keyPressed[14];
				if (flag5)
				{
					bool flag6 = this.right != null;
					if (flag6)
					{
						this.right.performAction();
					}
					GameCanvas.keyPressed[14] = false;
				}
			}
		}
	}

	// Token: 0x060002AB RID: 683 RVA: 0x000282C2 File Offset: 0x000264C2
	public void close()
	{
		this.tfChat.setText(string.Empty);
		this.isShow = false;
	}

	// Token: 0x060002AC RID: 684 RVA: 0x000282E0 File Offset: 0x000264E0
	public void paint(mGraphics g)
	{
		bool flag = this.isShow && !Main.isIPhone;
		if (flag)
		{
			int num = (!Main.isWindowsPhone) ? (this.y - this.KC) : (this.tfChat.y - 5);
			int num2 = (!Main.isWindowsPhone) ? this.x : 0;
			int num3 = (!Main.isWindowsPhone) ? this.w : GameCanvas.w;
			PopUp.paintPopUp(g, num2, num, num3, this.h, -1, true);
			bool isPC = Main.isPC;
			if (isPC)
			{
				mFont.tahoma_7b_green2.drawString(g, this.strChat + this.to, this.tfChat.x, this.tfChat.y - ((!GameCanvas.isTouch) ? 12 : 17), 0);
				GameCanvas.paintz.paintCmdBar(g, this.left, this.center, this.right);
			}
			this.tfChat.paint(g);
		}
	}

	// Token: 0x060002AD RID: 685 RVA: 0x000283E0 File Offset: 0x000265E0
	public void perform(int idAction, object p)
	{
		switch (idAction)
		{
		case 8000:
		{
			Cout.LogError("perform chat 8000");
			bool flag = this.parentScreen != null;
			if (flag)
			{
				long num = mSystem.currentTimeMillis();
				bool flag2 = num - this.lastChatTime >= 1000L;
				if (flag2)
				{
					this.lastChatTime = num;
					this.parentScreen.onChatFromMe(this.tfChat.getText(), this.to);
					this.tfChat.setText(string.Empty);
					this.right.caption = mResources.CLOSE;
					this.tfChat.clearKb();
				}
			}
			break;
		}
		case 8001:
		{
			Cout.LogError("perform chat 8001");
			bool flag3 = this.tfChat.getText().Equals(string.Empty);
			if (flag3)
			{
				this.isShow = false;
				this.parentScreen.onCancelChat();
			}
			this.tfChat.clear();
			break;
		}
		}
	}

	// Token: 0x04000380 RID: 896
	private static ChatTextField instance;

	// Token: 0x04000381 RID: 897
	public TField tfChat;

	// Token: 0x04000382 RID: 898
	public bool isShow;

	// Token: 0x04000383 RID: 899
	public IChatable parentScreen;

	// Token: 0x04000384 RID: 900
	private long lastChatTime;

	// Token: 0x04000385 RID: 901
	public Command left;

	// Token: 0x04000386 RID: 902
	public Command cmdChat;

	// Token: 0x04000387 RID: 903
	public Command right;

	// Token: 0x04000388 RID: 904
	public Command center;

	// Token: 0x04000389 RID: 905
	private int x;

	// Token: 0x0400038A RID: 906
	private int y;

	// Token: 0x0400038B RID: 907
	private int w;

	// Token: 0x0400038C RID: 908
	private int h;

	// Token: 0x0400038D RID: 909
	private bool isPublic;

	// Token: 0x0400038E RID: 910
	public Command cmdChat2;

	// Token: 0x0400038F RID: 911
	public int yBegin;

	// Token: 0x04000390 RID: 912
	public int yUp;

	// Token: 0x04000391 RID: 913
	public int KC;

	// Token: 0x04000392 RID: 914
	public string to;

	// Token: 0x04000393 RID: 915
	public string strChat = "Chat ";
}
using System;

// Token: 0x0200002F RID: 47
internal class CheckOutTNSM
{
	// Token: 0x060002B3 RID: 691 RVA: 0x0002867C File Offset: 0x0002687C
	public static void CheckOutTnsm()
	{
		bool flag = global::Char.myCharz().cLevelPercent <= 9990L;
		if (flag)
		{
			int tickCount = Environment.TickCount;
			bool flag2 = CheckOutTNSM.lastCheckTime == 0L;
			if (flag2)
			{
				CheckOutTNSM.lastPower = global::Char.myCharz().cPower;
				CheckOutTNSM.lastCheckTime = (long)tickCount;
			}
			long num = ((long)tickCount - CheckOutTNSM.lastCheckTime) / 100L;
			bool flag3 = num >= CheckOutTNSM.TimecheckOut;
			if (flag3)
			{
				bool flag4 = global::Char.myCharz().cPower <= CheckOutTNSM.lastPower;
				if (flag4)
				{
					Main.exit();
				}
				else
				{
					CheckOutTNSM.lastPower = global::Char.myCharz().cPower;
					CheckOutTNSM.lastCheckTime = (long)tickCount;
				}
			}
		}
	}

	// Token: 0x0400039A RID: 922
	public static long lastPower = 0L;

	// Token: 0x0400039B RID: 923
	private static long lastCheckTime = 0L;

	// Token: 0x0400039C RID: 924
	public static long TimecheckOut = 5000L;
}
using System;

// Token: 0x02000031 RID: 49
public class ChooseCharScr : mScreen, IActionListener
{
	// Token: 0x060002B9 RID: 697 RVA: 0x0002887A File Offset: 0x00026A7A
	public override void switchToMe()
	{
		ServerListScreen.isWait = false;
		global::Char.isLoadingMap = false;
		LoginScr.isContinueToLogin = false;
		ServerListScreen.waitToLogin = false;
		GameScr.gI().initSelectChar();
		base.switchToMe();
	}

	// Token: 0x060002BA RID: 698 RVA: 0x000288A8 File Offset: 0x00026AA8
	public override void update()
	{
		bool flag = GameCanvas.gameTick % 10 > 2;
		if (flag)
		{
			this.cf = 1;
		}
		else
		{
			this.cf = 0;
		}
		for (int i = 0; i < this.vc_players.Length; i++)
		{
			bool flag2 = this.vc_players[i].isPointerPressInside();
			if (flag2)
			{
				this.vc_players[i].performAction();
			}
		}
		for (int j = 0; j < this.cx.Length; j++)
		{
			bool flag3 = GameCanvas.isPointerHoldIn(this.cx[j] + this.offsetX, this.cy[j] + this.offsetY, this.rectPanel[2], 60);
			if (flag3)
			{
				bool isPointerDown = GameCanvas.isPointerDown;
				if (isPointerDown)
				{
					this.focus = j;
					break;
				}
				bool flag4 = GameCanvas.isPointerJustRelease && !GameCanvas.isPointerClick;
				if (flag4)
				{
				}
			}
		}
		base.update();
	}

	// Token: 0x060002BB RID: 699 RVA: 0x000289A4 File Offset: 0x00026BA4
	public override void paint(mGraphics g)
	{
		GameCanvas.paintBGGameScr(g);
		try
		{
			PopUp.paintPopUp(g, this.rectPanel[0] - 10, this.rectPanel[1], this.rectPanel[2] + 20, this.rectPanel[3], 16777215, true);
			bool flag = this.vc_players != null;
			if (flag)
			{
				for (int i = 0; i < this.vc_players.Length; i++)
				{
					this.vc_players[i].paint(g);
				}
			}
			bool flag2 = ChooseCharScr.playerData != null;
			if (flag2)
			{
				for (int j = 0; j < ChooseCharScr.playerData.Length; j++)
				{
					PopUp.paintPopUp(g, this.cx[j] - 20, this.cy[j] + this.offsetY, this.rectPanel[2], 60, 16777215, false);
					Part part = GameScr.parts[(int)ChooseCharScr.playerData[j].head];
					Part part2 = GameScr.parts[(int)ChooseCharScr.playerData[j].leg];
					Part part3 = GameScr.parts[(int)ChooseCharScr.playerData[j].body];
					SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[this.cf][0][0]].id, this.cx[j] + global::Char.CharInfo[this.cf][0][1] + (int)part.pi[global::Char.CharInfo[this.cf][0][0]].dx, this.cy[j] - global::Char.CharInfo[this.cf][0][2] + (int)part.pi[global::Char.CharInfo[this.cf][0][0]].dy, 0, 0);
					SmallImage.drawSmallImage(g, (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].id, this.cx[j] + global::Char.CharInfo[this.cf][1][1] + (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].dx, this.cy[j] - global::Char.CharInfo[this.cf][1][2] + (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].dy, 0, 0);
					SmallImage.drawSmallImage(g, (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].id, this.cx[j] + global::Char.CharInfo[this.cf][2][1] + (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].dx, this.cy[j] - global::Char.CharInfo[this.cf][2][2] + (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].dy, 0, 0);
					bool flag3 = this.focus == j;
					if (flag3)
					{
						mFont.tahoma_7b_yellow.drawString(g, ChooseCharScr.playerData[j].name, this.cx[j] + this.rectPanel[2] - 25, this.cy[j] + this.offsetY, 1);
						mFont.tahoma_7b_yellow.drawString(g, mResources.power_point + " " + Res.formatNumber2(ChooseCharScr.playerData[j].powpoint), this.cx[j] + this.rectPanel[2] - 25, this.cy[j] + this.offsetY + mFont.tahoma_7b_yellow.getHeight(), 1);
					}
					else
					{
						mFont.tahoma_7b_dark.drawString(g, ChooseCharScr.playerData[j].name, this.cx[j] + this.rectPanel[2] - 25, this.cy[j] + this.offsetY, 1);
						mFont.tahoma_7b_dark.drawString(g, mResources.power_point + " " + Res.formatNumber2(ChooseCharScr.playerData[j].powpoint), this.cx[j] + this.rectPanel[2] - 25, this.cy[j] + this.offsetY + mFont.tahoma_7b_dark.getHeight(), 1);
					}
				}
			}
		}
		catch (Exception ex)
		{
			Res.outz(ex.StackTrace);
		}
		base.paint(g);
	}

	// Token: 0x060002BC RID: 700 RVA: 0x00028E20 File Offset: 0x00027020
	internal void updateChooseCharacter(byte len)
	{
		this.cx = new int[(int)len];
		this.cy = new int[(int)len];
		for (int i = 0; i < (int)len; i++)
		{
			this.cx[i] = this.rectPanel[0] + 20;
			this.cy[i] = i * 70 + this.rectPanel[1] + 50;
		}
		this.vc_players = new Command[2];
		this.vc_players[1] = new Command("Vào game", this, 1, null, this.rectPanel[0] + this.rectPanel[2] - 80 - 80, this.rectPanel[1] + this.rectPanel[3] - 30);
		this.vc_players[0] = new Command("Trờ ra", this, 2, null, this.rectPanel[0] + this.rectPanel[2] - 80, this.rectPanel[1] + this.rectPanel[3] - 30);
	}

	// Token: 0x060002BD RID: 701 RVA: 0x00028F0C File Offset: 0x0002710C
	public void perform(int idAction, object p)
	{
		if (idAction != 1)
		{
			if (idAction == 2)
			{
				GameCanvas.instance.doResetToLoginScr(GameCanvas.serverScreen);
			}
		}
		else
		{
			bool flag = this.focus != -1;
			if (flag)
			{
				GameCanvas.startWaitDlg();
				Service.gI().finishUpdate(ChooseCharScr.playerData[this.focus].playerID);
			}
		}
	}

	// Token: 0x0400039F RID: 927
	public Command[] vc_players;

	// Token: 0x040003A0 RID: 928
	public static PlayerData[] playerData;

	// Token: 0x040003A1 RID: 929
	private int cf;

	// Token: 0x040003A2 RID: 930
	private int[] cx = new int[]
	{
		GameCanvas.w / 2 - 100,
		GameCanvas.w / 2 - 100
	};

	// Token: 0x040003A3 RID: 931
	private int focus;

	// Token: 0x040003A4 RID: 932
	private int[] cy = new int[2];

	// Token: 0x040003A5 RID: 933
	private int[] rectPanel = new int[]
	{
		GameCanvas.w / 2 - 150,
		GameCanvas.h / 2 - 100,
		300,
		200
	};

	// Token: 0x040003A6 RID: 934
	private int offsetY = -35;

	// Token: 0x040003A7 RID: 935
	private int offsetX = -35;
}
using System;
using System.IO;

// Token: 0x02000010 RID: 16
internal class ChucNangPhu
{
	// Token: 0x06000059 RID: 89 RVA: 0x00004F0D File Offset: 0x0000310D
	private static void Wait(int time)
	{
		ChucNangPhu.IsWait = true;
		ChucNangPhu.TimeStartWait = mSystem.currentTimeMillis();
		ChucNangPhu.TimeWait = (long)time;
	}

	// Token: 0x0600005A RID: 90 RVA: 0x00004F28 File Offset: 0x00003128
	private static bool IsWaiting()
	{
		bool flag = ChucNangPhu.IsWait && mSystem.currentTimeMillis() - ChucNangPhu.TimeStartWait >= ChucNangPhu.TimeWait;
		if (flag)
		{
			ChucNangPhu.IsWait = false;
		}
		return ChucNangPhu.IsWait;
	}

	// Token: 0x0600005B RID: 91 RVA: 0x00004F6C File Offset: 0x0000316C
	public static void AnBoHuyet()
	{
		bool flag = ItemTime.isExistItem(2755);
		if (!flag)
		{
			for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
			{
				Item item = global::Char.myCharz().arrItemBag[i];
				bool flag2 = item != null && item.template.id == 382;
				if (flag2)
				{
					Service.gI().useItem(0, 1, -1, item.template.id);
					break;
				}
			}
		}
	}

	// Token: 0x0600005C RID: 92 RVA: 0x00004FF0 File Offset: 0x000031F0
	public static void UseTDLT()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 521;
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
			}
		}
	}

	// Token: 0x0600005D RID: 93 RVA: 0x00005060 File Offset: 0x00003260
	public static void AutoTdlt()
	{
		bool flag = File.Exists(ChucNangPhu.tdlt) && !ItemTime.isExistItem(4387);
		if (flag)
		{
			ChucNangPhu.UseTDLT();
		}
		bool flag2 = !File.Exists(ChucNangPhu.tdlt) && ItemTime.isExistItem(4387);
		if (flag2)
		{
			ChucNangPhu.UseTDLT();
		}
	}

	// Token: 0x0600005E RID: 94 RVA: 0x000050BC File Offset: 0x000032BC
	public static bool IsBoss()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.cName.Contains("Broly") && @char.cName.Contains("Super") && @char.cHPFull >= 16070777L;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x0600005F RID: 95 RVA: 0x00005144 File Offset: 0x00003344
	public static void AutoBongTai()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 454 || item.template.id == 921);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x06000060 RID: 96 RVA: 0x000051CC File Offset: 0x000033CC
	public static void Update()
	{
		bool flag = GameCanvas.gameTick % 200 == 0;
		if (flag)
		{
			ChucNangPhu.AutoTdlt();
		}
		bool flag2 = GameCanvas.gameTick % 20 == 0 && TileMap.mapID == global::Char.myCharz().cgender + 21;
		if (flag2)
		{
			KsSupper.autoitem();
		}
		bool flag3 = global::Char.myCharz().cspeed != 8;
		if (flag3)
		{
			global::Char.myCharz().cspeed = 8;
		}
	}

	// Token: 0x04000057 RID: 87
	private static bool IsWait;

	// Token: 0x04000058 RID: 88
	private static long TimeStartWait;

	// Token: 0x04000059 RID: 89
	private static long TimeWait;

	// Token: 0x0400005A RID: 90
	public static string tdlt = "Nro_244_Data/Resources/tdlt";
}
using System;

// Token: 0x02000011 RID: 17
internal class ChucNangPhu2
{
	// Token: 0x06000063 RID: 99 RVA: 0x00005257 File Offset: 0x00003457
	private static void Wait(int time)
	{
		ChucNangPhu2.IsWait = true;
		ChucNangPhu2.TimeStartWait = mSystem.currentTimeMillis();
		ChucNangPhu2.TimeWait = (long)time;
	}

	// Token: 0x06000064 RID: 100 RVA: 0x00005274 File Offset: 0x00003474
	private static bool IsWaiting()
	{
		bool flag = ChucNangPhu2.IsWait && mSystem.currentTimeMillis() - ChucNangPhu2.TimeStartWait >= ChucNangPhu2.TimeWait;
		if (flag)
		{
			ChucNangPhu2.IsWait = false;
		}
		return ChucNangPhu2.IsWait;
	}

	// Token: 0x06000065 RID: 101 RVA: 0x000052B8 File Offset: 0x000034B8
	public static bool IsBroly()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.cName.Contains("Broly") && !@char.cName.Contains("Super") && Res.abs(@char.cx - global::Char.myCharz().cx) < 100;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000066 RID: 102 RVA: 0x00005348 File Offset: 0x00003548
	public static void Update()
	{
		bool flag = ChucNangPhu2.IsWaiting();
		if (!flag)
		{
			bool flag2 = !global::Char.myCharz().isNhapThe;
			if (flag2)
			{
				ChucNangPhu.AutoBongTai();
				ChucNangPhu2.Wait(3000);
			}
			else
			{
				ChucNangPhu2.Wait(500);
			}
		}
	}

	// Token: 0x0400005B RID: 91
	private static bool IsWait;

	// Token: 0x0400005C RID: 92
	private static long TimeStartWait;

	// Token: 0x0400005D RID: 93
	private static long TimeWait;
}
using System;
using System.IO;

// Token: 0x02000012 RID: 18
internal class ChucNangPhu3
{
	// Token: 0x06000068 RID: 104 RVA: 0x0000539B File Offset: 0x0000359B
	private static void Wait(int time)
	{
		ChucNangPhu3.IsWait = true;
		ChucNangPhu3.TimeStartWait = mSystem.currentTimeMillis();
		ChucNangPhu3.TimeWait = (long)time;
	}

	// Token: 0x06000069 RID: 105 RVA: 0x000053B8 File Offset: 0x000035B8
	private static bool IsWaiting()
	{
		bool flag = ChucNangPhu3.IsWait && mSystem.currentTimeMillis() - ChucNangPhu3.TimeStartWait >= ChucNangPhu3.TimeWait;
		if (flag)
		{
			ChucNangPhu3.IsWait = false;
		}
		return ChucNangPhu3.IsWait;
	}

	// Token: 0x0600006A RID: 106 RVA: 0x000053FC File Offset: 0x000035FC
	public static bool IsBroly()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.cName.Contains("Broly") && !@char.cName.Contains("Super") && Res.abs(@char.cx - global::Char.myCharz().cx) < 100;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x0600006B RID: 107 RVA: 0x0000548C File Offset: 0x0000368C
	public static void Update()
	{
		bool flag = ChucNangPhu3.IsWaiting();
		if (!flag)
		{
			bool flag2 = ChucNangPhu3.IsBroly() && DataAccount.Type > 1;
			if (flag2)
			{
				ChucNangPhu3.NhayCuoiMap();
				ChucNangPhu3.Wait(3000);
			}
			else
			{
				bool flag3 = DataAccount.Type == 3 && File.Exists("Nro_244_Data//Resources//dokhu");
				if (flag3)
				{
					bool flag4 = !DovaBaoKhu.IsBoss();
					if (flag4)
					{
						int cy = global::Char.myCharz().cy;
						global::Char.myCharz().cy = cy - 50;
						Service.gI().charMove();
						ChucNangPhu3.Wait(10000);
						return;
					}
				}
				ChucNangPhu3.Wait(500);
			}
		}
	}

	// Token: 0x0600006C RID: 108 RVA: 0x0000553C File Offset: 0x0000373C
	public static void NhayCuoiMap()
	{
		bool flag = GameScr.getX(0) > 0 && GameScr.getY(0) > 0;
		if (flag)
		{
			KsSupper.TelePortTo(GameScr.getX(0) + 50, GameScr.getY(0));
		}
	}

	// Token: 0x0400005E RID: 94
	private static bool IsWait;

	// Token: 0x0400005F RID: 95
	private static long TimeStartWait;

	// Token: 0x04000060 RID: 96
	private static long TimeWait;
}
using System;

// Token: 0x02000013 RID: 19
internal class ChucNangPhu4
{
	// Token: 0x0600006E RID: 110 RVA: 0x00005583 File Offset: 0x00003783
	private static void Wait(int time)
	{
		ChucNangPhu4.IsWait = true;
		ChucNangPhu4.TimeStartWait = mSystem.currentTimeMillis();
		ChucNangPhu4.TimeWait = (long)time;
	}

	// Token: 0x0600006F RID: 111 RVA: 0x000055A0 File Offset: 0x000037A0
	private static bool IsWaiting()
	{
		bool flag = ChucNangPhu4.IsWait && mSystem.currentTimeMillis() - ChucNangPhu4.TimeStartWait >= ChucNangPhu4.TimeWait;
		if (flag)
		{
			ChucNangPhu4.IsWait = false;
		}
		return ChucNangPhu4.IsWait;
	}

	// Token: 0x06000070 RID: 112 RVA: 0x000055E4 File Offset: 0x000037E4
	public static void Update()
	{
		bool flag = ChucNangPhu4.IsWaiting();
		if (!flag)
		{
			bool flag2 = TileMap.mapID != global::Char.myCharz().cgender + 21;
			if (flag2)
			{
				Service.gI().openUIZone();
				ChucNangPhu4.Wait(1000);
			}
		}
	}

	// Token: 0x04000061 RID: 97
	private static bool IsWait;

	// Token: 0x04000062 RID: 98
	private static long TimeStartWait;

	// Token: 0x04000063 RID: 99
	private static long TimeWait;
}
using System;

// Token: 0x02000032 RID: 50
public class Clan
{
	// Token: 0x040003A8 RID: 936
	public int ID;

	// Token: 0x040003A9 RID: 937
	public int imgID;

	// Token: 0x040003AA RID: 938
	public string name = string.Empty;

	// Token: 0x040003AB RID: 939
	public string slogan = string.Empty;

	// Token: 0x040003AC RID: 940
	public int date;

	// Token: 0x040003AD RID: 941
	public string powerPoint;

	// Token: 0x040003AE RID: 942
	public int currMember;

	// Token: 0x040003AF RID: 943
	public int maxMember = 50;

	// Token: 0x040003B0 RID: 944
	public int leaderID;

	// Token: 0x040003B1 RID: 945
	public string leaderName;

	// Token: 0x040003B2 RID: 946
	public int level;

	// Token: 0x040003B3 RID: 947
	public int clanPoint;
}
using System;

// Token: 0x02000033 RID: 51
public class ClanImage
{
	// Token: 0x060002C0 RID: 704 RVA: 0x0002902A File Offset: 0x0002722A
	public static void addClanImage(ClanImage cm)
	{
		Service.gI().clanImage((sbyte)cm.ID);
		ClanImage.vClanImage.addElement(cm);
	}

	// Token: 0x060002C1 RID: 705 RVA: 0x0002904C File Offset: 0x0002724C
	public static ClanImage getClanImage(short ID)
	{
		for (int i = 0; i < ClanImage.vClanImage.size(); i++)
		{
			ClanImage clanImage = (ClanImage)ClanImage.vClanImage.elementAt(i);
			bool flag = clanImage.ID == (int)ID;
			if (flag)
			{
				return clanImage;
			}
		}
		return null;
	}

	// Token: 0x060002C2 RID: 706 RVA: 0x000290A0 File Offset: 0x000272A0
	public static bool isExistClanImage(int ID)
	{
		for (int i = 0; i < ClanImage.vClanImage.size(); i++)
		{
			ClanImage clanImage = (ClanImage)ClanImage.vClanImage.elementAt(i);
			bool flag = clanImage.ID == ID;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x040003B4 RID: 948
	public int ID;

	// Token: 0x040003B5 RID: 949
	public string name;

	// Token: 0x040003B6 RID: 950
	public short[] idImage;

	// Token: 0x040003B7 RID: 951
	public int xu;

	// Token: 0x040003B8 RID: 952
	public int luong;

	// Token: 0x040003B9 RID: 953
	public static MyVector vClanImage = new MyVector();

	// Token: 0x040003BA RID: 954
	public static MyHashTable idImages = new MyHashTable();
}
using System;

// Token: 0x02000034 RID: 52
public class ClanManager
{
	// Token: 0x040003BB RID: 955
	public static Clan[] clans;
}
using System;

// Token: 0x02000035 RID: 53
public class ClanMessage : IActionListener
{
	// Token: 0x060002C6 RID: 710 RVA: 0x0002911C File Offset: 0x0002731C
	public static void addMessage(ClanMessage cm, int index, bool upToTop)
	{
		for (int i = 0; i < ClanMessage.vMessage.size(); i++)
		{
			ClanMessage clanMessage = (ClanMessage)ClanMessage.vMessage.elementAt(i);
			bool flag = clanMessage.id == cm.id;
			if (flag)
			{
				ClanMessage.vMessage.removeElement(clanMessage);
				bool flag2 = !upToTop;
				if (flag2)
				{
					ClanMessage.vMessage.insertElementAt(cm, i);
				}
				else
				{
					ClanMessage.vMessage.insertElementAt(cm, 0);
				}
				return;
			}
			bool flag3 = clanMessage.maxCap != 0 && clanMessage.recieve == clanMessage.maxCap;
			if (flag3)
			{
				ClanMessage.vMessage.removeElement(clanMessage);
			}
		}
		bool flag4 = index == -1;
		if (flag4)
		{
			ClanMessage.vMessage.addElement(cm);
		}
		else
		{
			ClanMessage.vMessage.insertElementAt(cm, 0);
		}
		bool flag5 = ClanMessage.vMessage.size() > 20;
		if (flag5)
		{
			ClanMessage.vMessage.removeElementAt(ClanMessage.vMessage.size() - 1);
			return;
		}
	}

	// Token: 0x060002C7 RID: 711 RVA: 0x00029230 File Offset: 0x00027430
	public void paint(mGraphics g, int x, int y)
	{
		mFont mFont = mFont.tahoma_7b_dark;
		bool flag = this.role == 0;
		if (flag)
		{
			mFont = mFont.tahoma_7b_red;
		}
		else
		{
			bool flag2 = this.role == 1;
			if (flag2)
			{
				mFont = mFont.tahoma_7b_green;
			}
			else
			{
				bool flag3 = this.role == 2;
				if (flag3)
				{
					mFont = mFont.tahoma_7b_green2;
				}
			}
		}
		bool flag4 = this.type == 0;
		if (flag4)
		{
			mFont.drawString(g, this.playerName, x + 3, y + 1, 0);
			bool flag5 = this.color == 0;
			if (flag5)
			{
				mFont.tahoma_7_grey.drawString(g, this.chat[0] + ((this.chat.Length <= 1) ? string.Empty : "..."), x + 3, y + 11, 0);
			}
			else
			{
				mFont.tahoma_7_red.drawString(g, this.chat[0] + ((this.chat.Length <= 1) ? string.Empty : "..."), x + 3, y + 11, 0);
			}
			mFont.tahoma_7_grey.drawString(g, NinjaUtil.getTimeAgo(this.timeAgo) + " " + mResources.ago, x + GameCanvas.panel.wScroll - 3, y + 1, mFont.RIGHT);
		}
		bool flag6 = this.type == 1;
		if (flag6)
		{
			mFont.drawString(g, string.Concat(new string[]
			{
				this.playerName,
				" (",
				this.recieve.ToString(),
				"/",
				this.maxCap.ToString(),
				")"
			}), x + 3, y + 1, 0);
			mFont.tahoma_7_blue.drawString(g, string.Concat(new string[]
			{
				mResources.request_pea,
				" ",
				NinjaUtil.getTimeAgo(this.timeAgo),
				" ",
				mResources.ago
			}), x + 3, y + 11, 0);
		}
		bool flag7 = this.type == 2;
		if (flag7)
		{
			mFont.drawString(g, this.playerName, x + 3, y + 1, 0);
			mFont.tahoma_7_blue.drawString(g, mResources.request_join_clan, x + 3, y + 11, 0);
		}
	}

	// Token: 0x060002C8 RID: 712 RVA: 0x00029468 File Offset: 0x00027668
	public void perform(int idAction, object p)
	{
	}

	// Token: 0x060002C9 RID: 713 RVA: 0x0002946C File Offset: 0x0002766C
	public void update()
	{
		bool flag = this.time != 0L;
		if (flag)
		{
			this.timeAgo = (int)(mSystem.currentTimeMillis() / 1000L - this.time);
		}
	}

	// Token: 0x040003BC RID: 956
	public int id;

	// Token: 0x040003BD RID: 957
	public int type;

	// Token: 0x040003BE RID: 958
	public int playerId;

	// Token: 0x040003BF RID: 959
	public string playerName;

	// Token: 0x040003C0 RID: 960
	public long time;

	// Token: 0x040003C1 RID: 961
	public int headId;

	// Token: 0x040003C2 RID: 962
	public string[] chat;

	// Token: 0x040003C3 RID: 963
	public sbyte color;

	// Token: 0x040003C4 RID: 964
	public sbyte role;

	// Token: 0x040003C5 RID: 965
	private int timeAgo;

	// Token: 0x040003C6 RID: 966
	public int recieve;

	// Token: 0x040003C7 RID: 967
	public int maxCap;

	// Token: 0x040003C8 RID: 968
	public string[] option;

	// Token: 0x040003C9 RID: 969
	public static MyVector vMessage = new MyVector();
}
using System;

// Token: 0x02000036 RID: 54
public class ClanObject
{
	// Token: 0x040003CA RID: 970
	public int clanID;

	// Token: 0x040003CB RID: 971
	public int code;
}
using System;

// Token: 0x02000037 RID: 55
public class Cmd
{
	// Token: 0x040003CC RID: 972
	public const sbyte CMD_EXTRA_BIG = 12;

	// Token: 0x040003CD RID: 973
	public const sbyte CMD_EXTRA = 24;

	// Token: 0x040003CE RID: 974
	public const sbyte EXTRA_LINK = 127;

	// Token: 0x040003CF RID: 975
	public const sbyte LOGIN = 0;

	// Token: 0x040003D0 RID: 976
	public const sbyte REGISTER = 1;

	// Token: 0x040003D1 RID: 977
	public const sbyte CLIENT_INFO = 2;

	// Token: 0x040003D2 RID: 978
	public const sbyte SEND_SMS = 3;

	// Token: 0x040003D3 RID: 979
	public const sbyte REGISTER_IMAGE = 4;

	// Token: 0x040003D4 RID: 980
	public const sbyte MESSAGE_TIME = 65;

	// Token: 0x040003D5 RID: 981
	public const sbyte LOGOUT = 0;

	// Token: 0x040003D6 RID: 982
	public const sbyte SELECT_PLAYER = 1;

	// Token: 0x040003D7 RID: 983
	public const sbyte CREATE_PLAYER = 2;

	// Token: 0x040003D8 RID: 984
	public const sbyte DELETE_PLAYER = 3;

	// Token: 0x040003D9 RID: 985
	public const sbyte UPDATE_VERSION = 4;

	// Token: 0x040003DA RID: 986
	public const sbyte UPDATE_MAP = 6;

	// Token: 0x040003DB RID: 987
	public const sbyte UPDATE_SKILL = 7;

	// Token: 0x040003DC RID: 988
	public const sbyte UPDATE_ITEM = 8;

	// Token: 0x040003DD RID: 989
	public const sbyte REQUEST_SKILL = 9;

	// Token: 0x040003DE RID: 990
	public const sbyte REQUEST_MAPTEMPLATE = 10;

	// Token: 0x040003DF RID: 991
	public const sbyte REQUEST_MOB_TEMPLATE = 11;

	// Token: 0x040003E0 RID: 992
	public const sbyte UPDATE_TYPE_PK = 35;

	// Token: 0x040003E1 RID: 993
	public const sbyte PLAYER_ATTACK_PLAYER = -60;

	// Token: 0x040003E2 RID: 994
	public const sbyte PLAYER_VS_PLAYER = -59;

	// Token: 0x040003E3 RID: 995
	public const sbyte CLAN_PARTY = -58;

	// Token: 0x040003E4 RID: 996
	public const sbyte CLAN_INVITE = -57;

	// Token: 0x040003E5 RID: 997
	public const sbyte CLAN_REMOTE = -56;

	// Token: 0x040003E6 RID: 998
	public const sbyte CLAN_LEAVE = -55;

	// Token: 0x040003E7 RID: 999
	public const sbyte CLAN_DONATE = -54;

	// Token: 0x040003E8 RID: 1000
	public const sbyte CLAN_MESSAGE = -51;

	// Token: 0x040003E9 RID: 1001
	public const sbyte CLAN_UPDATE = -52;

	// Token: 0x040003EA RID: 1002
	public const sbyte CLAN_INFO = -53;

	// Token: 0x040003EB RID: 1003
	public const sbyte CLAN_JOIN = -49;

	// Token: 0x040003EC RID: 1004
	public const sbyte CLAN_MEMBER = -50;

	// Token: 0x040003ED RID: 1005
	public const sbyte CLAN_SEARCH = -47;

	// Token: 0x040003EE RID: 1006
	public const sbyte CLAN_CREATE_INFO = -46;

	// Token: 0x040003EF RID: 1007
	public const sbyte CLIENT_OK = 13;

	// Token: 0x040003F0 RID: 1008
	public const sbyte CLIENT_OK_INMAP = 14;

	// Token: 0x040003F1 RID: 1009
	public const sbyte UPDATE_VERSION_OK = 15;

	// Token: 0x040003F2 RID: 1010
	public const sbyte INPUT_CARD = 16;

	// Token: 0x040003F3 RID: 1011
	public const sbyte CLEAR_TASK = 17;

	// Token: 0x040003F4 RID: 1012
	public const sbyte CHANGE_NAME = 18;

	// Token: 0x040003F5 RID: 1013
	public const sbyte UPDATE_PK = 20;

	// Token: 0x040003F6 RID: 1014
	public const sbyte CREATE_CLAN = 21;

	// Token: 0x040003F7 RID: 1015
	public const sbyte CONVERT_UPGRADE = 33;

	// Token: 0x040003F8 RID: 1016
	public const sbyte INVITE_CLANDUN = 34;

	// Token: 0x040003F9 RID: 1017
	public const sbyte NOT_USEACC = 35;

	// Token: 0x040003FA RID: 1018
	public const sbyte ME_LOAD_ACTIVE = 36;

	// Token: 0x040003FB RID: 1019
	public const sbyte ME_ACTIVE = 37;

	// Token: 0x040003FC RID: 1020
	public const sbyte ME_UPDATE_ACTIVE = 38;

	// Token: 0x040003FD RID: 1021
	public const sbyte ME_OPEN_LOCK = 39;

	// Token: 0x040003FE RID: 1022
	public const sbyte ITEM_SPLIT = 40;

	// Token: 0x040003FF RID: 1023
	public const sbyte ME_CLEAR_LOCK = 41;

	// Token: 0x04000400 RID: 1024
	public const sbyte GET_IMG_BY_NAME = 66;

	// Token: 0x04000401 RID: 1025
	public const sbyte ME_LOAD_ALL = 0;

	// Token: 0x04000402 RID: 1026
	public const sbyte ME_LOAD_CLASS = 1;

	// Token: 0x04000403 RID: 1027
	public const sbyte ME_LOAD_SKILL = 2;

	// Token: 0x04000404 RID: 1028
	public const sbyte ME_LOAD_INFO = 4;

	// Token: 0x04000405 RID: 1029
	public const sbyte ME_LOAD_HP = 5;

	// Token: 0x04000406 RID: 1030
	public const sbyte ME_LOAD_MP = 6;

	// Token: 0x04000407 RID: 1031
	public const sbyte PLAYER_LOAD_ALL = 7;

	// Token: 0x04000408 RID: 1032
	public const sbyte PLAYER_SPEED = 8;

	// Token: 0x04000409 RID: 1033
	public const sbyte PLAYER_LOAD_LEVEL = 9;

	// Token: 0x0400040A RID: 1034
	public const sbyte PLAYER_LOAD_VUKHI = 10;

	// Token: 0x0400040B RID: 1035
	public const sbyte PLAYER_LOAD_AO = 11;

	// Token: 0x0400040C RID: 1036
	public const sbyte PLAYER_LOAD_QUAN = 12;

	// Token: 0x0400040D RID: 1037
	public const sbyte PLAYER_LOAD_BODY = 13;

	// Token: 0x0400040E RID: 1038
	public const sbyte PLAYER_LOAD_HP = 14;

	// Token: 0x0400040F RID: 1039
	public const sbyte PLAYER_LOAD_LIVE = 15;

	// Token: 0x04000410 RID: 1040
	public const sbyte GOTO_PLAYER = 18;

	// Token: 0x04000411 RID: 1041
	public const sbyte POTENTIAL_UP = 16;

	// Token: 0x04000412 RID: 1042
	public const sbyte SKILL_UP = 17;

	// Token: 0x04000413 RID: 1043
	public const sbyte BAG_SORT = 18;

	// Token: 0x04000414 RID: 1044
	public const sbyte BOX_SORT = 19;

	// Token: 0x04000415 RID: 1045
	public const sbyte BOX_COIN_OUT = 21;

	// Token: 0x04000416 RID: 1046
	public const sbyte REQUEST_ITEM = 22;

	// Token: 0x04000417 RID: 1047
	public const sbyte ME_ADD_SKILL = 23;

	// Token: 0x04000418 RID: 1048
	public const sbyte ME_UPDATE_SKILL = 62;

	// Token: 0x04000419 RID: 1049
	public const sbyte GET_PLAYER_MENU = 63;

	// Token: 0x0400041A RID: 1050
	public const sbyte PLAYER_MENU_ACTION = 64;

	// Token: 0x0400041B RID: 1051
	public const sbyte SAVE_RMS = 60;

	// Token: 0x0400041C RID: 1052
	public const sbyte LOAD_RMS = 61;

	// Token: 0x0400041D RID: 1053
	public const sbyte USE_BOOK_SKILL = 43;

	// Token: 0x0400041E RID: 1054
	public const sbyte LOCK_INVENTORY = -104;

	// Token: 0x0400041F RID: 1055
	public const sbyte CHANGE_FLAG = -103;

	// Token: 0x04000420 RID: 1056
	public const sbyte LOGINFAIL = -102;

	// Token: 0x04000421 RID: 1057
	public const sbyte LOGIN2 = -101;

	// Token: 0x04000422 RID: 1058
	public const sbyte KIGUI = -100;

	// Token: 0x04000423 RID: 1059
	public const sbyte ENEMY_LIST = -99;

	// Token: 0x04000424 RID: 1060
	public const sbyte ANDROID_IAP = -98;

	// Token: 0x04000425 RID: 1061
	public const sbyte UPDATE_ACTIVEPOINT = -97;

	// Token: 0x04000426 RID: 1062
	public const sbyte TOP = -96;

	// Token: 0x04000427 RID: 1063
	public const sbyte MOB_ME_UPDATE = -95;

	// Token: 0x04000428 RID: 1064
	public const sbyte UPDATE_COOLDOWN = -94;

	// Token: 0x04000429 RID: 1065
	public const sbyte BGITEM_VERSION = -93;

	// Token: 0x0400042A RID: 1066
	public const sbyte SET_CLIENTTYPE = -92;

	// Token: 0x0400042B RID: 1067
	public const sbyte MAP_TRASPORT = -91;

	// Token: 0x0400042C RID: 1068
	public const sbyte UPDATE_BODY = -90;

	// Token: 0x0400042D RID: 1069
	public const sbyte SERVERSCREEN = -88;

	// Token: 0x0400042E RID: 1070
	public const sbyte UPDATE_DATA = -87;

	// Token: 0x0400042F RID: 1071
	public const sbyte GIAO_DICH = -86;

	// Token: 0x04000430 RID: 1072
	public const sbyte MOB_CAPCHA = -85;

	// Token: 0x04000431 RID: 1073
	public const sbyte MOB_MAX_HP = -84;

	// Token: 0x04000432 RID: 1074
	public const sbyte CALL_DRAGON = -83;

	// Token: 0x04000433 RID: 1075
	public const sbyte TILE_SET = -82;

	// Token: 0x04000434 RID: 1076
	public const sbyte COMBINNE = -81;

	// Token: 0x04000435 RID: 1077
	public const sbyte FRIEND = -80;

	// Token: 0x04000436 RID: 1078
	public const sbyte PLAYER_MENU = -79;

	// Token: 0x04000437 RID: 1079
	public const sbyte CHECK_MOVE = -78;

	// Token: 0x04000438 RID: 1080
	public const sbyte SMALLIMAGE_VERSION = -77;

	// Token: 0x04000439 RID: 1081
	public const sbyte ARCHIVEMENT = -76;

	// Token: 0x0400043A RID: 1082
	public const sbyte NPC_BOSS = -75;

	// Token: 0x0400043B RID: 1083
	public const sbyte GET_IMAGE_SOURCE = -74;

	// Token: 0x0400043C RID: 1084
	public const sbyte NPC_ADD_REMOVE = -73;

	// Token: 0x0400043D RID: 1085
	public const sbyte CHAT_PLAYER = -72;

	// Token: 0x0400043E RID: 1086
	public const sbyte CHAT_THEGIOI_CLIENT = -71;

	// Token: 0x0400043F RID: 1087
	public const sbyte BIG_MESSAGE = -70;

	// Token: 0x04000440 RID: 1088
	public const sbyte MAXSTAMINA = -69;

	// Token: 0x04000441 RID: 1089
	public const sbyte STAMINA = -68;

	// Token: 0x04000442 RID: 1090
	public const sbyte REQUEST_ICON = -67;

	// Token: 0x04000443 RID: 1091
	public const sbyte GET_EFFDATA = -66;

	// Token: 0x04000444 RID: 1092
	public const sbyte TELEPORT = -65;

	// Token: 0x04000445 RID: 1093
	public const sbyte UPDATE_BAG = -64;

	// Token: 0x04000446 RID: 1094
	public const sbyte GET_BAG = -63;

	// Token: 0x04000447 RID: 1095
	public const sbyte CLAN_IMAGE = -62;

	// Token: 0x04000448 RID: 1096
	public const sbyte UPDATE_CLANID = -61;

	// Token: 0x04000449 RID: 1097
	public const sbyte SKILL_NOT_FOCUS = -45;

	// Token: 0x0400044A RID: 1098
	public const sbyte SHOP = -44;

	// Token: 0x0400044B RID: 1099
	public const sbyte USE_ITEM = -43;

	// Token: 0x0400044C RID: 1100
	public const sbyte ME_LOAD_POINT = -42;

	// Token: 0x0400044D RID: 1101
	public const sbyte UPDATE_CAPTION = -41;

	// Token: 0x0400044E RID: 1102
	public const sbyte GET_ITEM = -40;

	// Token: 0x0400044F RID: 1103
	public const sbyte FINISH_LOADMAP = -39;

	// Token: 0x04000450 RID: 1104
	public const sbyte FINISH_UPDATE = -38;

	// Token: 0x04000451 RID: 1105
	public const sbyte BODY = -37;

	// Token: 0x04000452 RID: 1106
	public const sbyte BAG = -36;

	// Token: 0x04000453 RID: 1107
	public const sbyte BOX = -35;

	// Token: 0x04000454 RID: 1108
	public const sbyte MAGIC_TREE = -34;

	// Token: 0x04000455 RID: 1109
	public const sbyte MAP_OFFLINE = -33;

	// Token: 0x04000456 RID: 1110
	public const sbyte BACKGROUND_TEMPLATE = -32;

	// Token: 0x04000457 RID: 1111
	public const sbyte ITEM_BACKGROUND = -31;

	// Token: 0x04000458 RID: 1112
	public const sbyte SUB_COMMAND = -30;

	// Token: 0x04000459 RID: 1113
	public const sbyte NOT_LOGIN = -29;

	// Token: 0x0400045A RID: 1114
	public const sbyte NOT_MAP = -28;

	// Token: 0x0400045B RID: 1115
	public const sbyte GET_SESSION_ID = -27;

	// Token: 0x0400045C RID: 1116
	public const sbyte DIALOG_MESSAGE = -26;

	// Token: 0x0400045D RID: 1117
	public const sbyte SERVER_MESSAGE = -25;

	// Token: 0x0400045E RID: 1118
	public const sbyte MAP_INFO = -24;

	// Token: 0x0400045F RID: 1119
	public const sbyte MAP_CHANGE = -23;

	// Token: 0x04000460 RID: 1120
	public const sbyte MAP_CLEAR = -22;

	// Token: 0x04000461 RID: 1121
	public const sbyte ITEMMAP_REMOVE = -21;

	// Token: 0x04000462 RID: 1122
	public const sbyte ITEMMAP_MYPICK = -20;

	// Token: 0x04000463 RID: 1123
	public const sbyte ITEMMAP_PLAYERPICK = -19;

	// Token: 0x04000464 RID: 1124
	public const sbyte ME_THROW = -18;

	// Token: 0x04000465 RID: 1125
	public const sbyte ME_DIE = -17;

	// Token: 0x04000466 RID: 1126
	public const sbyte ME_LIVE = -16;

	// Token: 0x04000467 RID: 1127
	public const sbyte ME_BACK = -15;

	// Token: 0x04000468 RID: 1128
	public const sbyte PLAYER_THROW = -14;

	// Token: 0x04000469 RID: 1129
	public const sbyte NPC_LIVE = -13;

	// Token: 0x0400046A RID: 1130
	public const sbyte NPC_DIE = -12;

	// Token: 0x0400046B RID: 1131
	public const sbyte NPC_ATTACK_ME = -11;

	// Token: 0x0400046C RID: 1132
	public const sbyte NPC_ATTACK_PLAYER = -10;

	// Token: 0x0400046D RID: 1133
	public const sbyte MOB_HP = -9;

	// Token: 0x0400046E RID: 1134
	public const sbyte PLAYER_DIE = -8;

	// Token: 0x0400046F RID: 1135
	public const sbyte PLAYER_MOVE = -7;

	// Token: 0x04000470 RID: 1136
	public const sbyte PLAYER_REMOVE = -6;

	// Token: 0x04000471 RID: 1137
	public const sbyte PLAYER_ADD = -5;

	// Token: 0x04000472 RID: 1138
	public const sbyte PLAYER_ATTACK_N_P = -4;

	// Token: 0x04000473 RID: 1139
	public const sbyte PLAYER_UP_EXP = -3;

	// Token: 0x04000474 RID: 1140
	public const sbyte ME_UP_COIN_LOCK = -2;

	// Token: 0x04000475 RID: 1141
	public const sbyte ME_CHANGE_COIN = -1;

	// Token: 0x04000476 RID: 1142
	public const sbyte ITEM_BUY = 6;

	// Token: 0x04000477 RID: 1143
	public const sbyte ITEM_SALE = 7;

	// Token: 0x04000478 RID: 1144
	public const sbyte UPPEARL_LOCK = 13;

	// Token: 0x04000479 RID: 1145
	public const sbyte UPGRADE = 14;

	// Token: 0x0400047A RID: 1146
	public const sbyte PLEASE_INPUT_PARTY = 16;

	// Token: 0x0400047B RID: 1147
	public const sbyte ACCEPT_PLEASE_PARTY = 17;

	// Token: 0x0400047C RID: 1148
	public const sbyte REQUEST_PLAYERS = 18;

	// Token: 0x0400047D RID: 1149
	public const sbyte UPDATE_ACHIEVEMENT = 19;

	// Token: 0x0400047E RID: 1150
	public const sbyte PHUBANG_INFO = 20;

	// Token: 0x0400047F RID: 1151
	public const sbyte ZONE_CHANGE = 21;

	// Token: 0x04000480 RID: 1152
	public const sbyte MENU = 22;

	// Token: 0x04000481 RID: 1153
	public const sbyte OPEN_UI = 23;

	// Token: 0x04000482 RID: 1154
	public const sbyte OPEN_UI_PT = 25;

	// Token: 0x04000483 RID: 1155
	public const sbyte OPEN_UI_SHOP = 26;

	// Token: 0x04000484 RID: 1156
	public const sbyte OPEN_MENU_ID = 27;

	// Token: 0x04000485 RID: 1157
	public const sbyte OPEN_UI_COLLECT = 28;

	// Token: 0x04000486 RID: 1158
	public const sbyte OPEN_UI_ZONE = 29;

	// Token: 0x04000487 RID: 1159
	public const sbyte OPEN_UI_TRADE = 30;

	// Token: 0x04000488 RID: 1160
	public const sbyte OPEN_UI_SAY = 38;

	// Token: 0x04000489 RID: 1161
	public const sbyte OPEN_UI_CONFIRM = 32;

	// Token: 0x0400048A RID: 1162
	public const sbyte OPEN_UI_MENU = 33;

	// Token: 0x0400048B RID: 1163
	public const sbyte SKILL_SELECT = 34;

	// Token: 0x0400048C RID: 1164
	public const sbyte REQUEST_ITEM_INFO = 35;

	// Token: 0x0400048D RID: 1165
	public const sbyte TRADE_INVITE = 36;

	// Token: 0x0400048E RID: 1166
	public const sbyte TRADE_INVITE_ACCEPT = 37;

	// Token: 0x0400048F RID: 1167
	public const sbyte TRADE_LOCK_ITEM = 38;

	// Token: 0x04000490 RID: 1168
	public const sbyte TRADE_ACCEPT = 39;

	// Token: 0x04000491 RID: 1169
	public const sbyte TASK_GET = 40;

	// Token: 0x04000492 RID: 1170
	public const sbyte TASK_NEXT = 41;

	// Token: 0x04000493 RID: 1171
	public const sbyte GAME_INFO = 50;

	// Token: 0x04000494 RID: 1172
	public const sbyte TASK_UPDATE = 43;

	// Token: 0x04000495 RID: 1173
	public const sbyte CHAT_MAP = 44;

	// Token: 0x04000496 RID: 1174
	public const sbyte NPC_MISS = 45;

	// Token: 0x04000497 RID: 1175
	public const sbyte RESET_POINT = 46;

	// Token: 0x04000498 RID: 1176
	public const sbyte ALERT_MESSAGE = 47;

	// Token: 0x04000499 RID: 1177
	public const sbyte AUTO_SERVER = 48;

	// Token: 0x0400049A RID: 1178
	public const sbyte ALERT_SEND_SMS = 49;

	// Token: 0x0400049B RID: 1179
	public const sbyte TRADE_INVITE_CANCEL = 50;

	// Token: 0x0400049C RID: 1180
	public const sbyte BOSS_SKILL = 51;

	// Token: 0x0400049D RID: 1181
	public const sbyte MABU_HOLD = 52;

	// Token: 0x0400049E RID: 1182
	public const sbyte FRIEND_INVITE = 53;

	// Token: 0x0400049F RID: 1183
	public const sbyte PLAYER_ATTACK_NPC = 54;

	// Token: 0x040004A0 RID: 1184
	public const sbyte HAVE_ATTACK_PLAYER = 56;

	// Token: 0x040004A1 RID: 1185
	public const sbyte OPEN_UI_NEWMENU = 57;

	// Token: 0x040004A2 RID: 1186
	public const sbyte MOVE_FAST = 58;

	// Token: 0x040004A3 RID: 1187
	public const sbyte TEST_INVITE = 59;

	// Token: 0x040004A4 RID: 1188
	public const sbyte ADD_CUU_SAT = 62;

	// Token: 0x040004A5 RID: 1189
	public const sbyte ME_CUU_SAT = 63;

	// Token: 0x040004A6 RID: 1190
	public const sbyte CLEAR_CUU_SAT = 64;

	// Token: 0x040004A7 RID: 1191
	public const sbyte PLAYER_UP_EXPDOWN = 65;

	// Token: 0x040004A8 RID: 1192
	public const sbyte ME_DIE_EXP_DOWN = 66;

	// Token: 0x040004A9 RID: 1193
	public const sbyte PLAYER_ATTACK_P_N = 67;

	// Token: 0x040004AA RID: 1194
	public const sbyte ITEMMAP_ADD = 68;

	// Token: 0x040004AB RID: 1195
	public const sbyte DEL_ACC = 69;

	// Token: 0x040004AC RID: 1196
	public const sbyte USE_SKILL_MY_BUFF = 70;

	// Token: 0x040004AD RID: 1197
	public const sbyte NPC_CHANGE = 74;

	// Token: 0x040004AE RID: 1198
	public const sbyte PARTY_INVITE = 75;

	// Token: 0x040004AF RID: 1199
	public const sbyte PARTY_ACCEPT = 76;

	// Token: 0x040004B0 RID: 1200
	public const sbyte PARTY_CANCEL = 77;

	// Token: 0x040004B1 RID: 1201
	public const sbyte PLAYER_IN_PARTY = 78;

	// Token: 0x040004B2 RID: 1202
	public const sbyte PARTY_OUT = 79;

	// Token: 0x040004B3 RID: 1203
	public const sbyte FRIEND_ADD = 80;

	// Token: 0x040004B4 RID: 1204
	public const sbyte NPC_IS_DISABLE = 81;

	// Token: 0x040004B5 RID: 1205
	public const sbyte NPC_IS_MOVE = 82;

	// Token: 0x040004B6 RID: 1206
	public const sbyte SUMON_ATTACK = 83;

	// Token: 0x040004B7 RID: 1207
	public const sbyte RETURN_POINT_MAP = 84;

	// Token: 0x040004B8 RID: 1208
	public const sbyte NPC_IS_FIRE = 85;

	// Token: 0x040004B9 RID: 1209
	public const sbyte NPC_IS_ICE = 86;

	// Token: 0x040004BA RID: 1210
	public const sbyte NPC_IS_WIND = 87;

	// Token: 0x040004BB RID: 1211
	public const sbyte OPEN_TEXT_BOX_ID = 88;

	// Token: 0x040004BC RID: 1212
	public const sbyte REQUEST_ITEM_PLAYER = 90;

	// Token: 0x040004BD RID: 1213
	public const sbyte CHAT_PRIVATE = 91;

	// Token: 0x040004BE RID: 1214
	public const sbyte CHAT_THEGIOI_SERVER = 92;

	// Token: 0x040004BF RID: 1215
	public const sbyte CHAT_VIP = 93;

	// Token: 0x040004C0 RID: 1216
	public const sbyte SERVER_ALERT = 94;

	// Token: 0x040004C1 RID: 1217
	public const sbyte ME_UP_COIN_BAG = 95;

	// Token: 0x040004C2 RID: 1218
	public const sbyte GET_TASK_ORDER = 96;

	// Token: 0x040004C3 RID: 1219
	public const sbyte GET_TASK_UPDATE = 97;

	// Token: 0x040004C4 RID: 1220
	public const sbyte CLEAR_TASK_ORDER = 98;

	// Token: 0x040004C5 RID: 1221
	public const sbyte ADD_ITEM_MAP = 99;

	// Token: 0x040004C6 RID: 1222
	public const sbyte TRANSPORT = -105;

	// Token: 0x040004C7 RID: 1223
	public const sbyte ITEM_TIME = -106;

	// Token: 0x040004C8 RID: 1224
	public const sbyte PET_INFO = -107;

	// Token: 0x040004C9 RID: 1225
	public const sbyte PET_STATUS = -108;

	// Token: 0x040004CA RID: 1226
	public const sbyte SERVER_DATA = -110;

	// Token: 0x040004CB RID: 1227
	public const sbyte CLIENT_INPUT = -125;

	// Token: 0x040004CC RID: 1228
	public const sbyte HOLD = -124;

	// Token: 0x040004CD RID: 1229
	public const sbyte SHOW_ADS = 121;

	// Token: 0x040004CE RID: 1230
	public const sbyte LOGIN_DE = 122;

	// Token: 0x040004CF RID: 1231
	public const sbyte SET_POS = 123;

	// Token: 0x040004D0 RID: 1232
	public const sbyte NPC_CHAT = 124;

	// Token: 0x040004D1 RID: 1233
	public const sbyte FUSION = 125;

	// Token: 0x040004D2 RID: 1234
	public const sbyte ANDROID_PACK = 126;

	// Token: 0x040004D3 RID: 1235
	public const sbyte GET_IMAGE_SOURCE2 = -111;

	// Token: 0x040004D4 RID: 1236
	public const sbyte CHAGE_MOD_BODY = -112;

	// Token: 0x040004D5 RID: 1237
	public const sbyte CHANGE_ONSKILL = -113;

	// Token: 0x040004D6 RID: 1238
	public const sbyte REQUEST_PEAN = -114;

	// Token: 0x040004D7 RID: 1239
	public const sbyte POWER_INFO = -115;

	// Token: 0x040004D8 RID: 1240
	public const sbyte AUTOPLAY = -116;

	// Token: 0x040004D9 RID: 1241
	public const sbyte MABU = -117;

	// Token: 0x040004DA RID: 1242
	public const sbyte THACHDAU = -118;

	// Token: 0x040004DB RID: 1243
	public const sbyte THELUC = -119;

	// Token: 0x040004DC RID: 1244
	public const sbyte UPDATECHAR_MP = -123;

	// Token: 0x040004DD RID: 1245
	public const sbyte REFRESH_ITEM = 100;

	// Token: 0x040004DE RID: 1246
	public const sbyte CHECK_CONTROLLER = -120;

	// Token: 0x040004DF RID: 1247
	public const sbyte CHECK_MAP = -121;

	// Token: 0x040004E0 RID: 1248
	public const sbyte BIG_BOSS = 101;

	// Token: 0x040004E1 RID: 1249
	public const sbyte BIG_BOSS_2 = 102;

	// Token: 0x040004E2 RID: 1250
	public const sbyte DUAHAU = -122;

	// Token: 0x040004E3 RID: 1251
	public const sbyte QUAYSO = -126;

	// Token: 0x040004E4 RID: 1252
	public const sbyte USER_INFO = 42;

	// Token: 0x040004E5 RID: 1253
	public const sbyte OPEN3HOUR = -89;

	// Token: 0x040004E6 RID: 1254
	public const sbyte STATUS_PET = 31;

	// Token: 0x040004E7 RID: 1255
	public const sbyte SPEACIAL_SKILL = 112;

	// Token: 0x040004E8 RID: 1256
	public const sbyte SERVER_EFFECT = 113;

	// Token: 0x040004E9 RID: 1257
	public const sbyte INAPP = 114;

	// Token: 0x040004EA RID: 1258
	public const sbyte LUCKY_ROUND = -127;

	// Token: 0x040004EB RID: 1259
	public const sbyte RADA_CARD = 127;

	// Token: 0x040004EC RID: 1260
	public const sbyte CHAR_EFFECT = -128;
}
using System;

// Token: 0x02000038 RID: 56
public class Command
{
	// Token: 0x060002CE RID: 718 RVA: 0x000294CC File Offset: 0x000276CC
	public Command(string caption, IActionListener actionListener, int action, object p, int x, int y)
	{
		this.caption = caption;
		this.idAction = action;
		this.actionListener = actionListener;
		this.p = p;
		this.x = x;
		this.y = y;
	}

	// Token: 0x060002CF RID: 719 RVA: 0x00029536 File Offset: 0x00027736
	public Command()
	{
	}

	// Token: 0x060002D0 RID: 720 RVA: 0x00029568 File Offset: 0x00027768
	public Command(string caption, IActionListener actionListener, int action, object p)
	{
		this.caption = caption;
		this.idAction = action;
		this.actionListener = actionListener;
		this.p = p;
	}

	// Token: 0x060002D1 RID: 721 RVA: 0x000295C4 File Offset: 0x000277C4
	public Command(string caption, int action, object p)
	{
		this.caption = caption;
		this.idAction = action;
		this.p = p;
	}

	// Token: 0x060002D2 RID: 722 RVA: 0x00029616 File Offset: 0x00027816
	public Command(string caption, int action)
	{
		this.caption = caption;
		this.idAction = action;
	}

	// Token: 0x060002D3 RID: 723 RVA: 0x00029658 File Offset: 0x00027858
	public Command(string caption, int action, int x, int y)
	{
		this.caption = caption;
		this.idAction = action;
		this.x = x;
		this.y = y;
	}

	// Token: 0x060002D4 RID: 724 RVA: 0x000296B4 File Offset: 0x000278B4
	public void perform(string str)
	{
		bool flag = this.actionChat != null;
		if (flag)
		{
			this.actionChat(str);
		}
	}

	// Token: 0x060002D5 RID: 725 RVA: 0x000296E0 File Offset: 0x000278E0
	public void performAction()
	{
		GameCanvas.clearAllPointerEvent();
		bool flag = this.isPlaySoundButton && ((this.caption != null && !this.caption.Equals(string.Empty) && !this.caption.Equals(mResources.saying)) || this.img != null);
		if (flag)
		{
			SoundMn.gI().buttonClick();
		}
		bool flag2 = this.idAction > 0;
		if (flag2)
		{
			bool flag3 = this.actionListener != null;
			if (flag3)
			{
				this.actionListener.perform(this.idAction, this.p);
			}
			else
			{
				GameScr.gI().actionPerform(this.idAction, this.p);
			}
		}
	}

	// Token: 0x060002D6 RID: 726 RVA: 0x00029799 File Offset: 0x00027999
	public void setType()
	{
		this.type = 1;
		this.w = 160;
		this.hw = 80;
	}

	// Token: 0x060002D7 RID: 727 RVA: 0x000297B8 File Offset: 0x000279B8
	public void paint(mGraphics g)
	{
		bool flag = this.img != null;
		if (flag)
		{
			g.drawImage(this.img, this.x, this.y + mGraphics.addYWhenOpenKeyBoard, 0);
			bool flag2 = this.isFocus;
			if (flag2)
			{
				bool flag3 = this.imgFocus == null;
				if (flag3)
				{
					bool flag4 = this.cmdClosePanel;
					if (flag4)
					{
						g.drawImage(ItemMap.imageFlare, this.x + 8, this.y + mGraphics.addYWhenOpenKeyBoard + 8, 3);
					}
					else
					{
						g.drawImage(ItemMap.imageFlare, this.x - (this.img.Equals(GameScr.imgMenu) ? 10 : 0), this.y + mGraphics.addYWhenOpenKeyBoard, 0);
					}
				}
				else
				{
					g.drawImage(this.imgFocus, this.x, this.y + mGraphics.addYWhenOpenKeyBoard, 0);
				}
			}
			bool flag5 = this.caption != "menu" && this.caption != null;
			if (flag5)
			{
				bool flag6 = !this.isFocus;
				if (flag6)
				{
					mFont.tahoma_7b_dark.drawString(g, this.caption, this.x + mGraphics.getImageWidth(this.img) / 2, this.y + mGraphics.getImageHeight(this.img) / 2 - 5, 2);
				}
				else
				{
					mFont.tahoma_7b_green2.drawString(g, this.caption, this.x + mGraphics.getImageWidth(this.img) / 2, this.y + mGraphics.getImageHeight(this.img) / 2 - 5, 2);
				}
			}
		}
		else
		{
			bool flag7 = this.caption != string.Empty;
			if (flag7)
			{
				bool flag8 = !this.isFocus;
				if (flag8)
				{
					Command.paintOngMau(Command.btn0left, Command.btn0mid, Command.btn0right, this.x, this.y, this.w, g);
				}
				else
				{
					Command.paintOngMau(Command.btn1left, Command.btn1mid, Command.btn1right, this.x, this.y, this.w, g);
				}
			}
			int num = 0;
			int num2 = this.x + this.w / 2;
			bool flag9 = this.imgBtn != null;
			if (flag9)
			{
				num = this.imgBtn.getWidth();
				num2 = this.x + num;
				bool flag10 = !this.isFocus;
				if (flag10)
				{
					g.drawImage(this.imgBtn, this.x, this.y, 0);
				}
				else
				{
					g.drawImage(this.imgBtn, this.x, this.y + 1, 0);
				}
			}
			bool flag11 = !this.isFocus;
			if (flag11)
			{
				mFont.tahoma_7b_dark.drawString(g, this.caption, num2, this.y + 7, (num == 0) ? 2 : 0);
			}
			else
			{
				mFont.tahoma_7b_green2.drawString(g, this.caption, num2, this.y + 7, (num == 0) ? 2 : 0);
			}
		}
	}

	// Token: 0x060002D8 RID: 728 RVA: 0x00029AC0 File Offset: 0x00027CC0
	public static void paintOngMau(Image img0, Image img1, Image img2, int x, int y, int size, mGraphics g)
	{
		for (int i = 10; i <= size - 20; i += 10)
		{
			g.drawImage(img1, x + i, y, 0);
		}
		int num = size % 10;
		bool flag = num > 0;
		if (flag)
		{
			g.drawRegion(img1, 0, 0, num, 24, 0, x + size - 10 - num, y, 0);
		}
		g.drawImage(img0, x, y, 0);
		g.drawImage(img2, x + size - 10, y, 0);
	}

	// Token: 0x060002D9 RID: 729 RVA: 0x00029B44 File Offset: 0x00027D44
	public bool isPointerPressInside()
	{
		this.isFocus = false;
		bool flag = GameCanvas.isPointerHoldIn(this.x, this.y, this.w, this.h);
		if (flag)
		{
			bool isPointerDown = GameCanvas.isPointerDown;
			if (isPointerDown)
			{
				this.isFocus = true;
			}
			bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
			if (isPointerJustRelease)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060002DA RID: 730 RVA: 0x00029BA4 File Offset: 0x00027DA4
	public bool isPointerPressInsideCamera(int cmx, int cmy)
	{
		this.isFocus = false;
		bool flag = GameCanvas.isPointerHoldIn(this.x - cmx, this.y - cmy, this.w, this.h);
		if (flag)
		{
			Res.outz("w= " + this.w.ToString());
			bool isPointerDown = GameCanvas.isPointerDown;
			if (isPointerDown)
			{
				this.isFocus = true;
			}
			bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
			if (isPointerJustRelease)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x040004ED RID: 1261
	public bool isDisplay;

	// Token: 0x040004EE RID: 1262
	public ActionChat actionChat;

	// Token: 0x040004EF RID: 1263
	public string caption;

	// Token: 0x040004F0 RID: 1264
	public string[] subCaption;

	// Token: 0x040004F1 RID: 1265
	public IActionListener actionListener;

	// Token: 0x040004F2 RID: 1266
	public int idAction;

	// Token: 0x040004F3 RID: 1267
	public bool isPlaySoundButton = true;

	// Token: 0x040004F4 RID: 1268
	public Image img;

	// Token: 0x040004F5 RID: 1269
	public Image imgFocus;

	// Token: 0x040004F6 RID: 1270
	public Image imgBtn;

	// Token: 0x040004F7 RID: 1271
	public int x;

	// Token: 0x040004F8 RID: 1272
	public int y;

	// Token: 0x040004F9 RID: 1273
	public int w = mScreen.cmdW;

	// Token: 0x040004FA RID: 1274
	public int h = mScreen.cmdH;

	// Token: 0x040004FB RID: 1275
	public int hw;

	// Token: 0x040004FC RID: 1276
	private int lenCaption;

	// Token: 0x040004FD RID: 1277
	public bool isFocus;

	// Token: 0x040004FE RID: 1278
	public object p;

	// Token: 0x040004FF RID: 1279
	public int type;

	// Token: 0x04000500 RID: 1280
	public string caption2 = string.Empty;

	// Token: 0x04000501 RID: 1281
	public static Image btn0left;

	// Token: 0x04000502 RID: 1282
	public static Image btn0mid;

	// Token: 0x04000503 RID: 1283
	public static Image btn0right;

	// Token: 0x04000504 RID: 1284
	public static Image btn1left;

	// Token: 0x04000505 RID: 1285
	public static Image btn1mid;

	// Token: 0x04000506 RID: 1286
	public static Image btn1right;

	// Token: 0x04000507 RID: 1287
	public bool cmdClosePanel;

	// Token: 0x04000508 RID: 1288
	public bool isPaintNew;
}
using System;
using System.Collections;
using AssemblyCSharp.Mod.Xmap;
using Assets.src.e;
using Assets.src.f;
using Assets.src.g;
using UnityEngine;

// Token: 0x02000039 RID: 57
public class Controller : IMessageHandler
{
	// Token: 0x060002DB RID: 731 RVA: 0x00029C20 File Offset: 0x00027E20
	public static Controller gI()
	{
		bool flag = Controller.me == null;
		if (flag)
		{
			Controller.me = new Controller();
		}
		return Controller.me;
	}

	// Token: 0x060002DC RID: 732 RVA: 0x00029C50 File Offset: 0x00027E50
	public static Controller gI2()
	{
		bool flag = Controller.me2 == null;
		if (flag)
		{
			Controller.me2 = new Controller();
		}
		return Controller.me2;
	}

	// Token: 0x060002DD RID: 733 RVA: 0x00029C7F File Offset: 0x00027E7F
	public void onConnectOK(bool isMain1)
	{
		Controller.isMain = isMain1;
		mSystem.onConnectOK();
	}

	// Token: 0x060002DE RID: 734 RVA: 0x00029C8E File Offset: 0x00027E8E
	public void onConnectionFail(bool isMain1)
	{
		Controller.isMain = isMain1;
		mSystem.onConnectionFail();
	}

	// Token: 0x060002DF RID: 735 RVA: 0x00029C9D File Offset: 0x00027E9D
	public void onDisconnected(bool isMain1)
	{
		Controller.isMain = isMain1;
		mSystem.onDisconnected();
	}

	// Token: 0x060002E0 RID: 736 RVA: 0x00029CAC File Offset: 0x00027EAC
	public void requestItemPlayer(Message msg)
	{
		try
		{
			int num = (int)msg.reader().readUnsignedByte();
			Item item = GameScr.currentCharViewInfo.arrItemBody[num];
			item.saleCoinLock = msg.reader().readInt();
			item.sys = (int)msg.reader().readByte();
			item.options = new MyVector();
			try
			{
				for (;;)
				{
					ItemOption itemOption = this.readItemOption(msg);
					bool flag = itemOption != null;
					if (flag)
					{
						item.options.addElement(itemOption);
					}
				}
			}
			catch (Exception ex)
			{
				Cout.println("Loi tairequestItemPlayer 1" + ex.ToString());
			}
		}
		catch (Exception ex2)
		{
			Cout.println("Loi tairequestItemPlayer 2" + ex2.ToString());
		}
	}

	// Token: 0x060002E1 RID: 737 RVA: 0x00029D84 File Offset: 0x00027F84
	public void onMessage(Message msg)
	{
		GameCanvas.debugSession.removeAllElements();
		GameCanvas.debug("SA1", 2);
		try
		{
			bool flag = msg.command != -74;
			if (flag)
			{
				Res.outz("=========> [READ] cmd= " + msg.command.ToString());
			}
			global::Char @char = null;
			MyVector myVector = new MyVector();
			int i = 0;
			GameCanvas.timeLoading = 15;
			Controller2.readMessage(msg);
			sbyte command = msg.command;
			sbyte b = command;
			switch (b)
			{
			case -112:
			{
				sbyte b2 = msg.reader().readByte();
				bool flag2 = b2 == 0;
				if (flag2)
				{
					sbyte mobIndex = msg.reader().readByte();
					GameScr.findMobInMap(mobIndex).clearBody();
				}
				bool flag3 = b2 == 1;
				if (flag3)
				{
					sbyte mobIndex2 = msg.reader().readByte();
					GameScr.findMobInMap(mobIndex2).setBody(msg.reader().readShort());
				}
				break;
			}
			case -111:
			case -110:
			case -109:
			case -108:
			case -106:
			case -105:
			case -104:
			case -103:
			case -102:
			case -101:
			case -100:
			case -89:
			case -78:
			case -75:
			case -73:
			case -72:
			case -71:
			case -58:
			case -56:
			case -55:
			case -54:
			case -49:
			case -48:
			case -40:
			case -39:
			case -38:
			case -33:
			case -27:
			case -23:
			case -17:
			case -16:
			case -15:
			case -13:
			case -12:
			case -11:
			case -10:
			case -9:
			case -8:
			case -7:
			case -6:
			case -5:
			case -3:
			case -2:
			case -1:
			case 3:
			case 4:
			case 5:
			case 8:
			case 9:
			case 10:
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
			case 18:
			case 19:
			case 21:
			case 22:
			case 23:
			case 25:
			case 26:
			case 28:
			case 30:
			case 31:
			case 34:
			case 35:
			case 36:
			case 37:
			case 42:
			case 44:
			case 45:
			case 48:
			case 49:
			case 51:
			case 52:
			case 53:
			case 55:
			case 59:
			case 60:
			case 61:
			case 67:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 89:
			case 91:
			case 93:
				break;
			case -107:
			{
				sbyte b3 = msg.reader().readByte();
				bool flag4 = b3 == 0;
				if (flag4)
				{
					global::Char.myCharz().havePet = false;
				}
				bool flag5 = b3 == 1;
				if (flag5)
				{
					global::Char.myCharz().havePet = true;
				}
				bool flag6 = b3 != 2;
				if (!flag6)
				{
					InfoDlg.hide();
					global::Char.myPetz().head = (int)msg.reader().readShort();
					global::Char.myPetz().setDefaultPart();
					int num = (int)msg.reader().readUnsignedByte();
					Res.outz("num body = " + num.ToString());
					global::Char.myPetz().arrItemBody = new Item[num];
					int num4;
					for (int j = 0; j < num; j = num4 + 1)
					{
						short num2 = msg.reader().readShort();
						Res.outz("template id= " + num2.ToString());
						bool flag7 = num2 == -1;
						if (!flag7)
						{
							Res.outz("1");
							global::Char.myPetz().arrItemBody[j] = new Item();
							global::Char.myPetz().arrItemBody[j].template = ItemTemplates.get(num2);
							int type = (int)global::Char.myPetz().arrItemBody[j].template.type;
							global::Char.myPetz().arrItemBody[j].quantity = msg.reader().readInt();
							Res.outz("3");
							global::Char.myPetz().arrItemBody[j].info = msg.reader().readUTF();
							global::Char.myPetz().arrItemBody[j].content = msg.reader().readUTF();
							int num3 = (int)msg.reader().readUnsignedByte();
							Res.outz("option size= " + num3.ToString());
							bool flag8 = num3 != 0;
							if (flag8)
							{
								global::Char.myPetz().arrItemBody[j].itemOption = new ItemOption[num3];
								for (int k = 0; k < global::Char.myPetz().arrItemBody[j].itemOption.Length; k = num4 + 1)
								{
									ItemOption itemOption = this.readItemOption(msg);
									bool flag9 = itemOption != null;
									if (flag9)
									{
										global::Char.myPetz().arrItemBody[j].itemOption[k] = itemOption;
									}
									num4 = k;
								}
							}
							int num5 = type;
							int num6 = num5;
							if (num6 != 0)
							{
								if (num6 == 1)
								{
									global::Char.myPetz().leg = (int)global::Char.myPetz().arrItemBody[j].template.part;
								}
							}
							else
							{
								global::Char.myPetz().body = (int)global::Char.myPetz().arrItemBody[j].template.part;
							}
						}
						num4 = j;
					}
					global::Char.myPetz().cHP = msg.reader().readLong();
					global::Char.myPetz().cHPFull = msg.reader().readLong();
					global::Char.myPetz().cMP = msg.reader().readLong();
					global::Char.myPetz().cMPFull = msg.reader().readLong();
					global::Char.myPetz().cDamFull = msg.reader().readLong();
					global::Char.myPetz().cName = msg.reader().readUTF();
					global::Char.myPetz().currStrLevel = msg.reader().readUTF();
					global::Char.myPetz().cPower = msg.reader().readLong();
					global::Char.myPetz().cTiemNang = msg.reader().readLong();
					global::Char.myPetz().petStatus = msg.reader().readByte();
					global::Char.myPetz().cStamina = (int)msg.reader().readShort();
					global::Char.myPetz().cMaxStamina = msg.reader().readShort();
					global::Char.myPetz().cCriticalFull = (int)msg.reader().readByte();
					global::Char.myPetz().cDefull = msg.reader().readLong();
					global::Char.myPetz().arrPetSkill = new Skill[(int)msg.reader().readByte()];
					string str = "SKILLENT = ";
					Skill[] arrPetSkill = global::Char.myPetz().arrPetSkill;
					Res.outz(str + ((arrPetSkill != null) ? arrPetSkill.ToString() : null));
					for (int l = 0; l < global::Char.myPetz().arrPetSkill.Length; l = num4 + 1)
					{
						short num7 = msg.reader().readShort();
						bool flag10 = num7 != -1;
						if (flag10)
						{
							global::Char.myPetz().arrPetSkill[l] = Skills.get(num7);
						}
						else
						{
							global::Char.myPetz().arrPetSkill[l] = new Skill();
							global::Char.myPetz().arrPetSkill[l].template = null;
							global::Char.myPetz().arrPetSkill[l].moreInfo = msg.reader().readUTF();
						}
						num4 = l;
					}
				}
				break;
			}
			case -99:
			{
				InfoDlg.hide();
				sbyte b4 = msg.reader().readByte();
				bool flag11 = b4 == 0;
				if (flag11)
				{
					GameCanvas.panel.vEnemy.removeAllElements();
					int num8 = (int)msg.reader().readUnsignedByte();
					int num4;
					for (int m = 0; m < num8; m = num4 + 1)
					{
						global::Char char2 = new global::Char();
						char2.charID = msg.reader().readInt();
						char2.head = (int)msg.reader().readShort();
						char2.headICON = (int)msg.reader().readShort();
						char2.body = (int)msg.reader().readShort();
						char2.leg = (int)msg.reader().readShort();
						char2.bag = (int)msg.reader().readShort();
						char2.cName = msg.reader().readUTF();
						InfoItem infoItem = new InfoItem(msg.reader().readUTF());
						bool isOnline = msg.reader().readBoolean();
						infoItem.charInfo = char2;
						infoItem.isOnline = isOnline;
						Res.outz("isonline = " + isOnline.ToString());
						GameCanvas.panel.vEnemy.addElement(infoItem);
						num4 = m;
					}
					GameCanvas.panel.setTypeEnemy();
					GameCanvas.panel.show();
				}
				break;
			}
			case -98:
			{
				sbyte b5 = msg.reader().readByte();
				GameCanvas.menu.showMenu = false;
				bool flag12 = b5 == 0;
				if (flag12)
				{
					GameCanvas.startYesNoDlg(msg.reader().readUTF(), new Command(mResources.YES, GameCanvas.instance, 888397, msg.reader().readUTF()), new Command(mResources.NO, GameCanvas.instance, 888396, null));
				}
				break;
			}
			case -97:
				global::Char.myCharz().cNangdong = (long)msg.reader().readInt();
				break;
			case -96:
			{
				sbyte typeTop = msg.reader().readByte();
				GameCanvas.panel.vTop.removeAllElements();
				string topName = msg.reader().readUTF();
				sbyte b6 = msg.reader().readByte();
				int num4;
				for (int n = 0; n < (int)b6; n = num4 + 1)
				{
					int rank = msg.reader().readInt();
					int pId = msg.reader().readInt();
					short headID = msg.reader().readShort();
					short headICON = msg.reader().readShort();
					short body = msg.reader().readShort();
					short leg = msg.reader().readShort();
					string name = msg.reader().readUTF();
					string info = msg.reader().readUTF();
					TopInfo topInfo = new TopInfo();
					topInfo.rank = rank;
					topInfo.headID = (int)headID;
					topInfo.headICON = (int)headICON;
					topInfo.body = body;
					topInfo.leg = leg;
					topInfo.name = name;
					topInfo.info = info;
					topInfo.info2 = msg.reader().readUTF();
					topInfo.pId = pId;
					GameCanvas.panel.vTop.addElement(topInfo);
					num4 = n;
				}
				GameCanvas.panel.topName = topName;
				GameCanvas.panel.setTypeTop(typeTop);
				GameCanvas.panel.show();
				break;
			}
			case -95:
			{
				sbyte b7 = msg.reader().readByte();
				Res.outz("type= " + b7.ToString());
				bool flag13 = b7 == 0;
				if (flag13)
				{
					int num9 = msg.reader().readInt();
					short templateId = msg.reader().readShort();
					long num10 = msg.reader().readLong();
					SoundMn.gI().explode_1();
					bool flag14 = num9 == global::Char.myCharz().charID;
					if (flag14)
					{
						global::Char.myCharz().mobMe = new Mob(num9, false, false, false, false, false, (int)templateId, 1, num10, 0, num10, (short)(global::Char.myCharz().cx + ((global::Char.myCharz().cdir != 1) ? -40 : 40)), (short)global::Char.myCharz().cy, 4, 0);
						global::Char.myCharz().mobMe.isMobMe = true;
						EffecMn.addEff(new Effect(18, global::Char.myCharz().mobMe.x, global::Char.myCharz().mobMe.y, 2, 10, -1));
						global::Char.myCharz().tMobMeBorn = 30;
						GameScr.vMob.addElement(global::Char.myCharz().mobMe);
					}
					else
					{
						@char = GameScr.findCharInMap(num9);
						bool flag15 = @char != null;
						if (flag15)
						{
							@char.mobMe = new Mob(num9, false, false, false, false, false, (int)templateId, 1, num10, 0, num10, (short)@char.cx, (short)@char.cy, 4, 0)
							{
								isMobMe = true
							};
							GameScr.vMob.addElement(@char.mobMe);
						}
						else
						{
							Mob mob = GameScr.findMobInMap(num9);
							bool flag16 = mob == null;
							if (flag16)
							{
								mob = new Mob(num9, false, false, false, false, false, (int)templateId, 1, num10, 0, num10, -100, -100, 4, 0);
								mob.isMobMe = true;
								GameScr.vMob.addElement(mob);
							}
						}
					}
				}
				bool flag17 = b7 == 1;
				if (flag17)
				{
					int num11 = msg.reader().readInt();
					int mobId = (int)msg.reader().readByte();
					Res.outz("mod attack id= " + num11.ToString());
					bool flag18 = num11 == global::Char.myCharz().charID;
					if (flag18)
					{
						bool flag19 = GameScr.findMobInMap(mobId) != null;
						if (flag19)
						{
							global::Char.myCharz().mobMe.attackOtherMob(GameScr.findMobInMap(mobId));
						}
					}
					else
					{
						@char = GameScr.findCharInMap(num11);
						bool flag20 = @char != null && GameScr.findMobInMap(mobId) != null;
						if (flag20)
						{
							@char.mobMe.attackOtherMob(GameScr.findMobInMap(mobId));
						}
					}
				}
				bool flag21 = b7 == 2;
				if (flag21)
				{
					int num12 = msg.reader().readInt();
					int num13 = msg.reader().readInt();
					long num14 = msg.reader().readLong();
					long cHPNew = msg.reader().readLong();
					bool flag22 = num12 == global::Char.myCharz().charID;
					if (flag22)
					{
						Res.outz("mob dame= " + num14.ToString());
						@char = GameScr.findCharInMap(num13);
						bool flag23 = @char != null;
						if (flag23)
						{
							@char.cHPNew = cHPNew;
							bool isBusyAttackSomeOne = global::Char.myCharz().mobMe.isBusyAttackSomeOne;
							if (isBusyAttackSomeOne)
							{
								@char.doInjure(num14, 0L, false, true);
							}
							else
							{
								global::Char.myCharz().mobMe.dame = num14;
								global::Char.myCharz().mobMe.setAttack(@char);
							}
						}
					}
					else
					{
						Mob mob2 = GameScr.findMobInMap(num12);
						bool flag24 = mob2 != null;
						if (flag24)
						{
							bool flag25 = num13 == global::Char.myCharz().charID;
							if (flag25)
							{
								global::Char.myCharz().cHPNew = cHPNew;
								bool isBusyAttackSomeOne2 = mob2.isBusyAttackSomeOne;
								if (isBusyAttackSomeOne2)
								{
									global::Char.myCharz().doInjure(num14, 0L, false, true);
								}
								else
								{
									mob2.dame = num14;
									mob2.setAttack(global::Char.myCharz());
								}
							}
							else
							{
								@char = GameScr.findCharInMap(num13);
								bool flag26 = @char != null;
								if (flag26)
								{
									@char.cHPNew = cHPNew;
									bool isBusyAttackSomeOne3 = mob2.isBusyAttackSomeOne;
									if (isBusyAttackSomeOne3)
									{
										@char.doInjure(num14, 0L, false, true);
									}
									else
									{
										mob2.dame = num14;
										mob2.setAttack(@char);
									}
								}
							}
						}
					}
				}
				bool flag27 = b7 == 3;
				if (flag27)
				{
					int num15 = msg.reader().readInt();
					int mobId2 = msg.reader().readInt();
					long hp = msg.reader().readLong();
					long num16 = msg.reader().readLong();
					@char = null;
					@char = ((global::Char.myCharz().charID != num15) ? GameScr.findCharInMap(num15) : global::Char.myCharz());
					bool flag28 = @char != null;
					if (flag28)
					{
						Mob mob2 = GameScr.findMobInMap(mobId2);
						bool flag29 = @char.mobMe != null;
						if (flag29)
						{
							@char.mobMe.attackOtherMob(mob2);
						}
						bool flag30 = mob2 != null;
						if (flag30)
						{
							mob2.hp = hp;
							mob2.updateHp_bar();
							bool flag31 = num16 == 0L;
							if (flag31)
							{
								mob2.x = mob2.xFirst;
								mob2.y = mob2.yFirst;
								GameScr.startFlyText(mResources.miss, mob2.x, mob2.y - mob2.h, 0, -2, mFont.MISS);
							}
							else
							{
								GameScr.startFlyText("-" + num16.ToString(), mob2.x, mob2.y - mob2.h, 0, -2, mFont.ORANGE);
							}
						}
					}
				}
				bool flag32 = b7 == 4;
				if (flag32)
				{
				}
				bool flag33 = b7 == 5;
				if (flag33)
				{
					int num17 = msg.reader().readInt();
					sbyte b8 = msg.reader().readByte();
					int mobId3 = msg.reader().readInt();
					long num18 = msg.reader().readLong();
					long hp2 = msg.reader().readLong();
					@char = null;
					@char = ((num17 != global::Char.myCharz().charID) ? GameScr.findCharInMap(num17) : global::Char.myCharz());
					bool flag34 = @char == null;
					if (flag34)
					{
						return;
					}
					bool flag35 = (TileMap.tileTypeAtPixel(@char.cx, @char.cy) & 2) == 2;
					if (flag35)
					{
						@char.setSkillPaint(GameScr.sks[(int)b8], 0);
					}
					else
					{
						@char.setSkillPaint(GameScr.sks[(int)b8], 1);
					}
					Mob mob3 = GameScr.findMobInMap(mobId3);
					bool flag36 = @char.cx <= mob3.x;
					if (flag36)
					{
						@char.cdir = 1;
					}
					else
					{
						@char.cdir = -1;
					}
					@char.mobFocus = mob3;
					mob3.hp = hp2;
					mob3.updateHp_bar();
					GameCanvas.debug("SA83v2", 2);
					bool flag37 = num18 == 0L;
					if (flag37)
					{
						mob3.x = mob3.xFirst;
						mob3.y = mob3.yFirst;
						GameScr.startFlyText(mResources.miss, mob3.x, mob3.y - mob3.h, 0, -2, mFont.MISS);
					}
					else
					{
						GameScr.startFlyText("-" + num18.ToString(), mob3.x, mob3.y - mob3.h, 0, -2, mFont.ORANGE);
					}
				}
				bool flag38 = b7 == 6;
				if (flag38)
				{
					int num19 = msg.reader().readInt();
					bool flag39 = num19 == global::Char.myCharz().charID;
					if (flag39)
					{
						global::Char.myCharz().mobMe.startDie();
					}
					else
					{
						global::Char char3 = GameScr.findCharInMap(num19);
						if (char3 != null)
						{
							char3.mobMe.startDie();
						}
					}
				}
				bool flag40 = b7 != 7;
				if (!flag40)
				{
					int num20 = msg.reader().readInt();
					bool flag41 = num20 == global::Char.myCharz().charID;
					if (flag41)
					{
						global::Char.myCharz().mobMe = null;
						int num4;
						for (int num21 = 0; num21 < GameScr.vMob.size(); num21 = num4 + 1)
						{
							bool flag42 = ((Mob)GameScr.vMob.elementAt(num21)).mobId == num20;
							if (flag42)
							{
								GameScr.vMob.removeElementAt(num21);
							}
							num4 = num21;
						}
					}
					else
					{
						@char = GameScr.findCharInMap(num20);
						int num4;
						for (int num22 = 0; num22 < GameScr.vMob.size(); num22 = num4 + 1)
						{
							bool flag43 = ((Mob)GameScr.vMob.elementAt(num22)).mobId == num20;
							if (flag43)
							{
								GameScr.vMob.removeElementAt(num22);
							}
							num4 = num22;
						}
						bool flag44 = @char != null;
						if (flag44)
						{
							@char.mobMe = null;
						}
					}
				}
				break;
			}
			case -94:
				while (msg.reader().available() > 0)
				{
					short num23 = msg.reader().readShort();
					int num24 = msg.reader().readInt();
					int num4;
					for (int num25 = 0; num25 < global::Char.myCharz().vSkill.size(); num25 = num4 + 1)
					{
						Skill skill = (Skill)global::Char.myCharz().vSkill.elementAt(num25);
						bool flag45 = skill != null && skill.skillId == num23;
						if (flag45)
						{
							bool flag46 = num24 < skill.coolDown;
							if (flag46)
							{
								skill.lastTimeUseThisSkill = mSystem.currentTimeMillis() - (long)(skill.coolDown - num24);
							}
							Res.outz(string.Concat(new string[]
							{
								"1 chieu id= ",
								skill.template.id.ToString(),
								" cooldown= ",
								num24.ToString(),
								"curr cool down= ",
								skill.coolDown.ToString()
							}));
						}
						num4 = num25;
					}
				}
				break;
			case -93:
			{
				short num26 = msg.reader().readShort();
				BgItem.newSmallVersion = new sbyte[(int)num26];
				int num4;
				for (int num27 = 0; num27 < (int)num26; num27 = num4 + 1)
				{
					BgItem.newSmallVersion[num27] = msg.reader().readByte();
					num4 = num27;
				}
				break;
			}
			case -92:
			{
				Main.typeClient = (int)msg.reader().readByte();
				bool flag47 = Rms.loadRMSString("ResVersion") == null;
				if (flag47)
				{
					Rms.clearAll();
				}
				Rms.saveRMSInt("clienttype", Main.typeClient);
				Rms.saveRMSInt("lastZoomlevel", mGraphics.zoomLevel);
				bool flag48 = Rms.loadRMSString("ResVersion") == null;
				if (flag48)
				{
					GameCanvas.startOK(mResources.plsRestartGame, 8885, null);
				}
				break;
			}
			case -91:
			{
				sbyte b9 = msg.reader().readByte();
				GameCanvas.panel.mapNames = new string[(int)b9];
				GameCanvas.panel.planetNames = new string[(int)b9];
				int num4;
				for (int num28 = 0; num28 < (int)b9; num28 = num4 + 1)
				{
					GameCanvas.panel.mapNames[num28] = msg.reader().readUTF();
					GameCanvas.panel.planetNames[num28] = msg.reader().readUTF();
					num4 = num28;
				}
				GameCanvas.panel.setTypeMapTrans();
				GameCanvas.panel.show();
				Pk9rXmap.ShowPanelMapTrans();
				break;
			}
			case -90:
			{
				sbyte b10 = msg.reader().readByte();
				int num29 = msg.reader().readInt();
				Res.outz("===> UPDATE_BODY:    type = " + b10.ToString());
				@char = ((global::Char.myCharz().charID != num29) ? GameScr.findCharInMap(num29) : global::Char.myCharz());
				bool flag49 = b10 != -1;
				if (flag49)
				{
					short num30 = msg.reader().readShort();
					short num31 = msg.reader().readShort();
					short num32 = msg.reader().readShort();
					sbyte isMonkey = msg.reader().readByte();
					bool flag50 = @char != null;
					if (flag50)
					{
						bool flag51 = @char.charID == num29;
						if (flag51)
						{
							@char.isMask = true;
							@char.isMonkey = isMonkey;
							bool flag52 = @char.isMonkey != 0;
							if (flag52)
							{
								@char.isWaitMonkey = false;
								@char.isLockMove = false;
							}
						}
						else
						{
							bool flag53 = @char != null;
							if (flag53)
							{
								@char.isMask = true;
								@char.isMonkey = isMonkey;
							}
						}
						bool flag54 = num30 != -1;
						if (flag54)
						{
							@char.head = (int)num30;
						}
						bool flag55 = num31 != -1;
						if (flag55)
						{
							@char.body = (int)num31;
						}
						bool flag56 = num32 != -1;
						if (flag56)
						{
							@char.leg = (int)num32;
						}
					}
				}
				bool flag57 = b10 == -1 && @char != null;
				if (flag57)
				{
					@char.isMask = false;
					@char.isMonkey = 0;
				}
				bool flag58 = @char == null;
				if (!flag58)
				{
					int num4;
					for (int num33 = 0; num33 < 54; num33 = num4 + 1)
					{
						@char.removeEffChar(0, 201 + num33);
						num4 = num33;
					}
					bool flag59 = @char.bag >= 201 && @char.bag < 255;
					if (flag59)
					{
						@char.addEffChar(new Effect(@char.bag, @char, 2, -1, 10, 1)
						{
							typeEff = 5
						});
					}
					bool flag60 = @char.bag == 30 && @char.me;
					if (flag60)
					{
						GameScr.isPickNgocRong = true;
					}
					bool flag61 = !@char.me;
					if (!flag61)
					{
						GameScr.isudungCapsun4 = false;
						GameScr.isudungCapsun3 = false;
						for (int num34 = 0; num34 < global::Char.myCharz().arrItemBag.Length; num34 = num4 + 1)
						{
							Item item = global::Char.myCharz().arrItemBag[num34];
							bool flag62 = item == null;
							if (!flag62)
							{
								bool flag63 = item.template.id == 194;
								if (flag63)
								{
									GameScr.isudungCapsun4 = (item.quantity > 0);
									bool isudungCapsun = GameScr.isudungCapsun4;
									if (isudungCapsun)
									{
										break;
									}
								}
								else
								{
									bool flag64 = item.template.id == 193;
									if (flag64)
									{
										GameScr.isudungCapsun3 = (item.quantity > 0);
									}
								}
							}
							num4 = num34;
						}
					}
				}
				break;
			}
			case -88:
				GameCanvas.endDlg();
				GameCanvas.serverScreen.switchToMe();
				break;
			case -87:
			{
				Res.outz("GET UPDATE_DATA " + msg.reader().available().ToString() + " bytes");
				msg.reader().mark(500000);
				this.createData(msg.reader(), true);
				msg.reader().reset();
				sbyte[] array = new sbyte[msg.reader().available()];
				msg.reader().readFully(ref array);
				sbyte[] data = new sbyte[]
				{
					GameScr.vcData
				};
				Rms.saveRMS("NRdataVersion", data);
				LoginScr.isUpdateData = false;
				GameScr.gI().readOk();
				break;
			}
			case -86:
			{
				sbyte b11 = msg.reader().readByte();
				Res.outz("server gui ve giao dich action = " + b11.ToString());
				bool flag65 = b11 == 0;
				if (flag65)
				{
					int playerID = msg.reader().readInt();
					GameScr.gI().giaodich(playerID);
				}
				bool flag66 = b11 == 1;
				if (flag66)
				{
					int num35 = msg.reader().readInt();
					global::Char char4 = GameScr.findCharInMap(num35);
					bool flag67 = char4 == null;
					if (flag67)
					{
						return;
					}
					GameCanvas.panel.setTypeGiaoDich(char4);
					GameCanvas.panel.show();
					Service.gI().getPlayerMenu(num35);
				}
				bool flag68 = b11 == 2;
				if (flag68)
				{
					sbyte b12 = msg.reader().readByte();
					int num4;
					for (int num36 = 0; num36 < GameCanvas.panel.vMyGD.size(); num36 = num4 + 1)
					{
						Item item2 = (Item)GameCanvas.panel.vMyGD.elementAt(num36);
						bool flag69 = item2.indexUI == (int)b12;
						if (flag69)
						{
							GameCanvas.panel.vMyGD.removeElement(item2);
							break;
						}
						num4 = num36;
					}
				}
				bool flag70 = b11 == 5;
				if (flag70)
				{
				}
				bool flag71 = b11 == 6;
				if (flag71)
				{
					GameCanvas.panel.isFriendLock = true;
					bool flag72 = GameCanvas.panel2 != null;
					if (flag72)
					{
						GameCanvas.panel2.isFriendLock = true;
					}
					GameCanvas.panel.vFriendGD.removeAllElements();
					bool flag73 = GameCanvas.panel2 != null;
					if (flag73)
					{
						GameCanvas.panel2.vFriendGD.removeAllElements();
					}
					int friendMoneyGD = msg.reader().readInt();
					sbyte b13 = msg.reader().readByte();
					Res.outz("item size = " + b13.ToString());
					int num4;
					for (int num37 = 0; num37 < (int)b13; num37 = num4 + 1)
					{
						Item item3 = new Item();
						item3.template = ItemTemplates.get(msg.reader().readShort());
						item3.quantity = msg.reader().readInt();
						int num38 = (int)msg.reader().readUnsignedByte();
						bool flag74 = num38 != 0;
						if (flag74)
						{
							item3.itemOption = new ItemOption[num38];
							for (int num39 = 0; num39 < item3.itemOption.Length; num39 = num4 + 1)
							{
								ItemOption itemOption2 = this.readItemOption(msg);
								bool flag75 = itemOption2 != null;
								if (flag75)
								{
									item3.itemOption[num39] = itemOption2;
									item3.compare = GameCanvas.panel.getCompare(item3);
								}
								num4 = num39;
							}
						}
						bool flag76 = GameCanvas.panel2 != null;
						if (flag76)
						{
							GameCanvas.panel2.vFriendGD.addElement(item3);
						}
						else
						{
							GameCanvas.panel.vFriendGD.addElement(item3);
						}
						num4 = num37;
					}
					bool flag77 = GameCanvas.panel2 != null;
					if (flag77)
					{
						GameCanvas.panel2.setTabGiaoDich(false);
						GameCanvas.panel2.friendMoneyGD = friendMoneyGD;
					}
					else
					{
						GameCanvas.panel.friendMoneyGD = friendMoneyGD;
						bool flag78 = GameCanvas.panel.currentTabIndex == 2;
						if (flag78)
						{
							GameCanvas.panel.setTabGiaoDich(false);
						}
					}
				}
				bool flag79 = b11 == 7;
				if (flag79)
				{
					InfoDlg.hide();
					bool isShow = GameCanvas.panel.isShow;
					if (isShow)
					{
						GameCanvas.panel.hide();
					}
				}
				break;
			}
			case -85:
			{
				Res.outz("CAP CHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
				sbyte b14 = msg.reader().readByte();
				bool flag80 = b14 == 0;
				if (flag80)
				{
					int num40 = (int)msg.reader().readUnsignedShort();
					Res.outz("lent =" + num40.ToString());
					sbyte[] imageData = new sbyte[num40];
					msg.reader().read(ref imageData, 0, num40);
					GameScr.imgCapcha = Image.createImage(imageData, 0, num40);
					GameScr.gI().keyInput = "-----";
					GameScr.gI().strCapcha = msg.reader().readUTF();
					GameScr.gI().keyCapcha = new int[GameScr.gI().strCapcha.Length];
					GameScr.gI().mobCapcha = new Mob();
					GameScr.gI().right = null;
				}
				bool flag81 = b14 == 1;
				if (flag81)
				{
					MobCapcha.isAttack = true;
				}
				bool flag82 = b14 == 2;
				if (flag82)
				{
					MobCapcha.explode = true;
					GameScr.gI().right = GameScr.gI().cmdFocus;
				}
				break;
			}
			case -84:
			{
				int index = (int)msg.reader().readUnsignedByte();
				Mob mob4 = null;
				try
				{
					mob4 = (Mob)GameScr.vMob.elementAt(index);
				}
				catch (Exception)
				{
				}
				bool flag83 = mob4 != null;
				if (flag83)
				{
					mob4.maxHp = msg.reader().readLong();
				}
				break;
			}
			case -83:
			{
				sbyte b15 = msg.reader().readByte();
				bool flag84 = b15 == 0;
				if (flag84)
				{
					int num41 = (int)msg.reader().readShort();
					int bgRID = (int)msg.reader().readShort();
					int num42 = (int)msg.reader().readUnsignedByte();
					int num43 = msg.reader().readInt();
					string text = msg.reader().readUTF();
					int xR = (int)msg.reader().readShort();
					int yR = (int)msg.reader().readShort();
					sbyte b16 = msg.reader().readByte();
					bool flag85 = b16 == 1;
					if (flag85)
					{
						GameScr.gI().isRongNamek = true;
					}
					else
					{
						GameScr.gI().isRongNamek = false;
					}
					GameScr.gI().xR = xR;
					GameScr.gI().yR = yR;
					Res.outz(string.Concat(new string[]
					{
						"xR= ",
						xR.ToString(),
						" yR= ",
						yR.ToString(),
						" +++++++++++++++++++++++++++++++++++++++"
					}));
					bool flag86 = global::Char.myCharz().charID == num43;
					if (flag86)
					{
						GameCanvas.panel.hideNow();
						GameScr.gI().activeRongThanEff(true);
					}
					else
					{
						bool flag87 = TileMap.mapID == num41 && TileMap.zoneID == num42;
						if (flag87)
						{
							GameScr.gI().activeRongThanEff(false);
						}
						else
						{
							bool flag88 = mGraphics.zoomLevel > 1;
							if (flag88)
							{
								GameScr.gI().doiMauTroi();
							}
						}
					}
					GameScr.gI().mapRID = num41;
					GameScr.gI().bgRID = bgRID;
					GameScr.gI().zoneRID = num42;
				}
				bool flag89 = b15 == 1;
				if (flag89)
				{
					Res.outz("map RID = " + GameScr.gI().mapRID.ToString() + " zone RID= " + GameScr.gI().zoneRID.ToString());
					Res.outz("map ID = " + TileMap.mapID.ToString() + " zone ID= " + TileMap.zoneID.ToString());
					bool flag90 = TileMap.mapID == GameScr.gI().mapRID && TileMap.zoneID == GameScr.gI().zoneRID;
					if (flag90)
					{
						GameScr.gI().hideRongThanEff();
					}
					else
					{
						GameScr.gI().isRongThanXuatHien = false;
						bool isRongNamek = GameScr.gI().isRongNamek;
						if (isRongNamek)
						{
							GameScr.gI().isRongNamek = false;
						}
					}
				}
				bool flag91 = b15 != 2;
				if (flag91)
				{
				}
				break;
			}
			case -82:
			{
				sbyte b17 = msg.reader().readByte();
				TileMap.tileIndex = new int[(int)b17][][];
				TileMap.tileType = new int[(int)b17][];
				int num4;
				for (int num44 = 0; num44 < (int)b17; num44 = num4 + 1)
				{
					sbyte b18 = msg.reader().readByte();
					TileMap.tileType[num44] = new int[(int)b18];
					TileMap.tileIndex[num44] = new int[(int)b18][];
					for (int num45 = 0; num45 < (int)b18; num45 = num4 + 1)
					{
						TileMap.tileType[num44][num45] = msg.reader().readInt();
						sbyte b19 = msg.reader().readByte();
						TileMap.tileIndex[num44][num45] = new int[(int)b19];
						for (int num46 = 0; num46 < (int)b19; num46 = num4 + 1)
						{
							TileMap.tileIndex[num44][num45][num46] = (int)msg.reader().readByte();
							num4 = num46;
						}
						num4 = num45;
					}
					num4 = num44;
				}
				break;
			}
			case -81:
			{
				sbyte b20 = msg.reader().readByte();
				bool flag92 = b20 == 0;
				if (flag92)
				{
					string src = msg.reader().readUTF();
					string src2 = msg.reader().readUTF();
					GameCanvas.panel.setTypeCombine();
					GameCanvas.panel.combineInfo = mFont.tahoma_7b_blue.splitFontArray(src, Panel.WIDTH_PANEL);
					GameCanvas.panel.combineTopInfo = mFont.tahoma_7.splitFontArray(src2, Panel.WIDTH_PANEL);
					GameCanvas.panel.show();
				}
				bool flag93 = b20 == 1;
				int num4;
				if (flag93)
				{
					GameCanvas.panel.vItemCombine.removeAllElements();
					sbyte b21 = msg.reader().readByte();
					for (int num47 = 0; num47 < (int)b21; num47 = num4 + 1)
					{
						sbyte b22 = msg.reader().readByte();
						for (int num48 = 0; num48 < global::Char.myCharz().arrItemBag.Length; num48 = num4 + 1)
						{
							Item item4 = global::Char.myCharz().arrItemBag[num48];
							bool flag94 = item4 != null && item4.indexUI == (int)b22;
							if (flag94)
							{
								item4.isSelect = true;
								GameCanvas.panel.vItemCombine.addElement(item4);
							}
							num4 = num48;
						}
						num4 = num47;
					}
					bool isShow2 = GameCanvas.panel.isShow;
					if (isShow2)
					{
						GameCanvas.panel.setTabCombine();
					}
				}
				bool flag95 = b20 == 2;
				if (flag95)
				{
					GameCanvas.panel.combineSuccess = 0;
					GameCanvas.panel.setCombineEff(0);
				}
				bool flag96 = b20 == 3;
				if (flag96)
				{
					GameCanvas.panel.combineSuccess = 1;
					GameCanvas.panel.setCombineEff(0);
				}
				bool flag97 = b20 == 4;
				if (flag97)
				{
					short iconID = msg.reader().readShort();
					GameCanvas.panel.iconID3 = iconID;
					GameCanvas.panel.combineSuccess = 0;
					GameCanvas.panel.setCombineEff(1);
				}
				bool flag98 = b20 == 5;
				if (flag98)
				{
					short iconID2 = msg.reader().readShort();
					GameCanvas.panel.iconID3 = iconID2;
					GameCanvas.panel.combineSuccess = 0;
					GameCanvas.panel.setCombineEff(2);
				}
				bool flag99 = b20 == 6;
				if (flag99)
				{
					short iconID3 = msg.reader().readShort();
					short iconID4 = msg.reader().readShort();
					GameCanvas.panel.combineSuccess = 0;
					GameCanvas.panel.setCombineEff(3);
					GameCanvas.panel.iconID1 = iconID3;
					GameCanvas.panel.iconID3 = iconID4;
				}
				bool flag100 = b20 == 7;
				if (flag100)
				{
					short iconID5 = msg.reader().readShort();
					GameCanvas.panel.iconID3 = iconID5;
					GameCanvas.panel.combineSuccess = 0;
					GameCanvas.panel.setCombineEff(4);
				}
				bool flag101 = b20 == 8;
				if (flag101)
				{
					GameCanvas.panel.iconID3 = -1;
					GameCanvas.panel.combineSuccess = 1;
					GameCanvas.panel.setCombineEff(4);
				}
				short num49 = 21;
				try
				{
					num49 = msg.reader().readShort();
					int num50 = (int)msg.reader().readShort();
					int num51 = (int)msg.reader().readShort();
					GameCanvas.panel.xS = num50 - GameScr.cmx;
					GameCanvas.panel.yS = num51 - GameScr.cmy;
				}
				catch (Exception)
				{
				}
				for (int num52 = 0; num52 < GameScr.vNpc.size(); num52 = num4 + 1)
				{
					Npc npc = (Npc)GameScr.vNpc.elementAt(num52);
					bool flag102 = npc.template.npcTemplateId == (int)num49;
					if (flag102)
					{
						GameCanvas.panel.xS = npc.cx - GameScr.cmx;
						GameCanvas.panel.yS = npc.cy - GameScr.cmy;
						GameCanvas.panel.idNPC = (int)num49;
						break;
					}
					num4 = num52;
				}
				break;
			}
			case -80:
			{
				sbyte b23 = msg.reader().readByte();
				InfoDlg.hide();
				bool flag103 = b23 == 0;
				if (flag103)
				{
					GameCanvas.panel.vFriend.removeAllElements();
					int num53 = (int)msg.reader().readUnsignedByte();
					int num4;
					for (int num54 = 0; num54 < num53; num54 = num4 + 1)
					{
						global::Char char5 = new global::Char();
						char5.charID = msg.reader().readInt();
						char5.head = (int)msg.reader().readShort();
						char5.headICON = (int)msg.reader().readShort();
						char5.body = (int)msg.reader().readShort();
						char5.leg = (int)msg.reader().readShort();
						char5.bag = (int)msg.reader().readShort();
						char5.cName = msg.reader().readUTF();
						bool isOnline2 = msg.reader().readBoolean();
						InfoItem infoItem2 = new InfoItem(mResources.power + ": " + msg.reader().readUTF());
						infoItem2.charInfo = char5;
						infoItem2.isOnline = isOnline2;
						GameCanvas.panel.vFriend.addElement(infoItem2);
						num4 = num54;
					}
					GameCanvas.panel.setTypeFriend();
					GameCanvas.panel.show();
				}
				bool flag104 = b23 == 3;
				if (flag104)
				{
					MyVector vFriend = GameCanvas.panel.vFriend;
					int num55 = msg.reader().readInt();
					Res.outz("online offline id=" + num55.ToString());
					int num4;
					for (int num56 = 0; num56 < vFriend.size(); num56 = num4 + 1)
					{
						InfoItem infoItem3 = (InfoItem)vFriend.elementAt(num56);
						bool flag105 = infoItem3.charInfo != null && infoItem3.charInfo.charID == num55;
						if (flag105)
						{
							Res.outz("online= " + infoItem3.isOnline.ToString());
							infoItem3.isOnline = msg.reader().readBoolean();
							break;
						}
						num4 = num56;
					}
				}
				bool flag106 = b23 != 2;
				if (!flag106)
				{
					MyVector vFriend2 = GameCanvas.panel.vFriend;
					int num57 = msg.reader().readInt();
					int num4;
					for (int num58 = 0; num58 < vFriend2.size(); num58 = num4 + 1)
					{
						InfoItem infoItem4 = (InfoItem)vFriend2.elementAt(num58);
						bool flag107 = infoItem4.charInfo != null && infoItem4.charInfo.charID == num57;
						if (flag107)
						{
							vFriend2.removeElement(infoItem4);
							break;
						}
						num4 = num58;
					}
					bool isShow3 = GameCanvas.panel.isShow;
					if (isShow3)
					{
						GameCanvas.panel.setTabFriend();
					}
				}
				break;
			}
			case -79:
			{
				InfoDlg.hide();
				int num59 = msg.reader().readInt();
				global::Char charMenu = GameCanvas.panel.charMenu;
				bool flag108 = charMenu == null;
				if (flag108)
				{
					return;
				}
				charMenu.cPower = msg.reader().readLong();
				charMenu.currStrLevel = msg.reader().readUTF();
				break;
			}
			case -77:
			{
				short num60 = msg.reader().readShort();
				SmallImage.newSmallVersion = new sbyte[(int)num60];
				SmallImage.maxSmall = num60;
				SmallImage.imgNew = new Small[(int)num60];
				int num4;
				for (int num61 = 0; num61 < (int)num60; num61 = num4 + 1)
				{
					SmallImage.newSmallVersion[num61] = msg.reader().readByte();
					num4 = num61;
				}
				break;
			}
			case -76:
			{
				sbyte b24 = msg.reader().readByte();
				bool flag109 = b24 == 0;
				if (flag109)
				{
					sbyte b25 = msg.reader().readByte();
					bool flag110 = b25 <= 0;
					if (flag110)
					{
						return;
					}
					global::Char.myCharz().arrArchive = new Archivement[(int)b25];
					int num4;
					for (int num62 = 0; num62 < (int)b25; num62 = num4 + 1)
					{
						global::Char.myCharz().arrArchive[num62] = new Archivement();
						global::Char.myCharz().arrArchive[num62].info1 = (num62 + 1).ToString() + ". " + msg.reader().readUTF();
						global::Char.myCharz().arrArchive[num62].info2 = msg.reader().readUTF();
						global::Char.myCharz().arrArchive[num62].money = (int)msg.reader().readShort();
						global::Char.myCharz().arrArchive[num62].isFinish = msg.reader().readBoolean();
						global::Char.myCharz().arrArchive[num62].isRecieve = msg.reader().readBoolean();
						num4 = num62;
					}
					GameCanvas.panel.setTypeArchivement();
					GameCanvas.panel.show();
				}
				else
				{
					bool flag111 = b24 == 1;
					if (flag111)
					{
						int num63 = (int)msg.reader().readUnsignedByte();
						bool flag112 = global::Char.myCharz().arrArchive[num63] != null;
						if (flag112)
						{
							global::Char.myCharz().arrArchive[num63].isRecieve = true;
						}
					}
				}
				break;
			}
			case -74:
			{
				Res.outz("1>>GET_IMAGE_SOURCE = " + msg.reader().available().ToString());
				bool stopDownload = ServerListScreen.stopDownload;
				if (stopDownload)
				{
					return;
				}
				bool flag113 = !GameCanvas.isGetResourceFromServer();
				if (flag113)
				{
					Service.gI().getResource(3, null);
					SmallImage.loadBigRMS();
					SplashScr.imgLogo = null;
					bool flag114 = Rms.loadRMSString("acc") != null || Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString()) != null;
					if (flag114)
					{
						LoginScr.isContinueToLogin = true;
					}
					GameCanvas.loginScr = new LoginScr();
					GameCanvas.loginScr.switchToMe();
					return;
				}
				bool flag115 = true;
				sbyte b26 = msg.reader().readByte();
				Res.outz("2>GET_IMAGE_SOURCE = " + b26.ToString());
				bool flag116 = b26 == 0;
				if (flag116)
				{
					int num64 = msg.reader().readInt();
					string text2 = Rms.loadRMSString("ResVersion");
					int num65 = (text2 == null || !(text2 != string.Empty)) ? -1 : int.Parse(text2);
					Res.outz(string.Concat(new string[]
					{
						">>>GET_IMAGE_SOURCE: version>> ",
						text2,
						" <> ",
						num65.ToString(),
						"!=",
						num64.ToString()
					}));
					bool flag117 = num65 == -1 || num65 != num64;
					if (flag117)
					{
						GameCanvas.serverScreen.show2();
					}
					else
					{
						SmallImage.loadBigRMS();
						SplashScr.imgLogo = null;
						ServerListScreen.loadScreen = true;
						string str2 = ">>>vo ne: ";
						mScreen currentScreen = GameCanvas.currentScreen;
						Res.outz(str2 + ((currentScreen != null) ? currentScreen.ToString() : null));
						bool flag118 = GameCanvas.currentScreen != GameCanvas.loginScr;
						if (flag118)
						{
							bool flag119 = GameCanvas.serverScreen == null;
							if (flag119)
							{
								GameCanvas.serverScreen = new ServerListScreen();
							}
							GameCanvas.serverScreen.switchToMe();
						}
						else
						{
							bool flag120 = GameCanvas.loginScr == null;
							if (flag120)
							{
								GameCanvas.loginScr = new LoginScr();
							}
							GameCanvas.loginScr.doLogin();
						}
					}
				}
				bool flag121 = b26 == 1;
				if (flag121)
				{
					ServerListScreen.strWait = mResources.downloading_data;
					short nBig = msg.reader().readShort();
					ServerListScreen.nBig = (int)nBig;
					Service.gI().getResource(2, null);
				}
				bool flag122 = b26 == 2;
				if (flag122)
				{
					try
					{
						Controller.isLoadingData = true;
						GameCanvas.endDlg();
						int num4 = ServerListScreen.demPercent;
						ServerListScreen.demPercent = num4 + 1;
						ServerListScreen.percent = ServerListScreen.demPercent * 100 / ServerListScreen.nBig;
						string original = msg.reader().readUTF();
						string[] array2 = Res.split(original, "/", 0);
						string filename = "x" + mGraphics.zoomLevel.ToString() + array2[array2.Length - 1];
						int num66 = msg.reader().readInt();
						sbyte[] data2 = new sbyte[num66];
						msg.reader().read(ref data2, 0, num66);
						Rms.saveRMS(filename, data2);
					}
					catch (Exception)
					{
						GameCanvas.startOK(mResources.pls_restart_game_error, 8885, null);
					}
				}
				bool flag123 = b26 == 3 && flag115;
				if (flag123)
				{
					Controller.isLoadingData = false;
					int num67 = msg.reader().readInt();
					Res.outz(">>>GET_IMAGE_SOURCE: lastVersion>> " + num67.ToString());
					Rms.saveRMSString("ResVersion", num67.ToString() + string.Empty);
					Service.gI().getResource(3, null);
					GameCanvas.endDlg();
					SplashScr.imgLogo = null;
					SmallImage.loadBigRMS();
					mSystem.gcc();
					ServerListScreen.bigOk = true;
					ServerListScreen.loadScreen = true;
					GameScr.gI().loadGameScr();
					GameScr.isLoadAllData = false;
					Service.gI().updateData();
					bool flag124 = GameCanvas.currentScreen != GameCanvas.loginScr;
					if (flag124)
					{
						GameCanvas.serverScreen.switchToMe();
					}
				}
				break;
			}
			case -70:
			{
				Res.outz("BIG MESSAGE .......................................");
				GameCanvas.endDlg();
				int avatar = (int)msg.reader().readShort();
				string chat = msg.reader().readUTF();
				ChatPopup.addBigMessage(chat, 100000, new Npc(-1, 0, 0, 0, 0, 0)
				{
					avatar = avatar
				});
				sbyte b27 = msg.reader().readByte();
				bool flag125 = b27 == 0;
				if (flag125)
				{
					ChatPopup.serverChatPopUp.cmdMsg1 = new Command(mResources.CLOSE, ChatPopup.serverChatPopUp, 1001, null);
					ChatPopup.serverChatPopUp.cmdMsg1.x = GameCanvas.w / 2 - 35;
					ChatPopup.serverChatPopUp.cmdMsg1.y = GameCanvas.h - 35;
				}
				bool flag126 = b27 == 1;
				if (flag126)
				{
					string p = msg.reader().readUTF();
					string caption = msg.reader().readUTF();
					ChatPopup.serverChatPopUp.cmdMsg1 = new Command(caption, ChatPopup.serverChatPopUp, 1000, p);
					ChatPopup.serverChatPopUp.cmdMsg1.x = GameCanvas.w / 2 - 75;
					ChatPopup.serverChatPopUp.cmdMsg1.y = GameCanvas.h - 35;
					ChatPopup.serverChatPopUp.cmdMsg2 = new Command(mResources.CLOSE, ChatPopup.serverChatPopUp, 1001, null);
					ChatPopup.serverChatPopUp.cmdMsg2.x = GameCanvas.w / 2 + 11;
					ChatPopup.serverChatPopUp.cmdMsg2.y = GameCanvas.h - 35;
				}
				break;
			}
			case -69:
				global::Char.myCharz().cMaxStamina = msg.reader().readShort();
				break;
			case -68:
				global::Char.myCharz().cStamina = (int)msg.reader().readShort();
				break;
			case -67:
			{
				this.demCount += 1f;
				int num68 = msg.reader().readInt();
				Res.outz("RECIEVE  hinh small: " + num68.ToString());
				sbyte[] array3 = null;
				try
				{
					array3 = NinjaUtil.readByteArray(msg);
					Res.outz(">SIZE CHECK= " + array3.Length.ToString());
					bool flag127 = num68 == 3896;
					if (flag127)
					{
					}
					SmallImage.imgNew[num68].img = this.createImage(array3);
				}
				catch (Exception)
				{
					array3 = null;
					SmallImage.imgNew[num68].img = Image.createRGBImage(new int[1], 1, 1, true);
				}
				bool flag128 = array3 != null && mGraphics.zoomLevel > 1;
				if (flag128)
				{
					Rms.saveRMS(mGraphics.zoomLevel.ToString() + "Small" + num68.ToString(), array3);
				}
				break;
			}
			case -66:
			{
				short id = msg.reader().readShort();
				sbyte[] data3 = NinjaUtil.readByteArray(msg);
				EffectData effDataById = Effect.getEffDataById((int)id);
				sbyte b28 = msg.reader().readSByte();
				bool flag129 = b28 == 0;
				if (flag129)
				{
					effDataById.readData(data3);
				}
				else
				{
					effDataById.readDataNewBoss(data3, b28);
				}
				sbyte[] array4 = NinjaUtil.readByteArray(msg);
				effDataById.img = Image.createImage(array4, 0, array4.Length);
				break;
			}
			case -65:
			{
				InfoDlg.hide();
				int num69 = msg.reader().readInt();
				sbyte b29 = msg.reader().readByte();
				bool flag130 = b29 == 0;
				if (!flag130)
				{
					bool flag131 = global::Char.myCharz().charID == num69;
					if (flag131)
					{
						Controller.isStopReadMessage = true;
						GameScr.lockTick = 500;
						GameScr.gI().center = null;
						bool flag132 = b29 == 0 || b29 == 1 || b29 == 3;
						if (flag132)
						{
							Teleport p2 = new Teleport(global::Char.myCharz().cx, global::Char.myCharz().cy, global::Char.myCharz().head, global::Char.myCharz().cdir, 0, true, (b29 != 1) ? ((int)b29) : global::Char.myCharz().cgender);
							Teleport.addTeleport(p2);
						}
						bool flag133 = b29 == 2;
						if (flag133)
						{
							GameScr.lockTick = 50;
							global::Char.myCharz().hide();
						}
					}
					else
					{
						global::Char char6 = GameScr.findCharInMap(num69);
						bool flag134 = (b29 == 0 || b29 == 1 || b29 == 3) && char6 != null;
						if (flag134)
						{
							char6.isUsePlane = true;
							Teleport.addTeleport(new Teleport(char6.cx, char6.cy, char6.head, char6.cdir, 0, false, (b29 != 1) ? ((int)b29) : char6.cgender)
							{
								id = num69
							});
						}
						bool flag135 = b29 == 2;
						if (flag135)
						{
							char6.hide();
						}
					}
				}
				break;
			}
			case -64:
			{
				int num70 = msg.reader().readInt();
				int num71 = (int)msg.reader().readShort();
				@char = null;
				@char = ((num70 != global::Char.myCharz().charID) ? GameScr.findCharInMap(num70) : global::Char.myCharz());
				bool flag136 = @char == null;
				if (flag136)
				{
					return;
				}
				@char.bag = num71;
				int num4;
				for (int num72 = 0; num72 < 54; num72 = num4 + 1)
				{
					@char.removeEffChar(0, 201 + num72);
					num4 = num72;
				}
				bool flag137 = @char.bag >= 201 && @char.bag < 255;
				if (flag137)
				{
					@char.addEffChar(new Effect(@char.bag, @char, 2, -1, 10, 1)
					{
						typeEff = 5
					});
				}
				Res.outz(string.Concat(new string[]
				{
					"cmd:-64 UPDATE BAG PLAER = ",
					(@char != null) ? @char.cName : string.Empty,
					num70.ToString(),
					" BAG ID= ",
					num71.ToString()
				}));
				bool flag138 = num71 == 30 && @char.me;
				if (flag138)
				{
					GameScr.isPickNgocRong = true;
				}
				break;
			}
			case -63:
			{
				Res.outz("GET BAG");
				int id2 = (int)msg.reader().readShort();
				sbyte b30 = msg.reader().readByte();
				ClanImage clanImage = new ClanImage();
				clanImage.ID = id2;
				bool flag139 = b30 > 0;
				if (flag139)
				{
					clanImage.idImage = new short[(int)b30];
					int num4;
					for (int num73 = 0; num73 < (int)b30; num73 = num4 + 1)
					{
						clanImage.idImage[num73] = msg.reader().readShort();
						Res.outz("ID=  " + id2.ToString() + " frame= " + clanImage.idImage[num73].ToString());
						num4 = num73;
					}
					ClanImage.idImages.put(id2.ToString() + string.Empty, clanImage);
				}
				break;
			}
			case -62:
			{
				int num74 = (int)msg.reader().readUnsignedByte();
				sbyte b31 = msg.reader().readByte();
				bool flag140 = b31 <= 0;
				if (!flag140)
				{
					ClanImage clanImage2 = ClanImage.getClanImage((short)num74);
					bool flag141 = clanImage2 == null;
					if (!flag141)
					{
						clanImage2.idImage = new short[(int)b31];
						int num4;
						for (int num75 = 0; num75 < (int)b31; num75 = num4 + 1)
						{
							clanImage2.idImage[num75] = msg.reader().readShort();
							bool flag142 = clanImage2.idImage[num75] > 0;
							if (flag142)
							{
								SmallImage.vKeys.addElement(clanImage2.idImage[num75].ToString() + string.Empty);
							}
							num4 = num75;
						}
					}
				}
				break;
			}
			case -61:
			{
				int num76 = msg.reader().readInt();
				bool flag143 = num76 != global::Char.myCharz().charID;
				if (flag143)
				{
					bool flag144 = GameScr.findCharInMap(num76) != null;
					if (flag144)
					{
						GameScr.findCharInMap(num76).clanID = msg.reader().readInt();
						bool flag145 = GameScr.findCharInMap(num76).clanID == -2;
						if (flag145)
						{
							GameScr.findCharInMap(num76).isCopy = true;
						}
					}
				}
				else
				{
					bool flag146 = global::Char.myCharz().clan != null;
					if (flag146)
					{
						global::Char.myCharz().clan.ID = msg.reader().readInt();
					}
				}
				break;
			}
			case -60:
			{
				GameCanvas.debug("SA7666", 2);
				int num77 = msg.reader().readInt();
				int num78 = -1;
				bool flag147 = num77 != global::Char.myCharz().charID;
				if (flag147)
				{
					global::Char char7 = GameScr.findCharInMap(num77);
					bool flag148 = char7 == null;
					if (flag148)
					{
						return;
					}
					bool flag149 = char7.currentMovePoint != null;
					if (flag149)
					{
						char7.createShadow(char7.cx, char7.cy, 10);
						char7.cx = char7.currentMovePoint.xEnd;
						char7.cy = char7.currentMovePoint.yEnd;
					}
					int num79 = (int)msg.reader().readUnsignedByte();
					bool flag150 = (TileMap.tileTypeAtPixel(char7.cx, char7.cy) & 2) == 2;
					if (flag150)
					{
						char7.setSkillPaint(GameScr.sks[num79], 0);
					}
					else
					{
						char7.setSkillPaint(GameScr.sks[num79], 1);
					}
					sbyte b32 = msg.reader().readByte();
					global::Char[] array5 = new global::Char[(int)b32];
					int num4;
					for (i = 0; i < array5.Length; i = num4 + 1)
					{
						num78 = msg.reader().readInt();
						bool flag151 = num78 == global::Char.myCharz().charID;
						global::Char char8;
						if (flag151)
						{
							char8 = global::Char.myCharz();
							bool flag152 = !GameScr.isChangeZone && GameScr.isAutoPlay && GameScr.canAutoPlay;
							if (flag152)
							{
								Service.gI().requestChangeZone(-1, -1);
								GameScr.isChangeZone = true;
							}
						}
						else
						{
							char8 = GameScr.findCharInMap(num78);
						}
						array5[i] = char8;
						bool flag153 = i == 0;
						if (flag153)
						{
							bool flag154 = char7.cx <= char8.cx;
							if (flag154)
							{
								char7.cdir = 1;
							}
							else
							{
								char7.cdir = -1;
							}
						}
						num4 = i;
					}
					bool flag155 = i > 0;
					if (flag155)
					{
						char7.attChars = new global::Char[i];
						for (i = 0; i < char7.attChars.Length; i = num4 + 1)
						{
							char7.attChars[i] = array5[i];
							num4 = i;
						}
						char7.mobFocus = null;
						char7.charFocus = char7.attChars[0];
					}
				}
				else
				{
					sbyte b33 = msg.reader().readByte();
					sbyte b34 = msg.reader().readByte();
					num78 = msg.reader().readInt();
				}
				try
				{
					sbyte b35 = msg.reader().readByte();
					Res.outz("isRead continue = " + b35.ToString());
					bool flag156 = b35 != 1;
					if (!flag156)
					{
						sbyte b36 = msg.reader().readByte();
						Res.outz("type skill = " + b36.ToString());
						bool flag157 = num78 == global::Char.myCharz().charID;
						if (flag157)
						{
							@char = global::Char.myCharz();
							long num80 = msg.reader().readLong();
							Res.outz("dame hit = " + num80.ToString());
							@char.isDie = msg.reader().readBoolean();
							bool isDie = @char.isDie;
							if (isDie)
							{
								global::Char.isLockKey = true;
							}
							Res.outz("isDie=" + @char.isDie.ToString() + "---------------------------------------");
							int num81 = 0;
							bool isCrit = @char.isCrit = msg.reader().readBoolean();
							@char.isMob = false;
							num80 = (@char.damHP = num80 + (long)num81);
							bool flag158 = b36 == 0;
							if (flag158)
							{
								@char.doInjure(num80, 0L, isCrit, false);
							}
						}
						else
						{
							@char = GameScr.findCharInMap(num78);
							bool flag159 = @char == null;
							if (flag159)
							{
								return;
							}
							long num82 = msg.reader().readLong();
							Res.outz("dame hit= " + num82.ToString());
							@char.isDie = msg.reader().readBoolean();
							Res.outz("isDie=" + @char.isDie.ToString() + "---------------------------------------");
							int num83 = 0;
							bool isCrit2 = @char.isCrit = msg.reader().readBoolean();
							@char.isMob = false;
							num82 = (@char.damHP = num82 + (long)num83);
							bool flag160 = b36 == 0;
							if (flag160)
							{
								@char.doInjure(num82, 0L, isCrit2, false);
							}
						}
					}
				}
				catch (Exception)
				{
				}
				break;
			}
			case -59:
			{
				sbyte typePK = msg.reader().readByte();
				GameScr.gI().player_vs_player(msg.reader().readInt(), msg.reader().readInt(), msg.reader().readUTF(), typePK);
				break;
			}
			case -57:
			{
				string strInvite = msg.reader().readUTF();
				int clanID = msg.reader().readInt();
				int code = msg.reader().readInt();
				GameScr.gI().clanInvite(strInvite, clanID, code);
				break;
			}
			case -53:
			{
				InfoDlg.hide();
				bool flag161 = false;
				int num84 = msg.reader().readInt();
				Res.outz("clanId= " + num84.ToString());
				bool flag162 = num84 == -1;
				if (flag162)
				{
					global::Char.myCharz().clan = null;
					ClanMessage.vMessage.removeAllElements();
					bool flag163 = GameCanvas.panel.member != null;
					if (flag163)
					{
						GameCanvas.panel.member.removeAllElements();
					}
					bool flag164 = GameCanvas.panel.myMember != null;
					if (flag164)
					{
						GameCanvas.panel.myMember.removeAllElements();
					}
					bool flag165 = GameCanvas.currentScreen == GameScr.gI();
					if (flag165)
					{
						GameCanvas.panel.setTabClans();
					}
					return;
				}
				GameCanvas.panel.tabIcon = null;
				bool flag166 = global::Char.myCharz().clan == null;
				if (flag166)
				{
					global::Char.myCharz().clan = new Clan();
				}
				global::Char.myCharz().clan.ID = num84;
				global::Char.myCharz().clan.name = msg.reader().readUTF();
				global::Char.myCharz().clan.slogan = msg.reader().readUTF();
				global::Char.myCharz().clan.imgID = (int)msg.reader().readShort();
				global::Char.myCharz().clan.powerPoint = msg.reader().readUTF();
				global::Char.myCharz().clan.leaderName = msg.reader().readUTF();
				global::Char.myCharz().clan.currMember = (int)msg.reader().readUnsignedByte();
				global::Char.myCharz().clan.maxMember = (int)msg.reader().readUnsignedByte();
				global::Char.myCharz().role = msg.reader().readByte();
				global::Char.myCharz().clan.clanPoint = msg.reader().readInt();
				global::Char.myCharz().clan.level = (int)msg.reader().readByte();
				GameCanvas.panel.myMember = new MyVector();
				int num4;
				for (int num85 = 0; num85 < global::Char.myCharz().clan.currMember; num85 = num4 + 1)
				{
					Member member = new Member();
					member.ID = msg.reader().readInt();
					member.head = msg.reader().readShort();
					member.headICON = msg.reader().readShort();
					member.leg = msg.reader().readShort();
					member.body = msg.reader().readShort();
					member.name = msg.reader().readUTF();
					member.role = msg.reader().readByte();
					member.powerPoint = msg.reader().readUTF();
					member.donate = msg.reader().readInt();
					member.receive_donate = msg.reader().readInt();
					member.clanPoint = msg.reader().readInt();
					member.curClanPoint = msg.reader().readInt();
					member.joinTime = NinjaUtil.getDate(msg.reader().readInt());
					GameCanvas.panel.myMember.addElement(member);
					num4 = num85;
				}
				int num86 = (int)msg.reader().readUnsignedByte();
				for (int num87 = 0; num87 < num86; num87 = num4 + 1)
				{
					this.readClanMsg(msg, -1);
					num4 = num87;
				}
				bool flag167 = GameCanvas.panel.isSearchClan || GameCanvas.panel.isViewMember || GameCanvas.panel.isMessage;
				if (flag167)
				{
					GameCanvas.panel.setTabClans();
				}
				bool flag168 = flag161;
				if (flag168)
				{
					GameCanvas.panel.setTabClans();
				}
				Res.outz("=>>>>>>>>>>>>>>>>>>>>>> -537 MY CLAN INFO");
				break;
			}
			case -52:
			{
				sbyte b37 = msg.reader().readByte();
				bool flag169 = b37 == 0;
				if (flag169)
				{
					Member member2 = new Member();
					member2.ID = msg.reader().readInt();
					member2.head = msg.reader().readShort();
					member2.headICON = msg.reader().readShort();
					member2.leg = msg.reader().readShort();
					member2.body = msg.reader().readShort();
					member2.name = msg.reader().readUTF();
					member2.role = msg.reader().readByte();
					member2.powerPoint = msg.reader().readUTF();
					member2.donate = msg.reader().readInt();
					member2.receive_donate = msg.reader().readInt();
					member2.clanPoint = msg.reader().readInt();
					member2.joinTime = NinjaUtil.getDate(msg.reader().readInt());
					bool flag170 = GameCanvas.panel.myMember == null;
					if (flag170)
					{
						GameCanvas.panel.myMember = new MyVector();
					}
					GameCanvas.panel.myMember.addElement(member2);
					GameCanvas.panel.initTabClans();
				}
				bool flag171 = b37 == 1;
				if (flag171)
				{
					GameCanvas.panel.myMember.removeElementAt((int)msg.reader().readByte());
					Panel panel = GameCanvas.panel;
					Panel panel2 = panel;
					int num4 = panel.currentListLength;
					panel2.currentListLength = num4 - 1;
					GameCanvas.panel.initTabClans();
				}
				bool flag172 = b37 == 2;
				if (flag172)
				{
					Member member3 = new Member();
					member3.ID = msg.reader().readInt();
					member3.head = msg.reader().readShort();
					member3.headICON = msg.reader().readShort();
					member3.leg = msg.reader().readShort();
					member3.body = msg.reader().readShort();
					member3.name = msg.reader().readUTF();
					member3.role = msg.reader().readByte();
					member3.powerPoint = msg.reader().readUTF();
					member3.donate = msg.reader().readInt();
					member3.receive_donate = msg.reader().readInt();
					member3.clanPoint = msg.reader().readInt();
					member3.joinTime = NinjaUtil.getDate(msg.reader().readInt());
					int num4;
					for (int num88 = 0; num88 < GameCanvas.panel.myMember.size(); num88 = num4 + 1)
					{
						Member member4 = (Member)GameCanvas.panel.myMember.elementAt(num88);
						bool flag173 = member4.ID == member3.ID;
						if (flag173)
						{
							bool flag174 = global::Char.myCharz().charID == member3.ID;
							if (flag174)
							{
								global::Char.myCharz().role = member3.role;
							}
							Member o = member3;
							GameCanvas.panel.myMember.removeElement(member4);
							GameCanvas.panel.myMember.insertElementAt(o, num88);
							return;
						}
						num4 = num88;
					}
				}
				Res.outz("=>>>>>>>>>>>>>>>>>>>>>> -52  MY CLAN UPDSTE");
				break;
			}
			case -51:
			{
				InfoDlg.hide();
				this.readClanMsg(msg, 0);
				bool flag175 = GameCanvas.panel.isMessage && GameCanvas.panel.type == 5;
				if (flag175)
				{
					GameCanvas.panel.initTabClans();
				}
				break;
			}
			case -50:
			{
				InfoDlg.hide();
				GameCanvas.panel.member = new MyVector();
				sbyte b38 = msg.reader().readByte();
				int num4;
				for (int num89 = 0; num89 < (int)b38; num89 = num4 + 1)
				{
					Member member5 = new Member();
					member5.ID = msg.reader().readInt();
					member5.head = msg.reader().readShort();
					member5.headICON = msg.reader().readShort();
					member5.leg = msg.reader().readShort();
					member5.body = msg.reader().readShort();
					member5.name = msg.reader().readUTF();
					member5.role = msg.reader().readByte();
					member5.powerPoint = msg.reader().readUTF();
					member5.donate = msg.reader().readInt();
					member5.receive_donate = msg.reader().readInt();
					member5.clanPoint = msg.reader().readInt();
					member5.joinTime = NinjaUtil.getDate(msg.reader().readInt());
					GameCanvas.panel.member.addElement(member5);
					num4 = num89;
				}
				GameCanvas.panel.isViewMember = true;
				GameCanvas.panel.isSearchClan = false;
				GameCanvas.panel.isMessage = false;
				GameCanvas.panel.currentListLength = GameCanvas.panel.member.size() + 2;
				GameCanvas.panel.initTabClans();
				break;
			}
			case -47:
			{
				InfoDlg.hide();
				sbyte b39 = msg.reader().readByte();
				Res.outz("clan = " + b39.ToString());
				bool flag176 = b39 == 0;
				if (flag176)
				{
					GameCanvas.panel.clanReport = mResources.cannot_find_clan;
					GameCanvas.panel.clans = null;
				}
				else
				{
					GameCanvas.panel.clans = new Clan[(int)b39];
					Res.outz("clan search lent= " + GameCanvas.panel.clans.Length.ToString());
					int num4;
					for (int num90 = 0; num90 < GameCanvas.panel.clans.Length; num90 = num4 + 1)
					{
						GameCanvas.panel.clans[num90] = new Clan();
						GameCanvas.panel.clans[num90].ID = msg.reader().readInt();
						GameCanvas.panel.clans[num90].name = msg.reader().readUTF();
						GameCanvas.panel.clans[num90].slogan = msg.reader().readUTF();
						GameCanvas.panel.clans[num90].imgID = (int)msg.reader().readShort();
						GameCanvas.panel.clans[num90].powerPoint = msg.reader().readUTF();
						GameCanvas.panel.clans[num90].leaderName = msg.reader().readUTF();
						GameCanvas.panel.clans[num90].currMember = (int)msg.reader().readUnsignedByte();
						GameCanvas.panel.clans[num90].maxMember = (int)msg.reader().readUnsignedByte();
						GameCanvas.panel.clans[num90].date = msg.reader().readInt();
						num4 = num90;
					}
				}
				GameCanvas.panel.isSearchClan = true;
				GameCanvas.panel.isViewMember = false;
				GameCanvas.panel.isMessage = false;
				bool isSearchClan = GameCanvas.panel.isSearchClan;
				if (isSearchClan)
				{
					GameCanvas.panel.initTabClans();
				}
				break;
			}
			case -46:
			{
				InfoDlg.hide();
				sbyte b40 = msg.reader().readByte();
				bool flag177 = b40 == 1 || b40 == 3;
				if (flag177)
				{
					GameCanvas.endDlg();
					ClanImage.vClanImage.removeAllElements();
					int num91 = (int)msg.reader().readShort();
					int num4;
					for (int num92 = 0; num92 < num91; num92 = num4 + 1)
					{
						ClanImage clanImage3 = new ClanImage();
						clanImage3.ID = (int)msg.reader().readShort();
						clanImage3.name = msg.reader().readUTF();
						clanImage3.xu = msg.reader().readInt();
						clanImage3.luong = msg.reader().readInt();
						bool flag178 = !ClanImage.isExistClanImage(clanImage3.ID);
						if (flag178)
						{
							ClanImage.addClanImage(clanImage3);
						}
						else
						{
							ClanImage.getClanImage((short)clanImage3.ID).name = clanImage3.name;
							ClanImage.getClanImage((short)clanImage3.ID).xu = clanImage3.xu;
							ClanImage.getClanImage((short)clanImage3.ID).luong = clanImage3.luong;
						}
						num4 = num92;
					}
					bool flag179 = global::Char.myCharz().clan != null;
					if (flag179)
					{
						GameCanvas.panel.changeIcon();
					}
				}
				bool flag180 = b40 == 4;
				if (flag180)
				{
					global::Char.myCharz().clan.imgID = (int)msg.reader().readShort();
					global::Char.myCharz().clan.slogan = msg.reader().readUTF();
				}
				break;
			}
			case -45:
			{
				sbyte b41 = msg.reader().readByte();
				int num93 = msg.reader().readInt();
				short num94 = msg.reader().readShort();
				Res.outz(string.Concat(new string[]
				{
					">.SKILL_NOT_FOCUS      skillNotFocusID: ",
					num94.ToString(),
					" skill type= ",
					b41.ToString(),
					"   player use= ",
					num93.ToString()
				}));
				bool flag181 = b41 == 20;
				if (flag181)
				{
					sbyte typeFrame = msg.reader().readByte();
					sbyte dir = msg.reader().readByte();
					short timeGong = msg.reader().readShort();
					bool isFly = msg.reader().readByte() != 0;
					sbyte typePaint = msg.reader().readByte();
					sbyte typeItem = -1;
					try
					{
						typeItem = msg.reader().readByte();
					}
					catch (Exception)
					{
					}
					Res.outz(">.SKILL_NOT_FOCUS  skill typeFrame= " + typeFrame.ToString());
					@char = ((global::Char.myCharz().charID != num93) ? GameScr.findCharInMap(num93) : global::Char.myCharz());
					@char.SetSkillPaint_NEW(num94, isFly, typeFrame, typePaint, dir, timeGong, typeItem);
				}
				bool flag182 = b41 == 21;
				if (flag182)
				{
					Point point = new Point();
					point.x = (int)msg.reader().readShort();
					point.y = (int)msg.reader().readShort();
					short timeDame = msg.reader().readShort();
					short rangeDame = msg.reader().readShort();
					sbyte typePaint2 = 0;
					sbyte typeItem2 = -1;
					Point[] array6 = null;
					@char = ((global::Char.myCharz().charID != num93) ? GameScr.findCharInMap(num93) : global::Char.myCharz());
					try
					{
						typePaint2 = msg.reader().readByte();
						sbyte b42 = msg.reader().readByte();
						bool flag183 = b42 > 0;
						if (flag183)
						{
							array6 = new Point[(int)b42];
							int num4;
							for (int num95 = 0; num95 < array6.Length; num95 = num4 + 1)
							{
								array6[num95] = new Point();
								array6[num95].type = msg.reader().readByte();
								bool flag184 = array6[num95].type == 0;
								if (flag184)
								{
									array6[num95].id = (int)msg.reader().readByte();
								}
								else
								{
									array6[num95].id = msg.reader().readInt();
								}
								num4 = num95;
							}
						}
					}
					catch (Exception)
					{
					}
					try
					{
						typeItem2 = msg.reader().readByte();
					}
					catch (Exception)
					{
					}
					Res.outz(string.Concat(new string[]
					{
						">.SKILL_NOT_FOCUS  skill targetDame= ",
						point.x.ToString(),
						":",
						point.y.ToString(),
						"    c:",
						@char.cx.ToString(),
						":",
						@char.cy.ToString(),
						"   cdir:",
						@char.cdir.ToString()
					}));
					@char.SetSkillPaint_STT(1, num94, point, timeDame, rangeDame, typePaint2, array6, typeItem2);
				}
				bool flag185 = b41 == 0;
				if (flag185)
				{
					Res.outz("id use= " + num93.ToString());
					bool flag186 = global::Char.myCharz().charID != num93;
					if (flag186)
					{
						@char = GameScr.findCharInMap(num93);
						bool flag187 = (TileMap.tileTypeAtPixel(@char.cx, @char.cy) & 2) == 2;
						if (flag187)
						{
							@char.setSkillPaint(GameScr.sks[(int)num94], 0);
						}
						else
						{
							@char.setSkillPaint(GameScr.sks[(int)num94], 1);
							@char.delayFall = 20;
						}
					}
					else
					{
						global::Char.myCharz().saveLoadPreviousSkill();
						Res.outz("LOAD LAST SKILL");
					}
					sbyte b43 = msg.reader().readByte();
					Res.outz("npc size= " + b43.ToString());
					int num4;
					for (int num96 = 0; num96 < (int)b43; num96 = num4 + 1)
					{
						sbyte index2 = msg.reader().readByte();
						sbyte seconds = msg.reader().readByte();
						Res.outz("index= " + index2.ToString());
						bool flag188 = num94 >= 42 && num94 <= 48;
						if (flag188)
						{
							((Mob)GameScr.vMob.elementAt((int)index2)).isFreez = true;
							((Mob)GameScr.vMob.elementAt((int)index2)).seconds = (int)seconds;
							((Mob)GameScr.vMob.elementAt((int)index2)).last = (((Mob)GameScr.vMob.elementAt((int)index2)).cur = mSystem.currentTimeMillis());
						}
						num4 = num96;
					}
					sbyte b44 = msg.reader().readByte();
					for (int num97 = 0; num97 < (int)b44; num97 = num4 + 1)
					{
						int num98 = msg.reader().readInt();
						sbyte b45 = msg.reader().readByte();
						Res.outz("player ID= " + num98.ToString() + " my ID= " + global::Char.myCharz().charID.ToString());
						bool flag189 = num94 < 42 || num94 > 48;
						if (!flag189)
						{
							bool flag190 = num98 == global::Char.myCharz().charID;
							if (flag190)
							{
								bool flag191 = !global::Char.myCharz().isFlyAndCharge && !global::Char.myCharz().isStandAndCharge;
								if (flag191)
								{
									GameScr.gI().isFreez = true;
									global::Char.myCharz().isFreez = true;
									global::Char.myCharz().freezSeconds = (int)b45;
									global::Char.myCharz().lastFreez = (global::Char.myCharz().currFreez = mSystem.currentTimeMillis());
									global::Char.myCharz().isLockMove = true;
								}
							}
							else
							{
								@char = GameScr.findCharInMap(num98);
								bool flag192 = @char != null && !@char.isFlyAndCharge && !@char.isStandAndCharge;
								if (flag192)
								{
									@char.isFreez = true;
									@char.seconds = (int)b45;
									@char.freezSeconds = (int)b45;
									@char.lastFreez = (GameScr.findCharInMap(num98).currFreez = mSystem.currentTimeMillis());
								}
							}
						}
						num4 = num97;
					}
				}
				bool flag193 = b41 == 1 && num93 != global::Char.myCharz().charID;
				if (flag193)
				{
					try
					{
						GameScr.findCharInMap(num93).isCharge = true;
					}
					catch (Exception)
					{
					}
				}
				bool flag194 = b41 == 3;
				if (flag194)
				{
					bool flag195 = num93 == global::Char.myCharz().charID;
					if (flag195)
					{
						global::Char.myCharz().isCharge = false;
						SoundMn.gI().taitaoPause();
						global::Char.myCharz().saveLoadPreviousSkill();
					}
					else
					{
						GameScr.findCharInMap(num93).isCharge = false;
					}
				}
				bool flag196 = b41 == 4;
				if (flag196)
				{
					bool flag197 = num93 == global::Char.myCharz().charID;
					if (flag197)
					{
						global::Char.myCharz().seconds = (int)(msg.reader().readShort() - 1000);
						global::Char.myCharz().last = mSystem.currentTimeMillis();
						Res.outz("second= " + global::Char.myCharz().seconds.ToString() + " last= " + global::Char.myCharz().last.ToString());
					}
					else
					{
						bool flag198 = GameScr.findCharInMap(num93) != null;
						if (flag198)
						{
							global::Char char9 = GameScr.findCharInMap(num93);
							int cgender = char9.cgender;
							int num99 = cgender;
							if (num99 != 0)
							{
								if (num99 != 1)
								{
									bool flag199 = TileMap.mapID == 170;
									if (flag199)
									{
										bool isGround = true;
										bool flag200 = num94 >= 70 && num94 <= 76;
										if (flag200)
										{
											isGround = false;
										}
										bool flag201 = num94 >= 77 && num94 <= 83;
										if (flag201)
										{
											isGround = true;
										}
										@char.useChargeSkill(isGround);
									}
								}
								else
								{
									bool flag202 = TileMap.mapID != 170;
									if (flag202)
									{
										@char.useChargeSkill(true);
									}
									else
									{
										bool isGround2 = true;
										bool flag203 = num94 >= 70 && num94 <= 76;
										if (flag203)
										{
											isGround2 = false;
										}
										bool flag204 = num94 >= 77 && num94 <= 83;
										if (flag204)
										{
											isGround2 = true;
										}
										@char.useChargeSkill(isGround2);
									}
								}
							}
							else
							{
								bool flag205 = TileMap.mapID != 170;
								if (flag205)
								{
									@char.useChargeSkill(false);
								}
								else
								{
									bool flag206 = num94 >= 77 && num94 <= 83;
									if (flag206)
									{
										@char.useChargeSkill(true);
									}
									bool flag207 = num94 >= 70 && num94 <= 76;
									if (flag207)
									{
										@char.useChargeSkill(false);
									}
								}
							}
							@char.skillTemplateId = (int)num94;
							bool flag208 = num94 >= 70 && num94 <= 76;
							if (flag208)
							{
								@char.isUseSkillAfterCharge = true;
							}
							@char.seconds = (int)msg.reader().readShort();
							@char.last = mSystem.currentTimeMillis();
						}
					}
				}
				bool flag209 = b41 == 5;
				if (flag209)
				{
					bool flag210 = num93 == global::Char.myCharz().charID;
					if (flag210)
					{
						global::Char.myCharz().stopUseChargeSkill();
					}
					else
					{
						bool flag211 = GameScr.findCharInMap(num93) != null;
						if (flag211)
						{
							GameScr.findCharInMap(num93).stopUseChargeSkill();
						}
					}
				}
				bool flag212 = b41 == 6;
				if (flag212)
				{
					bool flag213 = num93 == global::Char.myCharz().charID;
					if (flag213)
					{
						global::Char.myCharz().setAutoSkillPaint(GameScr.sks[(int)num94], 0);
					}
					else
					{
						bool flag214 = GameScr.findCharInMap(num93) != null;
						if (flag214)
						{
							GameScr.findCharInMap(num93).setAutoSkillPaint(GameScr.sks[(int)num94], 0);
							SoundMn.gI().gong();
						}
					}
				}
				bool flag215 = b41 == 7;
				if (flag215)
				{
					bool flag216 = num93 == global::Char.myCharz().charID;
					if (flag216)
					{
						global::Char.myCharz().seconds = (int)msg.reader().readShort();
						Res.outz("second = " + global::Char.myCharz().seconds.ToString());
						global::Char.myCharz().last = mSystem.currentTimeMillis();
					}
					else
					{
						bool flag217 = GameScr.findCharInMap(num93) != null;
						if (flag217)
						{
							GameScr.findCharInMap(num93).useChargeSkill(true);
							GameScr.findCharInMap(num93).seconds = (int)msg.reader().readShort();
							GameScr.findCharInMap(num93).last = mSystem.currentTimeMillis();
							SoundMn.gI().gong();
						}
					}
				}
				bool flag218 = b41 == 8 && num93 != global::Char.myCharz().charID && GameScr.findCharInMap(num93) != null;
				if (flag218)
				{
					GameScr.findCharInMap(num93).setAutoSkillPaint(GameScr.sks[(int)num94], 0);
				}
				break;
			}
			case -44:
			{
				bool flag219 = false;
				bool flag220 = GameCanvas.w > 2 * Panel.WIDTH_PANEL;
				if (flag220)
				{
					flag219 = true;
				}
				sbyte b46 = msg.reader().readByte();
				int num100 = (int)msg.reader().readUnsignedByte();
				global::Char.myCharz().arrItemShop = new Item[num100][];
				GameCanvas.panel.shopTabName = new string[num100 + ((!flag219) ? 1 : 0)][];
				int num4;
				for (int num101 = 0; num101 < GameCanvas.panel.shopTabName.Length; num101 = num4 + 1)
				{
					GameCanvas.panel.shopTabName[num101] = new string[2];
					num4 = num101;
				}
				bool flag221 = b46 == 2;
				if (flag221)
				{
					GameCanvas.panel.maxPageShop = new int[num100];
					GameCanvas.panel.currPageShop = new int[num100];
				}
				bool flag222 = !flag219;
				if (flag222)
				{
					GameCanvas.panel.shopTabName[num100] = mResources.inventory;
				}
				for (int num102 = 0; num102 < num100; num102 = num4 + 1)
				{
					string[] array7 = Res.split(msg.reader().readUTF(), "\n", 0);
					bool flag223 = b46 == 2;
					if (flag223)
					{
						GameCanvas.panel.maxPageShop[num102] = (int)msg.reader().readUnsignedByte();
					}
					bool flag224 = array7.Length == 2;
					if (flag224)
					{
						GameCanvas.panel.shopTabName[num102] = array7;
					}
					bool flag225 = array7.Length == 1;
					if (flag225)
					{
						GameCanvas.panel.shopTabName[num102][0] = array7[0];
						GameCanvas.panel.shopTabName[num102][1] = string.Empty;
					}
					int num103 = (int)msg.reader().readUnsignedByte();
					global::Char.myCharz().arrItemShop[num102] = new Item[num103];
					Panel.strWantToBuy = mResources.say_wat_do_u_want_to_buy;
					bool flag226 = b46 == 1;
					if (flag226)
					{
						Panel.strWantToBuy = mResources.say_wat_do_u_want_to_buy2;
					}
					for (int num104 = 0; num104 < num103; num104 = num4 + 1)
					{
						short num105 = msg.reader().readShort();
						bool flag227 = num105 == -1;
						if (!flag227)
						{
							global::Char.myCharz().arrItemShop[num102][num104] = new Item();
							global::Char.myCharz().arrItemShop[num102][num104].template = ItemTemplates.get(num105);
							bool flag228 = b46 == 8;
							if (flag228)
							{
								global::Char.myCharz().arrItemShop[num102][num104].buyCoin = msg.reader().readInt();
								global::Char.myCharz().arrItemShop[num102][num104].buyGold = msg.reader().readInt();
								global::Char.myCharz().arrItemShop[num102][num104].quantity = msg.reader().readInt();
							}
							else
							{
								bool flag229 = b46 == 4;
								if (flag229)
								{
									global::Char.myCharz().arrItemShop[num102][num104].reason = msg.reader().readUTF();
								}
								else
								{
									bool flag230 = b46 == 0;
									if (flag230)
									{
										global::Char.myCharz().arrItemShop[num102][num104].buyCoin = msg.reader().readInt();
										global::Char.myCharz().arrItemShop[num102][num104].buyGold = msg.reader().readInt();
									}
									else
									{
										bool flag231 = b46 == 1;
										if (flag231)
										{
											global::Char.myCharz().arrItemShop[num102][num104].powerRequire = msg.reader().readLong();
										}
										else
										{
											bool flag232 = b46 == 2;
											if (flag232)
											{
												global::Char.myCharz().arrItemShop[num102][num104].itemId = (int)msg.reader().readShort();
												global::Char.myCharz().arrItemShop[num102][num104].buyCoin = msg.reader().readInt();
												global::Char.myCharz().arrItemShop[num102][num104].buyGold = msg.reader().readInt();
												global::Char.myCharz().arrItemShop[num102][num104].buyType = msg.reader().readByte();
												global::Char.myCharz().arrItemShop[num102][num104].quantity = msg.reader().readInt();
												global::Char.myCharz().arrItemShop[num102][num104].isMe = msg.reader().readByte();
											}
											else
											{
												bool flag233 = b46 == 3;
												if (flag233)
												{
													global::Char.myCharz().arrItemShop[num102][num104].isBuySpec = true;
													global::Char.myCharz().arrItemShop[num102][num104].iconSpec = msg.reader().readShort();
													global::Char.myCharz().arrItemShop[num102][num104].buySpec = msg.reader().readInt();
												}
											}
										}
									}
								}
							}
							int num106 = (int)msg.reader().readUnsignedByte();
							bool flag234 = num106 != 0;
							if (flag234)
							{
								global::Char.myCharz().arrItemShop[num102][num104].itemOption = new ItemOption[num106];
								for (int num107 = 0; num107 < global::Char.myCharz().arrItemShop[num102][num104].itemOption.Length; num107 = num4 + 1)
								{
									ItemOption itemOption3 = this.readItemOption(msg);
									bool flag235 = itemOption3 != null;
									if (flag235)
									{
										global::Char.myCharz().arrItemShop[num102][num104].itemOption[num107] = itemOption3;
										global::Char.myCharz().arrItemShop[num102][num104].compare = GameCanvas.panel.getCompare(global::Char.myCharz().arrItemShop[num102][num104]);
									}
									num4 = num107;
								}
							}
							sbyte newItem = msg.reader().readByte();
							global::Char.myCharz().arrItemShop[num102][num104].newItem = (newItem != 0);
							sbyte b47 = msg.reader().readByte();
							bool flag236 = b47 == 1;
							if (flag236)
							{
								int headTemp = (int)msg.reader().readShort();
								int bodyTemp = (int)msg.reader().readShort();
								int legTemp = (int)msg.reader().readShort();
								int bagTemp = (int)msg.reader().readShort();
								global::Char.myCharz().arrItemShop[num102][num104].setPartTemp(headTemp, bodyTemp, legTemp, bagTemp);
							}
							bool flag237 = b46 == 2 && GameMidlet.intVERSION >= 237;
							if (flag237)
							{
								global::Char.myCharz().arrItemShop[num102][num104].nameNguoiKyGui = msg.reader().readUTF();
								Res.err("nguoi ki gui  " + global::Char.myCharz().arrItemShop[num102][num104].nameNguoiKyGui);
							}
						}
						num4 = num104;
					}
					num4 = num102;
				}
				bool flag238 = flag219;
				if (flag238)
				{
					bool flag239 = b46 != 2;
					if (flag239)
					{
						GameCanvas.panel2 = new Panel();
						GameCanvas.panel2.tabName[7] = new string[][]
						{
							new string[]
							{
								string.Empty
							}
						};
						GameCanvas.panel2.setTypeBodyOnly();
						GameCanvas.panel2.show();
					}
					else
					{
						GameCanvas.panel2 = new Panel();
						GameCanvas.panel2.setTypeKiGuiOnly();
						GameCanvas.panel2.show();
					}
				}
				GameCanvas.panel.tabName[1] = GameCanvas.panel.shopTabName;
				bool flag240 = b46 == 2;
				if (flag240)
				{
					string[][] array8 = GameCanvas.panel.tabName[1];
					bool flag241 = flag219;
					if (flag241)
					{
						GameCanvas.panel.tabName[1] = new string[][]
						{
							array8[0],
							array8[1],
							array8[2],
							array8[3]
						};
					}
					else
					{
						GameCanvas.panel.tabName[1] = new string[][]
						{
							array8[0],
							array8[1],
							array8[2],
							array8[3],
							array8[4]
						};
					}
				}
				GameCanvas.panel.setTypeShop((int)b46);
				GameCanvas.panel.show();
				break;
			}
			case -43:
			{
				sbyte itemAction = msg.reader().readByte();
				sbyte where = msg.reader().readByte();
				sbyte index3 = msg.reader().readByte();
				string info2 = msg.reader().readUTF();
				GameCanvas.panel.itemRequest(itemAction, info2, where, index3);
				break;
			}
			case -42:
				global::Char.myCharz().cHPGoc = msg.readInt3Byte();
				global::Char.myCharz().cMPGoc = msg.readInt3Byte();
				global::Char.myCharz().cDamGoc = msg.reader().readInt();
				global::Char.myCharz().cHPFull = msg.reader().readLong();
				global::Char.myCharz().cMPFull = msg.reader().readLong();
				global::Char.myCharz().cHP = msg.reader().readLong();
				global::Char.myCharz().cMP = msg.reader().readLong();
				global::Char.myCharz().cspeed = (int)msg.reader().readByte();
				global::Char.myCharz().hpFrom1000TiemNang = msg.reader().readByte();
				global::Char.myCharz().mpFrom1000TiemNang = msg.reader().readByte();
				global::Char.myCharz().damFrom1000TiemNang = msg.reader().readByte();
				global::Char.myCharz().cDamFull = msg.reader().readLong();
				global::Char.myCharz().cDefull = msg.reader().readLong();
				global::Char.myCharz().cCriticalFull = (int)msg.reader().readByte();
				global::Char.myCharz().cTiemNang = msg.reader().readLong();
				global::Char.myCharz().expForOneAdd = msg.reader().readShort();
				global::Char.myCharz().cDefGoc = msg.reader().readInt();
				global::Char.myCharz().cCriticalGoc = (int)msg.reader().readByte();
				InfoDlg.hide();
				break;
			case -41:
			{
				sbyte b48 = msg.reader().readByte();
				global::Char.myCharz().strLevel = new string[(int)b48];
				int num4;
				for (int num108 = 0; num108 < (int)b48; num108 = num4 + 1)
				{
					string text3 = msg.reader().readUTF();
					global::Char.myCharz().strLevel[num108] = text3;
					num4 = num108;
				}
				Res.outz("---   xong  level caption cmd : " + msg.command.ToString());
				break;
			}
			case -37:
			{
				sbyte b49 = msg.reader().readByte();
				Res.outz("cAction= " + b49.ToString());
				bool flag242 = b49 != 0;
				if (!flag242)
				{
					global::Char.myCharz().head = (int)msg.reader().readShort();
					global::Char.myCharz().setDefaultPart();
					int num109 = (int)msg.reader().readUnsignedByte();
					Res.outz("num body = " + num109.ToString());
					global::Char.myCharz().arrItemBody = new Item[num109];
					int num4;
					for (int num110 = 0; num110 < num109; num110 = num4 + 1)
					{
						short num111 = msg.reader().readShort();
						bool flag243 = num111 == -1;
						if (!flag243)
						{
							global::Char.myCharz().arrItemBody[num110] = new Item();
							global::Char.myCharz().arrItemBody[num110].template = ItemTemplates.get(num111);
							int type2 = (int)global::Char.myCharz().arrItemBody[num110].template.type;
							global::Char.myCharz().arrItemBody[num110].quantity = msg.reader().readInt();
							global::Char.myCharz().arrItemBody[num110].info = msg.reader().readUTF();
							global::Char.myCharz().arrItemBody[num110].content = msg.reader().readUTF();
							int num112 = (int)msg.reader().readUnsignedByte();
							bool flag244 = num112 != 0;
							if (flag244)
							{
								global::Char.myCharz().arrItemBody[num110].itemOption = new ItemOption[num112];
								for (int num113 = 0; num113 < global::Char.myCharz().arrItemBody[num110].itemOption.Length; num113 = num4 + 1)
								{
									ItemOption itemOption4 = this.readItemOption(msg);
									bool flag245 = itemOption4 != null;
									if (flag245)
									{
										global::Char.myCharz().arrItemBody[num110].itemOption[num113] = itemOption4;
									}
									num4 = num113;
								}
							}
							int num114 = type2;
							int num115 = num114;
							if (num115 != 0)
							{
								if (num115 == 1)
								{
									global::Char.myCharz().leg = (int)global::Char.myCharz().arrItemBody[num110].template.part;
								}
							}
							else
							{
								global::Char.myCharz().body = (int)global::Char.myCharz().arrItemBody[num110].template.part;
							}
						}
						num4 = num110;
					}
				}
				break;
			}
			case -36:
			{
				sbyte b50 = msg.reader().readByte();
				Res.outz("cAction= " + b50.ToString());
				GameScr.isudungCapsun4 = false;
				GameScr.isudungCapsun3 = false;
				bool flag246 = b50 == 0;
				if (flag246)
				{
					int num116 = (int)msg.reader().readUnsignedByte();
					global::Char.myCharz().arrItemBag = new Item[num116];
					GameScr.hpPotion = 0;
					Res.outz("numC=" + num116.ToString());
					int num4;
					for (int num117 = 0; num117 < num116; num117 = num4 + 1)
					{
						short num118 = msg.reader().readShort();
						bool flag247 = num118 == -1;
						if (!flag247)
						{
							global::Char.myCharz().arrItemBag[num117] = new Item();
							global::Char.myCharz().arrItemBag[num117].template = ItemTemplates.get(num118);
							global::Char.myCharz().arrItemBag[num117].quantity = msg.reader().readInt();
							global::Char.myCharz().arrItemBag[num117].info = msg.reader().readUTF();
							global::Char.myCharz().arrItemBag[num117].content = msg.reader().readUTF();
							global::Char.myCharz().arrItemBag[num117].indexUI = num117;
							int num119 = (int)msg.reader().readUnsignedByte();
							bool flag248 = num119 != 0;
							if (flag248)
							{
								global::Char.myCharz().arrItemBag[num117].itemOption = new ItemOption[num119];
								for (int num120 = 0; num120 < global::Char.myCharz().arrItemBag[num117].itemOption.Length; num120 = num4 + 1)
								{
									ItemOption itemOption5 = this.readItemOption(msg);
									bool flag249 = itemOption5 != null;
									if (flag249)
									{
										global::Char.myCharz().arrItemBag[num117].itemOption[num120] = itemOption5;
									}
									num4 = num120;
								}
								global::Char.myCharz().arrItemBag[num117].compare = GameCanvas.panel.getCompare(global::Char.myCharz().arrItemBag[num117]);
							}
							bool flag250 = global::Char.myCharz().arrItemBag[num117].template.type == 11;
							if (flag250)
							{
							}
							bool flag251 = global::Char.myCharz().arrItemBag[num117].template.type == 6;
							if (flag251)
							{
								GameScr.hpPotion += global::Char.myCharz().arrItemBag[num117].quantity;
							}
							bool flag252 = global::Char.myCharz().arrItemBag[num117].template.id == 194;
							if (flag252)
							{
								GameScr.isudungCapsun4 = (global::Char.myCharz().arrItemBag[num117].quantity > 0);
							}
							else
							{
								bool flag253 = global::Char.myCharz().arrItemBag[num117].template.id == 193 && !GameScr.isudungCapsun4;
								if (flag253)
								{
									GameScr.isudungCapsun3 = (global::Char.myCharz().arrItemBag[num117].quantity > 0);
								}
							}
						}
						num4 = num117;
					}
				}
				bool flag254 = b50 == 2;
				if (flag254)
				{
					sbyte b51 = msg.reader().readByte();
					int num121 = msg.reader().readInt();
					int quantity = global::Char.myCharz().arrItemBag[(int)b51].quantity;
					int id3 = (int)global::Char.myCharz().arrItemBag[(int)b51].template.id;
					global::Char.myCharz().arrItemBag[(int)b51].quantity = num121;
					bool flag255 = global::Char.myCharz().arrItemBag[(int)b51].quantity < quantity && global::Char.myCharz().arrItemBag[(int)b51].template.type == 6;
					if (flag255)
					{
						GameScr.hpPotion -= quantity - global::Char.myCharz().arrItemBag[(int)b51].quantity;
					}
					bool flag256 = global::Char.myCharz().arrItemBag[(int)b51].quantity == 0;
					if (flag256)
					{
						global::Char.myCharz().arrItemBag[(int)b51] = null;
					}
					int num122 = id3;
					int num123 = num122;
					if (num123 != 193)
					{
						if (num123 == 194)
						{
							GameScr.isudungCapsun4 = (num121 > 0);
						}
					}
					else
					{
						GameScr.isudungCapsun3 = (num121 > 0);
					}
				}
				break;
			}
			case -35:
			{
				sbyte b52 = msg.reader().readByte();
				Res.outz("cAction= " + b52.ToString());
				bool flag257 = b52 == 0;
				if (flag257)
				{
					int num124 = (int)msg.reader().readUnsignedByte();
					global::Char.myCharz().arrItemBox = new Item[num124];
					GameCanvas.panel.hasUse = 0;
					int num4;
					for (int num125 = 0; num125 < num124; num125 = num4 + 1)
					{
						short num126 = msg.reader().readShort();
						bool flag258 = num126 == -1;
						if (!flag258)
						{
							global::Char.myCharz().arrItemBox[num125] = new Item();
							global::Char.myCharz().arrItemBox[num125].template = ItemTemplates.get(num126);
							global::Char.myCharz().arrItemBox[num125].quantity = msg.reader().readInt();
							global::Char.myCharz().arrItemBox[num125].info = msg.reader().readUTF();
							global::Char.myCharz().arrItemBox[num125].content = msg.reader().readUTF();
							int num127 = (int)msg.reader().readUnsignedByte();
							bool flag259 = num127 != 0;
							if (flag259)
							{
								global::Char.myCharz().arrItemBox[num125].itemOption = new ItemOption[num127];
								for (int num128 = 0; num128 < global::Char.myCharz().arrItemBox[num125].itemOption.Length; num128 = num4 + 1)
								{
									ItemOption itemOption6 = this.readItemOption(msg);
									bool flag260 = itemOption6 != null;
									if (flag260)
									{
										global::Char.myCharz().arrItemBox[num125].itemOption[num128] = itemOption6;
									}
									num4 = num128;
								}
							}
							Panel panel = GameCanvas.panel;
							Panel panel3 = panel;
							num4 = panel.hasUse;
							panel3.hasUse = num4 + 1;
						}
						num4 = num125;
					}
				}
				bool flag261 = b52 == 1;
				if (flag261)
				{
					bool isBoxClan = false;
					try
					{
						sbyte b53 = msg.reader().readByte();
						bool flag262 = b53 == 1;
						if (flag262)
						{
							isBoxClan = true;
						}
					}
					catch (Exception)
					{
					}
					GameCanvas.panel.setTypeBox();
					GameCanvas.panel.isBoxClan = isBoxClan;
					GameCanvas.panel.show();
				}
				bool flag263 = b52 == 2;
				if (flag263)
				{
					sbyte b54 = msg.reader().readByte();
					int quantity2 = msg.reader().readInt();
					global::Char.myCharz().arrItemBox[(int)b54].quantity = quantity2;
					bool flag264 = global::Char.myCharz().arrItemBox[(int)b54].quantity == 0;
					if (flag264)
					{
						global::Char.myCharz().arrItemBox[(int)b54] = null;
					}
				}
				break;
			}
			case -34:
			{
				sbyte b55 = msg.reader().readByte();
				Res.outz("act= " + b55.ToString());
				bool flag265 = b55 == 0 && GameScr.gI().magicTree != null;
				if (flag265)
				{
					Res.outz("toi duoc day");
					MagicTree magicTree = GameScr.gI().magicTree;
					magicTree.id = (int)msg.reader().readShort();
					magicTree.name = msg.reader().readUTF();
					magicTree.name = Res.changeString(magicTree.name);
					magicTree.x = (int)msg.reader().readShort();
					magicTree.y = (int)msg.reader().readShort();
					magicTree.level = (int)msg.reader().readByte();
					magicTree.currPeas = (int)msg.reader().readShort();
					magicTree.maxPeas = (int)msg.reader().readShort();
					Res.outz("curr Peas= " + magicTree.currPeas.ToString());
					magicTree.strInfo = msg.reader().readUTF();
					magicTree.seconds = msg.reader().readInt();
					magicTree.timeToRecieve = magicTree.seconds;
					sbyte b56 = msg.reader().readByte();
					magicTree.peaPostionX = new int[(int)b56];
					magicTree.peaPostionY = new int[(int)b56];
					int num4;
					for (int num129 = 0; num129 < (int)b56; num129 = num4 + 1)
					{
						magicTree.peaPostionX[num129] = (int)msg.reader().readByte();
						magicTree.peaPostionY[num129] = (int)msg.reader().readByte();
						num4 = num129;
					}
					magicTree.isUpdate = msg.reader().readBool();
					magicTree.last = (magicTree.cur = mSystem.currentTimeMillis());
					GameScr.gI().magicTree.isUpdateTree = true;
				}
				bool flag266 = b55 == 1;
				if (flag266)
				{
					myVector = new MyVector();
					try
					{
						while (msg.reader().available() > 0)
						{
							string caption2 = msg.reader().readUTF();
							myVector.addElement(new Command(caption2, GameCanvas.instance, 888392, null));
						}
					}
					catch (Exception ex)
					{
						Cout.println("Loi MAGIC_TREE " + ex.ToString());
					}
					GameCanvas.menu.startAt(myVector, 3);
				}
				bool flag267 = b55 == 2;
				if (flag267)
				{
					GameScr.gI().magicTree.remainPeas = (int)msg.reader().readShort();
					GameScr.gI().magicTree.seconds = msg.reader().readInt();
					GameScr.gI().magicTree.last = (GameScr.gI().magicTree.cur = mSystem.currentTimeMillis());
					GameScr.gI().magicTree.isUpdateTree = true;
					GameScr.gI().magicTree.isPeasEffect = true;
				}
				break;
			}
			case -32:
			{
				short id4 = msg.reader().readShort();
				int num130 = msg.reader().readInt();
				sbyte[] array9 = null;
				Image image = null;
				try
				{
					array9 = new sbyte[num130];
					int num4;
					for (int num131 = 0; num131 < num130; num131 = num4 + 1)
					{
						array9[num131] = msg.reader().readByte();
						num4 = num131;
					}
					image = Image.createImage(array9, 0, num130);
					BgItem.imgNew.put(id4.ToString() + string.Empty, image);
				}
				catch (Exception)
				{
					array9 = null;
					BgItem.imgNew.put(id4.ToString() + string.Empty, Image.createRGBImage(new int[1], 1, 1, true));
				}
				bool flag268 = array9 != null;
				if (flag268)
				{
					bool flag269 = mGraphics.zoomLevel > 1;
					if (flag269)
					{
						Rms.saveRMS(mGraphics.zoomLevel.ToString() + "bgItem" + id4.ToString(), array9);
					}
					BgItemMn.blendcurrBg(id4, image);
				}
				break;
			}
			case -31:
			{
				TileMap.vItemBg.removeAllElements();
				short num132 = msg.reader().readShort();
				Res.err("[ITEM_BACKGROUND] nItem= " + num132.ToString());
				int num4;
				for (int num133 = 0; num133 < (int)num132; num133 = num4 + 1)
				{
					BgItem bgItem = new BgItem();
					bgItem.id = num133;
					bgItem.idImage = msg.reader().readShort();
					bgItem.layer = msg.reader().readByte();
					bgItem.dx = (int)msg.reader().readShort();
					bgItem.dy = (int)msg.reader().readShort();
					sbyte b57 = msg.reader().readByte();
					bgItem.tileX = new int[(int)b57];
					bgItem.tileY = new int[(int)b57];
					for (int num134 = 0; num134 < (int)b57; num134 = num4 + 1)
					{
						bgItem.tileX[num133] = (int)msg.reader().readByte();
						bgItem.tileY[num133] = (int)msg.reader().readByte();
						num4 = num134;
					}
					TileMap.vItemBg.addElement(bgItem);
					num4 = num133;
				}
				break;
			}
			case -30:
				this.messageSubCommand(msg);
				break;
			case -29:
				this.messageNotLogin(msg);
				break;
			case -28:
				this.messageNotMap(msg);
				break;
			case -26:
			{
				ServerListScreen.testConnect = 2;
				GameCanvas.debug("SA2", 2);
				GameCanvas.startOKDlg(msg.reader().readUTF());
				InfoDlg.hide();
				LoginScr.isContinueToLogin = false;
				global::Char.isLoadingMap = false;
				bool flag270 = GameCanvas.currentScreen == GameCanvas.loginScr;
				if (flag270)
				{
					GameCanvas.serverScreen.switchToMe();
				}
				break;
			}
			case -25:
				GameCanvas.debug("SA3", 2);
				GameScr.info1.addInfo(msg.reader().readUTF(), 0);
				break;
			case -24:
				Res.outz("***************MAP_INFO**************");
				GameScr.isPickNgocRong = false;
				global::Char.isLoadingMap = true;
				Cout.println("GET MAP INFO");
				GameScr.gI().magicTree = null;
				GameCanvas.isLoading = true;
				GameCanvas.debug("SA75", 2);
				GameScr.resetAllvector();
				GameCanvas.endDlg();
				TileMap.vGo.removeAllElements();
				PopUp.vPopups.removeAllElements();
				mSystem.gcc();
				TileMap.mapID = (int)msg.reader().readUnsignedByte();
				TileMap.planetID = msg.reader().readByte();
				TileMap.tileID = (int)msg.reader().readByte();
				TileMap.bgID = (int)msg.reader().readByte();
				GameScr.isPaint_CT = (TileMap.mapID != 170);
				Cout.println(string.Concat(new string[]
				{
					"load planet from server: ",
					TileMap.planetID.ToString(),
					"bgType= ",
					TileMap.bgType.ToString(),
					"............................."
				}));
				TileMap.typeMap = (int)msg.reader().readByte();
				TileMap.mapName = msg.reader().readUTF();
				TileMap.zoneID = (int)msg.reader().readByte();
				GameCanvas.debug("SA75x1", 2);
				try
				{
					TileMap.loadMapFromResource(TileMap.mapID);
				}
				catch (Exception)
				{
					Service.gI().requestMaptemplate(TileMap.mapID);
					this.messWait = msg;
					break;
				}
				this.loadInfoMap(msg);
				try
				{
					TileMap.isMapDouble = (msg.reader().readByte() != 0);
				}
				catch (Exception)
				{
				}
				GameScr.cmx = GameScr.cmtoX;
				GameScr.cmy = GameScr.cmtoY;
				GameCanvas.isRequestMapID = 2;
				GameCanvas.waitingTimeChangeMap = mSystem.currentTimeMillis() + 1000L;
				break;
			case -22:
			{
				GameCanvas.debug("SA65", 2);
				global::Char.isLockKey = true;
				global::Char.ischangingMap = true;
				GameScr.gI().timeStartMap = 0;
				GameScr.gI().timeLengthMap = 0;
				global::Char.myCharz().mobFocus = null;
				global::Char.myCharz().npcFocus = null;
				global::Char.myCharz().charFocus = null;
				global::Char.myCharz().itemFocus = null;
				global::Char.myCharz().focus.removeAllElements();
				global::Char.myCharz().testCharId = -9999;
				global::Char.myCharz().killCharId = -9999;
				GameCanvas.resetBg();
				GameScr.gI().resetButton();
				GameScr.gI().center = null;
				bool flag271 = Effect.vEffData.size() > 15;
				if (flag271)
				{
					int num4;
					for (int num135 = 0; num135 < 5; num135 = num4 + 1)
					{
						Effect.vEffData.removeElementAt(0);
						num4 = num135;
					}
				}
				break;
			}
			case -21:
			{
				GameCanvas.debug("SA60", 2);
				short num136 = msg.reader().readShort();
				int num4;
				for (int num137 = 0; num137 < GameScr.vItemMap.size(); num137 = num4 + 1)
				{
					bool flag272 = ((ItemMap)GameScr.vItemMap.elementAt(num137)).itemMapID == (int)num136;
					if (flag272)
					{
						GameScr.vItemMap.removeElementAt(num137);
						break;
					}
					num4 = num137;
				}
				break;
			}
			case -20:
			{
				GameCanvas.debug("SA61", 2);
				global::Char.myCharz().itemFocus = null;
				short num138 = msg.reader().readShort();
				int num4;
				for (int num139 = 0; num139 < GameScr.vItemMap.size(); num139 = num4 + 1)
				{
					ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(num139);
					bool flag273 = itemMap.itemMapID != (int)num138;
					if (!flag273)
					{
						itemMap.setPoint(global::Char.myCharz().cx, global::Char.myCharz().cy - 10);
						string text4 = msg.reader().readUTF();
						i = 0;
						try
						{
							i = (int)msg.reader().readShort();
							bool flag274 = itemMap.template.type == 9;
							if (flag274)
							{
								i = (int)msg.reader().readShort();
								global::Char char10 = global::Char.myCharz();
								char10.xu += (long)i;
								global::Char.myCharz().xuStr = Res.formatNumber(global::Char.myCharz().xu);
							}
							else
							{
								bool flag275 = itemMap.template.type == 10;
								if (flag275)
								{
									i = (int)msg.reader().readShort();
									global::Char char10 = global::Char.myCharz();
									char10.luong += i;
									global::Char.myCharz().luongStr = mSystem.numberTostring((long)global::Char.myCharz().luong);
								}
								else
								{
									bool flag276 = itemMap.template.type == 34;
									if (flag276)
									{
										i = (int)msg.reader().readShort();
										global::Char char10 = global::Char.myCharz();
										char10.luongKhoa += i;
										global::Char.myCharz().luongKhoaStr = mSystem.numberTostring((long)global::Char.myCharz().luongKhoa);
									}
								}
							}
						}
						catch (Exception)
						{
						}
						bool flag277 = text4.Equals(string.Empty);
						if (flag277)
						{
							bool flag278 = itemMap.template.type == 9;
							if (flag278)
							{
								GameScr.startFlyText(((i >= 0) ? "+" : string.Empty) + i.ToString(), global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch, 0, -2, mFont.YELLOW);
								SoundMn.gI().getItem();
							}
							else
							{
								bool flag279 = itemMap.template.type == 10;
								if (flag279)
								{
									GameScr.startFlyText(((i >= 0) ? "+" : string.Empty) + i.ToString(), global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch, 0, -2, mFont.GREEN);
									SoundMn.gI().getItem();
								}
								else
								{
									bool flag280 = itemMap.template.type == 34;
									if (flag280)
									{
										GameScr.startFlyText(((i >= 0) ? "+" : string.Empty) + i.ToString(), global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch, 0, -2, mFont.RED);
										SoundMn.gI().getItem();
									}
									else
									{
										GameScr.info1.addInfo(mResources.you_receive + " " + ((i <= 0) ? string.Empty : (i.ToString() + " ")) + itemMap.template.name, 0);
										SoundMn.gI().getItem();
									}
								}
							}
							bool flag281 = i > 0 && global::Char.myCharz().petFollow != null && global::Char.myCharz().petFollow.smallID == 4683;
							if (flag281)
							{
								ServerEffect.addServerEffect(55, global::Char.myCharz().petFollow.cmx, global::Char.myCharz().petFollow.cmy, 1);
								ServerEffect.addServerEffect(55, global::Char.myCharz().cx, global::Char.myCharz().cy, 1);
							}
						}
						else
						{
							bool flag282 = text4.Length == 1;
							if (flag282)
							{
								Cout.LogError3("strInf.Length =1:  " + text4);
							}
							else
							{
								GameScr.info1.addInfo(text4, 0);
							}
						}
						break;
					}
					num4 = num139;
				}
				break;
			}
			case -19:
			{
				GameCanvas.debug("SA62", 2);
				short num140 = msg.reader().readShort();
				@char = GameScr.findCharInMap(msg.reader().readInt());
				int num141 = 0;
				while (num141 < GameScr.vItemMap.size())
				{
					ItemMap itemMap2 = (ItemMap)GameScr.vItemMap.elementAt(num141);
					bool flag283 = itemMap2.itemMapID != (int)num140;
					if (flag283)
					{
						int num4 = num141;
						num141 = num4 + 1;
					}
					else
					{
						bool flag284 = @char == null;
						if (flag284)
						{
							return;
						}
						itemMap2.setPoint(@char.cx, @char.cy - 10);
						bool flag285 = itemMap2.x < @char.cx;
						if (flag285)
						{
							@char.cdir = -1;
						}
						else
						{
							bool flag286 = itemMap2.x > @char.cx;
							if (flag286)
							{
								@char.cdir = 1;
							}
						}
						break;
					}
				}
				break;
			}
			case -18:
			{
				GameCanvas.debug("SA63", 2);
				int num142 = (int)msg.reader().readByte();
				GameScr.vItemMap.addElement(new ItemMap(msg.reader().readShort(), global::Char.myCharz().arrItemBag[num142].template.id, global::Char.myCharz().cx, global::Char.myCharz().cy, (int)msg.reader().readShort(), (int)msg.reader().readShort()));
				global::Char.myCharz().arrItemBag[num142] = null;
				break;
			}
			case -14:
			{
				GameCanvas.debug("SA64", 2);
				@char = GameScr.findCharInMap(msg.reader().readInt());
				bool flag287 = @char == null;
				if (flag287)
				{
					return;
				}
				GameScr.vItemMap.addElement(new ItemMap(msg.reader().readShort(), msg.reader().readShort(), @char.cx, @char.cy, (int)msg.reader().readShort(), (int)msg.reader().readShort()));
				break;
			}
			case -4:
			{
				GameCanvas.debug("SA76", 2);
				@char = GameScr.findCharInMap(msg.reader().readInt());
				bool flag288 = @char == null;
				if (flag288)
				{
					return;
				}
				GameCanvas.debug("SA76v1", 2);
				bool flag289 = (TileMap.tileTypeAtPixel(@char.cx, @char.cy) & 2) == 2;
				if (flag289)
				{
					@char.setSkillPaint(GameScr.sks[(int)msg.reader().readUnsignedByte()], 0);
				}
				else
				{
					@char.setSkillPaint(GameScr.sks[(int)msg.reader().readUnsignedByte()], 1);
				}
				GameCanvas.debug("SA76v2", 2);
				@char.attMobs = new Mob[(int)msg.reader().readByte()];
				int num4;
				for (int num143 = 0; num143 < @char.attMobs.Length; num143 = num4 + 1)
				{
					Mob mob5 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readByte());
					@char.attMobs[num143] = mob5;
					bool flag290 = num143 == 0;
					if (flag290)
					{
						bool flag291 = @char.cx <= mob5.x;
						if (flag291)
						{
							@char.cdir = 1;
						}
						else
						{
							@char.cdir = -1;
						}
					}
					num4 = num143;
				}
				GameCanvas.debug("SA76v3", 2);
				@char.charFocus = null;
				@char.mobFocus = @char.attMobs[0];
				global::Char[] array10 = new global::Char[10];
				i = 0;
				try
				{
					for (i = 0; i < array10.Length; i = num4 + 1)
					{
						int num144 = msg.reader().readInt();
						global::Char char11 = array10[i] = ((num144 != global::Char.myCharz().charID) ? GameScr.findCharInMap(num144) : global::Char.myCharz());
						bool flag292 = i == 0;
						if (flag292)
						{
							bool flag293 = @char.cx <= char11.cx;
							if (flag293)
							{
								@char.cdir = 1;
							}
							else
							{
								@char.cdir = -1;
							}
						}
						num4 = i;
					}
				}
				catch (Exception ex2)
				{
					Cout.println("Loi PLAYER_ATTACK_N_P " + ex2.ToString());
				}
				GameCanvas.debug("SA76v4", 2);
				bool flag294 = i > 0;
				if (flag294)
				{
					@char.attChars = new global::Char[i];
					for (i = 0; i < @char.attChars.Length; i = num4 + 1)
					{
						@char.attChars[i] = array10[i];
						num4 = i;
					}
					@char.charFocus = @char.attChars[0];
					@char.mobFocus = null;
				}
				GameCanvas.debug("SA76v5", 2);
				break;
			}
			case 0:
				this.readLogin(msg);
				break;
			case 1:
			{
				bool flag295 = msg.reader().readBool();
				Res.outz("isRes= " + flag295.ToString());
				bool flag296 = !flag295;
				if (flag296)
				{
					GameCanvas.startOKDlg(msg.reader().readUTF());
				}
				else
				{
					GameCanvas.loginScr.isLogin2 = false;
					Rms.saveRMSString("userAo" + ServerListScreen.ipSelect.ToString(), string.Empty);
					GameCanvas.endDlg();
					GameCanvas.loginScr.doLogin();
				}
				break;
			}
			case 2:
			{
				global::Char.isLoadingMap = false;
				LoginScr.isLoggingIn = false;
				bool flag297 = !GameScr.isLoadAllData;
				if (flag297)
				{
					GameScr.gI().initSelectChar();
				}
				BgItem.clearHashTable();
				GameCanvas.endDlg();
				CreateCharScr.isCreateChar = true;
				CreateCharScr.gI().switchToMe();
				break;
			}
			case 6:
				GameCanvas.debug("SA70", 2);
				global::Char.myCharz().xu = msg.reader().readLong();
				global::Char.myCharz().luong = msg.reader().readInt();
				global::Char.myCharz().luongKhoa = msg.reader().readInt();
				global::Char.myCharz().xuStr = Res.formatNumber(global::Char.myCharz().xu);
				global::Char.myCharz().luongStr = mSystem.numberTostring((long)global::Char.myCharz().luong);
				global::Char.myCharz().luongKhoaStr = mSystem.numberTostring((long)global::Char.myCharz().luongKhoa);
				GameCanvas.endDlg();
				break;
			case 7:
			{
				sbyte type3 = msg.reader().readByte();
				short id5 = msg.reader().readShort();
				string info3 = msg.reader().readUTF();
				GameCanvas.panel.saleRequest(type3, info3, id5);
				break;
			}
			case 11:
			{
				GameCanvas.debug("SA9", 2);
				int num145 = (int)msg.reader().readShort();
				sbyte b58 = msg.reader().readByte();
				bool flag298 = b58 != 0;
				if (flag298)
				{
					Mob.arrMobTemplate[num145].data.readDataNewBoss(NinjaUtil.readByteArray(msg), b58);
				}
				else
				{
					Mob.arrMobTemplate[num145].data.readData(NinjaUtil.readByteArray(msg));
				}
				int num4;
				for (int num146 = 0; num146 < GameScr.vMob.size(); num146 = num4 + 1)
				{
					Mob mob2 = (Mob)GameScr.vMob.elementAt(num146);
					bool flag299 = mob2.templateId == num145;
					if (flag299)
					{
						mob2.w = Mob.arrMobTemplate[num145].data.width;
						mob2.h = Mob.arrMobTemplate[num145].data.height;
					}
					num4 = num146;
				}
				sbyte[] array11 = NinjaUtil.readByteArray(msg);
				Image img = Image.createImage(array11, 0, array11.Length);
				Mob.arrMobTemplate[num145].data.img = img;
				int num147 = (int)msg.reader().readByte();
				Mob.arrMobTemplate[num145].data.typeData = num147;
				bool flag300 = num147 == 1 || num147 == 2;
				if (flag300)
				{
					this.readFrameBoss(msg, num145);
				}
				break;
			}
			case 12:
				this.read_cmdExtraBig(msg);
				break;
			case 20:
				this.phuban_Info(msg);
				break;
			case 24:
				this.read_cmdExtra(msg);
				break;
			case 27:
			{
				myVector = new MyVector();
				string text5 = msg.reader().readUTF();
				int num148 = (int)msg.reader().readByte();
				int num4;
				for (int num149 = 0; num149 < num148; num149 = num4 + 1)
				{
					string caption3 = msg.reader().readUTF();
					short num150 = msg.reader().readShort();
					myVector.addElement(new Command(caption3, GameCanvas.instance, 88819, num150));
					num4 = num149;
				}
				GameCanvas.menu.startWithoutCloseButton(myVector, 3);
				break;
			}
			case 29:
				GameCanvas.debug("SA58", 2);
				GameScr.gI().openUIZone(msg);
				break;
			case 32:
			{
				GameCanvas.debug("SA68", 2);
				int num151 = (int)msg.reader().readShort();
				int num4;
				for (int num152 = 0; num152 < GameScr.vNpc.size(); num152 = num4 + 1)
				{
					Npc npc2 = (Npc)GameScr.vNpc.elementAt(num152);
					bool flag301 = npc2.template.npcTemplateId == num151 && npc2.Equals(global::Char.myCharz().npcFocus);
					if (flag301)
					{
						string chat2 = msg.reader().readUTF();
						string[] array12 = new string[(int)msg.reader().readByte()];
						for (int num153 = 0; num153 < array12.Length; num153 = num4 + 1)
						{
							array12[num153] = msg.reader().readUTF();
							num4 = num153;
						}
						GameScr.gI().createMenu(array12, npc2);
						ChatPopup.addChatPopup(chat2, 100000, npc2);
						return;
					}
					num4 = num152;
				}
				Npc npc3 = new Npc(num151, 0, -100, 100, num151, GameScr.info1.charId[global::Char.myCharz().cgender][2]);
				Res.outz((global::Char.myCharz().npcFocus == null) ? "null" : "!null");
				string chat3 = msg.reader().readUTF();
				string[] array13 = new string[(int)msg.reader().readByte()];
				for (int num154 = 0; num154 < array13.Length; num154 = num4 + 1)
				{
					array13[num154] = msg.reader().readUTF();
					num4 = num154;
				}
				try
				{
					short avatar2 = msg.reader().readShort();
					npc3.avatar = (int)avatar2;
				}
				catch (Exception)
				{
				}
				Res.outz((global::Char.myCharz().npcFocus == null) ? "null" : "!null");
				GameScr.gI().createMenu(array13, npc3);
				ChatPopup.addChatPopup(chat3, 100000, npc3);
				break;
			}
			case 33:
			{
				GameCanvas.debug("SA51", 2);
				InfoDlg.hide();
				GameCanvas.clearKeyHold();
				GameCanvas.clearKeyPressed();
				myVector = new MyVector();
				try
				{
					for (;;)
					{
						string caption4 = msg.reader().readUTF();
						myVector.addElement(new Command(caption4, GameCanvas.instance, 88822, null));
					}
				}
				catch (Exception ex3)
				{
					Cout.println("Loi OPEN_UI_MENU " + ex3.ToString());
				}
				bool flag302 = global::Char.myCharz().npcFocus == null;
				if (flag302)
				{
					return;
				}
				int num4;
				for (int num155 = 0; num155 < global::Char.myCharz().npcFocus.template.menu.Length; num155 = num4 + 1)
				{
					string[] array14 = global::Char.myCharz().npcFocus.template.menu[num155];
					myVector.addElement(new Command(array14[0], GameCanvas.instance, 88820, array14));
					num4 = num155;
				}
				GameCanvas.menu.startAt(myVector, 3);
				break;
			}
			case 38:
			{
				GameCanvas.debug("SA67", 2);
				InfoDlg.hide();
				int num156 = (int)msg.reader().readShort();
				Res.outz("OPEN_UI_SAY ID= " + num156.ToString());
				string text6 = msg.reader().readUTF();
				text6 = Res.changeString(text6);
				int num4;
				for (int num157 = 0; num157 < GameScr.vNpc.size(); num157 = num4 + 1)
				{
					Npc npc4 = (Npc)GameScr.vNpc.elementAt(num157);
					Res.outz("npc id= " + npc4.template.npcTemplateId.ToString());
					bool flag303 = npc4.template.npcTemplateId == num156;
					if (flag303)
					{
						ChatPopup.addChatPopupMultiLine(text6, 100000, npc4);
						GameCanvas.panel.hideNow();
						return;
					}
					num4 = num157;
				}
				Npc npc5 = new Npc(num156, 0, 0, 0, num156, GameScr.info1.charId[global::Char.myCharz().cgender][2]);
				bool flag304 = npc5.template.npcTemplateId == 5;
				if (flag304)
				{
					npc5.charID = 5;
				}
				try
				{
					npc5.avatar = (int)msg.reader().readShort();
				}
				catch (Exception)
				{
				}
				ChatPopup.addChatPopupMultiLine(text6, 100000, npc5);
				GameCanvas.panel.hideNow();
				break;
			}
			case 39:
			{
				GameCanvas.debug("SA49", 2);
				GameScr.gI().typeTradeOrder = 2;
				bool flag305 = GameScr.gI().typeTrade >= 2 && GameScr.gI().typeTradeOrder >= 2;
				if (flag305)
				{
					InfoDlg.showWait();
				}
				break;
			}
			case 40:
			{
				GameCanvas.debug("SA52", 2);
				GameCanvas.taskTick = 150;
				short taskId = msg.reader().readShort();
				sbyte index4 = msg.reader().readByte();
				string text7 = msg.reader().readUTF();
				text7 = Res.changeString(text7);
				string text8 = msg.reader().readUTF();
				text8 = Res.changeString(text8);
				string[] array15 = new string[(int)msg.reader().readByte()];
				string[] array16 = new string[array15.Length];
				GameScr.tasks = new int[array15.Length];
				GameScr.mapTasks = new int[array15.Length];
				short[] array17 = new short[array15.Length];
				short count = -1;
				int num4;
				for (int num158 = 0; num158 < array15.Length; num158 = num4 + 1)
				{
					string text9 = msg.reader().readUTF();
					text9 = Res.changeString(text9);
					GameScr.tasks[num158] = (int)msg.reader().readByte();
					GameScr.mapTasks[num158] = (int)msg.reader().readShort();
					string text10 = msg.reader().readUTF();
					text10 = Res.changeString(text10);
					array17[num158] = -1;
					array15[num158] = text9;
					bool flag306 = !text10.Equals(string.Empty);
					if (flag306)
					{
						array16[num158] = text10;
					}
					num4 = num158;
				}
				try
				{
					count = msg.reader().readShort();
					Cout.println(" TASK_GET count:" + count.ToString());
					for (int num159 = 0; num159 < array15.Length; num159 = num4 + 1)
					{
						array17[num159] = msg.reader().readShort();
						Cout.println(num159.ToString() + " i TASK_GET   counts[i]:" + array17[num159].ToString());
						num4 = num159;
					}
				}
				catch (Exception ex4)
				{
					Cout.println("Loi TASK_GET " + ex4.ToString());
				}
				global::Char.myCharz().taskMaint = new Task(taskId, index4, text7, text8, array15, array17, count, array16);
				bool flag307 = global::Char.myCharz().npcFocus != null;
				if (flag307)
				{
					Npc.clearEffTask();
				}
				global::Char.taskAction(true);
				break;
			}
			case 41:
			{
				GameCanvas.debug("SA53", 2);
				GameCanvas.taskTick = 100;
				Res.outz("TASK NEXT");
				Task taskMaint = global::Char.myCharz().taskMaint;
				Task task = taskMaint;
				int num4 = taskMaint.index;
				task.index = num4 + 1;
				global::Char.myCharz().taskMaint.count = 0;
				Npc.clearEffTask();
				global::Char.taskAction(true);
				break;
			}
			case 43:
			{
				GameCanvas.taskTick = 50;
				GameCanvas.debug("SA55", 2);
				global::Char.myCharz().taskMaint.count = msg.reader().readShort();
				bool flag308 = global::Char.myCharz().npcFocus != null;
				if (flag308)
				{
					Npc.clearEffTask();
				}
				try
				{
					short x_hint = msg.reader().readShort();
					short y_hint = msg.reader().readShort();
					global::Char.myCharz().x_hint = x_hint;
					global::Char.myCharz().y_hint = y_hint;
				}
				catch (Exception)
				{
				}
				break;
			}
			case 46:
				GameCanvas.debug("SA5", 2);
				Cout.LogWarning("Controler RESET_POINT  " + global::Char.ischangingMap.ToString());
				global::Char.isLockKey = false;
				global::Char.myCharz().setResetPoint((int)msg.reader().readShort(), (int)msg.reader().readShort());
				break;
			case 47:
				GameCanvas.debug("SA4", 2);
				GameScr.gI().resetButton();
				break;
			case 50:
			{
				sbyte b59 = msg.reader().readByte();
				Panel.vGameInfo.removeAllElements();
				int num4;
				for (int num160 = 0; num160 < (int)b59; num160 = num4 + 1)
				{
					GameInfo gameInfo = new GameInfo();
					gameInfo.id = msg.reader().readShort();
					gameInfo.main = msg.reader().readUTF();
					gameInfo.content = msg.reader().readUTF();
					Panel.vGameInfo.addElement(gameInfo);
					bool hasRead = Rms.loadRMSInt(gameInfo.id.ToString() + string.Empty) != -1;
					gameInfo.hasRead = hasRead;
					num4 = num160;
				}
				break;
			}
			case 54:
			{
				@char = GameScr.findCharInMap(msg.reader().readInt());
				bool flag309 = @char == null;
				if (flag309)
				{
					return;
				}
				int num161 = (int)msg.reader().readUnsignedByte();
				bool flag310 = (TileMap.tileTypeAtPixel(@char.cx, @char.cy) & 2) == 2;
				if (flag310)
				{
					@char.setSkillPaint(GameScr.sks[num161], 0);
				}
				else
				{
					@char.setSkillPaint(GameScr.sks[num161], 1);
				}
				Mob[] array18 = new Mob[10];
				i = 0;
				try
				{
					int num4;
					for (i = 0; i < array18.Length; i = num4 + 1)
					{
						Mob mob6 = array18[i] = (Mob)GameScr.vMob.elementAt((int)msg.reader().readByte());
						bool flag311 = i == 0;
						if (flag311)
						{
							bool flag312 = @char.cx <= mob6.x;
							if (flag312)
							{
								@char.cdir = 1;
							}
							else
							{
								@char.cdir = -1;
							}
						}
						num4 = i;
					}
				}
				catch (Exception)
				{
				}
				bool flag313 = i > 0;
				if (flag313)
				{
					@char.attMobs = new Mob[i];
					int num4;
					for (i = 0; i < @char.attMobs.Length; i = num4 + 1)
					{
						@char.attMobs[i] = array18[i];
						num4 = i;
					}
					@char.charFocus = null;
					@char.mobFocus = @char.attMobs[0];
				}
				break;
			}
			case 56:
			{
				GameCanvas.debug("SXX6", 2);
				@char = null;
				int num162 = msg.reader().readInt();
				bool flag314 = num162 == global::Char.myCharz().charID;
				if (flag314)
				{
					bool flag315 = false;
					@char = global::Char.myCharz();
					@char.cHP = msg.reader().readLong();
					long num163 = msg.reader().readLong();
					Res.outz("dame hit = " + num163.ToString());
					bool flag316 = num163 != 0L;
					if (flag316)
					{
						@char.doInjure();
					}
					int num164 = 0;
					try
					{
						flag315 = msg.reader().readBoolean();
						sbyte b60 = msg.reader().readByte();
						bool flag317 = b60 != -1;
						if (flag317)
						{
							Res.outz("hit eff= " + b60.ToString());
							EffecMn.addEff(new Effect((int)b60, @char.cx, @char.cy, 3, 1, -1));
						}
					}
					catch (Exception)
					{
					}
					num163 += (long)num164;
					bool flag318 = global::Char.myCharz().cTypePk != 4;
					if (flag318)
					{
						bool flag319 = num163 == 0L;
						if (flag319)
						{
							GameScr.startFlyText(mResources.miss, @char.cx, @char.cy - @char.ch, 0, -3, mFont.MISS_ME);
						}
						else
						{
							GameScr.startFlyText("-" + num163.ToString(), @char.cx, @char.cy - @char.ch, 0, -3, flag315 ? mFont.FATAL : mFont.RED);
						}
					}
				}
				else
				{
					@char = GameScr.findCharInMap(num162);
					bool flag320 = @char == null;
					if (flag320)
					{
						return;
					}
					@char.cHP = msg.reader().readLong();
					bool flag321 = false;
					long num165 = msg.reader().readLong();
					bool flag322 = num165 != 0L;
					if (flag322)
					{
						@char.doInjure();
					}
					int num166 = 0;
					try
					{
						flag321 = msg.reader().readBoolean();
						sbyte b61 = msg.reader().readByte();
						bool flag323 = b61 != -1;
						if (flag323)
						{
							Res.outz("hit eff= " + b61.ToString());
							EffecMn.addEff(new Effect((int)b61, @char.cx, @char.cy, 3, 1, -1));
						}
					}
					catch (Exception)
					{
					}
					num165 += (long)num166;
					bool flag324 = @char.cTypePk != 4;
					if (flag324)
					{
						bool flag325 = num165 == 0L;
						if (flag325)
						{
							GameScr.startFlyText(mResources.miss, @char.cx, @char.cy - @char.ch, 0, -3, mFont.MISS);
						}
						else
						{
							GameScr.startFlyText("-" + num165.ToString(), @char.cx, @char.cy - @char.ch, 0, -3, flag321 ? mFont.FATAL : mFont.ORANGE);
						}
					}
				}
				break;
			}
			case 57:
			{
				GameCanvas.debug("SZ6", 2);
				MyVector myVector2 = new MyVector();
				myVector2.addElement(new Command(msg.reader().readUTF(), GameCanvas.instance, 88817, null));
				GameCanvas.menu.startAt(myVector2, 3);
				break;
			}
			case 58:
			{
				GameCanvas.debug("SZ7", 2);
				int num167 = msg.reader().readInt();
				global::Char char12 = (num167 != global::Char.myCharz().charID) ? GameScr.findCharInMap(num167) : global::Char.myCharz();
				char12.moveFast = new short[3];
				char12.moveFast[0] = 0;
				short num168 = msg.reader().readShort();
				short num169 = msg.reader().readShort();
				char12.moveFast[1] = num168;
				char12.moveFast[2] = num169;
				try
				{
					num167 = msg.reader().readInt();
					global::Char char13 = (num167 != global::Char.myCharz().charID) ? GameScr.findCharInMap(num167) : global::Char.myCharz();
					char13.cx = (int)num168;
					char13.cy = (int)num169;
				}
				catch (Exception ex5)
				{
					Cout.println("Loi MOVE_FAST " + ex5.ToString());
				}
				break;
			}
			case 62:
			{
				GameCanvas.debug("SZ3", 2);
				@char = GameScr.findCharInMap(msg.reader().readInt());
				bool flag326 = @char != null;
				if (flag326)
				{
					@char.killCharId = global::Char.myCharz().charID;
					global::Char.myCharz().npcFocus = null;
					global::Char.myCharz().mobFocus = null;
					global::Char.myCharz().itemFocus = null;
					global::Char.myCharz().charFocus = @char;
					global::Char.isManualFocus = true;
					GameScr.info1.addInfo(@char.cName + mResources.CUU_SAT, 0);
				}
				break;
			}
			case 63:
				GameCanvas.debug("SZ4", 2);
				global::Char.myCharz().killCharId = msg.reader().readInt();
				global::Char.myCharz().npcFocus = null;
				global::Char.myCharz().mobFocus = null;
				global::Char.myCharz().itemFocus = null;
				global::Char.myCharz().charFocus = GameScr.findCharInMap(global::Char.myCharz().killCharId);
				global::Char.isManualFocus = true;
				break;
			case 64:
				GameCanvas.debug("SZ5", 2);
				@char = global::Char.myCharz();
				try
				{
					@char = GameScr.findCharInMap(msg.reader().readInt());
				}
				catch (Exception ex6)
				{
					Cout.println("Loi CLEAR_CUU_SAT " + ex6.ToString());
				}
				@char.killCharId = -9999;
				break;
			case 65:
			{
				sbyte id6 = msg.reader().readSByte();
				string text11 = msg.reader().readUTF();
				short num170 = msg.reader().readShort();
				bool flag327 = ItemTime.isExistMessage((int)id6);
				if (flag327)
				{
					bool flag328 = num170 != 0;
					if (flag328)
					{
						ItemTime.getMessageById((int)id6).initTimeText(id6, text11, (int)num170);
					}
					else
					{
						GameScr.textTime.removeElement(ItemTime.getMessageById((int)id6));
					}
				}
				else
				{
					ItemTime itemTime = new ItemTime();
					itemTime.initTimeText(id6, text11, (int)num170);
					GameScr.textTime.addElement(itemTime);
				}
				break;
			}
			case 66:
				this.readGetImgByName(msg);
				break;
			case 68:
			{
				Res.outz("ADD ITEM TO MAP --------------------------------------");
				GameCanvas.debug("SA6333", 2);
				short itemMapID = msg.reader().readShort();
				short itemTemplateID = msg.reader().readShort();
				int x = (int)msg.reader().readShort();
				int y = (int)msg.reader().readShort();
				int num171 = msg.reader().readInt();
				short r = 0;
				bool flag329 = num171 == -2;
				if (flag329)
				{
					r = msg.reader().readShort();
				}
				ItemMap itemMap3 = new ItemMap(num171, itemMapID, itemTemplateID, x, y, r);
				bool flag330 = false;
				int num4;
				for (int num172 = 0; num172 < GameScr.vItemMap.size(); num172 = num4 + 1)
				{
					ItemMap itemMap4 = (ItemMap)GameScr.vItemMap.elementAt(num172);
					bool flag331 = itemMap4.itemMapID == itemMap3.itemMapID;
					if (flag331)
					{
						flag330 = true;
						break;
					}
					num4 = num172;
				}
				bool flag332 = !flag330;
				if (flag332)
				{
					GameScr.vItemMap.addElement(itemMap3);
				}
				break;
			}
			case 69:
				SoundMn.IsDelAcc = (msg.reader().readByte() != 0);
				break;
			case 81:
			{
				GameCanvas.debug("SXX4", 2);
				Mob mob7 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
				mob7.isDisable = msg.reader().readBool();
				break;
			}
			case 82:
			{
				GameCanvas.debug("SXX5", 2);
				Mob mob8 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
				mob8.isDontMove = msg.reader().readBool();
				break;
			}
			case 83:
			{
				GameCanvas.debug("SXX8", 2);
				int num173 = msg.reader().readInt();
				@char = ((num173 != global::Char.myCharz().charID) ? GameScr.findCharInMap(num173) : global::Char.myCharz());
				bool flag333 = @char == null;
				if (flag333)
				{
					return;
				}
				Mob mobToAttack = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
				bool flag334 = @char.mobMe != null;
				if (flag334)
				{
					@char.mobMe.attackOtherMob(mobToAttack);
				}
				break;
			}
			case 84:
			{
				int num174 = msg.reader().readInt();
				bool flag335 = num174 == global::Char.myCharz().charID;
				if (flag335)
				{
					@char = global::Char.myCharz();
				}
				else
				{
					@char = GameScr.findCharInMap(num174);
					bool flag336 = @char == null;
					if (flag336)
					{
						return;
					}
				}
				@char.cHP = @char.cHPFull;
				@char.cMP = @char.cMPFull;
				@char.cx = (int)msg.reader().readShort();
				@char.cy = (int)msg.reader().readShort();
				@char.liveFromDead();
				break;
			}
			case 85:
			{
				GameCanvas.debug("SXX5", 2);
				Mob mob9 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
				mob9.isFire = msg.reader().readBool();
				break;
			}
			case 86:
			{
				GameCanvas.debug("SXX5", 2);
				Mob mob10 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
				mob10.isIce = msg.reader().readBool();
				bool flag337 = !mob10.isIce;
				if (flag337)
				{
					ServerEffect.addServerEffect(77, mob10.x, mob10.y - 9, 1);
				}
				break;
			}
			case 87:
			{
				GameCanvas.debug("SXX5", 2);
				Mob mob11 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
				mob11.isWind = msg.reader().readBool();
				break;
			}
			case 88:
			{
				string info4 = msg.reader().readUTF();
				short num175 = msg.reader().readShort();
				GameCanvas.inputDlg.show(info4, new Command(mResources.ACCEPT, GameCanvas.instance, 88818, num175), TField.INPUT_TYPE_ANY);
				break;
			}
			case 90:
				GameCanvas.debug("SA577", 2);
				this.requestItemPlayer(msg);
				break;
			case 92:
			{
				bool flag338 = GameCanvas.currentScreen == GameScr.instance;
				if (flag338)
				{
					GameCanvas.endDlg();
				}
				string text12 = msg.reader().readUTF();
				string text13 = msg.reader().readUTF();
				text13 = Res.changeString(text13);
				string text14 = string.Empty;
				global::Char char14 = null;
				sbyte b62 = 0;
				bool flag339 = !text12.Equals(string.Empty);
				if (flag339)
				{
					char14 = new global::Char();
					char14.charID = msg.reader().readInt();
					char14.head = (int)msg.reader().readShort();
					char14.headICON = (int)msg.reader().readShort();
					char14.body = (int)msg.reader().readShort();
					char14.bag = (int)msg.reader().readShort();
					char14.leg = (int)msg.reader().readShort();
					b62 = msg.reader().readByte();
					char14.cName = text12;
				}
				text14 += text13;
				InfoDlg.hide();
				bool flag340 = text12.Equals(string.Empty);
				if (flag340)
				{
					GameScr.info1.addInfo(text14, 0);
				}
				else
				{
					GameScr.info2.addInfoWithChar(text14, char14, b62 == 0);
					bool flag341 = GameCanvas.panel.isShow && GameCanvas.panel.type == 8;
					if (flag341)
					{
						GameCanvas.panel.initLogMessage();
					}
				}
				break;
			}
			case 94:
				GameCanvas.debug("SA3", 2);
				GameScr.info1.addInfo(msg.reader().readUTF(), 0);
				break;
			default:
				if (b == 112)
				{
					sbyte b63 = msg.reader().readByte();
					Res.outz("spec type= " + b63.ToString());
					bool flag342 = b63 == 0;
					if (flag342)
					{
						Panel.spearcialImage = msg.reader().readShort();
						Panel.specialInfo = msg.reader().readUTF();
					}
					else
					{
						bool flag343 = b63 != 1;
						if (!flag343)
						{
							sbyte b64 = msg.reader().readByte();
							global::Char.myCharz().infoSpeacialSkill = new string[(int)b64][];
							global::Char.myCharz().imgSpeacialSkill = new short[(int)b64][];
							GameCanvas.panel.speacialTabName = new string[(int)b64][];
							int num4;
							for (int num176 = 0; num176 < (int)b64; num176 = num4 + 1)
							{
								GameCanvas.panel.speacialTabName[num176] = new string[2];
								string[] array19 = Res.split(msg.reader().readUTF(), "\n", 0);
								bool flag344 = array19.Length == 2;
								if (flag344)
								{
									GameCanvas.panel.speacialTabName[num176] = array19;
								}
								bool flag345 = array19.Length == 1;
								if (flag345)
								{
									GameCanvas.panel.speacialTabName[num176][0] = array19[0];
									GameCanvas.panel.speacialTabName[num176][1] = string.Empty;
								}
								int num177 = (int)msg.reader().readByte();
								global::Char.myCharz().infoSpeacialSkill[num176] = new string[num177];
								global::Char.myCharz().imgSpeacialSkill[num176] = new short[num177];
								for (int num178 = 0; num178 < num177; num178 = num4 + 1)
								{
									global::Char.myCharz().imgSpeacialSkill[num176][num178] = msg.reader().readShort();
									global::Char.myCharz().infoSpeacialSkill[num176][num178] = msg.reader().readUTF();
									num4 = num178;
								}
								num4 = num176;
							}
							GameCanvas.panel.tabName[25] = GameCanvas.panel.speacialTabName;
							GameCanvas.panel.setTypeSpeacialSkill();
							GameCanvas.panel.show();
						}
					}
				}
				break;
			}
			sbyte command2 = msg.command;
			sbyte b65 = command2;
			if (b65 <= 19)
			{
				if (b65 <= -73)
				{
					if (b65 != -75)
					{
						if (b65 == -73)
						{
							sbyte b66 = msg.reader().readByte();
							int num4;
							for (int num179 = 0; num179 < GameScr.vNpc.size(); num179 = num4 + 1)
							{
								Npc npc6 = (Npc)GameScr.vNpc.elementAt(num179);
								bool flag346 = npc6.template.npcTemplateId == (int)b66;
								if (flag346)
								{
									sbyte b67 = msg.reader().readByte();
									bool flag347 = b67 == 0;
									if (flag347)
									{
										npc6.isHide = true;
									}
									else
									{
										npc6.isHide = false;
									}
									break;
								}
								num4 = num179;
							}
						}
					}
					else
					{
						Mob mob12 = null;
						try
						{
							mob12 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
						}
						catch (Exception)
						{
						}
						bool flag348 = mob12 != null;
						if (flag348)
						{
							mob12.levelBoss = msg.reader().readByte();
							bool flag349 = mob12.levelBoss > 0;
							if (flag349)
							{
								mob12.typeSuperEff = Res.random(0, 3);
							}
						}
					}
				}
				else
				{
					switch (b65)
					{
					case -17:
						GameCanvas.debug("SA88", 2);
						global::Char.myCharz().meDead = true;
						global::Char.myCharz().cPk = msg.reader().readByte();
						global::Char.myCharz().startDie(msg.reader().readShort(), msg.reader().readShort());
						try
						{
							global::Char.myCharz().cPower = msg.reader().readLong();
							global::Char.myCharz().applyCharLevelPercent();
						}
						catch (Exception)
						{
							Cout.println("Loi tai ME_DIE " + msg.command.ToString());
						}
						global::Char.myCharz().countKill = 0;
						break;
					case -16:
					{
						GameCanvas.debug("SA90", 2);
						bool flag350 = global::Char.myCharz().wdx != 0 || global::Char.myCharz().wdy != 0;
						if (flag350)
						{
							global::Char.myCharz().cx = (int)global::Char.myCharz().wdx;
							global::Char.myCharz().cy = (int)global::Char.myCharz().wdy;
							global::Char.myCharz().wdx = (global::Char.myCharz().wdy = 0);
						}
						global::Char.myCharz().liveFromDead();
						global::Char.myCharz().isLockMove = false;
						global::Char.myCharz().meDead = false;
						break;
					}
					case -15:
					case -14:
					case -4:
						break;
					case -13:
					{
						GameCanvas.debug("SA82", 2);
						int num180 = (int)msg.reader().readUnsignedByte();
						bool flag351 = num180 > GameScr.vMob.size() - 1 || num180 < 0;
						if (flag351)
						{
							return;
						}
						Mob mob13 = (Mob)GameScr.vMob.elementAt(num180);
						mob13.sys = (int)msg.reader().readByte();
						mob13.levelBoss = msg.reader().readByte();
						bool flag352 = mob13.levelBoss != 0;
						if (flag352)
						{
							mob13.typeSuperEff = Res.random(0, 3);
						}
						mob13.x = mob13.xFirst;
						mob13.y = mob13.yFirst;
						mob13.status = 5;
						mob13.injureThenDie = false;
						mob13.hp = msg.reader().readLong();
						mob13.maxHp = mob13.hp;
						mob13.updateHp_bar();
						ServerEffect.addServerEffect(60, mob13.x, mob13.y, 1);
						break;
					}
					case -12:
					{
						Res.outz("SERVER SEND MOB DIE");
						GameCanvas.debug("SA85", 2);
						Mob mob14 = null;
						try
						{
							mob14 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
						}
						catch (Exception)
						{
							Cout.println("LOi tai NPC_DIE cmd " + msg.command.ToString());
						}
						bool flag353 = mob14 == null || mob14.status == 0 || mob14.status == 0;
						if (!flag353)
						{
							mob14.startDie();
							try
							{
								long num181 = msg.reader().readLong();
								bool flag354 = msg.reader().readBool();
								if (flag354)
								{
									GameScr.startFlyText("-" + num181.ToString(), mob14.x, mob14.y - mob14.h, 0, -2, mFont.FATAL);
								}
								else
								{
									GameScr.startFlyText("-" + num181.ToString(), mob14.x, mob14.y - mob14.h, 0, -2, mFont.ORANGE);
								}
								sbyte b68 = msg.reader().readByte();
								int num4;
								for (int num182 = 0; num182 < (int)b68; num182 = num4 + 1)
								{
									ItemMap itemMap5 = new ItemMap(msg.reader().readShort(), msg.reader().readShort(), mob14.x, mob14.y, (int)msg.reader().readShort(), (int)msg.reader().readShort());
									int num183 = itemMap5.playerId = msg.reader().readInt();
									Res.outz("playerid= " + num183.ToString() + " my id= " + global::Char.myCharz().charID.ToString());
									GameScr.vItemMap.addElement(itemMap5);
									bool flag355 = Res.abs(itemMap5.y - global::Char.myCharz().cy) < 24 && Res.abs(itemMap5.x - global::Char.myCharz().cx) < 24;
									if (flag355)
									{
										global::Char.myCharz().charFocus = null;
									}
									num4 = num182;
								}
							}
							catch (Exception)
							{
							}
						}
						break;
					}
					case -11:
					{
						GameCanvas.debug("SA86", 2);
						Mob mob15 = null;
						try
						{
							int index5 = (int)msg.reader().readUnsignedByte();
							mob15 = (Mob)GameScr.vMob.elementAt(index5);
						}
						catch (Exception ex7)
						{
							Res.outz("Loi tai NPC_ATTACK_ME " + msg.command.ToString() + " err= " + ex7.StackTrace);
						}
						bool flag356 = mob15 != null;
						if (flag356)
						{
							global::Char.myCharz().isDie = false;
							global::Char.isLockKey = false;
							long num184 = msg.reader().readLong();
							long num185;
							try
							{
								num185 = msg.reader().readLong();
							}
							catch (Exception)
							{
								num185 = 0L;
							}
							bool isBusyAttackSomeOne4 = mob15.isBusyAttackSomeOne;
							if (isBusyAttackSomeOne4)
							{
								global::Char.myCharz().doInjure(num184, num185, false, true);
							}
							else
							{
								mob15.dame = num184;
								mob15.dameMp = num185;
								mob15.setAttack(global::Char.myCharz());
							}
						}
						break;
					}
					case -10:
					{
						GameCanvas.debug("SA87", 2);
						Mob mob16 = null;
						try
						{
							mob16 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
						}
						catch (Exception)
						{
						}
						GameCanvas.debug("SA87x1", 2);
						bool flag357 = mob16 != null;
						if (flag357)
						{
							GameCanvas.debug("SA87x2", 2);
							@char = GameScr.findCharInMap(msg.reader().readInt());
							bool flag358 = @char == null;
							if (flag358)
							{
								return;
							}
							GameCanvas.debug("SA87x3", 2);
							long num186 = msg.reader().readLong();
							mob16.dame = @char.cHP - num186;
							@char.cHPNew = num186;
							GameCanvas.debug("SA87x4", 2);
							try
							{
								@char.cMP = msg.reader().readLong();
							}
							catch (Exception)
							{
							}
							GameCanvas.debug("SA87x5", 2);
							bool isBusyAttackSomeOne5 = mob16.isBusyAttackSomeOne;
							if (isBusyAttackSomeOne5)
							{
								@char.doInjure(mob16.dame, 0L, false, true);
							}
							else
							{
								mob16.setAttack(@char);
							}
							GameCanvas.debug("SA87x6", 2);
						}
						break;
					}
					case -9:
					{
						GameCanvas.debug("SA83", 2);
						Mob mob17 = null;
						try
						{
							mob17 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
						}
						catch (Exception)
						{
						}
						GameCanvas.debug("SA83v1", 2);
						bool flag359 = mob17 != null;
						if (flag359)
						{
							mob17.hp = msg.reader().readLong();
							mob17.updateHp_bar();
							long num187 = msg.reader().readLong();
							bool flag360 = num187 == 1L;
							if (flag360)
							{
								return;
							}
							bool flag361 = num187 > 1L;
							if (flag361)
							{
								mob17.setInjure();
							}
							bool flag362 = false;
							try
							{
								flag362 = msg.reader().readBoolean();
							}
							catch (Exception)
							{
							}
							sbyte b69 = msg.reader().readByte();
							bool flag363 = b69 != -1;
							if (flag363)
							{
								EffecMn.addEff(new Effect((int)b69, mob17.x, mob17.getY(), 3, 1, -1));
							}
							GameCanvas.debug("SA83v2", 2);
							bool flag364 = flag362;
							if (flag364)
							{
								GameScr.startFlyText("-" + num187.ToString(), mob17.x, mob17.getY() - mob17.getH(), 0, -2, mFont.FATAL);
							}
							else
							{
								bool flag365 = num187 == 0L;
								if (flag365)
								{
									mob17.x = mob17.xFirst;
									mob17.y = mob17.yFirst;
									GameScr.startFlyText(mResources.miss, mob17.x, mob17.getY() - mob17.getH(), 0, -2, mFont.MISS);
								}
								else
								{
									bool flag366 = num187 > 1L;
									if (flag366)
									{
										GameScr.startFlyText("-" + num187.ToString(), mob17.x, mob17.getY() - mob17.getH(), 0, -2, mFont.ORANGE);
									}
								}
							}
						}
						GameCanvas.debug("SA83v3", 2);
						break;
					}
					case -8:
					{
						GameCanvas.debug("SA89", 2);
						@char = GameScr.findCharInMap(msg.reader().readInt());
						bool flag367 = @char == null;
						if (flag367)
						{
							return;
						}
						@char.cPk = msg.reader().readByte();
						@char.waitToDie(msg.reader().readShort(), msg.reader().readShort());
						break;
					}
					case -7:
					{
						GameCanvas.debug("SA80", 2);
						int num188 = msg.reader().readInt();
						int num189 = 0;
						while (num189 < GameScr.vCharInMap.size())
						{
							global::Char char15 = null;
							try
							{
								char15 = (global::Char)GameScr.vCharInMap.elementAt(num189);
							}
							catch (Exception)
							{
								goto IL_C671;
							}
							goto IL_C5EE;
							IL_C671:
							int num4 = num189;
							num189 = num4 + 1;
							continue;
							IL_C5EE:
							bool flag368 = char15 == null || char15.charID != num188;
							if (flag368)
							{
								goto IL_C671;
							}
							GameCanvas.debug("SA8x2y" + num189.ToString(), 2);
							char15.moveTo((int)msg.reader().readShort(), (int)msg.reader().readShort(), 0);
							char15.lastUpdateTime = mSystem.currentTimeMillis();
							break;
						}
						GameCanvas.debug("SA80x3", 2);
						break;
					}
					case -6:
					{
						GameCanvas.debug("SA81", 2);
						int num190 = msg.reader().readInt();
						int num4;
						for (int num191 = 0; num191 < GameScr.vCharInMap.size(); num191 = num4 + 1)
						{
							global::Char char16 = (global::Char)GameScr.vCharInMap.elementAt(num191);
							bool flag369 = char16 != null && char16.charID == num190;
							if (flag369)
							{
								bool flag370 = !char16.isInvisiblez && !char16.isUsePlane;
								if (flag370)
								{
									ServerEffect.addServerEffect(60, char16.cx, char16.cy, 1);
								}
								bool flag371 = !char16.isUsePlane;
								if (flag371)
								{
									GameScr.vCharInMap.removeElementAt(num191);
								}
								return;
							}
							num4 = num191;
						}
						break;
					}
					case -5:
					{
						GameCanvas.debug("SA79", 2);
						int charID = msg.reader().readInt();
						int num192 = msg.reader().readInt();
						bool flag372 = num192 != -100;
						global::Char char17;
						if (flag372)
						{
							char17 = new global::Char();
							char17.charID = charID;
							char17.clanID = num192;
						}
						else
						{
							char17 = new Mabu();
							char17.charID = charID;
							char17.clanID = num192;
						}
						bool flag373 = char17.clanID == -2;
						if (flag373)
						{
							char17.isCopy = true;
						}
						bool flag374 = this.readCharInfo(char17, msg);
						if (flag374)
						{
							sbyte b70 = msg.reader().readByte();
							bool flag375 = char17.cy <= 10 && b70 != 0 && b70 != 2;
							if (flag375)
							{
								Res.outz("nhân vật bay trên trời xuống x= " + char17.cx.ToString() + " y= " + char17.cy.ToString());
								Teleport teleport = new Teleport(char17.cx, char17.cy, char17.head, char17.cdir, 1, false, (b70 != 1) ? ((int)b70) : char17.cgender);
								teleport.id = char17.charID;
								char17.isTeleport = true;
								Teleport.addTeleport(teleport);
							}
							bool flag376 = b70 == 2;
							if (flag376)
							{
								char17.show();
							}
							int num4;
							for (int num193 = 0; num193 < GameScr.vMob.size(); num193 = num4 + 1)
							{
								Mob mob18 = (Mob)GameScr.vMob.elementAt(num193);
								bool flag377 = mob18 != null && mob18.isMobMe && mob18.mobId == char17.charID;
								if (flag377)
								{
									Res.outz("co 1 con quai");
									char17.mobMe = mob18;
									char17.mobMe.x = char17.cx;
									char17.mobMe.y = char17.cy - 40;
									break;
								}
								num4 = num193;
							}
							bool flag378 = GameScr.findCharInMap(char17.charID) == null;
							if (flag378)
							{
								GameScr.vCharInMap.addElement(char17);
							}
							char17.isMonkey = msg.reader().readByte();
							short num194 = msg.reader().readShort();
							Res.outz("mount id= " + num194.ToString() + "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
							bool flag379 = num194 != -1;
							if (flag379)
							{
								char17.isHaveMount = true;
								short num195 = num194;
								short num196 = num195;
								if (num196 <= 351)
								{
									if (num196 - 346 <= 2)
									{
										char17.isMountVip = false;
										goto IL_C3D5;
									}
									if (num196 - 349 <= 2)
									{
										char17.isMountVip = true;
										goto IL_C3D5;
									}
								}
								else
								{
									if (num196 == 396)
									{
										char17.isEventMount = true;
										goto IL_C3D5;
									}
									if (num196 == 532)
									{
										char17.isSpeacialMount = true;
										goto IL_C3D5;
									}
								}
								bool flag380 = num194 >= global::Char.ID_NEW_MOUNT;
								if (flag380)
								{
									char17.idMount = num194;
								}
								IL_C3D5:;
							}
							else
							{
								char17.isHaveMount = false;
							}
						}
						sbyte cFlag = msg.reader().readByte();
						Res.outz("addplayer:   " + cFlag.ToString());
						char17.cFlag = cFlag;
						char17.isNhapThe = (msg.reader().readByte() == 1);
						try
						{
							char17.idAuraEff = msg.reader().readShort();
							char17.idEff_Set_Item = (short)msg.reader().readSByte();
							char17.idHat = msg.reader().readShort();
							bool flag381 = char17.bag >= 201 && char17.bag < 255;
							if (flag381)
							{
								char17.addEffChar(new Effect(char17.bag, char17, 2, -1, 10, 1)
								{
									typeEff = 5
								});
							}
							else
							{
								int num4;
								for (int num197 = 0; num197 < 54; num197 = num4 + 1)
								{
									char17.removeEffChar(0, 201 + num197);
									num4 = num197;
								}
							}
						}
						catch (Exception ex8)
						{
							Res.outz("cmd: -5 err: " + ex8.StackTrace);
						}
						GameScr.gI().getFlagImage(char17.charID, char17.cFlag);
						break;
					}
					case -3:
					{
						GameCanvas.debug("SA78", 2);
						sbyte b71 = msg.reader().readByte();
						int num198 = msg.reader().readInt();
						bool flag382 = b71 == 0;
						if (flag382)
						{
							global::Char char10 = global::Char.myCharz();
							char10.cPower += (long)num198;
						}
						bool flag383 = b71 == 1;
						if (flag383)
						{
							global::Char char10 = global::Char.myCharz();
							char10.cTiemNang += (long)num198;
						}
						bool flag384 = b71 == 2;
						if (flag384)
						{
							global::Char char10 = global::Char.myCharz();
							char10.cPower += (long)num198;
							char10 = global::Char.myCharz();
							char10.cTiemNang += (long)num198;
						}
						global::Char.myCharz().applyCharLevelPercent();
						bool flag385 = global::Char.myCharz().cTypePk != 3;
						if (flag385)
						{
							GameScr.startFlyText(((num198 <= 0) ? string.Empty : "+") + num198.ToString(), global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch, 0, -4, mFont.GREEN);
							bool flag386 = num198 > 0 && global::Char.myCharz().petFollow != null && global::Char.myCharz().petFollow.smallID == 5002;
							if (flag386)
							{
								ServerEffect.addServerEffect(55, global::Char.myCharz().petFollow.cmx, global::Char.myCharz().petFollow.cmy, 1);
								ServerEffect.addServerEffect(55, global::Char.myCharz().cx, global::Char.myCharz().cy, 1);
							}
						}
						break;
					}
					case -2:
					{
						GameCanvas.debug("SA77", 22);
						int num199 = msg.reader().readInt();
						global::Char char10 = global::Char.myCharz();
						char10.yen += num199;
						GameScr.startFlyText((num199 <= 0) ? (string.Empty + num199.ToString()) : ("+" + num199.ToString()), global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch - 10, 0, -2, mFont.YELLOW);
						break;
					}
					case -1:
					{
						GameCanvas.debug("SA77", 222);
						int num200 = msg.reader().readInt();
						global::Char char10 = global::Char.myCharz();
						char10.xu += (long)num200;
						global::Char.myCharz().xuStr = Res.formatNumber(global::Char.myCharz().xu);
						char10 = global::Char.myCharz();
						char10.yen -= num200;
						GameScr.startFlyText("+" + num200.ToString(), global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch - 10, 0, -2, mFont.YELLOW);
						break;
					}
					default:
						if (b65 != 18)
						{
							if (b65 == 19)
							{
								global::Char.myCharz().countKill = (int)msg.reader().readUnsignedShort();
								global::Char.myCharz().countKillMax = (int)msg.reader().readUnsignedShort();
							}
						}
						else
						{
							sbyte b72 = msg.reader().readByte();
							int num4;
							for (int num201 = 0; num201 < (int)b72; num201 = num4 + 1)
							{
								int charId = msg.reader().readInt();
								int cx = (int)msg.reader().readShort();
								int cy = (int)msg.reader().readShort();
								long cHPShow = msg.reader().readLong();
								global::Char char18 = GameScr.findCharInMap(charId);
								bool flag387 = char18 != null;
								if (flag387)
								{
									char18.cx = cx;
									char18.cy = cy;
									char18.cHP = (char18.cHPShow = cHPShow);
									char18.lastUpdateTime = mSystem.currentTimeMillis();
								}
								num4 = num201;
							}
						}
						break;
					}
				}
			}
			else if (b65 <= 45)
			{
				if (b65 != 44)
				{
					if (b65 == 45)
					{
						GameCanvas.debug("SA84", 2);
						Mob mob19 = null;
						try
						{
							mob19 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
						}
						catch (Exception ex9)
						{
							Cout.println("Loi tai NPC_MISS  " + ex9.ToString());
						}
						bool flag388 = mob19 != null;
						if (flag388)
						{
							mob19.hp = msg.reader().readLong();
							mob19.updateHp_bar();
							GameScr.startFlyText(mResources.miss, mob19.x, mob19.y - mob19.h, 0, -2, mFont.MISS);
						}
					}
				}
				else
				{
					GameCanvas.debug("SA91", 2);
					int num202 = msg.reader().readInt();
					string text15 = msg.reader().readUTF();
					Res.outz("user id= " + num202.ToString() + " text= " + text15);
					@char = ((global::Char.myCharz().charID != num202) ? GameScr.findCharInMap(num202) : global::Char.myCharz());
					bool flag389 = @char == null;
					if (flag389)
					{
						return;
					}
					@char.addInfo(text15);
				}
			}
			else if (b65 != 66)
			{
				if (b65 != 74)
				{
					switch (b65)
					{
					case 95:
					{
						GameCanvas.debug("SA77", 22);
						int num203 = msg.reader().readInt();
						global::Char char10 = global::Char.myCharz();
						char10.xu += (long)num203;
						global::Char.myCharz().xuStr = Res.formatNumber(global::Char.myCharz().xu);
						GameScr.startFlyText((num203 <= 0) ? (string.Empty + num203.ToString()) : ("+" + num203.ToString()), global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch - 10, 0, -2, mFont.YELLOW);
						break;
					}
					case 96:
						GameCanvas.debug("SA77a", 22);
						global::Char.myCharz().taskOrders.addElement(new TaskOrder(msg.reader().readByte(), msg.reader().readShort(), msg.reader().readShort(), msg.reader().readUTF(), msg.reader().readUTF(), msg.reader().readByte(), msg.reader().readByte()));
						break;
					case 97:
					{
						sbyte b73 = msg.reader().readByte();
						int num4;
						for (int num204 = 0; num204 < global::Char.myCharz().taskOrders.size(); num204 = num4 + 1)
						{
							TaskOrder taskOrder = (TaskOrder)global::Char.myCharz().taskOrders.elementAt(num204);
							bool flag390 = taskOrder.taskId == (int)b73;
							if (flag390)
							{
								taskOrder.count = (int)msg.reader().readShort();
								break;
							}
							num4 = num204;
						}
						break;
					}
					}
				}
				else
				{
					GameCanvas.debug("SA85", 2);
					Mob mob20 = null;
					try
					{
						mob20 = (Mob)GameScr.vMob.elementAt((int)msg.reader().readUnsignedByte());
					}
					catch (Exception)
					{
						Cout.println("Loi tai NPC CHANGE " + msg.command.ToString());
					}
					bool flag391 = mob20 != null && mob20.status != 0 && mob20.status != 0;
					if (flag391)
					{
						mob20.status = 0;
						ServerEffect.addServerEffect(60, mob20.x, mob20.y, 1);
						ItemMap itemMap6 = new ItemMap(msg.reader().readShort(), msg.reader().readShort(), mob20.x, mob20.y, (int)msg.reader().readShort(), (int)msg.reader().readShort());
						GameScr.vItemMap.addElement(itemMap6);
						bool flag392 = Res.abs(itemMap6.y - global::Char.myCharz().cy) < 24 && Res.abs(itemMap6.x - global::Char.myCharz().cx) < 24;
						if (flag392)
						{
							global::Char.myCharz().charFocus = null;
						}
					}
				}
			}
			else
			{
				Res.outz("ME DIE XP DOWN NOT IMPLEMENT YET!!!!!!!!!!!!!!!!!!!!!!!!!!");
			}
			GameCanvas.debug("SA92", 2);
		}
		catch (Exception ex10)
		{
			string[] array20 = new string[6];
			array20[0] = "[Controller] [error] ";
			array20[1] = ex10.StackTrace;
			array20[2] = " msg: ";
			array20[3] = ex10.Message;
			array20[4] = " cause ";
			int num205 = 5;
			IDictionary data4 = ex10.Data;
			array20[num205] = ((data4 != null) ? data4.ToString() : null);
			Res.err(string.Concat(array20));
		}
		finally
		{
			if (msg != null)
			{
				msg.cleanup();
			}
		}
	}

	// Token: 0x060002E2 RID: 738 RVA: 0x00037A10 File Offset: 0x00035C10
	private void readLogin(Message msg)
	{
		sbyte b = msg.reader().readByte();
		ChooseCharScr.playerData = new PlayerData[(int)b];
		Res.outz("[LEN] sl nguoi choi " + b.ToString());
		for (int i = 0; i < (int)b; i++)
		{
			int playerID = msg.reader().readInt();
			string name = msg.reader().readUTF();
			short head = msg.reader().readShort();
			short body = msg.reader().readShort();
			short leg = msg.reader().readShort();
			long ppoint = msg.reader().readLong();
			ChooseCharScr.playerData[i] = new PlayerData(playerID, name, head, body, leg, ppoint);
		}
		GameCanvas.chooseCharScr.switchToMe();
		GameCanvas.chooseCharScr.updateChooseCharacter((byte)b);
	}

	// Token: 0x060002E3 RID: 739 RVA: 0x00037ADC File Offset: 0x00035CDC
	private void createSkill(myReader d)
	{
		GameScr.vcSkill = d.readByte();
		GameScr.gI().sOptionTemplates = new SkillOptionTemplate[(int)d.readByte()];
		for (int i = 0; i < GameScr.gI().sOptionTemplates.Length; i++)
		{
			GameScr.gI().sOptionTemplates[i] = new SkillOptionTemplate();
			GameScr.gI().sOptionTemplates[i].id = i;
			GameScr.gI().sOptionTemplates[i].name = d.readUTF();
		}
		GameScr.nClasss = new NClass[(int)d.readByte()];
		for (int j = 0; j < GameScr.nClasss.Length; j++)
		{
			GameScr.nClasss[j] = new NClass();
			GameScr.nClasss[j].classId = j;
			GameScr.nClasss[j].name = d.readUTF();
			GameScr.nClasss[j].skillTemplates = new SkillTemplate[(int)d.readByte()];
			for (int k = 0; k < GameScr.nClasss[j].skillTemplates.Length; k++)
			{
				GameScr.nClasss[j].skillTemplates[k] = new SkillTemplate();
				GameScr.nClasss[j].skillTemplates[k].id = d.readByte();
				GameScr.nClasss[j].skillTemplates[k].name = d.readUTF();
				GameScr.nClasss[j].skillTemplates[k].maxPoint = (int)d.readByte();
				GameScr.nClasss[j].skillTemplates[k].manaUseType = (int)d.readByte();
				GameScr.nClasss[j].skillTemplates[k].type = (int)d.readByte();
				GameScr.nClasss[j].skillTemplates[k].iconId = (int)d.readShort();
				GameScr.nClasss[j].skillTemplates[k].damInfo = d.readUTF();
				int lineWidth = 130;
				bool flag = GameCanvas.w == 128 || GameCanvas.h <= 208;
				if (flag)
				{
					lineWidth = 100;
				}
				GameScr.nClasss[j].skillTemplates[k].description = mFont.tahoma_7_green2.splitFontArray(d.readUTF(), lineWidth);
				GameScr.nClasss[j].skillTemplates[k].skills = new Skill[(int)d.readByte()];
				for (int l = 0; l < GameScr.nClasss[j].skillTemplates[k].skills.Length; l++)
				{
					GameScr.nClasss[j].skillTemplates[k].skills[l] = new Skill();
					GameScr.nClasss[j].skillTemplates[k].skills[l].skillId = d.readShort();
					GameScr.nClasss[j].skillTemplates[k].skills[l].template = GameScr.nClasss[j].skillTemplates[k];
					GameScr.nClasss[j].skillTemplates[k].skills[l].point = (int)d.readByte();
					GameScr.nClasss[j].skillTemplates[k].skills[l].powRequire = d.readLong();
					GameScr.nClasss[j].skillTemplates[k].skills[l].manaUse = (int)d.readShort();
					GameScr.nClasss[j].skillTemplates[k].skills[l].coolDown = d.readInt();
					GameScr.nClasss[j].skillTemplates[k].skills[l].dx = (int)d.readShort();
					GameScr.nClasss[j].skillTemplates[k].skills[l].dy = (int)d.readShort();
					GameScr.nClasss[j].skillTemplates[k].skills[l].maxFight = (int)d.readByte();
					GameScr.nClasss[j].skillTemplates[k].skills[l].damage = d.readShort();
					GameScr.nClasss[j].skillTemplates[k].skills[l].price = d.readShort();
					GameScr.nClasss[j].skillTemplates[k].skills[l].moreInfo = d.readUTF();
					Skills.add(GameScr.nClasss[j].skillTemplates[k].skills[l]);
				}
			}
		}
	}

	// Token: 0x060002E4 RID: 740 RVA: 0x00037F30 File Offset: 0x00036130
	private void createMap(myReader d)
	{
		GameScr.vcMap = d.readByte();
		TileMap.mapNames = new string[(int)d.readShort()];
		for (int i = 0; i < TileMap.mapNames.Length; i++)
		{
			TileMap.mapNames[i] = d.readUTF();
		}
		Npc.arrNpcTemplate = new NpcTemplate[(int)d.readByte()];
		sbyte b = 0;
		while ((int)b < Npc.arrNpcTemplate.Length)
		{
			Npc.arrNpcTemplate[(int)b] = new NpcTemplate();
			Npc.arrNpcTemplate[(int)b].npcTemplateId = (int)b;
			Npc.arrNpcTemplate[(int)b].name = d.readUTF();
			Npc.arrNpcTemplate[(int)b].headId = (int)d.readShort();
			Npc.arrNpcTemplate[(int)b].bodyId = (int)d.readShort();
			Npc.arrNpcTemplate[(int)b].legId = (int)d.readShort();
			Npc.arrNpcTemplate[(int)b].menu = new string[(int)d.readByte()][];
			for (int j = 0; j < Npc.arrNpcTemplate[(int)b].menu.Length; j++)
			{
				Npc.arrNpcTemplate[(int)b].menu[j] = new string[(int)d.readByte()];
				for (int k = 0; k < Npc.arrNpcTemplate[(int)b].menu[j].Length; k++)
				{
					Npc.arrNpcTemplate[(int)b].menu[j][k] = d.readUTF();
				}
			}
			b += 1;
		}
		Mob.arrMobTemplate = new MobTemplate[(int)d.readShort()];
		for (int l = 0; l < Mob.arrMobTemplate.Length; l++)
		{
			Mob.arrMobTemplate[l] = new MobTemplate();
			Mob.arrMobTemplate[l].mobTemplateId = l;
			Mob.arrMobTemplate[l].type = d.readByte();
			Mob.arrMobTemplate[l].name = d.readUTF();
			Mob.arrMobTemplate[l].hp = d.readLong();
			Mob.arrMobTemplate[l].rangeMove = d.readByte();
			Mob.arrMobTemplate[l].speed = d.readByte();
			Mob.arrMobTemplate[l].dartType = d.readByte();
		}
	}

	// Token: 0x060002E5 RID: 741 RVA: 0x00038164 File Offset: 0x00036364
	private void createData(myReader d, bool isSaveRMS)
	{
		GameScr.vcData = d.readByte();
		if (isSaveRMS)
		{
			Rms.saveRMS("NR_dart", NinjaUtil.readByteArray(d));
			Rms.saveRMS("NR_arrow", NinjaUtil.readByteArray(d));
			Rms.saveRMS("NR_effect", NinjaUtil.readByteArray(d));
			Rms.saveRMS("NR_image", NinjaUtil.readByteArray(d));
			Rms.saveRMS("NR_part", NinjaUtil.readByteArray(d));
			Rms.saveRMS("NR_skill", NinjaUtil.readByteArray(d));
			Rms.DeleteStorage("NRdata");
		}
	}

	// Token: 0x060002E6 RID: 742 RVA: 0x000381F8 File Offset: 0x000363F8
	private Image createImage(sbyte[] arr)
	{
		try
		{
			return Image.createImage(arr, 0, arr.Length);
		}
		catch (Exception)
		{
		}
		return null;
	}

	// Token: 0x060002E7 RID: 743 RVA: 0x00038230 File Offset: 0x00036430
	public int[] arrayByte2Int(sbyte[] b)
	{
		int[] array = new int[b.Length];
		for (int i = 0; i < b.Length; i++)
		{
			int num = (int)b[i];
			bool flag = num < 0;
			if (flag)
			{
				num += 256;
			}
			array[i] = num;
		}
		return array;
	}

	// Token: 0x060002E8 RID: 744 RVA: 0x00038280 File Offset: 0x00036480
	public void readClanMsg(Message msg, int index)
	{
		try
		{
			ClanMessage clanMessage = new ClanMessage();
			sbyte b = msg.reader().readByte();
			clanMessage.type = (int)b;
			clanMessage.id = msg.reader().readInt();
			clanMessage.playerId = msg.reader().readInt();
			clanMessage.playerName = msg.reader().readUTF();
			clanMessage.role = msg.reader().readByte();
			clanMessage.time = (long)(msg.reader().readInt() + 1000000000);
			bool flag = false;
			GameScr.isNewClanMessage = false;
			bool flag2 = b == 0;
			if (flag2)
			{
				string text = msg.reader().readUTF();
				GameScr.isNewClanMessage = true;
				bool flag3 = mFont.tahoma_7.getWidth(text) > Panel.WIDTH_PANEL - 60;
				if (flag3)
				{
					clanMessage.chat = mFont.tahoma_7.splitFontArray(text, Panel.WIDTH_PANEL - 10);
				}
				else
				{
					clanMessage.chat = new string[1];
					clanMessage.chat[0] = text;
				}
				clanMessage.color = msg.reader().readByte();
			}
			else
			{
				bool flag4 = b == 1;
				if (flag4)
				{
					clanMessage.recieve = (int)msg.reader().readByte();
					clanMessage.maxCap = (int)msg.reader().readByte();
					flag = (msg.reader().readByte() == 1);
					bool flag5 = flag;
					if (flag5)
					{
						GameScr.isNewClanMessage = true;
					}
					bool flag6 = clanMessage.playerId != global::Char.myCharz().charID;
					if (flag6)
					{
						bool flag7 = clanMessage.recieve < clanMessage.maxCap;
						if (flag7)
						{
							clanMessage.option = new string[]
							{
								mResources.donate
							};
						}
						else
						{
							clanMessage.option = null;
						}
					}
					bool flag8 = GameCanvas.panel.cp != null;
					if (flag8)
					{
						GameCanvas.panel.updateRequest(clanMessage.recieve, clanMessage.maxCap);
					}
				}
				else
				{
					bool flag9 = b == 2 && global::Char.myCharz().role == 0;
					if (flag9)
					{
						GameScr.isNewClanMessage = true;
						clanMessage.option = new string[]
						{
							mResources.CANCEL,
							mResources.receive
						};
					}
				}
			}
			bool flag10 = GameCanvas.currentScreen != GameScr.instance;
			if (flag10)
			{
				GameScr.isNewClanMessage = false;
			}
			else
			{
				bool flag11 = GameCanvas.panel.isShow && GameCanvas.panel.type == 0 && GameCanvas.panel.currentTabIndex == 3;
				if (flag11)
				{
					GameScr.isNewClanMessage = false;
				}
			}
			ClanMessage.addMessage(clanMessage, index, flag);
		}
		catch (Exception)
		{
			Cout.println("LOI TAI CMD -= " + msg.command.ToString());
		}
	}

	// Token: 0x060002E9 RID: 745 RVA: 0x0003853C File Offset: 0x0003673C
	public void loadCurrMap(sbyte teleport3)
	{
		Res.outz("[CONTROLER] start load map " + teleport3.ToString());
		GameScr.gI().auto = 0;
		GameScr.isChangeZone = false;
		CreateCharScr.instance = null;
		GameScr.info1.isUpdate = false;
		GameScr.info2.isUpdate = false;
		GameScr.lockTick = 0;
		GameCanvas.panel.isShow = false;
		SoundMn.gI().stopAll();
		bool flag = !GameScr.isLoadAllData && !CreateCharScr.isCreateChar;
		if (flag)
		{
			GameScr.gI().initSelectChar();
		}
		GameScr.loadCamera(false, (teleport3 != 1) ? -1 : global::Char.myCharz().cx, (teleport3 == 0) ? -1 : 0);
		TileMap.loadMainTile();
		TileMap.loadMap(TileMap.tileID);
		Res.outz("LOAD GAMESCR 2");
		global::Char.myCharz().cvx = 0;
		global::Char.myCharz().statusMe = 4;
		global::Char.myCharz().currentMovePoint = null;
		global::Char.myCharz().mobFocus = null;
		global::Char.myCharz().charFocus = null;
		global::Char.myCharz().npcFocus = null;
		global::Char.myCharz().itemFocus = null;
		global::Char.myCharz().skillPaint = null;
		global::Char.myCharz().setMabuHold(false);
		global::Char.myCharz().skillPaintRandomPaint = null;
		GameCanvas.clearAllPointerEvent();
		bool flag2 = global::Char.myCharz().cy >= TileMap.pxh - 100;
		if (flag2)
		{
			global::Char.myCharz().isFlyUp = true;
			global::Char.myCharz().cx += Res.abs(Res.random(0, 80));
			Service.gI().charMove();
		}
		GameScr.gI().loadGameScr();
		GameCanvas.loadBG(TileMap.bgID);
		global::Char.isLockKey = false;
		Res.outz("cy= " + global::Char.myCharz().cy.ToString() + "---------------------------------------------");
		for (int i = 0; i < global::Char.myCharz().vEff.size(); i++)
		{
			EffectChar effectChar = (EffectChar)global::Char.myCharz().vEff.elementAt(i);
			bool flag3 = effectChar.template.type == 10;
			if (flag3)
			{
				global::Char.isLockKey = true;
				break;
			}
		}
		GameCanvas.clearKeyHold();
		GameCanvas.clearKeyPressed();
		GameScr.gI().dHP = global::Char.myCharz().cHP;
		GameScr.gI().dMP = global::Char.myCharz().cMP;
		global::Char.ischangingMap = false;
		GameScr.gI().switchToMe();
		bool flag4 = global::Char.myCharz().cy <= 10 && teleport3 != 0 && teleport3 != 2;
		if (flag4)
		{
			Teleport p = new Teleport(global::Char.myCharz().cx, global::Char.myCharz().cy, global::Char.myCharz().head, global::Char.myCharz().cdir, 1, true, (teleport3 != 1) ? ((int)teleport3) : global::Char.myCharz().cgender);
			Teleport.addTeleport(p);
			global::Char.myCharz().isTeleport = true;
		}
		bool flag5 = teleport3 == 2;
		if (flag5)
		{
			global::Char.myCharz().show();
		}
		bool isRongThanXuatHien = GameScr.gI().isRongThanXuatHien;
		if (isRongThanXuatHien)
		{
			bool flag6 = TileMap.mapID == GameScr.gI().mapRID && TileMap.zoneID == GameScr.gI().zoneRID;
			if (flag6)
			{
				GameScr.gI().callRongThan(GameScr.gI().xR, GameScr.gI().yR);
			}
			bool flag7 = mGraphics.zoomLevel > 1;
			if (flag7)
			{
				GameScr.gI().doiMauTroi();
			}
		}
		InfoDlg.hide();
		InfoDlg.show(TileMap.mapName, mResources.zone + " " + TileMap.zoneID.ToString(), 30);
		GameCanvas.endDlg();
		GameCanvas.isLoading = false;
		Hint.clickMob();
		Hint.clickNpc();
		GameCanvas.debug("SA75x9", 2);
		GameCanvas.isRequestMapID = 2;
		GameCanvas.waitingTimeChangeMap = mSystem.currentTimeMillis() + 1000L;
		Res.outz("[CONTROLLER] loadMap DONE!!!!!!!!!");
	}

	// Token: 0x060002EA RID: 746 RVA: 0x00038924 File Offset: 0x00036B24
	public void loadInfoMap(Message msg)
	{
		try
		{
			bool flag = mGraphics.zoomLevel == 1;
			if (flag)
			{
				SmallImage.clearHastable();
			}
			global::Char.myCharz().cx = (global::Char.myCharz().cxSend = (global::Char.myCharz().cxFocus = (int)msg.reader().readShort()));
			global::Char.myCharz().cy = (global::Char.myCharz().cySend = (global::Char.myCharz().cyFocus = (int)msg.reader().readShort()));
			global::Char.myCharz().xSd = global::Char.myCharz().cx;
			global::Char.myCharz().ySd = global::Char.myCharz().cy;
			Res.outz(string.Concat(new string[]
			{
				"head= ",
				global::Char.myCharz().head.ToString(),
				" body= ",
				global::Char.myCharz().body.ToString(),
				" left= ",
				global::Char.myCharz().leg.ToString(),
				" x= ",
				global::Char.myCharz().cx.ToString(),
				" y= ",
				global::Char.myCharz().cy.ToString(),
				" chung toc= ",
				global::Char.myCharz().cgender.ToString()
			}));
			bool flag2 = global::Char.myCharz().cx >= 0 && global::Char.myCharz().cx <= 100;
			if (flag2)
			{
				global::Char.myCharz().cdir = 1;
			}
			else
			{
				bool flag3 = global::Char.myCharz().cx >= TileMap.tmw - 100 && global::Char.myCharz().cx <= TileMap.tmw;
				if (flag3)
				{
					global::Char.myCharz().cdir = -1;
				}
			}
			GameCanvas.debug("SA75x4", 2);
			int num = (int)msg.reader().readByte();
			Res.outz("vGo size= " + num.ToString());
			bool flag4 = !GameScr.info1.isDone;
			if (flag4)
			{
				GameScr.info1.cmx = global::Char.myCharz().cx - GameScr.cmx;
				GameScr.info1.cmy = global::Char.myCharz().cy - GameScr.cmy;
			}
			for (int i = 0; i < num; i++)
			{
				Waypoint waypoint = new Waypoint(msg.reader().readShort(), msg.reader().readShort(), msg.reader().readShort(), msg.reader().readShort(), msg.reader().readBoolean(), msg.reader().readBoolean(), msg.reader().readUTF());
				bool flag5 = (TileMap.mapID != 21 && TileMap.mapID != 22 && TileMap.mapID != 23) || waypoint.minX < 0 || waypoint.minX <= 24;
				if (flag5)
				{
				}
			}
			Resources.UnloadUnusedAssets();
			GC.Collect();
			GameCanvas.debug("SA75x5", 2);
			num = (int)msg.reader().readByte();
			Mob.newMob.removeAllElements();
			sbyte b = 0;
			while ((int)b < num)
			{
				Mob mob = new Mob((int)b, msg.reader().readBoolean(), msg.reader().readBoolean(), msg.reader().readBoolean(), msg.reader().readBoolean(), msg.reader().readBoolean(), (int)msg.reader().readShort(), (int)msg.reader().readByte(), msg.reader().readLong(), msg.reader().readByte(), msg.reader().readLong(), msg.reader().readShort(), msg.reader().readShort(), msg.reader().readByte(), msg.reader().readByte());
				mob.xSd = mob.x;
				mob.ySd = mob.y;
				mob.isBoss = msg.reader().readBoolean();
				bool flag6 = Mob.arrMobTemplate[mob.templateId].type != 0;
				if (flag6)
				{
					bool flag7 = b % 3 == 0;
					if (flag7)
					{
						mob.dir = -1;
					}
					else
					{
						mob.dir = 1;
					}
					mob.x += (int)(10 - b % 20);
				}
				mob.isMobMe = false;
				BigBoss bigBoss = null;
				BachTuoc bachTuoc = null;
				BigBoss2 bigBoss2 = null;
				NewBoss newBoss = null;
				bool flag8 = mob.templateId == 70;
				if (flag8)
				{
					bigBoss = new BigBoss((int)b, (short)mob.x, (short)mob.y, 70, mob.hp, mob.maxHp, mob.sys);
				}
				bool flag9 = mob.templateId == 71;
				if (flag9)
				{
					bachTuoc = new BachTuoc((int)b, (short)mob.x, (short)mob.y, 71, mob.hp, mob.maxHp, mob.sys);
				}
				bool flag10 = mob.templateId == 72;
				if (flag10)
				{
					bigBoss2 = new BigBoss2((int)b, (short)mob.x, (short)mob.y, 72, mob.hp, mob.maxHp, 3);
				}
				bool isBoss = mob.isBoss;
				if (isBoss)
				{
					newBoss = new NewBoss((int)b, (short)mob.x, (short)mob.y, mob.templateId, mob.hp, mob.maxHp, mob.sys);
				}
				bool flag11 = newBoss != null;
				if (flag11)
				{
					GameScr.vMob.addElement(newBoss);
				}
				else
				{
					bool flag12 = bigBoss != null;
					if (flag12)
					{
						GameScr.vMob.addElement(bigBoss);
					}
					else
					{
						bool flag13 = bachTuoc != null;
						if (flag13)
						{
							GameScr.vMob.addElement(bachTuoc);
						}
						else
						{
							bool flag14 = bigBoss2 != null;
							if (flag14)
							{
								GameScr.vMob.addElement(bigBoss2);
							}
							else
							{
								GameScr.vMob.addElement(mob);
							}
						}
					}
				}
				b += 1;
			}
			bool flag15 = global::Char.myCharz().mobMe != null && GameScr.findMobInMap(global::Char.myCharz().mobMe.mobId) == null;
			if (flag15)
			{
				global::Char.myCharz().mobMe.getData();
				global::Char.myCharz().mobMe.x = global::Char.myCharz().cx;
				global::Char.myCharz().mobMe.y = global::Char.myCharz().cy - 40;
				GameScr.vMob.addElement(global::Char.myCharz().mobMe);
			}
			num = (int)msg.reader().readByte();
			byte b2 = 0;
			while ((int)b2 < num)
			{
				b2 += 1;
			}
			GameCanvas.debug("SA75x6", 2);
			num = (int)msg.reader().readByte();
			Res.outz("NPC size= " + num.ToString());
			for (int j = 0; j < num; j++)
			{
				sbyte status = msg.reader().readByte();
				short cx = msg.reader().readShort();
				short num2 = msg.reader().readShort();
				sbyte b3 = msg.reader().readByte();
				short num3 = msg.reader().readShort();
				bool flag16 = b3 != 6 && ((global::Char.myCharz().taskMaint.taskId >= 7 && (global::Char.myCharz().taskMaint.taskId != 7 || global::Char.myCharz().taskMaint.index > 1)) || (b3 != 7 && b3 != 8 && b3 != 9)) && (global::Char.myCharz().taskMaint.taskId >= 6 || b3 != 16);
				if (flag16)
				{
					bool flag17 = b3 == 4;
					if (flag17)
					{
						GameScr.gI().magicTree = new MagicTree(j, (int)status, (int)cx, (int)num2, (int)b3, (int)num3);
						Service.gI().magicTree(2);
						GameScr.vNpc.addElement(GameScr.gI().magicTree);
					}
					else
					{
						Npc o = new Npc(j, (int)status, (int)cx, (int)(num2 + 3), (int)b3, (int)num3);
						GameScr.vNpc.addElement(o);
					}
				}
			}
			GameCanvas.debug("SA75x7", 2);
			num = (int)msg.reader().readByte();
			string text = string.Empty;
			Res.outz("item size = " + num.ToString());
			text = text + "item: " + num.ToString();
			for (int k = 0; k < num; k++)
			{
				short itemMapID = msg.reader().readShort();
				short itemTemplateID = msg.reader().readShort();
				int x = (int)msg.reader().readShort();
				int y = (int)msg.reader().readShort();
				int num4 = msg.reader().readInt();
				short r = 0;
				bool flag18 = num4 == -2;
				if (flag18)
				{
					r = msg.reader().readShort();
				}
				ItemMap itemMap = new ItemMap(num4, itemMapID, itemTemplateID, x, y, r);
				bool flag19 = false;
				for (int l = 0; l < GameScr.vItemMap.size(); l++)
				{
					ItemMap itemMap2 = (ItemMap)GameScr.vItemMap.elementAt(l);
					bool flag20 = itemMap2.itemMapID == itemMap.itemMapID;
					if (flag20)
					{
						flag19 = true;
						break;
					}
				}
				bool flag21 = !flag19;
				if (flag21)
				{
					GameScr.vItemMap.addElement(itemMap);
				}
				text = text + itemTemplateID.ToString() + ",";
			}
			Res.err("sl item on map " + text + "\n");
			TileMap.vCurrItem.removeAllElements();
			bool flag22 = mGraphics.zoomLevel == 1;
			if (flag22)
			{
				BgItem.clearHashTable();
			}
			BgItem.vKeysNew.removeAllElements();
			bool flag23 = !GameCanvas.lowGraphic || (GameCanvas.lowGraphic && TileMap.isVoDaiMap()) || TileMap.mapID == 45 || TileMap.mapID == 46 || TileMap.mapID == 47 || TileMap.mapID == 48 || TileMap.mapID == 120 || TileMap.mapID == 128 || TileMap.mapID == 170 || TileMap.mapID == 49;
			if (flag23)
			{
				short num5 = msg.reader().readShort();
				text = "item high graphic: ";
				for (int m = 0; m < (int)num5; m++)
				{
					short id = msg.reader().readShort();
					short num6 = msg.reader().readShort();
					short num7 = msg.reader().readShort();
					bool flag24 = TileMap.getBIById((int)id) != null;
					if (flag24)
					{
						BgItem bibyId = TileMap.getBIById((int)id);
						BgItem bgItem = new BgItem();
						bgItem.id = (int)id;
						bgItem.idImage = bibyId.idImage;
						bgItem.dx = bibyId.dx;
						bgItem.dy = bibyId.dy;
						bgItem.x = (int)(num6 * (short)TileMap.size);
						bgItem.y = (int)(num7 * (short)TileMap.size);
						bgItem.layer = bibyId.layer;
						bool flag25 = TileMap.isExistMoreOne(bgItem.id);
						if (flag25)
						{
							bgItem.trans = ((m % 2 != 0) ? 2 : 0);
							bool flag26 = TileMap.mapID == 45;
							if (flag26)
							{
								bgItem.trans = 0;
							}
						}
						bool flag27 = !BgItem.imgNew.containsKey(bgItem.idImage.ToString() + string.Empty);
						if (flag27)
						{
							bool flag28 = mGraphics.zoomLevel == 1;
							if (flag28)
							{
								Image image = GameCanvas.loadImage("/mapBackGround/" + bgItem.idImage.ToString() + ".png");
								bool flag29 = image == null;
								if (flag29)
								{
									image = Image.createRGBImage(new int[1], 1, 1, true);
									Service.gI().getBgTemplate(bgItem.idImage);
								}
								BgItem.imgNew.put(bgItem.idImage.ToString() + string.Empty, image);
							}
							else
							{
								bool flag30 = false;
								sbyte[] array = Rms.loadRMS(mGraphics.zoomLevel.ToString() + "bgItem" + bgItem.idImage.ToString());
								bool flag31 = array != null;
								if (flag31)
								{
									bool flag32 = BgItem.newSmallVersion != null;
									if (flag32)
									{
										Res.outz("Small  last= " + (array.Length % 127).ToString() + "new Version= " + BgItem.newSmallVersion[(int)bgItem.idImage].ToString());
										bool flag33 = array.Length % 127 != (int)BgItem.newSmallVersion[(int)bgItem.idImage];
										if (flag33)
										{
											flag30 = true;
										}
									}
									bool flag34 = !flag30;
									if (flag34)
									{
										Image image = Image.createImage(array, 0, array.Length);
										bool flag35 = image != null;
										if (flag35)
										{
											BgItem.imgNew.put(bgItem.idImage.ToString() + string.Empty, image);
										}
										else
										{
											flag30 = true;
										}
									}
								}
								else
								{
									flag30 = true;
								}
								bool flag36 = flag30;
								if (flag36)
								{
									Image image = GameCanvas.loadImage("/mapBackGround/" + bgItem.idImage.ToString() + ".png");
									bool flag37 = image == null;
									if (flag37)
									{
										image = Image.createRGBImage(new int[1], 1, 1, true);
										Service.gI().getBgTemplate(bgItem.idImage);
									}
									BgItem.imgNew.put(bgItem.idImage.ToString() + string.Empty, image);
								}
							}
							BgItem.vKeysLast.addElement(bgItem.idImage.ToString() + string.Empty);
						}
						bool flag38 = !BgItem.isExistKeyNews(bgItem.idImage.ToString() + string.Empty);
						if (flag38)
						{
							BgItem.vKeysNew.addElement(bgItem.idImage.ToString() + string.Empty);
						}
						bgItem.changeColor();
						TileMap.vCurrItem.addElement(bgItem);
					}
					text = text + id.ToString() + ",";
				}
				Res.err("item High Graphics: " + text);
				for (int n = 0; n < BgItem.vKeysLast.size(); n++)
				{
					string text2 = (string)BgItem.vKeysLast.elementAt(n);
					bool flag39 = !BgItem.isExistKeyNews(text2);
					if (flag39)
					{
						BgItem.imgNew.remove(text2);
						bool flag40 = BgItem.imgNew.containsKey(text2 + "blend" + 1.ToString());
						if (flag40)
						{
							BgItem.imgNew.remove(text2 + "blend" + 1.ToString());
						}
						bool flag41 = BgItem.imgNew.containsKey(text2 + "blend" + 3.ToString());
						if (flag41)
						{
							BgItem.imgNew.remove(text2 + "blend" + 3.ToString());
						}
						BgItem.vKeysLast.removeElementAt(n);
						n--;
					}
				}
				BackgroudEffect.isFog = false;
				BackgroudEffect.nCloud = 0;
				EffecMn.vEff.removeAllElements();
				BackgroudEffect.vBgEffect.removeAllElements();
				Effect.newEff.removeAllElements();
				short num8 = msg.reader().readShort();
				for (int num9 = 0; num9 < (int)num8; num9++)
				{
					string key = msg.reader().readUTF();
					string value = msg.reader().readUTF();
					this.keyValueAction(key, value);
				}
			}
			else
			{
				short num10 = msg.reader().readShort();
				for (int num11 = 0; num11 < (int)num10; num11++)
				{
					short num12 = msg.reader().readShort();
					short num13 = msg.reader().readShort();
					short num14 = msg.reader().readShort();
				}
				short num15 = msg.reader().readShort();
				for (int num16 = 0; num16 < (int)num15; num16++)
				{
					string text3 = msg.reader().readUTF();
					string text4 = msg.reader().readUTF();
				}
			}
			TileMap.bgType = (int)msg.reader().readByte();
			sbyte teleport = msg.reader().readByte();
			this.loadCurrMap(teleport);
			GameCanvas.debug("SA75x8", 2);
		}
		catch (Exception)
		{
			Res.err(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Loadmap khong thanh cong");
			GameCanvas.instance.doResetToLoginScr(GameCanvas.serverScreen);
			ServerListScreen.waitToLogin = true;
			GameCanvas.endDlg();
		}
		GameCanvas.isLoading = false;
		Res.err(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Loadmap thanh cong");
	}

	// Token: 0x060002EB RID: 747 RVA: 0x000399EC File Offset: 0x00037BEC
	public void keyValueAction(string key, string value)
	{
		bool flag = key.Equals("eff");
		if (flag)
		{
			bool flag2 = Panel.graphics > 0;
			if (!flag2)
			{
				string[] array = Res.split(value, ".", 0);
				int id = int.Parse(array[0]);
				int layer = int.Parse(array[1]);
				int x = int.Parse(array[2]);
				int y = int.Parse(array[3]);
				bool flag3 = array.Length <= 4;
				int loop;
				int loopCount;
				if (flag3)
				{
					loop = -1;
					loopCount = 1;
				}
				else
				{
					loop = int.Parse(array[4]);
					loopCount = int.Parse(array[5]);
				}
				Effect effect = new Effect(id, x, y, layer, loop, loopCount);
				bool flag4 = array.Length > 6;
				if (flag4)
				{
					effect.typeEff = int.Parse(array[6]);
					bool flag5 = array.Length > 7;
					if (flag5)
					{
						effect.indexFrom = int.Parse(array[7]);
						effect.indexTo = int.Parse(array[8]);
					}
				}
				EffecMn.addEff(effect);
			}
		}
		else
		{
			bool flag6 = key.Equals("beff") && Panel.graphics <= 1;
			if (flag6)
			{
				BackgroudEffect.addEffect(int.Parse(value));
			}
		}
	}

	// Token: 0x060002EC RID: 748 RVA: 0x00039B18 File Offset: 0x00037D18
	public void messageNotMap(Message msg)
	{
		GameCanvas.debug("SA6", 2);
		try
		{
			sbyte b = msg.reader().readByte();
			Res.outz("---messageNotMap : " + b.ToString());
			sbyte b2 = b;
			sbyte b3 = b2;
			switch (b3)
			{
			case 4:
			{
				GameCanvas.debug("SA8", 2);
				GameCanvas.loginScr.savePass();
				GameScr.isAutoPlay = false;
				GameScr.canAutoPlay = false;
				LoginScr.isUpdateAll = true;
				LoginScr.isUpdateData = true;
				LoginScr.isUpdateMap = true;
				LoginScr.isUpdateSkill = true;
				LoginScr.isUpdateItem = true;
				GameScr.vsData = msg.reader().readByte();
				GameScr.vsMap = msg.reader().readByte();
				GameScr.vsSkill = msg.reader().readByte();
				GameScr.vsItem = msg.reader().readByte();
				sbyte b4 = msg.reader().readByte();
				bool isLogin = GameCanvas.loginScr.isLogin2;
				if (isLogin)
				{
					Rms.saveRMSString("acc", string.Empty);
					Rms.saveRMSString("pass", string.Empty);
				}
				else
				{
					Rms.saveRMSString("userAo" + ServerListScreen.ipSelect.ToString(), string.Empty);
				}
				bool flag = GameScr.vsData != GameScr.vcData;
				if (flag)
				{
					GameScr.isLoadAllData = false;
					Service.gI().updateData();
				}
				else
				{
					try
					{
						LoginScr.isUpdateData = false;
					}
					catch (Exception)
					{
						GameScr.vcData = -1;
						Service.gI().updateData();
					}
				}
				bool flag2 = GameScr.vsMap != GameScr.vcMap;
				if (flag2)
				{
					GameScr.isLoadAllData = false;
					Service.gI().updateMap();
				}
				else
				{
					try
					{
						bool flag3 = !GameScr.isLoadAllData;
						if (flag3)
						{
							DataInputStream dataInputStream = new DataInputStream(Rms.loadRMS("NRmap"));
							this.createMap(dataInputStream.r);
						}
						LoginScr.isUpdateMap = false;
					}
					catch (Exception)
					{
						GameScr.vcMap = -1;
						Service.gI().updateMap();
					}
				}
				bool flag4 = GameScr.vsSkill != GameScr.vcSkill;
				if (flag4)
				{
					GameScr.isLoadAllData = false;
					Service.gI().updateSkill();
				}
				else
				{
					try
					{
						bool flag5 = !GameScr.isLoadAllData;
						if (flag5)
						{
							DataInputStream dataInputStream2 = new DataInputStream(Rms.loadRMS("NRskill"));
							this.createSkill(dataInputStream2.r);
						}
						LoginScr.isUpdateSkill = false;
					}
					catch (Exception)
					{
						GameScr.vcSkill = -1;
						Service.gI().updateSkill();
					}
				}
				bool flag6 = GameScr.vsItem != GameScr.vcItem;
				if (flag6)
				{
					GameScr.isLoadAllData = false;
					Service.gI().updateItem();
				}
				else
				{
					try
					{
						DataInputStream dataInputStream3 = new DataInputStream(Rms.loadRMS("NRitem0"));
						this.loadItemNew(dataInputStream3.r, 0, false);
						DataInputStream dataInputStream4 = new DataInputStream(Rms.loadRMS("NRitem1"));
						this.loadItemNew(dataInputStream4.r, 1, false);
						DataInputStream dataInputStream5 = new DataInputStream(Rms.loadRMS("NRitem100"));
						this.loadItemNew(dataInputStream5.r, 100, false);
						LoginScr.isUpdateItem = false;
					}
					catch (Exception)
					{
						GameScr.vcItem = -1;
						Service.gI().updateItem();
					}
					try
					{
						DataInputStream dataInputStream6 = new DataInputStream(Rms.loadRMS("NRitem101"));
						this.loadItemNew(dataInputStream6.r, 101, false);
					}
					catch (Exception)
					{
					}
				}
				bool flag7 = !GameScr.isLoadAllData;
				if (flag7)
				{
					GameScr.gI().readOk();
				}
				else
				{
					Service.gI().clientOk();
				}
				sbyte b5 = msg.reader().readByte();
				Res.outz("CAPTION LENT= " + b5.ToString());
				GameScr.exps = new long[(int)b5];
				for (int i = 0; i < GameScr.exps.Length; i++)
				{
					GameScr.exps[i] = msg.reader().readLong();
				}
				break;
			}
			case 5:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 19:
				break;
			case 6:
			{
				Res.outz("GET UPDATE_MAP " + msg.reader().available().ToString() + " bytes");
				msg.reader().mark(500000);
				this.createMap(msg.reader());
				msg.reader().reset();
				sbyte[] data = new sbyte[msg.reader().available()];
				msg.reader().readFully(ref data);
				Rms.saveRMS("NRmap", data);
				sbyte[] data2 = new sbyte[]
				{
					GameScr.vcMap
				};
				Rms.saveRMS("NRmapVersion", data2);
				LoginScr.isUpdateMap = false;
				GameScr.gI().readOk();
				break;
			}
			case 7:
			{
				Res.outz("GET UPDATE_SKILL " + msg.reader().available().ToString() + " bytes");
				msg.reader().mark(500000);
				this.createSkill(msg.reader());
				msg.reader().reset();
				sbyte[] data3 = new sbyte[msg.reader().available()];
				msg.reader().readFully(ref data3);
				Rms.saveRMS("NRskill", data3);
				sbyte[] data4 = new sbyte[]
				{
					GameScr.vcSkill
				};
				Rms.saveRMS("NRskillVersion", data4);
				LoginScr.isUpdateSkill = false;
				GameScr.gI().readOk();
				break;
			}
			case 8:
				Res.outz("GET UPDATE_ITEM " + msg.reader().available().ToString() + " bytes");
				this.createItemNew(msg.reader());
				break;
			case 9:
				GameCanvas.debug("SA11", 2);
				break;
			case 10:
				try
				{
					global::Char.isLoadingMap = true;
					Res.outz("REQUEST MAP TEMPLATE");
					GameCanvas.isLoading = true;
					TileMap.maps = null;
					TileMap.types = null;
					mSystem.gcc();
					GameCanvas.debug("SA99", 2);
					TileMap.tmw = (int)msg.reader().readByte();
					TileMap.tmh = (int)msg.reader().readByte();
					TileMap.maps = new int[TileMap.tmw * TileMap.tmh];
					Res.err("   M apsize= " + (TileMap.tmw * TileMap.tmh).ToString());
					for (int j = 0; j < TileMap.maps.Length; j++)
					{
						int num = (int)msg.reader().readByte();
						bool flag8 = num < 0;
						if (flag8)
						{
							num += 256;
						}
						TileMap.maps[j] = (int)((ushort)num);
					}
					TileMap.types = new int[TileMap.maps.Length];
					msg = this.messWait;
					this.loadInfoMap(msg);
					try
					{
						TileMap.isMapDouble = (msg.reader().readByte() != 0);
					}
					catch (Exception ex)
					{
						Res.err(" 1 LOI TAI CASE REQUEST_MAPTEMPLATE " + ex.ToString());
					}
				}
				catch (Exception ex2)
				{
					Res.err("2 LOI TAI CASE REQUEST_MAPTEMPLATE " + ex2.ToString());
				}
				msg.cleanup();
				this.messWait.cleanup();
				msg = (this.messWait = null);
				GameScr.gI().switchToMe();
				break;
			case 16:
				MoneyCharge.gI().switchToMe();
				break;
			case 17:
				GameCanvas.debug("SYB123", 2);
				global::Char.myCharz().clearTask();
				break;
			case 18:
			{
				GameCanvas.isLoading = false;
				GameCanvas.endDlg();
				int num2 = msg.reader().readInt();
				GameCanvas.inputDlg.show(mResources.changeNameChar, new Command(mResources.OK, GameCanvas.instance, 88829, num2), TField.INPUT_TYPE_ANY);
				break;
			}
			case 20:
				global::Char.myCharz().cPk = msg.reader().readByte();
				GameScr.info1.addInfo(mResources.PK_NOW + " " + global::Char.myCharz().cPk.ToString(), 0);
				break;
			default:
				if (b3 != 35)
				{
					if (b3 == 36)
					{
						GameScr.typeActive = msg.reader().readByte();
						Res.outz("load Me Active: " + GameScr.typeActive.ToString());
					}
				}
				else
				{
					GameCanvas.endDlg();
					GameScr.gI().resetButton();
					GameScr.info1.addInfo(msg.reader().readUTF(), 0);
				}
				break;
			}
		}
		catch (Exception ex3)
		{
			Cout.LogError("LOI TAI messageNotMap=== " + msg.command.ToString() + "  >>" + ex3.StackTrace);
		}
		finally
		{
			if (msg != null)
			{
				msg.cleanup();
			}
		}
	}

	// Token: 0x060002ED RID: 749 RVA: 0x0003A4C4 File Offset: 0x000386C4
	public void messageNotLogin(Message msg)
	{
		try
		{
			sbyte b = msg.reader().readByte();
			Res.outz("---messageNotLogin : " + b.ToString());
			bool flag = b == 2;
			if (flag)
			{
				string linkDefault = msg.reader().readUTF();
				Res.outz(">>Get CLIENT_INFO");
				ServerListScreen.linkDefault = linkDefault;
				mSystem.AddIpTest();
				ServerListScreen.getServerList(ServerListScreen.linkDefault);
				try
				{
					sbyte b2 = msg.reader().readByte();
					Panel.CanNapTien = (b2 == 1);
				}
				catch (Exception)
				{
				}
				Controller.isGet_CLIENT_INFO = true;
			}
		}
		catch (Exception)
		{
		}
		finally
		{
			if (msg != null)
			{
				msg.cleanup();
			}
		}
	}

	// Token: 0x060002EE RID: 750 RVA: 0x0003A594 File Offset: 0x00038794
	public void messageSubCommand(Message msg)
	{
		try
		{
			GameCanvas.debug("SA12", 2);
			sbyte b = msg.reader().readByte();
			Res.outz("---messageSubCommand : " + b.ToString());
			sbyte b2 = b;
			sbyte b3 = b2;
			switch (b3)
			{
			case 0:
			{
				GameCanvas.debug("SA21", 2);
				RadarScr.list = new MyVector();
				Teleport.vTeleport.removeAllElements();
				GameScr.vCharInMap.removeAllElements();
				GameScr.vItemMap.removeAllElements();
				global::Char.vItemTime.removeAllElements();
				GameScr.loadImg();
				GameScr.currentCharViewInfo = global::Char.myCharz();
				global::Char.myCharz().charID = msg.reader().readInt();
				global::Char.myCharz().ctaskId = (int)msg.reader().readByte();
				global::Char.myCharz().cgender = (int)msg.reader().readByte();
				global::Char.myCharz().head = (int)msg.reader().readShort();
				global::Char.myCharz().cName = msg.reader().readUTF();
				global::Char.myCharz().cPk = msg.reader().readByte();
				global::Char.myCharz().cTypePk = msg.reader().readByte();
				global::Char.myCharz().cPower = msg.reader().readLong();
				global::Char.myCharz().applyCharLevelPercent();
				global::Char.myCharz().eff5BuffHp = (int)msg.reader().readShort();
				global::Char.myCharz().eff5BuffMp = (int)msg.reader().readShort();
				global::Char.myCharz().nClass = GameScr.nClasss[(int)msg.reader().readByte()];
				global::Char.myCharz().vSkill.removeAllElements();
				global::Char.myCharz().vSkillFight.removeAllElements();
				GameScr.gI().dHP = global::Char.myCharz().cHP;
				GameScr.gI().dMP = global::Char.myCharz().cMP;
				sbyte b4 = msg.reader().readByte();
				for (sbyte b5 = 0; b5 < b4; b5 += 1)
				{
					Skill skill = Skills.get(msg.reader().readShort());
					this.useSkill(skill);
				}
				GameScr.gI().sortSkill();
				GameScr.gI().loadSkillShortcut();
				global::Char.myCharz().xu = msg.reader().readLong();
				global::Char.myCharz().luongKhoa = msg.reader().readInt();
				global::Char.myCharz().luong = msg.reader().readInt();
				global::Char.myCharz().xuStr = Res.formatNumber(global::Char.myCharz().xu);
				global::Char.myCharz().luongStr = mSystem.numberTostring((long)global::Char.myCharz().luong);
				global::Char.myCharz().luongKhoaStr = mSystem.numberTostring((long)global::Char.myCharz().luongKhoa);
				global::Char.myCharz().arrItemBody = new Item[(int)msg.reader().readByte()];
				try
				{
					global::Char.myCharz().setDefaultPart();
					for (int i = 0; i < global::Char.myCharz().arrItemBody.Length; i++)
					{
						short num = msg.reader().readShort();
						bool flag = num == -1;
						if (!flag)
						{
							ItemTemplate itemTemplate = ItemTemplates.get(num);
							int type = (int)itemTemplate.type;
							global::Char.myCharz().arrItemBody[i] = new Item();
							global::Char.myCharz().arrItemBody[i].template = itemTemplate;
							global::Char.myCharz().arrItemBody[i].quantity = msg.reader().readInt();
							global::Char.myCharz().arrItemBody[i].info = msg.reader().readUTF();
							global::Char.myCharz().arrItemBody[i].content = msg.reader().readUTF();
							int num2 = (int)msg.reader().readUnsignedByte();
							bool flag2 = num2 != 0;
							if (flag2)
							{
								global::Char.myCharz().arrItemBody[i].itemOption = new ItemOption[num2];
								for (int j = 0; j < global::Char.myCharz().arrItemBody[i].itemOption.Length; j++)
								{
									ItemOption itemOption = this.readItemOption(msg);
									bool flag3 = itemOption != null;
									if (flag3)
									{
										global::Char.myCharz().arrItemBody[i].itemOption[j] = itemOption;
									}
								}
							}
							int num3 = type;
							int num4 = num3;
							if (num4 != 0)
							{
								if (num4 == 1)
								{
									global::Char.myCharz().leg = (int)global::Char.myCharz().arrItemBody[i].template.part;
									Res.outz("toi day =======================================" + global::Char.myCharz().leg.ToString());
								}
							}
							else
							{
								Res.outz("toi day =======================================" + global::Char.myCharz().body.ToString());
								global::Char.myCharz().body = (int)global::Char.myCharz().arrItemBody[i].template.part;
							}
						}
					}
				}
				catch (Exception)
				{
				}
				global::Char.myCharz().arrItemBag = new Item[(int)msg.reader().readByte()];
				GameScr.hpPotion = 0;
				GameScr.isudungCapsun4 = false;
				GameScr.isudungCapsun3 = false;
				for (int k = 0; k < global::Char.myCharz().arrItemBag.Length; k++)
				{
					short num5 = msg.reader().readShort();
					bool flag4 = num5 == -1;
					if (!flag4)
					{
						global::Char.myCharz().arrItemBag[k] = new Item();
						global::Char.myCharz().arrItemBag[k].template = ItemTemplates.get(num5);
						global::Char.myCharz().arrItemBag[k].quantity = msg.reader().readInt();
						global::Char.myCharz().arrItemBag[k].info = msg.reader().readUTF();
						global::Char.myCharz().arrItemBag[k].content = msg.reader().readUTF();
						global::Char.myCharz().arrItemBag[k].indexUI = k;
						sbyte b6 = msg.reader().readByte();
						bool flag5 = b6 != 0;
						if (flag5)
						{
							global::Char.myCharz().arrItemBag[k].itemOption = new ItemOption[(int)b6];
							for (int l = 0; l < global::Char.myCharz().arrItemBag[k].itemOption.Length; l++)
							{
								ItemOption itemOption2 = this.readItemOption(msg);
								bool flag6 = itemOption2 != null;
								if (flag6)
								{
									global::Char.myCharz().arrItemBag[k].itemOption[l] = itemOption2;
									global::Char.myCharz().arrItemBag[k].getCompare();
								}
							}
						}
						bool flag7 = global::Char.myCharz().arrItemBag[k].template.type == 6;
						if (flag7)
						{
							GameScr.hpPotion += global::Char.myCharz().arrItemBag[k].quantity;
						}
						short num6 = num5;
						short num7 = num6;
						if (num7 != 193)
						{
							if (num7 == 194)
							{
								GameScr.isudungCapsun4 = (global::Char.myCharz().arrItemBag[k].quantity > 0);
							}
						}
						else
						{
							bool flag8 = !GameScr.isudungCapsun4;
							if (flag8)
							{
								GameScr.isudungCapsun3 = (global::Char.myCharz().arrItemBag[k].quantity > 0);
							}
						}
					}
				}
				global::Char.myCharz().arrItemBox = new Item[(int)msg.reader().readByte()];
				GameCanvas.panel.hasUse = 0;
				for (int m = 0; m < global::Char.myCharz().arrItemBox.Length; m++)
				{
					short num8 = msg.reader().readShort();
					bool flag9 = num8 == -1;
					if (!flag9)
					{
						global::Char.myCharz().arrItemBox[m] = new Item();
						global::Char.myCharz().arrItemBox[m].template = ItemTemplates.get(num8);
						global::Char.myCharz().arrItemBox[m].quantity = msg.reader().readInt();
						global::Char.myCharz().arrItemBox[m].info = msg.reader().readUTF();
						global::Char.myCharz().arrItemBox[m].content = msg.reader().readUTF();
						global::Char.myCharz().arrItemBox[m].itemOption = new ItemOption[(int)msg.reader().readByte()];
						for (int n = 0; n < global::Char.myCharz().arrItemBox[m].itemOption.Length; n++)
						{
							ItemOption itemOption3 = this.readItemOption(msg);
							bool flag10 = itemOption3 != null;
							if (flag10)
							{
								global::Char.myCharz().arrItemBox[m].itemOption[n] = itemOption3;
								global::Char.myCharz().arrItemBox[m].getCompare();
							}
						}
						GameCanvas.panel.hasUse++;
					}
				}
				global::Char.myCharz().statusMe = 4;
				int num9 = Rms.loadRMSInt(global::Char.myCharz().cName + "vci");
				bool flag11 = num9 < 1;
				if (flag11)
				{
					GameScr.isViewClanInvite = false;
				}
				else
				{
					GameScr.isViewClanInvite = true;
				}
				short num10 = msg.reader().readShort();
				global::Char.idHead = new short[(int)num10];
				global::Char.idAvatar = new short[(int)num10];
				for (int num11 = 0; num11 < (int)num10; num11++)
				{
					global::Char.idHead[num11] = msg.reader().readShort();
					global::Char.idAvatar[num11] = msg.reader().readShort();
				}
				for (int num12 = 0; num12 < GameScr.info1.charId.Length; num12++)
				{
					GameScr.info1.charId[num12] = new int[3];
				}
				GameScr.info1.charId[global::Char.myCharz().cgender][0] = (int)msg.reader().readShort();
				GameScr.info1.charId[global::Char.myCharz().cgender][1] = (int)msg.reader().readShort();
				GameScr.info1.charId[global::Char.myCharz().cgender][2] = (int)msg.reader().readShort();
				global::Char.myCharz().isNhapThe = (msg.reader().readByte() == 1);
				Res.outz("NHAP THE= " + global::Char.myCharz().isNhapThe.ToString());
				GameScr.deltaTime = mSystem.currentTimeMillis() - (long)msg.reader().readInt() * 1000L;
				GameScr.isNewMember = msg.reader().readByte();
				Service.gI().updateCaption((sbyte)global::Char.myCharz().cgender);
				Service.gI().androidPack();
				try
				{
					global::Char.myCharz().idAuraEff = msg.reader().readShort();
					global::Char.myCharz().idEff_Set_Item = (short)msg.reader().readSByte();
					global::Char.myCharz().idHat = msg.reader().readShort();
					goto IL_1B8C;
				}
				catch (Exception)
				{
					goto IL_1B8C;
				}
				break;
			}
			case 1:
				GameCanvas.debug("SA13", 2);
				global::Char.myCharz().nClass = GameScr.nClasss[(int)msg.reader().readByte()];
				global::Char.myCharz().cTiemNang = msg.reader().readLong();
				global::Char.myCharz().vSkill.removeAllElements();
				global::Char.myCharz().vSkillFight.removeAllElements();
				global::Char.myCharz().myskill = null;
				goto IL_1B8C;
			case 2:
			{
				GameCanvas.debug("SA14", 2);
				bool flag12 = global::Char.myCharz().statusMe != 14 && global::Char.myCharz().statusMe != 5;
				if (flag12)
				{
					global::Char.myCharz().cHP = global::Char.myCharz().cHPFull;
					global::Char.myCharz().cMP = global::Char.myCharz().cMPFull;
					Cout.LogError2(" ME_LOAD_SKILL");
				}
				global::Char.myCharz().vSkill.removeAllElements();
				global::Char.myCharz().vSkillFight.removeAllElements();
				sbyte b7 = msg.reader().readByte();
				for (sbyte b8 = 0; b8 < b7; b8 += 1)
				{
					short skillId = msg.reader().readShort();
					Skill skill2 = Skills.get(skillId);
					this.useSkill(skill2);
				}
				GameScr.gI().sortSkill();
				bool isPaintInfoMe = GameScr.isPaintInfoMe;
				if (isPaintInfoMe)
				{
					GameScr.indexRow = -1;
					GameScr.gI().left = (GameScr.gI().center = null);
				}
				goto IL_1B8C;
			}
			case 3:
			case 16:
			case 17:
			case 18:
			case 20:
			case 22:
			case 24:
			case 25:
			case 26:
			case 27:
			case 28:
			case 29:
			case 30:
			case 31:
			case 32:
			case 33:
			case 34:
				goto IL_1B8C;
			case 4:
				break;
			case 5:
			{
				GameCanvas.debug("SA24", 2);
				long cHP = global::Char.myCharz().cHP;
				global::Char.myCharz().cHP = msg.reader().readLong();
				bool flag13 = global::Char.myCharz().cHP > cHP && global::Char.myCharz().cTypePk != 4;
				if (flag13)
				{
					GameScr.startFlyText("+" + (global::Char.myCharz().cHP - cHP).ToString() + " " + mResources.HP, global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch - 20, 0, -1, mFont.HP);
					SoundMn.gI().HP_MPup();
					bool flag14 = global::Char.myCharz().petFollow != null && global::Char.myCharz().petFollow.smallID == 5003;
					if (flag14)
					{
						MonsterDart.addMonsterDart(global::Char.myCharz().petFollow.cmx + ((global::Char.myCharz().petFollow.dir != 1) ? -10 : 10), global::Char.myCharz().petFollow.cmy + 10, true, -1L, -1L, global::Char.myCharz(), 29);
					}
				}
				bool flag15 = global::Char.myCharz().cHP < cHP;
				if (flag15)
				{
					GameScr.startFlyText("-" + (cHP - global::Char.myCharz().cHP).ToString() + " " + mResources.HP, global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch - 20, 0, -1, mFont.HP);
				}
				GameScr.gI().dHP = global::Char.myCharz().cHP;
				bool isPaintInfoMe2 = GameScr.isPaintInfoMe;
				if (isPaintInfoMe2)
				{
				}
				goto IL_1B8C;
			}
			case 6:
			{
				GameCanvas.debug("SA25", 2);
				bool flag16 = global::Char.myCharz().statusMe == 14 || global::Char.myCharz().statusMe == 5;
				if (flag16)
				{
					goto IL_1B8C;
				}
				long cMP = global::Char.myCharz().cMP;
				global::Char.myCharz().cMP = msg.reader().readLong();
				bool flag17 = global::Char.myCharz().cMP > cMP;
				if (flag17)
				{
					GameScr.startFlyText("+" + (global::Char.myCharz().cMP - cMP).ToString() + " " + mResources.KI, global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch - 23, 0, -2, mFont.MP);
					SoundMn.gI().HP_MPup();
					bool flag18 = global::Char.myCharz().petFollow != null && global::Char.myCharz().petFollow.smallID == 5001;
					if (flag18)
					{
						MonsterDart.addMonsterDart(global::Char.myCharz().petFollow.cmx + ((global::Char.myCharz().petFollow.dir != 1) ? -10 : 10), global::Char.myCharz().petFollow.cmy + 10, true, -1L, -1L, global::Char.myCharz(), 29);
					}
				}
				bool flag19 = global::Char.myCharz().cMP < cMP;
				if (flag19)
				{
					GameScr.startFlyText("-" + (cMP - global::Char.myCharz().cMP).ToString() + " " + mResources.KI, global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch - 23, 0, -2, mFont.MP);
				}
				Res.outz("curr MP= " + global::Char.myCharz().cMP.ToString());
				GameScr.gI().dMP = global::Char.myCharz().cMP;
				bool isPaintInfoMe3 = GameScr.isPaintInfoMe;
				if (isPaintInfoMe3)
				{
				}
				goto IL_1B8C;
			}
			case 7:
			{
				global::Char @char = GameScr.findCharInMap(msg.reader().readInt());
				bool flag20 = @char == null;
				if (flag20)
				{
					goto IL_1B8C;
				}
				@char.clanID = msg.reader().readInt();
				bool flag21 = @char.clanID == -2;
				if (flag21)
				{
					@char.isCopy = true;
				}
				this.readCharInfo(@char, msg);
				try
				{
					@char.idAuraEff = msg.reader().readShort();
					@char.idEff_Set_Item = (short)msg.reader().readSByte();
					@char.idHat = msg.reader().readShort();
					bool flag22 = @char.bag >= 201;
					if (flag22)
					{
						@char.addEffChar(new Effect(@char.bag, @char, 2, -1, 10, 1)
						{
							typeEff = 5
						});
					}
					else
					{
						@char.removeEffChar(0, 201);
					}
					goto IL_1B8C;
				}
				catch (Exception)
				{
					goto IL_1B8C;
				}
				goto IL_13EA;
			}
			case 8:
				goto IL_13EA;
			case 9:
			{
				GameCanvas.debug("SA27", 2);
				global::Char char2 = GameScr.findCharInMap(msg.reader().readInt());
				bool flag23 = char2 != null;
				if (flag23)
				{
					char2.cHP = msg.reader().readLong();
					char2.cHPFull = msg.reader().readLong();
				}
				goto IL_1B8C;
			}
			case 10:
			{
				GameCanvas.debug("SA28", 2);
				global::Char char3 = GameScr.findCharInMap(msg.reader().readInt());
				bool flag24 = char3 != null;
				if (flag24)
				{
					char3.cHP = msg.reader().readLong();
					char3.cHPFull = msg.reader().readLong();
					char3.eff5BuffHp = (int)msg.reader().readShort();
					char3.eff5BuffMp = (int)msg.reader().readShort();
					char3.wp = (int)msg.reader().readShort();
					bool flag25 = char3.wp == -1;
					if (flag25)
					{
						char3.setDefaultWeapon();
					}
				}
				goto IL_1B8C;
			}
			case 11:
			{
				GameCanvas.debug("SA29", 2);
				global::Char char4 = GameScr.findCharInMap(msg.reader().readInt());
				bool flag26 = char4 != null;
				if (flag26)
				{
					char4.cHP = msg.reader().readLong();
					char4.cHPFull = msg.reader().readLong();
					char4.eff5BuffHp = (int)msg.reader().readShort();
					char4.eff5BuffMp = (int)msg.reader().readShort();
					char4.body = (int)msg.reader().readShort();
					bool flag27 = char4.body == -1;
					if (flag27)
					{
						char4.setDefaultBody();
					}
				}
				goto IL_1B8C;
			}
			case 12:
			{
				GameCanvas.debug("SA30", 2);
				global::Char char5 = GameScr.findCharInMap(msg.reader().readInt());
				bool flag28 = char5 != null;
				if (flag28)
				{
					char5.cHP = msg.reader().readLong();
					char5.cHPFull = msg.reader().readLong();
					char5.eff5BuffHp = (int)msg.reader().readShort();
					char5.eff5BuffMp = (int)msg.reader().readShort();
					char5.leg = (int)msg.reader().readShort();
					bool flag29 = char5.leg == -1;
					if (flag29)
					{
						char5.setDefaultLeg();
					}
				}
				goto IL_1B8C;
			}
			case 13:
			{
				GameCanvas.debug("SA31", 2);
				int num13 = msg.reader().readInt();
				global::Char char6 = (num13 != global::Char.myCharz().charID) ? GameScr.findCharInMap(num13) : global::Char.myCharz();
				bool flag30 = char6 != null;
				if (flag30)
				{
					char6.cHP = msg.reader().readLong();
					char6.cHPFull = msg.reader().readLong();
					char6.eff5BuffHp = (int)msg.reader().readShort();
					char6.eff5BuffMp = (int)msg.reader().readShort();
				}
				goto IL_1B8C;
			}
			case 14:
			{
				GameCanvas.debug("SA32", 2);
				global::Char char7 = GameScr.findCharInMap(msg.reader().readInt());
				bool flag31 = char7 == null;
				if (flag31)
				{
					goto IL_1B8C;
				}
				char7.cHP = msg.reader().readLong();
				sbyte b9 = msg.reader().readByte();
				Res.outz("player load hp type= " + b9.ToString());
				bool flag32 = b9 == 1;
				if (flag32)
				{
					ServerEffect.addServerEffect(11, char7, 5);
					ServerEffect.addServerEffect(104, char7, 4);
				}
				bool flag33 = b9 == 2;
				if (flag33)
				{
					char7.doInjure();
				}
				try
				{
					char7.cHPFull = msg.reader().readLong();
					goto IL_1B8C;
				}
				catch (Exception)
				{
					goto IL_1B8C;
				}
				goto IL_17C1;
			}
			case 15:
				goto IL_17C1;
			case 19:
				GameCanvas.debug("SA17", 2);
				global::Char.myCharz().boxSort();
				goto IL_1B8C;
			case 21:
			{
				GameCanvas.debug("SA19", 2);
				int num14 = msg.reader().readInt();
				global::Char.myCharz().xuInBox -= num14;
				global::Char.myCharz().xu += (long)num14;
				global::Char.myCharz().xuStr = mSystem.numberTostring(global::Char.myCharz().xu);
				goto IL_1B8C;
			}
			case 23:
			{
				short num15 = msg.reader().readShort();
				Skill skill3 = Skills.get(num15);
				this.useSkill(skill3);
				bool flag34 = num15 != 0 && num15 != 14 && num15 != 28;
				if (flag34)
				{
					GameScr.info1.addInfo(mResources.LEARN_SKILL + " " + skill3.template.name, 0);
				}
				goto IL_1B8C;
			}
			case 35:
			{
				GameCanvas.debug("SY3", 2);
				int num16 = msg.reader().readInt();
				Res.outz("CID = " + num16.ToString());
				bool flag35 = TileMap.mapID == 130;
				if (flag35)
				{
					GameScr.gI().starVS();
				}
				bool flag36 = num16 == global::Char.myCharz().charID;
				if (flag36)
				{
					global::Char.myCharz().cTypePk = msg.reader().readByte();
					bool flag37 = GameScr.gI().isVS() && global::Char.myCharz().cTypePk != 0;
					if (flag37)
					{
						GameScr.gI().starVS();
					}
					Res.outz("type pk= " + global::Char.myCharz().cTypePk.ToString());
					global::Char.myCharz().npcFocus = null;
					bool flag38 = !GameScr.gI().isMeCanAttackMob(global::Char.myCharz().mobFocus);
					if (flag38)
					{
						global::Char.myCharz().mobFocus = null;
					}
					global::Char.myCharz().itemFocus = null;
				}
				else
				{
					global::Char char8 = GameScr.findCharInMap(num16);
					bool flag39 = char8 != null;
					if (flag39)
					{
						Res.outz("type pk= " + char8.cTypePk.ToString());
						char8.cTypePk = msg.reader().readByte();
						bool flag40 = char8.isAttacPlayerStatus();
						if (flag40)
						{
							global::Char.myCharz().charFocus = char8;
						}
					}
				}
				for (int num17 = 0; num17 < GameScr.vCharInMap.size(); num17++)
				{
					global::Char char9 = GameScr.findCharInMap(num17);
					bool flag41 = char9 != null && char9.cTypePk != 0 && char9.cTypePk == global::Char.myCharz().cTypePk;
					if (flag41)
					{
						bool flag42 = !global::Char.myCharz().mobFocus.isMobMe;
						if (flag42)
						{
							global::Char.myCharz().mobFocus = null;
						}
						global::Char.myCharz().npcFocus = null;
						global::Char.myCharz().itemFocus = null;
						break;
					}
				}
				Res.outz("update type pk= ");
				goto IL_1B8C;
			}
			default:
				switch (b3)
				{
				case 61:
				{
					string text = msg.reader().readUTF();
					sbyte[] array = new sbyte[msg.reader().readInt()];
					msg.reader().read(ref array);
					bool flag43 = array.Length == 0;
					if (flag43)
					{
						array = null;
					}
					bool flag44 = text.Equals("KSkill");
					if (flag44)
					{
						GameScr.gI().onKSkill(array);
					}
					else
					{
						bool flag45 = text.Equals("OSkill");
						if (flag45)
						{
							GameScr.gI().onOSkill(array);
						}
						else
						{
							bool flag46 = text.Equals("CSkill");
							if (flag46)
							{
								GameScr.gI().onCSkill(array);
							}
						}
					}
					goto IL_1B8C;
				}
				case 62:
					Res.outz("ME UPDATE SKILL");
					this.read_UpdateSkill(msg);
					goto IL_1B8C;
				case 63:
				{
					sbyte b10 = msg.reader().readByte();
					bool flag47 = b10 > 0;
					if (flag47)
					{
						GameCanvas.panel.vPlayerMenu_id.removeAllElements();
						InfoDlg.showWait();
						MyVector vPlayerMenu = GameCanvas.panel.vPlayerMenu;
						for (int num18 = 0; num18 < (int)b10; num18++)
						{
							string caption = msg.reader().readUTF();
							string caption2 = msg.reader().readUTF();
							short menuSelect = msg.reader().readShort();
							GameCanvas.panel.vPlayerMenu_id.addElement(menuSelect.ToString() + string.Empty);
							global::Char.myCharz().charFocus.menuSelect = (int)menuSelect;
							vPlayerMenu.addElement(new Command(caption, 11115, global::Char.myCharz().charFocus)
							{
								caption2 = caption2
							});
						}
						InfoDlg.hide();
						GameCanvas.panel.setTabPlayerMenu();
					}
					goto IL_1B8C;
				}
				default:
					goto IL_1B8C;
				}
				break;
			}
			GameCanvas.debug("SA23", 2);
			global::Char.myCharz().xu = msg.reader().readLong();
			global::Char.myCharz().luong = msg.reader().readInt();
			global::Char.myCharz().cHP = msg.reader().readLong();
			global::Char.myCharz().cMP = msg.reader().readLong();
			global::Char.myCharz().luongKhoa = msg.reader().readInt();
			global::Char.myCharz().xuStr = Res.formatNumber2(global::Char.myCharz().xu);
			global::Char.myCharz().luongStr = mSystem.numberTostring((long)global::Char.myCharz().luong);
			global::Char.myCharz().luongKhoaStr = mSystem.numberTostring((long)global::Char.myCharz().luongKhoa);
			goto IL_1B8C;
			IL_13EA:
			GameCanvas.debug("SA26", 2);
			global::Char char10 = GameScr.findCharInMap(msg.reader().readInt());
			bool flag48 = char10 != null;
			if (flag48)
			{
				char10.cspeed = (int)msg.reader().readByte();
			}
			goto IL_1B8C;
			IL_17C1:
			GameCanvas.debug("SA33", 2);
			global::Char char11 = GameScr.findCharInMap(msg.reader().readInt());
			bool flag49 = char11 != null;
			if (flag49)
			{
				char11.cHP = msg.reader().readLong();
				char11.cHPFull = msg.reader().readLong();
				char11.cx = (int)msg.reader().readShort();
				char11.cy = (int)msg.reader().readShort();
				char11.statusMe = 1;
				char11.cp3 = 3;
				ServerEffect.addServerEffect(109, char11, 2);
			}
			IL_1B8C:;
		}
		catch (Exception ex)
		{
			Cout.println("Loi tai Sub : " + ex.ToString());
		}
		finally
		{
			if (msg != null)
			{
				msg.cleanup();
			}
		}
	}

	// Token: 0x060002EF RID: 751 RVA: 0x0003C1F4 File Offset: 0x0003A3F4
	private void useSkill(Skill skill)
	{
		bool flag = global::Char.myCharz().myskill == null;
		if (flag)
		{
			global::Char.myCharz().myskill = skill;
		}
		else
		{
			bool flag2 = skill.template.Equals(global::Char.myCharz().myskill.template);
			if (flag2)
			{
				global::Char.myCharz().myskill = skill;
			}
		}
		global::Char.myCharz().vSkill.addElement(skill);
		bool flag3 = (skill.template.type == 1 || skill.template.type == 4 || skill.template.type == 2 || skill.template.type == 3) && (skill.template.maxPoint == 0 || (skill.template.maxPoint > 0 && skill.point > 0));
		if (flag3)
		{
			bool flag4 = (int)skill.template.id == global::Char.myCharz().skillTemplateId;
			if (flag4)
			{
				Service.gI().selectSkill(global::Char.myCharz().skillTemplateId);
			}
			global::Char.myCharz().vSkillFight.addElement(skill);
		}
	}

	// Token: 0x060002F0 RID: 752 RVA: 0x0003C30C File Offset: 0x0003A50C
	public bool readCharInfo(global::Char c, Message msg)
	{
		try
		{
			c.clevel = (int)msg.reader().readByte();
			c.isInvisiblez = msg.reader().readBoolean();
			c.cTypePk = msg.reader().readByte();
			Res.outz(string.Concat(new string[]
			{
				"ADD TYPE PK= ",
				c.cTypePk.ToString(),
				" to player ",
				c.charID.ToString(),
				" @@ ",
				c.cName
			}));
			c.nClass = GameScr.nClasss[(int)msg.reader().readByte()];
			c.cgender = (int)msg.reader().readByte();
			c.head = (int)msg.reader().readShort();
			c.cName = msg.reader().readUTF();
			c.cHP = msg.reader().readLong();
			c.dHP = c.cHP;
			bool flag = c.cHP == 0L;
			if (flag)
			{
				c.statusMe = 14;
			}
			c.cHPFull = msg.reader().readLong();
			bool flag2 = c.cy >= TileMap.pxh - 100;
			if (flag2)
			{
				c.isFlyUp = true;
			}
			c.body = (int)msg.reader().readShort();
			c.leg = (int)msg.reader().readShort();
			c.bag = (int)msg.reader().readShort();
			Res.outz(string.Concat(new string[]
			{
				" body= ",
				c.body.ToString(),
				" leg= ",
				c.leg.ToString(),
				" bag=",
				c.bag.ToString(),
				"BAG ==",
				c.bag.ToString(),
				"*********************************"
			}));
			c.isShadown = true;
			sbyte b = msg.reader().readByte();
			bool flag3 = c.wp == -1;
			if (flag3)
			{
				c.setDefaultWeapon();
			}
			bool flag4 = c.body == -1;
			if (flag4)
			{
				c.setDefaultBody();
			}
			bool flag5 = c.leg == -1;
			if (flag5)
			{
				c.setDefaultLeg();
			}
			c.cx = (int)msg.reader().readShort();
			c.cy = (int)msg.reader().readShort();
			c.xSd = c.cx;
			c.ySd = c.cy;
			c.eff5BuffHp = (int)msg.reader().readShort();
			c.eff5BuffMp = (int)msg.reader().readShort();
			int num = (int)msg.reader().readByte();
			for (int i = 0; i < num; i++)
			{
				EffectChar effectChar = new EffectChar((short)msg.reader().readByte(), msg.reader().readInt(), msg.reader().readInt(), msg.reader().readShort());
				c.vEff.addElement(effectChar);
				bool flag6 = effectChar.template.type == 12 || effectChar.template.type == 11;
				if (flag6)
				{
					c.isInvisiblez = true;
				}
			}
			return true;
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		return false;
	}

	// Token: 0x060002F1 RID: 753 RVA: 0x0003C680 File Offset: 0x0003A880
	private void readGetImgByName(Message msg)
	{
		try
		{
			string name = msg.reader().readUTF();
			sbyte nFrame = msg.reader().readByte();
			sbyte[] array = NinjaUtil.readByteArray(msg);
			Image img = this.createImage(array);
			ImgByName.SetImage(name, img, nFrame);
			bool flag = array == null;
			if (flag)
			{
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060002F2 RID: 754 RVA: 0x0003C6E8 File Offset: 0x0003A8E8
	private void createItemNew(myReader d)
	{
		try
		{
			this.loadItemNew(d, -1, true);
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060002F3 RID: 755 RVA: 0x0003C71C File Offset: 0x0003A91C
	private void loadItemNew(myReader d, sbyte type, bool isSave)
	{
		try
		{
			d.mark(1000000);
			GameScr.vcItem = d.readByte();
			type = d.readByte();
			Res.err(string.Concat(new string[]
			{
				GameScr.vcItem.ToString(),
				":<<GameScr.vcItem >>>>>>loadItemNew: ",
				type.ToString(),
				"  isSave:",
				isSave.ToString()
			}));
			bool flag = type == 0;
			if (flag)
			{
				GameScr.gI().iOptionTemplates = new ItemOptionTemplate[(int)d.readShort()];
				for (int i = 0; i < GameScr.gI().iOptionTemplates.Length; i++)
				{
					GameScr.gI().iOptionTemplates[i] = new ItemOptionTemplate();
					GameScr.gI().iOptionTemplates[i].id = i;
					GameScr.gI().iOptionTemplates[i].name = d.readUTF();
					GameScr.gI().iOptionTemplates[i].type = (int)d.readByte();
				}
				bool flag2 = isSave;
				if (flag2)
				{
					d.reset();
					sbyte[] data = new sbyte[d.available()];
					d.readFully(ref data);
					Rms.saveRMS("NRitem0", data);
				}
			}
			else
			{
				bool flag3 = type == 1;
				if (flag3)
				{
					ItemTemplates.itemTemplates.clear();
					int num = (int)d.readShort();
					for (int j = 0; j < num; j++)
					{
						ItemTemplate it = new ItemTemplate((short)j, d.readByte(), d.readByte(), d.readUTF(), d.readUTF(), d.readByte(), d.readInt(), d.readShort(), d.readShort(), d.readBoolean());
						ItemTemplates.add(it);
					}
					bool flag4 = isSave;
					if (flag4)
					{
						d.reset();
						sbyte[] data2 = new sbyte[d.available()];
						d.readFully(ref data2);
						Rms.saveRMS("NRitem1", data2);
						sbyte[] data3 = new sbyte[]
						{
							GameScr.vcItem
						};
						Rms.saveRMS("NRitemVersion", data3);
					}
					LoginScr.isUpdateItem = false;
					GameScr.gI().readOk();
				}
				else
				{
					bool flag5 = type == 2;
					if (!flag5)
					{
						bool flag6 = type == 100;
						if (flag6)
						{
							global::Char.Arr_Head_2Fr = this.readArrHead(d);
							bool flag7 = isSave;
							if (flag7)
							{
								d.reset();
								sbyte[] data4 = new sbyte[d.available()];
								d.readFully(ref data4);
								Rms.saveRMS("NRitem100", data4);
							}
						}
						else
						{
							bool flag8 = type != 101;
							if (!flag8)
							{
								try
								{
									int num2 = (int)d.readShort();
									global::Char.Arr_Head_FlyMove = new short[num2];
									for (int k = 0; k < num2; k++)
									{
										short num3 = d.readShort();
										global::Char.Arr_Head_FlyMove[k] = num3;
									}
									bool flag9 = isSave;
									if (flag9)
									{
										d.reset();
										sbyte[] data5 = new sbyte[d.available()];
										d.readFully(ref data5);
										Rms.saveRMS("NRitem101", data5);
									}
								}
								catch (Exception)
								{
									global::Char.Arr_Head_FlyMove = new short[0];
								}
							}
						}
					}
				}
			}
		}
		catch (Exception ex)
		{
			ex.ToString();
		}
	}

	// Token: 0x060002F4 RID: 756 RVA: 0x0003CA80 File Offset: 0x0003AC80
	private void readFrameBoss(Message msg, int mobTemplateId)
	{
		try
		{
			int num = (int)msg.reader().readByte();
			int[][] array = new int[num][];
			for (int i = 0; i < num; i++)
			{
				int num2 = (int)msg.reader().readByte();
				array[i] = new int[num2];
				for (int j = 0; j < num2; j++)
				{
					array[i][j] = (int)msg.reader().readByte();
				}
			}
			Controller.frameHT_NEWBOSS.put(mobTemplateId.ToString() + string.Empty, array);
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060002F5 RID: 757 RVA: 0x0003CB2C File Offset: 0x0003AD2C
	private int[][] readArrHead(myReader d)
	{
		int[][] array = new int[][]
		{
			new int[]
			{
				542,
				543
			}
		};
		try
		{
			int num = (int)d.readShort();
			array = new int[num][];
			for (int i = 0; i < array.Length; i++)
			{
				int num2 = (int)d.readByte();
				array[i] = new int[num2];
				for (int j = 0; j < num2; j++)
				{
					array[i][j] = (int)d.readShort();
				}
			}
		}
		catch (Exception)
		{
		}
		return array;
	}

	// Token: 0x060002F6 RID: 758 RVA: 0x0003CBD4 File Offset: 0x0003ADD4
	public void phuban_Info(Message msg)
	{
		try
		{
			sbyte b = msg.reader().readByte();
			bool flag = b == 0;
			if (flag)
			{
				this.readPhuBan_CHIENTRUONGNAMEK(msg, (int)b);
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060002F7 RID: 759 RVA: 0x0003CC1C File Offset: 0x0003AE1C
	private void readPhuBan_CHIENTRUONGNAMEK(Message msg, int type_PB)
	{
		try
		{
			sbyte b = msg.reader().readByte();
			bool flag = b == 0;
			if (flag)
			{
				short idmapPaint = msg.reader().readShort();
				string nameTeam = msg.reader().readUTF();
				string nameTeam2 = msg.reader().readUTF();
				int maxPoint = msg.reader().readInt();
				short timeSecond = msg.reader().readShort();
				int maxLife = (int)msg.reader().readByte();
				GameScr.phuban_Info = new InfoPhuBan(type_PB, idmapPaint, nameTeam, nameTeam2, maxPoint, timeSecond);
				GameScr.phuban_Info.maxLife = maxLife;
				GameScr.phuban_Info.updateLife(type_PB, 0, 0);
			}
			else
			{
				bool flag2 = b == 1;
				if (flag2)
				{
					int pointTeam = msg.reader().readInt();
					int pointTeam2 = msg.reader().readInt();
					bool flag3 = GameScr.phuban_Info != null;
					if (flag3)
					{
						GameScr.phuban_Info.updatePoint(type_PB, pointTeam, pointTeam2);
					}
				}
				else
				{
					bool flag4 = b == 2;
					if (flag4)
					{
						sbyte b2 = msg.reader().readByte();
						short type = 0;
						bool flag5 = b2 == 1;
						if (flag5)
						{
							type = 1;
						}
						else
						{
							bool flag6 = b2 == 2;
							if (flag6)
							{
								type = 2;
							}
						}
						short subtype = -1;
						GameScr.phuban_Info = null;
						GameScr.addEffectEnd((int)type, (int)subtype, 0, GameCanvas.hw, GameCanvas.hh, 0, 0, -1, null);
					}
					else
					{
						bool flag7 = b == 5;
						if (flag7)
						{
							short timeSecond2 = msg.reader().readShort();
							bool flag8 = GameScr.phuban_Info != null;
							if (flag8)
							{
								GameScr.phuban_Info.updateTime(type_PB, timeSecond2);
							}
						}
						else
						{
							bool flag9 = b == 4;
							if (flag9)
							{
								int lifeTeam = (int)msg.reader().readByte();
								int lifeTeam2 = (int)msg.reader().readByte();
								bool flag10 = GameScr.phuban_Info != null;
								if (flag10)
								{
									GameScr.phuban_Info.updateLife(type_PB, lifeTeam, lifeTeam2);
								}
							}
						}
					}
				}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060002F8 RID: 760 RVA: 0x0003CE18 File Offset: 0x0003B018
	public void read_cmdExtra(Message msg)
	{
		try
		{
			sbyte b = msg.reader().readByte();
			mSystem.println(">>---read_cmdExtra-sub:" + b.ToString());
			bool flag = b == 0;
			if (flag)
			{
				short idHat = msg.reader().readShort();
				global::Char.myCharz().idHat = idHat;
				SoundMn.gI().getStrOption();
			}
			else
			{
				bool flag2 = b == 2;
				if (flag2)
				{
					int num = msg.reader().readInt();
					sbyte b2 = msg.reader().readByte();
					short num2 = msg.reader().readShort();
					string v = num2.ToString() + "," + b2.ToString();
					MainImage imagePath = ImgByName.getImagePath("banner_" + num2.ToString(), ImgByName.hashImagePath);
					GameCanvas.danhHieu.put(num.ToString() + string.Empty, v);
				}
				else
				{
					bool flag3 = b == 3;
					if (flag3)
					{
						short num3 = msg.reader().readShort();
						SmallImage.createImage((int)num3);
						BackgroudEffect.id_water1 = num3;
					}
					else
					{
						bool flag4 = b == 4;
						if (flag4)
						{
							string o = msg.reader().readUTF();
							GameCanvas.messageServer.addElement(o);
						}
						else
						{
							bool flag5 = b == 5;
							if (flag5)
							{
								string text = "\n|ChienTruong|Log: ";
								sbyte b3 = msg.reader().readByte();
								bool flag6 = b3 == 0;
								if (flag6)
								{
									GameScr.nCT_team = msg.reader().readUTF();
									GameScr.nCT_TeamA = (GameScr.nCT_TeamB = (int)msg.reader().readByte());
									GameScr.nCT_nBoyBaller = GameScr.nCT_TeamA * 2;
									GameScr.isPaint_CT = false;
									string text2 = text;
									text = string.Concat(new string[]
									{
										text2,
										"\tsub    0|  nCT_team= ",
										GameScr.nCT_team,
										"|nCT_TeamA =",
										GameScr.nCT_TeamA.ToString(),
										"  isPaint_CT=false \n"
									});
								}
								else
								{
									bool flag7 = b3 == 1;
									if (flag7)
									{
										int num4 = msg.reader().readInt();
										sbyte b4 = GameScr.nCT_floor = msg.reader().readByte();
										GameScr.nCT_timeBallte = (long)(num4 * 1000) + mSystem.currentTimeMillis();
										GameScr.isPaint_CT = true;
										string text3 = text;
										text = string.Concat(new string[]
										{
											text3,
											"\tsub    1 floor= ",
											b4.ToString(),
											"|timeBallte= ",
											num4.ToString(),
											"isPaint_CT=true \n"
										});
									}
									else
									{
										bool flag8 = b3 == 2;
										if (flag8)
										{
											GameScr.nCT_TeamA = (int)msg.reader().readByte();
											GameScr.nCT_TeamB = (int)msg.reader().readByte();
											GameScr.res_CT.removeAllElements();
											sbyte b5 = msg.reader().readByte();
											for (int i = 0; i < (int)b5; i++)
											{
												string text4 = string.Empty;
												text4 = text4 + msg.reader().readByte().ToString() + "|";
												text4 = text4 + msg.reader().readUTF() + "|";
												text4 = text4 + msg.reader().readShort().ToString() + "|";
												text4 += msg.reader().readInt().ToString();
												GameScr.res_CT.addElement(text4);
											}
											string text5 = text;
											text = string.Concat(new string[]
											{
												text5,
												"\tsub   2|  A= ",
												GameScr.nCT_TeamA.ToString(),
												"|B =",
												GameScr.nCT_TeamB.ToString(),
												"  isPaint_CT=true \n"
											});
										}
										else
										{
											bool flag9 = b3 == 3;
											if (flag9)
											{
												Service.gI().sendCT_ready(b, b3);
												GameScr.nCT_floor = 0;
												GameScr.nCT_timeBallte = 0L;
												GameScr.isPaint_CT = false;
												text += "\tsub    3|  isPaint_CT=false \n";
											}
											else
											{
												bool flag10 = b3 == 4;
												if (flag10)
												{
													GameScr.nUSER_CT = (int)msg.reader().readByte();
													GameScr.nUSER_MAX_CT = (int)msg.reader().readByte();
												}
											}
										}
									}
								}
								text += "END LOG CT.";
								Res.err(text);
							}
							else
							{
								this.readExtra(b, msg);
							}
						}
					}
				}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060002F9 RID: 761 RVA: 0x0003D2A0 File Offset: 0x0003B4A0
	public void read_UpdateSkill(Message msg)
	{
		try
		{
			short num = msg.reader().readShort();
			sbyte b = -1;
			try
			{
				b = msg.reader().readSByte();
			}
			catch (Exception)
			{
			}
			bool flag = b == 0;
			if (flag)
			{
				short curExp = msg.reader().readShort();
				for (int i = 0; i < global::Char.myCharz().vSkill.size(); i++)
				{
					Skill skill = (Skill)global::Char.myCharz().vSkill.elementAt(i);
					bool flag2 = skill.skillId == num;
					if (flag2)
					{
						skill.curExp = curExp;
						break;
					}
				}
			}
			else
			{
				bool flag3 = b == 1;
				if (flag3)
				{
					sbyte b2 = msg.reader().readByte();
					for (int j = 0; j < global::Char.myCharz().vSkill.size(); j++)
					{
						Skill skill2 = (Skill)global::Char.myCharz().vSkill.elementAt(j);
						bool flag4 = skill2.skillId == num;
						if (flag4)
						{
							for (int k = 0; k < 20; k++)
							{
								string nameImg = string.Concat(new string[]
								{
									"Skills_",
									skill2.template.id.ToString(),
									"_",
									b2.ToString(),
									"_",
									k.ToString()
								});
								MainImage imagePath = ImgByName.getImagePath(nameImg, ImgByName.hashImagePath);
							}
							break;
						}
					}
				}
				else
				{
					bool flag5 = b != -1;
					if (!flag5)
					{
						Skill skill3 = Skills.get(num);
						for (int l = 0; l < global::Char.myCharz().vSkill.size(); l++)
						{
							Skill skill4 = (Skill)global::Char.myCharz().vSkill.elementAt(l);
							bool flag6 = skill4.template.id == skill3.template.id;
							if (flag6)
							{
								global::Char.myCharz().vSkill.setElementAt(skill3, l);
								break;
							}
						}
						for (int m = 0; m < global::Char.myCharz().vSkillFight.size(); m++)
						{
							Skill skill5 = (Skill)global::Char.myCharz().vSkillFight.elementAt(m);
							bool flag7 = skill5.template.id == skill3.template.id;
							if (flag7)
							{
								global::Char.myCharz().vSkillFight.setElementAt(skill3, m);
								break;
							}
						}
						for (int n = 0; n < GameScr.onScreenSkill.Length; n++)
						{
							bool flag8 = GameScr.onScreenSkill[n] != null && GameScr.onScreenSkill[n].template.id == skill3.template.id;
							if (flag8)
							{
								GameScr.onScreenSkill[n] = skill3;
								break;
							}
						}
						for (int num2 = 0; num2 < GameScr.keySkill.Length; num2++)
						{
							bool flag9 = GameScr.keySkill[num2] != null && GameScr.keySkill[num2].template.id == skill3.template.id;
							if (flag9)
							{
								GameScr.keySkill[num2] = skill3;
								break;
							}
						}
						bool flag10 = global::Char.myCharz().myskill.template.id == skill3.template.id;
						if (flag10)
						{
							global::Char.myCharz().myskill = skill3;
						}
						GameScr.info1.addInfo(mResources.hasJustUpgrade1 + skill3.template.name + mResources.hasJustUpgrade2 + skill3.point.ToString(), 0);
					}
				}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060002FA RID: 762 RVA: 0x0003D69C File Offset: 0x0003B89C
	public void readExtra(sbyte sub, Message msg)
	{
		try
		{
			bool flag = sub != sbyte.MaxValue;
			if (!flag)
			{
				GameCanvas.endDlg();
				try
				{
					string str = ServerListScreen.linkDefault = msg.reader().readUTF();
					mSystem.AddIpTest();
					ServerListScreen.getServerList(ServerListScreen.linkDefault);
					Res.outz(">>>>read.isEXTRA_LINK " + str);
					sbyte b = msg.reader().readByte();
					bool flag2 = b > 0;
					if (flag2)
					{
						ServerListScreen.typeClass = new sbyte[(int)b];
						ServerListScreen.listChar = new global::Char[(int)b];
						for (int i = 0; i < (int)b; i++)
						{
							ServerListScreen.typeClass[i] = msg.reader().readByte();
							Res.outz(ServerListScreen.nameServer[i] + ">>>>read.isEXTRA_LINK  typeClass: " + ServerListScreen.typeClass[i].ToString());
							bool flag3 = ServerListScreen.typeClass[i] > -1;
							if (flag3)
							{
								ServerListScreen.isHaveChar = true;
								ServerListScreen.listChar[i] = new global::Char();
								ServerListScreen.listChar[i].cgender = (int)ServerListScreen.typeClass[i];
								ServerListScreen.listChar[i].head = (int)msg.reader().readShort();
								ServerListScreen.listChar[i].body = (int)msg.reader().readShort();
								ServerListScreen.listChar[i].leg = (int)msg.reader().readShort();
								ServerListScreen.listChar[i].bag = (int)msg.reader().readShort();
								ServerListScreen.listChar[i].cName = msg.reader().readUTF();
							}
						}
					}
				}
				catch (Exception)
				{
				}
				Controller.isEXTRA_LINK = true;
				ServerListScreen.saveRMS_ExtraLink();
				ServerListScreen.isWait = false;
				global::Char.isLoadingMap = false;
				LoginScr.isContinueToLogin = false;
				ServerListScreen.waitToLogin = false;
				bool flag4 = false;
				bool flag5 = false;
				try
				{
					bool flag6 = !Rms.loadRMSString("acc").Equals(string.Empty);
					if (flag6)
					{
						flag4 = true;
					}
					bool flag7 = !Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString()).Equals(string.Empty);
					if (flag7)
					{
						flag5 = true;
					}
				}
				catch (Exception)
				{
				}
				bool flag8 = !ServerListScreen.isHaveChar && !flag4 && !flag5;
				if (flag8)
				{
					GameCanvas.serverScreen.Login_New();
				}
				else
				{
					bool flag9 = Rms.loadRMSInt(ServerListScreen.RMS_svselect) == -1;
					if (flag9)
					{
						ServerScr.isShowSv_HaveChar = false;
						GameCanvas.serverScr.switchToMe();
					}
					else
					{
						ServerListScreen.SetIpSelect(Rms.loadRMSInt(ServerListScreen.RMS_svselect), false);
						bool flag10 = ServerListScreen.listChar != null && ServerListScreen.listChar[ServerListScreen.ipSelect] != null;
						if (flag10)
						{
							GameCanvas._SelectCharScr.SetInfoChar(ServerListScreen.listChar[ServerListScreen.ipSelect]);
						}
						else
						{
							GameCanvas.serverScreen.Login_New();
						}
					}
				}
			}
		}
		catch (Exception)
		{
			Res.outz(">>>>read.isEXTRA_LINK  errr:");
			GameCanvas.serverScr.switchToMe();
		}
	}

	// Token: 0x060002FB RID: 763 RVA: 0x0003D9D8 File Offset: 0x0003BBD8
	public ItemOption readItemOption(Message msg)
	{
		ItemOption result = null;
		try
		{
			int num = (int)msg.reader().readShort();
			int param = msg.reader().readInt();
			bool flag = num != -1;
			if (flag)
			{
				result = new ItemOption(num, param);
			}
		}
		catch (Exception)
		{
			Res.err(">>>>read.ItemOption  errr:");
		}
		return result;
	}

	// Token: 0x060002FC RID: 764 RVA: 0x0003DA40 File Offset: 0x0003BC40
	public void read_cmdExtraBig(Message msg)
	{
		try
		{
			sbyte b = msg.reader().readByte();
			mSystem.println(">>---read_cmdExtraBig-sub:" + b.ToString());
			bool flag = b == 0;
			if (flag)
			{
				this.loadItemNew(msg.reader(), 1, true);
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x04000509 RID: 1289
	protected static Controller me;

	// Token: 0x0400050A RID: 1290
	protected static Controller me2;

	// Token: 0x0400050B RID: 1291
	public Message messWait;

	// Token: 0x0400050C RID: 1292
	public static bool isLoadingData = false;

	// Token: 0x0400050D RID: 1293
	public static bool isConnectOK;

	// Token: 0x0400050E RID: 1294
	public static bool isConnectionFail;

	// Token: 0x0400050F RID: 1295
	public static bool isDisconnected;

	// Token: 0x04000510 RID: 1296
	public static bool isMain;

	// Token: 0x04000511 RID: 1297
	private float demCount;

	// Token: 0x04000512 RID: 1298
	private int move;

	// Token: 0x04000513 RID: 1299
	private int total;

	// Token: 0x04000514 RID: 1300
	public static bool isStopReadMessage;

	// Token: 0x04000515 RID: 1301
	public static bool isGet_CLIENT_INFO = false;

	// Token: 0x04000516 RID: 1302
	public static MyHashTable frameHT_NEWBOSS = new MyHashTable();

	// Token: 0x04000517 RID: 1303
	public const sbyte PHUBAN_TYPE_CHIENTRUONGNAMEK = 0;

	// Token: 0x04000518 RID: 1304
	public const sbyte PHUBAN_START = 0;

	// Token: 0x04000519 RID: 1305
	public const sbyte PHUBAN_UPDATE_POINT = 1;

	// Token: 0x0400051A RID: 1306
	public const sbyte PHUBAN_END = 2;

	// Token: 0x0400051B RID: 1307
	public const sbyte PHUBAN_LIFE = 4;

	// Token: 0x0400051C RID: 1308
	public const sbyte PHUBAN_INFO = 5;

	// Token: 0x0400051D RID: 1309
	public static bool isEXTRA_LINK = false;
}
using System;
using UnityEngine;

// Token: 0x0200003A RID: 58
public class Cout
{
	// Token: 0x060002FF RID: 767 RVA: 0x0003DACC File Offset: 0x0003BCCC
	public static void println(string s)
	{
		bool isTest = mSystem.isTest;
		if (isTest)
		{
			Debug.Log(((Cout.count % 2 != 0) ? "***--- " : ">>>--- ") + s);
			Cout.count++;
		}
	}

	// Token: 0x06000300 RID: 768 RVA: 0x0003DB14 File Offset: 0x0003BD14
	public static void Log(string str)
	{
		bool isTest = mSystem.isTest;
		if (isTest)
		{
			Debug.Log(str);
		}
	}

	// Token: 0x06000301 RID: 769 RVA: 0x0003DB34 File Offset: 0x0003BD34
	public static void LogError(string str)
	{
		bool isTest = mSystem.isTest;
		if (isTest)
		{
			Debug.LogError(str);
		}
	}

	// Token: 0x06000302 RID: 770 RVA: 0x0003DB54 File Offset: 0x0003BD54
	public static void LogError2(string str)
	{
		bool flag = !mSystem.isTest;
		if (flag)
		{
		}
	}

	// Token: 0x06000303 RID: 771 RVA: 0x0003DB70 File Offset: 0x0003BD70
	public static void LogError3(string str)
	{
		bool flag = !mSystem.isTest;
		if (flag)
		{
		}
	}

	// Token: 0x06000304 RID: 772 RVA: 0x0003DB8C File Offset: 0x0003BD8C
	public static void LogWarning(string str)
	{
		bool isTest = mSystem.isTest;
		if (isTest)
		{
			Debug.LogWarning(str);
		}
	}

	// Token: 0x0400051E RID: 1310
	public static int count;
}
using System;
using System.Diagnostics;
using System.Threading;

// Token: 0x02000030 RID: 48
internal class CpuHight
{
	// Token: 0x060002B6 RID: 694 RVA: 0x00028754 File Offset: 0x00026954
	public static void ExitForCpu()
	{
		bool flag = CpuHight.isMonitoring;
		if (flag)
		{
			return;
		}
		CpuHight.isMonitoring = true;
		Process currentProcess = Process.GetCurrentProcess();
		Console.WriteLine("Đang theo dõi mức sử dụng CPU...");
		for (;;)
		{
			Thread.Sleep(1000);
			TimeSpan totalProcessorTime = currentProcess.TotalProcessorTime;
			Thread.Sleep(500);
			float num = (float)((currentProcess.TotalProcessorTime - totalProcessorTime).TotalMilliseconds / 500.0) / (float)Environment.ProcessorCount * 100f;
			CpuHight.phantram = (int)num;
			Console.WriteLine(string.Format("CPU Usage: {0:F2}%", num));
			bool flag2 = num > 50f;
			if (flag2)
			{
				GameCanvas.startOKDlg("CPU sử dụng vượt quá 50%. Đóng ứng dụng...");
				Main.exit();
			}
		}
	}

	// Token: 0x060002B7 RID: 695 RVA: 0x00028820 File Offset: 0x00026A20
	public static void Update()
	{
		bool flag = TileMap.mapID > -1 && !CpuHight.isMonitoring;
		if (flag)
		{
			new Thread(delegate()
			{
				CpuHight.ExitForCpu();
			}).Start();
		}
	}

	// Token: 0x0400039D RID: 925
	private static bool isMonitoring;

	// Token: 0x0400039E RID: 926
	public static int phantram;
}
using System;
using System.Threading;

// Token: 0x0200003B RID: 59
public class CrackBallScr : mScreen
{
	// Token: 0x06000306 RID: 774 RVA: 0x0003DBB8 File Offset: 0x0003BDB8
	public CrackBallScr()
	{
		CrackBallScr.xSkill = new int[3];
		CrackBallScr.xSkill[0] = 16;
		CrackBallScr.ySkill = GameCanvas.h - 41;
		CrackBallScr.xSkill[1] = GameCanvas.w - 40;
		CrackBallScr.xSkill[2] = (CrackBallScr.xSkill[0] + CrackBallScr.xSkill[1]) / 2;
		Image img = GameCanvas.loadImage("/e/e_1.png");
		CrackBallScr.fraImgKame = new FrameImage(img, 30, 30);
		Image img2 = GameCanvas.loadImage("/e/e_0.png");
		CrackBallScr.fraImgKame_1 = new FrameImage(img2, 68, 65);
		Image img3 = GameCanvas.loadImage("/e/e_2.png");
		CrackBallScr.fraImgKame_2 = new FrameImage(img3, 66, 70);
		CrackBallScr.imgReplay = GameCanvas.loadImage("/e/nut2.png");
		CrackBallScr.imgX = GameCanvas.loadImage("/e/nut3.png");
		this.wP = 230;
		this.xP = GameCanvas.hw - this.wP / 2;
		this.hP = 40;
		this.yP = -this.hP;
	}

	// Token: 0x06000307 RID: 775 RVA: 0x0003DCE8 File Offset: 0x0003BEE8
	public static CrackBallScr gI()
	{
		bool flag = CrackBallScr.instance == null;
		if (flag)
		{
			CrackBallScr.instance = new CrackBallScr();
		}
		return CrackBallScr.instance;
	}

	// Token: 0x06000308 RID: 776 RVA: 0x0003DD18 File Offset: 0x0003BF18
	public void SetCrackBallScr(short[] idImage, byte typePrice, int price, short idTicket)
	{
		bool flag = idImage != null && idImage.Length != 0;
		if (flag)
		{
			this.yTo = global::Char.myCharz().cy - 10;
			this.setAuraItem();
			this.listBall = new BallInfo[idImage.Length];
			for (int i = 0; i < this.listBall.Length; i++)
			{
				this.listBall[i] = new BallInfo();
				this.listBall[i].idImg = (int)idImage[i];
				this.listBall[i].count = i * 25;
				this.listBall[i].yTo = -999;
				this.listBall[i].vx = Res.random(2, 5);
				this.listBall[i].dir = Res.random(-1, 2);
				this.listBall[i].SetChar();
			}
			this.isCanSkill = false;
			this.isKame = false;
			this.isSendSv = false;
			this.timeStart = GameCanvas.timeNow + (long)Res.random(1000, 2000);
			this.step = 0;
			this.indexSelect = -1;
			this.indexSkillSelect = -1;
			this.typePrice = typePrice;
			this.price = price;
			this.cost = 0;
			global::Char.myCharz().moveTo(470, 408, 1);
			global::Char.myCharz().cdir = -1;
			global::Char.myCharz().statusMe = 1;
			this.countFr = 0;
			this.countKame = 0;
			this.frame = 0;
			this.vp = 0;
			this.yP = -this.hP;
			this.idTicket = idTicket;
			this.numTicket = 0;
			this.checkNumTicket();
			this.switchToMe();
			SoundMn.gI().hoisinh();
		}
	}

	// Token: 0x06000309 RID: 777 RVA: 0x0003DECC File Offset: 0x0003C0CC
	private void setAuraItem()
	{
		this.rO = GameCanvas.hh / 3 + 10;
		bool flag = this.rO > 50;
		if (flag)
		{
			this.rO = 50;
		}
		this.xO = 360;
		GameScr.cmx = GameScr.cmxLim / 2;
		this.yO = GameScr.cmy + GameCanvas.hh / 3 + 30;
		this.iDot = 175;
		this.angle = 0;
		this.iAngle = 360 / this.iDot;
		this.xArg = new int[this.iDot];
		this.yArg = new int[this.iDot];
		this.xDot = new int[this.iDot];
		this.yDot = new int[this.iDot];
		this.setDotPosition();
	}

	// Token: 0x0600030A RID: 778 RVA: 0x0003DFA0 File Offset: 0x0003C1A0
	private void setDotPosition()
	{
		bool lowGraphic = GameCanvas.lowGraphic;
		if (!lowGraphic)
		{
			for (int i = 0; i < this.yArg.Length; i++)
			{
				this.yArg[i] = Res.abs(this.rO * Res.sin(this.angle) / 1024);
				this.xArg[i] = Res.abs(this.rO * Res.cos(this.angle) / 1024);
				bool flag = this.angle < 90;
				if (flag)
				{
					this.xDot[i] = this.xO + this.xArg[i];
					this.yDot[i] = this.yO - this.yArg[i];
				}
				else
				{
					bool flag2 = this.angle >= 90 && this.angle < 180;
					if (flag2)
					{
						this.xDot[i] = this.xO - this.xArg[i];
						this.yDot[i] = this.yO - this.yArg[i];
					}
					else
					{
						bool flag3 = this.angle >= 180 && this.angle < 270;
						if (flag3)
						{
							this.xDot[i] = this.xO - this.xArg[i];
							this.yDot[i] = this.yO + this.yArg[i];
						}
						else
						{
							this.xDot[i] = this.xO + this.xArg[i];
							this.yDot[i] = this.yO + this.yArg[i];
						}
					}
				}
				this.angle += this.iAngle;
			}
		}
	}

	// Token: 0x0600030B RID: 779 RVA: 0x0003E156 File Offset: 0x0003C356
	public void perform(int idAction, object p)
	{
	}

	// Token: 0x0600030C RID: 780 RVA: 0x0003E15C File Offset: 0x0003C35C
	public override void update()
	{
		try
		{
			this.cost = this.price * (int)this.checkNum();
			this.checkNumTicket();
			GameScr.gI().update();
			bool flag = this.timeStart - GameCanvas.timeNow > 0L;
			if (flag)
			{
				for (int i = 0; i < this.listBall.Length; i++)
				{
					this.listBall[i].count += 2;
					bool flag2 = this.listBall[i].count >= this.iDot;
					if (flag2)
					{
						this.listBall[i].count = 0;
					}
					this.listBall[i].x = this.xDot[this.listBall[i].count];
					this.listBall[i].y = this.yDot[this.listBall[i].count];
				}
			}
			else
			{
				bool flag3 = this.step == 0;
				if (flag3)
				{
					this.step = 1;
				}
				bool flag4 = this.step == 1;
				if (flag4)
				{
					for (int j = 0; j < this.listBall.Length; j++)
					{
						bool flag5 = this.listBall[j].yTo == -999 || this.listBall[j].isDone;
						if (!flag5)
						{
							bool flag6 = this.listBall[j].y < this.listBall[j].yTo;
							if (flag6)
							{
								bool flag7 = this.listBall[j].vy < 0;
								if (flag7)
								{
									this.listBall[j].vy = 0;
								}
								bool flag8 = this.listBall[j].y + this.listBall[j].vy > this.listBall[j].yTo;
								if (flag8)
								{
									this.listBall[j].y = this.listBall[j].yTo;
								}
								else
								{
									this.listBall[j].y += this.listBall[j].vy;
								}
								this.listBall[j].vy++;
							}
							else
							{
								bool flag9 = this.listBall[j].vy > 0;
								if (flag9)
								{
									this.listBall[j].vy = 0;
								}
								this.listBall[j].y += this.listBall[j].vy;
								this.listBall[j].vy--;
							}
							bool flag10 = this.listBall[j].y == this.listBall[j].yTo;
							if (flag10)
							{
								Effect me = new Effect(19, this.listBall[j].x - 5, this.listBall[j].y + 25, 2, 1, -1);
								EffecMn.addEff(me);
								SoundMn.gI().charFall();
								this.listBall[j].isDone = true;
								bool flag11 = !this.isCanSkill;
								if (flag11)
								{
									this.isCanSkill = true;
								}
							}
						}
					}
				}
				bool flag12 = this.step == 2;
				if (flag12)
				{
					for (int k = 0; k < this.listBall.Length; k++)
					{
						bool isDone = this.listBall[k].isDone;
						if (!isDone)
						{
							bool flag13 = this.listBall[k].y > -10;
							if (flag13)
							{
								bool flag14 = this.listBall[k].vy > 0;
								if (flag14)
								{
									this.listBall[k].vy = 0;
								}
								this.listBall[k].y += this.listBall[k].vy;
								this.listBall[k].vy--;
								this.listBall[k].x += this.listBall[k].vx * this.listBall[k].dir;
								this.listBall[k].vx -= 3;
							}
							bool flag15 = this.listBall[k].y == -10;
							if (flag15)
							{
								this.listBall[k].isPaint = false;
							}
						}
					}
					this.countFr++;
					bool flag16 = this.countFr > this.fr.Length - 1;
					if (flag16)
					{
						this.countFr = this.fr.Length - 1;
						this.isKame = true;
						SoundMn.gI().newKame();
						bool flag17 = !this.isSendSv && this.timeKame - GameCanvas.timeNow < 0L;
						if (flag17)
						{
							Service.gI().SendCrackBall(2, this.checkTicket() + this.checkNum());
							this.isSendSv = true;
						}
					}
					global::Char.myCharz().cf = (int)this.fr[this.countFr];
					this.countKame++;
					bool flag18 = this.countKame > 5;
					if (flag18)
					{
						this.countKame = 0;
					}
					this.frame = (int)this.nFrame[this.countKame];
				}
				bool flag19 = this.step == 3;
				if (flag19)
				{
					bool flag20 = this.countKame <= 5;
					if (flag20)
					{
						this.countKame = 5;
					}
					this.countKame++;
					bool flag21 = this.countKame > this.nFrame.Length - 1;
					if (flag21)
					{
						this.countKame = this.nFrame.Length - 1;
						this.step = 4;
						this.isKame = false;
						int num = 0;
						for (int l = 0; l < this.listBall.Length; l++)
						{
							bool flag22 = this.listBall[l].isDone && !this.listBall[l].isSetImg;
							if (flag22)
							{
								this.listBall[l].idImg = (int)this.idItem[num];
								this.listBall[l].isSetImg = true;
								num++;
							}
						}
					}
					this.frame = (int)this.nFrame[this.countKame];
				}
				bool flag23 = this.step == 4;
				if (flag23)
				{
					for (int m = 0; m < this.listBall.Length; m++)
					{
						bool isPaint = this.listBall[m].isPaint;
						if (isPaint)
						{
							this.listBall[m].xTo = global::Char.myCharz().cx;
						}
					}
					this.step = 5;
				}
				bool flag24 = this.step != 5;
				if (!flag24)
				{
					this.vp++;
					bool flag25 = this.yP < GameCanvas.hh / 3;
					if (flag25)
					{
						bool flag26 = this.yP + this.vp > GameCanvas.hh / 3;
						if (flag26)
						{
							this.yP = GameCanvas.hh / 3;
						}
						else
						{
							this.yP += this.vp;
						}
					}
					for (int n = 0; n < this.listBall.Length; n++)
					{
						bool flag27 = !this.listBall[n].isPaint;
						if (!flag27)
						{
							bool flag28 = this.listBall[n].x < this.listBall[n].xTo;
							if (flag28)
							{
								bool flag29 = this.listBall[n].vx < 0;
								if (flag29)
								{
									this.listBall[n].vx = 0;
								}
								bool flag30 = this.listBall[n].x + this.listBall[n].vx > this.listBall[n].xTo;
								if (flag30)
								{
									this.listBall[n].x = this.listBall[n].xTo;
								}
								else
								{
									this.listBall[n].x += this.listBall[n].vx;
								}
								this.listBall[n].vx++;
							}
							else
							{
								bool flag31 = this.listBall[n].vx > 0;
								if (flag31)
								{
									this.listBall[n].vx = 0;
								}
								this.listBall[n].x += this.listBall[n].vx;
								this.listBall[n].vx--;
							}
							bool flag32 = this.listBall[n].x == this.listBall[n].xTo;
							if (flag32)
							{
								this.listBall[n].isPaint = false;
							}
						}
					}
				}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x0600030D RID: 781 RVA: 0x0003EA8C File Offset: 0x0003CC8C
	public override void updateKey()
	{
		bool isLock = InfoDlg.isLock;
		if (!isLock)
		{
			bool flag = GameCanvas.isTouch && !ChatTextField.gI().isShow && !GameCanvas.menu.showMenu;
			if (flag)
			{
				this.updateKeyTouchControl();
			}
			bool flag2 = CrackBallScr.isAutoCrackBall && !GameCanvas.keyPressed[0];
			if (flag2)
			{
				GameCanvas.clearKeyHold();
				GameCanvas.clearKeyPressed();
			}
			bool flag3 = GameCanvas.keyPressed[0];
			if (flag3)
			{
				this.doClickSkill(2);
			}
			for (int i = 1; i < 8; i++)
			{
				bool flag4 = GameCanvas.keyPressed[i];
				if (flag4)
				{
					GameCanvas.keyPressed[i] = false;
					this.doClickBall(i - 1);
				}
			}
			bool flag5 = GameCanvas.keyPressed[12];
			if (flag5)
			{
				GameCanvas.keyPressed[12] = false;
				this.doClickSkill(0);
			}
			bool flag6 = GameCanvas.keyPressed[13];
			if (flag6)
			{
				GameCanvas.keyPressed[13] = false;
				this.doClickSkill(1);
			}
			GameCanvas.clearKeyPressed();
		}
	}

	// Token: 0x0600030E RID: 782 RVA: 0x0003EB98 File Offset: 0x0003CD98
	private void updateKeyTouchControl()
	{
		bool flag = this.step == 1 && GameCanvas.isPointerClick;
		if (flag)
		{
			for (int i = 0; i < this.listBall.Length; i++)
			{
				bool flag2 = GameCanvas.isPointerHoldIn(this.listBall[i].x - 20 - GameScr.cmx, this.listBall[i].y - 10 - GameScr.cmy, 30, 30) && GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
				if (flag2)
				{
					this.doClickBall(i);
				}
			}
		}
		bool flag3 = !GameCanvas.isPointerClick;
		if (!flag3)
		{
			for (int j = 0; j < CrackBallScr.xSkill.Length; j++)
			{
				bool flag4 = GameCanvas.isPointerHoldIn(CrackBallScr.xSkill[j], CrackBallScr.ySkill, 36, 36) && GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
				if (flag4)
				{
					bool flag5 = CrackBallScr.isAutoCrackBall && j != 2;
					if (flag5)
					{
						break;
					}
					this.doClickSkill(j);
				}
			}
		}
	}

	// Token: 0x0600030F RID: 783 RVA: 0x0003ECAC File Offset: 0x0003CEAC
	private void doClickBall(int index)
	{
		bool flag = !this.listBall[index].isDone;
		if (flag)
		{
			SoundMn.gI().getItem();
			long num = (this.typePrice != 0) ? ((long)global::Char.myCharz().checkLuong()) : global::Char.myCharz().xu;
			bool flag2 = (int)this.checkTicket() >= this.numTicket && num < (long)(this.cost + this.price);
			if (flag2)
			{
				string s = mResources.not_enough_money_1 + " " + ((this.typePrice != 0) ? mResources.LUONG : mResources.XU);
				GameScr.info1.addInfo(s, 0);
			}
			else
			{
				this.indexSelect = index;
				this.listBall[this.indexSelect].yTo = this.yTo + Res.random(-3, 3);
			}
		}
	}

	// Token: 0x06000310 RID: 784 RVA: 0x0003ED84 File Offset: 0x0003CF84
	private void doClickSkill(int index)
	{
		this.indexSkillSelect = index;
		bool flag = this.indexSkillSelect == 2;
		if (flag)
		{
			CrackBallScr.isAutoCrackBall = !CrackBallScr.isAutoCrackBall;
			bool flag2 = CrackBallScr.isAutoCrackBall;
			if (flag2)
			{
				this.startAutoCrackBall();
			}
			else
			{
				CrackBallScr.isCallStop = true;
			}
		}
		else
		{
			bool flag3 = index == 0;
			if (flag3)
			{
				bool flag4 = this.step < 2;
				if (flag4)
				{
					bool flag5 = this.checkTicket() + this.checkNum() > 0;
					if (flag5)
					{
						this.step = 2;
						SoundMn.gI().gong();
						global::Char.myCharz().setSkillPaint(GameScr.sks[13], 0);
						this.timeKame = GameCanvas.timeNow + (long)Res.random(2000, 3000);
					}
				}
				else
				{
					bool flag6 = this.yP == GameCanvas.hh / 3;
					if (flag6)
					{
						Service.gI().SendCrackBall(this.typePrice, 0);
					}
				}
			}
			else
			{
				bool flag7 = CrackBallScr.isAutoCrackBall;
				if (flag7)
				{
					this.stopAutoCrackBall();
				}
				GameScr.gI().isRongThanXuatHien = false;
				GameScr.gI().switchToMe();
			}
		}
	}

	// Token: 0x06000311 RID: 785 RVA: 0x0003EEA8 File Offset: 0x0003D0A8
	public override void paint(mGraphics g)
	{
		try
		{
			GameScr.gI().paint(g);
			g.translate(-GameScr.cmx, -GameScr.cmy);
			g.translate(0, GameCanvas.transY);
			for (int i = 0; i < this.listBall.Length; i++)
			{
				bool flag = this.listBall[i].isPaint && this.listBall[i].y > this.listBall[i].yTo - 20;
				if (flag)
				{
					g.drawImage(TileMap.bong, this.listBall[i].x, this.listBall[i].yTo + 7, mGraphics.VCENTER | mGraphics.HCENTER);
				}
			}
			for (int j = 0; j < this.listBall.Length; j++)
			{
				bool isPaint = this.listBall[j].isPaint;
				if (isPaint)
				{
					SmallImage.drawSmallImage(g, this.listBall[j].idImg, this.listBall[j].x, this.listBall[j].y, 0, mGraphics.VCENTER | mGraphics.HCENTER);
				}
			}
			bool flag2 = this.isKame;
			if (flag2)
			{
				bool flag3 = CrackBallScr.fraImgKame != null;
				if (flag3)
				{
					int num = global::Char.myCharz().cx - CrackBallScr.fraImgKame.frameWidth - 28;
					for (int k = 0; k < GameCanvas.w / CrackBallScr.fraImgKame.frameWidth + 1; k++)
					{
						CrackBallScr.fraImgKame.drawFrame(this.frame, num - k * (CrackBallScr.fraImgKame.frameWidth - 1), global::Char.myCharz().cy - CrackBallScr.fraImgKame.frameHeight / 2 - 12 + 2, 0, 0, g);
					}
				}
				bool flag4 = CrackBallScr.fraImgKame_1 != null;
				if (flag4)
				{
					int num2 = global::Char.myCharz().cx - CrackBallScr.fraImgKame_1.frameWidth - 10;
					CrackBallScr.fraImgKame_1.drawFrame(this.frame, num2 - 5, global::Char.myCharz().cy - CrackBallScr.fraImgKame_1.frameHeight / 2 - 12, 0, 0, g);
				}
			}
			GameScr.resetTranslate(g);
			int num3 = 240;
			int num4 = GameCanvas.w - num3;
			int num5 = 15;
			g.setColor(13524492);
			g.fillRect(num4, num5 - 15, num3, 15);
			g.drawImage(Panel.imgXu, num4 + 11, num5 - 7, 3);
			g.drawImage(Panel.imgLuong, num4 + 90, num5 - 8, 3);
			mFont.tahoma_7_yellow.drawString(g, global::Char.myCharz().xuStr + string.Empty, num4 + 24, num5 - 13, mFont.LEFT, mFont.tahoma_7_grey);
			mFont.tahoma_7_yellow.drawString(g, global::Char.myCharz().luongStr + string.Empty, num4 + 100, num5 - 13, mFont.LEFT, mFont.tahoma_7_grey);
			g.drawImage(Panel.imgLuongKhoa, num4 + 150, num5 - 7, 3);
			mFont.tahoma_7_yellow.drawString(g, global::Char.myCharz().luongKhoaStr + string.Empty, num4 + 160, num5 - 13, mFont.LEFT, mFont.tahoma_7_grey);
			g.drawImage(Panel.imgTicket, num4 + 200, num5 - 7, 3);
			mFont.tahoma_7_yellow.drawString(g, this.numTicket.ToString() + string.Empty, num4 + 210, num5 - 13, mFont.LEFT, mFont.tahoma_7_grey);
			bool flag5 = this.step < 4;
			if (flag5)
			{
				int num6 = num3 / 2 + 20;
				int num7 = GameCanvas.w - num6;
				g.setColor(11837316);
				g.fillRect(num7, num5, num6, 15);
				bool flag6 = this.typePrice == 0;
				if (flag6)
				{
					g.drawImage(Panel.imgXu, num7 + 21, num5 + 8, 3);
				}
				else
				{
					g.drawImage(Panel.imgLuongKhoa, num7 + 21, num5 + 7, 3);
					g.drawImage(Panel.imgLuong, num7 + 18, num5 + 7, 3);
				}
				mFont.tahoma_7_red.drawString(g, " -" + this.cost.ToString(), num7 + 30, num5 + 2, mFont.LEFT, mFont.tahoma_7_grey);
				g.drawImage(Panel.imgTicket, num7 + 80, num5 + 7, 3);
				mFont.tahoma_7_red.drawString(g, " -" + this.checkTicket().ToString(), num7 + 90, num5 + 2, mFont.LEFT, mFont.tahoma_7_grey);
			}
			g.drawImage(GameScr.imgSkill, CrackBallScr.xSkill[0], CrackBallScr.ySkill, 0);
			bool flag7 = this.indexSkillSelect == 0;
			if (flag7)
			{
				g.drawImage(GameScr.imgSkill2, CrackBallScr.xSkill[0], CrackBallScr.ySkill, 0);
			}
			bool flag8 = this.step < 3;
			if (flag8)
			{
				SmallImage.drawSmallImage(g, 540, CrackBallScr.xSkill[0] + 14, CrackBallScr.ySkill + 14, 0, StaticObj.VCENTER_HCENTER);
			}
			else
			{
				g.drawImage(CrackBallScr.imgReplay, CrackBallScr.xSkill[0] + 14 - 10, CrackBallScr.ySkill + 14 - 10, 0);
			}
			g.drawImage(GameScr.imgSkill, CrackBallScr.xSkill[1], CrackBallScr.ySkill, 0);
			bool flag9 = this.indexSkillSelect == 1;
			if (flag9)
			{
				g.drawImage(GameScr.imgSkill2, CrackBallScr.xSkill[1], CrackBallScr.ySkill, 0);
			}
			g.drawImage(CrackBallScr.imgX, CrackBallScr.xSkill[1] + 14 - 10, CrackBallScr.ySkill + 14 - 10, 0);
			bool flag10 = this.step > 3;
			if (flag10)
			{
				GameCanvas.paintz.paintFrameSimple(this.xP, this.yP, this.wP, this.hP, g);
				int num8 = GameCanvas.hw - this.idItem.Length * 30 / 2;
				for (int l = 0; l < this.idItem.Length; l++)
				{
					SmallImage.drawSmallImage(g, (int)this.idItem[l], num8 + 5 + l * 30, this.yP + 10, 0, 0);
				}
			}
			bool flag11 = CrackBallScr.isAutoCrackBall;
			if (flag11)
			{
				g.drawImage(GameScr.imgSkill2, (CrackBallScr.xSkill[0] + CrackBallScr.xSkill[1]) / 2, CrackBallScr.ySkill, 0);
			}
			else
			{
				g.drawImage(GameScr.imgSkill, (CrackBallScr.xSkill[0] + CrackBallScr.xSkill[1]) / 2, CrackBallScr.ySkill, 0);
			}
			SmallImage.drawSmallImage(g, 4387, (CrackBallScr.xSkill[0] + CrackBallScr.xSkill[1]) / 2 + 14, CrackBallScr.ySkill + 14, 0, StaticObj.VCENTER_HCENTER);
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000312 RID: 786 RVA: 0x0003F590 File Offset: 0x0003D790
	public void DoneCrackBallScr(short[] idImage)
	{
		this.step = 3;
		this.idItem = idImage;
	}

	// Token: 0x06000313 RID: 787 RVA: 0x0003F5A1 File Offset: 0x0003D7A1
	public override void switchToMe()
	{
		GameScr.isPaintOther = true;
		GameScr.gI().isRongThanXuatHien = true;
		base.switchToMe();
	}

	// Token: 0x06000314 RID: 788 RVA: 0x0003F5BC File Offset: 0x0003D7BC
	private byte checkTicket()
	{
		byte b = 0;
		for (int i = 0; i < this.listBall.Length; i++)
		{
			bool isDone = this.listBall[i].isDone;
			if (isDone)
			{
				b += 1;
			}
		}
		bool flag = (int)b > this.numTicket;
		if (flag)
		{
			b = (byte)this.numTicket;
		}
		return b;
	}

	// Token: 0x06000315 RID: 789 RVA: 0x0003F620 File Offset: 0x0003D820
	private byte checkNum()
	{
		byte b = 0;
		for (int i = 0; i < this.listBall.Length; i++)
		{
			bool isDone = this.listBall[i].isDone;
			if (isDone)
			{
				b += 1;
			}
		}
		b -= this.checkTicket();
		bool flag = b <= 0;
		if (flag)
		{
			b = 0;
		}
		return b;
	}

	// Token: 0x06000316 RID: 790 RVA: 0x0003F684 File Offset: 0x0003D884
	private void checkNumTicket()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			bool flag = global::Char.myCharz().arrItemBag[i] != null && global::Char.myCharz().arrItemBag[i].template.id == this.idTicket;
			if (flag)
			{
				this.numTicket = global::Char.myCharz().arrItemBag[i].quantity;
				break;
			}
		}
	}

	// Token: 0x06000317 RID: 791 RVA: 0x0003F6FC File Offset: 0x0003D8FC
	private void useSkillCrackBall()
	{
		bool flag = this.step < 2;
		if (flag)
		{
			bool flag2 = this.checkTicket() + this.checkNum() > 0;
			if (flag2)
			{
				this.step = 2;
				SoundMn.gI().gong();
				global::Char.myCharz().setSkillPaint(GameScr.sks[13], 0);
				this.timeKame = GameCanvas.timeNow + (long)Res.random(2000, 3000);
			}
		}
		else
		{
			bool flag3 = this.yP == GameCanvas.hh / 3;
			if (flag3)
			{
				Service.gI().SendCrackBall(this.typePrice, 0);
			}
		}
	}

	// Token: 0x06000318 RID: 792 RVA: 0x0003F79C File Offset: 0x0003D99C
	public void startAutoCrackBall()
	{
		Thread thread = new Thread(new ThreadStart(this.AutoCrackBall));
		thread.Start();
	}

	// Token: 0x06000319 RID: 793 RVA: 0x0003F7C3 File Offset: 0x0003D9C3
	public void stopAutoCrackBall()
	{
		CrackBallScr.isAutoCrackBall = false;
		this.indexSkillSelect = -1;
		CrackBallScr.isCallStop = false;
		CrackBallScr.isContinue = false;
	}

	// Token: 0x0600031A RID: 794 RVA: 0x0003F7E0 File Offset: 0x0003D9E0
	public void AutoCrackBall()
	{
		int num = 0;
		bool flag = false;
		try
		{
			while (CrackBallScr.isAutoCrackBall && GameCanvas.currentScreen == CrackBallScr.instance)
			{
				this.indexSkillSelect = 2;
				while (num < 7 && this.step != 5)
				{
					this.doClickBall(num);
					num++;
					Thread.Sleep(300);
				}
				bool flag2 = num == 7;
				if (flag2)
				{
					Thread.Sleep(800);
					CrackBallScr.gI().useSkillCrackBall();
					Thread.Sleep(4000);
					bool flag3 = CrackBallScr.isCallStop;
					if (flag3)
					{
						this.stopAutoCrackBall();
						Thread.ResetAbort();
						break;
					}
					bool flag4 = this.step == 5;
					if (flag4)
					{
						CrackBallScr.gI().useSkillCrackBall();
						num = 0;
					}
					Thread.Sleep(1000);
				}
				bool flag5 = this.step == 5 && num == 0 && !flag;
				if (flag5)
				{
					flag = true;
					CrackBallScr.gI().useSkillCrackBall();
				}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x0400051F RID: 1311
	public static CrackBallScr instance;

	// Token: 0x04000520 RID: 1312
	private BallInfo[] listBall;

	// Token: 0x04000521 RID: 1313
	private byte step;

	// Token: 0x04000522 RID: 1314
	private byte typePrice;

	// Token: 0x04000523 RID: 1315
	private int rO;

	// Token: 0x04000524 RID: 1316
	private int xO;

	// Token: 0x04000525 RID: 1317
	private int yO;

	// Token: 0x04000526 RID: 1318
	private int angle;

	// Token: 0x04000527 RID: 1319
	private int iAngle;

	// Token: 0x04000528 RID: 1320
	private int iDot;

	// Token: 0x04000529 RID: 1321
	private int yTo;

	// Token: 0x0400052A RID: 1322
	private int indexSelect;

	// Token: 0x0400052B RID: 1323
	private int indexSkillSelect;

	// Token: 0x0400052C RID: 1324
	private int numTicket;

	// Token: 0x0400052D RID: 1325
	private int xP;

	// Token: 0x0400052E RID: 1326
	private int yP;

	// Token: 0x0400052F RID: 1327
	private int wP;

	// Token: 0x04000530 RID: 1328
	private int hP;

	// Token: 0x04000531 RID: 1329
	private int price;

	// Token: 0x04000532 RID: 1330
	private int cost;

	// Token: 0x04000533 RID: 1331
	private int countFr;

	// Token: 0x04000534 RID: 1332
	private int countKame;

	// Token: 0x04000535 RID: 1333
	private int frame;

	// Token: 0x04000536 RID: 1334
	private int vp;

	// Token: 0x04000537 RID: 1335
	private int[] xArg;

	// Token: 0x04000538 RID: 1336
	private int[] yArg;

	// Token: 0x04000539 RID: 1337
	private int[] xDot;

	// Token: 0x0400053A RID: 1338
	private int[] yDot;

	// Token: 0x0400053B RID: 1339
	private short[] idItem;

	// Token: 0x0400053C RID: 1340
	private long timeStart;

	// Token: 0x0400053D RID: 1341
	private long timeKame;

	// Token: 0x0400053E RID: 1342
	private bool isKame;

	// Token: 0x0400053F RID: 1343
	private bool isCanSkill;

	// Token: 0x04000540 RID: 1344
	private bool isSendSv;

	// Token: 0x04000541 RID: 1345
	private short idTicket;

	// Token: 0x04000542 RID: 1346
	private static int ySkill;

	// Token: 0x04000543 RID: 1347
	private static int[] xSkill;

	// Token: 0x04000544 RID: 1348
	private static FrameImage fraImgKame;

	// Token: 0x04000545 RID: 1349
	private static FrameImage fraImgKame_1;

	// Token: 0x04000546 RID: 1350
	private static FrameImage fraImgKame_2;

	// Token: 0x04000547 RID: 1351
	private static Image imgX;

	// Token: 0x04000548 RID: 1352
	private static Image imgReplay;

	// Token: 0x04000549 RID: 1353
	public static bool isAutoCrackBall;

	// Token: 0x0400054A RID: 1354
	public static bool isCallStop;

	// Token: 0x0400054B RID: 1355
	public static bool isContinue;

	// Token: 0x0400054C RID: 1356
	private byte[] fr = new byte[]
	{
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		19,
		20
	};

	// Token: 0x0400054D RID: 1357
	private byte[] nFrame = new byte[]
	{
		0,
		0,
		0,
		1,
		1,
		1,
		2,
		2,
		2,
		3,
		3,
		3
	};
}
using System;

// Token: 0x0200003C RID: 60
public class CreateCharScr : mScreen, IActionListener
{
	// Token: 0x0600031B RID: 795 RVA: 0x0003F904 File Offset: 0x0003DB04
	public CreateCharScr()
	{
		bool flag = GameCanvas.loginScr == null;
		if (flag)
		{
			GameCanvas.loginScr = new LoginScr();
		}
		try
		{
			bool flag2 = !GameCanvas.lowGraphic;
			if (flag2)
			{
				CreateCharScr.loadMapFromResource(new sbyte[]
				{
					39,
					40,
					41
				});
			}
			this.loadMapTableFromResource(new sbyte[]
			{
				39,
				40,
				41
			});
		}
		catch (Exception ex)
		{
			Cout.LogError("Tao char loi " + ex.ToString());
		}
		bool flag3 = GameCanvas.w <= 200;
		if (flag3)
		{
			GameScr.setPopupSize(128, 100);
			GameScr.popupX = (GameCanvas.w - 128) / 2;
			GameScr.popupY = 10;
			this.cy += 15;
			this.dy -= 15;
		}
		CreateCharScr.indexGender = 1;
		CreateCharScr.tAddName = new TField();
		CreateCharScr.tAddName.width = GameCanvas.loginScr.tfUser.width;
		bool flag4 = GameCanvas.w < 200;
		if (flag4)
		{
			CreateCharScr.tAddName.width = 60;
		}
		CreateCharScr.tAddName.height = mScreen.ITEM_HEIGHT + 2;
		bool flag5 = GameCanvas.w < 200;
		if (flag5)
		{
			CreateCharScr.tAddName.x = GameScr.popupX + 45;
			CreateCharScr.tAddName.y = GameScr.popupY + 12;
		}
		else
		{
			CreateCharScr.tAddName.x = GameCanvas.w / 2 - CreateCharScr.tAddName.width / 2;
			CreateCharScr.tAddName.y = 35;
		}
		bool flag6 = !GameCanvas.isTouch;
		if (flag6)
		{
			CreateCharScr.tAddName.isFocus = true;
		}
		CreateCharScr.tAddName.setIputType(TField.INPUT_TYPE_ANY);
		CreateCharScr.tAddName.showSubTextField = false;
		CreateCharScr.tAddName.strInfo = mResources.char_name;
		bool flag7 = CreateCharScr.tAddName.getText().Equals("@");
		if (flag7)
		{
			CreateCharScr.tAddName.setText(GameCanvas.loginScr.tfUser.getText().Substring(0, GameCanvas.loginScr.tfUser.getText().IndexOf("@")));
		}
		CreateCharScr.tAddName.name = mResources.char_name;
		CreateCharScr.indexGender = 1;
		CreateCharScr.indexHair = 0;
		this.center = new Command(mResources.NEWCHAR, this, 8000, null);
		this.left = new Command(mResources.BACK, this, 8001, null);
		bool flag8 = !GameCanvas.isTouch;
		if (flag8)
		{
			this.right = CreateCharScr.tAddName.cmdClear;
		}
		this.yBegin = CreateCharScr.tAddName.y;
	}

	// Token: 0x0600031C RID: 796 RVA: 0x0003FBFC File Offset: 0x0003DDFC
	public static CreateCharScr gI()
	{
		bool flag = CreateCharScr.instance == null;
		if (flag)
		{
			CreateCharScr.instance = new CreateCharScr();
		}
		return CreateCharScr.instance;
	}

	// Token: 0x0600031D RID: 797 RVA: 0x0003FC2B File Offset: 0x0003DE2B
	public static void init()
	{
	}

	// Token: 0x0600031E RID: 798 RVA: 0x0003FC30 File Offset: 0x0003DE30
	public static void loadMapFromResource(sbyte[] mapID)
	{
		Res.outz("newwwwwwwwww =============");
		for (int i = 0; i < mapID.Length; i++)
		{
			DataInputStream dataInputStream = MyStream.readFile("/mymap/" + mapID[i].ToString());
			MapTemplate.tmw[i] = (int)((ushort)dataInputStream.read());
			MapTemplate.tmh[i] = (int)((ushort)dataInputStream.read());
			Cout.LogError("Thong TIn : " + MapTemplate.tmw[i].ToString() + "::" + MapTemplate.tmh[i].ToString());
			MapTemplate.maps[i] = new int[dataInputStream.available()];
			Cout.LogError("lent= " + MapTemplate.maps[i].Length.ToString());
			for (int j = 0; j < MapTemplate.tmw[i] * MapTemplate.tmh[i]; j++)
			{
				MapTemplate.maps[i][j] = dataInputStream.read();
			}
			MapTemplate.types[i] = new int[MapTemplate.maps[i].Length];
		}
	}

	// Token: 0x0600031F RID: 799 RVA: 0x0003FD50 File Offset: 0x0003DF50
	public void loadMapTableFromResource(sbyte[] mapID)
	{
		bool lowGraphic = GameCanvas.lowGraphic;
		if (!lowGraphic)
		{
			DataInputStream dataInputStream = null;
			try
			{
				for (int i = 0; i < mapID.Length; i++)
				{
					dataInputStream = MyStream.readFile("/mymap/mapTable" + mapID[i].ToString());
					Cout.LogError("mapTable : " + mapID[i].ToString());
					short num = dataInputStream.readShort();
					MapTemplate.vCurrItem[i] = new MyVector();
					Res.outz("nItem= " + num.ToString());
					for (int j = 0; j < (int)num; j++)
					{
						short id = dataInputStream.readShort();
						short num2 = dataInputStream.readShort();
						short num3 = dataInputStream.readShort();
						bool flag = TileMap.getBIById((int)id) != null;
						if (flag)
						{
							BgItem bibyId = TileMap.getBIById((int)id);
							BgItem bgItem = new BgItem();
							bgItem.id = (int)id;
							bgItem.idImage = bibyId.idImage;
							bgItem.dx = bibyId.dx;
							bgItem.dy = bibyId.dy;
							bgItem.x = (int)(num2 * (short)TileMap.size);
							bgItem.y = (int)(num3 * (short)TileMap.size);
							bgItem.layer = bibyId.layer;
							MapTemplate.vCurrItem[i].addElement(bgItem);
							bool flag2 = !BgItem.imgNew.containsKey(bgItem.idImage.ToString() + string.Empty);
							if (flag2)
							{
								try
								{
									Image image = GameCanvas.loadImage("/mapBackGround/" + bgItem.idImage.ToString() + ".png");
									bool flag3 = image == null;
									if (flag3)
									{
										BgItem.imgNew.put(bgItem.idImage.ToString() + string.Empty, Image.createRGBImage(new int[1], 1, 1, true));
										Service.gI().getBgTemplate(bgItem.idImage);
									}
									else
									{
										BgItem.imgNew.put(bgItem.idImage.ToString() + string.Empty, image);
									}
								}
								catch (Exception)
								{
									Image image2 = GameCanvas.loadImage("/mapBackGround/" + bgItem.idImage.ToString() + ".png");
									bool flag4 = image2 == null;
									if (flag4)
									{
										image2 = Image.createRGBImage(new int[1], 1, 1, true);
										Service.gI().getBgTemplate(bgItem.idImage);
									}
									BgItem.imgNew.put(bgItem.idImage.ToString() + string.Empty, image2);
								}
								BgItem.vKeysLast.addElement(bgItem.idImage.ToString() + string.Empty);
							}
							bool flag5 = !BgItem.isExistKeyNews(bgItem.idImage.ToString() + string.Empty);
							if (flag5)
							{
								BgItem.vKeysNew.addElement(bgItem.idImage.ToString() + string.Empty);
							}
							bgItem.changeColor();
						}
						else
						{
							Res.outz("item null");
						}
					}
				}
			}
			catch (Exception ex)
			{
				Cout.println("LOI TAI loadMapTableFromResource" + ex.ToString());
			}
		}
	}

	// Token: 0x06000320 RID: 800 RVA: 0x000400CC File Offset: 0x0003E2CC
	public override void switchToMe()
	{
		LoginScr.isContinueToLogin = false;
		GameCanvas.menu.showMenu = false;
		GameCanvas.endDlg();
		base.switchToMe();
		CreateCharScr.indexGender = Res.random(0, 3);
		CreateCharScr.indexHair = Res.random(0, 3);
		this.doChangeMap();
		global::Char.isLoadingMap = false;
		CreateCharScr.tAddName.setFocusWithKb(true);
		ServerListScreen.countDieConnect = 0;
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.cmdSelectSv = new Command(ServerListScreen.nameServer[ServerListScreen.ipSelect], this, 10018, null);
			this.cmdSelectSv.x = 1;
			this.cmdSelectSv.y = 3;
		}
	}

	// Token: 0x06000321 RID: 801 RVA: 0x00040170 File Offset: 0x0003E370
	public void doChangeMap()
	{
		TileMap.maps = new int[MapTemplate.maps[CreateCharScr.indexGender].Length];
		for (int i = 0; i < MapTemplate.maps[CreateCharScr.indexGender].Length; i++)
		{
			TileMap.maps[i] = MapTemplate.maps[CreateCharScr.indexGender][i];
		}
		TileMap.types = MapTemplate.types[CreateCharScr.indexGender];
		TileMap.pxh = MapTemplate.pxh[CreateCharScr.indexGender];
		TileMap.pxw = MapTemplate.pxw[CreateCharScr.indexGender];
		TileMap.tileID = MapTemplate.pxw[CreateCharScr.indexGender];
		TileMap.tmw = MapTemplate.tmw[CreateCharScr.indexGender];
		TileMap.tmh = MapTemplate.tmh[CreateCharScr.indexGender];
		TileMap.tileID = this.bgID[CreateCharScr.indexGender] + 1;
		TileMap.loadMainTile();
		TileMap.loadTileCreatChar();
		GameCanvas.loadBG(this.bgID[CreateCharScr.indexGender]);
		GameScr.loadCamera(false, this.cx, this.cy);
	}

	// Token: 0x06000322 RID: 802 RVA: 0x0004026B File Offset: 0x0003E46B
	public override void keyPress(int keyCode)
	{
		CreateCharScr.tAddName.keyPressed(keyCode);
	}

	// Token: 0x06000323 RID: 803 RVA: 0x0004027C File Offset: 0x0003E47C
	public override void update()
	{
		this.cp1++;
		bool flag = this.cp1 > 30;
		if (flag)
		{
			this.cp1 = 0;
		}
		bool flag2 = this.cp1 % 15 < 5;
		if (flag2)
		{
			this.cf = 0;
		}
		else
		{
			this.cf = 1;
		}
		CreateCharScr.tAddName.update();
		bool flag3 = this.cmdSelectSv != null && this.cmdSelectSv.isPointerPressInside();
		if (flag3)
		{
			this.cmdSelectSv.performAction();
		}
		bool flag4 = CreateCharScr.selected != 0;
		if (flag4)
		{
			CreateCharScr.tAddName.isFocus = false;
		}
	}

	// Token: 0x06000324 RID: 804 RVA: 0x00040320 File Offset: 0x0003E520
	public override void updateKey()
	{
		bool flag = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21];
		if (flag)
		{
			CreateCharScr.selected--;
			bool flag2 = CreateCharScr.selected < 0;
			if (flag2)
			{
				CreateCharScr.selected = mResources.MENUNEWCHAR.Length - 1;
			}
		}
		bool flag3 = GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22];
		if (flag3)
		{
			CreateCharScr.selected++;
			bool flag4 = CreateCharScr.selected >= mResources.MENUNEWCHAR.Length;
			if (flag4)
			{
				CreateCharScr.selected = 0;
			}
		}
		bool flag5 = CreateCharScr.selected == 0;
		if (flag5)
		{
			bool flag6 = !GameCanvas.isTouch;
			if (flag6)
			{
				this.right = CreateCharScr.tAddName.cmdClear;
			}
			CreateCharScr.tAddName.update();
		}
		bool flag7 = CreateCharScr.selected == 1;
		if (flag7)
		{
			bool flag8 = GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23];
			if (flag8)
			{
				CreateCharScr.indexGender--;
				bool flag9 = CreateCharScr.indexGender < 0;
				if (flag9)
				{
					CreateCharScr.indexGender = mResources.MENUGENDER.Length - 1;
				}
				this.doChangeMap();
			}
			bool flag10 = GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24];
			if (flag10)
			{
				CreateCharScr.indexGender++;
				bool flag11 = CreateCharScr.indexGender > mResources.MENUGENDER.Length - 1;
				if (flag11)
				{
					CreateCharScr.indexGender = 0;
				}
				this.doChangeMap();
			}
			this.right = null;
		}
		bool flag12 = CreateCharScr.selected == 2;
		if (flag12)
		{
			bool flag13 = GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23];
			if (flag13)
			{
				CreateCharScr.indexHair--;
				bool flag14 = CreateCharScr.indexHair < 0;
				if (flag14)
				{
					CreateCharScr.indexHair = mResources.hairStyleName[0].Length - 1;
				}
			}
			bool flag15 = GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24];
			if (flag15)
			{
				CreateCharScr.indexHair++;
				bool flag16 = CreateCharScr.indexHair > mResources.hairStyleName[0].Length - 1;
				if (flag16)
				{
					CreateCharScr.indexHair = 0;
				}
			}
			this.right = null;
		}
		bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
		if (isPointerJustRelease)
		{
			int num = 110;
			int num2 = 60;
			int num3 = 78;
			bool flag17 = GameCanvas.w > GameCanvas.h;
			if (flag17)
			{
				num = 100;
				num2 = 40;
			}
			bool flag18 = GameCanvas.isPointerHoldIn(GameCanvas.w / 2 - 3 * num3 / 2, 15, num3 * 3, 80);
			if (flag18)
			{
				CreateCharScr.selected = 0;
				CreateCharScr.tAddName.isFocus = true;
			}
			bool flag19 = GameCanvas.isPointerHoldIn(GameCanvas.w / 2 - 3 * num3 / 2, num - 30, num3 * 3, num2 + 5);
			if (flag19)
			{
				CreateCharScr.selected = 1;
				int num4 = CreateCharScr.indexGender;
				CreateCharScr.indexGender = (GameCanvas.px - (GameCanvas.w / 2 - 3 * num3 / 2)) / num3;
				bool flag20 = CreateCharScr.indexGender < 0;
				if (flag20)
				{
					CreateCharScr.indexGender = 0;
				}
				bool flag21 = CreateCharScr.indexGender > mResources.MENUGENDER.Length - 1;
				if (flag21)
				{
					CreateCharScr.indexGender = mResources.MENUGENDER.Length - 1;
				}
				bool flag22 = num4 != CreateCharScr.indexGender;
				if (flag22)
				{
					this.doChangeMap();
				}
			}
			bool flag23 = GameCanvas.isPointerHoldIn(GameCanvas.w / 2 - 3 * num3 / 2, num - 30 + num2 + 5, num3 * 3, 65);
			if (flag23)
			{
				CreateCharScr.selected = 2;
				int num5 = CreateCharScr.indexHair;
				CreateCharScr.indexHair = (GameCanvas.px - (GameCanvas.w / 2 - 3 * num3 / 2)) / num3;
				bool flag24 = CreateCharScr.indexHair < 0;
				if (flag24)
				{
					CreateCharScr.indexHair = 0;
				}
				bool flag25 = CreateCharScr.indexHair > mResources.hairStyleName[0].Length - 1;
				if (flag25)
				{
					CreateCharScr.indexHair = mResources.hairStyleName[0].Length - 1;
				}
				bool flag26 = num5 != CreateCharScr.selected;
				if (flag26)
				{
					this.doChangeMap();
				}
			}
		}
		bool flag27 = !TouchScreenKeyboard.visible;
		if (flag27)
		{
			base.updateKey();
		}
		GameCanvas.clearKeyHold();
		GameCanvas.clearKeyPressed();
	}

	// Token: 0x06000325 RID: 805 RVA: 0x0004072C File Offset: 0x0003E92C
	public override void paint(mGraphics g)
	{
		bool isLoadingMap = global::Char.isLoadingMap;
		if (!isLoadingMap)
		{
			GameCanvas.paintBGGameScr(g);
			g.translate(-GameScr.cmx, -GameScr.cmy);
			bool flag = !GameCanvas.lowGraphic;
			if (flag)
			{
				for (int i = 0; i < MapTemplate.vCurrItem[CreateCharScr.indexGender].size(); i++)
				{
					BgItem bgItem = (BgItem)MapTemplate.vCurrItem[CreateCharScr.indexGender].elementAt(i);
					bool flag2 = bgItem.idImage != -1 && bgItem.layer == 1;
					if (flag2)
					{
						bgItem.paint(g);
					}
				}
			}
			TileMap.paintTilemap(g);
			int num = 30;
			bool flag3 = GameCanvas.w == 128;
			if (flag3)
			{
				num = 20;
			}
			int num2 = CreateCharScr.hairID[CreateCharScr.indexGender][CreateCharScr.indexHair];
			int num3 = CreateCharScr.defaultLeg[CreateCharScr.indexGender];
			int num4 = CreateCharScr.defaultBody[CreateCharScr.indexGender];
			g.drawImage(TileMap.bong, this.cx, this.cy + this.dy, 3);
			Part part = GameScr.parts[num2];
			Part part2 = GameScr.parts[num3];
			Part part3 = GameScr.parts[num4];
			SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[this.cf][0][0]].id, this.cx + global::Char.CharInfo[this.cf][0][1] + (int)part.pi[global::Char.CharInfo[this.cf][0][0]].dx, this.cy - global::Char.CharInfo[this.cf][0][2] + (int)part.pi[global::Char.CharInfo[this.cf][0][0]].dy + this.dy, 0, 0);
			SmallImage.drawSmallImage(g, (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].id, this.cx + global::Char.CharInfo[this.cf][1][1] + (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].dx, this.cy - global::Char.CharInfo[this.cf][1][2] + (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].dy + this.dy, 0, 0);
			SmallImage.drawSmallImage(g, (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].id, this.cx + global::Char.CharInfo[this.cf][2][1] + (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].dx, this.cy - global::Char.CharInfo[this.cf][2][2] + (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].dy + this.dy, 0, 0);
			bool flag4 = !GameCanvas.lowGraphic;
			if (flag4)
			{
				for (int j = 0; j < MapTemplate.vCurrItem[CreateCharScr.indexGender].size(); j++)
				{
					BgItem bgItem2 = (BgItem)MapTemplate.vCurrItem[CreateCharScr.indexGender].elementAt(j);
					bool flag5 = bgItem2.idImage != -1 && bgItem2.layer == 3;
					if (flag5)
					{
						bgItem2.paint(g);
					}
				}
			}
			g.translate(-g.getTranslateX(), -g.getTranslateY());
			bool flag6 = GameCanvas.w < 200;
			if (flag6)
			{
				GameCanvas.paintz.paintFrame(GameScr.popupX, GameScr.popupY, GameScr.popupW, GameScr.popupH, g);
				SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, GameCanvas.w / 2 + global::Char.CharInfo[0][0][1] + (int)part.pi[global::Char.CharInfo[0][0][0]].dx, GameScr.popupY + 30 + 3 * num - global::Char.CharInfo[0][0][2] + (int)part.pi[global::Char.CharInfo[0][0][0]].dy + this.dy, 0, 0);
				SmallImage.drawSmallImage(g, (int)part2.pi[global::Char.CharInfo[0][1][0]].id, GameCanvas.w / 2 + global::Char.CharInfo[0][1][1] + (int)part2.pi[global::Char.CharInfo[0][1][0]].dx, GameScr.popupY + 30 + 3 * num - global::Char.CharInfo[0][1][2] + (int)part2.pi[global::Char.CharInfo[0][1][0]].dy + this.dy, 0, 0);
				SmallImage.drawSmallImage(g, (int)part3.pi[global::Char.CharInfo[0][2][0]].id, GameCanvas.w / 2 + global::Char.CharInfo[0][2][1] + (int)part3.pi[global::Char.CharInfo[0][2][0]].dx, GameScr.popupY + 30 + 3 * num - global::Char.CharInfo[0][2][2] + (int)part3.pi[global::Char.CharInfo[0][2][0]].dy + this.dy, 0, 0);
				for (int k = 0; k < mResources.MENUNEWCHAR.Length; k++)
				{
					bool flag7 = CreateCharScr.selected == k;
					if (flag7)
					{
						g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 2, GameScr.popupX + 10 + ((GameCanvas.gameTick % 7 > 3) ? 1 : 0), GameScr.popupY + 35 + k * num, StaticObj.VCENTER_HCENTER);
						g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 0, GameScr.popupX + GameScr.popupW - 10 - ((GameCanvas.gameTick % 7 > 3) ? 1 : 0), GameScr.popupY + 35 + k * num, StaticObj.VCENTER_HCENTER);
					}
					mFont.tahoma_7b_dark.drawString(g, mResources.MENUNEWCHAR[k], GameScr.popupX + 20, GameScr.popupY + 30 + k * num, 0);
				}
				mFont.tahoma_7b_dark.drawString(g, mResources.MENUGENDER[CreateCharScr.indexGender], GameScr.popupX + 70, GameScr.popupY + 30 + num, mFont.LEFT);
				mFont.tahoma_7b_dark.drawString(g, mResources.hairStyleName[CreateCharScr.indexGender][CreateCharScr.indexHair], GameScr.popupX + 55, GameScr.popupY + 30 + 2 * num, mFont.LEFT);
				CreateCharScr.tAddName.paint(g);
			}
			else
			{
				bool flag8 = !Main.isPC;
				if (flag8)
				{
					bool flag9 = mGraphics.addYWhenOpenKeyBoard != 0;
					if (flag9)
					{
						this.yButton = 110;
						this.disY = 60;
						bool flag10 = GameCanvas.w > GameCanvas.h;
						if (flag10)
						{
							this.yButton = GameScr.popupY + 30 + 3 * num + (int)part3.pi[global::Char.CharInfo[0][2][0]].dy + this.dy - 15;
							this.disY = 35;
						}
					}
					else
					{
						this.yButton = 110;
						this.disY = 60;
						bool flag11 = GameCanvas.w > GameCanvas.h;
						if (flag11)
						{
							this.yButton = 100;
							this.disY = 45;
						}
					}
					CreateCharScr.tAddName.y = this.yButton - CreateCharScr.tAddName.height - this.disY + 5;
				}
				else
				{
					this.yButton = 110;
					this.disY = 60;
					bool flag12 = GameCanvas.w > GameCanvas.h;
					if (flag12)
					{
						this.yButton = 100;
						this.disY = 45;
					}
					CreateCharScr.tAddName.y = this.yBegin;
				}
				for (int l = 0; l < 3; l++)
				{
					int num5 = 78;
					bool flag13 = l != CreateCharScr.indexGender;
					if (flag13)
					{
						g.drawImage(GameScr.imgLbtn, GameCanvas.w / 2 - num5 + l * num5, this.yButton, 3);
					}
					else
					{
						bool flag14 = CreateCharScr.selected == 1;
						if (flag14)
						{
							g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 4, GameCanvas.w / 2 - num5 + l * num5, this.yButton - 20 + ((GameCanvas.gameTick % 7 > 3) ? 1 : 0), StaticObj.VCENTER_HCENTER);
						}
						g.drawImage(GameScr.imgLbtnFocus, GameCanvas.w / 2 - num5 + l * num5, this.yButton, 3);
					}
					mFont.tahoma_7b_dark.drawString(g, mResources.MENUGENDER[l], GameCanvas.w / 2 - num5 + l * num5, this.yButton - 5, mFont.CENTER);
				}
				for (int m = 0; m < 3; m++)
				{
					int num6 = 78;
					bool flag15 = m != CreateCharScr.indexHair;
					if (flag15)
					{
						g.drawImage(GameScr.imgLbtn, GameCanvas.w / 2 - num6 + m * num6, this.yButton + this.disY, 3);
					}
					else
					{
						bool flag16 = CreateCharScr.selected == 2;
						if (flag16)
						{
							g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 4, GameCanvas.w / 2 - num6 + m * num6, this.yButton + this.disY - 20 + ((GameCanvas.gameTick % 7 > 3) ? 1 : 0), StaticObj.VCENTER_HCENTER);
						}
						g.drawImage(GameScr.imgLbtnFocus, GameCanvas.w / 2 - num6 + m * num6, this.yButton + this.disY, 3);
					}
					mFont.tahoma_7b_dark.drawString(g, mResources.hairStyleName[CreateCharScr.indexGender][m], GameCanvas.w / 2 - num6 + m * num6, this.yButton + this.disY - 5, mFont.CENTER);
				}
				CreateCharScr.tAddName.paint(g);
			}
			g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			bool flag17 = this.cmdSelectSv != null;
			if (flag17)
			{
				this.cmdSelectSv.paint(g);
			}
			bool flag18 = !TouchScreenKeyboard.visible;
			if (flag18)
			{
				base.paint(g);
			}
		}
	}

	// Token: 0x06000326 RID: 806 RVA: 0x00041178 File Offset: 0x0003F378
	public void perform(int idAction, object p)
	{
		if (idAction != 8000)
		{
			if (idAction != 8001)
			{
				switch (idAction)
				{
				case 10018:
					ServerListScreen.SetIpSelect(-1, true);
					ServerScr.isShowSv_HaveChar = false;
					Controller.isEXTRA_LINK = false;
					GameCanvas.serverScr.switchToMe();
					break;
				case 10019:
					Session_ME.gI().close();
					GameCanvas.endDlg();
					ServerListScreen.isAutoLogin = false;
					GameCanvas.serverScreen.switchToMe();
					break;
				case 10020:
					GameCanvas.endDlg();
					break;
				}
			}
			else
			{
				bool isLogin = GameCanvas.loginScr.isLogin2;
				if (isLogin)
				{
					GameCanvas.startYesNoDlg(mResources.note, new Command(mResources.YES, this, 10019, null), new Command(mResources.NO, this, 10020, null));
				}
				else
				{
					Session_ME.gI().close();
					ServerListScreen.isAutoLogin = false;
					GameCanvas.serverScreen.switchToMe();
				}
			}
		}
		else
		{
			bool flag = CreateCharScr.tAddName.getText().Equals(string.Empty);
			if (flag)
			{
				GameCanvas.startOKDlg(mResources.char_name_blank);
			}
			else
			{
				bool flag2 = CreateCharScr.tAddName.getText().Length < 5;
				if (flag2)
				{
					GameCanvas.startOKDlg(mResources.char_name_short);
				}
				else
				{
					bool flag3 = CreateCharScr.tAddName.getText().Length > 15;
					if (flag3)
					{
						GameCanvas.startOKDlg(mResources.char_name_long);
					}
					else
					{
						InfoDlg.showWait();
						Service.gI().createChar(CreateCharScr.tAddName.getText(), CreateCharScr.indexGender, CreateCharScr.hairID[CreateCharScr.indexGender][CreateCharScr.indexHair]);
					}
				}
			}
		}
	}

	// Token: 0x0400054E RID: 1358
	public static CreateCharScr instance;

	// Token: 0x0400054F RID: 1359
	private PopUp p;

	// Token: 0x04000550 RID: 1360
	public static bool isCreateChar = false;

	// Token: 0x04000551 RID: 1361
	private Command cmdSelectSv;

	// Token: 0x04000552 RID: 1362
	public static TField tAddName;

	// Token: 0x04000553 RID: 1363
	public static int indexGender;

	// Token: 0x04000554 RID: 1364
	public static int indexHair;

	// Token: 0x04000555 RID: 1365
	public static int selected;

	// Token: 0x04000556 RID: 1366
	public static int[][] hairID = new int[][]
	{
		new int[]
		{
			64,
			30,
			31
		},
		new int[]
		{
			9,
			29,
			32
		},
		new int[]
		{
			6,
			27,
			28
		}
	};

	// Token: 0x04000557 RID: 1367
	public static int[] defaultLeg = new int[]
	{
		2,
		13,
		8
	};

	// Token: 0x04000558 RID: 1368
	public static int[] defaultBody = new int[]
	{
		1,
		12,
		7
	};

	// Token: 0x04000559 RID: 1369
	private int yButton;

	// Token: 0x0400055A RID: 1370
	private int disY;

	// Token: 0x0400055B RID: 1371
	private int[] bgID = new int[]
	{
		0,
		4,
		8
	};

	// Token: 0x0400055C RID: 1372
	public int yBegin;

	// Token: 0x0400055D RID: 1373
	private int curIndex;

	// Token: 0x0400055E RID: 1374
	private int cx = 168;

	// Token: 0x0400055F RID: 1375
	private int cy = 350;

	// Token: 0x04000560 RID: 1376
	private int dy = 45;

	// Token: 0x04000561 RID: 1377
	private int cp1;

	// Token: 0x04000562 RID: 1378
	private int cf;
}
using System;

// Token: 0x0200003D RID: 61
public class DartInfo
{
	// Token: 0x06000328 RID: 808 RVA: 0x000413A4 File Offset: 0x0003F5A4
	public DartInfo clone()
	{
		return null;
	}

	// Token: 0x04000563 RID: 1379
	public short id;

	// Token: 0x04000564 RID: 1380
	public short[][] head;

	// Token: 0x04000565 RID: 1381
	public short[][] headBorder;

	// Token: 0x04000566 RID: 1382
	public short[] tail;

	// Token: 0x04000567 RID: 1383
	public short[] tailBorder;

	// Token: 0x04000568 RID: 1384
	public short[] xd1;

	// Token: 0x04000569 RID: 1385
	public short[] xd2;

	// Token: 0x0400056A RID: 1386
	public short xdPercent;

	// Token: 0x0400056B RID: 1387
	public short nUpdate;

	// Token: 0x0400056C RID: 1388
	public int va;

	// Token: 0x0400056D RID: 1389
	public short loop;
}
using System;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

// Token: 0x0200007F RID: 127
public class DataAccount
{
	// Token: 0x0600062C RID: 1580 RVA: 0x0006ABB0 File Offset: 0x00068DB0
	public static void Doc()
	{
		try
		{
			string[] commandLineArgs = Environment.GetCommandLineArgs();
			bool flag = commandLineArgs.Length == 0;
			if (!flag)
			{
				string account = null;
				string passWord = null;
				string s = null;
				string s2 = null;
				string proxy = null;
				string text = null;
				string s3 = null;
				for (int i = 0; i < commandLineArgs.Length; i++)
				{
					string text2 = commandLineArgs[i];
					string text3 = text2;
					uint num = <PrivateImplementationDetails>.ComputeStringHash(text3);
					if (num <= 1405861912U)
					{
						if (num != 915181618U)
						{
							if (num != 1135419332U)
							{
								if (num == 1405861912U)
								{
									if (text3 == "--acc")
									{
										bool flag2 = i + 1 < commandLineArgs.Length;
										if (flag2)
										{
											account = commandLineArgs[i + 1];
											i++;
										}
									}
								}
							}
							else if (text3 == "--server")
							{
								bool flag3 = i + 1 < commandLineArgs.Length;
								if (flag3)
								{
									s = commandLineArgs[i + 1];
									i++;
								}
							}
						}
						else if (text3 == "--pass")
						{
							bool flag4 = i + 1 < commandLineArgs.Length;
							if (flag4)
							{
								passWord = commandLineArgs[i + 1];
								i++;
							}
						}
					}
					else if (num <= 2635071343U)
					{
						if (num != 2357181198U)
						{
							if (num == 2635071343U)
							{
								if (text3 == "--prx")
								{
									bool flag5 = i + 1 < commandLineArgs.Length;
									if (flag5)
									{
										proxy = commandLineArgs[i + 1];
										i++;
									}
								}
							}
						}
						else if (text3 == "--team")
						{
							bool flag6 = i + 1 < commandLineArgs.Length;
							if (flag6)
							{
								s3 = commandLineArgs[i + 1];
								i++;
							}
						}
					}
					else if (num != 4071210487U)
					{
						if (num == 4142942274U)
						{
							if (text3 == "--id")
							{
								bool flag7 = i + 1 < commandLineArgs.Length;
								if (flag7)
								{
									s2 = commandLineArgs[i + 1];
									i++;
								}
							}
						}
					}
					else if (text3 == "--type")
					{
						bool flag8 = i + 1 < commandLineArgs.Length;
						if (flag8)
						{
							text = commandLineArgs[i + 1];
							i++;
						}
					}
				}
				DataAccount.Account = account;
				DataAccount.PassWord = passWord;
				DataAccount.Server = int.Parse(s) - 1;
				DataAccount.Team = int.Parse(s3);
				DataAccount.Type = int.Parse(text.Split(new char[]
				{
					'.'
				})[0]);
				DataAccount.Proxy = proxy;
				DataAccount.ID = int.Parse(s2);
				ThreadStart start;
				if ((start = DataAccount.<>O.<0>__Login) == null)
				{
					start = (DataAccount.<>O.<0>__Login = new ThreadStart(DataAccount.Login));
				}
				new Thread(start).Start();
			}
		}
		catch
		{
			DataAccount.startOKDlgWithStar("");
		}
	}

	// Token: 0x0600062D RID: 1581 RVA: 0x0006AEBC File Offset: 0x000690BC
	public static void startOKDlgWithStar(string message)
	{
		StringBuilder stringBuilder = new StringBuilder();
		string[] array = new string[]
		{
			"................................:-....:-==**=:..................:...................................",
			".................................=:.        ..-+=-:..............=-:................................",
			".................................-=.            ..-+-............=-:=-..............................",
			"..................................=:              ...++:.........--..-+.............................",
			"..................................-+.                 .-+-:......=-.  .*-...........................",
			"...................................*:                   .:==:....=:    .==..........................",
			"...................................-+.                    ..-=:..+.     .==.........................",
			"....................::::--------::::=.                       .::-+.       -+:.......................",
			"..............:====--:::..............                         .=:         :+:......................",
			"...........--:....                                             ...         .-=.....::...............",
			"..........:+-.                                       .:.....                .=-....=+:..............",
			"............:+=.                                     ..::::...               .*:..:=.+-.............",
			"..............:+:.                                    ...:...:..              .=.-*. .*:............",
			"...............:=-.                                      ........              :==.   -=............",
			".................-+.                                       ...  .             .:..    :=:...........",
			".................:::.   .....                                                         .=:...........",
			"...........:-=*+:.  ..::::.....                                                       .=:...........",
			".......:=+=:..       ...:....                                                         .+:...........",
			".....-+-..             ......                                                         .=:...........",
			"...:=..                                                                               :=............",
			"...:-=+=:.                                              ........                      --............",
			"........:=+:.                                    ......:::::::::::........            -:-+*++===-...",
			"...........:+=.                         ......::::::::::::::::::::::::::::::....    .-=-::::=*-.....",
			".............:-.                    .....::::::::::::::::::::-------:::::::::::......::::-+=:.......",
			"...........:=-.                 ....:::::::::::::::::-=*##%%%%%%%%%%%%##*=::::::::.::::-*-..........",
			"...........+-.              ....::::::::::::::-=*##%%%%%%%%%%%%%%%%%%%%%%%%%#+-:::::::=+:...........",
			".........:*:             ...:::::::::::::-+*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*-:::+=.............",
			"........:+:           ...:::::::::::-+*#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#---..............",
			"........=-.        ...:::::::::-+#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+...............",
			".......-=. .--:.  ..:::::-=*#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*:..............",
			".......*::+=::+  ..:::=*#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*:..............",
			".......==-...-*..::-#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+...............",
			".......-:....-+.::+#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+...............",
			".............:*::*:-*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*:..............",
			".............:#:=-..-#%%%%%%%#*++====+++***########%%%%%%%%%%%%%%%%%%%%%%%%####*=:..:-..............",
			"..............-*=:...*%#**:..:.......................................................+..............",
			"...............:-....:=-*:..................................:....::.................-+..............",
			"......................:+++...................................:+**:.................:+:..............",
			"........................=#-.......................................................:+:...............",
			".........................-**++++-...............................................-+-.................",
			"..........................=*+*-:*#+-:........................................-#*:...................",
			"..........................:+=:+=*=#@@@%%@%%%%%%%%%###*++====----------:::-=*%%%#-...................",
			"...........................:...-:.:+%@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@%@@@@@%=:....................",
			"...................................:#@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@@@@@@%*:......................",
			"..................................=%@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%@%#:.......:=+:.............",
			".................................=%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@%*:....=+==:+=:...........",
			"................................:%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@%*:...-##+:=*-...........",
			"...............................:#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@%+...=*++-=+-...........",
			"..............................:*%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@%-..-+-::.:=...........",
			"..............................-#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@#::*.:=..--...........",
			"................-=------=---::-%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@@@%-:+.--..::..........."
		};
		foreach (string value in array)
		{
			stringBuilder.Append(value).Append("\n");
		}
		string info = message + "\n" + stringBuilder.ToString();
		GameCanvas.startOKDlg(info, true);
	}

	// Token: 0x0600062E RID: 1582 RVA: 0x0006B0E4 File Offset: 0x000692E4
	public static void Login()
	{
		Thread.Sleep(1000);
		for (;;)
		{
			try
			{
				bool flag = string.IsNullOrEmpty(global::Char.myCharz().cName);
				if (flag)
				{
					Thread.Sleep(1000);
					while (!ServerListScreen.loadScreen)
					{
						Thread.Sleep(10);
					}
					Thread.Sleep(500);
					ServerListScreen.ipSelect = DataAccount.Server;
					bool flag2 = ServerListScreen.nameServer[ServerListScreen.ipSelect].Replace(" ", "") != DataAccount.Server.ToString();
					if (flag2)
					{
						GameCanvas.serverScreen.selectServer();
						while (!ServerListScreen.loadScreen)
						{
							Thread.Sleep(10);
						}
						while (!Session_ME.gI().isConnected())
						{
							Thread.Sleep(100);
						}
						Thread.Sleep(100);
						while (!ServerListScreen.loadScreen)
						{
							Thread.Sleep(10);
						}
					}
					Thread.Sleep(1000);
					GameCanvas.serverScreen.perform(3, null);
					Thread.Sleep(30000);
				}
			}
			catch
			{
			}
			Thread.Sleep(5000);
		}
	}

	// Token: 0x04000B56 RID: 2902
	public static string Account;

	// Token: 0x04000B57 RID: 2903
	public static string PassWord;

	// Token: 0x04000B58 RID: 2904
	public static int Server;

	// Token: 0x04000B59 RID: 2905
	public static int Type;

	// Token: 0x04000B5A RID: 2906
	public static string Proxy;

	// Token: 0x04000B5B RID: 2907
	public static int ID;

	// Token: 0x04000B5C RID: 2908
	public static int Team;

	// Token: 0x020000FE RID: 254
	[CompilerGenerated]
	private static class <>O
	{
		// Token: 0x040016E6 RID: 5862
		public static ThreadStart <0>__Login;
	}
}
using System;
using System.Threading;
using UnityEngine;

// Token: 0x0200003E RID: 62
public class DataInputStream
{
	// Token: 0x0600032A RID: 810 RVA: 0x000413C0 File Offset: 0x0003F5C0
	public DataInputStream(string filename)
	{
		TextAsset textAsset = (TextAsset)Resources.Load(filename, typeof(TextAsset));
		this.r = new myReader(ArrayCast.cast(textAsset.bytes));
	}

	// Token: 0x0600032B RID: 811 RVA: 0x00041401 File Offset: 0x0003F601
	public DataInputStream(sbyte[] data)
	{
		this.r = new myReader(data);
	}

	// Token: 0x0600032C RID: 812 RVA: 0x00041418 File Offset: 0x0003F618
	public static void update()
	{
		bool flag = DataInputStream.status == 2;
		if (flag)
		{
			DataInputStream.status = 1;
			DataInputStream.istemp = DataInputStream.__getResourceAsStream(DataInputStream.filenametemp);
			DataInputStream.status = 0;
		}
	}

	// Token: 0x0600032D RID: 813 RVA: 0x00041450 File Offset: 0x0003F650
	public static DataInputStream getResourceAsStream(string filename)
	{
		return DataInputStream.__getResourceAsStream(filename);
	}

	// Token: 0x0600032E RID: 814 RVA: 0x00041468 File Offset: 0x0003F668
	private static DataInputStream _getResourceAsStream(string filename)
	{
		bool flag = DataInputStream.status != 0;
		if (flag)
		{
			for (int i = 0; i < 500; i++)
			{
				Thread.Sleep(5);
				bool flag2 = DataInputStream.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = DataInputStream.status != 0;
			if (flag3)
			{
				Debug.LogError("CANNOT GET INPUTSTREAM " + filename + " WHEN GETTING " + DataInputStream.filenametemp);
				return null;
			}
		}
		DataInputStream.istemp = null;
		DataInputStream.filenametemp = filename;
		DataInputStream.status = 2;
		int j;
		for (j = 0; j < 500; j++)
		{
			Thread.Sleep(5);
			bool flag4 = DataInputStream.status == 0;
			if (flag4)
			{
				break;
			}
		}
		bool flag5 = j == 500;
		DataInputStream result;
		if (flag5)
		{
			Debug.LogError("TOO LONG FOR CREATE INPUTSTREAM " + filename);
			DataInputStream.status = 0;
			result = null;
		}
		else
		{
			result = DataInputStream.istemp;
		}
		return result;
	}

	// Token: 0x0600032F RID: 815 RVA: 0x0004155C File Offset: 0x0003F75C
	private static DataInputStream __getResourceAsStream(string filename)
	{
		DataInputStream result;
		try
		{
			result = new DataInputStream(filename);
		}
		catch (Exception)
		{
			result = null;
		}
		return result;
	}

	// Token: 0x06000330 RID: 816 RVA: 0x0004158C File Offset: 0x0003F78C
	public short readShort()
	{
		return this.r.readShort();
	}

	// Token: 0x06000331 RID: 817 RVA: 0x000415AC File Offset: 0x0003F7AC
	public int readInt()
	{
		return this.r.readInt();
	}

	// Token: 0x06000332 RID: 818 RVA: 0x000415CC File Offset: 0x0003F7CC
	public int read()
	{
		return (int)this.r.readUnsignedByte();
	}

	// Token: 0x06000333 RID: 819 RVA: 0x000415E9 File Offset: 0x0003F7E9
	public void read(ref sbyte[] data)
	{
		this.r.read(ref data);
	}

	// Token: 0x06000334 RID: 820 RVA: 0x000415F9 File Offset: 0x0003F7F9
	public void close()
	{
		this.r.Close();
	}

	// Token: 0x06000335 RID: 821 RVA: 0x00041608 File Offset: 0x0003F808
	public void Close()
	{
		this.r.Close();
	}

	// Token: 0x06000336 RID: 822 RVA: 0x00041618 File Offset: 0x0003F818
	public string readUTF()
	{
		return this.r.readUTF();
	}

	// Token: 0x06000337 RID: 823 RVA: 0x00041638 File Offset: 0x0003F838
	public sbyte readByte()
	{
		return this.r.readByte();
	}

	// Token: 0x06000338 RID: 824 RVA: 0x00041658 File Offset: 0x0003F858
	public long readLong()
	{
		return this.r.readLong();
	}

	// Token: 0x06000339 RID: 825 RVA: 0x00041678 File Offset: 0x0003F878
	public bool readBoolean()
	{
		return this.r.readBoolean();
	}

	// Token: 0x0600033A RID: 826 RVA: 0x00041698 File Offset: 0x0003F898
	public int readUnsignedByte()
	{
		return (int)((byte)this.r.readByte());
	}

	// Token: 0x0600033B RID: 827 RVA: 0x000416B8 File Offset: 0x0003F8B8
	public int readUnsignedShort()
	{
		return (int)this.r.readUnsignedShort();
	}

	// Token: 0x0600033C RID: 828 RVA: 0x000416D5 File Offset: 0x0003F8D5
	public void readFully(ref sbyte[] data)
	{
		this.r.read(ref data);
	}

	// Token: 0x0600033D RID: 829 RVA: 0x000416E8 File Offset: 0x0003F8E8
	public int available()
	{
		return this.r.available();
	}

	// Token: 0x0600033E RID: 830 RVA: 0x00041705 File Offset: 0x0003F905
	internal void read(ref sbyte[] byteData, int p, int size)
	{
		throw new NotImplementedException();
	}

	// Token: 0x0400056E RID: 1390
	public myReader r;

	// Token: 0x0400056F RID: 1391
	private const int INTERVAL = 5;

	// Token: 0x04000570 RID: 1392
	private const int MAXTIME = 500;

	// Token: 0x04000571 RID: 1393
	public static DataInputStream istemp;

	// Token: 0x04000572 RID: 1394
	private static int status;

	// Token: 0x04000573 RID: 1395
	private static string filenametemp;
}
using System;

// Token: 0x0200003F RID: 63
public class DataOutputStream
{
	// Token: 0x0600033F RID: 831 RVA: 0x0004170D File Offset: 0x0003F90D
	public DataOutputStream()
	{
	}

	// Token: 0x06000340 RID: 832 RVA: 0x00041722 File Offset: 0x0003F922
	public DataOutputStream(int len)
	{
		this.w = new myWriter(len);
	}

	// Token: 0x06000341 RID: 833 RVA: 0x00041743 File Offset: 0x0003F943
	public void writeShort(short i)
	{
		this.w.writeShort(i);
	}

	// Token: 0x06000342 RID: 834 RVA: 0x00041753 File Offset: 0x0003F953
	public void writeInt(int i)
	{
		this.w.writeInt(i);
	}

	// Token: 0x06000343 RID: 835 RVA: 0x00041763 File Offset: 0x0003F963
	public void write(sbyte[] data)
	{
		this.w.writeSByte(data);
	}

	// Token: 0x06000344 RID: 836 RVA: 0x00041774 File Offset: 0x0003F974
	public sbyte[] toByteArray()
	{
		return this.w.getData();
	}

	// Token: 0x06000345 RID: 837 RVA: 0x00041791 File Offset: 0x0003F991
	public void close()
	{
		this.w.Close();
	}

	// Token: 0x06000346 RID: 838 RVA: 0x000417A0 File Offset: 0x0003F9A0
	public void writeByte(sbyte b)
	{
		this.w.writeByte(b);
	}

	// Token: 0x06000347 RID: 839 RVA: 0x000417B0 File Offset: 0x0003F9B0
	public void writeUTF(string name)
	{
		this.w.writeUTF(name);
	}

	// Token: 0x06000348 RID: 840 RVA: 0x000417C0 File Offset: 0x0003F9C0
	public void writeBoolean(bool b)
	{
		this.w.writeBoolean(b);
	}

	// Token: 0x04000574 RID: 1396
	private myWriter w = new myWriter();
}
using System;
using Mod.DungPham.KoiOctiiu957;

// Token: 0x0200001B RID: 27
internal class DelayAttack
{
	// Token: 0x0600009D RID: 157 RVA: 0x00006AAC File Offset: 0x00004CAC
	private static void Wait(int time)
	{
		DelayAttack.IsWait = true;
		DelayAttack.TimeStartWait = DelayAttack.currentTimeMillis();
		DelayAttack.TimeWait = (long)time;
	}

	// Token: 0x0600009E RID: 158 RVA: 0x00006AC8 File Offset: 0x00004CC8
	private static bool IsWaiting()
	{
		bool flag = DelayAttack.IsWait && DelayAttack.currentTimeMillis() - DelayAttack.TimeStartWait >= DelayAttack.TimeWait;
		if (flag)
		{
			DelayAttack.IsWait = false;
		}
		return DelayAttack.IsWait;
	}

	// Token: 0x0600009F RID: 159 RVA: 0x00006B0C File Offset: 0x00004D0C
	public static long currentTimeMillis()
	{
		DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
		return (DateTime.UtcNow.Ticks - dateTime.Ticks) / 10000L;
	}

	// Token: 0x060000A0 RID: 160 RVA: 0x00006B4C File Offset: 0x00004D4C
	public static void Update()
	{
		bool flag = DelayAttack.IsWaiting();
		if (!flag)
		{
			global::Char @char = global::Char.myCharz();
			bool flag2 = @char.statusMe == 14 || @char.cHP <= 0L;
			if (!flag2)
			{
				bool flag3 = global::Char.myCharz().mobFocus != null;
				if (flag3)
				{
					AutoSkill.AutoSendAttack();
				}
				DelayAttack.Wait(1000);
			}
		}
	}

	// Token: 0x04000078 RID: 120
	private static bool IsWait;

	// Token: 0x04000079 RID: 121
	private static long TimeStartWait;

	// Token: 0x0400007A RID: 122
	private static long TimeWait;

	// Token: 0x0400007B RID: 123
	public static int Delay = 300;
}
using System;

// Token: 0x02000040 RID: 64
public abstract class Dialog
{
	// Token: 0x06000349 RID: 841 RVA: 0x000417D0 File Offset: 0x0003F9D0
	public virtual void paint(mGraphics g)
	{
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
		GameCanvas.paintz.paintTabSoft(g);
		GameCanvas.paintz.paintCmdBar(g, this.left, this.center, this.right);
	}

	// Token: 0x0600034A RID: 842 RVA: 0x00041830 File Offset: 0x0003FA30
	public virtual void keyPress(int keyCode)
	{
		if (keyCode > -22)
		{
			if (keyCode != -21)
			{
				switch (keyCode)
				{
				case -7:
					goto IL_C4;
				case -6:
					goto IL_B0;
				case -5:
					break;
				case -4:
				case -3:
					return;
				case -2:
					goto IL_88;
				case -1:
					goto IL_60;
				default:
					if (keyCode != 10)
					{
						return;
					}
					break;
				}
				GameCanvas.keyHold[(!Main.isPC) ? 5 : 25] = true;
				GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = true;
				return;
			}
			IL_B0:
			GameCanvas.keyHold[12] = true;
			GameCanvas.keyPressed[12] = true;
			return;
		}
		if (keyCode == -39)
		{
			goto IL_88;
		}
		if (keyCode != -38)
		{
			if (keyCode != -22)
			{
				return;
			}
			goto IL_C4;
		}
		IL_60:
		GameCanvas.keyHold[(!Main.isPC) ? 2 : 21] = true;
		GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] = true;
		return;
		IL_88:
		GameCanvas.keyHold[(!Main.isPC) ? 8 : 22] = true;
		GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] = true;
		return;
		IL_C4:
		GameCanvas.keyHold[13] = true;
		GameCanvas.keyPressed[13] = true;
	}

	// Token: 0x0600034B RID: 843 RVA: 0x00041940 File Offset: 0x0003FB40
	public virtual void update()
	{
		bool flag = this.center != null && (GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] || mScreen.getCmdPointerLast(this.center));
		if (flag)
		{
			GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
			GameCanvas.isPointerClick = false;
			mScreen.keyTouch = -1;
			GameCanvas.isPointerJustRelease = false;
			bool flag2 = this.center != null;
			if (flag2)
			{
				this.center.performAction();
			}
			mScreen.keyTouch = -1;
		}
		bool flag3 = this.left != null && (GameCanvas.keyPressed[12] || mScreen.getCmdPointerLast(this.left));
		if (flag3)
		{
			GameCanvas.keyPressed[12] = false;
			GameCanvas.isPointerClick = false;
			mScreen.keyTouch = -1;
			GameCanvas.isPointerJustRelease = false;
			bool flag4 = this.left != null;
			if (flag4)
			{
				this.left.performAction();
			}
			mScreen.keyTouch = -1;
		}
		bool flag5 = this.right != null && (GameCanvas.keyPressed[13] || mScreen.getCmdPointerLast(this.right));
		if (flag5)
		{
			GameCanvas.keyPressed[13] = false;
			GameCanvas.isPointerClick = false;
			GameCanvas.isPointerJustRelease = false;
			mScreen.keyTouch = -1;
			bool flag6 = this.right != null;
			if (flag6)
			{
				this.right.performAction();
			}
			mScreen.keyTouch = -1;
		}
		GameCanvas.clearKeyPressed();
		GameCanvas.clearKeyHold();
	}

	// Token: 0x0600034C RID: 844 RVA: 0x00041AA1 File Offset: 0x0003FCA1
	public virtual void show()
	{
	}

	// Token: 0x04000575 RID: 1397
	public Command left;

	// Token: 0x04000576 RID: 1398
	public Command center;

	// Token: 0x04000577 RID: 1399
	public Command right;

	// Token: 0x04000578 RID: 1400
	private int lenCaption;
}
using System;
using System.IO;
using System.Threading;
using AssemblyCSharp.Mod.Xmap;

// Token: 0x02000014 RID: 20
internal class DovaBaoKhu
{
	// Token: 0x06000072 RID: 114 RVA: 0x0000563B File Offset: 0x0000383B
	private static void Wait(int time)
	{
		DovaBaoKhu.IsWait = true;
		DovaBaoKhu.TimeStartWait = mSystem.currentTimeMillis();
		DovaBaoKhu.TimeWait = (long)time;
	}

	// Token: 0x06000073 RID: 115 RVA: 0x00005658 File Offset: 0x00003858
	private static bool IsWaiting()
	{
		bool flag = DovaBaoKhu.IsWait && mSystem.currentTimeMillis() - DovaBaoKhu.TimeStartWait >= DovaBaoKhu.TimeWait;
		if (flag)
		{
			DovaBaoKhu.IsWait = false;
		}
		return DovaBaoKhu.IsWait;
	}

	// Token: 0x06000074 RID: 116 RVA: 0x0000569C File Offset: 0x0000389C
	public static void GetMapBoss()
	{
		bool flag = DovaBaoKhu.TbBoss != null && DovaBaoKhu.TbBoss.Contains("BOSS") && DovaBaoKhu.TbBoss.Contains("Broly");
		if (flag)
		{
			DovaBaoKhu.TbBoss = DovaBaoKhu.TbBoss.Replace("Boss ", "");
			DovaBaoKhu.TbBoss = DovaBaoKhu.TbBoss.Replace(" vừa xuất hiện tại", "|");
			DovaBaoKhu.TbBoss = DovaBaoKhu.TbBoss.Replace("Khu ", "|");
			string[] array = DovaBaoKhu.TbBoss.Split(new char[]
			{
				'|'
			});
			string a = array[1].Trim();
			AutoBroly.Map = DovaBaoKhu.MapID(a);
			DovaBaoKhu.TbBoss = "";
		}
	}

	// Token: 0x06000075 RID: 117 RVA: 0x0000575C File Offset: 0x0000395C
	public static bool IsBoss()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.cName.Contains("Broly") && @char.cName.Contains("Super") && @char.cHPFull >= 16070777L;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000076 RID: 118 RVA: 0x000057E4 File Offset: 0x000039E4
	public static void Out()
	{
		string path = string.Format("Nro_244_Data/Resources/Status/xong{0}", DataAccount.ID);
		File.Create(path).Close();
		Thread.Sleep(10000);
		Main.exit();
		DovaBaoKhu.IsPet = false;
	}

	// Token: 0x06000077 RID: 119 RVA: 0x0000582C File Offset: 0x00003A2C
	public static int MapID(string a)
	{
		for (int i = 0; i < TileMap.mapNames.Length; i++)
		{
			bool flag = TileMap.mapNames[i].Equals(a);
			if (flag)
			{
				return i;
			}
		}
		return -1;
	}

	// Token: 0x06000078 RID: 120 RVA: 0x00005870 File Offset: 0x00003A70
	public static void Update()
	{
		bool flag = DovaBaoKhu.IsWaiting();
		if (!flag)
		{
			bool flag2 = global::Char.myCharz().cHP <= 0L || global::Char.myCharz().meDead;
			if (flag2)
			{
				bool flag3 = DovaBaoKhu.IsBoss();
				if (flag3)
				{
					AutoBroly.Map = TileMap.mapID;
					AutoBroly.Khu = TileMap.zoneID;
				}
				Service.gI().returnTownFromDead();
				DovaBaoKhu.Wait(3000);
			}
			else
			{
				bool havePet = global::Char.myCharz().havePet;
				if (havePet)
				{
					AutoBroly.TrangThai = "Đã có Đệ";
					bool flag4 = !DovaBaoKhu.IsPet;
					if (flag4)
					{
						DovaBaoKhu.IsPet = true;
						new Thread(new ThreadStart(DovaBaoKhu.Out)).Start();
					}
					DovaBaoKhu.Wait(500);
				}
				else
				{
					bool flag5 = DovaBaoKhu.IsBoss();
					if (flag5)
					{
						string contents = string.Format("Super Broly - {0} khu {1} - [{2:yyyy-MM-dd HH:mm:ss}]", TileMap.mapNames[TileMap.mapID], TileMap.zoneID, DateTime.Now);
						File.WriteAllText("Nro_244_Data//Resources//thongbao", contents);
						DovaBaoKhu.Wait(3000);
					}
					else
					{
						bool flag6 = File.Exists("Nro_244_Data//Resources//dokhu");
						if (flag6)
						{
							bool flag7 = !DovaBaoKhu.IsBoss() && !Pk9rXmap.IsXmapRunning;
							if (flag7)
							{
								DovaBaoKhu.GetMapBoss();
							}
							bool flag8 = !DovaBaoKhu.IsBoss();
							if (flag8)
							{
								AutoBroly.TrangThai = "Đang dò boss";
								bool flag9 = TileMap.mapID == AutoBroly.Map;
								if (flag9)
								{
									AutoBroly.SearchBoss();
								}
								DovaBaoKhu.Wait(2000);
								return;
							}
						}
						DovaBaoKhu.Wait(500);
					}
				}
			}
		}
	}

	// Token: 0x04000064 RID: 100
	private static bool IsWait;

	// Token: 0x04000065 RID: 101
	private static long TimeStartWait;

	// Token: 0x04000066 RID: 102
	private static long TimeWait;

	// Token: 0x04000067 RID: 103
	public static string TbBoss;

	// Token: 0x04000068 RID: 104
	public static bool isDoKhu;

	// Token: 0x04000069 RID: 105
	public static bool IsPet;
}
using System;

// Token: 0x02000041 RID: 65
public class EffecMn
{
	// Token: 0x0600034E RID: 846 RVA: 0x00041AAD File Offset: 0x0003FCAD
	public static void addEff(Effect me)
	{
		EffecMn.vEff.addElement(me);
	}

	// Token: 0x0600034F RID: 847 RVA: 0x00041ABC File Offset: 0x0003FCBC
	public static void removeEff(int id)
	{
		bool flag = EffecMn.getEffById(id) != null;
		if (flag)
		{
			EffecMn.vEff.removeElement(EffecMn.getEffById(id));
		}
	}

	// Token: 0x06000350 RID: 848 RVA: 0x00041AEC File Offset: 0x0003FCEC
	public static Effect getEffById(int id)
	{
		for (int i = 0; i < EffecMn.vEff.size(); i++)
		{
			Effect effect = (Effect)EffecMn.vEff.elementAt(i);
			bool flag = effect.effId == id;
			if (flag)
			{
				return effect;
			}
		}
		return null;
	}

	// Token: 0x06000351 RID: 849 RVA: 0x00041B40 File Offset: 0x0003FD40
	public static void paintBackGroundUnderLayer(mGraphics g, int x, int y, int layer)
	{
		for (int i = 0; i < EffecMn.vEff.size(); i++)
		{
			bool flag = ((Effect)EffecMn.vEff.elementAt(i)).layer == -layer;
			if (flag)
			{
				((Effect)EffecMn.vEff.elementAt(i)).paintUnderBackground(g, x, y);
			}
		}
	}

	// Token: 0x06000352 RID: 850 RVA: 0x00041BA4 File Offset: 0x0003FDA4
	public static void paintLayer1(mGraphics g)
	{
		for (int i = 0; i < EffecMn.vEff.size(); i++)
		{
			bool flag = ((Effect)EffecMn.vEff.elementAt(i)).layer == 1;
			if (flag)
			{
				((Effect)EffecMn.vEff.elementAt(i)).paint(g);
			}
		}
	}

	// Token: 0x06000353 RID: 851 RVA: 0x00041C04 File Offset: 0x0003FE04
	public static void paintLayer2(mGraphics g)
	{
		for (int i = 0; i < EffecMn.vEff.size(); i++)
		{
			bool flag = ((Effect)EffecMn.vEff.elementAt(i)).layer == 2;
			if (flag)
			{
				((Effect)EffecMn.vEff.elementAt(i)).paint(g);
			}
		}
	}

	// Token: 0x06000354 RID: 852 RVA: 0x00041C64 File Offset: 0x0003FE64
	public static void paintLayer3(mGraphics g)
	{
		for (int i = 0; i < EffecMn.vEff.size(); i++)
		{
			bool flag = ((Effect)EffecMn.vEff.elementAt(i)).layer == 3;
			if (flag)
			{
				((Effect)EffecMn.vEff.elementAt(i)).paint(g);
			}
		}
	}

	// Token: 0x06000355 RID: 853 RVA: 0x00041CC4 File Offset: 0x0003FEC4
	public static void paintLayer4(mGraphics g)
	{
		for (int i = 0; i < EffecMn.vEff.size(); i++)
		{
			bool flag = ((Effect)EffecMn.vEff.elementAt(i)).layer == 4;
			if (flag)
			{
				((Effect)EffecMn.vEff.elementAt(i)).paint(g);
			}
		}
	}

	// Token: 0x06000356 RID: 854 RVA: 0x00041D24 File Offset: 0x0003FF24
	public static void update()
	{
		for (int i = 0; i < EffecMn.vEff.size(); i++)
		{
			((Effect)EffecMn.vEff.elementAt(i)).update();
		}
	}

	// Token: 0x04000579 RID: 1401
	public static MyVector vEff = new MyVector();
}
using System;

// Token: 0x02000042 RID: 66
public class Effect
{
	// Token: 0x06000359 RID: 857 RVA: 0x00041D78 File Offset: 0x0003FF78
	public Effect()
	{
	}

	// Token: 0x0600035A RID: 858 RVA: 0x00041E0C File Offset: 0x0004000C
	public Effect(int id, global::Char c, int layer, int loop, int loopCount, sbyte isStand)
	{
		this.c = c;
		this.effId = id;
		this.layer = layer;
		this.loop = loop;
		this.tLoop = loopCount;
		this.isStand = (int)isStand;
		bool flag = Effect.getEffDataById(id) == null;
		if (flag)
		{
			EffectData effectData = new EffectData
			{
				ID = id
			};
			bool flag2 = id >= 42 && id <= 46;
			if (flag2)
			{
				id = 106;
			}
			string text = string.Concat(new string[]
			{
				"/x",
				mGraphics.zoomLevel.ToString(),
				"/effectdata/",
				id.ToString(),
				"/data"
			});
			DataInputStream dataInputStream = MyStream.readFile(text);
			bool flag3 = dataInputStream != null;
			if (flag3)
			{
				bool flag4 = id > 100 && id < 200;
				if (flag4)
				{
					effectData.readData2(text);
				}
				else
				{
					effectData.readData(text);
				}
				effectData.img = GameCanvas.loadImage("/effectdata/" + id.ToString() + "/img.png");
			}
			else
			{
				Service.gI().getEffData((short)id);
			}
			Effect.addEffData(effectData);
		}
		this.indexFrom = -1;
		this.indexTo = -1;
		this.trans = -1;
		this.typeEff = 4;
		bool flag5 = id == 78;
		if (flag5)
		{
			this.typeEff = 5;
		}
	}

	// Token: 0x0600035B RID: 859 RVA: 0x00041FEC File Offset: 0x000401EC
	public Effect(int id, int x, int y, int layer, int loop, int loopCount)
	{
		this.x = x;
		this.y = y;
		this.effId = id;
		this.layer = layer;
		this.loop = loop;
		this.tLoop = loopCount;
		bool flag = Effect.getEffDataById(id) == null;
		if (flag)
		{
			EffectData effectData = new EffectData
			{
				ID = id
			};
			bool flag2 = id >= 42 && id <= 46;
			if (flag2)
			{
				id = 106;
			}
			string text = string.Concat(new string[]
			{
				"/x",
				mGraphics.zoomLevel.ToString(),
				"/effectdata/",
				id.ToString(),
				"/data"
			});
			DataInputStream dataInputStream = MyStream.readFile(text);
			bool flag3 = dataInputStream != null;
			if (flag3)
			{
				bool flag4 = id > 100 && id < 200;
				if (flag4)
				{
					effectData.readData2(text);
				}
				else
				{
					effectData.readData(text);
				}
				effectData.img = GameCanvas.loadImage("/effectdata/" + id.ToString() + "/img.png");
			}
			else
			{
				Service.gI().getEffData((short)id);
			}
			Effect.addEffData(effectData);
			bool flag5 = Effect.lastEff.size() > 20;
			if (flag5)
			{
				Effect.removeEffData(int.Parse((string)Effect.lastEff.elementAt(0)));
				Effect.lastEff.removeElementAt(0);
			}
			Effect.lastEff.addElement(this.effId.ToString() + string.Empty);
		}
		this.indexFrom = -1;
		this.indexTo = -1;
		bool flag6 = id == 78;
		if (flag6)
		{
			this.typeEff = 5;
		}
		else
		{
			this.typeEff = 1;
		}
		bool flag7 = !Effect.isExistNewEff(this.effId.ToString() + string.Empty);
		if (flag7)
		{
			Effect.newEff.addElement(this.effId.ToString() + string.Empty);
		}
	}

	// Token: 0x0600035C RID: 860 RVA: 0x0004226C File Offset: 0x0004046C
	public static void removeEffData(int id)
	{
		for (int i = 0; i < Effect.vEffData.size(); i++)
		{
			EffectData effectData = (EffectData)Effect.vEffData.elementAt(i);
			bool flag = effectData.ID == id;
			if (flag)
			{
				Effect.vEffData.removeElement(effectData);
				break;
			}
		}
	}

	// Token: 0x0600035D RID: 861 RVA: 0x000422C2 File Offset: 0x000404C2
	public static void addEffData(EffectData eff)
	{
		Effect.vEffData.addElement(eff);
	}

	// Token: 0x0600035E RID: 862 RVA: 0x000422D4 File Offset: 0x000404D4
	public static EffectData getEffDataById(int id)
	{
		for (int i = 0; i < Effect.vEffData.size(); i++)
		{
			EffectData effectData = (EffectData)Effect.vEffData.elementAt(i);
			bool flag = effectData.ID == id;
			if (flag)
			{
				return effectData;
			}
		}
		return null;
	}

	// Token: 0x0600035F RID: 863 RVA: 0x00042328 File Offset: 0x00040528
	public static bool isExistNewEff(string id)
	{
		for (int i = 0; i < Effect.newEff.size(); i++)
		{
			string text = (string)Effect.newEff.elementAt(i);
			bool flag = text.Equals(id);
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000360 RID: 864 RVA: 0x0004237C File Offset: 0x0004057C
	public bool isPaintz()
	{
		bool flag = !this.isPaint;
		return !flag;
	}

	// Token: 0x06000361 RID: 865 RVA: 0x000423A4 File Offset: 0x000405A4
	public void paintUnderBackground(mGraphics g, int xLayer, int yLayer)
	{
		bool flag = this.isPaintz() && Effect.getEffDataById(this.effId).img != null;
		if (flag)
		{
			Effect.getEffDataById(this.effId).paintFrame(g, this.currFrame, this.x + xLayer, this.y + yLayer, this.trans, this.layer);
		}
	}

	// Token: 0x06000362 RID: 866 RVA: 0x0004240C File Offset: 0x0004060C
	public void getFrameKhangia()
	{
		bool flag = this.effId == 42;
		if (flag)
		{
			this.currFrame = this.khangia1[this.t];
		}
		bool flag2 = this.effId == 43;
		if (flag2)
		{
			this.currFrame = this.khangia2[this.t];
		}
		bool flag3 = this.effId == 44;
		if (flag3)
		{
			this.currFrame = this.khangia3[this.t];
		}
		bool flag4 = this.effId == 45;
		if (flag4)
		{
			this.currFrame = this.khangia4[this.t];
		}
		bool flag5 = this.effId == 46;
		if (flag5)
		{
			this.currFrame = this.khangia5[this.t];
		}
		this.t++;
		bool flag6 = this.t > this.khangia1.Length - 1;
		if (flag6)
		{
			this.t = 0;
		}
	}

	// Token: 0x06000363 RID: 867 RVA: 0x000424FC File Offset: 0x000406FC
	public void paint(mGraphics g)
	{
		bool flag = !this.isPaint || Effect.getEffDataById(this.effId) == null || Effect.getEffDataById(this.effId).img == null;
		if (!flag)
		{
			try
			{
				Effect.getEffDataById(this.effId).paintFrame(g, this.currFrame, this.x, this.y, this.trans, this.layer);
			}
			catch (Exception)
			{
			}
		}
	}

	// Token: 0x06000364 RID: 868 RVA: 0x00042588 File Offset: 0x00040788
	public void update()
	{
		try
		{
			bool flag = this.effId >= 42 && this.effId <= 46;
			if (flag)
			{
				this.getFrameKhangia();
			}
			else
			{
				bool flag2 = Effect.getEffDataById(this.effId) == null || Effect.getEffDataById(this.effId).img == null;
				if (!flag2)
				{
					bool flag3 = this.typeEff == 5;
					if (flag3)
					{
						this.data = Effect.getEffDataById(this.effId).get(this.c.statusMe);
					}
					else
					{
						this.data = Effect.getEffDataById(this.effId).get();
					}
					bool flag4 = this.data != null;
					if (flag4)
					{
						bool flag5 = !this.isGetTime;
						if (flag5)
						{
							this.isGetTime = true;
							int num = this.data.Length - 1;
							bool flag6 = num > 0 && this.typeEff != 1;
							if (flag6)
							{
								this.t = Res.random(0, num);
							}
							bool flag7 = this.typeEff == 0;
							if (flag7)
							{
								this.t = Res.random(this.indexFrom, this.indexTo);
							}
						}
						switch (this.typeEff)
						{
						case 0:
						{
							bool flag8 = Res.inRect(this.x - 50, this.y - 50, 100, 100, global::Char.myCharz().cx, global::Char.myCharz().cy) && this.t > this.indexFrom && this.t < this.indexTo;
							if (flag8)
							{
								bool flag9 = this.t < this.indexTo;
								if (flag9)
								{
									this.t = this.indexTo;
								}
								this.isNearPlayer = true;
							}
							bool flag10 = !this.isNearPlayer;
							if (flag10)
							{
								this.t++;
								bool flag11 = this.t == this.indexTo;
								if (flag11)
								{
									this.t = this.indexFrom;
								}
							}
							else
							{
								bool flag12 = this.t < this.data.Length;
								if (flag12)
								{
									this.t++;
								}
							}
							break;
						}
						case 1:
						case 3:
						{
							bool flag13 = this.t < this.data.Length;
							if (flag13)
							{
								this.t++;
							}
							break;
						}
						case 2:
						{
							bool flag14 = this.t < this.data.Length;
							if (flag14)
							{
								this.t++;
							}
							this.tLoopCount++;
							bool flag15 = this.tLoopCount == this.tLoop;
							if (flag15)
							{
								this.tLoopCount = 0;
								this.trans = Res.random(0, 2);
							}
							break;
						}
						case 4:
						{
							this.x = this.c.cx;
							this.y = this.c.cy;
							bool flag16 = this.t < this.data.Length;
							if (flag16)
							{
								this.t++;
							}
							break;
						}
						case 5:
						{
							this.trans = ((this.c.cdir != 1) ? 1 : 0);
							bool flag17 = this.c.cdir == 1;
							if (flag17)
							{
								this.x = this.c.cx - 15;
							}
							else
							{
								this.x = this.c.cx + 15;
							}
							bool flag18 = this.c.isMonkey == 0;
							if (flag18)
							{
								this.y = this.c.cy - 25;
							}
							else
							{
								this.y = this.c.cy - 35;
							}
							bool flag19 = this.t < this.data.Length;
							if (flag19)
							{
								this.t++;
							}
							break;
						}
						}
						bool flag20 = this.t == this.data.Length / 2 && (this.effId == 62 || this.effId == 63 || this.effId == 64 || this.effId == 65);
						if (flag20)
						{
							SoundMn.playSound(this.x, this.y, SoundMn.FIREWORK, SoundMn.volume);
						}
						bool flag21 = this.t <= this.data.Length - 1;
						if (flag21)
						{
							this.currFrame = (int)this.data[this.t];
						}
					}
					bool flag22 = this.t >= this.data.Length - 1;
					if (flag22)
					{
						bool flag23 = this.typeEff == 0 || this.typeEff == 3;
						if (flag23)
						{
							this.isPaint = false;
						}
						bool flag24 = this.tLoop == -1;
						if (flag24)
						{
							EffecMn.vEff.removeElement(this);
						}
						bool flag25 = this.typeEff == 2;
						if (flag25)
						{
							this.t = 0;
						}
						else
						{
							bool flag26 = this.typeEff == 1 && this.loop == 1;
							if (flag26)
							{
								this.isPaint = false;
							}
							bool flag27 = this.typeEff == 4 || this.typeEff == 5;
							if (flag27)
							{
								bool flag28 = this.loop == -1;
								if (flag28)
								{
									this.t = 0;
								}
								else
								{
									this.tLoopCount++;
									bool flag29 = this.tLoopCount == this.tLoop;
									if (flag29)
									{
										this.tLoopCount = 0;
										this.loop--;
										this.t = 0;
										bool flag30 = this.loop == 0;
										if (flag30)
										{
											this.c.removeEffChar(0, this.effId);
										}
									}
								}
							}
							else
							{
								this.isNearPlayer = false;
								bool flag31 = this.loop == -1;
								if (flag31)
								{
									this.tLoopCount++;
									this.t = 0;
									bool flag32 = this.tLoopCount == this.tLoop;
									if (flag32)
									{
										this.tLoopCount = 0;
										bool flag33 = this.tLoop > 1;
										if (flag33)
										{
											this.trans = Res.random(0, 2);
										}
									}
								}
								else
								{
									this.tLoopCount++;
									this.t = 0;
									bool flag34 = this.tLoopCount == this.tLoop;
									if (flag34)
									{
										this.tLoopCount = 0;
										this.loop--;
										bool flag35 = this.loop == 0;
										if (flag35)
										{
											EffecMn.vEff.removeElement(this);
										}
									}
								}
							}
						}
					}
					else
					{
						this.isPaint = true;
					}
				}
			}
		}
		catch (Exception)
		{
			EffecMn.vEff.removeElement(this);
		}
	}

	// Token: 0x06000365 RID: 869 RVA: 0x00042C58 File Offset: 0x00040E58
	public int getnFrame()
	{
		return this.data.Length;
	}

	// Token: 0x0400057A RID: 1402
	public int effId;

	// Token: 0x0400057B RID: 1403
	public int typeEff;

	// Token: 0x0400057C RID: 1404
	public int indexFrom;

	// Token: 0x0400057D RID: 1405
	public int indexTo;

	// Token: 0x0400057E RID: 1406
	public bool isNearPlayer;

	// Token: 0x0400057F RID: 1407
	public const int NEAR_PLAYER = 0;

	// Token: 0x04000580 RID: 1408
	public const int LOOP_NORMAL = 1;

	// Token: 0x04000581 RID: 1409
	public const int LOOP_TRANS = 2;

	// Token: 0x04000582 RID: 1410
	public const int BACKGROUND = 3;

	// Token: 0x04000583 RID: 1411
	public const int CHAR = 4;

	// Token: 0x04000584 RID: 1412
	public const int CHAR_PET_EFF = 5;

	// Token: 0x04000585 RID: 1413
	public const int FIRE_TD = 0;

	// Token: 0x04000586 RID: 1414
	public const int BIRD = 1;

	// Token: 0x04000587 RID: 1415
	public const int FIRE_NAMEK = 2;

	// Token: 0x04000588 RID: 1416
	public const int FIRE_SAYAI = 3;

	// Token: 0x04000589 RID: 1417
	public const int FROG = 5;

	// Token: 0x0400058A RID: 1418
	public const int CA = 4;

	// Token: 0x0400058B RID: 1419
	public const int ECH = 6;

	// Token: 0x0400058C RID: 1420
	public const int TACKE = 7;

	// Token: 0x0400058D RID: 1421
	public const int RAN = 8;

	// Token: 0x0400058E RID: 1422
	public const int KHI = 9;

	// Token: 0x0400058F RID: 1423
	public const int GACON = 10;

	// Token: 0x04000590 RID: 1424
	public const int DANONG = 11;

	// Token: 0x04000591 RID: 1425
	public const int DANBUOM = 12;

	// Token: 0x04000592 RID: 1426
	public const int QUA = 13;

	// Token: 0x04000593 RID: 1427
	public const int THIENTHACH = 14;

	// Token: 0x04000594 RID: 1428
	public const int CAVOI = 15;

	// Token: 0x04000595 RID: 1429
	public const int NAM = 16;

	// Token: 0x04000596 RID: 1430
	public const int RONGTHAN = 17;

	// Token: 0x04000597 RID: 1431
	public const int BUOMBAY = 26;

	// Token: 0x04000598 RID: 1432
	public const int KHUCGO = 27;

	// Token: 0x04000599 RID: 1433
	public const int DOIBAY = 28;

	// Token: 0x0400059A RID: 1434
	public const int CONMEO = 29;

	// Token: 0x0400059B RID: 1435
	public const int LUATAT = 30;

	// Token: 0x0400059C RID: 1436
	public const int ONGCONG = 31;

	// Token: 0x0400059D RID: 1437
	public const int KHANGIA1 = 42;

	// Token: 0x0400059E RID: 1438
	public const int KHANGIA2 = 43;

	// Token: 0x0400059F RID: 1439
	public const int KHANGIA3 = 44;

	// Token: 0x040005A0 RID: 1440
	public const int KHANGIA4 = 45;

	// Token: 0x040005A1 RID: 1441
	public const int KHANGIA5 = 46;

	// Token: 0x040005A2 RID: 1442
	public global::Char c;

	// Token: 0x040005A3 RID: 1443
	public int t;

	// Token: 0x040005A4 RID: 1444
	public int currFrame;

	// Token: 0x040005A5 RID: 1445
	public int x;

	// Token: 0x040005A6 RID: 1446
	public int y;

	// Token: 0x040005A7 RID: 1447
	public int loop;

	// Token: 0x040005A8 RID: 1448
	public int tLoop;

	// Token: 0x040005A9 RID: 1449
	public int tLoopCount;

	// Token: 0x040005AA RID: 1450
	private bool isPaint = true;

	// Token: 0x040005AB RID: 1451
	public int layer;

	// Token: 0x040005AC RID: 1452
	public int isStand;

	// Token: 0x040005AD RID: 1453
	public static MyVector vEffData = new MyVector();

	// Token: 0x040005AE RID: 1454
	public int trans;

	// Token: 0x040005AF RID: 1455
	public long timeExist;

	// Token: 0x040005B0 RID: 1456
	public static MyVector lastEff = new MyVector();

	// Token: 0x040005B1 RID: 1457
	public static MyVector newEff = new MyVector();

	// Token: 0x040005B2 RID: 1458
	public static MyVector dowloadEff = new MyVector();

	// Token: 0x040005B3 RID: 1459
	private int[] khangia1 = new int[]
	{
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1
	};

	// Token: 0x040005B4 RID: 1460
	private int[] khangia2 = new int[]
	{
		2,
		2,
		2,
		2,
		2,
		3,
		3,
		3,
		3,
		3
	};

	// Token: 0x040005B5 RID: 1461
	private int[] khangia3 = new int[]
	{
		4,
		4,
		4,
		4,
		4,
		5,
		5,
		5,
		5,
		5
	};

	// Token: 0x040005B6 RID: 1462
	private int[] khangia4 = new int[]
	{
		6,
		6,
		6,
		6,
		6,
		7,
		7,
		7,
		7,
		7
	};

	// Token: 0x040005B7 RID: 1463
	private int[] khangia5 = new int[]
	{
		8,
		8,
		8,
		8,
		8,
		9,
		9,
		9,
		9,
		9
	};

	// Token: 0x040005B8 RID: 1464
	private bool isGetTime;

	// Token: 0x040005B9 RID: 1465
	private short[] data;

	// Token: 0x040005BA RID: 1466
	public int cLastStatusMe;

	// Token: 0x040005BB RID: 1467
	public long cur_time_cLastStatusMe;
}
using System;

// Token: 0x02000043 RID: 67
public abstract class Effect2
{
	// Token: 0x06000367 RID: 871 RVA: 0x00042C9C File Offset: 0x00040E9C
	public virtual void update()
	{
	}

	// Token: 0x06000368 RID: 872 RVA: 0x00042C9F File Offset: 0x00040E9F
	public virtual void paint(mGraphics g)
	{
	}

	// Token: 0x040005BC RID: 1468
	public static MyVector vEffect3 = new MyVector();

	// Token: 0x040005BD RID: 1469
	public static MyVector vEffect2 = new MyVector();

	// Token: 0x040005BE RID: 1470
	public static MyVector vRemoveEffect2 = new MyVector();

	// Token: 0x040005BF RID: 1471
	public static MyVector vEffect2Outside = new MyVector();

	// Token: 0x040005C0 RID: 1472
	public static MyVector vAnimateEffect = new MyVector();

	// Token: 0x040005C1 RID: 1473
	public static MyVector vEffectFeet = new MyVector();
}
using System;

// Token: 0x02000044 RID: 68
public class EffectChar
{
	// Token: 0x0600036B RID: 875 RVA: 0x00042CE9 File Offset: 0x00040EE9
	public EffectChar(short templateId, int timeStart, int timeLenght, short param)
	{
		this.template = EffectChar.effTemplates[(int)templateId];
		this.timeStart = timeStart;
		this.timeLenght = timeLenght / 1000;
		this.param = param;
	}

	// Token: 0x040005C2 RID: 1474
	public static EffectTemplate[] effTemplates;

	// Token: 0x040005C3 RID: 1475
	public static sbyte EFF_ME;

	// Token: 0x040005C4 RID: 1476
	public static sbyte EFF_FRIEND = 1;

	// Token: 0x040005C5 RID: 1477
	public int timeStart;

	// Token: 0x040005C6 RID: 1478
	public int timeLenght;

	// Token: 0x040005C7 RID: 1479
	public short param;

	// Token: 0x040005C8 RID: 1480
	public EffectTemplate template;
}
using System;

// Token: 0x02000045 RID: 69
public class EffectCharPaint
{
	// Token: 0x040005C9 RID: 1481
	public int idEf;

	// Token: 0x040005CA RID: 1482
	public EffectInfoPaint[] arrEfInfo;
}
using System;

// Token: 0x02000046 RID: 70
public class EffectData
{
	// Token: 0x0600036E RID: 878 RVA: 0x00042D30 File Offset: 0x00040F30
	public ImageInfo getImageInfo(sbyte id)
	{
		for (int i = 0; i < this.imgInfo.Length; i++)
		{
			bool flag = this.imgInfo[i].ID == (int)id;
			if (flag)
			{
				return this.imgInfo[i];
			}
		}
		return null;
	}

	// Token: 0x0600036F RID: 879 RVA: 0x00042D7C File Offset: 0x00040F7C
	public short[] get()
	{
		return this.arrFrame;
	}

	// Token: 0x06000370 RID: 880 RVA: 0x00042D94 File Offset: 0x00040F94
	public short[] get(int index)
	{
		bool flag = index >= this.anim_data.Length;
		if (flag)
		{
			index = 0;
		}
		bool flag2 = this.anim_data[index] == null;
		short[] result;
		if (flag2)
		{
			result = new short[1];
		}
		else
		{
			result = this.anim_data[index];
		}
		return result;
	}

	// Token: 0x06000371 RID: 881 RVA: 0x00042DE0 File Offset: 0x00040FE0
	public void readData(string patch)
	{
		DataInputStream dataInputStream = null;
		try
		{
			dataInputStream = MyStream.readFile(patch);
		}
		catch (Exception)
		{
			return;
		}
		this.readData(dataInputStream.r);
	}

	// Token: 0x06000372 RID: 882 RVA: 0x00042E1C File Offset: 0x0004101C
	public void readData2(string patch)
	{
		DataInputStream dataInputStream = null;
		try
		{
			dataInputStream = MyStream.readFile(patch);
		}
		catch (Exception)
		{
			return;
		}
		this.readEffect(dataInputStream.r);
	}

	// Token: 0x06000373 RID: 883 RVA: 0x00042E58 File Offset: 0x00041058
	public void readEffect(myReader msg)
	{
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		try
		{
			sbyte b = msg.readByte();
			Res.outz("size IMG==========" + b.ToString());
			this.imgInfo = new ImageInfo[(int)b];
			for (int i = 0; i < (int)b; i++)
			{
				this.imgInfo[i] = new ImageInfo();
				this.imgInfo[i].ID = (int)msg.readByte();
				this.imgInfo[i].x0 = (int)msg.readUnsignedByte();
				this.imgInfo[i].y0 = (int)msg.readUnsignedByte();
				this.imgInfo[i].w = (int)msg.readUnsignedByte();
				this.imgInfo[i].h = (int)msg.readUnsignedByte();
			}
			short num5 = msg.readShort();
			this.frame = new Frame[(int)num5];
			for (int j = 0; j < this.frame.Length; j++)
			{
				this.frame[j] = new Frame();
				sbyte b2 = msg.readByte();
				this.frame[j].dx = new short[(int)b2];
				this.frame[j].dy = new short[(int)b2];
				this.frame[j].idImg = new sbyte[(int)b2];
				for (int k = 0; k < (int)b2; k++)
				{
					this.frame[j].dx[k] = msg.readShort();
					this.frame[j].dy[k] = msg.readShort();
					this.frame[j].idImg[k] = msg.readByte();
					bool flag = j == 0;
					if (flag)
					{
						bool flag2 = num > (int)this.frame[j].dx[k];
						if (flag2)
						{
							num = (int)this.frame[j].dx[k];
						}
						bool flag3 = num2 > (int)this.frame[j].dy[k];
						if (flag3)
						{
							num2 = (int)this.frame[j].dy[k];
						}
						bool flag4 = num3 < (int)this.frame[j].dx[k] + this.imgInfo[(int)this.frame[j].idImg[k]].w;
						if (flag4)
						{
							num3 = (int)this.frame[j].dx[k] + this.imgInfo[(int)this.frame[j].idImg[k]].w;
						}
						bool flag5 = num4 < (int)this.frame[j].dy[k] + this.imgInfo[(int)this.frame[j].idImg[k]].h;
						if (flag5)
						{
							num4 = (int)this.frame[j].dy[k] + this.imgInfo[(int)this.frame[j].idImg[k]].h;
						}
						this.width = num3 - num;
						this.height = num4 - num2;
					}
				}
			}
			this.arrFrame = new short[(int)msg.readShort()];
			for (int l = 0; l < this.arrFrame.Length; l++)
			{
				this.arrFrame[l] = msg.readShort();
			}
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
			Res.outz("1");
		}
	}

	// Token: 0x06000374 RID: 884 RVA: 0x000431EC File Offset: 0x000413EC
	public void readData(myReader iss)
	{
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		try
		{
			sbyte b = iss.readByte();
			this.imgInfo = new ImageInfo[(int)b];
			for (int i = 0; i < (int)b; i++)
			{
				this.imgInfo[i] = new ImageInfo();
				this.imgInfo[i].ID = (int)iss.readByte();
				this.imgInfo[i].x0 = (int)iss.readUnsignedByte();
				this.imgInfo[i].y0 = (int)iss.readUnsignedByte();
				this.imgInfo[i].w = (int)iss.readUnsignedByte();
				this.imgInfo[i].h = (int)iss.readUnsignedByte();
			}
			short num5 = iss.readShort();
			this.frame = new Frame[(int)num5];
			for (int j = 0; j < (int)num5; j++)
			{
				this.frame[j] = new Frame();
				sbyte b2 = iss.readByte();
				this.frame[j].dx = new short[(int)b2];
				this.frame[j].dy = new short[(int)b2];
				this.frame[j].idImg = new sbyte[(int)b2];
				for (int k = 0; k < (int)b2; k++)
				{
					this.frame[j].dx[k] = iss.readShort();
					this.frame[j].dy[k] = iss.readShort();
					this.frame[j].idImg[k] = iss.readByte();
					bool flag = j == 0;
					if (flag)
					{
						bool flag2 = num > (int)this.frame[j].dx[k];
						if (flag2)
						{
							num = (int)this.frame[j].dx[k];
						}
						bool flag3 = num2 > (int)this.frame[j].dy[k];
						if (flag3)
						{
							num2 = (int)this.frame[j].dy[k];
						}
						bool flag4 = num3 < (int)this.frame[j].dx[k] + this.imgInfo[(int)this.frame[j].idImg[k]].w;
						if (flag4)
						{
							num3 = (int)this.frame[j].dx[k] + this.imgInfo[(int)this.frame[j].idImg[k]].w;
						}
						bool flag5 = num4 < (int)this.frame[j].dy[k] + this.imgInfo[(int)this.frame[j].idImg[k]].h;
						if (flag5)
						{
							num4 = (int)this.frame[j].dy[k] + this.imgInfo[(int)this.frame[j].idImg[k]].h;
						}
						this.width = num3 - num;
						this.height = num4 - num2;
					}
				}
			}
			short num6 = iss.readShort();
			this.arrFrame = new short[(int)num6];
			bool flag6 = this.ID >= 201;
			if (flag6)
			{
				short num7 = 0;
				short[] array = new short[(int)num6];
				int num8 = 0;
				string str = string.Empty;
				bool flag7 = false;
				for (int l = 0; l < (int)num6; l++)
				{
					short num9 = iss.readShort();
					str = str + num9.ToString() + ",";
					this.arrFrame[l] = num9;
					bool flag8 = num9 + 500 >= 500;
					if (flag8)
					{
						array[num8++] = num9;
						flag7 = true;
					}
					else
					{
						num7 = (short)Res.abs((int)(num9 + 500));
						this.anim_data[(int)num7] = new short[num8];
						Array.Copy(array, 0, this.anim_data[(int)num7], 0, num8);
						num8 = 0;
					}
				}
				bool flag9 = !flag7;
				if (flag9)
				{
					this.anim_data[0] = new short[num8];
					Array.Copy(array, 0, this.anim_data[(int)num7], 0, num8);
				}
				else
				{
					for (int m = 0; m < 16; m++)
					{
						bool flag10 = this.anim_data[m] == null;
						if (flag10)
						{
							this.anim_data[m] = this.anim_data[2];
						}
					}
				}
			}
			else
			{
				for (int n = 0; n < (int)num6; n++)
				{
					this.arrFrame[n] = iss.readShort();
				}
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("LOI TAI readData cua EffectDAta" + ex.ToString());
		}
	}

	// Token: 0x06000375 RID: 885 RVA: 0x000436B8 File Offset: 0x000418B8
	public void readData(sbyte[] data)
	{
		myReader iss = new myReader(data);
		this.readData(iss);
	}

	// Token: 0x06000376 RID: 886 RVA: 0x000436D8 File Offset: 0x000418D8
	public void readDataNewBoss(sbyte[] data, sbyte typeread)
	{
		myReader msg = new myReader(data);
		this.readMobNew(msg, typeread);
	}

	// Token: 0x06000377 RID: 887 RVA: 0x000436F8 File Offset: 0x000418F8
	public void paintFrame(mGraphics g, int f, int x, int y, int trans, int layer)
	{
		bool flag = this.frame == null || this.frame.Length == 0;
		if (!flag)
		{
			Frame frame = this.frame[f];
			for (int i = 0; i < frame.dx.Length; i++)
			{
				ImageInfo imageInfo = this.getImageInfo(frame.idImg[i]);
				try
				{
					switch (trans)
					{
					case -1:
						g.drawRegion(this.img, imageInfo.x0, imageInfo.y0, imageInfo.w, imageInfo.h, 0, x + (int)frame.dx[i], y + (int)frame.dy[i], 0);
						break;
					case 0:
						g.drawRegion(this.img, imageInfo.x0, imageInfo.y0, imageInfo.w, imageInfo.h, 0, x + (int)frame.dx[i], y + (int)frame.dy[i] - ((layer < 4 && layer > 0) ? GameCanvas.transY : 0), 0);
						break;
					case 1:
						g.drawRegion(this.img, imageInfo.x0, imageInfo.y0, imageInfo.w, imageInfo.h, 2, x - (int)frame.dx[i], y + (int)frame.dy[i] - ((layer < 4 && layer > 0) ? GameCanvas.transY : 0), StaticObj.TOP_RIGHT);
						break;
					case 2:
						g.drawRegion(this.img, imageInfo.x0, imageInfo.y0, imageInfo.w, imageInfo.h, 7, x - (int)frame.dx[i], y + (int)frame.dy[i] - ((layer < 4 && layer > 0) ? GameCanvas.transY : 0), StaticObj.VCENTER_HCENTER);
						break;
					}
				}
				catch (Exception)
				{
				}
			}
		}
	}

	// Token: 0x06000378 RID: 888 RVA: 0x000438E8 File Offset: 0x00041AE8
	public void readMobNew(myReader msg, sbyte typeread)
	{
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		try
		{
			sbyte b = msg.readByte();
			this.imgInfo = new ImageInfo[(int)b];
			for (int i = 0; i < (int)b; i++)
			{
				this.imgInfo[i] = new ImageInfo();
				this.imgInfo[i].ID = (int)msg.readByte();
				bool flag = typeread == 1;
				if (flag)
				{
					this.imgInfo[i].x0 = (int)msg.readUnsignedByte();
					this.imgInfo[i].y0 = (int)msg.readUnsignedByte();
				}
				else
				{
					this.imgInfo[i].x0 = (int)msg.readShort();
					this.imgInfo[i].y0 = (int)msg.readShort();
				}
				this.imgInfo[i].w = (int)msg.readUnsignedByte();
				this.imgInfo[i].h = (int)msg.readUnsignedByte();
			}
			short num5 = msg.readShort();
			this.frame = new Frame[(int)num5];
			for (int j = 0; j < this.frame.Length; j++)
			{
				this.frame[j] = new Frame();
				sbyte b2 = msg.readByte();
				this.frame[j].dx = new short[(int)b2];
				this.frame[j].dy = new short[(int)b2];
				this.frame[j].idImg = new sbyte[(int)b2];
				for (int k = 0; k < (int)b2; k++)
				{
					this.frame[j].dx[k] = msg.readShort();
					this.frame[j].dy[k] = msg.readShort();
					this.frame[j].idImg[k] = msg.readByte();
					bool flag2 = j == 0;
					if (flag2)
					{
						bool flag3 = num > (int)this.frame[j].dx[k];
						if (flag3)
						{
							num = (int)this.frame[j].dx[k];
						}
						bool flag4 = num2 > (int)this.frame[j].dy[k];
						if (flag4)
						{
							num2 = (int)this.frame[j].dy[k];
						}
						bool flag5 = num3 < (int)this.frame[j].dx[k] + this.imgInfo[(int)this.frame[j].idImg[k]].w;
						if (flag5)
						{
							num3 = (int)this.frame[j].dx[k] + this.imgInfo[(int)this.frame[j].idImg[k]].w;
						}
						bool flag6 = num4 < (int)this.frame[j].dy[k] + this.imgInfo[(int)this.frame[j].idImg[k]].h;
						if (flag6)
						{
							num4 = (int)this.frame[j].dy[k] + this.imgInfo[(int)this.frame[j].idImg[k]].h;
						}
						this.width = num3 - num;
						this.height = num4 - num2;
					}
				}
			}
			this.arrFrame = new short[(int)msg.readShort()];
			for (int l = 0; l < this.arrFrame.Length; l++)
			{
				this.arrFrame[l] = msg.readShort();
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x040005CB RID: 1483
	public Image img;

	// Token: 0x040005CC RID: 1484
	public ImageInfo[] imgInfo;

	// Token: 0x040005CD RID: 1485
	public Frame[] frame;

	// Token: 0x040005CE RID: 1486
	public short[] arrFrame;

	// Token: 0x040005CF RID: 1487
	public short[][] anim_data = new short[16][];

	// Token: 0x040005D0 RID: 1488
	public int ID;

	// Token: 0x040005D1 RID: 1489
	public int typeData;

	// Token: 0x040005D2 RID: 1490
	public int width;

	// Token: 0x040005D3 RID: 1491
	public int height;
}
using System;

// Token: 0x02000047 RID: 71
public class EffectFeet : Effect2
{
	// Token: 0x0600037A RID: 890 RVA: 0x00043CA0 File Offset: 0x00041EA0
	public static void addFeet(int cx, int cy, int ctrans, int timeLengthInSecond, bool isCF)
	{
		EffectFeet effectFeet = new EffectFeet();
		effectFeet.x = cx;
		effectFeet.y = cy;
		effectFeet.trans = ctrans;
		effectFeet.isF = isCF;
		effectFeet.endTime = mSystem.currentTimeMillis() + (long)(timeLengthInSecond * 1000);
		Effect2.vEffectFeet.addElement(effectFeet);
	}

	// Token: 0x0600037B RID: 891 RVA: 0x00043CF4 File Offset: 0x00041EF4
	public override void update()
	{
		bool flag = mSystem.currentTimeMillis() - this.endTime > 0L;
		if (flag)
		{
			Effect2.vEffectFeet.removeElement(this);
		}
	}

	// Token: 0x0600037C RID: 892 RVA: 0x00043D24 File Offset: 0x00041F24
	public override void paint(mGraphics g)
	{
		int size = (int)TileMap.size;
		bool flag = TileMap.tileTypeAt(this.x + size / 2, this.y + 1, 4);
		if (flag)
		{
			g.setClip(this.x / size * size, (this.y - 30) / size * size, size, 100);
		}
		else
		{
			bool flag2 = TileMap.tileTypeAt((this.x - size / 2) / size, (this.y + 1) / size) == 0;
			if (flag2)
			{
				g.setClip(this.x / size * size, (this.y - 30) / size * size, 100, 100);
			}
			else
			{
				bool flag3 = TileMap.tileTypeAt((this.x + size / 2) / size, (this.y + 1) / size) == 0;
				if (flag3)
				{
					g.setClip(this.x / size * size, (this.y - 30) / size * size, size, 100);
				}
				else
				{
					bool flag4 = TileMap.tileTypeAt(this.x - size / 2, this.y + 1, 8);
					if (flag4)
					{
						g.setClip(this.x / 24 * size, (this.y - 30) / size * size, size, 100);
					}
				}
			}
		}
		g.drawRegion((!this.isF) ? EffectFeet.imgFeet3 : EffectFeet.imgFeet1, 0, 0, EffectFeet.imgFeet1.getWidth(), EffectFeet.imgFeet1.getHeight(), this.trans, this.x, this.y, mGraphics.BOTTOM | mGraphics.HCENTER);
		g.setClip(GameScr.cmx, GameScr.cmy - GameCanvas.transY, GameScr.gW, GameScr.gH + 2 * GameCanvas.transY);
	}

	// Token: 0x040005D4 RID: 1492
	private int x;

	// Token: 0x040005D5 RID: 1493
	private int y;

	// Token: 0x040005D6 RID: 1494
	private int trans;

	// Token: 0x040005D7 RID: 1495
	private long endTime;

	// Token: 0x040005D8 RID: 1496
	private bool isF;

	// Token: 0x040005D9 RID: 1497
	public static Image imgFeet1 = GameCanvas.loadImage("/mainImage/myTexture2dmove-1.png");

	// Token: 0x040005DA RID: 1498
	public static Image imgFeet3 = GameCanvas.loadImage("/mainImage/myTexture2dmove-3.png");
}
using System;

// Token: 0x02000048 RID: 72
public class EffectInfoPaint
{
	// Token: 0x040005DB RID: 1499
	public int dx;

	// Token: 0x040005DC RID: 1500
	public int dy;

	// Token: 0x040005DD RID: 1501
	public int idImg;
}
using System;
using System;

// Token: 0x02000049 RID: 73
public class EffectManager : MyVector
{
	// Token: 0x06000380 RID: 896 RVA: 0x00043EFC File Offset: 0x000420FC
	public void updateAll()
	{
		for (int i = base.size() - 1; i >= 0; i--)
		{
			Effect_End effect_End = (Effect_End)base.elementAt(i);
			bool flag = effect_End != null;
			if (flag)
			{
				effect_End.update();
				bool isRemove = effect_End.isRemove;
				if (isRemove)
				{
					base.removeElementAt(i);
				}
			}
		}
	}

	// Token: 0x06000381 RID: 897 RVA: 0x00043F5A File Offset: 0x0004215A
	public static void update()
	{
		EffectManager.hiEffects.updateAll();
		EffectManager.mid_2Effects.updateAll();
		EffectManager.midEffects.updateAll();
		EffectManager.lowEffects.updateAll();
	}

	// Token: 0x06000382 RID: 898 RVA: 0x00043F8C File Offset: 0x0004218C
	public void paintAll(mGraphics g)
	{
		for (int i = 0; i < base.size(); i++)
		{
			Effect_End effect_End = (Effect_End)base.elementAt(i);
			bool flag = effect_End != null && !effect_End.isRemove;
			if (flag)
			{
				((Effect_End)base.elementAt(i)).paint(g);
			}
		}
	}

	// Token: 0x06000383 RID: 899 RVA: 0x00043FE8 File Offset: 0x000421E8
	public void removeAll()
	{
		for (int i = base.size() - 1; i >= 0; i--)
		{
			Effect_End effect_End = (Effect_End)base.elementAt(i);
			bool flag = effect_End != null;
			if (flag)
			{
				effect_End.isRemove = true;
				base.removeElementAt(i);
			}
		}
	}

	// Token: 0x06000384 RID: 900 RVA: 0x00044038 File Offset: 0x00042238
	public static void remove()
	{
		EffectManager.hiEffects.removeAll();
		EffectManager.lowEffects.removeAll();
		EffectManager.midEffects.removeAll();
		EffectManager.mid_2Effects.removeAll();
	}

	// Token: 0x06000385 RID: 901 RVA: 0x00044067 File Offset: 0x00042267
	public static void addHiEffect(Effect_End eff)
	{
		EffectManager.hiEffects.addElement(eff);
	}

	// Token: 0x06000386 RID: 902 RVA: 0x00044076 File Offset: 0x00042276
	public static void addMidEffects(Effect_End eff)
	{
		EffectManager.midEffects.addElement(eff);
	}

	// Token: 0x06000387 RID: 903 RVA: 0x00044085 File Offset: 0x00042285
	public static void addMid_2Effects(Effect_End eff)
	{
		EffectManager.mid_2Effects.addElement(eff);
	}

	// Token: 0x06000388 RID: 904 RVA: 0x00044094 File Offset: 0x00042294
	public static void addLowEffect(Effect_End eff)
	{
		EffectManager.lowEffects.addElement(eff);
	}

	// Token: 0x040005DE RID: 1502
	public static EffectManager lowEffects = new EffectManager();

	// Token: 0x040005DF RID: 1503
	public static EffectManager mid_2Effects = new EffectManager();

	// Token: 0x040005E0 RID: 1504
	public static EffectManager midEffects = new EffectManager();

	// Token: 0x040005E1 RID: 1505
	public static EffectManager hiEffects = new EffectManager();
}
using System;

// Token: 0x0200004A RID: 74
public class EffectPaint
{
	// Token: 0x0600038B RID: 907 RVA: 0x000440D8 File Offset: 0x000422D8
	public int getImgId()
	{
		return this.effCharPaint.arrEfInfo[this.index].idImg;
	}

	// Token: 0x040005E2 RID: 1506
	public int index;

	// Token: 0x040005E3 RID: 1507
	public Mob eMob;

	// Token: 0x040005E4 RID: 1508
	public global::Char eChar;

	// Token: 0x040005E5 RID: 1509
	public EffectCharPaint effCharPaint;

	// Token: 0x040005E6 RID: 1510
	public bool isFly;
}
using System;

// Token: 0x0200004B RID: 75
public class EffectPanel : Effect2
{
	// Token: 0x0600038D RID: 909 RVA: 0x0004410C File Offset: 0x0004230C
	public static void addServerEffect(int id, int cx, int cy, int loopCount)
	{
		EffectPanel effectPanel = new EffectPanel();
		effectPanel.eff = GameScr.efs[id - 1];
		effectPanel.x = cx;
		effectPanel.y = cy;
		effectPanel.loopCount = (short)loopCount;
		Effect2.vEffect3.addElement(effectPanel);
	}

	// Token: 0x0600038E RID: 910 RVA: 0x00044154 File Offset: 0x00042354
	public override void paint(mGraphics g)
	{
		bool flag = mGraphics.zoomLevel == 1;
		if (flag)
		{
			GameScr.countEff++;
		}
		bool flag2 = GameScr.countEff < 8;
		if (flag2)
		{
			bool flag3 = this.c != null;
			if (flag3)
			{
				this.x = this.c.cx;
				this.y = this.c.cy + GameCanvas.transY;
			}
			bool flag4 = this.m != null;
			if (flag4)
			{
				this.x = this.m.x;
				this.y = this.m.y + GameCanvas.transY;
			}
			int num = this.x + this.dx0 + this.eff.arrEfInfo[this.i0].dx;
			int num2 = this.y + this.dy0 + this.eff.arrEfInfo[this.i0].dy;
			SmallImage.drawSmallImage(g, this.eff.arrEfInfo[this.i0].idImg, num, num2, this.trans, mGraphics.VCENTER | mGraphics.HCENTER);
		}
	}

	// Token: 0x0600038F RID: 911 RVA: 0x0004427C File Offset: 0x0004247C
	public override void update()
	{
		bool flag = this.endTime != 0L;
		if (flag)
		{
			this.i0++;
			bool flag2 = this.i0 >= this.eff.arrEfInfo.Length;
			if (flag2)
			{
				this.i0 = 0;
			}
			bool flag3 = mSystem.currentTimeMillis() - this.endTime > 0L;
			if (flag3)
			{
				Effect2.vEffect3.removeElement(this);
			}
		}
		else
		{
			this.i0++;
			bool flag4 = this.i0 >= this.eff.arrEfInfo.Length;
			if (flag4)
			{
				this.loopCount -= 1;
				bool flag5 = this.loopCount <= 0;
				if (flag5)
				{
					Effect2.vEffect3.removeElement(this);
				}
				else
				{
					this.i0 = 0;
				}
			}
		}
		bool flag6 = GameCanvas.gameTick % 11 == 0 && this.c != null && this.c != global::Char.myCharz() && !GameScr.vCharInMap.contains(this.c);
		if (flag6)
		{
			Effect2.vEffect3.removeElement(this);
		}
	}

	// Token: 0x040005E7 RID: 1511
	public EffectCharPaint eff;

	// Token: 0x040005E8 RID: 1512
	private int i0;

	// Token: 0x040005E9 RID: 1513
	private int dx0;

	// Token: 0x040005EA RID: 1514
	private int dy0;

	// Token: 0x040005EB RID: 1515
	private int x;

	// Token: 0x040005EC RID: 1516
	private int y;

	// Token: 0x040005ED RID: 1517
	private global::Char c;

	// Token: 0x040005EE RID: 1518
	private Mob m;

	// Token: 0x040005EF RID: 1519
	private short loopCount;

	// Token: 0x040005F0 RID: 1520
	private long endTime;

	// Token: 0x040005F1 RID: 1521
	private int trans;
}
using System;

// Token: 0x0200004C RID: 76
public class EffectTemplate
{
	// Token: 0x040005F2 RID: 1522
	public sbyte id;

	// Token: 0x040005F3 RID: 1523
	public sbyte type;

	// Token: 0x040005F4 RID: 1524
	public int iconId;

	// Token: 0x040005F5 RID: 1525
	public string name;
}
using System;

// Token: 0x0200004D RID: 77
public class Effect_End
{
	// Token: 0x06000392 RID: 914 RVA: 0x000443B4 File Offset: 0x000425B4
	public Effect_End(int type, int typeSub, int x, int y, int levelPaint, int dir, short timeRemove, Point[] listObj)
	{
		this.f = 0;
		this.stt = 0;
		this.typeEffect = type;
		this.typeSub = typeSub;
		this.x = x;
		this.y = y;
		this.levelPaint = levelPaint;
		this.dir = dir;
		this.dir_nguoc = ((dir == -1) ? 2 : 0);
		this.time = mSystem.currentTimeMillis();
		this.timeRemove = timeRemove;
		this.isRemove = (this.isAddSub = false);
		this.n_frame = 4;
		bool flag = listObj != null;
		if (flag)
		{
			this.listObj = new Point[listObj.Length];
			for (int i = 0; i < this.listObj.Length; i++)
			{
				this.listObj[i] = listObj[i];
			}
		}
		this.get_Img_Skill();
		this.create_Effect();
	}

	// Token: 0x06000393 RID: 915 RVA: 0x000444FC File Offset: 0x000426FC
	public Effect_End(int type, int typeSub, int typePaint, global::Char charUse, Point target, int levelPaint, short timeRemove, short range)
	{
		this.f = 0;
		this.stt = 0;
		this.typeEffect = type;
		this.typeSub = typeSub;
		this.typePaint = typePaint;
		this.charUse = charUse;
		bool flag = charUse.containsCaiTrang(1265);
		if (flag)
		{
			bool flag2 = this.typeEffect == 21 || this.typeEffect == 22 || this.typeEffect == 23;
			if (flag2)
			{
				this.charUse.cx += 10 * this.charUse.cdir;
			}
			else
			{
				bool flag3 = this.typeEffect == 18 || this.typeEffect == 19 || this.typeEffect == 20;
				if (flag3)
				{
					this.charUse.cx += -15 * this.charUse.cdir;
				}
				else
				{
					this.charUse.cx += 15 * this.charUse.cdir;
				}
			}
		}
		this.x = this.charUse.cx;
		this.y = this.charUse.cy;
		this.dir = this.charUse.cdir;
		this.dir_nguoc = ((this.dir == -1) ? 2 : 0);
		this.target = target;
		this.levelPaint = levelPaint;
		this.time = mSystem.currentTimeMillis();
		this.timeRemove = timeRemove;
		this.range = (int)range;
		this.isRemove = (this.isAddSub = false);
		this.n_frame = 4;
		this.get_Img_Skill();
		this.create_Effect();
	}

	// Token: 0x06000394 RID: 916 RVA: 0x00044710 File Offset: 0x00042910
	public Effect_End(int type, int typeSub, int typePaint, int x, int y, int levelPaint, int dir, short timeRemove, Point[] listObj)
	{
		this.f = 0;
		this.stt = 0;
		this.typeEffect = type;
		this.typeSub = typeSub;
		this.typePaint = typePaint;
		this.x = x;
		this.y = y;
		this.levelPaint = levelPaint;
		this.dir = dir;
		this.dir_nguoc = ((dir == -1) ? 2 : 0);
		this.time = mSystem.currentTimeMillis();
		this.timeRemove = timeRemove;
		this.isRemove = (this.isAddSub = false);
		this.n_frame = 4;
		bool flag = listObj != null;
		if (flag)
		{
			this.listObj = new Point[listObj.Length];
			for (int i = 0; i < this.listObj.Length; i++)
			{
				this.listObj[i] = listObj[i];
			}
		}
		this.get_Img_Skill();
		this.create_Effect();
	}

	// Token: 0x06000395 RID: 917 RVA: 0x00044860 File Offset: 0x00042A60
	public static Image getImage(int id)
	{
		bool flag = id < 0;
		Image result;
		if (flag)
		{
			result = null;
		}
		else
		{
			string path = "/e/e_" + id.ToString() + ".png";
			Image image = null;
			try
			{
				image = mSystem.loadImage(path);
			}
			catch (Exception)
			{
			}
			result = image;
		}
		return result;
	}

	// Token: 0x06000396 RID: 918 RVA: 0x000448BC File Offset: 0x00042ABC
	public static void setSoundSkill_END(int x, int y, int typeEffect)
	{
		try
		{
			int num = -1;
			int num2 = Res.random(3);
			bool flag = num >= 0;
			if (flag)
			{
				SoundMn.playSound(x, y, num, SoundMn.volume);
			}
		}
		catch (Exception ex)
		{
			Res.err("ERR setSoundSkill_END: " + ex.ToString());
		}
	}

	// Token: 0x06000397 RID: 919 RVA: 0x00044920 File Offset: 0x00042B20
	public void create_Effect()
	{
		try
		{
			Effect_End.setSoundSkill_END(this.x, this.y, this.typeEffect);
			switch (this.typeEffect)
			{
			case 0:
			case 1:
			case 2:
				this.set_End_String(this.typeEffect);
				break;
			case 3:
				this.set_FireWork();
				break;
			case 9:
				this.set_LINE_IN();
				break;
			case 10:
			case 11:
				this.set_End_Rock();
				break;
			case 16:
			case 17:
				this.set_Sub();
				break;
			case 18:
			case 19:
			case 20:
				this.set_Pow();
				break;
			case 21:
			case 22:
			case 23:
				this.set_Gong();
				break;
			case 24:
				this.set_Skill_Kamex10();
				break;
			case 25:
				this.set_Skill_Destroy();
				break;
			case 26:
				this.set_Skill_MaFuba();
				break;
			}
		}
		catch (Exception ex)
		{
			Res.err("ERR create_Effect: " + ex.ToString());
			this.removeEff();
		}
	}

	// Token: 0x06000398 RID: 920 RVA: 0x00044A5C File Offset: 0x00042C5C
	public void update()
	{
		try
		{
			this.f++;
			switch (this.typeEffect)
			{
			case 0:
			case 1:
			case 2:
				this.upd_End_String();
				break;
			case 3:
				this.upd_FireWork();
				break;
			case 9:
				this.upd_LINE_IN();
				break;
			case 10:
			case 11:
				this.upd_End_Rock();
				break;
			case 16:
			case 17:
				this.upd_Sub();
				break;
			case 18:
			case 19:
			case 20:
				this.upd_Pow();
				break;
			case 21:
			case 22:
			case 23:
				this.upd_Gong();
				break;
			case 24:
				this.upd_Skill_Kamex10();
				break;
			case 25:
				this.upd_Skill_Destroy();
				break;
			case 26:
				this.upd_Skill_MaFuba();
				break;
			}
		}
		catch (Exception ex)
		{
			Res.err("ERR update: " + ex.ToString());
			this.removeEff();
		}
	}

	// Token: 0x06000399 RID: 921 RVA: 0x00044B88 File Offset: 0x00042D88
	public void paint(mGraphics g)
	{
		try
		{
			bool flag = this.isRemove || this.f < 0;
			if (!flag)
			{
				switch (this.typeEffect)
				{
				case 0:
				case 1:
				case 2:
					this.pnt_End_String(g);
					break;
				case 3:
					this.pnt_FireWork(g);
					break;
				case 9:
					this.pnt_LINE_IN(g);
					break;
				case 10:
				case 11:
					this.pnt_End_Rock(g);
					break;
				case 16:
				{
					bool flag2 = this.typeSub == 0;
					if (flag2)
					{
						this.pnt_Sub(g, mGraphics.BOTTOM | mGraphics.HCENTER);
					}
					else
					{
						this.pnt_Sub(g, mGraphics.VCENTER | mGraphics.HCENTER);
					}
					break;
				}
				case 17:
					this.pnt_Sub(g, mGraphics.VCENTER);
					break;
				case 18:
				case 19:
				case 20:
					this.pnt_Pow(g, mGraphics.BOTTOM | mGraphics.HCENTER);
					break;
				case 21:
				case 22:
				case 23:
					this.pnt_Gong(g, mGraphics.VCENTER | mGraphics.HCENTER);
					break;
				case 24:
					this.pnt_Skill_Kamex10(g);
					break;
				case 25:
					this.pnt_Skill_Destroy(g);
					break;
				case 26:
					this.pnt_Skill_MaFuba(g);
					break;
				}
			}
		}
		catch (Exception ex)
		{
			Res.err(ex.ToString());
			this.removeEff();
		}
	}

	// Token: 0x0600039A RID: 922 RVA: 0x00044D34 File Offset: 0x00042F34
	public void removeEff()
	{
		this.isRemove = true;
	}

	// Token: 0x0600039B RID: 923 RVA: 0x00044D40 File Offset: 0x00042F40
	public void createDanFocus(bool isRandom, global::Char obj)
	{
		if (isRandom)
		{
			switch (Res.random(4))
			{
			case 0:
				this.gocT_Arc = 90;
				break;
			case 1:
				this.gocT_Arc = 270;
				break;
			case 2:
				this.gocT_Arc = 180;
				break;
			case 3:
				this.gocT_Arc = 0;
				break;
			}
		}
		else
		{
			bool flag = obj.cdir == 1;
			if (flag)
			{
				this.gocT_Arc = 0;
			}
			else
			{
				this.gocT_Arc = 180;
			}
		}
		this.va = (int)((short)(256 * this.vMax));
		this.vx = 0;
		this.vy = 0;
		this.life = 0;
		this.vx1000 = this.va * Res.cos(this.gocT_Arc) >> 10;
		this.vy1000 = this.va * Res.sin(this.gocT_Arc) >> 10;
	}

	// Token: 0x0600039C RID: 924 RVA: 0x00044E28 File Offset: 0x00043028
	public void updateAngleXP(int fmove)
	{
		bool flag = this.f < fmove;
		if (!flag)
		{
			bool flag2 = this.charUse == null || this.target == null || this.f >= this.fRemove;
			if (flag2)
			{
				this.f = this.fRemove;
			}
			else
			{
				int num = this.target.x - this.charUse.cx;
				int num2 = this.target.y - this.charUse.cy;
				this.life++;
				bool flag3 = (Res.abs(num) < 10 && Res.abs(num2) < 10) || this.life > this.fRemove;
				if (flag3)
				{
					this.f = this.fRemove;
				}
				else
				{
					int num3 = Res.angle(num, num2);
					bool flag4 = Res.abs(num3 - this.gocT_Arc) < 90 || num * num + num2 * num2 > 4096;
					if (flag4)
					{
						bool flag5 = Res.abs(num3 - this.gocT_Arc) < 15;
						if (flag5)
						{
							this.gocT_Arc = num3;
						}
						else
						{
							bool flag6 = (num3 - this.gocT_Arc >= 0 && num3 - this.gocT_Arc < 180) || num3 - this.gocT_Arc < -180;
							if (flag6)
							{
								this.gocT_Arc = Res.fixangle(this.gocT_Arc + 15);
							}
							else
							{
								this.gocT_Arc = Res.fixangle(this.gocT_Arc - 15);
							}
						}
					}
					bool flag7 = this.f > this.fRemove * 2 / 3 && this.va < 8192;
					if (flag7)
					{
						this.va += 3096;
					}
					this.vx1000 = this.va * Res.cos(this.gocT_Arc) >> 10;
					this.vy1000 = this.va * Res.sin(this.gocT_Arc) >> 10;
					num += this.vx1000;
					int num4 = num >> 10;
					this.x += num4;
					num &= 1023;
					num2 += this.vy1000;
					int num5 = num2 >> 10;
					this.y += num5;
					num2 &= 1023;
				}
			}
		}
	}

	// Token: 0x0600039D RID: 925 RVA: 0x00045078 File Offset: 0x00043278
	public int setFrameAngle(int goc)
	{
		bool flag = goc <= 15 || goc > 345;
		int result;
		if (flag)
		{
			result = 12;
		}
		else
		{
			int num = (goc - 15) / 15 + 1;
			bool flag2 = num > 24;
			if (flag2)
			{
				num = 24;
			}
			result = (int)this.mpaintone_Arrow[num];
		}
		return result;
	}

	// Token: 0x0600039E RID: 926 RVA: 0x000450C4 File Offset: 0x000432C4
	public void create_Arrow(int vMax, Point targetPoint)
	{
		this.vMax = vMax;
		bool flag = targetPoint != null;
		int num;
		int num2;
		if (flag)
		{
			num = targetPoint.x - this.x;
			num2 = targetPoint.y - this.y;
			this.toX = targetPoint.x;
			this.toY = targetPoint.y;
		}
		else
		{
			num = this.toX - this.x;
			num2 = this.toY - this.y;
		}
		bool flag2 = this.x > this.toX;
		if (flag2)
		{
			this.dir = 2;
			this.dir_nguoc = 0;
		}
		else
		{
			this.dir = 0;
			this.dir_nguoc = 2;
		}
		int frameAngle = Res.angle(num, num2);
		this.frame = this.setFrameAngle(frameAngle);
		this.fSpeed = this.frame;
		this.create_Speed(num, num2);
	}

	// Token: 0x0600039F RID: 927 RVA: 0x0004519C File Offset: 0x0004339C
	public void create_Speed(int dx, int dy)
	{
		int num = Res.getDistance(dx, dy) / this.vMax;
		bool flag = num == 0;
		if (flag)
		{
			num = 1;
		}
		int num2 = dx / num;
		int num3 = dy / num;
		bool flag2 = num2 == 0 && dx < num;
		if (flag2)
		{
			num2 = ((dx >= 0) ? 1 : -1);
		}
		bool flag3 = num3 == 0 && dy < num;
		if (flag3)
		{
			num3 = ((dy >= 0) ? 1 : -1);
		}
		bool flag4 = Res.abs(num2) > Res.abs(dx);
		if (flag4)
		{
			num2 = dx;
		}
		bool flag5 = Res.abs(num3) > Res.abs(dy);
		if (flag5)
		{
			num3 = dy;
		}
		this.vx = num2;
		this.vy = num3;
	}

	// Token: 0x060003A0 RID: 928 RVA: 0x00045248 File Offset: 0x00043448
	public void moveTo_xy(int toX, int toY, int fMove, int typeEff_End, int rangeEnd)
	{
		bool flag = this.f < fMove;
		if (flag)
		{
			this.frame = this.setFrameAngle((this.dir == -1) ? 180 : 0);
		}
		else
		{
			this.frame = this.fSpeed;
			bool flag2 = Res.abs(this.x - toX) < Res.abs(this.vx);
			if (flag2)
			{
				this.x = toX;
				this.vx = 0;
			}
			else
			{
				this.x += this.vx;
			}
			bool flag3 = Res.abs(this.y - toY) < Res.abs(this.vy);
			if (flag3)
			{
				this.y = toY;
				this.vy = 0;
			}
			else
			{
				this.y += this.vy;
			}
			bool flag4 = Res.abs(this.x - toX) >= Res.abs(this.vMax) || Res.abs(this.y - toY) >= Res.abs(this.vMax) || typeEff_End < 0;
			if (!flag4)
			{
				bool flag5 = this.target != null;
				if (flag5)
				{
					int num = this.target.x;
					int num2 = this.target.y;
					bool flag6 = rangeEnd > 0;
					if (flag6)
					{
						num += Res.random_Am(0, rangeEnd);
						num2 += Res.random_Am(0, rangeEnd);
					}
					GameScr.addEffectEnd(typeEff_End, 0, 0, num, num2, 1, 0, -1, null);
					this.removeEff();
				}
				else
				{
					bool flag7 = this.isAddSub;
					if (flag7)
					{
						this.isAddSub = false;
						int num3 = this.x;
						int num4 = this.y;
						bool flag8 = rangeEnd > 1;
						if (flag8)
						{
							num3 += Res.random_Am_0(rangeEnd);
							num4 += Res.random_Am_0(rangeEnd);
						}
						GameScr.addEffectEnd(typeEff_End, 0, 0, num3, num4, 1, 0, -1, null);
					}
				}
			}
		}
	}

	// Token: 0x060003A1 RID: 929 RVA: 0x0004542C File Offset: 0x0004362C
	public void paint_Arrow(mGraphics g, FrameImage frm, int index, int x, int y, int anchor, bool isCountFr)
	{
		bool flag = frm != null;
		if (flag)
		{
			int num = frm.nFrame / 3;
			bool flag2 = num < 1;
			if (flag2)
			{
				num = 1;
			}
			int num2 = 3;
			bool flag3 = frm.nFrame <= 6;
			int num3;
			if (flag3)
			{
				num3 = ((frm.nFrame <= 3) ? (this.f % num) : ((this.f / num2 % 2 != 0) ? 3 : 0));
			}
			else
			{
				num = 1;
				num3 = ((this.f / num2 - this.fMove > 8) ? 6 : ((this.f / num2 - this.fMove > 4) ? 3 : 0));
			}
			int idx = num * (int)this.mImageArrow[index] + num3;
			bool flag4 = frm.nFrame < 3;
			if (flag4)
			{
				idx = this.f / num2 % frm.nFrame;
			}
			if (isCountFr)
			{
				idx = this.f / num2 % frm.nFrame;
			}
			frm.drawFrame(idx, x, y, (int)this.mXoayArrow[index], anchor, g);
		}
	}

	// Token: 0x060003A2 RID: 930 RVA: 0x00045530 File Offset: 0x00043730
	private void set_End_String(int typeEffect)
	{
		switch (typeEffect)
		{
		case 0:
			this.fraImgEff = new FrameImage(4);
			break;
		case 1:
			this.fraImgEff = new FrameImage(5);
			break;
		case 2:
			this.fraImgEff = new FrameImage(6);
			break;
		}
		this.fRemove = 100;
		this.dy_throw = GameCanvas.h / 3 + 10;
		this.vy = 10;
		this.y1000 = 0;
		this.isAddSub = false;
	}

	// Token: 0x060003A3 RID: 931 RVA: 0x000455B0 File Offset: 0x000437B0
	private void upd_End_String()
	{
		this.x = GameCanvas.hw;
		this.y = this.y1000;
		bool flag = this.f > this.fRemove;
		if (flag)
		{
			this.removeEff();
		}
		this.vy++;
		bool flag2 = this.vy > 15;
		if (flag2)
		{
			this.vy = 15;
		}
		bool flag3 = this.y1000 + this.vy < this.dy_throw;
		if (flag3)
		{
			this.y1000 += this.vy;
		}
		else
		{
			this.y1000 = this.dy_throw;
			bool flag4 = !this.isAddSub;
			if (flag4)
			{
				this.isAddSub = true;
				bool flag5 = this.typeSub != -1;
				if (flag5)
				{
					GameScr.addEffectEnd(this.typeSub, 0, 0, this.x, this.y, this.levelPaint, 0, -1, null);
				}
			}
		}
	}

	// Token: 0x060003A4 RID: 932 RVA: 0x000456A0 File Offset: 0x000438A0
	private void pnt_End_String(mGraphics g)
	{
		bool flag = this.fraImgEff != null;
		if (flag)
		{
			this.fraImgEff.drawFrame(this.f / 5 % this.fraImgEff.nFrame, this.x, this.y, 0, 33, g);
		}
	}

	// Token: 0x060003A5 RID: 933 RVA: 0x000456F0 File Offset: 0x000438F0
	private void set_FireWork()
	{
		int num = Res.random(3, 5);
		this.fRemove = 90;
		for (int i = 0; i < num; i++)
		{
			Point point = new Point();
			point.x = this.x + Res.random_Am_0(4);
			point.y = this.y + Res.random_Am_0(5);
			bool flag = this.typeSub == 0;
			if (flag)
			{
				point.fRe = Res.random(10);
				int num2 = 1;
				bool flag2 = i % 2 == 0;
				if (flag2)
				{
					num2 = -1;
				}
				point.x = this.x + Res.random((int)(Effect_End.arrInfoEff[5][0] / 2)) * num2;
				point.y = this.y - Res.random((int)(Effect_End.arrInfoEff[5][1] / 2));
				point.fraImgEff = new FrameImage(7);
			}
			this.VecEffEnd.addElement(point);
		}
	}

	// Token: 0x060003A6 RID: 934 RVA: 0x000457DC File Offset: 0x000439DC
	private void upd_FireWork()
	{
		for (int i = 0; i < this.VecEffEnd.size(); i++)
		{
			Point point = (Point)this.VecEffEnd.elementAt(i);
			point.update();
			bool flag = point.f == point.fRe;
			if (flag)
			{
				SoundMn.playSound(point.x, point.y, SoundMn.FIREWORK, SoundMn.volume);
			}
			bool flag2 = point.f - point.fRe <= point.fraImgEff.nFrame * 3 - 1;
			if (!flag2)
			{
				point.f = 0;
				bool flag3 = this.typeSub == 0;
				if (flag3)
				{
					point.fRe = Res.random(10);
					int num = 1;
					bool flag4 = i % 2 == 0;
					if (flag4)
					{
						num = -1;
					}
					point.x = this.x + Res.random((int)(Effect_End.arrInfoEff[5][0] / 2)) * num;
					point.y = this.y - Res.random((int)(Effect_End.arrInfoEff[5][1] / 2));
				}
			}
		}
		bool flag5 = this.f >= this.fRemove;
		if (flag5)
		{
			this.removeEff();
		}
	}

	// Token: 0x060003A7 RID: 935 RVA: 0x00045918 File Offset: 0x00043B18
	private void pnt_FireWork(mGraphics g)
	{
		for (int i = 0; i < this.VecEffEnd.size(); i++)
		{
			Point point = (Point)this.VecEffEnd.elementAt(i);
			bool flag = point.f - point.fRe > -1 && point.fraImgEff != null;
			if (flag)
			{
				point.fraImgEff.drawFrame((point.f - point.fRe) / 3 % point.fraImgEff.nFrame, point.x, point.y, 0, 3, g);
			}
		}
	}

	// Token: 0x060003A8 RID: 936 RVA: 0x000459B0 File Offset: 0x00043BB0
	private void set_Skill_Kamex10()
	{
		this.w = this.fra_skill[0].frameWidth;
		this.h = this.fra_skill[0].frameHeight;
		this.vMax = Res.abs(this.x - this.target.x);
		this.nFrame = new byte[]
		{
			0,
			0,
			0,
			1,
			1,
			1
		};
		this.isAddSub = false;
		SoundMn.playSound(this.x, this.y, SoundMn.KAMEX10_1, SoundMn.volume);
	}

	// Token: 0x060003A9 RID: 937 RVA: 0x00045A3C File Offset: 0x00043C3C
	private void upd_Skill_Kamex10()
	{
		this.fSpeed++;
		this.w += 20;
		bool flag = this.w > this.vMax;
		if (flag)
		{
			this.w = this.vMax;
		}
		this.x = this.charUse.cx + 10;
		this.y = this.charUse.cy - 3;
		bool flag2 = this.dir == -1;
		if (flag2)
		{
			this.x = this.charUse.cx - this.w - 10;
		}
		bool flag3 = !this.isAddSub && GameCanvas.timeNow - this.time >= (long)this.timeRemove;
		if (flag3)
		{
			this.f = 0;
			this.nFrame = new byte[]
			{
				2,
				2,
				2,
				3,
				3,
				3
			};
			this.isAddSub = true;
		}
		bool flag4 = this.f > this.nFrame.Length - 1;
		if (flag4)
		{
			bool flag5 = this.isAddSub;
			if (flag5)
			{
				this.removeEff();
			}
			else
			{
				this.f = 0;
			}
		}
	}

	// Token: 0x060003AA RID: 938 RVA: 0x00045B60 File Offset: 0x00043D60
	private void pnt_Skill_Kamex10(mGraphics g)
	{
		bool flag = this.fra_skill != null;
		if (flag)
		{
			g.setClip(this.x, this.y - this.h / 2, this.w, this.h);
			this.Fill_Rect_Img(g, this.fra_skill[0], this.fra_skill[1], this.fra_skill[2], (int)this.nFrame[this.f], this.x, this.y, this.vMax);
			GameCanvas.resetTransGameScr(g);
			bool flag2 = this.dir == -1 && this.fra_skill[0] != null;
			if (flag2)
			{
				this.fra_skill[0].drawFrame((int)this.nFrame[this.f], this.x + this.w - this.fra_skill[0].frameWidth, this.y - this.fra_skill[0].frameHeight / 2 - 1, 2, 0, g);
			}
		}
	}

	// Token: 0x060003AB RID: 939 RVA: 0x00045C5C File Offset: 0x00043E5C
	private void set_Skill_Destroy()
	{
		this.x = this.charUse.cx + 20 * this.charUse.cdir;
		int num = 15;
		this.fMove = (int)this.timeRemove / num;
		bool flag = this.target != null;
		if (flag)
		{
			for (int i = 0; i < num; i++)
			{
				Point point = new Point();
				point.fraImgEff = this.fra_skill[0];
				point.fraImgEff_2 = this.fra_skill[2];
				point.x = this.x;
				point.y = this.y;
				bool flag2 = this.target != null;
				if (flag2)
				{
					point.toX = this.target.x;
					point.toY = this.target.y;
					bool flag3 = this.range > 0;
					if (flag3)
					{
						point.toX += Res.random_Am(0, this.range);
						point.toY += Res.random_Am(0, this.range);
					}
				}
				this.vMax = Res.random(9, 12);
				bool flag4 = i == num - 1;
				if (flag4)
				{
					point.fraImgEff = this.fra_skill[1];
					point.fraImgEff_2 = this.fra_skill[3];
					point.toX = this.target.x;
					point.toY = this.target.y;
					this.vMax = 9;
				}
				point.isPaint = false;
				point.isChange = false;
				point.isRemove = false;
				point.create_Arrow(this.vMax);
				this.VecEffEnd.addElement(point);
			}
		}
		else
		{
			this.removeEff();
		}
	}

	// Token: 0x060003AC RID: 940 RVA: 0x00045E14 File Offset: 0x00044014
	private void upd_Skill_Destroy()
	{
		int num = 0;
		for (int i = 0; i < this.VecEffEnd.size(); i++)
		{
			Point point = (Point)this.VecEffEnd.elementAt(i);
			bool flag = !point.isPaint && GameCanvas.timeNow - this.time >= (long)(i * this.fMove);
			if (flag)
			{
				point.isPaint = true;
				GameScr.addEffectEnd(17, 0, this.typePaint, this.charUse.cx, this.charUse.cy - 3, 2, this.dir_nguoc, -1, null);
				bool flag2 = i == this.VecEffEnd.size() - 1;
				if (flag2)
				{
					SoundMn.playSound(point.x, point.y, SoundMn.DESTROY_1, SoundMn.volume);
				}
				else
				{
					SoundMn.playSound(point.x, point.y, SoundMn.DESTROY_0, SoundMn.volume);
				}
			}
			bool flag3 = point.isPaint && !point.isRemove;
			if (flag3)
			{
				point.f++;
				bool flag4 = !point.isChange;
				if (flag4)
				{
					bool flag5 = point.f < 10 && i == this.VecEffEnd.size() - 1 && this.charUse != null && !TileMap.tileTypeAt(this.charUse.cx - (this.charUse.chw + 1) * this.charUse.cdir, this.charUse.cy, (this.charUse.cdir != 1) ? 4 : 8);
					if (flag5)
					{
						this.charUse.cx -= this.charUse.cdir;
					}
					point.moveTo_xy(point.toX, point.toY);
					bool flag6 = point.x == point.toX;
					if (flag6)
					{
						point.isChange = true;
						point.f = 0;
					}
				}
				bool flag7 = point.isChange && point.f >= this.n_frame * point.fraImgEff_2.nFrame;
				if (flag7)
				{
					point.isRemove = true;
				}
			}
			bool flag8 = point.isRemove;
			if (flag8)
			{
				num++;
			}
		}
		bool flag9 = num == this.VecEffEnd.size();
		if (flag9)
		{
			this.removeEff();
		}
	}

	// Token: 0x060003AD RID: 941 RVA: 0x00046088 File Offset: 0x00044288
	private void pnt_Skill_Destroy(mGraphics g)
	{
		for (int i = 0; i < this.VecEffEnd.size(); i++)
		{
			Point point = (Point)this.VecEffEnd.elementAt(i);
			bool flag = point.isPaint && !point.isRemove;
			if (flag)
			{
				bool flag2 = !point.isChange;
				if (flag2)
				{
					point.paint_Arrow(g, point.fraImgEff, mGraphics.VCENTER | mGraphics.HCENTER, false);
				}
				bool isChange = point.isChange;
				if (isChange)
				{
					point.fraImgEff_2.drawFrame(point.f / this.n_frame % point.fraImgEff_2.nFrame, point.x, point.y, this.dir_nguoc, mGraphics.VCENTER | mGraphics.HCENTER, g);
				}
			}
		}
	}

	// Token: 0x060003AE RID: 942 RVA: 0x00046160 File Offset: 0x00044360
	private void set_Skill_MaFuba()
	{
		this.nFrame = new byte[]
		{
			0,
			0,
			0,
			1,
			1,
			1,
			2,
			2,
			2
		};
		this.isAddSub = false;
		this.fMove = 10;
		this.x1000 = this.x;
		this.y1000 = this.y + 12;
		this.dy = 25;
		this.dy_throw = 19;
		bool flag = this.typeSub == 1;
		if (flag)
		{
			this.dy_throw = 21;
		}
		else
		{
			bool flag2 = this.typeSub == 2;
			if (flag2)
			{
				this.dy_throw = 31;
			}
		}
		this.h = this.fra_skill[1].frameHeight + 50 - this.dy_throw;
		this.vy = 1;
		this.vy1000 = 1;
		this.y = this.y1000 - this.h;
		this.rS = 90;
		this.vMax = 1;
		this.angleS = (this.angleO = 25);
		this.iDotS = 1;
		bool flag3 = this.listObj != null && this.listObj.Length != 0;
		if (flag3)
		{
			this.iDotS = this.listObj.Length;
		}
		this.iAngleS = 360 / this.iDotS;
		this.xArgS = new int[this.iDotS];
		this.yArgS = new int[this.iDotS];
		this.xDotS = new int[this.iDotS];
		this.yDotS = new int[this.iDotS];
		GameScr.addEffectEnd(16, 0, this.typePaint, this.x1000, this.y1000, 1, 0, -1, null);
		SoundMn.playSound(this.x, this.y, SoundMn.MAFUBA_0, SoundMn.volume);
	}

	// Token: 0x060003AF RID: 943 RVA: 0x00046310 File Offset: 0x00044510
	private void changeAngleStar()
	{
		bool flag = this.vMax < 40;
		if (flag)
		{
			this.vMax += 2;
		}
		this.angleS = this.angleO;
		this.angleS -= this.vMax;
		bool flag2 = this.angleS >= 360;
		if (flag2)
		{
			this.angleS -= 360;
		}
		bool flag3 = this.angleS < 0;
		if (flag3)
		{
			this.angleS = 360 + this.angleS;
		}
		this.angleO = this.angleS;
	}

	// Token: 0x060003B0 RID: 944 RVA: 0x000463B0 File Offset: 0x000445B0
	private void setDotStar()
	{
		for (int i = 0; i < this.yArgS.Length; i++)
		{
			bool flag = this.angleS >= 360;
			if (flag)
			{
				this.angleS -= 360;
			}
			bool flag2 = this.angleS < 0;
			if (flag2)
			{
				this.angleS = 360 + this.angleS;
			}
			this.yArgS[i] = Res.abs(this.rS * Res.sin(this.angleS) / 1024);
			this.xArgS[i] = Res.abs(this.rS * Res.cos(this.angleS) / 1024);
			bool flag3 = this.angleS < 90;
			if (flag3)
			{
				this.xDotS[i] = this.x + this.xArgS[i];
				this.yDotS[i] = this.y - this.yArgS[i];
			}
			else
			{
				bool flag4 = this.angleS >= 90 && this.angleS < 180;
				if (flag4)
				{
					this.xDotS[i] = this.x - this.xArgS[i];
					this.yDotS[i] = this.y - this.yArgS[i];
				}
				else
				{
					bool flag5 = this.angleS >= 180 && this.angleS < 270;
					if (flag5)
					{
						this.xDotS[i] = this.x - this.xArgS[i];
						this.yDotS[i] = this.y + this.yArgS[i];
					}
					else
					{
						this.xDotS[i] = this.x + this.xArgS[i];
						this.yDotS[i] = this.y + this.yArgS[i];
					}
				}
			}
			this.angleS -= this.iAngleS;
		}
	}

	// Token: 0x060003B1 RID: 945 RVA: 0x000465A4 File Offset: 0x000447A4
	private void upd_Skill_MaFuba()
	{
		bool flag = this.stt == 0;
		if (flag)
		{
			bool flag2 = this.f == 3;
			if (flag2)
			{
				SoundMn.playSound(this.x, this.y, SoundMn.MAFUBA_1, SoundMn.volume);
			}
			this.frame++;
			bool flag3 = this.frame > this.nFrame.Length - 1;
			if (flag3)
			{
				this.frame = this.nFrame.Length - 1;
			}
			bool flag4 = this.f == this.fMove + 4;
			if (flag4)
			{
				GameScr.addEffectEnd(16, 1, this.typePaint, this.x, this.y, 3, 0, 2945, null);
			}
			bool flag5 = this.f > this.fMove + 4;
			if (flag5)
			{
				this.rS--;
				bool flag6 = this.rS < 0;
				if (flag6)
				{
					this.rS = 0;
					this.f = 0;
					this.fSpeed = 0;
					this.nFrame_2 = new byte[]
					{
						1,
						1,
						0,
						0,
						0,
						0,
						1,
						1,
						1,
						1,
						0,
						0,
						0,
						1,
						1,
						1,
						0,
						0,
						1,
						1,
						1,
						2
					};
					this.hideListObj_Mafuba(true);
					this.stt = 1;
				}
				else
				{
					this.changeAngleStar();
					this.setDotStar();
					this.updListObj_Mafuba(true);
				}
			}
		}
		else
		{
			bool flag7 = this.stt == 1;
			if (flag7)
			{
				this.fSpeed++;
				bool flag8 = this.fSpeed > this.nFrame_2.Length - 1;
				if (flag8)
				{
					this.fSpeed = this.nFrame_2.Length - 1;
					bool flag9 = GameCanvas.gameTick % 2 == 0;
					if (flag9)
					{
						this.vy1000++;
					}
					this.vy += this.vy1000;
					bool flag10 = this.vy >= this.h - this.fra_skill[0].frameHeight - this.dy + this.dy_throw;
					if (flag10)
					{
						this.vy = this.h - this.fra_skill[0].frameHeight - this.dy + this.dy_throw;
						this.f = 0;
						this.fSpeed = 0;
						this.stt = 2;
						this.nFrame_2 = new byte[]
						{
							3,
							3,
							3,
							3,
							3,
							4,
							4,
							4,
							5,
							5,
							5
						};
					}
				}
			}
			else
			{
				bool flag11 = this.stt == 2;
				if (flag11)
				{
					this.fSpeed++;
					bool flag12 = this.fSpeed > this.nFrame_2.Length - 1;
					if (flag12)
					{
						this.stt = 3;
						this.frame = 0;
						this.nFrame = new byte[]
						{
							2,
							2,
							1,
							1,
							0,
							0,
							3,
							3,
							3,
							0,
							0,
							0,
							4,
							4,
							4,
							0,
							0
						};
					}
				}
				else
				{
					bool flag13 = this.stt == 3;
					if (flag13)
					{
						this.frame++;
						bool flag14 = this.frame == 3;
						if (flag14)
						{
							SoundMn.playSound(this.x, this.y, SoundMn.MAFUBA_1, SoundMn.volume);
						}
						bool flag15 = this.frame > this.nFrame.Length - 1;
						if (flag15)
						{
							this.frame = 0;
							this.stt = 4;
							this.nFrame = new byte[]
							{
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								3,
								3,
								3,
								0,
								0,
								0,
								4,
								4,
								4,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								0,
								3,
								3,
								0,
								0,
								4,
								4
							};
						}
					}
					else
					{
						this.frame++;
						bool flag16 = this.frame > this.nFrame.Length - 1;
						if (flag16)
						{
							this.frame = 0;
						}
						bool flag17 = GameCanvas.timeNow - this.time >= (long)this.timeRemove;
						if (flag17)
						{
							GameScr.addEffectEnd(16, 0, this.typePaint, this.x1000, this.y1000, 1, 0, -1, null);
							this.updListObj_Mafuba(false);
							this.removeEff();
						}
					}
				}
			}
		}
	}

	// Token: 0x060003B2 RID: 946 RVA: 0x00046974 File Offset: 0x00044B74
	private void pnt_Skill_MaFuba(mGraphics g)
	{
		bool flag = this.fra_skill == null;
		if (!flag)
		{
			bool flag2 = this.nFrame != null;
			if (flag2)
			{
				this.fra_skill[0].drawFrame((int)this.nFrame[this.frame], this.x1000, this.y1000, 0, mGraphics.BOTTOM | mGraphics.HCENTER, g);
			}
			bool flag3 = this.stt == 1 || this.stt == 2;
			if (flag3)
			{
				int anchor = mGraphics.BOTTOM | mGraphics.HCENTER;
				int num = this.dy;
				bool flag4 = this.nFrame_2[this.fSpeed] == 0 || this.nFrame_2[this.fSpeed] == 1;
				if (flag4)
				{
					anchor = (mGraphics.VCENTER | mGraphics.HCENTER);
					num = 0;
				}
				this.fra_skill[1].drawFrame((int)this.nFrame_2[this.fSpeed], this.x, this.y + num + this.vy, 0, anchor, g);
			}
		}
	}

	// Token: 0x060003B3 RID: 947 RVA: 0x00046A78 File Offset: 0x00044C78
	private void Fill_Rect_Img(mGraphics g, FrameImage head, FrameImage body, FrameImage foot, int frame, int x, int y, int w)
	{
		int num = w;
		bool flag = false;
		bool flag2 = head != null && foot != null;
		if (flag2)
		{
			flag = true;
			num = w - (head.frameWidth + foot.frameWidth);
		}
		bool flag3 = num > 0;
		if (flag3)
		{
			int num2 = num / body.frameWidth;
			bool flag4 = num % body.frameWidth > 0;
			if (flag4)
			{
				num2++;
			}
			bool flag5 = this.dir == -1;
			if (flag5)
			{
				for (int i = 0; i < num2; i++)
				{
					int num3 = (i != num2 - 1) ? ((!flag) ? (x + i * body.frameWidth) : (x + foot.frameWidth + body.frameWidth + i * body.frameWidth)) : ((!flag) ? (x + w - body.frameWidth) : (x + foot.frameWidth));
					body.drawFrame(frame, num3, y - body.frameHeight / 2, 2, 0, g);
				}
			}
			else
			{
				for (int j = 0; j < num2; j++)
				{
					int num4 = (j != num2 - 1) ? ((!flag) ? (x + j * body.frameWidth) : (x + j * body.frameWidth + head.frameWidth)) : ((!flag) ? (x + w - body.frameWidth) : (x + w - (body.frameWidth + foot.frameWidth)));
					body.drawFrame(frame, num4, y - body.frameHeight / 2, 0, 0, g);
				}
			}
		}
		bool flag6 = this.dir == -1;
		if (flag6)
		{
			if (head != null)
			{
				head.drawFrame(frame, x + w - head.frameWidth, y - head.frameHeight / 2, 2, 0, g);
			}
			if (foot != null)
			{
				foot.drawFrame(frame, x, y - foot.frameHeight / 2, 2, 0, g);
			}
		}
		else
		{
			if (head != null)
			{
				head.drawFrame(frame, x, y - head.frameHeight / 2, 0, 0, g);
			}
			if (foot != null)
			{
				foot.drawFrame(frame, x + w - foot.frameWidth - 1, y - foot.frameHeight / 2, 0, 0, g);
			}
		}
	}

	// Token: 0x060003B4 RID: 948 RVA: 0x00046CBC File Offset: 0x00044EBC
	private void set_LINE_IN()
	{
		this.indexColorStar = this.typeSub;
		this.x1000 = this.x * 1000;
		this.y1000 = this.y * 1000;
		this.fRemove = Res.random(4, 6);
		this.vMax = 5;
		this.xline = 10;
		this.yline = 20;
		this.create_Star_Line_In(this.vMax, this.xline, this.yline, 0);
	}

	// Token: 0x060003B5 RID: 949 RVA: 0x00046D38 File Offset: 0x00044F38
	private void upd_LINE_IN()
	{
		for (int i = 0; i < this.VecEffEnd.size(); i++)
		{
			Line line = (Line)this.VecEffEnd.elementAt(i);
			line.update();
			bool flag = this.f >= this.fRemove;
			if (flag)
			{
				this.VecEffEnd.removeElement(line);
				i--;
			}
		}
		bool flag2 = this.f >= this.fRemove;
		if (flag2)
		{
			bool flag3 = GameCanvas.timeNow - this.time >= (long)this.timeRemove;
			if (flag3)
			{
				this.VecEffEnd.removeAllElements();
				this.removeEff();
			}
			else
			{
				this.fRemove = Res.random(4, 6);
				this.f = 0;
				this.create_Star_Line_In(this.vMax, this.xline, this.yline, 0);
			}
		}
	}

	// Token: 0x060003B6 RID: 950 RVA: 0x00046E24 File Offset: 0x00045024
	private void create_Star_Line_In(int vline, int minline, int maxline, int numpoint)
	{
		bool flag = this.f == -1;
		if (flag)
		{
			this.VecEffEnd.removeAllElements();
		}
		int num = 4;
		this.colorpaint = new int[num];
		bool flag2 = maxline <= minline;
		if (flag2)
		{
			maxline = minline + 1;
		}
		for (int i = 0; i < num; i++)
		{
			bool flag3 = Res.random(2) == 0;
			if (flag3)
			{
				this.colorpaint[i] = Effect_End.colorStar[this.indexColorStar][Res.random(3)];
			}
			else
			{
				this.colorpaint[i] = Effect_End.colorStar[this.indexColorStar][2];
			}
		}
		for (int j = 0; j < num; j++)
		{
			Line line = new Line();
			int num2 = 5 + 180 / num * j;
			int num3 = 180 / num + 180 / num * j - 5;
			bool flag4 = num3 <= num2;
			if (flag4)
			{
				num3 = num2 + 1;
			}
			int num4 = Res.random(minline, maxline);
			int num5 = Res.random(vline, vline + 3);
			int num6 = Res.random(num2, num3);
			int num7 = Res.random(13, 23);
			bool is2Line = Res.random(4) == 0;
			num6 = Res.fixangle(num6 % 360);
			line.setLine(this.x1000 - Res.sin(num6) * (num4 + num7), this.y1000 - Res.cos(num6) * (num4 + num7), this.x1000 - Res.sin(num6) * num7, this.y1000 - Res.cos(num6) * num7, Res.sin(num6) * num5, Res.cos(num6) * num5, is2Line);
			bool flag5 = numpoint > 0;
			if (flag5)
			{
				line.type = Res.random(numpoint);
			}
			this.VecEffEnd.addElement(line);
			line = new Line();
			num6 += 180 + Res.random_Am(2, 5);
			num6 = Res.fixangle(num6 % 360);
			line.setLine(this.x1000 - Res.sin(num6) * (num4 + num7), this.y1000 - Res.cos(num6) * (num4 + num7), this.x1000 - Res.sin(num6) * num7, this.y1000 - Res.cos(num6) * num7, Res.sin(num6) * num5, Res.cos(num6) * num5, is2Line);
			bool flag6 = numpoint > 0;
			if (flag6)
			{
				line.type = Res.random(numpoint);
			}
			this.VecEffEnd.addElement(line);
		}
	}

	// Token: 0x060003B7 RID: 951 RVA: 0x000470B8 File Offset: 0x000452B8
	private void pnt_LINE_IN(mGraphics g)
	{
		for (int i = 0; i < this.VecEffEnd.size(); i++)
		{
			Line line = (Line)this.VecEffEnd.elementAt(i);
			bool flag = line != null;
			if (flag)
			{
				int color = 0;
				bool flag2 = i / 2 < this.colorpaint.Length;
				if (flag2)
				{
					color = this.colorpaint[i / 2];
				}
				g.setColor(color);
				g.drawLine(line.x0 / 1000, line.y0 / 1000, line.x1 / 1000, line.y1 / 1000);
				bool is2Line = line.is2Line;
				if (is2Line)
				{
					g.drawLine(line.x0 / 1000 + 1, line.y0 / 1000, line.x1 / 1000 + 1, line.y1 / 1000);
				}
			}
		}
	}

	// Token: 0x060003B8 RID: 952 RVA: 0x000471B4 File Offset: 0x000453B4
	private void set_End_Rock()
	{
		this.fraImgEff = new FrameImage(8);
		this.fRemove = Res.random(23, 27);
		int num = Res.random(1, 3);
		this.toY = this.y - 40;
		for (int i = 0; i < num; i++)
		{
			Point point = new Point();
			point.x = this.x + Res.random_Am(0, 20);
			point.y = this.y + Res.random_Am_0(7);
			bool flag = this.typeEffect == 10;
			if (flag)
			{
				point.frame = Res.random(0, this.fraImgEff.nFrame - 2);
			}
			else
			{
				bool flag2 = this.typeEffect == 11;
				if (flag2)
				{
					point.frame = Res.random(2, this.fraImgEff.nFrame);
				}
				else
				{
					point.frame = Res.random(0, this.fraImgEff.nFrame);
				}
			}
			point.dis = Res.random(2);
			point.vy = -Res.random(1, 4);
			this.VecEffEnd.addElement(point);
		}
	}

	// Token: 0x060003B9 RID: 953 RVA: 0x000472D4 File Offset: 0x000454D4
	private void upd_End_Rock()
	{
		for (int i = 0; i < this.VecEffEnd.size(); i++)
		{
			Point point = (Point)this.VecEffEnd.elementAt(i);
			point.update();
			bool flag = point.y < this.toY;
			if (flag)
			{
				this.VecEffEnd.removeElementAt(i);
				i--;
			}
		}
		bool flag2 = this.f >= this.fRemove;
		if (flag2)
		{
			this.removeEff();
		}
	}

	// Token: 0x060003BA RID: 954 RVA: 0x0004735C File Offset: 0x0004555C
	private void pnt_End_Rock(mGraphics g)
	{
		for (int i = 0; i < this.VecEffEnd.size(); i++)
		{
			Point point = (Point)this.VecEffEnd.elementAt(i);
			bool flag = this.fraImgEff != null;
			if (flag)
			{
				this.fraImgEff.drawFrame(point.frame, point.x, point.y, 0, mGraphics.VCENTER | mGraphics.HCENTER, g);
			}
		}
	}

	// Token: 0x060003BB RID: 955 RVA: 0x000473D4 File Offset: 0x000455D4
	private void updListObj_Mafuba(bool ismafuba)
	{
		bool flag = this.listObj == null;
		if (!flag)
		{
			for (int i = 0; i < this.listObj.Length; i++)
			{
				bool flag2 = this.listObj[i] == null;
				if (!flag2)
				{
					bool flag3 = this.listObj[i].type == 0;
					if (flag3)
					{
						Mob mob = GameScr.findMobInMap(this.listObj[i].id);
						bool flag4 = mob != null;
						if (flag4)
						{
							mob.isMafuba = ismafuba;
							mob.isHide = false;
							mob.xMFB = this.xDotS[i];
							mob.yMFB = this.yDotS[i];
						}
					}
					else
					{
						global::Char @char = (global::Char.myCharz().charID != this.listObj[i].id) ? GameScr.findCharInMap(this.listObj[i].id) : global::Char.myCharz();
						bool flag5 = @char != null;
						if (flag5)
						{
							@char.isMafuba = ismafuba;
							@char.isHide = false;
							@char.xMFB = this.xDotS[i];
							@char.yMFB = this.yDotS[i];
						}
					}
				}
			}
		}
	}

	// Token: 0x060003BC RID: 956 RVA: 0x00047500 File Offset: 0x00045700
	private void hideListObj_Mafuba(bool ishide)
	{
		bool flag = this.listObj == null;
		if (!flag)
		{
			for (int i = 0; i < this.listObj.Length; i++)
			{
				bool flag2 = this.listObj[i] == null;
				if (!flag2)
				{
					bool flag3 = this.listObj[i].type == 0;
					if (flag3)
					{
						Mob mob = GameScr.findMobInMap(this.listObj[i].id);
						bool flag4 = mob != null;
						if (flag4)
						{
							mob.isHide = ishide;
						}
					}
					else
					{
						global::Char @char = (global::Char.myCharz().charID != this.listObj[i].id) ? GameScr.findCharInMap(this.listObj[i].id) : global::Char.myCharz();
						bool flag5 = @char != null;
						if (flag5)
						{
							@char.isHide = ishide;
						}
					}
				}
			}
		}
	}

	// Token: 0x060003BD RID: 957 RVA: 0x000475E4 File Offset: 0x000457E4
	private void get_Img_Skill()
	{
		int num = 0;
		int[] array = null;
		int[] array2 = null;
		switch (this.typeEffect)
		{
		case 16:
		{
			num = 26;
			bool flag = this.typeSub == 0;
			if (flag)
			{
				array = new int[]
				{
					7
				};
				array2 = new int[]
				{
					28
				};
			}
			bool flag2 = this.typeSub == 1;
			if (flag2)
			{
				array = new int[]
				{
					2
				};
				array2 = new int[]
				{
					23
				};
			}
			break;
		}
		case 17:
			num = 25;
			array = new int[]
			{
				2
			};
			array2 = new int[]
			{
				16
			};
			break;
		case 18:
			num = 24;
			array = new int[1];
			array2 = new int[]
			{
				9
			};
			break;
		case 19:
			num = 25;
			array = new int[1];
			array2 = new int[]
			{
				14
			};
			break;
		case 20:
			num = 26;
			array = new int[1];
			array2 = new int[]
			{
				21
			};
			break;
		case 21:
			num = 24;
			array = new int[]
			{
				1
			};
			array2 = new int[]
			{
				10
			};
			break;
		case 22:
			num = 25;
			array = new int[]
			{
				1
			};
			array2 = new int[]
			{
				15
			};
			break;
		case 23:
			num = 26;
			array = new int[]
			{
				1
			};
			array2 = new int[]
			{
				22
			};
			break;
		case 24:
			num = 24;
			array = new int[]
			{
				2,
				3,
				4
			};
			array2 = new int[]
			{
				11,
				12,
				13
			};
			break;
		case 25:
			num = 25;
			array = new int[]
			{
				3,
				4,
				5,
				6
			};
			array2 = new int[]
			{
				17,
				18,
				19,
				20
			};
			break;
		case 26:
		{
			num = 26;
			int num2 = 0;
			int num3 = 0;
			bool flag3 = this.typeSub == 0;
			if (flag3)
			{
				num2 = 4;
				num3 = 25;
			}
			else
			{
				bool flag4 = this.typeSub == 1;
				if (flag4)
				{
					num2 = 5;
					num3 = 26;
				}
				else
				{
					bool flag5 = this.typeSub == 2;
					if (flag5)
					{
						num2 = 6;
						num3 = 27;
					}
				}
			}
			array = new int[]
			{
				num2,
				3
			};
			array2 = new int[]
			{
				num3,
				24
			};
			break;
		}
		}
		bool flag6 = array == null || array2 == null;
		if (!flag6)
		{
			this.fra_skill = new FrameImage[array.Length];
			for (int i = 0; i < array.Length; i++)
			{
				string nameImg = string.Concat(new string[]
				{
					"Skills_",
					num.ToString(),
					"_",
					this.typePaint.ToString(),
					"_",
					array[i].ToString()
				});
				FrameImage frameImage = mSystem.getFraImage(nameImg);
				bool flag7 = frameImage == null;
				if (flag7)
				{
					frameImage = new FrameImage(array2[i]);
				}
				bool flag8 = frameImage != null;
				if (flag8)
				{
					this.fra_skill[i] = frameImage;
				}
			}
		}
	}

	// Token: 0x060003BE RID: 958 RVA: 0x000478FC File Offset: 0x00045AFC
	private void set_Gong()
	{
		bool flag = this.charUse != null;
		if (flag)
		{
			bool flag2 = this.typeEffect == 21;
			if (flag2)
			{
				this.x = this.charUse.cx - 3 * this.charUse.cdir;
				this.y = this.charUse.cy;
				SoundMn.playSound(this.x, this.y, SoundMn.KAMEX10_0, SoundMn.volume);
			}
			else
			{
				bool flag3 = this.typeEffect == 22;
				if (flag3)
				{
					this.x = this.charUse.cx + 20 * this.charUse.cdir;
					this.y = this.charUse.cy - 4;
					SoundMn.playSound(this.x, this.y, SoundMn.DESTROY_2, SoundMn.volume);
				}
				else
				{
					bool flag4 = this.typeEffect == 23;
					if (flag4)
					{
						this.x = this.charUse.cx;
						this.y = this.charUse.cy - 50;
						SoundMn.playSound(this.x, this.y, SoundMn.MAFUBA_2, SoundMn.volume);
					}
					else
					{
						this.x = this.charUse.cx;
						this.y = this.charUse.cy;
					}
				}
			}
		}
	}

	// Token: 0x060003BF RID: 959 RVA: 0x00047A58 File Offset: 0x00045C58
	private void upd_Gong()
	{
		bool flag = this.charUse != null;
		if (flag)
		{
			bool flag2 = this.typeEffect == 21;
			if (flag2)
			{
				this.x = this.charUse.cx - 3 * this.charUse.cdir;
				this.y = this.charUse.cy;
			}
			else
			{
				bool flag3 = this.typeEffect == 22;
				if (flag3)
				{
					this.x = this.charUse.cx + 20 * this.charUse.cdir;
					this.y = this.charUse.cy - 4;
				}
				else
				{
					bool flag4 = this.typeEffect == 23;
					if (flag4)
					{
						this.x = this.charUse.cx;
						this.y = this.charUse.cy - 50;
					}
					else
					{
						this.x = this.charUse.cx;
						this.y = this.charUse.cy;
					}
				}
			}
		}
		bool flag5 = this.timeRemove > 0;
		if (flag5)
		{
			bool flag6 = GameCanvas.timeNow - this.time >= (long)this.timeRemove;
			if (flag6)
			{
				this.removeEff();
			}
		}
		else
		{
			bool flag7 = this.f >= this.fra_skill[0].nFrame * this.n_frame;
			if (flag7)
			{
				this.removeEff();
			}
		}
	}

	// Token: 0x060003C0 RID: 960 RVA: 0x00047BC8 File Offset: 0x00045DC8
	private void pnt_Gong(mGraphics g, int anchor)
	{
		bool flag = this.fra_skill[0] != null;
		if (flag)
		{
			this.fra_skill[0].drawFrame(this.f / this.n_frame % this.fra_skill[0].nFrame, this.x, this.y, this.dir_nguoc, anchor, g);
		}
	}

	// Token: 0x060003C1 RID: 961 RVA: 0x00047C24 File Offset: 0x00045E24
	private void set_Pow()
	{
		this.nFrame = null;
		this.n_frame = 3;
		bool flag = this.typeEffect == 18;
		if (flag)
		{
			bool flag2 = this.typeSub == 0;
			if (flag2)
			{
				this.nFrame = new byte[]
				{
					0,
					0,
					0,
					1,
					1,
					1,
					2,
					2,
					2
				};
			}
			else
			{
				this.nFrame = new byte[]
				{
					3,
					3,
					3,
					4,
					4,
					4,
					5,
					5,
					5,
					6,
					6,
					6
				};
			}
		}
	}

	// Token: 0x060003C2 RID: 962 RVA: 0x00047C94 File Offset: 0x00045E94
	private void upd_Pow()
	{
		bool flag = this.charUse != null;
		if (flag)
		{
			this.x = this.charUse.cx;
			this.y = this.charUse.cy + 13;
		}
		bool flag2 = this.timeRemove > 0;
		if (flag2)
		{
			bool flag3 = GameCanvas.timeNow - this.time >= (long)this.timeRemove;
			if (flag3)
			{
				this.removeEff();
			}
		}
		else
		{
			bool flag4 = this.nFrame != null;
			if (flag4)
			{
				bool flag5 = this.f > this.nFrame.Length;
				if (flag5)
				{
					this.removeEff();
				}
			}
			else
			{
				bool flag6 = this.f >= this.fra_skill[0].nFrame * this.n_frame;
				if (flag6)
				{
					this.removeEff();
				}
			}
		}
	}

	// Token: 0x060003C3 RID: 963 RVA: 0x00047D6C File Offset: 0x00045F6C
	private void pnt_Pow(mGraphics g, int anchor)
	{
		bool flag = this.fra_skill[0] != null;
		if (flag)
		{
			bool flag2 = this.nFrame != null;
			if (flag2)
			{
				this.fra_skill[0].drawFrame((int)this.nFrame[this.f % this.nFrame.Length], this.x, this.y, this.dir_nguoc, anchor, g);
			}
			else
			{
				this.fra_skill[0].drawFrame(this.f / this.n_frame % this.fra_skill[0].nFrame, this.x, this.y, this.dir_nguoc, anchor, g);
			}
		}
	}

	// Token: 0x060003C4 RID: 964 RVA: 0x00047E18 File Offset: 0x00046018
	private void set_Sub()
	{
		bool flag = this.typeEffect == 17;
		if (flag)
		{
			this.x += ((this.dir != 0) ? (-this.fra_skill[0].frameWidth) : 0);
		}
	}

	// Token: 0x060003C5 RID: 965 RVA: 0x00047E5C File Offset: 0x0004605C
	private void upd_Sub()
	{
		bool flag = this.timeRemove > 0;
		if (flag)
		{
			bool flag2 = GameCanvas.timeNow - this.time >= (long)this.timeRemove;
			if (flag2)
			{
				this.removeEff();
			}
		}
		else
		{
			bool flag3 = this.f >= this.fra_skill[0].nFrame * this.n_frame;
			if (flag3)
			{
				this.removeEff();
			}
		}
	}

	// Token: 0x060003C6 RID: 966 RVA: 0x00047ECC File Offset: 0x000460CC
	private void pnt_Sub(mGraphics g, int anchor)
	{
		this.fra_skill[0].drawFrame(this.f / this.n_frame % this.fra_skill[0].nFrame, this.x, this.y, this.dir, anchor, g);
	}

	// Token: 0x060003C7 RID: 967 RVA: 0x00047F0C File Offset: 0x0004610C
	private void set_()
	{
	}

	// Token: 0x060003C8 RID: 968 RVA: 0x00047F0F File Offset: 0x0004610F
	private void upd_()
	{
	}

	// Token: 0x060003C9 RID: 969 RVA: 0x00047F12 File Offset: 0x00046112
	private void pnt_(mGraphics g)
	{
	}

	// Token: 0x040005F6 RID: 1526
	public const sbyte Lvlpaint_All = -1;

	// Token: 0x040005F7 RID: 1527
	public const sbyte Lvlpaint_Front = 0;

	// Token: 0x040005F8 RID: 1528
	public const sbyte Lvlpaint_Mid = 1;

	// Token: 0x040005F9 RID: 1529
	public const sbyte Lvlpaint_Mid_2 = 2;

	// Token: 0x040005FA RID: 1530
	public const sbyte Lvlpaint_Behind = 3;

	// Token: 0x040005FB RID: 1531
	public const short End_String_Lose = 0;

	// Token: 0x040005FC RID: 1532
	public const short End_String_Win = 1;

	// Token: 0x040005FD RID: 1533
	public const short End_String_Draw = 2;

	// Token: 0x040005FE RID: 1534
	public const short End_FireWork = 3;

	// Token: 0x040005FF RID: 1535
	public const short End_line_in = 9;

	// Token: 0x04000600 RID: 1536
	public const short End_e8_rock = 10;

	// Token: 0x04000601 RID: 1537
	public const short End_e8_ice = 11;

	// Token: 0x04000602 RID: 1538
	public const short End_SUB_MaFuBa = 16;

	// Token: 0x04000603 RID: 1539
	public const short End_SUB_Destroy = 17;

	// Token: 0x04000604 RID: 1540
	public const short End_POW_Kamex10 = 18;

	// Token: 0x04000605 RID: 1541
	public const short End_POW_Destroy = 19;

	// Token: 0x04000606 RID: 1542
	public const short End_POW_MaFuBa = 20;

	// Token: 0x04000607 RID: 1543
	public const short End_GONG_Kamex10 = 21;

	// Token: 0x04000608 RID: 1544
	public const short End_GONG_Destroy = 22;

	// Token: 0x04000609 RID: 1545
	public const short End_GONG_MaFuBa = 23;

	// Token: 0x0400060A RID: 1546
	public const short End_Skill_Kamex10 = 24;

	// Token: 0x0400060B RID: 1547
	public const short End_Skill_Destroy = 25;

	// Token: 0x0400060C RID: 1548
	public const short End_Skill_MaFuBa = 26;

	// Token: 0x0400060D RID: 1549
	private MyVector VecEffEnd = new MyVector("EffectEnd VecEffEnd");

	// Token: 0x0400060E RID: 1550
	public FrameImage fraImgEff;

	// Token: 0x0400060F RID: 1551
	public byte[] nFrame = new byte[10];

	// Token: 0x04000610 RID: 1552
	public byte[] nFrame_2 = new byte[10];

	// Token: 0x04000611 RID: 1553
	public int typePaint;

	// Token: 0x04000612 RID: 1554
	public int typeEffect;

	// Token: 0x04000613 RID: 1555
	public int typeSub;

	// Token: 0x04000614 RID: 1556
	public int range;

	// Token: 0x04000615 RID: 1557
	public short idEndeff;

	// Token: 0x04000616 RID: 1558
	public int fRemove;

	// Token: 0x04000617 RID: 1559
	public int fMove;

	// Token: 0x04000618 RID: 1560
	public int n_frame;

	// Token: 0x04000619 RID: 1561
	public int x;

	// Token: 0x0400061A RID: 1562
	public int y;

	// Token: 0x0400061B RID: 1563
	public int w;

	// Token: 0x0400061C RID: 1564
	public int h;

	// Token: 0x0400061D RID: 1565
	public int dir;

	// Token: 0x0400061E RID: 1566
	public int dir_nguoc;

	// Token: 0x0400061F RID: 1567
	public int levelPaint;

	// Token: 0x04000620 RID: 1568
	public int f;

	// Token: 0x04000621 RID: 1569
	public int frame;

	// Token: 0x04000622 RID: 1570
	public int fSpeed;

	// Token: 0x04000623 RID: 1571
	public int vx;

	// Token: 0x04000624 RID: 1572
	public int vy;

	// Token: 0x04000625 RID: 1573
	public int x1000;

	// Token: 0x04000626 RID: 1574
	public int y1000;

	// Token: 0x04000627 RID: 1575
	public int vx1000;

	// Token: 0x04000628 RID: 1576
	public int vy1000;

	// Token: 0x04000629 RID: 1577
	public int dy_throw;

	// Token: 0x0400062A RID: 1578
	public int vMax;

	// Token: 0x0400062B RID: 1579
	public int toX;

	// Token: 0x0400062C RID: 1580
	public int toY;

	// Token: 0x0400062D RID: 1581
	public int stt;

	// Token: 0x0400062E RID: 1582
	public int dx;

	// Token: 0x0400062F RID: 1583
	public int dy;

	// Token: 0x04000630 RID: 1584
	public short timeRemove;

	// Token: 0x04000631 RID: 1585
	public long time;

	// Token: 0x04000632 RID: 1586
	public bool isRemove;

	// Token: 0x04000633 RID: 1587
	public bool isAddSub;

	// Token: 0x04000634 RID: 1588
	public global::Char charUse;

	// Token: 0x04000635 RID: 1589
	public Point[] listObj;

	// Token: 0x04000636 RID: 1590
	public Point target;

	// Token: 0x04000637 RID: 1591
	public static short[][] arrInfoEff = new short[][]
	{
		new short[]
		{
			68,
			264,
			4
		},
		new short[]
		{
			30,
			120,
			4
		},
		new short[]
		{
			66,
			280,
			4
		},
		new short[]
		{
			0,
			0,
			1
		},
		new short[]
		{
			111,
			68,
			2
		},
		new short[]
		{
			90,
			68,
			2
		},
		new short[]
		{
			125,
			68,
			2
		},
		new short[]
		{
			47,
			282,
			6
		},
		new short[]
		{
			10,
			40,
			4
		},
		new short[]
		{
			92,
			525,
			7
		},
		new short[]
		{
			62,
			372,
			6
		},
		new short[]
		{
			80,
			352,
			4
		},
		new short[]
		{
			80,
			352,
			4
		},
		new short[]
		{
			80,
			352,
			4
		},
		new short[]
		{
			72,
			240,
			3
		},
		new short[]
		{
			20,
			42,
			3
		},
		new short[]
		{
			65,
			160,
			4
		},
		new short[]
		{
			50,
			300,
			6
		},
		new short[]
		{
			84,
			168,
			2
		},
		new short[]
		{
			90,
			540,
			6
		},
		new short[]
		{
			180,
			900,
			6
		},
		new short[]
		{
			62,
			186,
			3
		},
		new short[]
		{
			34,
			80,
			4
		},
		new short[]
		{
			140,
			560,
			4
		},
		new short[]
		{
			64,
			600,
			6
		},
		new short[]
		{
			36,
			200,
			5
		},
		new short[]
		{
			35,
			200,
			5
		},
		new short[]
		{
			50,
			250,
			5
		},
		new short[]
		{
			50,
			240,
			6
		}
	};

	// Token: 0x04000638 RID: 1592
	public int life;

	// Token: 0x04000639 RID: 1593
	public int goc_Arc;

	// Token: 0x0400063A RID: 1594
	public int va;

	// Token: 0x0400063B RID: 1595
	public int gocT_Arc;

	// Token: 0x0400063C RID: 1596
	public byte[] mpaintone_Arrow = new byte[]
	{
		12,
		11,
		10,
		9,
		8,
		7,
		6,
		5,
		4,
		3,
		2,
		1,
		0,
		23,
		22,
		21,
		20,
		19,
		18,
		17,
		16,
		15,
		14,
		13
	};

	// Token: 0x0400063D RID: 1597
	public byte[] mImageArrow = new byte[]
	{
		0,
		0,
		2,
		1,
		1,
		2,
		0,
		0,
		2,
		1,
		1,
		2,
		0,
		0,
		2,
		1,
		1,
		2,
		0,
		0,
		2,
		1,
		1,
		2
	};

	// Token: 0x0400063E RID: 1598
	public byte[] mXoayArrow = new byte[]
	{
		2,
		2,
		3,
		3,
		3,
		4,
		5,
		5,
		5,
		5,
		5,
		1,
		0,
		0,
		0,
		0,
		0,
		7,
		6,
		6,
		6,
		6,
		6,
		2
	};

	// Token: 0x0400063F RID: 1599
	private int rS;

	// Token: 0x04000640 RID: 1600
	private int angleS;

	// Token: 0x04000641 RID: 1601
	private int angleO;

	// Token: 0x04000642 RID: 1602
	private int iAngleS;

	// Token: 0x04000643 RID: 1603
	private int iDotS;

	// Token: 0x04000644 RID: 1604
	private int[] xArgS;

	// Token: 0x04000645 RID: 1605
	private int[] yArgS;

	// Token: 0x04000646 RID: 1606
	private int[] xDotS;

	// Token: 0x04000647 RID: 1607
	private int[] yDotS;

	// Token: 0x04000648 RID: 1608
	public static int[][] colorStar = new int[][]
	{
		new int[]
		{
			16310304,
			16298056,
			16777215
		},
		new int[]
		{
			7045120,
			12643960,
			16777215
		},
		new int[]
		{
			2407423,
			11987199,
			16777215
		}
	};

	// Token: 0x04000649 RID: 1609
	private int[] colorpaint;

	// Token: 0x0400064A RID: 1610
	private int indexColorStar;

	// Token: 0x0400064B RID: 1611
	private int xline;

	// Token: 0x0400064C RID: 1612
	private int yline;

	// Token: 0x0400064D RID: 1613
	private FrameImage[] fra_skill;
}
using System;

// Token: 0x0200004E RID: 78
public class EPosition
{
	// Token: 0x060003CB RID: 971 RVA: 0x000481C9 File Offset: 0x000463C9
	public EPosition(int x, int y)
	{
		this.x = x;
		this.y = y;
	}

	// Token: 0x060003CC RID: 972 RVA: 0x000481EF File Offset: 0x000463EF
	public EPosition(int x, int y, int fol)
	{
		this.x = x;
		this.y = y;
		this.follow = (sbyte)fol;
	}

	// Token: 0x060003CD RID: 973 RVA: 0x0004821D File Offset: 0x0004641D
	public EPosition()
	{
	}

	// Token: 0x0400064E RID: 1614
	public int x;

	// Token: 0x0400064F RID: 1615
	public int y;

	// Token: 0x04000650 RID: 1616
	public int anchor;

	// Token: 0x04000651 RID: 1617
	public sbyte follow;

	// Token: 0x04000652 RID: 1618
	public sbyte count;

	// Token: 0x04000653 RID: 1619
	public sbyte dir = 1;

	// Token: 0x04000654 RID: 1620
	public short index = -1;
}
using System;

// Token: 0x0200004F RID: 79
public class Firework
{
	// Token: 0x060003CE RID: 974 RVA: 0x00048238 File Offset: 0x00046438
	public Firework(int x0, int y0, int v, int angle, int cl)
	{
		this.y0 = y0;
		this.x0 = x0;
		this.a = 1f;
		this.v = v;
		this.angle = angle;
		this.w = GameCanvas.w;
		this.h = GameCanvas.h;
		this.last = this.time();
		for (int i = 0; i < 2; i++)
		{
			this.arr_x[i] = x0;
			this.arr_y[i] = y0;
		}
		this.cl = cl;
	}

	// Token: 0x060003CF RID: 975 RVA: 0x000482FC File Offset: 0x000464FC
	public void preDraw()
	{
		bool flag = this.time() - this.last >= this.delay;
		if (flag)
		{
			this.t++;
			this.last = this.time();
			this.arr_x[1] = this.arr_x[0];
			this.arr_y[1] = this.arr_y[0];
			this.arr_x[0] = this.x;
			this.arr_y[0] = this.y;
			this.x = Res.cos((int)((double)this.angle * 3.141592653589793 / 180.0)) * this.v * this.t + this.x0;
			this.y = (int)((float)(this.v * Res.sin((int)((double)this.angle * 3.141592653589793 / 180.0)) * this.t) - this.a * (float)this.t * (float)this.t / 2f) + this.y0;
		}
	}

	// Token: 0x060003D0 RID: 976 RVA: 0x00048418 File Offset: 0x00046618
	public void paint(mGraphics g)
	{
		this.Drawline(g, this.w - this.x, this.h - this.y, this.cl);
		for (int i = 0; i < 2; i++)
		{
			this.Drawline(g, this.w - this.arr_x[i], this.h - this.arr_y[i], this.cl);
		}
		bool flag = this.act;
		if (flag)
		{
			this.preDraw();
		}
	}

	// Token: 0x060003D1 RID: 977 RVA: 0x000484A0 File Offset: 0x000466A0
	public long time()
	{
		return mSystem.currentTimeMillis();
	}

	// Token: 0x060003D2 RID: 978 RVA: 0x000484B7 File Offset: 0x000466B7
	public void Drawline(mGraphics g, int x, int y, int color)
	{
		g.setColor(color);
		g.fillRect(x, y, 1, 2);
	}

	// Token: 0x04000655 RID: 1621
	public int w;

	// Token: 0x04000656 RID: 1622
	public int h;

	// Token: 0x04000657 RID: 1623
	public int v;

	// Token: 0x04000658 RID: 1624
	public int x0;

	// Token: 0x04000659 RID: 1625
	public int x;

	// Token: 0x0400065A RID: 1626
	public int y;

	// Token: 0x0400065B RID: 1627
	public int y0;

	// Token: 0x0400065C RID: 1628
	public int angle;

	// Token: 0x0400065D RID: 1629
	public int t;

	// Token: 0x0400065E RID: 1630
	public int cl = 16711680;

	// Token: 0x0400065F RID: 1631
	private float a;

	// Token: 0x04000660 RID: 1632
	private long last;

	// Token: 0x04000661 RID: 1633
	private long delay = 150L;

	// Token: 0x04000662 RID: 1634
	private bool act = true;

	// Token: 0x04000663 RID: 1635
	private int[] arr_x = new int[2];

	// Token: 0x04000664 RID: 1636
	private int[] arr_y = new int[2];
}
using System;

// Token: 0x02000050 RID: 80
public class FireWorkEff
{
	// Token: 0x060003D3 RID: 979 RVA: 0x000484D0 File Offset: 0x000466D0
	public static void preDraw()
	{
		bool flag = FireWorkEff.st;
		if (flag)
		{
			FireWorkEff.animate();
		}
		bool flag2 = FireWorkEff.t > 32 && FireWorkEff.st;
		if (flag2)
		{
			FireWorkEff.st = false;
			FireWorkEff.mg.removeAllElements();
			FireWorkEff.mg.addElement(new FireWorkMn(Res.random(50, GameCanvas.w - 50), Res.random(GameCanvas.h - 100, GameCanvas.h), 5, 72));
		}
	}

	// Token: 0x060003D4 RID: 980 RVA: 0x0004854C File Offset: 0x0004674C
	public static void paint(mGraphics g)
	{
		FireWorkEff.preDraw();
		g.setColor(0);
		g.fillRect(0, 0, FireWorkEff.w, FireWorkEff.h);
		g.setColor(16711680);
		for (int i = 0; i < FireWorkEff.mg.size(); i++)
		{
			((FireWorkMn)FireWorkEff.mg.elementAt(i)).paint(g);
		}
		bool flag = !FireWorkEff.st;
		if (flag)
		{
			FireWorkEff.keyPressed(-(global::Math.abs(FireWorkEff.r.nextInt() % 3) + 5));
		}
	}

	// Token: 0x060003D5 RID: 981 RVA: 0x000485E4 File Offset: 0x000467E4
	public static void keyPressed(int k)
	{
		bool flag = k == -5 && !FireWorkEff.st;
		if (flag)
		{
			FireWorkEff.x0 = FireWorkEff.w / 2;
			FireWorkEff.ag = 80;
			FireWorkEff.st = true;
			FireWorkEff.add();
		}
		else
		{
			bool flag2 = k == -7 && !FireWorkEff.st;
			if (flag2)
			{
				FireWorkEff.ag = 60;
				FireWorkEff.x0 = 0;
				FireWorkEff.st = true;
				FireWorkEff.add();
			}
			else
			{
				bool flag3 = k == -6 && !FireWorkEff.st;
				if (flag3)
				{
					FireWorkEff.ag = 120;
					FireWorkEff.x0 = FireWorkEff.w;
					FireWorkEff.st = true;
					FireWorkEff.add();
				}
			}
		}
	}

	// Token: 0x060003D6 RID: 982 RVA: 0x00048690 File Offset: 0x00046890
	public static void add()
	{
		FireWorkEff.y0 = 0;
		FireWorkEff.v = 16;
		FireWorkEff.t = 0;
		FireWorkEff.a = 0f;
		for (int i = 0; i < 3; i++)
		{
			FireWorkEff.mang_y[i] = 0;
			FireWorkEff.mang_x[i] = FireWorkEff.x0;
		}
		FireWorkEff.st = true;
	}

	// Token: 0x060003D7 RID: 983 RVA: 0x000486E8 File Offset: 0x000468E8
	public static void animate()
	{
		FireWorkEff.mang_y[2] = FireWorkEff.mang_y[1];
		FireWorkEff.mang_x[2] = FireWorkEff.mang_x[1];
		FireWorkEff.mang_y[1] = FireWorkEff.mang_y[0];
		FireWorkEff.mang_x[1] = FireWorkEff.mang_x[0];
		FireWorkEff.mang_y[0] = FireWorkEff.y;
		FireWorkEff.mang_x[0] = FireWorkEff.x;
		FireWorkEff.x = Res.cos((int)((double)FireWorkEff.ag * 3.141592653589793 / 180.0)) * FireWorkEff.v * FireWorkEff.t + FireWorkEff.x0;
		FireWorkEff.y = (int)((float)(FireWorkEff.v * Res.sin((int)((double)FireWorkEff.ag * 3.141592653589793 / 180.0)) * FireWorkEff.t) - FireWorkEff.a * (float)FireWorkEff.t * (float)FireWorkEff.t / 2f) + FireWorkEff.y0;
		bool flag = FireWorkEff.time() - FireWorkEff.last >= FireWorkEff.delay;
		if (flag)
		{
			FireWorkEff.t++;
			FireWorkEff.last = FireWorkEff.time();
		}
	}

	// Token: 0x060003D8 RID: 984 RVA: 0x00048804 File Offset: 0x00046A04
	public static long time()
	{
		return mSystem.currentTimeMillis();
	}

	// Token: 0x04000665 RID: 1637
	private static int w;

	// Token: 0x04000666 RID: 1638
	private static int h;

	// Token: 0x04000667 RID: 1639
	private static MyRandom r = new MyRandom();

	// Token: 0x04000668 RID: 1640
	private static MyVector mg = new MyVector();

	// Token: 0x04000669 RID: 1641
	private static int f = 17;

	// Token: 0x0400066A RID: 1642
	private static int x;

	// Token: 0x0400066B RID: 1643
	private static int y;

	// Token: 0x0400066C RID: 1644
	private static int ag;

	// Token: 0x0400066D RID: 1645
	private static int x0;

	// Token: 0x0400066E RID: 1646
	private static int y0;

	// Token: 0x0400066F RID: 1647
	private static int t;

	// Token: 0x04000670 RID: 1648
	private static int v;

	// Token: 0x04000671 RID: 1649
	private static int ymax = 269;

	// Token: 0x04000672 RID: 1650
	private static float a;

	// Token: 0x04000673 RID: 1651
	private static int[] mang_x = new int[3];

	// Token: 0x04000674 RID: 1652
	private static int[] mang_y = new int[3];

	// Token: 0x04000675 RID: 1653
	private static bool st = false;

	// Token: 0x04000676 RID: 1654
	private static long last = 0L;

	// Token: 0x04000677 RID: 1655
	private static long delay = 150L;
}
using System;

// Token: 0x02000051 RID: 81
public class FireWorkMn
{
	// Token: 0x060003DB RID: 987 RVA: 0x00048884 File Offset: 0x00046A84
	public FireWorkMn(int x, int y, int goc, int n)
	{
		this.x = x;
		this.y = y;
		this.goc = goc;
		this.n = n;
		for (int i = 0; i < n; i++)
		{
			this.fw.addElement(new Firework(x, y, global::Math.abs(this.rd.nextInt() % 8) + 3, i * goc, this.color[global::Math.abs(this.rd.nextInt() % this.color.Length)]));
		}
	}

	// Token: 0x060003DC RID: 988 RVA: 0x00048954 File Offset: 0x00046B54
	public void paint(mGraphics g)
	{
		for (int i = 0; i < this.fw.size(); i++)
		{
			Firework firework = (Firework)this.fw.elementAt(i);
			bool flag = firework.y < -200;
			if (flag)
			{
				this.fw.removeElementAt(i);
			}
			firework.paint(g);
		}
	}

	// Token: 0x04000678 RID: 1656
	private int x;

	// Token: 0x04000679 RID: 1657
	private int y;

	// Token: 0x0400067A RID: 1658
	private int goc = 1;

	// Token: 0x0400067B RID: 1659
	private int n = 360;

	// Token: 0x0400067C RID: 1660
	private MyRandom rd = new MyRandom();

	// Token: 0x0400067D RID: 1661
	private MyVector fw = new MyVector();

	// Token: 0x0400067E RID: 1662
	private int[] color = new int[]
	{
		16711680,
		16776960,
		65280,
		16777215,
		255,
		65535,
		15790320,
		12632256
	};
}
using System;

// Token: 0x02000052 RID: 82
public class Frame
{
	// Token: 0x0400067F RID: 1663
	public int id;

	// Token: 0x04000680 RID: 1664
	public short[] dx;

	// Token: 0x04000681 RID: 1665
	public short[] dy;

	// Token: 0x04000682 RID: 1666
	public sbyte[] idImg;
}
using System;

// Token: 0x02000053 RID: 83
public class FrameImage
{
	// Token: 0x060003DE RID: 990 RVA: 0x000489C4 File Offset: 0x00046BC4
	public FrameImage(int ID)
	{
		this.Id = ID;
		Image image = Effect_End.getImage(ID);
		bool flag = image != null;
		if (flag)
		{
			this.imgFrame = image;
			this.frameWidth = (int)Effect_End.arrInfoEff[ID][0];
			this.frameHeight = (int)(Effect_End.arrInfoEff[ID][1] / Effect_End.arrInfoEff[ID][2]);
			this.nFrame = (int)Effect_End.arrInfoEff[ID][2];
		}
	}

	// Token: 0x060003DF RID: 991 RVA: 0x00048A38 File Offset: 0x00046C38
	public FrameImage(Image img, int width, int height)
	{
		bool flag = img != null;
		if (flag)
		{
			this.imgFrame = img;
			this.frameWidth = width;
			this.frameHeight = height;
			this.nFrame = img.getHeight() / height;
			bool flag2 = this.nFrame < 1;
			if (flag2)
			{
				this.nFrame = 1;
			}
		}
	}

	// Token: 0x060003E0 RID: 992 RVA: 0x00048A98 File Offset: 0x00046C98
	public FrameImage(Image img, int numW, int numH, int numNull)
	{
		bool flag = img != null;
		if (flag)
		{
			this.imgFrame = img;
			this.numWidth = numW;
			this.numHeight = numH;
			this.frameWidth = this.imgFrame.getWidth() / numW;
			this.frameHeight = this.imgFrame.getHeight() / numH;
			this.nFrame = numW * numH - numNull;
		}
	}

	// Token: 0x060003E1 RID: 993 RVA: 0x00048B08 File Offset: 0x00046D08
	public void drawFrame(int idx, int x, int y, int trans, int anchor, mGraphics g)
	{
		try
		{
			bool flag = this.imgFrame != null;
			if (flag)
			{
				bool flag2 = idx > this.nFrame;
				if (flag2)
				{
					idx = this.nFrame;
				}
				int num = idx * this.frameHeight;
				bool flag3 = num > this.frameHeight * (this.nFrame - 1) || num < 0;
				if (flag3)
				{
					num = this.frameHeight * (this.nFrame - 1);
				}
				g.drawRegion(this.imgFrame, 0, num, this.frameWidth, this.frameHeight, trans, x, y, anchor);
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x04000683 RID: 1667
	public int frameWidth;

	// Token: 0x04000684 RID: 1668
	public int frameHeight;

	// Token: 0x04000685 RID: 1669
	public int nFrame;

	// Token: 0x04000686 RID: 1670
	public Image imgFrame;

	// Token: 0x04000687 RID: 1671
	public int Id = -1;

	// Token: 0x04000688 RID: 1672
	public int numWidth;

	// Token: 0x04000689 RID: 1673
	public int numHeight;
}
using System;

// Token: 0x02000054 RID: 84
public class Friend
{
	// Token: 0x060003E2 RID: 994 RVA: 0x00048BB0 File Offset: 0x00046DB0
	public Friend(string friendName, sbyte type)
	{
		this.friendName = friendName;
		this.type = type;
	}

	// Token: 0x060003E3 RID: 995 RVA: 0x00048BC8 File Offset: 0x00046DC8
	public Friend(string friendName)
	{
		this.friendName = friendName;
		this.type = 2;
	}

	// Token: 0x0400068A RID: 1674
	public string friendName;

	// Token: 0x0400068B RID: 1675
	public sbyte type;
}
using System;
using Assets.src.e;
using Assets.src.g;
using UnityEngine;

// Token: 0x02000055 RID: 85
public class GameCanvas : IActionListener
{
	// Token: 0x060003E4 RID: 996 RVA: 0x00048BE0 File Offset: 0x00046DE0
	public GameCanvas()
	{
		int num = Rms.loadRMSInt("languageVersion");
		int num2 = num;
		if (num2 != -1)
		{
			if (num2 != 2)
			{
				Main.main.doClearRMS();
				Rms.saveRMSInt("languageVersion", 2);
			}
		}
		else
		{
			Rms.saveRMSInt("languageVersion", 2);
		}
		GameCanvas.clearOldData = Rms.loadRMSInt(GameMidlet.VERSION);
		bool flag = GameCanvas.clearOldData != 1;
		if (flag)
		{
			Main.main.doClearRMS();
			Rms.saveRMSInt(GameMidlet.VERSION, 1);
		}
		this.initGame();
	}

	// Token: 0x060003E5 RID: 997 RVA: 0x00048CAC File Offset: 0x00046EAC
	public static string getPlatformName()
	{
		return "Pc platform xxx";
	}

	// Token: 0x060003E6 RID: 998 RVA: 0x00048CC4 File Offset: 0x00046EC4
	public void initGame()
	{
		try
		{
			MotherCanvas.instance.setChildCanvas(this);
			GameCanvas.w = MotherCanvas.instance.getWidthz();
			GameCanvas.h = MotherCanvas.instance.getHeightz();
			GameCanvas.hw = GameCanvas.w / 2;
			GameCanvas.hh = GameCanvas.h / 2;
			GameCanvas.isTouch = true;
			bool flag = GameCanvas.w >= 240;
			if (flag)
			{
				GameCanvas.isTouchControl = true;
			}
			bool flag2 = GameCanvas.w < 320;
			if (flag2)
			{
				GameCanvas.isTouchControlSmallScreen = true;
			}
			bool flag3 = GameCanvas.w >= 320;
			if (flag3)
			{
				GameCanvas.isTouchControlLargeScreen = true;
			}
			GameCanvas.msgdlg = new MsgDlg();
			bool flag4 = GameCanvas.h <= 160;
			if (flag4)
			{
				Paint.hTab = 15;
				mScreen.cmdH = 17;
			}
			GameScr.d = ((GameCanvas.w <= GameCanvas.h) ? GameCanvas.h : GameCanvas.w) + 20;
			GameCanvas.instance = this;
			mFont.init();
			mScreen.ITEM_HEIGHT = mFont.tahoma_8b.getHeight() + 8;
			this.initPaint();
			this.loadDust();
			this.loadWaterSplash();
			GameCanvas.panel = new Panel();
			GameCanvas.imgShuriken = GameCanvas.loadImage("/mainImage/myTexture2df.png");
			int num = Rms.loadRMSInt("clienttype");
			bool flag5 = num != -1;
			if (flag5)
			{
				bool flag6 = num > 7;
				if (flag6)
				{
					Rms.saveRMSInt("clienttype", mSystem.clientType);
				}
				else
				{
					mSystem.clientType = num;
				}
			}
			bool flag7 = mSystem.clientType == 7 && (Rms.loadRMSString("fake") == null || Rms.loadRMSString("fake") == string.Empty);
			if (flag7)
			{
				GameCanvas.imgShuriken = GameCanvas.loadImage("/mainImage/wait.png");
			}
			GameCanvas.imgClear = GameCanvas.loadImage("/mainImage/myTexture2der.png");
			GameCanvas.img12 = GameCanvas.loadImage("/mainImage/12+.png");
			GameCanvas.debugUpdate = new MyVector();
			GameCanvas.debugPaint = new MyVector();
			GameCanvas.debugSession = new MyVector();
			for (int i = 0; i < 3; i++)
			{
				GameCanvas.imgBorder[i] = GameCanvas.loadImage("/mainImage/myTexture2dbd" + i.ToString() + ".png");
			}
			GameCanvas.borderConnerW = mGraphics.getImageWidth(GameCanvas.imgBorder[0]);
			GameCanvas.borderConnerH = mGraphics.getImageHeight(GameCanvas.imgBorder[0]);
			GameCanvas.borderCenterW = mGraphics.getImageWidth(GameCanvas.imgBorder[1]);
			GameCanvas.borderCenterH = mGraphics.getImageHeight(GameCanvas.imgBorder[1]);
			Panel.graphics = Rms.loadRMSInt("lowGraphic");
			GameCanvas.lowGraphic = (Rms.loadRMSInt("lowGraphic") == 1);
			GameScr.isPaintChatVip = (Rms.loadRMSInt("serverchat") != 1);
			global::Char.isPaintAura = (Rms.loadRMSInt("isPaintAura") == 1);
			global::Char.isPaintAura2 = (Rms.loadRMSInt("isPaintAura2") == 1);
			Res.init();
			SmallImage.loadBigImage();
			Panel.WIDTH_PANEL = 176;
			bool flag8 = Panel.WIDTH_PANEL > GameCanvas.w;
			if (flag8)
			{
				Panel.WIDTH_PANEL = GameCanvas.w;
			}
			InfoMe.gI().loadCharId();
			Command.btn0left = GameCanvas.loadImage("/mainImage/btn0left.png");
			Command.btn0mid = GameCanvas.loadImage("/mainImage/btn0mid.png");
			Command.btn0right = GameCanvas.loadImage("/mainImage/btn0right.png");
			Command.btn1left = GameCanvas.loadImage("/mainImage/btn1left.png");
			Command.btn1mid = GameCanvas.loadImage("/mainImage/btn1mid.png");
			Command.btn1right = GameCanvas.loadImage("/mainImage/btn1right.png");
			GameCanvas.serverScreen = new ServerListScreen();
			GameCanvas.img12 = GameCanvas.loadImage("/mainImage/12+.png");
			for (int j = 0; j < 7; j++)
			{
				GameCanvas.imgBlue[j] = GameCanvas.loadImage("/effectdata/blue/" + j.ToString() + ".png");
				GameCanvas.imgViolet[j] = GameCanvas.loadImage("/effectdata/violet/" + j.ToString() + ".png");
			}
			ServerListScreen.createDeleteRMS();
			GameCanvas.serverScr = new ServerScr();
			GameCanvas.loginScr = new LoginScr();
			GameCanvas._SelectCharScr = new SelectCharScr();
		}
		catch (Exception)
		{
			Debug.LogError("----------------->>>>>>>>>>errr");
		}
	}

	// Token: 0x060003E7 RID: 999 RVA: 0x00049100 File Offset: 0x00047300
	public static GameCanvas gI()
	{
		return GameCanvas.instance;
	}

	// Token: 0x060003E8 RID: 1000 RVA: 0x00049117 File Offset: 0x00047317
	public void initPaint()
	{
		GameCanvas.paintz = new Paint();
	}

	// Token: 0x060003E9 RID: 1001 RVA: 0x00049124 File Offset: 0x00047324
	public static void closeKeyBoard()
	{
		mGraphics.addYWhenOpenKeyBoard = 0;
		GameCanvas.timeOpenKeyBoard = 0;
		Main.closeKeyBoard();
	}

	// Token: 0x060003EA RID: 1002 RVA: 0x0004913C File Offset: 0x0004733C
	public void update()
	{
		bool flag = GameCanvas.currentScreen == GameCanvas._SelectCharScr;
		if (flag)
		{
			bool flag2 = GameCanvas.gameTick % 2 == 0 && SmallImage.vt_images_watingDowload.size() > 0;
			if (flag2)
			{
				Small small = (Small)SmallImage.vt_images_watingDowload.elementAt(0);
				Service.gI().requestIcon(small.id);
				SmallImage.vt_images_watingDowload.removeElementAt(0);
			}
		}
		else
		{
			bool flag3 = GameCanvas.isRequestMapID == 2 && GameCanvas.waitingTimeChangeMap < mSystem.currentTimeMillis() && GameCanvas.gameTick % 2 == 0 && GameCanvas.currentScreen != null;
			if (flag3)
			{
				bool flag4 = GameCanvas.currentScreen == GameScr.gI();
				if (flag4)
				{
					bool isLoadingMap = global::Char.isLoadingMap;
					if (isLoadingMap)
					{
						global::Char.isLoadingMap = false;
					}
					bool waitToLogin = ServerListScreen.waitToLogin;
					if (waitToLogin)
					{
						ServerListScreen.waitToLogin = false;
					}
				}
				bool flag5 = SmallImage.vt_images_watingDowload.size() > 0;
				if (flag5)
				{
					Small small2 = (Small)SmallImage.vt_images_watingDowload.elementAt(0);
					Service.gI().requestIcon(small2.id);
					SmallImage.vt_images_watingDowload.removeElementAt(0);
				}
				bool flag6 = Effect.dowloadEff.size() <= 0;
				if (flag6)
				{
				}
			}
		}
		bool flag7 = mSystem.currentTimeMillis() > this.timefps;
		if (flag7)
		{
			this.timefps += 1000L;
			GameCanvas.max = GameCanvas.fps;
			GameCanvas.fps = 0;
		}
		GameCanvas.fps++;
		bool flag8 = GameCanvas.messageServer.size() > 0 && GameCanvas.thongBaoTest == null;
		if (flag8)
		{
			GameCanvas.startserverThongBao((string)GameCanvas.messageServer.elementAt(0));
			GameCanvas.messageServer.removeElementAt(0);
		}
		bool flag9 = GameCanvas.gameTick % 5 == 0;
		if (flag9)
		{
			GameCanvas.timeNow = mSystem.currentTimeMillis();
		}
		Res.updateOnScreenDebug();
		try
		{
			bool visible = global::TouchScreenKeyboard.visible;
			if (visible)
			{
				GameCanvas.timeOpenKeyBoard++;
				bool flag10 = GameCanvas.timeOpenKeyBoard > ((!Main.isWindowsPhone) ? 10 : 5);
				if (flag10)
				{
					mGraphics.addYWhenOpenKeyBoard = 94;
				}
			}
			else
			{
				mGraphics.addYWhenOpenKeyBoard = 0;
				GameCanvas.timeOpenKeyBoard = 0;
			}
			GameCanvas.debugUpdate.removeAllElements();
			long num = mSystem.currentTimeMillis();
			bool flag11 = num - GameCanvas.timeTickEff1 >= 780L && !GameCanvas.isEff1;
			if (flag11)
			{
				GameCanvas.timeTickEff1 = num;
				GameCanvas.isEff1 = true;
			}
			else
			{
				GameCanvas.isEff1 = false;
			}
			bool flag12 = num - GameCanvas.timeTickEff2 >= 7800L && !GameCanvas.isEff2;
			if (flag12)
			{
				GameCanvas.timeTickEff2 = num;
				GameCanvas.isEff2 = true;
			}
			else
			{
				GameCanvas.isEff2 = false;
			}
			bool flag13 = GameCanvas.taskTick > 0;
			if (flag13)
			{
				GameCanvas.taskTick--;
			}
			GameCanvas.gameTick++;
			bool flag14 = GameCanvas.gameTick > 10000;
			if (flag14)
			{
				bool flag15 = mSystem.currentTimeMillis() - GameCanvas.lastTimePress > 20000L && GameCanvas.currentScreen == GameCanvas.loginScr;
				if (flag15)
				{
					GameMidlet.instance.exit();
				}
				GameCanvas.gameTick = 0;
			}
			bool flag16 = GameCanvas.currentScreen != null;
			if (flag16)
			{
				bool flag17 = ChatPopup.serverChatPopUp != null;
				if (flag17)
				{
					ChatPopup.serverChatPopUp.update();
					ChatPopup.serverChatPopUp.updateKey();
				}
				else
				{
					bool flag18 = ChatPopup.currChatPopup != null;
					if (flag18)
					{
						ChatPopup.currChatPopup.update();
						ChatPopup.currChatPopup.updateKey();
					}
					else
					{
						bool flag19 = GameCanvas.currentDialog != null;
						if (flag19)
						{
							GameCanvas.debug("B", 0);
							GameCanvas.currentDialog.update();
						}
						else
						{
							bool showMenu = GameCanvas.menu.showMenu;
							if (showMenu)
							{
								GameCanvas.debug("C", 0);
								GameCanvas.menu.updateMenu();
								GameCanvas.debug("D", 0);
								GameCanvas.menu.updateMenuKey();
							}
							else
							{
								bool isShow = GameCanvas.panel.isShow;
								if (isShow)
								{
									GameCanvas.panel.update();
									bool flag20 = GameCanvas.isPointer(GameCanvas.panel.X, GameCanvas.panel.Y, GameCanvas.panel.W, GameCanvas.panel.H);
									if (flag20)
									{
										GameCanvas.isFocusPanel2 = false;
									}
									bool flag21 = GameCanvas.panel2 != null && GameCanvas.panel2.isShow;
									if (flag21)
									{
										GameCanvas.panel2.update();
										bool flag22 = GameCanvas.isPointer(GameCanvas.panel2.X, GameCanvas.panel2.Y, GameCanvas.panel2.W, GameCanvas.panel2.H);
										if (flag22)
										{
											GameCanvas.isFocusPanel2 = true;
										}
									}
									bool flag23 = GameCanvas.panel2 != null;
									if (flag23)
									{
										bool flag24 = GameCanvas.isFocusPanel2;
										if (flag24)
										{
											GameCanvas.panel2.updateKey();
										}
										else
										{
											GameCanvas.panel.updateKey();
										}
									}
									else
									{
										GameCanvas.panel.updateKey();
									}
									bool flag25 = GameCanvas.panel.chatTField != null && GameCanvas.panel.chatTField.isShow;
									if (flag25)
									{
										GameCanvas.panel.chatTFUpdateKey();
									}
									else
									{
										bool flag26 = GameCanvas.panel2 != null && GameCanvas.panel2.chatTField != null && GameCanvas.panel2.chatTField.isShow;
										if (flag26)
										{
											GameCanvas.panel2.chatTFUpdateKey();
										}
										else
										{
											bool flag27 = (GameCanvas.isPointer(GameCanvas.panel.X, GameCanvas.panel.Y, GameCanvas.panel.W, GameCanvas.panel.H) && GameCanvas.panel2 != null) || GameCanvas.panel2 == null;
											if (flag27)
											{
												GameCanvas.panel.updateKey();
											}
											else
											{
												bool flag28 = GameCanvas.panel2 != null && GameCanvas.panel2.isShow && GameCanvas.isPointer(GameCanvas.panel2.X, GameCanvas.panel2.Y, GameCanvas.panel2.W, GameCanvas.panel2.H);
												if (flag28)
												{
													GameCanvas.panel2.updateKey();
												}
											}
										}
									}
									bool flag29 = GameCanvas.isPointer(GameCanvas.panel.X + GameCanvas.panel.W, GameCanvas.panel.Y, GameCanvas.w - GameCanvas.panel.W * 2, GameCanvas.panel.H) && GameCanvas.isPointerJustRelease && GameCanvas.panel.isDoneCombine;
									if (flag29)
									{
										GameCanvas.panel.hide();
									}
								}
							}
						}
					}
				}
				GameCanvas.debug("E", 0);
				bool flag30 = !GameCanvas.isLoading;
				if (flag30)
				{
					GameCanvas.currentScreen.update();
				}
				GameCanvas.debug("F", 0);
				bool flag31 = !GameCanvas.panel.isShow && ChatPopup.serverChatPopUp == null;
				if (flag31)
				{
					GameCanvas.currentScreen.updateKey();
				}
				Hint.update();
				SoundMn.gI().update();
			}
			GameCanvas.debug("Ix", 0);
			Timer.update();
			GameCanvas.debug("Hx", 0);
			InfoDlg.update();
			GameCanvas.debug("G", 0);
			bool flag32 = this.resetToLoginScr;
			if (flag32)
			{
				this.resetToLoginScr = false;
				this.doResetToLoginScr(GameCanvas.loginScr);
			}
			GameCanvas.debug("Zzz", 0);
			bool flag33 = (GameCanvas.currentScreen != GameCanvas.serverScr || !GameCanvas.serverScr.isPaintNewUi) && Controller.isConnectOK;
			if (flag33)
			{
				bool isMain = Controller.isMain;
				if (isMain)
				{
					ServerListScreen.testConnect = 2;
					Service.gI().setClientType();
					Service.gI().androidPack();
				}
				else
				{
					Service.gI().setClientType2();
					Service.gI().androidPack2();
				}
				Controller.isConnectOK = false;
			}
			bool isDisconnected = Controller.isDisconnected;
			if (isDisconnected)
			{
				bool flag34 = !Controller.isMain;
				if (flag34)
				{
					bool flag35 = GameCanvas.currentScreen == GameCanvas.serverScreen && !Service.reciveFromMainSession;
					if (flag35)
					{
						GameCanvas.serverScreen.cancel();
					}
					bool flag36 = GameCanvas.currentScreen == GameCanvas.loginScr && !Service.reciveFromMainSession;
					if (flag36)
					{
						this.onDisconnected();
					}
				}
				else
				{
					this.onDisconnected();
				}
				Controller.isDisconnected = false;
			}
			bool isConnectionFail = Controller.isConnectionFail;
			if (isConnectionFail)
			{
				bool flag37 = !Controller.isMain;
				if (flag37)
				{
					bool flag38 = GameCanvas.currentScreen == GameCanvas.serverScreen && ServerListScreen.isGetData && !Service.reciveFromMainSession;
					if (flag38)
					{
						ServerListScreen.testConnect = 0;
						GameCanvas.serverScreen.cancel();
						Debug.Log("connect fail 1");
					}
					bool flag39 = GameCanvas.currentScreen == GameCanvas.loginScr && !Service.reciveFromMainSession;
					if (flag39)
					{
						this.onConnectionFail();
						Debug.Log("connect fail 2");
					}
				}
				else
				{
					bool flag40 = Session_ME.gI().isCompareIPConnect();
					if (flag40)
					{
						this.onConnectionFail();
					}
					Debug.Log("connect fail 3");
				}
				Controller.isConnectionFail = false;
			}
			bool flag41 = Main.isResume;
			if (flag41)
			{
				Main.isResume = false;
				bool flag42 = GameCanvas.currentDialog != null && GameCanvas.currentDialog.left != null && GameCanvas.currentDialog.left.actionListener != null;
				if (flag42)
				{
					GameCanvas.currentDialog.left.performAction();
				}
			}
			bool flag43 = GameCanvas.currentScreen != null && GameCanvas.currentScreen is GameScr;
			if (flag43)
			{
				GameCanvas.xThongBaoTranslate += GameCanvas.dir_ * 2;
				bool flag44 = GameCanvas.xThongBaoTranslate - Panel.imgNew.getWidth() <= 60;
				if (flag44)
				{
					GameCanvas.dir_ = 0;
					this.tickWaitThongBao++;
					bool flag45 = this.tickWaitThongBao > 150;
					if (flag45)
					{
						this.tickWaitThongBao = 0;
						GameCanvas.thongBaoTest = null;
					}
				}
			}
			bool flag46 = GameCanvas.currentScreen != null && GameCanvas.currentScreen.Equals(GameScr.gI());
			if (flag46)
			{
				bool flag47 = GameScr.info1 != null;
				if (flag47)
				{
					GameScr.info1.update();
				}
				bool flag48 = GameScr.info2 != null;
				if (flag48)
				{
					GameScr.info2.update();
				}
			}
			GameCanvas.isPointerSelect = false;
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060003EB RID: 1003 RVA: 0x00049BA4 File Offset: 0x00047DA4
	public void onDisconnected()
	{
		bool isConnectionFail = Controller.isConnectionFail;
		if (isConnectionFail)
		{
			Controller.isConnectionFail = false;
		}
		GameCanvas.isResume = true;
		Session_ME.gI().clearSendingMessage();
		Session_ME2.gI().clearSendingMessage();
		Session_ME.gI().close();
		Session_ME2.gI().close();
		bool isLoadingData = Controller.isLoadingData;
		if (isLoadingData)
		{
			GameCanvas.startOK(mResources.pls_restart_game_error, 8885, null);
			Controller.isDisconnected = false;
		}
		else
		{
			Debug.LogError(">>>>onDisconnected");
			bool flag = GameCanvas.currentScreen != GameCanvas.serverScreen;
			if (flag)
			{
				GameCanvas.serverScreen.switchToMe();
				GameCanvas.startOK(mResources.maychutathoacmatsong + " [4]", 8884, null);
				Main.exit();
			}
			else
			{
				GameCanvas.endDlg();
			}
			global::Char.isLoadingMap = false;
			bool isMain = Controller.isMain;
			if (isMain)
			{
				ServerListScreen.testConnect = 0;
			}
			mSystem.endKey();
		}
	}

	// Token: 0x060003EC RID: 1004 RVA: 0x00049C8C File Offset: 0x00047E8C
	public void onConnectionFail()
	{
		bool flag = GameCanvas.currentScreen.Equals(SplashScr.instance);
		if (flag)
		{
			GameCanvas.startOK(mResources.maychutathoacmatsong + " [1]", 8884, null);
		}
		else
		{
			Session_ME.gI().clearSendingMessage();
			Session_ME2.gI().clearSendingMessage();
			ServerListScreen.isWait = false;
			bool isLoadingData = Controller.isLoadingData;
			if (isLoadingData)
			{
				GameCanvas.startOK(mResources.maychutathoacmatsong + " [2]", 8884, null);
				Controller.isConnectionFail = false;
			}
			else
			{
				GameCanvas.isResume = true;
				LoginScr.isContinueToLogin = false;
				LoginScr.serverName = ServerListScreen.nameServer[ServerListScreen.ipSelect];
				bool flag2 = GameCanvas.currentScreen != GameCanvas.serverScreen;
				if (flag2)
				{
					ServerListScreen.countDieConnect = 0;
				}
				else
				{
					GameCanvas.endDlg();
					ServerListScreen.loadScreen = true;
					GameCanvas.serverScreen.switchToMe();
				}
				global::Char.isLoadingMap = false;
				bool isMain = Controller.isMain;
				if (isMain)
				{
					ServerListScreen.testConnect = 0;
				}
				mSystem.endKey();
			}
		}
	}

	// Token: 0x060003ED RID: 1005 RVA: 0x00049D88 File Offset: 0x00047F88
	public static bool isWaiting()
	{
		return InfoDlg.isShow || (GameCanvas.msgdlg != null && GameCanvas.msgdlg.info.Equals(mResources.PLEASEWAIT)) || global::Char.isLoadingMap || LoginScr.isContinueToLogin;
	}

	// Token: 0x060003EE RID: 1006 RVA: 0x00049DD8 File Offset: 0x00047FD8
	public static void connect()
	{
		bool flag = !Session_ME.gI().isConnected();
		if (flag)
		{
			Session_ME.gI().connect(GameMidlet.IP, GameMidlet.PORT);
		}
	}

	// Token: 0x060003EF RID: 1007 RVA: 0x00049E10 File Offset: 0x00048010
	public static void connect2()
	{
		bool flag = !Session_ME2.gI().isConnected();
		if (flag)
		{
			Res.outz("IP2= " + GameMidlet.IP2 + " PORT 2= " + GameMidlet.PORT2.ToString());
			Session_ME2.gI().connect(GameMidlet.IP2, GameMidlet.PORT2);
		}
	}

	// Token: 0x060003F0 RID: 1008 RVA: 0x00049E6A File Offset: 0x0004806A
	public static void resetTrans(mGraphics g)
	{
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
	}

	// Token: 0x060003F1 RID: 1009 RVA: 0x00049E98 File Offset: 0x00048098
	public static void resetTransGameScr(mGraphics g)
	{
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		g.translate(0, 0);
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
		g.translate(-GameScr.cmx, -GameScr.cmy);
	}

	// Token: 0x060003F2 RID: 1010 RVA: 0x00049EEC File Offset: 0x000480EC
	public void initGameCanvas()
	{
		GameCanvas.debug("SP2i1", 0);
		GameCanvas.w = MotherCanvas.instance.getWidthz();
		GameCanvas.h = MotherCanvas.instance.getHeightz();
		GameCanvas.debug("SP2i2", 0);
		GameCanvas.hw = GameCanvas.w / 2;
		GameCanvas.hh = GameCanvas.h / 2;
		GameCanvas.wd3 = GameCanvas.w / 3;
		GameCanvas.hd3 = GameCanvas.h / 3;
		GameCanvas.w2d3 = 2 * GameCanvas.w / 3;
		GameCanvas.h2d3 = 2 * GameCanvas.h / 3;
		GameCanvas.w3d4 = 3 * GameCanvas.w / 4;
		GameCanvas.h3d4 = 3 * GameCanvas.h / 4;
		GameCanvas.wd6 = GameCanvas.w / 6;
		GameCanvas.hd6 = GameCanvas.h / 6;
		GameCanvas.debug("SP2i3", 0);
		mScreen.initPos();
		GameCanvas.debug("SP2i4", 0);
		GameCanvas.debug("SP2i5", 0);
		GameCanvas.inputDlg = new InputDlg();
		GameCanvas.debug("SP2i6", 0);
		GameCanvas.listPoint = new MyVector();
		GameCanvas.debug("SP2i7", 0);
	}

	// Token: 0x060003F3 RID: 1011 RVA: 0x0004A006 File Offset: 0x00048206
	public void start()
	{
	}

	// Token: 0x060003F4 RID: 1012 RVA: 0x0004A00C File Offset: 0x0004820C
	public int getWidth()
	{
		return (int)ScaleGUI.WIDTH;
	}

	// Token: 0x060003F5 RID: 1013 RVA: 0x0004A024 File Offset: 0x00048224
	public int getHeight()
	{
		return (int)ScaleGUI.HEIGHT;
	}

	// Token: 0x060003F6 RID: 1014 RVA: 0x0004A03C File Offset: 0x0004823C
	public static void debug(string s, int type)
	{
	}

	// Token: 0x060003F7 RID: 1015 RVA: 0x0004A040 File Offset: 0x00048240
	public void doResetToLoginScr(mScreen screen)
	{
		try
		{
			SoundMn.gI().stopAll();
			LoginScr.isContinueToLogin = false;
			TileMap.lastType = (TileMap.bgType = 0);
			global::Char.clearMyChar();
			GameScr.clearGameScr();
			GameScr.resetAllvector();
			InfoDlg.hide();
			GameScr.info1.hide();
			GameScr.info2.hide();
			GameScr.info2.cmdChat = null;
			Hint.isShow = false;
			ChatPopup.currChatPopup = null;
			Controller.isStopReadMessage = false;
			GameScr.loadCamera(true, -1, -1);
			GameScr.cmx = 100;
			GameCanvas.panel.currentTabIndex = 0;
			GameCanvas.panel.selected = (GameCanvas.isTouch ? -1 : 0);
			GameCanvas.panel.init();
			GameCanvas.panel2 = null;
			GameScr.isPaint = true;
			ClanMessage.vMessage.removeAllElements();
			GameScr.textTime.removeAllElements();
			GameScr.vClan.removeAllElements();
			GameScr.vFriend.removeAllElements();
			GameScr.vEnemies.removeAllElements();
			TileMap.vCurrItem.removeAllElements();
			BackgroudEffect.vBgEffect.removeAllElements();
			EffecMn.vEff.removeAllElements();
			Effect.newEff.removeAllElements();
			GameCanvas.menu.showMenu = false;
			GameCanvas.panel.vItemCombine.removeAllElements();
			GameCanvas.panel.isShow = false;
			bool flag = GameCanvas.panel.tabIcon != null;
			if (flag)
			{
				GameCanvas.panel.tabIcon.isShow = false;
			}
			bool flag2 = mGraphics.zoomLevel == 1;
			if (flag2)
			{
				SmallImage.clearHastable();
			}
			Session_ME.gI().close();
			Session_ME2.gI().close();
		}
		catch (Exception ex)
		{
			Cout.println("Loi tai doResetToLoginScr " + ex.ToString());
		}
		ServerListScreen.isAutoConect = true;
		ServerListScreen.countDieConnect = 0;
		ServerListScreen.testConnect = -1;
		ServerListScreen.loadScreen = true;
		bool flag3 = ServerListScreen.ipSelect == -1;
		if (flag3)
		{
			GameCanvas.serverScr.switchToMe();
		}
		else
		{
			bool flag4 = GameCanvas.serverScreen == null;
			if (flag4)
			{
				GameCanvas.serverScreen = new ServerListScreen();
			}
			GameCanvas.serverScreen.switchToMe();
		}
	}

	// Token: 0x060003F8 RID: 1016 RVA: 0x0004A268 File Offset: 0x00048468
	public static void showErrorForm(int type, string moreInfo)
	{
	}

	// Token: 0x060003F9 RID: 1017 RVA: 0x0004A26B File Offset: 0x0004846B
	public static void paintCloud(mGraphics g)
	{
	}

	// Token: 0x060003FA RID: 1018 RVA: 0x0004A26E File Offset: 0x0004846E
	public static void updateBG()
	{
	}

	// Token: 0x060003FB RID: 1019 RVA: 0x0004A274 File Offset: 0x00048474
	public static void fillRect(mGraphics g, int color, int x, int y, int w, int h, int detalY)
	{
		g.setColor(color);
		int cmy = GameScr.cmy;
		bool flag = cmy > GameCanvas.h;
		if (flag)
		{
			cmy = GameCanvas.h;
		}
		g.fillRect(x, y - ((detalY != 0) ? (cmy >> detalY) : 0), w, h + ((detalY != 0) ? (cmy >> detalY) : 0));
	}

	// Token: 0x060003FC RID: 1020 RVA: 0x0004A2D0 File Offset: 0x000484D0
	public static void paintBackgroundtLayer(mGraphics g, int layer, int deltaY, int color1, int color2)
	{
		try
		{
			int num = layer - 1;
			bool flag = num == GameCanvas.imgBG.Length - 1 && (GameScr.gI().isRongThanXuatHien || GameScr.gI().isFireWorks);
			if (flag)
			{
				g.setColor(GameScr.gI().mautroi);
				g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
				bool flag2 = GameCanvas.typeBg == 2 || GameCanvas.typeBg == 4 || GameCanvas.typeBg == 7;
				if (flag2)
				{
					GameCanvas.drawSun1(g);
					GameCanvas.drawSun2(g);
				}
				bool flag3 = GameScr.gI().isFireWorks && !GameCanvas.lowGraphic;
				if (flag3)
				{
					FireWorkEff.paint(g);
				}
			}
			else
			{
				bool flag4 = GameCanvas.imgBG == null || GameCanvas.imgBG[num] == null;
				if (!flag4)
				{
					bool flag5 = GameCanvas.moveX[num] != 0;
					if (flag5)
					{
						GameCanvas.moveX[num] += GameCanvas.moveXSpeed[num];
					}
					int cmy = GameScr.cmy;
					bool flag6 = cmy > GameCanvas.h;
					if (flag6)
					{
						cmy = GameCanvas.h;
					}
					bool flag7 = GameCanvas.layerSpeed[num] != 0;
					if (flag7)
					{
						for (int i = -((GameScr.cmx + GameCanvas.moveX[num] >> GameCanvas.layerSpeed[num]) % GameCanvas.bgW[num]); i < GameScr.gW; i += GameCanvas.bgW[num])
						{
							g.drawImage(GameCanvas.imgBG[num], i, GameCanvas.yb[num] - ((deltaY > 0) ? (cmy >> deltaY) : 0), 0);
						}
					}
					else
					{
						for (int j = 0; j < GameScr.gW; j += GameCanvas.bgW[num])
						{
							g.drawImage(GameCanvas.imgBG[num], j, GameCanvas.yb[num] - ((deltaY > 0) ? (cmy >> deltaY) : 0), 0);
						}
					}
					bool flag8 = color1 != -1;
					if (flag8)
					{
						bool flag9 = num == GameCanvas.nBg - 1;
						if (flag9)
						{
							GameCanvas.fillRect(g, color1, 0, -(cmy >> deltaY), GameScr.gW, GameCanvas.yb[num], deltaY);
						}
						else
						{
							GameCanvas.fillRect(g, color1, 0, GameCanvas.yb[num - 1] + GameCanvas.bgH[num - 1], GameScr.gW, GameCanvas.yb[num] - (GameCanvas.yb[num - 1] + GameCanvas.bgH[num - 1]), deltaY);
						}
					}
					bool flag10 = color2 != -1;
					if (flag10)
					{
						bool flag11 = num == 0;
						if (flag11)
						{
							GameCanvas.fillRect(g, color2, 0, GameCanvas.yb[num] + GameCanvas.bgH[num], GameScr.gW, GameScr.gH - (GameCanvas.yb[num] + GameCanvas.bgH[num]), deltaY);
						}
						else
						{
							GameCanvas.fillRect(g, color2, 0, GameCanvas.yb[num] + GameCanvas.bgH[num], GameScr.gW, GameCanvas.yb[num - 1] - (GameCanvas.yb[num] + GameCanvas.bgH[num]) + 80, deltaY);
						}
					}
					bool flag12 = GameCanvas.currentScreen == GameScr.instance;
					if (flag12)
					{
						bool flag13 = layer == 1 && GameCanvas.typeBg == 11;
						if (flag13)
						{
							g.drawImage(GameCanvas.imgSun2, -(GameScr.cmx >> GameCanvas.layerSpeed[0]) + 400, GameCanvas.yb[0] + 30 - (cmy >> 2), StaticObj.BOTTOM_HCENTER);
						}
						bool flag14 = layer == 1 && GameCanvas.typeBg == 13;
						if (flag14)
						{
							g.drawImage(GameCanvas.imgBG[1], -(GameScr.cmx >> GameCanvas.layerSpeed[0]) + TileMap.tmw * 24 / 4, GameCanvas.yb[0] - (cmy >> 3) + 30, 0);
							g.drawRegion(GameCanvas.imgBG[1], 0, 0, GameCanvas.bgW[1], GameCanvas.bgH[1], 2, -(GameScr.cmx >> GameCanvas.layerSpeed[0]) + TileMap.tmw * 24 / 4 + GameCanvas.bgW[1], GameCanvas.yb[0] - (cmy >> 3) + 30, 0);
						}
						bool flag15 = layer == 3 && TileMap.mapID == 1;
						if (flag15)
						{
							for (int k = 0; k < TileMap.pxh / mGraphics.getImageHeight(GameCanvas.imgCaycot); k++)
							{
								g.drawImage(GameCanvas.imgCaycot, -(GameScr.cmx >> GameCanvas.layerSpeed[2]) + 300, k * mGraphics.getImageHeight(GameCanvas.imgCaycot) - (cmy >> 3), 0);
							}
						}
					}
					int x = -(GameScr.cmx + GameCanvas.moveX[num] >> GameCanvas.layerSpeed[num]);
					EffecMn.paintBackGroundUnderLayer(g, x, GameCanvas.yb[num] + GameCanvas.bgH[num] - (cmy >> deltaY), num);
				}
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("Loi ham paint bground: " + ex.ToString());
		}
	}

	// Token: 0x060003FD RID: 1021 RVA: 0x0004A7CC File Offset: 0x000489CC
	public static void drawSun1(mGraphics g)
	{
		bool flag = GameCanvas.imgSun != null;
		if (flag)
		{
			g.drawImage(GameCanvas.imgSun, GameCanvas.sunX, GameCanvas.sunY, 0);
		}
		bool flag2 = !GameCanvas.isBoltEff;
		if (!flag2)
		{
			bool flag3 = GameCanvas.gameTick % 200 == 0;
			if (flag3)
			{
				GameCanvas.boltActive = true;
			}
			bool flag4 = GameCanvas.boltActive;
			if (flag4)
			{
				GameCanvas.tBolt++;
				bool flag5 = GameCanvas.tBolt == 10;
				if (flag5)
				{
					GameCanvas.tBolt = 0;
					GameCanvas.boltActive = false;
				}
				bool flag6 = GameCanvas.tBolt % 2 == 0;
				if (flag6)
				{
					g.setColor(16777215);
					g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
				}
			}
		}
	}

	// Token: 0x060003FE RID: 1022 RVA: 0x0004A890 File Offset: 0x00048A90
	public static void drawSun2(mGraphics g)
	{
		bool flag = GameCanvas.imgSun2 != null;
		if (flag)
		{
			g.drawImage(GameCanvas.imgSun2, GameCanvas.sunX2, GameCanvas.sunY2, 0);
		}
	}

	// Token: 0x060003FF RID: 1023 RVA: 0x0004A8C4 File Offset: 0x00048AC4
	public static bool isHDVersion()
	{
		return mGraphics.zoomLevel > 1;
	}

	// Token: 0x06000400 RID: 1024 RVA: 0x0004A8E8 File Offset: 0x00048AE8
	public static void paint_ios_bg(mGraphics g)
	{
		bool flag = mSystem.clientType != 5;
		if (!flag)
		{
			bool flag2 = GameCanvas.imgBgIOS != null;
			if (flag2)
			{
				g.setColor(0);
				g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
				for (int i = 0; i < 3; i++)
				{
					g.drawImage(GameCanvas.imgBgIOS, GameCanvas.imgBgIOS.getWidth() * i, GameCanvas.h / 2, mGraphics.VCENTER | mGraphics.HCENTER);
				}
			}
			else
			{
				GameCanvas.imgBgIOS = mSystem.loadImage("/bg/bg_ios_" + ((TileMap.bgID % 2 != 0) ? 1 : 2).ToString() + ".png");
			}
		}
	}

	// Token: 0x06000401 RID: 1025 RVA: 0x0004A9A4 File Offset: 0x00048BA4
	public static void paintBGGameScr(mGraphics g)
	{
		bool flag = !GameCanvas.isLoadBGok;
		if (flag)
		{
			g.setColor(0);
			g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
		}
		bool isLoadingMap = global::Char.isLoadingMap;
		if (!isLoadingMap)
		{
			int gW = GameScr.gW;
			int gH = GameScr.gH;
			g.translate(-g.getTranslateX(), -g.getTranslateY());
			g.setColor(8421504);
			g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
		}
	}

	// Token: 0x06000402 RID: 1026 RVA: 0x0004AA29 File Offset: 0x00048C29
	public static void resetBg()
	{
	}

	// Token: 0x06000403 RID: 1027 RVA: 0x0004AA2C File Offset: 0x00048C2C
	public static void getYBackground(int typeBg)
	{
		try
		{
			int gH = GameScr.gH23;
			switch (typeBg)
			{
			case 0:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 70;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] + 20;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] + 30;
				GameCanvas.yb[3] = GameCanvas.yb[2] - GameCanvas.bgH[3] + 50;
				goto IL_688;
			case 1:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 120;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] + 40;
				GameCanvas.yb[2] = GameCanvas.yb[1] - 90;
				GameCanvas.yb[3] = GameCanvas.yb[2] - 25;
				goto IL_688;
			case 2:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 150;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] - 60;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] - 40;
				GameCanvas.yb[3] = GameCanvas.yb[2] - GameCanvas.bgH[3] - 10;
				GameCanvas.yb[4] = GameCanvas.yb[3] - GameCanvas.bgH[4];
				goto IL_688;
			case 3:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 10;
				GameCanvas.yb[1] = GameCanvas.yb[0] + 80;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] - 10;
				goto IL_688;
			case 4:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 130;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1];
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] - 20;
				GameCanvas.yb[3] = GameCanvas.yb[1] - GameCanvas.bgH[2] - 80;
				goto IL_688;
			case 5:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 40;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] + 10;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] + 15;
				GameCanvas.yb[3] = GameCanvas.yb[2] - GameCanvas.bgH[3] + 50;
				goto IL_688;
			case 6:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 100;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] - 30;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] + 10;
				GameCanvas.yb[3] = GameCanvas.yb[2] - GameCanvas.bgH[3] + 15;
				GameCanvas.yb[4] = GameCanvas.yb[3] - GameCanvas.bgH[4] + 15;
				goto IL_688;
			case 7:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 20;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] + 15;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] + 20;
				GameCanvas.yb[3] = GameCanvas.yb[1] - GameCanvas.bgH[2] - 10;
				goto IL_688;
			case 8:
			{
				GameCanvas.yb[0] = gH - 103 + 150;
				bool flag = TileMap.mapID == 103;
				if (flag)
				{
					GameCanvas.yb[0] -= 100;
				}
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] - 10;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] + 40;
				GameCanvas.yb[3] = GameCanvas.yb[2] - GameCanvas.bgH[3] + 10;
				goto IL_688;
			}
			case 9:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 100;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] + 22;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] + 50;
				GameCanvas.yb[3] = GameCanvas.yb[2] - GameCanvas.bgH[3];
				goto IL_688;
			case 10:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] - 45;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] - 10;
				goto IL_688;
			case 11:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 60;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] + 5;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] - 15;
				goto IL_688;
			case 12:
				GameCanvas.yb[0] = gH + 40;
				GameCanvas.yb[1] = GameCanvas.yb[0] - 40;
				GameCanvas.yb[2] = GameCanvas.yb[1] - 40;
				goto IL_688;
			case 13:
				GameCanvas.yb[0] = gH - 80;
				GameCanvas.yb[1] = GameCanvas.yb[0];
				goto IL_688;
			case 15:
				GameCanvas.yb[0] = gH - 20;
				GameCanvas.yb[1] = GameCanvas.yb[0] - 80;
				goto IL_688;
			case 16:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 75;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] + 50;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] + 50;
				GameCanvas.yb[3] = GameCanvas.yb[2] - GameCanvas.bgH[3] + 90;
				goto IL_688;
			case 19:
				GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 150;
				GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] - 60;
				GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] - 40;
				GameCanvas.yb[3] = GameCanvas.yb[2] - GameCanvas.bgH[3] - 10;
				GameCanvas.yb[4] = GameCanvas.yb[3] - GameCanvas.bgH[4];
				goto IL_688;
			}
			GameCanvas.yb[0] = gH - GameCanvas.bgH[0] + 75;
			GameCanvas.yb[1] = GameCanvas.yb[0] - GameCanvas.bgH[1] + 50;
			GameCanvas.yb[2] = GameCanvas.yb[1] - GameCanvas.bgH[2] + 50;
			GameCanvas.yb[3] = GameCanvas.yb[2] - GameCanvas.bgH[3] + 90;
			IL_688:;
		}
		catch (Exception)
		{
			int gH2 = GameScr.gH23;
			for (int i = 0; i < GameCanvas.yb.Length; i++)
			{
				GameCanvas.yb[i] = 1;
			}
		}
	}

	// Token: 0x06000404 RID: 1028 RVA: 0x0004B114 File Offset: 0x00049314
	public static void loadBG(int typeBG)
	{
		try
		{
			GameCanvas.isLoadBGok = true;
			bool flag = GameCanvas.typeBg == 12;
			if (flag)
			{
				BackgroudEffect.yfog = TileMap.pxh - 100;
			}
			else
			{
				BackgroudEffect.yfog = TileMap.pxh - 160;
			}
			BackgroudEffect.clearImage();
			GameCanvas.randomRaintEff(typeBG);
			bool flag2 = (TileMap.lastBgID == typeBG && TileMap.lastType == TileMap.bgType) || typeBG == -1;
			if (!flag2)
			{
				GameCanvas.transY = 12;
				TileMap.lastBgID = (int)((sbyte)typeBG);
				TileMap.lastType = (int)((sbyte)TileMap.bgType);
				GameCanvas.layerSpeed = new int[]
				{
					1,
					2,
					3,
					7,
					8
				};
				GameCanvas.moveX = new int[5];
				GameCanvas.moveXSpeed = new int[5];
				GameCanvas.typeBg = typeBG;
				GameCanvas.isBoltEff = false;
				GameScr.firstY = GameScr.cmy;
				GameCanvas.imgBG = null;
				GameCanvas.imgCloud = null;
				GameCanvas.imgSun = null;
				GameCanvas.imgCaycot = null;
				GameScr.firstY = -1;
				switch (GameCanvas.typeBg)
				{
				case 0:
				{
					GameCanvas.imgCaycot = GameCanvas.loadImageRMS("/bg/caycot.png");
					GameCanvas.layerSpeed = new int[]
					{
						1,
						3,
						5,
						7
					};
					GameCanvas.nBg = 4;
					bool flag3 = TileMap.bgType == 2;
					if (flag3)
					{
						GameCanvas.transY = 8;
					}
					goto IL_33E;
				}
				case 1:
					GameCanvas.transY = 7;
					GameCanvas.nBg = 4;
					goto IL_33E;
				case 2:
				{
					int[] array = new int[5];
					array[2] = 1;
					GameCanvas.moveX = array;
					int[] array2 = new int[5];
					array2[2] = 2;
					GameCanvas.moveXSpeed = array2;
					GameCanvas.nBg = 5;
					goto IL_33E;
				}
				case 3:
					GameCanvas.nBg = 3;
					goto IL_33E;
				case 4:
				{
					BackgroudEffect.addEffect(3);
					int[] array3 = new int[5];
					array3[1] = 1;
					GameCanvas.moveX = array3;
					int[] array4 = new int[5];
					array4[1] = 1;
					GameCanvas.moveXSpeed = array4;
					GameCanvas.nBg = 4;
					goto IL_33E;
				}
				case 5:
					GameCanvas.nBg = 4;
					goto IL_33E;
				case 6:
				{
					int[] array5 = new int[5];
					array5[0] = 1;
					GameCanvas.moveX = array5;
					int[] array6 = new int[5];
					array6[0] = 2;
					GameCanvas.moveXSpeed = array6;
					GameCanvas.nBg = 5;
					goto IL_33E;
				}
				case 7:
					GameCanvas.nBg = 4;
					goto IL_33E;
				case 8:
					GameCanvas.transY = 8;
					GameCanvas.nBg = 4;
					goto IL_33E;
				case 9:
					BackgroudEffect.addEffect(9);
					GameCanvas.nBg = 4;
					goto IL_33E;
				case 10:
					GameCanvas.nBg = 2;
					goto IL_33E;
				case 11:
					GameCanvas.transY = 7;
					GameCanvas.layerSpeed[2] = 0;
					GameCanvas.nBg = 3;
					goto IL_33E;
				case 12:
				{
					int[] array7 = new int[5];
					array7[0] = 1;
					array7[1] = 1;
					GameCanvas.moveX = array7;
					int[] array8 = new int[5];
					array8[0] = 2;
					array8[1] = 1;
					GameCanvas.moveXSpeed = array8;
					GameCanvas.nBg = 3;
					goto IL_33E;
				}
				case 13:
					GameCanvas.nBg = 2;
					goto IL_33E;
				case 15:
					Res.outz("HELL");
					GameCanvas.nBg = 2;
					goto IL_33E;
				case 16:
					GameCanvas.layerSpeed = new int[]
					{
						1,
						3,
						5,
						7
					};
					GameCanvas.nBg = 4;
					goto IL_33E;
				case 19:
				{
					int[] array9 = new int[5];
					array9[1] = 2;
					array9[2] = 1;
					GameCanvas.moveX = array9;
					int[] array10 = new int[5];
					array10[1] = 2;
					array10[2] = 1;
					GameCanvas.moveXSpeed = array10;
					GameCanvas.nBg = 5;
					goto IL_33E;
				}
				}
				GameCanvas.layerSpeed = new int[]
				{
					1,
					3,
					5,
					7
				};
				GameCanvas.nBg = 4;
				IL_33E:
				bool flag4 = typeBG <= 16;
				if (flag4)
				{
					GameCanvas.skyColor = StaticObj.SKYCOLOR[GameCanvas.typeBg];
				}
				else
				{
					try
					{
						string path = "/bg/b" + GameCanvas.typeBg.ToString() + 3.ToString() + ".png";
						bool flag5 = TileMap.bgType != 0;
						if (flag5)
						{
							path = string.Concat(new string[]
							{
								"/bg/b",
								GameCanvas.typeBg.ToString(),
								3.ToString(),
								"-",
								TileMap.bgType.ToString(),
								".png"
							});
						}
						int[] array11 = new int[1];
						Image image = GameCanvas.loadImageRMS(path);
						image.getRGB(ref array11, 0, 1, mGraphics.getRealImageWidth(image) / 2, 0, 1, 1);
						GameCanvas.skyColor = array11[0];
					}
					catch (Exception)
					{
						GameCanvas.skyColor = StaticObj.SKYCOLOR[StaticObj.SKYCOLOR.Length - 1];
					}
				}
				GameCanvas.colorTop = new int[StaticObj.SKYCOLOR.Length];
				GameCanvas.colorBotton = new int[StaticObj.SKYCOLOR.Length];
				for (int i = 0; i < StaticObj.SKYCOLOR.Length; i++)
				{
					GameCanvas.colorTop[i] = StaticObj.SKYCOLOR[i];
					GameCanvas.colorBotton[i] = StaticObj.SKYCOLOR[i];
				}
				bool flag6 = GameCanvas.lowGraphic;
				if (flag6)
				{
					GameCanvas.tam = GameCanvas.loadImageRMS("/bg/b63.png");
				}
				else
				{
					GameCanvas.imgBG = new Image[GameCanvas.nBg];
					GameCanvas.bgW = new int[GameCanvas.nBg];
					GameCanvas.bgH = new int[GameCanvas.nBg];
					GameCanvas.colorBotton = new int[GameCanvas.nBg];
					GameCanvas.colorTop = new int[GameCanvas.nBg];
					bool flag7 = TileMap.bgType == 100;
					if (flag7)
					{
						GameCanvas.imgBG[0] = GameCanvas.loadImageRMS("/bg/b100.png");
						GameCanvas.imgBG[1] = GameCanvas.loadImageRMS("/bg/b100.png");
						GameCanvas.imgBG[2] = GameCanvas.loadImageRMS("/bg/b82-1.png");
						GameCanvas.imgBG[3] = GameCanvas.loadImageRMS("/bg/b93.png");
						for (int j = 0; j < GameCanvas.nBg; j++)
						{
							bool flag8 = GameCanvas.imgBG[j] != null;
							if (flag8)
							{
								int[] array12 = new int[1];
								GameCanvas.imgBG[j].getRGB(ref array12, 0, 1, mGraphics.getRealImageWidth(GameCanvas.imgBG[j]) / 2, 0, 1, 1);
								GameCanvas.colorTop[j] = array12[0];
								array12 = new int[1];
								GameCanvas.imgBG[j].getRGB(ref array12, 0, 1, mGraphics.getRealImageWidth(GameCanvas.imgBG[j]) / 2, mGraphics.getRealImageHeight(GameCanvas.imgBG[j]) - 1, 1, 1);
								GameCanvas.colorBotton[j] = array12[0];
								GameCanvas.bgW[j] = mGraphics.getImageWidth(GameCanvas.imgBG[j]);
								GameCanvas.bgH[j] = mGraphics.getImageHeight(GameCanvas.imgBG[j]);
							}
							else
							{
								bool flag9 = GameCanvas.nBg > 1;
								if (flag9)
								{
									GameCanvas.imgBG[j] = GameCanvas.loadImageRMS("/bg/b" + GameCanvas.typeBg.ToString() + "0.png");
									GameCanvas.bgW[j] = mGraphics.getImageWidth(GameCanvas.imgBG[j]);
									GameCanvas.bgH[j] = mGraphics.getImageHeight(GameCanvas.imgBG[j]);
								}
							}
						}
					}
					else
					{
						for (int k = 0; k < GameCanvas.nBg; k++)
						{
							string path2 = "/bg/b" + GameCanvas.typeBg.ToString() + k.ToString() + ".png";
							bool flag10 = TileMap.bgType != 0;
							if (flag10)
							{
								path2 = string.Concat(new string[]
								{
									"/bg/b",
									GameCanvas.typeBg.ToString(),
									k.ToString(),
									"-",
									TileMap.bgType.ToString(),
									".png"
								});
							}
							GameCanvas.imgBG[k] = GameCanvas.loadImageRMS(path2);
							bool flag11 = GameCanvas.imgBG[k] != null;
							if (flag11)
							{
								int[] array13 = new int[1];
								GameCanvas.imgBG[k].getRGB(ref array13, 0, 1, mGraphics.getRealImageWidth(GameCanvas.imgBG[k]) / 2, 0, 1, 1);
								GameCanvas.colorTop[k] = array13[0];
								array13 = new int[1];
								GameCanvas.imgBG[k].getRGB(ref array13, 0, 1, mGraphics.getRealImageWidth(GameCanvas.imgBG[k]) / 2, mGraphics.getRealImageHeight(GameCanvas.imgBG[k]) - 1, 1, 1);
								GameCanvas.colorBotton[k] = array13[0];
								GameCanvas.bgW[k] = mGraphics.getImageWidth(GameCanvas.imgBG[k]);
								GameCanvas.bgH[k] = mGraphics.getImageHeight(GameCanvas.imgBG[k]);
							}
							else
							{
								bool flag12 = GameCanvas.nBg > 1;
								if (flag12)
								{
									GameCanvas.imgBG[k] = GameCanvas.loadImageRMS("/bg/b" + GameCanvas.typeBg.ToString() + "0.png");
									GameCanvas.bgW[k] = mGraphics.getImageWidth(GameCanvas.imgBG[k]);
									GameCanvas.bgH[k] = mGraphics.getImageHeight(GameCanvas.imgBG[k]);
								}
							}
						}
					}
					GameCanvas.getYBackground(GameCanvas.typeBg);
					GameCanvas.cloudX = new int[]
					{
						GameScr.gW / 2 - 40,
						GameScr.gW / 2 + 40,
						GameScr.gW / 2 - 100,
						GameScr.gW / 2 - 80,
						GameScr.gW / 2 - 120
					};
					GameCanvas.cloudY = new int[]
					{
						130,
						100,
						150,
						140,
						80
					};
					GameCanvas.imgSunSpec = null;
					bool flag13 = GameCanvas.typeBg != 0;
					if (flag13)
					{
						bool flag14 = GameCanvas.typeBg == 2;
						if (flag14)
						{
							GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun0.png");
							GameCanvas.sunX = GameScr.gW / 2 + 50;
							GameCanvas.sunY = GameCanvas.yb[4] - 40;
							TileMap.imgWaterflow = GameCanvas.loadImageRMS("/tWater/wts");
						}
						else
						{
							bool flag15 = GameCanvas.typeBg == 19;
							if (flag15)
							{
								TileMap.imgWaterflow = GameCanvas.loadImageRMS("/tWater/water_flow_32");
							}
							else
							{
								bool flag16 = GameCanvas.typeBg == 4;
								if (flag16)
								{
									GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun2.png");
									GameCanvas.sunX = GameScr.gW / 2 + 30;
									GameCanvas.sunY = GameCanvas.yb[3];
								}
								else
								{
									bool flag17 = GameCanvas.typeBg == 7;
									if (flag17)
									{
										GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun3" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
										GameCanvas.imgSun2 = GameCanvas.loadImageRMS("/bg/sun4" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
										GameCanvas.sunX = GameScr.gW - GameScr.gW / 3;
										GameCanvas.sunY = GameCanvas.yb[3] - 80;
										GameCanvas.sunX2 = GameCanvas.sunX - 100;
										GameCanvas.sunY2 = GameCanvas.yb[3] - 30;
									}
									else
									{
										bool flag18 = GameCanvas.typeBg == 6;
										if (flag18)
										{
											GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun5" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
											GameCanvas.imgSun2 = GameCanvas.loadImageRMS("/bg/sun6" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
											GameCanvas.sunX = GameScr.gW - GameScr.gW / 3;
											GameCanvas.sunY = GameCanvas.yb[4];
											GameCanvas.sunX2 = GameCanvas.sunX - 100;
											GameCanvas.sunY2 = GameCanvas.yb[4] + 20;
										}
										else
										{
											bool flag19 = typeBG == 5;
											if (flag19)
											{
												GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun8" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
												GameCanvas.imgSun2 = GameCanvas.loadImageRMS("/bg/sun7" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
												GameCanvas.sunX = GameScr.gW / 2 - 50;
												GameCanvas.sunY = GameCanvas.yb[3] + 20;
												GameCanvas.sunX2 = GameScr.gW / 2 + 20;
												GameCanvas.sunY2 = GameCanvas.yb[3] - 30;
											}
											else
											{
												bool flag20 = GameCanvas.typeBg == 8 && TileMap.mapID < 90;
												if (flag20)
												{
													GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun9" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
													GameCanvas.imgSun2 = GameCanvas.loadImageRMS("/bg/sun10" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
													GameCanvas.sunX = GameScr.gW / 2 - 30;
													GameCanvas.sunY = GameCanvas.yb[3] + 60;
													GameCanvas.sunX2 = GameScr.gW / 2 + 20;
													GameCanvas.sunY2 = GameCanvas.yb[3] + 10;
												}
												else
												{
													switch (typeBG)
													{
													case 9:
														GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun11" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
														GameCanvas.imgSun2 = GameCanvas.loadImageRMS("/bg/sun12" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
														GameCanvas.sunX = GameScr.gW - GameScr.gW / 3;
														GameCanvas.sunY = GameCanvas.yb[4] + 20;
														GameCanvas.sunX2 = GameCanvas.sunX - 80;
														GameCanvas.sunY2 = GameCanvas.yb[4] + 40;
														goto IL_1119;
													case 10:
														GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun13" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
														GameCanvas.imgSun2 = GameCanvas.loadImageRMS("/bg/sun14" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
														GameCanvas.sunX = GameScr.gW - GameScr.gW / 3;
														GameCanvas.sunY = GameCanvas.yb[1] - 30;
														GameCanvas.sunX2 = GameCanvas.sunX - 80;
														GameCanvas.sunY2 = GameCanvas.yb[1];
														goto IL_1119;
													case 11:
														GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun15" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
														GameCanvas.imgSun2 = GameCanvas.loadImageRMS("/bg/b113" + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
														GameCanvas.sunX = GameScr.gW / 2 - 30;
														GameCanvas.sunY = GameCanvas.yb[2] - 30;
														goto IL_1119;
													case 12:
														GameCanvas.cloudY = new int[]
														{
															200,
															170,
															220,
															150,
															250
														};
														goto IL_1119;
													case 16:
														GameCanvas.cloudX = new int[]
														{
															90,
															170,
															250,
															320,
															400,
															450,
															500
														};
														GameCanvas.cloudY = new int[]
														{
															GameCanvas.yb[2] + 5,
															GameCanvas.yb[2] - 20,
															GameCanvas.yb[2] - 50,
															GameCanvas.yb[2] - 30,
															GameCanvas.yb[2] - 50,
															GameCanvas.yb[2],
															GameCanvas.yb[2] - 40
														};
														GameCanvas.imgSunSpec = new Image[7];
														for (int l = 0; l < GameCanvas.imgSunSpec.Length; l++)
														{
															int num = 161;
															bool flag21 = l == 0 || l == 2 || l == 3 || l == 2 || l == 6;
															if (flag21)
															{
																num = 160;
															}
															GameCanvas.imgSunSpec[l] = GameCanvas.loadImageRMS("/bg/sun" + num.ToString() + ".png");
														}
														goto IL_1119;
													case 19:
													{
														int[] array14 = new int[5];
														array14[1] = 2;
														array14[2] = 1;
														GameCanvas.moveX = array14;
														int[] array15 = new int[5];
														array15[1] = 2;
														array15[2] = 1;
														GameCanvas.moveXSpeed = array15;
														GameCanvas.nBg = 5;
														goto IL_1119;
													}
													}
													GameCanvas.imgCloud = null;
													GameCanvas.imgSun = null;
													GameCanvas.imgSun2 = null;
													GameCanvas.imgSun = GameCanvas.loadImageRMS("/bg/sun" + typeBG.ToString() + ((TileMap.bgType != 0) ? ("-" + TileMap.bgType.ToString()) : string.Empty) + ".png");
													bool flag22 = GameCanvas.loadImageRMS("/tWater/water_flow_" + typeBG.ToString()) != null;
													if (flag22)
													{
														TileMap.imgWaterflow = GameCanvas.loadImageRMS("/tWater/water_flow_" + typeBG.ToString());
													}
													GameCanvas.sunX = GameScr.gW - GameScr.gW / 3;
													GameCanvas.sunY = GameCanvas.yb[2] - 30;
													IL_1119:;
												}
											}
										}
									}
								}
							}
						}
					}
					GameCanvas.paintBG = false;
					bool flag23 = !GameCanvas.paintBG;
					if (flag23)
					{
						GameCanvas.paintBG = true;
					}
				}
			}
		}
		catch (Exception)
		{
			GameCanvas.isLoadBGok = false;
		}
	}

	// Token: 0x06000405 RID: 1029 RVA: 0x0004C29C File Offset: 0x0004A49C
	private static void randomRaintEff(int typeBG)
	{
		for (int i = 0; i < GameCanvas.bgRain.Length; i++)
		{
			bool flag = typeBG == GameCanvas.bgRain[i] && Res.random(0, 2) == 0;
			if (flag)
			{
				BackgroudEffect.addEffect(0);
				break;
			}
		}
	}

	// Token: 0x06000406 RID: 1030 RVA: 0x0004C2E8 File Offset: 0x0004A4E8
	public void keyPressedz(int keyCode)
	{
		GameCanvas.lastTimePress = mSystem.currentTimeMillis();
		bool flag = (keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 122) || keyCode == 10 || keyCode == 8 || keyCode == 13 || keyCode == 32 || keyCode == 31;
		if (flag)
		{
			GameCanvas.keyAsciiPress = keyCode;
		}
		this.mapKeyPress(keyCode);
	}

	// Token: 0x06000407 RID: 1031 RVA: 0x0004C344 File Offset: 0x0004A544
	public void mapKeyPress(int keyCode)
	{
		bool flag = GameCanvas.currentDialog != null;
		if (flag)
		{
			GameCanvas.currentDialog.keyPress(keyCode);
			GameCanvas.keyAsciiPress = 0;
		}
		else
		{
			GameCanvas.currentScreen.keyPress(keyCode);
			if (keyCode <= -22)
			{
				if (keyCode <= -38)
				{
					if (keyCode == -39)
					{
						goto IL_179;
					}
					if (keyCode != -38)
					{
						return;
					}
				}
				else
				{
					if (keyCode == -26)
					{
						GameCanvas.keyHold[16] = true;
						GameCanvas.keyPressed[16] = true;
						return;
					}
					if (keyCode != -22)
					{
						return;
					}
					goto IL_3FF;
				}
			}
			else
			{
				if (keyCode <= -1)
				{
					if (keyCode != -21)
					{
						switch (keyCode)
						{
						case -8:
							GameCanvas.keyHold[14] = true;
							GameCanvas.keyPressed[14] = true;
							return;
						case -7:
							goto IL_3FF;
						case -6:
							break;
						case -5:
							goto IL_275;
						case -4:
						{
							bool flag2 = (GameCanvas.currentScreen is GameScr || GameCanvas.currentScreen is CrackBallScr) && global::Char.myCharz().isAttack;
							if (flag2)
							{
								GameCanvas.clearKeyHold();
								GameCanvas.clearKeyPressed();
							}
							else
							{
								GameCanvas.keyHold[24] = true;
								GameCanvas.keyPressed[24] = true;
							}
							return;
						}
						case -3:
						{
							bool flag3 = (GameCanvas.currentScreen is GameScr || GameCanvas.currentScreen is CrackBallScr) && global::Char.myCharz().isAttack;
							if (flag3)
							{
								GameCanvas.clearKeyHold();
								GameCanvas.clearKeyPressed();
							}
							else
							{
								GameCanvas.keyHold[23] = true;
								GameCanvas.keyPressed[23] = true;
							}
							return;
						}
						case -2:
							goto IL_179;
						case -1:
							goto IL_127;
						default:
							return;
						}
					}
					GameCanvas.keyHold[12] = true;
					GameCanvas.keyPressed[12] = true;
					return;
				}
				if (keyCode != 10)
				{
					switch (keyCode)
					{
					case 35:
						GameCanvas.keyHold[11] = true;
						GameCanvas.keyPressed[11] = true;
						return;
					case 36:
					case 37:
					case 38:
					case 39:
					case 40:
					case 41:
					case 43:
					case 44:
					case 45:
					case 46:
					case 47:
						return;
					case 42:
						GameCanvas.keyHold[10] = true;
						GameCanvas.keyPressed[10] = true;
						return;
					case 48:
						GameCanvas.keyHold[0] = true;
						GameCanvas.keyPressed[0] = true;
						return;
					case 49:
					{
						bool flag4 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
						if (flag4)
						{
							GameCanvas.keyHold[1] = true;
							GameCanvas.keyPressed[1] = true;
						}
						return;
					}
					case 50:
					{
						bool flag5 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
						if (flag5)
						{
							GameCanvas.keyHold[2] = true;
							GameCanvas.keyPressed[2] = true;
						}
						return;
					}
					case 51:
					{
						bool flag6 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
						if (flag6)
						{
							GameCanvas.keyHold[3] = true;
							GameCanvas.keyPressed[3] = true;
						}
						return;
					}
					case 52:
					{
						bool flag7 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
						if (flag7)
						{
							GameCanvas.keyHold[4] = true;
							GameCanvas.keyPressed[4] = true;
						}
						return;
					}
					case 53:
					{
						bool flag8 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
						if (flag8)
						{
							GameCanvas.keyHold[5] = true;
							GameCanvas.keyPressed[5] = true;
						}
						return;
					}
					case 54:
					{
						bool flag9 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
						if (flag9)
						{
							GameCanvas.keyHold[6] = true;
							GameCanvas.keyPressed[6] = true;
						}
						return;
					}
					case 55:
						GameCanvas.keyHold[7] = true;
						GameCanvas.keyPressed[7] = true;
						return;
					case 56:
					{
						bool flag10 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
						if (flag10)
						{
							GameCanvas.keyHold[8] = true;
							GameCanvas.keyPressed[8] = true;
						}
						return;
					}
					case 57:
						GameCanvas.keyHold[9] = true;
						GameCanvas.keyPressed[9] = true;
						return;
					default:
						if (keyCode != 113)
						{
							return;
						}
						GameCanvas.keyHold[17] = true;
						GameCanvas.keyPressed[17] = true;
						return;
					}
				}
				IL_275:
				bool flag11 = (GameCanvas.currentScreen is GameScr || GameCanvas.currentScreen is CrackBallScr) && global::Char.myCharz().isAttack;
				if (flag11)
				{
					GameCanvas.clearKeyHold();
					GameCanvas.clearKeyPressed();
					return;
				}
				GameCanvas.keyHold[25] = true;
				GameCanvas.keyPressed[25] = true;
				GameCanvas.keyHold[15] = true;
				GameCanvas.keyPressed[15] = true;
				return;
			}
			IL_127:
			bool flag12 = (GameCanvas.currentScreen is GameScr || GameCanvas.currentScreen is CrackBallScr) && global::Char.myCharz().isAttack;
			if (flag12)
			{
				GameCanvas.clearKeyHold();
				GameCanvas.clearKeyPressed();
			}
			else
			{
				GameCanvas.keyHold[21] = true;
				GameCanvas.keyPressed[21] = true;
			}
			return;
			IL_179:
			bool flag13 = (GameCanvas.currentScreen is GameScr || GameCanvas.currentScreen is CrackBallScr) && global::Char.myCharz().isAttack;
			if (flag13)
			{
				GameCanvas.clearKeyHold();
				GameCanvas.clearKeyPressed();
			}
			else
			{
				GameCanvas.keyHold[22] = true;
				GameCanvas.keyPressed[22] = true;
			}
			return;
			IL_3FF:
			GameCanvas.keyHold[13] = true;
			GameCanvas.keyPressed[13] = true;
		}
	}

	// Token: 0x06000408 RID: 1032 RVA: 0x0004C92B File Offset: 0x0004AB2B
	public void keyReleasedz(int keyCode)
	{
		GameCanvas.keyAsciiPress = 0;
		this.mapKeyRelease(keyCode);
	}

	// Token: 0x06000409 RID: 1033 RVA: 0x0004C93C File Offset: 0x0004AB3C
	public void mapKeyRelease(int keyCode)
	{
		if (keyCode > -22)
		{
			if (keyCode <= -1)
			{
				if (keyCode != -21)
				{
					switch (keyCode)
					{
					case -8:
						GameCanvas.keyHold[14] = false;
						return;
					case -7:
						goto IL_278;
					case -6:
						break;
					case -5:
						goto IL_12F;
					case -4:
						GameCanvas.keyHold[24] = false;
						return;
					case -3:
						GameCanvas.keyHold[23] = false;
						return;
					case -2:
						goto IL_105;
					case -1:
						goto IL_F7;
					default:
						return;
					}
				}
				GameCanvas.keyHold[12] = false;
				GameCanvas.keyReleased[12] = true;
				return;
			}
			if (keyCode != 10)
			{
				switch (keyCode)
				{
				case 35:
					GameCanvas.keyHold[11] = false;
					GameCanvas.keyReleased[11] = true;
					return;
				case 36:
				case 37:
				case 38:
				case 39:
				case 40:
				case 41:
				case 43:
				case 44:
				case 45:
				case 46:
				case 47:
					return;
				case 42:
					GameCanvas.keyHold[10] = false;
					GameCanvas.keyReleased[10] = true;
					return;
				case 48:
					GameCanvas.keyHold[0] = false;
					GameCanvas.keyReleased[0] = true;
					return;
				case 49:
				{
					bool flag = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
					if (flag)
					{
						GameCanvas.keyHold[1] = false;
						GameCanvas.keyReleased[1] = true;
					}
					return;
				}
				case 50:
				{
					bool flag2 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
					if (flag2)
					{
						GameCanvas.keyHold[2] = false;
						GameCanvas.keyReleased[2] = true;
					}
					return;
				}
				case 51:
				{
					bool flag3 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
					if (flag3)
					{
						GameCanvas.keyHold[3] = false;
						GameCanvas.keyReleased[3] = true;
					}
					return;
				}
				case 52:
				{
					bool flag4 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
					if (flag4)
					{
						GameCanvas.keyHold[4] = false;
						GameCanvas.keyReleased[4] = true;
					}
					return;
				}
				case 53:
				{
					bool flag5 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
					if (flag5)
					{
						GameCanvas.keyHold[5] = false;
						GameCanvas.keyReleased[5] = true;
					}
					return;
				}
				case 54:
				{
					bool flag6 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
					if (flag6)
					{
						GameCanvas.keyHold[6] = false;
						GameCanvas.keyReleased[6] = true;
					}
					return;
				}
				case 55:
					GameCanvas.keyHold[7] = false;
					GameCanvas.keyReleased[7] = true;
					return;
				case 56:
				{
					bool flag7 = GameCanvas.currentScreen == CrackBallScr.instance || (GameCanvas.currentScreen == GameScr.instance && GameCanvas.isMoveNumberPad && !ChatTextField.gI().isShow);
					if (flag7)
					{
						GameCanvas.keyHold[8] = false;
						GameCanvas.keyReleased[8] = true;
					}
					return;
				}
				case 57:
					GameCanvas.keyHold[9] = false;
					GameCanvas.keyReleased[9] = true;
					return;
				default:
					if (keyCode != 113)
					{
						return;
					}
					GameCanvas.keyHold[17] = false;
					GameCanvas.keyReleased[17] = true;
					return;
				}
			}
			IL_12F:
			GameCanvas.keyHold[25] = false;
			GameCanvas.keyReleased[25] = true;
			GameCanvas.keyHold[15] = true;
			GameCanvas.keyPressed[15] = true;
			return;
		}
		if (keyCode <= -38)
		{
			if (keyCode == -39)
			{
				goto IL_105;
			}
			if (keyCode != -38)
			{
				return;
			}
		}
		else
		{
			if (keyCode == -26)
			{
				GameCanvas.keyHold[16] = false;
				return;
			}
			if (keyCode != -22)
			{
				return;
			}
			goto IL_278;
		}
		IL_F7:
		GameCanvas.keyHold[21] = false;
		return;
		IL_105:
		GameCanvas.keyHold[22] = false;
		return;
		IL_278:
		GameCanvas.keyHold[13] = false;
		GameCanvas.keyReleased[13] = true;
	}

	// Token: 0x0600040A RID: 1034 RVA: 0x0004CD87 File Offset: 0x0004AF87
	public void pointerMouse(int x, int y)
	{
		GameCanvas.pxMouse = x;
		GameCanvas.pyMouse = y;
	}

	// Token: 0x0600040B RID: 1035 RVA: 0x0004CD98 File Offset: 0x0004AF98
	public void scrollMouse(int a)
	{
		GameCanvas.pXYScrollMouse = a;
		bool flag = GameCanvas.panel != null && GameCanvas.panel.isShow;
		if (flag)
		{
			GameCanvas.panel.updateScroolMouse(a);
		}
	}

	// Token: 0x0600040C RID: 1036 RVA: 0x0004CDD4 File Offset: 0x0004AFD4
	public void pointerDragged(int x, int y)
	{
		GameCanvas.isPointerSelect = false;
		bool flag = Res.abs(x - GameCanvas.pxLast) >= 10 || Res.abs(y - GameCanvas.pyLast) >= 10;
		if (flag)
		{
			GameCanvas.isPointerClick = false;
			GameCanvas.isPointerDown = true;
			GameCanvas.isPointerMove = true;
		}
		GameCanvas.px = x;
		GameCanvas.py = y;
		GameCanvas.curPos++;
		bool flag2 = GameCanvas.curPos > 3;
		if (flag2)
		{
			GameCanvas.curPos = 0;
		}
		GameCanvas.arrPos[GameCanvas.curPos] = new Position(x, y);
	}

	// Token: 0x0600040D RID: 1037 RVA: 0x0004CE64 File Offset: 0x0004B064
	public static bool isHoldPress()
	{
		return mSystem.currentTimeMillis() - GameCanvas.lastTimePress >= 800L;
	}

	// Token: 0x0600040E RID: 1038 RVA: 0x0004CE98 File Offset: 0x0004B098
	public void pointerPressed(int x, int y)
	{
		GameCanvas.isPointerSelect = false;
		GameCanvas.isPointerJustRelease = false;
		GameCanvas.isPointerJustDown = true;
		GameCanvas.isPointerDown = true;
		GameCanvas.isPointerClick = false;
		GameCanvas.isPointerMove = false;
		GameCanvas.lastTimePress = mSystem.currentTimeMillis();
		GameCanvas.pxFirst = x;
		GameCanvas.pyFirst = y;
		GameCanvas.pxLast = x;
		GameCanvas.pyLast = y;
		GameCanvas.px = x;
		GameCanvas.py = y;
	}

	// Token: 0x0600040F RID: 1039 RVA: 0x0004CEF8 File Offset: 0x0004B0F8
	public void pointerReleased(int x, int y)
	{
		bool flag = !GameCanvas.isPointerMove;
		if (flag)
		{
			GameCanvas.isPointerSelect = true;
		}
		GameCanvas.isPointerDown = false;
		GameCanvas.isPointerMove = false;
		GameCanvas.isPointerJustRelease = true;
		GameCanvas.isPointerClick = true;
		mScreen.keyTouch = -1;
		GameCanvas.px = x;
		GameCanvas.py = y;
	}

	// Token: 0x06000410 RID: 1040 RVA: 0x0004CF44 File Offset: 0x0004B144
	public static bool isPointerHoldIn(int x, int y, int w, int h)
	{
		bool flag = !GameCanvas.isPointerDown && !GameCanvas.isPointerJustRelease;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = GameCanvas.px >= x && GameCanvas.px <= x + w && GameCanvas.py >= y && GameCanvas.py <= y + h;
			result = flag2;
		}
		return result;
	}

	// Token: 0x06000411 RID: 1041 RVA: 0x0004CFA8 File Offset: 0x0004B1A8
	public static bool isPointSelect(int x, int y, int w, int h)
	{
		bool flag = !GameCanvas.isPointerSelect;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = GameCanvas.px >= x && GameCanvas.px <= x + w && GameCanvas.py >= y && GameCanvas.py <= y + h;
			result = flag2;
		}
		return result;
	}

	// Token: 0x06000412 RID: 1042 RVA: 0x0004D000 File Offset: 0x0004B200
	public static bool isMouseFocus(int x, int y, int w, int h)
	{
		return GameCanvas.pxMouse >= x && GameCanvas.pxMouse <= x + w && GameCanvas.pyMouse >= y && GameCanvas.pyMouse <= y + h;
	}

	// Token: 0x06000413 RID: 1043 RVA: 0x0004D048 File Offset: 0x0004B248
	public static void clearKeyPressed()
	{
		for (int i = 0; i < GameCanvas.keyPressed.Length; i++)
		{
			GameCanvas.keyPressed[i] = false;
		}
		GameCanvas.isPointerJustRelease = false;
	}

	// Token: 0x06000414 RID: 1044 RVA: 0x0004D07C File Offset: 0x0004B27C
	public static void clearKeyHold()
	{
		for (int i = 0; i < GameCanvas.keyHold.Length; i++)
		{
			GameCanvas.keyHold[i] = false;
		}
	}

	// Token: 0x06000415 RID: 1045 RVA: 0x0004D0AC File Offset: 0x0004B2AC
	public static void checkBackButton()
	{
		bool flag = ChatPopup.serverChatPopUp == null && ChatPopup.currChatPopup == null;
		if (flag)
		{
			GameCanvas.startYesNoDlg(mResources.DOYOUWANTEXIT, new Command(mResources.YES, GameCanvas.instance, 8885, null), new Command(mResources.NO, GameCanvas.instance, 8882, null));
		}
	}

	// Token: 0x06000416 RID: 1046 RVA: 0x0004D108 File Offset: 0x0004B308
	public void paintChangeMap(mGraphics g)
	{
		string empty = string.Empty;
		GameCanvas.resetTrans(g);
		g.setColor(0);
		g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
		g.drawImage(LoginScr.imgTitle, GameCanvas.w / 2, GameCanvas.h / 2 - 24, StaticObj.BOTTOM_HCENTER);
		GameCanvas.paintShukiren(GameCanvas.hw, GameCanvas.h / 2 + 24, g);
		mFont.tahoma_7b_white.drawString(g, mResources.PLEASEWAIT + ((LoginScr.timeLogin <= 0) ? empty : (" " + LoginScr.timeLogin.ToString() + "s")), GameCanvas.w / 2, GameCanvas.h / 2, 2);
	}

	// Token: 0x06000417 RID: 1047 RVA: 0x0004D1C0 File Offset: 0x0004B3C0
	public void paint(mGraphics gx)
	{
		try
		{
			GameCanvas.debugPaint.removeAllElements();
			GameCanvas.debug("PA", 1);
			bool flag = GameCanvas.currentScreen != null;
			if (flag)
			{
				GameCanvas.currentScreen.paint(this.g);
			}
			GameCanvas.debug("PB", 1);
			this.g.translate(-this.g.getTranslateX(), -this.g.getTranslateY());
			this.g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			bool isShow = GameCanvas.panel.isShow;
			if (isShow)
			{
				GameCanvas.panel.paint(this.g);
				bool flag2 = GameCanvas.panel2 != null && GameCanvas.panel2.isShow;
				if (flag2)
				{
					GameCanvas.panel2.paint(this.g);
				}
				bool flag3 = GameCanvas.panel.chatTField != null && GameCanvas.panel.chatTField.isShow;
				if (flag3)
				{
					GameCanvas.panel.chatTField.paint(this.g);
				}
				bool flag4 = GameCanvas.panel2 != null && GameCanvas.panel2.chatTField != null && GameCanvas.panel2.chatTField.isShow;
				if (flag4)
				{
					GameCanvas.panel2.chatTField.paint(this.g);
				}
			}
			Res.paintOnScreenDebug(this.g);
			InfoDlg.paint(this.g);
			bool flag5 = GameCanvas.currentDialog != null;
			if (flag5)
			{
				GameCanvas.debug("PC", 1);
				GameCanvas.currentDialog.paint(this.g);
			}
			else
			{
				bool showMenu = GameCanvas.menu.showMenu;
				if (showMenu)
				{
					GameCanvas.debug("PD", 1);
					GameCanvas.resetTrans(this.g);
					GameCanvas.menu.paintMenu(this.g);
				}
			}
			GameScr.info1.paint(this.g);
			GameScr.info2.paint(this.g);
			bool flag6 = GameScr.gI().popUpYesNo != null;
			if (flag6)
			{
				GameScr.gI().popUpYesNo.paint(this.g);
			}
			bool flag7 = ChatPopup.currChatPopup != null;
			if (flag7)
			{
				ChatPopup.currChatPopup.paint(this.g);
			}
			Hint.paint(this.g);
			bool flag8 = ChatPopup.serverChatPopUp != null;
			if (flag8)
			{
				ChatPopup.serverChatPopUp.paint(this.g);
			}
			for (int i = 0; i < Effect2.vEffect2.size(); i++)
			{
				Effect2 effect = (Effect2)Effect2.vEffect2.elementAt(i);
				bool flag9 = effect is ChatPopup && !effect.Equals(ChatPopup.currChatPopup) && !effect.Equals(ChatPopup.serverChatPopUp);
				if (flag9)
				{
					effect.paint(this.g);
				}
			}
			bool flag10 = GameCanvas.currentDialog != null;
			if (flag10)
			{
				GameCanvas.currentDialog.paint(this.g);
			}
			bool flag11 = GameCanvas.isWait();
			if (flag11)
			{
				this.paintChangeMap(this.g);
				bool flag12 = GameCanvas.timeLoading > 0 && LoginScr.timeLogin <= 0 && mSystem.currentTimeMillis() - GameCanvas.TIMEOUT >= 1000L;
				if (flag12)
				{
					GameCanvas.timeLoading--;
					bool flag13 = GameCanvas.timeLoading == 0;
					if (flag13)
					{
						GameCanvas.timeLoading = 15;
					}
					GameCanvas.TIMEOUT = mSystem.currentTimeMillis();
				}
			}
			GameCanvas.debug("PE", 1);
			GameCanvas.resetTrans(this.g);
			EffecMn.paintLayer4(this.g);
			bool flag14 = GameCanvas.open3Hour && !GameCanvas.isLoading;
			if (flag14)
			{
				bool flag15 = GameCanvas.currentScreen == GameCanvas.loginScr || GameCanvas.currentScreen == GameCanvas.serverScreen || GameCanvas.currentScreen == GameCanvas.serverScr;
				if (flag15)
				{
					this.g.drawImage(GameCanvas.img12, 5, 5, 0);
				}
				bool flag16 = GameCanvas.currentScreen == CreateCharScr.instance;
				if (flag16)
				{
					this.g.drawImage(GameCanvas.img12, 5, 20, 0);
				}
			}
			GameCanvas.resetTrans(this.g);
			int num = GameCanvas.h / 4;
			bool flag17 = GameCanvas.currentScreen != null && GameCanvas.currentScreen is GameScr && GameCanvas.thongBaoTest != null;
			if (flag17)
			{
				this.g.setClip(60, num, GameCanvas.w - 120, mFont.tahoma_7_white.getHeight() + 2);
				mFont.tahoma_7_grey.drawString(this.g, GameCanvas.thongBaoTest, GameCanvas.xThongBaoTranslate, num + 1, 0);
				mFont.tahoma_7_yellow.drawString(this.g, GameCanvas.thongBaoTest, GameCanvas.xThongBaoTranslate, num, 0);
				this.g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000418 RID: 1048 RVA: 0x0004D6C4 File Offset: 0x0004B8C4
	public static void endDlg()
	{
		bool flag = GameCanvas.inputDlg != null;
		if (flag)
		{
			GameCanvas.inputDlg.tfInput.setMaxTextLenght(500);
		}
		GameCanvas.currentDialog = null;
		InfoDlg.hide();
	}

	// Token: 0x06000419 RID: 1049 RVA: 0x0004D704 File Offset: 0x0004B904
	public static void startOKDlg(string info)
	{
		bool flag = info == "Không thể đổi khu vực trong map này";
		if (!flag)
		{
			GameCanvas.closeKeyBoard();
			GameCanvas.msgdlg.setInfo(info, null, new Command(mResources.OK, GameCanvas.instance, 8882, null), null);
			GameCanvas.currentDialog = GameCanvas.msgdlg;
		}
	}

	// Token: 0x0600041A RID: 1050 RVA: 0x0004D758 File Offset: 0x0004B958
	public static void startWaitDlg(string info)
	{
		GameCanvas.closeKeyBoard();
		GameCanvas.msgdlg.setInfo(info, null, new Command(mResources.CANCEL, GameCanvas.instance, 8882, null), null);
		GameCanvas.currentDialog = GameCanvas.msgdlg;
		GameCanvas.msgdlg.isWait = true;
	}

	// Token: 0x0600041B RID: 1051 RVA: 0x0004D7A4 File Offset: 0x0004B9A4
	public static void startOKDlg(string info, bool isError)
	{
		GameCanvas.closeKeyBoard();
		GameCanvas.msgdlg.setInfo(info, null, new Command(mResources.CANCEL, GameCanvas.instance, 8882, null), null);
		GameCanvas.currentDialog = GameCanvas.msgdlg;
		GameCanvas.msgdlg.isWait = true;
	}

	// Token: 0x0600041C RID: 1052 RVA: 0x0004D7F0 File Offset: 0x0004B9F0
	public static void startWaitDlg()
	{
		GameCanvas.closeKeyBoard();
		global::Char.isLoadingMap = true;
	}

	// Token: 0x0600041D RID: 1053 RVA: 0x0004D7FF File Offset: 0x0004B9FF
	public void openWeb(string strLeft, string strRight, string url, string str)
	{
		GameCanvas.msgdlg.setInfo(str, new Command(strLeft, this, 8881, url), null, new Command(strRight, this, 8882, null));
		GameCanvas.currentDialog = GameCanvas.msgdlg;
	}

	// Token: 0x0600041E RID: 1054 RVA: 0x0004D834 File Offset: 0x0004BA34
	public static void startOK(string info, int actionID, object p)
	{
		GameCanvas.closeKeyBoard();
		GameCanvas.msgdlg.setInfo(info, null, new Command(mResources.OK, GameCanvas.instance, actionID, p), null);
		GameCanvas.msgdlg.show();
	}

	// Token: 0x0600041F RID: 1055 RVA: 0x0004D868 File Offset: 0x0004BA68
	public static void startYesNoDlg(string info, int iYes, object pYes, int iNo, object pNo)
	{
		GameCanvas.closeKeyBoard();
		GameCanvas.msgdlg.setInfo(info, new Command(mResources.YES, GameCanvas.instance, iYes, pYes), new Command(string.Empty, GameCanvas.instance, iYes, pYes), new Command(mResources.NO, GameCanvas.instance, iNo, pNo));
		GameCanvas.msgdlg.show();
	}

	// Token: 0x06000420 RID: 1056 RVA: 0x0004D8C7 File Offset: 0x0004BAC7
	public static void startYesNoDlg(string info, Command cmdYes, Command cmdNo)
	{
		GameCanvas.closeKeyBoard();
		GameCanvas.msgdlg.setInfo(info, cmdYes, null, cmdNo);
		GameCanvas.msgdlg.show();
	}

	// Token: 0x06000421 RID: 1057 RVA: 0x0004D8EA File Offset: 0x0004BAEA
	public static void startserverThongBao(string msgSv)
	{
		GameCanvas.thongBaoTest = msgSv;
		GameCanvas.xThongBaoTranslate = GameCanvas.w - 60;
		GameCanvas.dir_ = -1;
	}

	// Token: 0x06000422 RID: 1058 RVA: 0x0004D908 File Offset: 0x0004BB08
	public static string getMoneys(int m)
	{
		string text = string.Empty;
		int num = m / 1000 + 1;
		for (int i = 0; i < num; i++)
		{
			bool flag = m >= 1000;
			if (!flag)
			{
				text = m.ToString() + text;
				break;
			}
			int num2 = m % 1000;
			text = ((num2 != 0) ? ((num2 >= 10) ? ((num2 >= 100) ? ("." + num2.ToString() + text) : (".0" + num2.ToString() + text)) : (".00" + num2.ToString() + text)) : (".000" + text));
			m /= 1000;
		}
		return text;
	}

	// Token: 0x06000423 RID: 1059 RVA: 0x0004D9D4 File Offset: 0x0004BBD4
	public static int getX(int start, int w)
	{
		return (GameCanvas.px - start) / w;
	}

	// Token: 0x06000424 RID: 1060 RVA: 0x0004D9F0 File Offset: 0x0004BBF0
	public static int getY(int start, int w)
	{
		return (GameCanvas.py - start) / w;
	}

	// Token: 0x06000425 RID: 1061 RVA: 0x0004DA0B File Offset: 0x0004BC0B
	protected void sizeChanged(int w, int h)
	{
	}

	// Token: 0x06000426 RID: 1062 RVA: 0x0004DA10 File Offset: 0x0004BC10
	public static bool isGetResourceFromServer()
	{
		return true;
	}

	// Token: 0x06000427 RID: 1063 RVA: 0x0004DA24 File Offset: 0x0004BC24
	public static Image loadImageRMS(string path)
	{
		path = Main.res + "/x" + mGraphics.zoomLevel.ToString() + path;
		path = GameCanvas.cutPng(path);
		Image result = null;
		try
		{
			result = Image.createImage(path);
		}
		catch (Exception ex)
		{
			try
			{
				string[] array = Res.split(path, "/", 0);
				string filename = "x" + mGraphics.zoomLevel.ToString() + array[array.Length - 1];
				sbyte[] array2 = Rms.loadRMS(filename);
				bool flag = array2 != null;
				if (flag)
				{
					result = Image.createImage(array2, 0, array2.Length);
				}
			}
			catch (Exception)
			{
				Cout.LogError("Loi ham khong tim thay a: " + ex.ToString());
			}
		}
		return result;
	}

	// Token: 0x06000428 RID: 1064 RVA: 0x0004DAF8 File Offset: 0x0004BCF8
	public static Image loadImage(string path)
	{
		path = Main.res + "/x" + mGraphics.zoomLevel.ToString() + path;
		path = GameCanvas.cutPng(path);
		Image result = null;
		try
		{
			result = Image.createImage(path);
		}
		catch (Exception)
		{
		}
		return result;
	}

	// Token: 0x06000429 RID: 1065 RVA: 0x0004DB54 File Offset: 0x0004BD54
	public static string cutPng(string str)
	{
		string result = str;
		bool flag = str.Contains(".png");
		if (flag)
		{
			result = str.Replace(".png", string.Empty);
		}
		return result;
	}

	// Token: 0x0600042A RID: 1066 RVA: 0x0004DB8C File Offset: 0x0004BD8C
	public static int random(int a, int b)
	{
		return a + GameCanvas.r.nextInt(b - a);
	}

	// Token: 0x0600042B RID: 1067 RVA: 0x0004DBB0 File Offset: 0x0004BDB0
	public bool startDust(int dir, int x, int y)
	{
		bool flag = GameCanvas.lowGraphic;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			int num = (dir != 1) ? 1 : 0;
			bool flag2 = this.dustState[num] != -1;
			if (flag2)
			{
				result = false;
			}
			else
			{
				this.dustState[num] = 0;
				this.dustX[num] = x;
				this.dustY[num] = y;
				result = true;
			}
		}
		return result;
	}

	// Token: 0x0600042C RID: 1068 RVA: 0x0004DC0C File Offset: 0x0004BE0C
	public void loadWaterSplash()
	{
		bool flag = !GameCanvas.lowGraphic;
		if (flag)
		{
			GameCanvas.imgWS = new Image[3];
			for (int i = 0; i < 3; i++)
			{
				GameCanvas.imgWS[i] = GameCanvas.loadImage("/e/w" + i.ToString() + ".png");
			}
			GameCanvas.wsX = new int[2];
			GameCanvas.wsY = new int[2];
			GameCanvas.wsState = new int[2];
			GameCanvas.wsF = new int[2];
			GameCanvas.wsState[0] = (GameCanvas.wsState[1] = -1);
		}
	}

	// Token: 0x0600042D RID: 1069 RVA: 0x0004DCA8 File Offset: 0x0004BEA8
	public bool startWaterSplash(int x, int y)
	{
		bool flag = GameCanvas.lowGraphic;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			int num = (GameCanvas.wsState[0] != -1) ? 1 : 0;
			bool flag2 = GameCanvas.wsState[num] != -1;
			if (flag2)
			{
				result = false;
			}
			else
			{
				GameCanvas.wsState[num] = 0;
				GameCanvas.wsX[num] = x;
				GameCanvas.wsY[num] = y;
				result = true;
			}
		}
		return result;
	}

	// Token: 0x0600042E RID: 1070 RVA: 0x0004DD08 File Offset: 0x0004BF08
	public void updateWaterSplash()
	{
		bool flag = GameCanvas.lowGraphic;
		if (!flag)
		{
			for (int i = 0; i < 2; i++)
			{
				bool flag2 = GameCanvas.wsState[i] == -1;
				if (!flag2)
				{
					GameCanvas.wsY[i]--;
					bool flag3 = GameCanvas.gameTick % 2 == 0;
					if (flag3)
					{
						GameCanvas.wsState[i]++;
						bool flag4 = GameCanvas.wsState[i] > 2;
						if (flag4)
						{
							GameCanvas.wsState[i] = -1;
						}
						else
						{
							GameCanvas.wsF[i] = GameCanvas.wsState[i];
						}
					}
				}
			}
		}
	}

	// Token: 0x0600042F RID: 1071 RVA: 0x0004DDA8 File Offset: 0x0004BFA8
	public void updateDust()
	{
		bool flag = GameCanvas.lowGraphic;
		if (!flag)
		{
			for (int i = 0; i < 2; i++)
			{
				bool flag2 = this.dustState[i] != -1;
				if (flag2)
				{
					this.dustState[i]++;
					bool flag3 = this.dustState[i] >= 5;
					if (flag3)
					{
						this.dustState[i] = -1;
					}
					bool flag4 = i == 0;
					if (flag4)
					{
						this.dustX[i]--;
					}
					else
					{
						this.dustX[i]++;
					}
					this.dustY[i]--;
				}
			}
		}
	}

	// Token: 0x06000430 RID: 1072 RVA: 0x0004DE64 File Offset: 0x0004C064
	public static bool isPaint(int x, int y)
	{
		bool flag = x < GameScr.cmx;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = x > GameScr.cmx + GameScr.gW;
			if (flag2)
			{
				result = false;
			}
			else
			{
				bool flag3 = y < GameScr.cmy;
				if (flag3)
				{
					result = false;
				}
				else
				{
					bool flag4 = y > GameScr.cmy + GameScr.gH + 30;
					result = !flag4;
				}
			}
		}
		return result;
	}

	// Token: 0x06000431 RID: 1073 RVA: 0x0004DECC File Offset: 0x0004C0CC
	public void paintDust(mGraphics g)
	{
		bool flag = GameCanvas.lowGraphic;
		if (!flag)
		{
			for (int i = 0; i < 2; i++)
			{
				bool flag2 = this.dustState[i] != -1 && GameCanvas.isPaint(this.dustX[i], this.dustY[i]);
				if (flag2)
				{
					g.drawImage(GameCanvas.imgDust[i][this.dustState[i]], this.dustX[i], this.dustY[i], 3);
				}
			}
		}
	}

	// Token: 0x06000432 RID: 1074 RVA: 0x0004DF4C File Offset: 0x0004C14C
	public void loadDust()
	{
		bool flag = GameCanvas.lowGraphic;
		if (!flag)
		{
			bool flag2 = GameCanvas.imgDust == null;
			if (flag2)
			{
				GameCanvas.imgDust = new Image[2][];
				for (int i = 0; i < GameCanvas.imgDust.Length; i++)
				{
					GameCanvas.imgDust[i] = new Image[5];
				}
				for (int j = 0; j < 2; j++)
				{
					for (int k = 0; k < 5; k++)
					{
						GameCanvas.imgDust[j][k] = GameCanvas.loadImage("/e/d" + j.ToString() + k.ToString() + ".png");
					}
				}
			}
			this.dustX = new int[2];
			this.dustY = new int[2];
			this.dustState = new int[2];
			this.dustState[0] = (this.dustState[1] = -1);
		}
	}

	// Token: 0x06000433 RID: 1075 RVA: 0x0004E044 File Offset: 0x0004C244
	public static void paintShukiren(int x, int y, mGraphics g)
	{
		g.drawRegion(GameCanvas.imgShuriken, 0, Main.f * 16, 16, 16, 0, x, y, mGraphics.HCENTER | mGraphics.VCENTER);
	}

	// Token: 0x06000434 RID: 1076 RVA: 0x0004E079 File Offset: 0x0004C279
	public void resetToLoginScrz()
	{
		this.resetToLoginScr = true;
	}

	// Token: 0x06000435 RID: 1077 RVA: 0x0004E084 File Offset: 0x0004C284
	public static bool isPointer(int x, int y, int w, int h)
	{
		bool flag = !GameCanvas.isPointerDown && !GameCanvas.isPointerJustRelease;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = GameCanvas.px >= x && GameCanvas.px <= x + w && GameCanvas.py >= y && GameCanvas.py <= y + h;
			result = flag2;
		}
		return result;
	}

	// Token: 0x06000436 RID: 1078 RVA: 0x0004E0E8 File Offset: 0x0004C2E8
	public void perform(int idAction, object p)
	{
		if (idAction <= 88839)
		{
			if (idAction <= 8889)
			{
				if (idAction == 999)
				{
					mSystem.closeBanner();
					GameCanvas.endDlg();
					return;
				}
				switch (idAction)
				{
				case 8881:
				{
					string url = (string)p;
					try
					{
						GameMidlet.instance.platformRequest(url);
					}
					catch (Exception)
					{
					}
					GameCanvas.currentDialog = null;
					return;
				}
				case 8882:
					InfoDlg.hide();
					GameCanvas.currentDialog = null;
					ServerListScreen.isAutoConect = false;
					ServerListScreen.countDieConnect = 0;
					return;
				case 8883:
					return;
				case 8884:
				{
					GameCanvas.endDlg();
					bool flag = GameCanvas.serverScr == null;
					if (flag)
					{
						GameCanvas.serverScr = new ServerScr();
					}
					GameCanvas.serverScr.switchToMe();
					return;
				}
				case 8885:
					GameMidlet.instance.exit();
					return;
				case 8886:
				{
					GameCanvas.endDlg();
					string name = (string)p;
					Service.gI().addFriend(name);
					return;
				}
				case 8887:
				{
					GameCanvas.endDlg();
					int charId = (int)p;
					Service.gI().addPartyAccept(charId);
					return;
				}
				case 8888:
				{
					int charId2 = (int)p;
					Service.gI().addPartyCancel(charId2);
					GameCanvas.endDlg();
					return;
				}
				case 8889:
				{
					string str = (string)p;
					GameCanvas.endDlg();
					Service.gI().acceptPleaseParty(str);
					return;
				}
				default:
					return;
				}
			}
			else
			{
				if (idAction == 9000)
				{
					GameCanvas.endDlg();
					SplashScr.imgLogo = null;
					SmallImage.loadBigRMS();
					mSystem.gcc();
					ServerListScreen.bigOk = true;
					ServerListScreen.loadScreen = true;
					GameScr.gI().loadGameScr();
					bool flag2 = GameCanvas.currentScreen != GameCanvas.loginScr;
					if (flag2)
					{
						GameCanvas.serverScreen.switchToMe2();
					}
					return;
				}
				if (idAction == 9999)
				{
					GameCanvas.endDlg();
					GameCanvas.connect();
					Service.gI().setClientType();
					bool flag3 = GameCanvas.loginScr == null;
					if (flag3)
					{
						GameCanvas.loginScr = new LoginScr();
					}
					GameCanvas.loginScr.doLogin();
					return;
				}
				switch (idAction)
				{
				case 88810:
				{
					int playerMapId = (int)p;
					GameCanvas.endDlg();
					Service.gI().acceptInviteTrade(playerMapId);
					return;
				}
				case 88811:
					GameCanvas.endDlg();
					Service.gI().cancelInviteTrade();
					return;
				case 88812:
				case 88813:
				case 88815:
				case 88816:
				case 88830:
				case 88831:
				case 88832:
				case 88833:
				case 88834:
				case 88835:
				case 88838:
					return;
				case 88814:
				{
					Item[] items = (Item[])p;
					GameCanvas.endDlg();
					Service.gI().crystalCollectLock(items);
					return;
				}
				case 88817:
					ChatPopup.addChatPopup(string.Empty, 1, global::Char.myCharz().npcFocus);
					Service.gI().menu(global::Char.myCharz().npcFocus.template.npcTemplateId, GameCanvas.menu.menuSelectedItem, 0);
					return;
				case 88818:
				{
					short menuId = (short)p;
					Service.gI().textBoxId(menuId, GameCanvas.inputDlg.tfInput.getText());
					GameCanvas.endDlg();
					return;
				}
				case 88819:
				{
					short menuId2 = (short)p;
					Service.gI().menuId(menuId2);
					return;
				}
				case 88820:
				{
					string[] array = (string[])p;
					bool flag4 = global::Char.myCharz().npcFocus == null;
					if (flag4)
					{
						return;
					}
					int menuSelectedItem = GameCanvas.menu.menuSelectedItem;
					bool flag5 = array.Length > 1;
					if (flag5)
					{
						MyVector myVector = new MyVector();
						for (int i = 0; i < array.Length - 1; i++)
						{
							myVector.addElement(new Command(array[i + 1], GameCanvas.instance, 88821, menuSelectedItem));
						}
						GameCanvas.menu.startAt(myVector, 3);
					}
					else
					{
						ChatPopup.addChatPopup(string.Empty, 1, global::Char.myCharz().npcFocus);
						Service.gI().menu(global::Char.myCharz().npcFocus.template.npcTemplateId, menuSelectedItem, 0);
					}
					return;
				}
				case 88821:
				{
					int menuId3 = (int)p;
					ChatPopup.addChatPopup(string.Empty, 1, global::Char.myCharz().npcFocus);
					Service.gI().menu(global::Char.myCharz().npcFocus.template.npcTemplateId, menuId3, GameCanvas.menu.menuSelectedItem);
					return;
				}
				case 88822:
					ChatPopup.addChatPopup(string.Empty, 1, global::Char.myCharz().npcFocus);
					Service.gI().menu(global::Char.myCharz().npcFocus.template.npcTemplateId, GameCanvas.menu.menuSelectedItem, 0);
					return;
				case 88823:
					GameCanvas.startOKDlg(mResources.SENTMSG);
					return;
				case 88824:
					GameCanvas.startOKDlg(mResources.NOSENDMSG);
					return;
				case 88825:
					GameCanvas.startOKDlg(mResources.sendMsgSuccess, false);
					return;
				case 88826:
					GameCanvas.startOKDlg(mResources.cannotSendMsg, false);
					return;
				case 88827:
					GameCanvas.startOKDlg(mResources.sendGuessMsgSuccess);
					return;
				case 88828:
					GameCanvas.startOKDlg(mResources.sendMsgFail);
					return;
				case 88829:
				{
					string text = GameCanvas.inputDlg.tfInput.getText();
					bool flag6 = !text.Equals(string.Empty);
					if (flag6)
					{
						Service.gI().changeName(text, (int)p);
						InfoDlg.showWait();
					}
					return;
				}
				case 88836:
					GameCanvas.inputDlg.tfInput.setMaxTextLenght(6);
					GameCanvas.inputDlg.show(mResources.INPUT_PRIVATE_PASS, new Command(mResources.ACCEPT, GameCanvas.instance, 888361, null), TField.INPUT_TYPE_NUMERIC);
					return;
				case 88837:
					break;
				case 88839:
					goto IL_775;
				default:
					return;
				}
			}
		}
		else if (idAction <= 100016)
		{
			switch (idAction)
			{
			case 100001:
				Service.gI().getFlag(0, -1);
				InfoDlg.showWait();
				return;
			case 100002:
			{
				bool flag7 = GameCanvas.loginScr == null;
				if (flag7)
				{
					GameCanvas.loginScr = new LoginScr();
				}
				GameCanvas.loginScr.backToRegister();
				return;
			}
			case 100003:
			case 100004:
				return;
			case 100005:
			{
				bool flag8 = global::Char.myCharz().statusMe == 14;
				if (flag8)
				{
					GameCanvas.startOKDlg(mResources.can_not_do_when_die);
				}
				else
				{
					Service.gI().openUIZone();
				}
				return;
			}
			case 100006:
				mSystem.onDisconnected();
				return;
			default:
				if (idAction != 100016)
				{
					return;
				}
				ServerListScreen.SetIpSelect(17, false);
				GameCanvas.instance.doResetToLoginScr(GameCanvas.serverScreen);
				ServerListScreen.waitToLogin = true;
				GameCanvas.endDlg();
				return;
			}
		}
		else
		{
			switch (idAction)
			{
			case 101023:
				Main.numberQuit = 0;
				return;
			case 101024:
				Res.outz("output 101024");
				GameCanvas.endDlg();
				return;
			case 101025:
			{
				GameCanvas.endDlg();
				bool loadScreen = ServerListScreen.loadScreen;
				if (loadScreen)
				{
					GameCanvas.serverScreen.switchToMe();
				}
				else
				{
					GameCanvas.serverScreen.show2();
				}
				return;
			}
			case 101026:
				mSystem.onDisconnected();
				return;
			default:
				if (idAction != 888361)
				{
					switch (idAction)
					{
					case 888391:
						goto IL_7EE;
					case 888392:
						Service.gI().menu(4, GameCanvas.menu.menuSelectedItem, 0);
						return;
					case 888393:
					{
						bool flag9 = GameCanvas.loginScr == null;
						if (flag9)
						{
							GameCanvas.loginScr = new LoginScr();
						}
						GameCanvas.loginScr.doLogin();
						Main.closeKeyBoard();
						return;
					}
					case 888394:
						GameCanvas.endDlg();
						return;
					case 888395:
						GameCanvas.endDlg();
						return;
					case 888396:
						GameCanvas.endDlg();
						return;
					case 888397:
					{
						string text2 = (string)p;
						return;
					}
					default:
						return;
					}
				}
				else
				{
					string text3 = GameCanvas.inputDlg.tfInput.getText();
					GameCanvas.endDlg();
					bool flag10 = text3.Length < 6 || text3.Equals(string.Empty);
					if (flag10)
					{
						GameCanvas.startOKDlg(mResources.ALERT_PRIVATE_PASS_1);
						return;
					}
					try
					{
						Service.gI().activeAccProtect(int.Parse(text3));
						return;
					}
					catch (Exception ex)
					{
						GameCanvas.startOKDlg(mResources.ALERT_PRIVATE_PASS_2);
						Cout.println("Loi tai 888361 Gamescavas " + ex.ToString());
						return;
					}
				}
				break;
			}
		}
		string text4 = GameCanvas.inputDlg.tfInput.getText();
		GameCanvas.endDlg();
		try
		{
			Service.gI().openLockAccProtect(int.Parse(text4.Trim()));
			return;
		}
		catch (Exception ex2)
		{
			Cout.println("Loi tai 88837 " + ex2.ToString());
			return;
		}
		IL_775:
		string text5 = GameCanvas.inputDlg.tfInput.getText();
		GameCanvas.endDlg();
		bool flag11 = text5.Length < 6 || text5.Equals(string.Empty);
		if (flag11)
		{
			GameCanvas.startOKDlg(mResources.ALERT_PRIVATE_PASS_1);
			return;
		}
		try
		{
			GameCanvas.startYesNoDlg(mResources.cancelAccountProtection, 888391, text5, 8882, null);
			return;
		}
		catch (Exception)
		{
			GameCanvas.startOKDlg(mResources.ALERT_PRIVATE_PASS_2);
			return;
		}
		IL_7EE:
		string s = (string)p;
		GameCanvas.endDlg();
		Service.gI().clearAccProtect(int.Parse(s));
	}

	// Token: 0x06000437 RID: 1079 RVA: 0x0004EAA0 File Offset: 0x0004CCA0
	public static void clearAllPointerEvent()
	{
		GameCanvas.isPointerClick = false;
		GameCanvas.isPointerDown = false;
		GameCanvas.isPointerJustDown = false;
		GameCanvas.isPointerJustRelease = false;
		GameCanvas.isPointerSelect = false;
		GameScr.gI().lastSingleClick = 0L;
		GameScr.gI().isPointerDowning = false;
	}

	// Token: 0x06000438 RID: 1080 RVA: 0x0004EAD8 File Offset: 0x0004CCD8
	public static bool isWait()
	{
		return global::Char.isLoadingMap || LoginScr.isContinueToLogin || ServerListScreen.waitToLogin || ServerListScreen.isWait || SelectCharScr.isWait;
	}

	// Token: 0x0400068C RID: 1676
	public static long timeNow = 0L;

	// Token: 0x0400068D RID: 1677
	public static bool open3Hour;

	// Token: 0x0400068E RID: 1678
	public static bool lowGraphic = true;

	// Token: 0x0400068F RID: 1679
	public static bool serverchat = false;

	// Token: 0x04000690 RID: 1680
	public static bool isMoveNumberPad = true;

	// Token: 0x04000691 RID: 1681
	public static bool isLoading;

	// Token: 0x04000692 RID: 1682
	public static bool isTouch = false;

	// Token: 0x04000693 RID: 1683
	public static bool isTouchControl;

	// Token: 0x04000694 RID: 1684
	public static bool isTouchControlSmallScreen;

	// Token: 0x04000695 RID: 1685
	public static bool isTouchControlLargeScreen;

	// Token: 0x04000696 RID: 1686
	public static bool isConnectFail;

	// Token: 0x04000697 RID: 1687
	public static GameCanvas instance;

	// Token: 0x04000698 RID: 1688
	public static bool bRun;

	// Token: 0x04000699 RID: 1689
	public static bool[] keyPressed = new bool[30];

	// Token: 0x0400069A RID: 1690
	public static bool[] keyReleased = new bool[30];

	// Token: 0x0400069B RID: 1691
	public static bool[] keyHold = new bool[30];

	// Token: 0x0400069C RID: 1692
	public static bool isPointerDown;

	// Token: 0x0400069D RID: 1693
	public static bool isPointerClick;

	// Token: 0x0400069E RID: 1694
	public static bool isPointerJustRelease;

	// Token: 0x0400069F RID: 1695
	public static bool isPointerSelect;

	// Token: 0x040006A0 RID: 1696
	public static bool isPointerMove;

	// Token: 0x040006A1 RID: 1697
	public static int px;

	// Token: 0x040006A2 RID: 1698
	public static int py;

	// Token: 0x040006A3 RID: 1699
	public static int pxFirst;

	// Token: 0x040006A4 RID: 1700
	public static int pyFirst;

	// Token: 0x040006A5 RID: 1701
	public static int pxLast;

	// Token: 0x040006A6 RID: 1702
	public static int pyLast;

	// Token: 0x040006A7 RID: 1703
	public static int pxMouse;

	// Token: 0x040006A8 RID: 1704
	public static int pyMouse;

	// Token: 0x040006A9 RID: 1705
	public static Position[] arrPos = new Position[4];

	// Token: 0x040006AA RID: 1706
	public static int gameTick;

	// Token: 0x040006AB RID: 1707
	public static int taskTick;

	// Token: 0x040006AC RID: 1708
	public static bool isEff1;

	// Token: 0x040006AD RID: 1709
	public static bool isEff2;

	// Token: 0x040006AE RID: 1710
	public static long timeTickEff1;

	// Token: 0x040006AF RID: 1711
	public static long timeTickEff2;

	// Token: 0x040006B0 RID: 1712
	public static int w;

	// Token: 0x040006B1 RID: 1713
	public static int h;

	// Token: 0x040006B2 RID: 1714
	public static int hw;

	// Token: 0x040006B3 RID: 1715
	public static int hh;

	// Token: 0x040006B4 RID: 1716
	public static int wd3;

	// Token: 0x040006B5 RID: 1717
	public static int hd3;

	// Token: 0x040006B6 RID: 1718
	public static int w2d3;

	// Token: 0x040006B7 RID: 1719
	public static int h2d3;

	// Token: 0x040006B8 RID: 1720
	public static int w3d4;

	// Token: 0x040006B9 RID: 1721
	public static int h3d4;

	// Token: 0x040006BA RID: 1722
	public static int wd6;

	// Token: 0x040006BB RID: 1723
	public static int hd6;

	// Token: 0x040006BC RID: 1724
	public static mScreen currentScreen;

	// Token: 0x040006BD RID: 1725
	public static Menu menu = new Menu();

	// Token: 0x040006BE RID: 1726
	public static Panel panel;

	// Token: 0x040006BF RID: 1727
	public static Panel panel2;

	// Token: 0x040006C0 RID: 1728
	public static ChooseCharScr chooseCharScr;

	// Token: 0x040006C1 RID: 1729
	public static LoginScr loginScr;

	// Token: 0x040006C2 RID: 1730
	public static RegisterScreen registerScr;

	// Token: 0x040006C3 RID: 1731
	public static Dialog currentDialog;

	// Token: 0x040006C4 RID: 1732
	public static MsgDlg msgdlg;

	// Token: 0x040006C5 RID: 1733
	public static InputDlg inputDlg;

	// Token: 0x040006C6 RID: 1734
	public static MyVector currentPopup = new MyVector();

	// Token: 0x040006C7 RID: 1735
	public static int requestLoseCount;

	// Token: 0x040006C8 RID: 1736
	public static MyVector listPoint;

	// Token: 0x040006C9 RID: 1737
	public static Paint paintz;

	// Token: 0x040006CA RID: 1738
	public static bool isGetResFromServer;

	// Token: 0x040006CB RID: 1739
	public static Image[] imgBG;

	// Token: 0x040006CC RID: 1740
	public static int skyColor;

	// Token: 0x040006CD RID: 1741
	public static int curPos = 0;

	// Token: 0x040006CE RID: 1742
	public static int[] bgW;

	// Token: 0x040006CF RID: 1743
	public static int[] bgH;

	// Token: 0x040006D0 RID: 1744
	public static int planet = 0;

	// Token: 0x040006D1 RID: 1745
	private mGraphics g = new mGraphics();

	// Token: 0x040006D2 RID: 1746
	public static Image img12;

	// Token: 0x040006D3 RID: 1747
	public static Image[] imgBlue = new Image[7];

	// Token: 0x040006D4 RID: 1748
	public static Image[] imgViolet = new Image[7];

	// Token: 0x040006D5 RID: 1749
	public static MyHashTable danhHieu = new MyHashTable();

	// Token: 0x040006D6 RID: 1750
	public static MyVector messageServer = new MyVector(string.Empty);

	// Token: 0x040006D7 RID: 1751
	public static bool isPlaySound = false;

	// Token: 0x040006D8 RID: 1752
	private static int clearOldData;

	// Token: 0x040006D9 RID: 1753
	public static int timeOpenKeyBoard;

	// Token: 0x040006DA RID: 1754
	public static bool isFocusPanel2;

	// Token: 0x040006DB RID: 1755
	public static int fps = 0;

	// Token: 0x040006DC RID: 1756
	public static int max;

	// Token: 0x040006DD RID: 1757
	public static int up;

	// Token: 0x040006DE RID: 1758
	public static int upmax;

	// Token: 0x040006DF RID: 1759
	private long timefps = mSystem.currentTimeMillis() + 1000L;

	// Token: 0x040006E0 RID: 1760
	private long timeup = mSystem.currentTimeMillis() + 1000L;

	// Token: 0x040006E1 RID: 1761
	public static int isRequestMapID = -1;

	// Token: 0x040006E2 RID: 1762
	public static long waitingTimeChangeMap;

	// Token: 0x040006E3 RID: 1763
	private static int dir_ = -1;

	// Token: 0x040006E4 RID: 1764
	private int tickWaitThongBao;

	// Token: 0x040006E5 RID: 1765
	public bool isPaintCarret;

	// Token: 0x040006E6 RID: 1766
	public static MyVector debugUpdate;

	// Token: 0x040006E7 RID: 1767
	public static MyVector debugPaint;

	// Token: 0x040006E8 RID: 1768
	public static MyVector debugSession;

	// Token: 0x040006E9 RID: 1769
	private static bool isShowErrorForm = false;

	// Token: 0x040006EA RID: 1770
	public static bool paintBG;

	// Token: 0x040006EB RID: 1771
	public static int gsskyHeight;

	// Token: 0x040006EC RID: 1772
	public static int gsgreenField1Y;

	// Token: 0x040006ED RID: 1773
	public static int gsgreenField2Y;

	// Token: 0x040006EE RID: 1774
	public static int gshouseY;

	// Token: 0x040006EF RID: 1775
	public static int gsmountainY;

	// Token: 0x040006F0 RID: 1776
	public static int bgLayer0y;

	// Token: 0x040006F1 RID: 1777
	public static int bgLayer1y;

	// Token: 0x040006F2 RID: 1778
	public static Image imgCloud;

	// Token: 0x040006F3 RID: 1779
	public static Image imgSun;

	// Token: 0x040006F4 RID: 1780
	public static Image imgSun2;

	// Token: 0x040006F5 RID: 1781
	public static Image imgClear;

	// Token: 0x040006F6 RID: 1782
	public static Image[] imgBorder = new Image[3];

	// Token: 0x040006F7 RID: 1783
	public static Image[] imgSunSpec = new Image[3];

	// Token: 0x040006F8 RID: 1784
	public static int borderConnerW;

	// Token: 0x040006F9 RID: 1785
	public static int borderConnerH;

	// Token: 0x040006FA RID: 1786
	public static int borderCenterW;

	// Token: 0x040006FB RID: 1787
	public static int borderCenterH;

	// Token: 0x040006FC RID: 1788
	public static int[] cloudX;

	// Token: 0x040006FD RID: 1789
	public static int[] cloudY;

	// Token: 0x040006FE RID: 1790
	public static int sunX;

	// Token: 0x040006FF RID: 1791
	public static int sunY;

	// Token: 0x04000700 RID: 1792
	public static int sunX2;

	// Token: 0x04000701 RID: 1793
	public static int sunY2;

	// Token: 0x04000702 RID: 1794
	public static int[] layerSpeed;

	// Token: 0x04000703 RID: 1795
	public static int[] moveX;

	// Token: 0x04000704 RID: 1796
	public static int[] moveXSpeed;

	// Token: 0x04000705 RID: 1797
	public static bool isBoltEff;

	// Token: 0x04000706 RID: 1798
	public static bool boltActive;

	// Token: 0x04000707 RID: 1799
	public static int tBolt;

	// Token: 0x04000708 RID: 1800
	public static Image imgBgIOS;

	// Token: 0x04000709 RID: 1801
	public static int typeBg = -1;

	// Token: 0x0400070A RID: 1802
	public static int transY;

	// Token: 0x0400070B RID: 1803
	public static int[] yb = new int[5];

	// Token: 0x0400070C RID: 1804
	public static int[] colorTop;

	// Token: 0x0400070D RID: 1805
	public static int[] colorBotton;

	// Token: 0x0400070E RID: 1806
	public static int yb1;

	// Token: 0x0400070F RID: 1807
	public static int yb2;

	// Token: 0x04000710 RID: 1808
	public static int yb3;

	// Token: 0x04000711 RID: 1809
	public static int nBg = 0;

	// Token: 0x04000712 RID: 1810
	public static int lastBg = -1;

	// Token: 0x04000713 RID: 1811
	public static int[] bgRain = new int[]
	{
		1,
		4,
		11
	};

	// Token: 0x04000714 RID: 1812
	public static int[] bgRainFont = new int[]
	{
		-1
	};

	// Token: 0x04000715 RID: 1813
	public static Image imgCaycot;

	// Token: 0x04000716 RID: 1814
	public static Image tam;

	// Token: 0x04000717 RID: 1815
	public static int typeBackGround = -1;

	// Token: 0x04000718 RID: 1816
	public static int saveIDBg = -10;

	// Token: 0x04000719 RID: 1817
	public static bool isLoadBGok;

	// Token: 0x0400071A RID: 1818
	private static long lastTimePress = 0L;

	// Token: 0x0400071B RID: 1819
	public static int keyAsciiPress;

	// Token: 0x0400071C RID: 1820
	public static int pXYScrollMouse;

	// Token: 0x0400071D RID: 1821
	private static Image imgSignal;

	// Token: 0x0400071E RID: 1822
	public static MyVector flyTexts = new MyVector();

	// Token: 0x0400071F RID: 1823
	public int longTime;

	// Token: 0x04000720 RID: 1824
	public static long timeBreakLoading;

	// Token: 0x04000721 RID: 1825
	private static string thongBaoTest;

	// Token: 0x04000722 RID: 1826
	public static int xThongBaoTranslate = GameCanvas.w - 60;

	// Token: 0x04000723 RID: 1827
	public static bool isPointerJustDown = false;

	// Token: 0x04000724 RID: 1828
	private int count = 1;

	// Token: 0x04000725 RID: 1829
	public static bool csWait;

	// Token: 0x04000726 RID: 1830
	public static MyRandom r = new MyRandom();

	// Token: 0x04000727 RID: 1831
	public static bool isBlackScreen;

	// Token: 0x04000728 RID: 1832
	public static int[] bgSpeed;

	// Token: 0x04000729 RID: 1833
	public static int cmdBarX;

	// Token: 0x0400072A RID: 1834
	public static int cmdBarY;

	// Token: 0x0400072B RID: 1835
	public static int cmdBarW;

	// Token: 0x0400072C RID: 1836
	public static int cmdBarH;

	// Token: 0x0400072D RID: 1837
	public static int cmdBarLeftW;

	// Token: 0x0400072E RID: 1838
	public static int cmdBarRightW;

	// Token: 0x0400072F RID: 1839
	public static int cmdBarCenterW;

	// Token: 0x04000730 RID: 1840
	public static int hpBarX;

	// Token: 0x04000731 RID: 1841
	public static int hpBarY;

	// Token: 0x04000732 RID: 1842
	public static int hpBarW;

	// Token: 0x04000733 RID: 1843
	public static int expBarW;

	// Token: 0x04000734 RID: 1844
	public static int lvPosX;

	// Token: 0x04000735 RID: 1845
	public static int moneyPosX;

	// Token: 0x04000736 RID: 1846
	public static int hpBarH;

	// Token: 0x04000737 RID: 1847
	public static int girlHPBarY;

	// Token: 0x04000738 RID: 1848
	public int timeOut;

	// Token: 0x04000739 RID: 1849
	public int[] dustX;

	// Token: 0x0400073A RID: 1850
	public int[] dustY;

	// Token: 0x0400073B RID: 1851
	public int[] dustState;

	// Token: 0x0400073C RID: 1852
	public static int[] wsX;

	// Token: 0x0400073D RID: 1853
	public static int[] wsY;

	// Token: 0x0400073E RID: 1854
	public static int[] wsState;

	// Token: 0x0400073F RID: 1855
	public static int[] wsF;

	// Token: 0x04000740 RID: 1856
	public static Image[] imgWS;

	// Token: 0x04000741 RID: 1857
	public static Image imgShuriken;

	// Token: 0x04000742 RID: 1858
	public static Image[][] imgDust;

	// Token: 0x04000743 RID: 1859
	public static bool isResume;

	// Token: 0x04000744 RID: 1860
	public static ServerListScreen serverScreen;

	// Token: 0x04000745 RID: 1861
	public static ServerScr serverScr;

	// Token: 0x04000746 RID: 1862
	public static SelectCharScr _SelectCharScr;

	// Token: 0x04000747 RID: 1863
	public bool resetToLoginScr;

	// Token: 0x04000748 RID: 1864
	public static long TIMEOUT;

	// Token: 0x04000749 RID: 1865
	public static int timeLoading = 15;
}
using System;
using UnityEngine;

// Token: 0x02000056 RID: 86
public class GameMidlet
{
	// Token: 0x0600043A RID: 1082 RVA: 0x0004EC72 File Offset: 0x0004CE72
	public GameMidlet()
	{
		this.initGame();
	}

	// Token: 0x0600043B RID: 1083 RVA: 0x0004EC84 File Offset: 0x0004CE84
	public void initGame()
	{
		GameMidlet.instance = this;
		MotherCanvas.instance = new MotherCanvas();
		Session_ME.gI().setHandler(Controller.gI());
		Session_ME2.gI().setHandler(Controller.gI());
		Session_ME2.isMainSession = false;
		GameMidlet.instance = this;
		GameMidlet.gameCanvas = new GameCanvas();
		GameMidlet.gameCanvas.start();
		SplashScr.loadImg();
		SplashScr.loadSplashScr();
		GameCanvas.currentScreen = new SplashScr();
	}

	// Token: 0x0600043C RID: 1084 RVA: 0x0004ECFC File Offset: 0x0004CEFC
	public void exit()
	{
		bool flag = Main.typeClient == 6;
		if (flag)
		{
			mSystem.exitWP();
		}
		else
		{
			GameCanvas.bRun = false;
			mSystem.gcc();
			this.notifyDestroyed();
		}
	}

	// Token: 0x0600043D RID: 1085 RVA: 0x0004ED32 File Offset: 0x0004CF32
	public static void sendSMS(string data, string to, Command successAction, Command failAction)
	{
		Cout.println("SEND SMS");
	}

	// Token: 0x0600043E RID: 1086 RVA: 0x0004ED40 File Offset: 0x0004CF40
	public static void flatForm(string url)
	{
		Cout.LogWarning("PLATFORM REQUEST: " + url);
		Application.OpenURL(url);
	}

	// Token: 0x0600043F RID: 1087 RVA: 0x0004ED5B File Offset: 0x0004CF5B
	public void notifyDestroyed()
	{
		Main.exit();
	}

	// Token: 0x06000440 RID: 1088 RVA: 0x0004ED64 File Offset: 0x0004CF64
	public void platformRequest(string url)
	{
		Cout.LogWarning("PLATFORM REQUEST: " + url);
		Application.OpenURL(url);
	}

	// Token: 0x0400074A RID: 1866
	public static string IP = "112.213.94.23";

	// Token: 0x0400074B RID: 1867
	public static int PORT = 14445;

	// Token: 0x0400074C RID: 1868
	public static string IP2;

	// Token: 0x0400074D RID: 1869
	public static int PORT2;

	// Token: 0x0400074E RID: 1870
	public static sbyte PROVIDER;

	// Token: 0x0400074F RID: 1871
	public static int LANGUAGE;

	// Token: 0x04000750 RID: 1872
	public static string VERSION = "2.4.3";

	// Token: 0x04000751 RID: 1873
	public static int intVERSION = 243;

	// Token: 0x04000752 RID: 1874
	public static GameCanvas gameCanvas;

	// Token: 0x04000753 RID: 1875
	public static GameMidlet instance;

	// Token: 0x04000754 RID: 1876
	public static bool isConnect2;

	// Token: 0x04000755 RID: 1877
	public static bool isBackWindowsPhone;
}
using System;

// Token: 0x02000057 RID: 87
public class GamePad
{
	// Token: 0x06000442 RID: 1090 RVA: 0x0004EDAC File Offset: 0x0004CFAC
	public GamePad()
	{
		this.R = 28;
		bool flag = GameCanvas.w < 300;
		if (flag)
		{
			this.isSmallGamePad = true;
			this.isMediumGamePad = false;
			this.isLargeGamePad = false;
		}
		bool flag2 = GameCanvas.w >= 300 && GameCanvas.w <= 380;
		if (flag2)
		{
			this.isSmallGamePad = false;
			this.isMediumGamePad = true;
			this.isLargeGamePad = false;
		}
		bool flag3 = GameCanvas.w > 380;
		if (flag3)
		{
			this.isSmallGamePad = false;
			this.isMediumGamePad = false;
			this.isLargeGamePad = true;
		}
		bool flag4 = !this.isLargeGamePad;
		if (flag4)
		{
			this.xZone = 0;
			this.wZone = GameCanvas.hw;
			this.yZone = GameCanvas.hh >> 1;
			this.hZone = GameCanvas.h - 80;
		}
		else
		{
			this.xZone = 0;
			this.wZone = GameCanvas.hw / 4 * 3 - 20;
			this.yZone = GameCanvas.hh >> 1;
			this.hZone = GameCanvas.h;
			bool flag5 = mSystem.clientType == 2;
			if (flag5)
			{
				this.xZone = 0;
				this.yZone = (GameCanvas.h >> 1) + 40;
				this.wZone = GameCanvas.hw / 4 * 3 - 40;
				this.hZone = GameCanvas.h;
			}
		}
	}

	// Token: 0x06000443 RID: 1091 RVA: 0x0004EF04 File Offset: 0x0004D104
	public void update()
	{
		try
		{
			bool flag = GameScr.isAnalog == 0;
			if (!flag)
			{
				bool flag2 = GameCanvas.isPointerDown && !GameCanvas.isPointerJustRelease;
				if (flag2)
				{
					this.xTemp = GameCanvas.pxFirst;
					this.yTemp = GameCanvas.pyFirst;
					bool flag3 = this.xTemp < this.xZone || this.xTemp > this.wZone || this.yTemp < this.yZone || this.yTemp > this.hZone;
					if (!flag3)
					{
						bool flag4 = !this.isGamePad;
						if (flag4)
						{
							this.xC = (this.xM = this.xTemp);
							this.yC = (this.yM = this.yTemp);
						}
						this.isGamePad = true;
						this.deltaX = GameCanvas.px - this.xC;
						this.deltaY = GameCanvas.py - this.yC;
						this.delta = global::Math.pow(this.deltaX, 2) + global::Math.pow(this.deltaY, 2);
						this.d = Res.sqrt(this.delta);
						bool flag5 = global::Math.abs(this.deltaX) <= 4 && global::Math.abs(this.deltaY) <= 4;
						if (!flag5)
						{
							this.angle = Res.angle(this.deltaX, this.deltaY);
							bool flag6 = !GameCanvas.isPointerHoldIn(this.xC - this.R, this.yC - this.R, 2 * this.R, 2 * this.R);
							if (flag6)
							{
								bool flag7 = this.d != 0;
								if (flag7)
								{
									this.yM = this.deltaY * this.R / this.d;
									this.xM = this.deltaX * this.R / this.d;
									this.xM += this.xC;
									this.yM += this.yC;
									bool flag8 = !Res.inRect(this.xC - this.R, this.yC - this.R, 2 * this.R, 2 * this.R, this.xM, this.yM);
									if (flag8)
									{
										this.xM = this.xMLast;
										this.yM = this.yMLast;
									}
									else
									{
										this.xMLast = this.xM;
										this.yMLast = this.yM;
									}
								}
								else
								{
									this.xM = this.xMLast;
									this.yM = this.yMLast;
								}
							}
							else
							{
								this.xM = GameCanvas.px;
								this.yM = GameCanvas.py;
							}
							this.resetHold();
							bool flag9 = this.checkPointerMove(2);
							if (flag9)
							{
								bool flag10 = (this.angle <= 360 && this.angle >= 340) || (this.angle >= 0 && this.angle <= 20);
								if (flag10)
								{
									GameCanvas.keyHold[(!Main.isPC) ? 6 : 24] = true;
									GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24] = true;
								}
								else
								{
									bool flag11 = this.angle > 40 && this.angle < 70;
									if (flag11)
									{
										GameCanvas.keyHold[(!Main.isPC) ? 6 : 24] = true;
										GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24] = true;
									}
									else
									{
										bool flag12 = this.angle >= 70 && this.angle <= 110;
										if (flag12)
										{
											GameCanvas.keyHold[(!Main.isPC) ? 8 : 22] = true;
											GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] = true;
										}
										else
										{
											bool flag13 = this.angle > 110 && this.angle < 120;
											if (flag13)
											{
												GameCanvas.keyHold[(!Main.isPC) ? 4 : 23] = true;
												GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23] = true;
											}
											else
											{
												bool flag14 = this.angle >= 120 && this.angle <= 200;
												if (flag14)
												{
													GameCanvas.keyHold[(!Main.isPC) ? 4 : 23] = true;
													GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23] = true;
												}
												else
												{
													bool flag15 = this.angle > 200 && this.angle < 250;
													if (flag15)
													{
														GameCanvas.keyHold[(!Main.isPC) ? 2 : 21] = true;
														GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] = true;
														GameCanvas.keyHold[(!Main.isPC) ? 4 : 23] = true;
														GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23] = true;
													}
													else
													{
														bool flag16 = this.angle >= 250 && this.angle <= 290;
														if (flag16)
														{
															GameCanvas.keyHold[(!Main.isPC) ? 2 : 21] = true;
															GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] = true;
														}
														else
														{
															bool flag17 = this.angle > 290 && this.angle < 340;
															if (flag17)
															{
																GameCanvas.keyHold[(!Main.isPC) ? 2 : 21] = true;
																GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] = true;
																GameCanvas.keyHold[(!Main.isPC) ? 6 : 24] = true;
																GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24] = true;
															}
														}
													}
												}
											}
										}
									}
								}
							}
							else
							{
								this.resetHold();
							}
						}
					}
				}
				else
				{
					this.xM = (this.xC = 45);
					bool flag18 = !this.isLargeGamePad;
					if (flag18)
					{
						this.yM = (this.yC = GameCanvas.h - 90);
					}
					else
					{
						this.yM = (this.yC = GameCanvas.h - 45);
					}
					this.isGamePad = false;
					this.resetHold();
				}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000444 RID: 1092 RVA: 0x0004F558 File Offset: 0x0004D758
	private bool checkPointerMove(int distance)
	{
		bool flag = GameScr.isAnalog == 0;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = global::Char.myCharz().statusMe == 3;
			if (flag2)
			{
				result = true;
			}
			else
			{
				try
				{
					for (int i = 2; i > 0; i--)
					{
						int i2 = GameCanvas.arrPos[i].x - GameCanvas.arrPos[i - 1].x;
						int i3 = GameCanvas.arrPos[i].y - GameCanvas.arrPos[i - 1].y;
						bool flag3 = Res.abs(i2) > distance && Res.abs(i3) > distance;
						if (flag3)
						{
							return false;
						}
					}
				}
				catch (Exception)
				{
				}
				result = true;
			}
		}
		return result;
	}

	// Token: 0x06000445 RID: 1093 RVA: 0x0004F620 File Offset: 0x0004D820
	private void resetHold()
	{
		GameCanvas.clearKeyHold();
	}

	// Token: 0x06000446 RID: 1094 RVA: 0x0004F62C File Offset: 0x0004D82C
	public void paint(mGraphics g)
	{
		bool flag = GameScr.isAnalog != 0;
		if (flag)
		{
			this.xZone = 0;
			this.yZone = (GameCanvas.h >> 1) + 40;
			this.wZone = GameCanvas.hw / 4 * 3 - 40;
			this.hZone = GameCanvas.h;
			g.drawImage(GameScr.imgAnalog1, this.xC, this.yC, mGraphics.HCENTER | mGraphics.VCENTER);
			g.drawImage(GameScr.imgAnalog2, this.xM, this.yM, mGraphics.HCENTER | mGraphics.VCENTER);
		}
	}

	// Token: 0x06000447 RID: 1095 RVA: 0x0004F6C4 File Offset: 0x0004D8C4
	public bool disableCheckDrag()
	{
		bool flag = GameScr.isAnalog == 0;
		return !flag && this.isGamePad;
	}

	// Token: 0x06000448 RID: 1096 RVA: 0x0004F6F0 File Offset: 0x0004D8F0
	public bool disableClickMove()
	{
		bool result;
		try
		{
			bool flag = GameScr.isAnalog == 0;
			if (flag)
			{
				result = false;
			}
			else
			{
				result = ((GameCanvas.px >= this.xZone && GameCanvas.px <= this.xZone + this.wZone && GameCanvas.py >= this.yZone && GameCanvas.py <= this.yZone + this.hZone) || (GameCanvas.px >= this.xZone && GameCanvas.px <= GameCanvas.w && GameCanvas.py >= this.yZone && GameCanvas.py <= this.yZone + this.hZone) || GameCanvas.px >= GameCanvas.w - 50);
			}
		}
		catch (Exception)
		{
			result = false;
		}
		return result;
	}

	// Token: 0x04000756 RID: 1878
	private int xC;

	// Token: 0x04000757 RID: 1879
	private int yC;

	// Token: 0x04000758 RID: 1880
	private int xM;

	// Token: 0x04000759 RID: 1881
	private int yM;

	// Token: 0x0400075A RID: 1882
	private int xMLast;

	// Token: 0x0400075B RID: 1883
	private int yMLast;

	// Token: 0x0400075C RID: 1884
	private int R;

	// Token: 0x0400075D RID: 1885
	private int r;

	// Token: 0x0400075E RID: 1886
	private int d;

	// Token: 0x0400075F RID: 1887
	private int xTemp;

	// Token: 0x04000760 RID: 1888
	private int yTemp;

	// Token: 0x04000761 RID: 1889
	private int deltaX;

	// Token: 0x04000762 RID: 1890
	private int deltaY;

	// Token: 0x04000763 RID: 1891
	private int delta;

	// Token: 0x04000764 RID: 1892
	private int angle;

	// Token: 0x04000765 RID: 1893
	public int xZone;

	// Token: 0x04000766 RID: 1894
	public int yZone;

	// Token: 0x04000767 RID: 1895
	public int wZone;

	// Token: 0x04000768 RID: 1896
	public int hZone;

	// Token: 0x04000769 RID: 1897
	private bool isGamePad;

	// Token: 0x0400076A RID: 1898
	public bool isSmallGamePad;

	// Token: 0x0400076B RID: 1899
	public bool isMediumGamePad;

	// Token: 0x0400076C RID: 1900
	public bool isLargeGamePad;
}
using System;
using System.Threading;
using AssemblyCSharp.Mod.Xmap;
using Assets.src.g;

// Token: 0x02000058 RID: 88
public class GameScr : mScreen, IChatable
{
	// Token: 0x06000449 RID: 1097 RVA: 0x0004F7C0 File Offset: 0x0004D9C0
	public GameScr()
	{
		bool flag = GameCanvas.w == 128 || GameCanvas.h <= 208;
		if (flag)
		{
			GameScr.indexSize = 20;
		}
		this.cmdback = new Command(string.Empty, 11021);
		this.cmdMenu = new Command("menu", 11000);
		this.cmdFocus = new Command(string.Empty, 11001);
		this.cmdMenu.img = GameScr.imgMenu;
		this.cmdMenu.w = mGraphics.getImageWidth(this.cmdMenu.img) + 20;
		this.cmdMenu.isPlaySoundButton = false;
		this.cmdFocus.img = GameScr.imgFocus;
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.cmdMenu.x = 0;
			this.cmdMenu.y = 50;
			this.cmdFocus = null;
		}
		else
		{
			this.cmdMenu.x = 0;
			this.cmdMenu.y = GameScr.gH - 30;
			this.cmdFocus.x = GameScr.gW - 32;
			this.cmdFocus.y = GameScr.gH - 32;
		}
		this.right = this.cmdFocus;
		GameScr.isPaintRada = 1;
		bool isTouch2 = GameCanvas.isTouch;
		if (isTouch2)
		{
			GameScr.isHaveSelectSkill = true;
		}
		this.cmdDoiCo = new Command("Đổi cờ", GameCanvas.gI(), 100001, null);
		this.cmdLogOut = new Command("Logout", GameCanvas.gI(), 100002, null);
		this.cmdChatTheGioi = new Command("chat world", GameCanvas.gI(), 100003, null);
		this.cmdshowInfo = new Command("InfoLog", GameCanvas.gI(), 100004, null);
		this.cmdDoiCo.setType();
		this.cmdLogOut.setType();
		this.cmdChatTheGioi.setType();
		this.cmdshowInfo.setType();
		this.cmdChatTheGioi.x = GameCanvas.w - this.cmdChatTheGioi.w;
		this.cmdshowInfo.x = GameCanvas.w - this.cmdshowInfo.w;
		this.cmdLogOut.x = GameCanvas.w - this.cmdLogOut.w;
		this.cmdDoiCo.x = GameCanvas.w - this.cmdDoiCo.w;
		this.cmdChatTheGioi.y = this.cmdChatTheGioi.h + mFont.tahoma_7_white.getHeight();
		this.cmdshowInfo.y = this.cmdChatTheGioi.h * 2 + mFont.tahoma_7_white.getHeight();
		this.cmdLogOut.y = this.cmdChatTheGioi.h * 3 + mFont.tahoma_7_white.getHeight();
		this.cmdDoiCo.y = this.cmdChatTheGioi.h * 4 + mFont.tahoma_7_white.getHeight();
	}

	// Token: 0x0600044A RID: 1098 RVA: 0x0004FB38 File Offset: 0x0004DD38
	public static void loadBg()
	{
		GameScr.fra_PVE_Bar_0 = new FrameImage(mSystem.loadImage("/mainImage/i_pve_bar_0.png"), 6, 15);
		GameScr.fra_PVE_Bar_1 = new FrameImage(mSystem.loadImage("/mainImage/i_pve_bar_1.png"), 38, 21);
		GameScr.imgVS = mSystem.loadImage("/mainImage/i_vs.png");
		GameScr.imgHP_NEW = mSystem.loadImage("/mainImage/i_hp.png");
		GameScr.imgKhung = mSystem.loadImage("/mainImage/i_khung.png");
		GameScr.imgMenu = GameCanvas.loadImage("/mainImage/myTexture2dmenu.png");
		GameScr.imgFocus = GameCanvas.loadImage("/mainImage/myTexture2dfocus.png");
		GameScr.imgHP_tm_do = GameCanvas.loadImage("/mainImage/tm-do.png");
		GameScr.imgHP_tm_vang = GameCanvas.loadImage("/mainImage/tm-vang.png");
		GameScr.imgHP_tm_xam = GameCanvas.loadImage("/mainImage/tm-xam.png");
		GameScr.imgHP_tm_xanh = GameCanvas.loadImage("/mainImage/tm-xanh.png");
		GameScr.imgNR1 = GameCanvas.loadImage("/mainImage/myTexture2dPea_0.png");
		GameScr.imgNR2 = GameCanvas.loadImage("/mainImage/myTexture2dPea_1.png");
		GameScr.imgNR3 = GameCanvas.loadImage("/mainImage/myTexture2dPea_2.png");
		GameScr.imgNR4 = GameCanvas.loadImage("/mainImage/myTexture2dPea_3.png");
		GameScr.flyTextX = new int[5];
		GameScr.flyTextY = new int[5];
		GameScr.flyTextDx = new int[5];
		GameScr.flyTextDy = new int[5];
		GameScr.flyTextState = new int[5];
		GameScr.flyTextString = new string[5];
		GameScr.flyTextYTo = new int[5];
		GameScr.flyTime = new int[5];
		GameScr.flyTextColor = new int[8];
		for (int i = 0; i < 5; i++)
		{
			GameScr.flyTextState[i] = -1;
		}
		sbyte[] array = Rms.loadRMS("NRdataVersion");
		sbyte[] array2 = Rms.loadRMS("NRmapVersion");
		sbyte[] array3 = Rms.loadRMS("NRskillVersion");
		sbyte[] array4 = Rms.loadRMS("NRitemVersion");
		bool flag = array != null;
		if (flag)
		{
			GameScr.vcData = array[0];
		}
		bool flag2 = array2 != null;
		if (flag2)
		{
			GameScr.vcMap = array2[0];
		}
		bool flag3 = array3 != null;
		if (flag3)
		{
			GameScr.vcSkill = array3[0];
		}
		bool flag4 = array4 != null;
		if (flag4)
		{
			GameScr.vcItem = array4[0];
		}
		GameScr.imgNut = GameCanvas.loadImage("/mainImage/myTexture2dnut.png");
		GameScr.imgNutF = GameCanvas.loadImage("/mainImage/myTexture2dnutF.png");
		MobCapcha.init();
		GameScr.isAnalog = ((Rms.loadRMSInt("analog") == 1) ? 1 : 0);
		GameScr.gamePad = new GamePad();
		GameScr.arrow = GameCanvas.loadImage("/mainImage/myTexture2darrow3.png");
		GameScr.imgTrans = GameCanvas.loadImage("/bg/trans.png");
		GameScr.imgRoomStat = GameCanvas.loadImage("/mainImage/myTexture2dstat.png");
		GameScr.frBarPow0 = GameCanvas.loadImage("/mainImage/myTexture2dlineColor20.png");
		GameScr.frBarPow1 = GameCanvas.loadImage("/mainImage/myTexture2dlineColor21.png");
		GameScr.frBarPow2 = GameCanvas.loadImage("/mainImage/myTexture2dlineColor22.png");
		GameScr.frBarPow20 = GameCanvas.loadImage("/mainImage/myTexture2dlineColor00.png");
		GameScr.frBarPow21 = GameCanvas.loadImage("/mainImage/myTexture2dlineColor01.png");
		GameScr.frBarPow22 = GameCanvas.loadImage("/mainImage/myTexture2dlineColor02.png");
	}

	// Token: 0x0600044B RID: 1099 RVA: 0x0004FE03 File Offset: 0x0004E003
	public void initSelectChar()
	{
		this.readPart();
		SmallImage.init();
	}

	// Token: 0x0600044C RID: 1100 RVA: 0x0004FE14 File Offset: 0x0004E014
	public static void paintOngMauPercent(Image img0, Image img1, Image img2, float x, float y, int size, float pixelPercent, mGraphics g)
	{
		int clipX = g.getClipX();
		int clipY = g.getClipY();
		int clipWidth = g.getClipWidth();
		int clipHeight = g.getClipHeight();
		g.setClip((int)x, (int)y, (int)pixelPercent, 13);
		int num = size / 15 - 2;
		for (int i = 0; i < num; i++)
		{
			g.drawImage(img1, x + (float)((i + 1) * 15), y, 0);
		}
		g.drawImage(img0, x, y, 0);
		g.drawImage(img1, x + (float)size - 30f, y, 0);
		g.drawImage(img2, x + (float)size - 15f, y, 0);
		g.setClip(clipX, clipY, clipWidth, clipHeight);
	}

	// Token: 0x0600044D RID: 1101 RVA: 0x0004FED4 File Offset: 0x0004E0D4
	public void initTraining()
	{
		bool isCreateChar = CreateCharScr.isCreateChar;
		if (isCreateChar)
		{
			CreateCharScr.isCreateChar = false;
			this.right = null;
		}
	}

	// Token: 0x0600044E RID: 1102 RVA: 0x0004FEFC File Offset: 0x0004E0FC
	public bool isMapDocNhan()
	{
		return TileMap.mapID >= 53 && TileMap.mapID <= 62;
	}

	// Token: 0x0600044F RID: 1103 RVA: 0x0004FF30 File Offset: 0x0004E130
	public bool isMapFize()
	{
		return TileMap.mapID >= 63;
	}

	// Token: 0x06000450 RID: 1104 RVA: 0x0004FF58 File Offset: 0x0004E158
	public override void switchToMe()
	{
		GameScr.vChatVip.removeAllElements();
		ServerListScreen.isWait = false;
		bool flag = BackgroudEffect.isHaveRain();
		if (flag)
		{
			SoundMn.gI().rain();
		}
		LoginScr.isContinueToLogin = false;
		global::Char.isLoadingMap = false;
		bool flag2 = !GameScr.isPaintOther;
		if (flag2)
		{
			Service.gI().finishLoadMap();
		}
		bool flag3 = TileMap.isTrainingMap();
		if (flag3)
		{
			this.initTraining();
		}
		GameScr.info1.isUpdate = true;
		GameScr.info2.isUpdate = true;
		this.resetButton();
		GameScr.isLoadAllData = true;
		GameScr.isPaintOther = false;
		base.switchToMe();
	}

	// Token: 0x06000451 RID: 1105 RVA: 0x0004FFF4 File Offset: 0x0004E1F4
	public static int getMaxExp(int level)
	{
		int num = 0;
		for (int i = 0; i <= level; i++)
		{
			num += (int)GameScr.exps[i];
		}
		return num;
	}

	// Token: 0x06000452 RID: 1106 RVA: 0x0005002C File Offset: 0x0004E22C
	public static void resetAllvector()
	{
		GameScr.vCharInMap.removeAllElements();
		Teleport.vTeleport.removeAllElements();
		GameScr.vItemMap.removeAllElements();
		Effect2.vEffect2.removeAllElements();
		Effect2.vAnimateEffect.removeAllElements();
		Effect2.vEffect2Outside.removeAllElements();
		Effect2.vEffectFeet.removeAllElements();
		Effect2.vEffect3.removeAllElements();
		GameScr.vMobAttack.removeAllElements();
		GameScr.vMob.removeAllElements();
		GameScr.vNpc.removeAllElements();
		global::Char.myCharz().vMovePoints.removeAllElements();
	}

	// Token: 0x06000453 RID: 1107 RVA: 0x000500C3 File Offset: 0x0004E2C3
	public void loadSkillShortcut()
	{
	}

	// Token: 0x06000454 RID: 1108 RVA: 0x000500C8 File Offset: 0x0004E2C8
	public void onOSkill(sbyte[] oSkillID)
	{
		Cout.println("GET onScreenSkill!");
		GameScr.onScreenSkill = new Skill[10];
		bool flag = oSkillID == null;
		if (flag)
		{
			this.loadDefaultonScreenSkill();
		}
		else
		{
			for (int i = 0; i < oSkillID.Length; i++)
			{
				for (int j = 0; j < global::Char.myCharz().vSkillFight.size(); j++)
				{
					Skill skill = (Skill)global::Char.myCharz().vSkillFight.elementAt(j);
					bool flag2 = skill.template.id == oSkillID[i];
					if (flag2)
					{
						GameScr.onScreenSkill[i] = skill;
						break;
					}
				}
			}
		}
	}

	// Token: 0x06000455 RID: 1109 RVA: 0x00050170 File Offset: 0x0004E370
	public void onKSkill(sbyte[] kSkillID)
	{
		Cout.println("GET KEYSKILL!");
		GameScr.keySkill = new Skill[10];
		bool flag = kSkillID == null;
		if (flag)
		{
			this.loadDefaultKeySkill();
		}
		else
		{
			for (int i = 0; i < kSkillID.Length; i++)
			{
				for (int j = 0; j < global::Char.myCharz().vSkillFight.size(); j++)
				{
					Skill skill = (Skill)global::Char.myCharz().vSkillFight.elementAt(j);
					bool flag2 = skill.template.id == kSkillID[i];
					if (flag2)
					{
						GameScr.keySkill[i] = skill;
						break;
					}
				}
			}
		}
	}

	// Token: 0x06000456 RID: 1110 RVA: 0x00050218 File Offset: 0x0004E418
	public void onCSkill(sbyte[] cSkillID)
	{
		Cout.println("GET CURRENTSKILL!");
		bool flag = cSkillID == null || cSkillID.Length == 0;
		if (flag)
		{
			bool flag2 = global::Char.myCharz().vSkillFight.size() > 0;
			if (flag2)
			{
				global::Char.myCharz().myskill = (Skill)global::Char.myCharz().vSkillFight.elementAt(0);
			}
		}
		else
		{
			for (int i = 0; i < global::Char.myCharz().vSkillFight.size(); i++)
			{
				Skill skill = (Skill)global::Char.myCharz().vSkillFight.elementAt(i);
				bool flag3 = skill.template.id == cSkillID[0];
				if (flag3)
				{
					global::Char.myCharz().myskill = skill;
					break;
				}
			}
		}
		bool flag4 = global::Char.myCharz().myskill != null;
		if (flag4)
		{
			Service.gI().selectSkill((int)global::Char.myCharz().myskill.template.id);
			this.saveRMSCurrentSkill(global::Char.myCharz().myskill.template.id);
		}
	}

	// Token: 0x06000457 RID: 1111 RVA: 0x00050328 File Offset: 0x0004E528
	private void loadDefaultonScreenSkill()
	{
		Cout.println("LOAD DEFAULT ONmScreen SKILL");
		int num = 0;
		while (num < GameScr.onScreenSkill.Length && num < global::Char.myCharz().vSkillFight.size())
		{
			Skill skill = (Skill)global::Char.myCharz().vSkillFight.elementAt(num);
			GameScr.onScreenSkill[num] = skill;
			num++;
		}
		this.saveonScreenSkillToRMS();
	}

	// Token: 0x06000458 RID: 1112 RVA: 0x00050394 File Offset: 0x0004E594
	private void loadDefaultKeySkill()
	{
		Cout.println("LOAD DEFAULT KEY SKILL");
		int num = 0;
		while (num < GameScr.keySkill.Length && num < global::Char.myCharz().vSkillFight.size())
		{
			Skill skill = (Skill)global::Char.myCharz().vSkillFight.elementAt(num);
			GameScr.keySkill[num] = skill;
			num++;
		}
		this.saveKeySkillToRMS();
	}

	// Token: 0x06000459 RID: 1113 RVA: 0x00050400 File Offset: 0x0004E600
	public void doSetOnScreenSkill(SkillTemplate skillTemplate)
	{
		Skill skill = global::Char.myCharz().getSkill(skillTemplate);
		MyVector myVector = new MyVector();
		for (int i = 0; i < 10; i++)
		{
			object p = new object[]
			{
				skill,
				i.ToString() + string.Empty
			};
			Command command = new Command(mResources.into_place + (i + 1).ToString(), 11120, p);
			Skill skill2 = GameScr.onScreenSkill[i];
			bool flag = skill2 != null;
			if (flag)
			{
				command.isDisplay = true;
			}
			myVector.addElement(command);
		}
		GameCanvas.menu.startAt(myVector, 0);
	}

	// Token: 0x0600045A RID: 1114 RVA: 0x000504AC File Offset: 0x0004E6AC
	public void doSetKeySkill(SkillTemplate skillTemplate)
	{
		Cout.println("DO SET KEY SKILL");
		Skill skill = global::Char.myCharz().getSkill(skillTemplate);
		string[] array = (!TField.isQwerty) ? mResources.key_skill : mResources.key_skill_qwerty;
		MyVector myVector = new MyVector();
		for (int i = 0; i < 10; i++)
		{
			MyVector myVector2 = myVector;
			object p = new object[]
			{
				skill,
				i.ToString() + string.Empty
			};
			myVector2.addElement(new Command(array[i], 11121, p));
		}
		GameCanvas.menu.startAt(myVector, 0);
	}

	// Token: 0x0600045B RID: 1115 RVA: 0x00050544 File Offset: 0x0004E744
	public void saveonScreenSkillToRMS()
	{
		sbyte[] array = new sbyte[GameScr.onScreenSkill.Length];
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			bool flag = GameScr.onScreenSkill[i] == null;
			if (flag)
			{
				array[i] = -1;
			}
			else
			{
				array[i] = GameScr.onScreenSkill[i].template.id;
			}
		}
		Service.gI().changeOnKeyScr(array);
	}

	// Token: 0x0600045C RID: 1116 RVA: 0x000505B0 File Offset: 0x0004E7B0
	public void saveKeySkillToRMS()
	{
		sbyte[] array = new sbyte[GameScr.keySkill.Length];
		for (int i = 0; i < GameScr.keySkill.Length; i++)
		{
			bool flag = GameScr.keySkill[i] == null;
			if (flag)
			{
				array[i] = -1;
			}
			else
			{
				array[i] = GameScr.keySkill[i].template.id;
			}
		}
		Service.gI().changeOnKeyScr(array);
	}

	// Token: 0x0600045D RID: 1117 RVA: 0x0005061B File Offset: 0x0004E81B
	public void saveRMSCurrentSkill(sbyte id)
	{
	}

	// Token: 0x0600045E RID: 1118 RVA: 0x00050620 File Offset: 0x0004E820
	public void addSkillShortcut(Skill skill)
	{
		Cout.println("ADD SKILL SHORTCUT TO SKILL " + skill.template.id.ToString());
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			bool flag = GameScr.onScreenSkill[i] == null;
			if (flag)
			{
				GameScr.onScreenSkill[i] = skill;
				break;
			}
		}
		for (int j = 0; j < GameScr.keySkill.Length; j++)
		{
			bool flag2 = GameScr.keySkill[j] == null;
			if (flag2)
			{
				GameScr.keySkill[j] = skill;
				break;
			}
		}
		bool flag3 = global::Char.myCharz().myskill == null;
		if (flag3)
		{
			global::Char.myCharz().myskill = skill;
		}
		this.saveKeySkillToRMS();
		this.saveonScreenSkillToRMS();
	}

	// Token: 0x0600045F RID: 1119 RVA: 0x000506E4 File Offset: 0x0004E8E4
	public bool isBagFull()
	{
		for (int i = global::Char.myCharz().arrItemBag.Length - 1; i >= 0; i--)
		{
			bool flag = global::Char.myCharz().arrItemBag[i] == null;
			if (flag)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x06000460 RID: 1120 RVA: 0x00050731 File Offset: 0x0004E931
	public void createConfirm(string[] menu, Npc npc)
	{
		this.resetButton();
		this.isLockKey = true;
		this.left = new Command(menu[0], 130011, npc);
		this.right = new Command(menu[1], 130012, npc);
	}

	// Token: 0x06000461 RID: 1121 RVA: 0x0005076C File Offset: 0x0004E96C
	public void createMenu(string[] menu, Npc npc)
	{
		MyVector myVector = new MyVector();
		for (int i = 0; i < menu.Length; i++)
		{
			myVector.addElement(new Command(menu[i], 11057, npc));
		}
		GameCanvas.menu.startAt(myVector, 2);
	}

	// Token: 0x06000462 RID: 1122 RVA: 0x000507B8 File Offset: 0x0004E9B8
	public void readPart()
	{
		DataInputStream dataInputStream = null;
		try
		{
			dataInputStream = new DataInputStream(Rms.loadRMS("NR_part"));
			int num = (int)dataInputStream.readShort();
			GameScr.parts = new Part[num];
			for (int i = 0; i < num; i++)
			{
				int type = (int)dataInputStream.readByte();
				GameScr.parts[i] = new Part(type);
				for (int j = 0; j < GameScr.parts[i].pi.Length; j++)
				{
					GameScr.parts[i].pi[j] = new PartImage();
					GameScr.parts[i].pi[j].id = dataInputStream.readShort();
					GameScr.parts[i].pi[j].dx = dataInputStream.readByte();
					GameScr.parts[i].pi[j].dy = dataInputStream.readByte();
				}
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("LOI TAI readPart " + ex.ToString());
		}
		finally
		{
			try
			{
				dataInputStream.close();
			}
			catch (Exception ex2)
			{
				Res.outz2("LOI TAI readPart 2" + ex2.StackTrace);
			}
		}
	}

	// Token: 0x06000463 RID: 1123 RVA: 0x00050918 File Offset: 0x0004EB18
	public void readEfect()
	{
		DataInputStream dataInputStream = null;
		try
		{
			dataInputStream = new DataInputStream(Rms.loadRMS("NR_effect"));
			int num = (int)dataInputStream.readShort();
			GameScr.efs = new EffectCharPaint[num];
			for (int i = 0; i < num; i++)
			{
				GameScr.efs[i] = new EffectCharPaint();
				GameScr.efs[i].idEf = (int)dataInputStream.readShort();
				GameScr.efs[i].arrEfInfo = new EffectInfoPaint[(int)dataInputStream.readByte()];
				for (int j = 0; j < GameScr.efs[i].arrEfInfo.Length; j++)
				{
					GameScr.efs[i].arrEfInfo[j] = new EffectInfoPaint();
					GameScr.efs[i].arrEfInfo[j].idImg = (int)dataInputStream.readShort();
					GameScr.efs[i].arrEfInfo[j].dx = (int)dataInputStream.readByte();
					GameScr.efs[i].arrEfInfo[j].dy = (int)dataInputStream.readByte();
				}
			}
		}
		catch (Exception)
		{
		}
		finally
		{
			try
			{
				dataInputStream.close();
			}
			catch (Exception ex)
			{
				Cout.LogError("Loi ham Eff: " + ex.ToString());
			}
		}
	}

	// Token: 0x06000464 RID: 1124 RVA: 0x00050A78 File Offset: 0x0004EC78
	public void readArrow()
	{
		DataInputStream dataInputStream = null;
		try
		{
			dataInputStream = new DataInputStream(Rms.loadRMS("NR_arrow"));
			int num = (int)dataInputStream.readShort();
			GameScr.arrs = new Arrowpaint[num];
			for (int i = 0; i < num; i++)
			{
				GameScr.arrs[i] = new Arrowpaint();
				GameScr.arrs[i].id = (int)dataInputStream.readShort();
				GameScr.arrs[i].imgId[0] = (int)dataInputStream.readShort();
				GameScr.arrs[i].imgId[1] = (int)dataInputStream.readShort();
				GameScr.arrs[i].imgId[2] = (int)dataInputStream.readShort();
			}
		}
		catch (Exception)
		{
		}
		finally
		{
			try
			{
				dataInputStream.close();
			}
			catch (Exception ex)
			{
				Cout.LogError("Loi ham readArrow: " + ex.ToString());
			}
		}
	}

	// Token: 0x06000465 RID: 1125 RVA: 0x00050B74 File Offset: 0x0004ED74
	public void readDart()
	{
		DataInputStream dataInputStream = null;
		try
		{
			dataInputStream = new DataInputStream(Rms.loadRMS("NR_dart"));
			int num = (int)dataInputStream.readShort();
			GameScr.darts = new DartInfo[num];
			for (int i = 0; i < num; i++)
			{
				GameScr.darts[i] = new DartInfo();
				GameScr.darts[i].id = dataInputStream.readShort();
				GameScr.darts[i].nUpdate = dataInputStream.readShort();
				GameScr.darts[i].va = (int)(dataInputStream.readShort() * 256);
				GameScr.darts[i].xdPercent = dataInputStream.readShort();
				int num2 = (int)dataInputStream.readShort();
				GameScr.darts[i].tail = new short[num2];
				for (int j = 0; j < num2; j++)
				{
					GameScr.darts[i].tail[j] = dataInputStream.readShort();
				}
				num2 = (int)dataInputStream.readShort();
				GameScr.darts[i].tailBorder = new short[num2];
				for (int k = 0; k < num2; k++)
				{
					GameScr.darts[i].tailBorder[k] = dataInputStream.readShort();
				}
				num2 = (int)dataInputStream.readShort();
				GameScr.darts[i].xd1 = new short[num2];
				for (int l = 0; l < num2; l++)
				{
					GameScr.darts[i].xd1[l] = dataInputStream.readShort();
				}
				num2 = (int)dataInputStream.readShort();
				GameScr.darts[i].xd2 = new short[num2];
				for (int m = 0; m < num2; m++)
				{
					GameScr.darts[i].xd2[m] = dataInputStream.readShort();
				}
				num2 = (int)dataInputStream.readShort();
				GameScr.darts[i].head = new short[num2][];
				for (int n = 0; n < num2; n++)
				{
					short num3 = dataInputStream.readShort();
					GameScr.darts[i].head[n] = new short[(int)num3];
					for (int num4 = 0; num4 < (int)num3; num4++)
					{
						GameScr.darts[i].head[n][num4] = dataInputStream.readShort();
					}
				}
				num2 = (int)dataInputStream.readShort();
				GameScr.darts[i].headBorder = new short[num2][];
				for (int num5 = 0; num5 < num2; num5++)
				{
					short num6 = dataInputStream.readShort();
					GameScr.darts[i].headBorder[num5] = new short[(int)num6];
					for (int num7 = 0; num7 < (int)num6; num7++)
					{
						GameScr.darts[i].headBorder[num5][num7] = dataInputStream.readShort();
					}
				}
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("Loi ham ReadDart: " + ex.ToString());
		}
		finally
		{
			try
			{
				dataInputStream.close();
			}
			catch (Exception ex2)
			{
				Cout.LogError("Loi ham reaaDart: " + ex2.ToString());
			}
		}
	}

	// Token: 0x06000466 RID: 1126 RVA: 0x00050ECC File Offset: 0x0004F0CC
	public void readSkill()
	{
		DataInputStream dataInputStream = null;
		try
		{
			dataInputStream = new DataInputStream(Rms.loadRMS("NR_skill"));
			int num = (int)dataInputStream.readShort();
			int num2 = Skills.skills.size();
			GameScr.sks = new SkillPaint[num2];
			for (int i = 0; i < num; i++)
			{
				short num3 = dataInputStream.readShort();
				bool flag = num3 == 1111;
				if (flag)
				{
					num3 = (short)(num - 1);
				}
				GameScr.sks[(int)num3] = new SkillPaint();
				GameScr.sks[(int)num3].id = (int)num3;
				GameScr.sks[(int)num3].effectHappenOnMob = (int)dataInputStream.readShort();
				bool flag2 = GameScr.sks[(int)num3].effectHappenOnMob <= 0;
				if (flag2)
				{
					GameScr.sks[(int)num3].effectHappenOnMob = 80;
				}
				GameScr.sks[(int)num3].numEff = (int)dataInputStream.readByte();
				GameScr.sks[(int)num3].skillStand = new SkillInfoPaint[(int)dataInputStream.readByte()];
				for (int j = 0; j < GameScr.sks[(int)num3].skillStand.Length; j++)
				{
					GameScr.sks[(int)num3].skillStand[j] = new SkillInfoPaint();
					GameScr.sks[(int)num3].skillStand[j].status = (int)dataInputStream.readByte();
					GameScr.sks[(int)num3].skillStand[j].effS0Id = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].e0dx = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].e0dy = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].effS1Id = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].e1dx = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].e1dy = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].effS2Id = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].e2dx = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].e2dy = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].arrowId = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].adx = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillStand[j].ady = (int)dataInputStream.readShort();
				}
				GameScr.sks[(int)num3].skillfly = new SkillInfoPaint[(int)dataInputStream.readByte()];
				for (int k = 0; k < GameScr.sks[(int)num3].skillfly.Length; k++)
				{
					GameScr.sks[(int)num3].skillfly[k] = new SkillInfoPaint();
					GameScr.sks[(int)num3].skillfly[k].status = (int)dataInputStream.readByte();
					GameScr.sks[(int)num3].skillfly[k].effS0Id = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].e0dx = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].e0dy = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].effS1Id = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].e1dx = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].e1dy = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].effS2Id = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].e2dx = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].e2dy = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].arrowId = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].adx = (int)dataInputStream.readShort();
					GameScr.sks[(int)num3].skillfly[k].ady = (int)dataInputStream.readShort();
				}
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("Loi ham readSkill: " + ex.ToString());
		}
		finally
		{
			try
			{
				dataInputStream.close();
			}
			catch (Exception ex2)
			{
				Cout.LogError("Loi ham readskill: " + ex2.ToString());
			}
		}
	}

	// Token: 0x06000467 RID: 1127 RVA: 0x000513B8 File Offset: 0x0004F5B8
	public void readOk()
	{
		try
		{
			Res.outz("<readOk><vsData<" + GameScr.vsData.ToString() + "==" + GameScr.vcData.ToString());
			Res.outz("<readOk><vsMap<" + GameScr.vsMap.ToString() + "==" + GameScr.vcMap.ToString());
			Res.outz("<readOk><vsSkill<" + GameScr.vsSkill.ToString() + "==" + GameScr.vcSkill.ToString());
			Res.outz("<readOk><vsItem<" + GameScr.vsItem.ToString() + "==" + GameScr.vcItem.ToString());
			bool flag = GameScr.vsData == GameScr.vcData && GameScr.vsMap == GameScr.vcMap && GameScr.vsSkill == GameScr.vcSkill && GameScr.vsItem == GameScr.vcItem;
			if (flag)
			{
				Res.outz(string.Concat(new string[]
				{
					GameScr.vsData.ToString(),
					",",
					GameScr.vsMap.ToString(),
					",",
					GameScr.vsSkill.ToString(),
					",",
					GameScr.vsItem.ToString()
				}));
				GameScr.gI().readDart();
				GameScr.gI().readEfect();
				GameScr.gI().readArrow();
				GameScr.gI().readSkill();
				Service.gI().clientOk();
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("Loi ham readOk: " + ex.ToString());
		}
	}

	// Token: 0x06000468 RID: 1128 RVA: 0x00051578 File Offset: 0x0004F778
	public static GameScr gI()
	{
		bool flag = GameScr.instance == null;
		if (flag)
		{
			GameScr.instance = new GameScr();
		}
		return GameScr.instance;
	}

	// Token: 0x06000469 RID: 1129 RVA: 0x000515A7 File Offset: 0x0004F7A7
	public static void clearGameScr()
	{
		GameScr.instance = null;
	}

	// Token: 0x0600046A RID: 1130 RVA: 0x000515B0 File Offset: 0x0004F7B0
	public void loadGameScr()
	{
		GameScr.loadSplash();
		Res.init();
		this.loadInforBar();
	}

	// Token: 0x0600046B RID: 1131 RVA: 0x000515C8 File Offset: 0x0004F7C8
	public void doMenuInforMe()
	{
		GameScr.scrMain.clear();
		GameScr.scrInfo.clear();
		GameScr.isViewNext = false;
		this.cmdBag = new Command(mResources.MENUME[0], 1100011);
		this.cmdSkill = new Command(mResources.MENUME[1], 1100012);
		this.cmdTiemnang = new Command(mResources.MENUME[2], 1100013);
		this.cmdInfo = new Command(mResources.MENUME[3], 1100014);
		this.cmdtrangbi = new Command(mResources.MENUME[4], 1100015);
		MyVector myVector = new MyVector();
		myVector.addElement(this.cmdBag);
		myVector.addElement(this.cmdSkill);
		myVector.addElement(this.cmdTiemnang);
		myVector.addElement(this.cmdInfo);
		myVector.addElement(this.cmdtrangbi);
		GameCanvas.menu.startAt(myVector, 3);
	}

	// Token: 0x0600046C RID: 1132 RVA: 0x000516BC File Offset: 0x0004F8BC
	public void doMenusynthesis()
	{
		MyVector myVector = new MyVector();
		myVector.addElement(new Command(mResources.SYNTHESIS[0], 110002));
		myVector.addElement(new Command(mResources.SYNTHESIS[1], 1100032));
		myVector.addElement(new Command(mResources.SYNTHESIS[2], 1100033));
		GameCanvas.menu.startAt(myVector, 3);
	}

	// Token: 0x0600046D RID: 1133 RVA: 0x00051728 File Offset: 0x0004F928
	public static void loadCamera(bool fullmScreen, int cx, int cy)
	{
		GameScr.gW = GameCanvas.w;
		GameScr.cmdBarH = 39;
		GameScr.gH = GameCanvas.h;
		GameScr.cmdBarW = GameScr.gW;
		GameScr.cmdBarX = 0;
		GameScr.cmdBarY = GameCanvas.h - Paint.hTab - GameScr.cmdBarH;
		GameScr.girlHPBarY = 0;
		GameScr.csPadMaxH = GameCanvas.h / 6;
		bool flag = GameScr.csPadMaxH < 48;
		if (flag)
		{
			GameScr.csPadMaxH = 48;
		}
		GameScr.gW2 = GameScr.gW >> 1;
		GameScr.gH2 = GameScr.gH >> 1;
		GameScr.gW3 = GameScr.gW / 3;
		GameScr.gH3 = GameScr.gH / 3;
		GameScr.gW23 = GameScr.gH - 120;
		GameScr.gH23 = GameScr.gH * 2 / 3;
		GameScr.gW34 = 3 * GameScr.gW / 4;
		GameScr.gH34 = 3 * GameScr.gH / 4;
		GameScr.gW6 = GameScr.gW / 6;
		GameScr.gH6 = GameScr.gH / 6;
		GameScr.gssw = GameScr.gW / (int)TileMap.size + 2;
		GameScr.gssh = GameScr.gH / (int)TileMap.size + 2;
		bool flag2 = GameScr.gW % 24 != 0;
		if (flag2)
		{
			GameScr.gssw++;
		}
		GameScr.cmxLim = (TileMap.tmw - 1) * (int)TileMap.size - GameScr.gW;
		GameScr.cmyLim = (TileMap.tmh - 1) * (int)TileMap.size - GameScr.gH;
		bool flag3 = cx == -1 && cy == -1;
		if (flag3)
		{
			GameScr.cmx = (GameScr.cmtoX = global::Char.myCharz().cx - GameScr.gW2 + GameScr.gW6 * global::Char.myCharz().cdir);
			GameScr.cmy = (GameScr.cmtoY = global::Char.myCharz().cy - GameScr.gH23);
		}
		else
		{
			GameScr.cmx = (GameScr.cmtoX = cx - GameScr.gW23 + GameScr.gW6 * global::Char.myCharz().cdir);
			GameScr.cmy = (GameScr.cmtoY = cy - GameScr.gH23);
		}
		GameScr.firstY = GameScr.cmy;
		bool flag4 = GameScr.cmx < 24;
		if (flag4)
		{
			GameScr.cmx = (GameScr.cmtoX = 24);
		}
		bool flag5 = GameScr.cmx > GameScr.cmxLim;
		if (flag5)
		{
			GameScr.cmx = (GameScr.cmtoX = GameScr.cmxLim);
		}
		bool flag6 = GameScr.cmy < 0;
		if (flag6)
		{
			GameScr.cmy = (GameScr.cmtoY = 0);
		}
		bool flag7 = GameScr.cmy > GameScr.cmyLim;
		if (flag7)
		{
			GameScr.cmy = (GameScr.cmtoY = GameScr.cmyLim);
		}
		GameScr.gssx = GameScr.cmx / (int)TileMap.size - 1;
		bool flag8 = GameScr.gssx < 0;
		if (flag8)
		{
			GameScr.gssx = 0;
		}
		GameScr.gssy = GameScr.cmy / (int)TileMap.size;
		GameScr.gssxe = GameScr.gssx + GameScr.gssw;
		GameScr.gssye = GameScr.gssy + GameScr.gssh;
		bool flag9 = GameScr.gssy < 0;
		if (flag9)
		{
			GameScr.gssy = 0;
		}
		bool flag10 = GameScr.gssye > TileMap.tmh - 1;
		if (flag10)
		{
			GameScr.gssye = TileMap.tmh - 1;
		}
		TileMap.countx = (GameScr.gssxe - GameScr.gssx) * 4;
		bool flag11 = TileMap.countx > TileMap.tmw;
		if (flag11)
		{
			TileMap.countx = TileMap.tmw;
		}
		TileMap.county = (GameScr.gssye - GameScr.gssy) * 4;
		bool flag12 = TileMap.county > TileMap.tmh;
		if (flag12)
		{
			TileMap.county = TileMap.tmh;
		}
		TileMap.gssx = (global::Char.myCharz().cx - 2 * GameScr.gW) / (int)TileMap.size;
		bool flag13 = TileMap.gssx < 0;
		if (flag13)
		{
			TileMap.gssx = 0;
		}
		TileMap.gssxe = TileMap.gssx + TileMap.countx;
		bool flag14 = TileMap.gssxe > TileMap.tmw;
		if (flag14)
		{
			TileMap.gssxe = TileMap.tmw;
		}
		TileMap.gssy = (global::Char.myCharz().cy - 2 * GameScr.gH) / (int)TileMap.size;
		bool flag15 = TileMap.gssy < 0;
		if (flag15)
		{
			TileMap.gssy = 0;
		}
		TileMap.gssye = TileMap.gssy + TileMap.county;
		bool flag16 = TileMap.gssye > TileMap.tmh;
		if (flag16)
		{
			TileMap.gssye = TileMap.tmh;
		}
		ChatTextField.gI().parentScreen = GameScr.instance;
		ChatTextField.gI().tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
		ChatTextField.gI().initChatTextField();
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			GameScr.yTouchBar = GameScr.gH - 88;
			GameScr.xC = GameScr.gW - 40;
			GameScr.yC = 2;
			bool flag17 = GameCanvas.w <= 240;
			if (flag17)
			{
				GameScr.xC = GameScr.gW - 35;
				GameScr.yC = 5;
			}
			GameScr.xF = GameScr.gW - 55;
			GameScr.yF = GameScr.yTouchBar + 35;
			GameScr.xTG = GameScr.gW - 37;
			GameScr.yTG = GameScr.yTouchBar - 1;
			bool flag18 = GameCanvas.w >= 450;
			if (flag18)
			{
				GameScr.yTG -= 12;
				GameScr.yHP -= 7;
				GameScr.xF -= 10;
				GameScr.yF -= 5;
				GameScr.xTG -= 10;
			}
		}
		GameScr.setSkillBarPosition();
		GameScr.disXC = ((GameCanvas.w <= 200) ? 30 : 40);
		bool flag19 = Rms.loadRMSInt("viewchat") == -1;
		if (flag19)
		{
			GameCanvas.panel.isViewChatServer = true;
		}
		else
		{
			GameCanvas.panel.isViewChatServer = (Rms.loadRMSInt("viewchat") == 1);
		}
	}

	// Token: 0x0600046E RID: 1134 RVA: 0x00051CD8 File Offset: 0x0004FED8
	public static void setSkillBarPosition()
	{
		Skill[] array = (!GameCanvas.isTouch) ? GameScr.keySkill : GameScr.onScreenSkill;
		GameScr.xS = new int[array.Length];
		GameScr.yS = new int[array.Length];
		bool flag = GameCanvas.isTouchControlSmallScreen && GameScr.isUseTouch;
		if (flag)
		{
			GameScr.xSkill = 23;
			GameScr.ySkill = 52;
			GameScr.padSkill = 5;
			for (int i = 0; i < GameScr.xS.Length; i++)
			{
				GameScr.xS[i] = i * (25 + GameScr.padSkill);
				GameScr.yS[i] = GameScr.ySkill;
				bool flag2 = GameScr.xS.Length > 5 && i >= GameScr.xS.Length / 2;
				if (flag2)
				{
					GameScr.xS[i] = (i - GameScr.xS.Length / 2) * (25 + GameScr.padSkill);
					GameScr.yS[i] = GameScr.ySkill - 32;
				}
			}
			GameScr.xHP = array.Length * (25 + GameScr.padSkill);
			GameScr.yHP = GameScr.ySkill;
		}
		else
		{
			GameScr.wSkill = 30;
			bool flag3 = GameCanvas.w <= 320;
			if (flag3)
			{
				GameScr.ySkill = GameScr.gH - GameScr.wSkill - 6;
				GameScr.xSkill = GameScr.gW2 - array.Length * GameScr.wSkill / 2 - 25;
			}
			else
			{
				GameScr.wSkill = 40;
				GameScr.xSkill = 10;
				GameScr.ySkill = GameCanvas.h - GameScr.wSkill + 7;
			}
			for (int j = 0; j < GameScr.xS.Length; j++)
			{
				GameScr.xS[j] = j * GameScr.wSkill;
				GameScr.yS[j] = GameScr.ySkill;
				bool flag4 = GameScr.xS.Length > 5 && j >= GameScr.xS.Length / 2;
				if (flag4)
				{
					GameScr.xS[j] = (j - GameScr.xS.Length / 2) * GameScr.wSkill;
					GameScr.yS[j] = GameScr.ySkill - 32;
				}
			}
			GameScr.xHP = array.Length * GameScr.wSkill;
			GameScr.yHP = GameScr.ySkill;
		}
		bool flag5 = !GameCanvas.isTouch;
		if (!flag5)
		{
			GameScr.xSkill = 17;
			GameScr.ySkill = GameCanvas.h - 40;
			bool flag6 = GameScr.gamePad.isSmallGamePad && GameScr.isAnalog == 1;
			if (flag6)
			{
				GameScr.xHP = array.Length * GameScr.wSkill;
				GameScr.yHP = GameScr.ySkill;
			}
			else
			{
				GameScr.xHP = GameCanvas.w - 45;
				GameScr.yHP = GameCanvas.h - 45;
			}
			GameScr.setTouchBtn();
			for (int k = 0; k < GameScr.xS.Length; k++)
			{
				GameScr.xS[k] = k * GameScr.wSkill;
				GameScr.yS[k] = GameScr.ySkill;
				bool flag7 = GameScr.xS.Length > 5 && k >= GameScr.xS.Length / 2;
				if (flag7)
				{
					GameScr.xS[k] = (k - GameScr.xS.Length / 2) * GameScr.wSkill;
					GameScr.yS[k] = GameScr.ySkill - 32;
				}
			}
		}
	}

	// Token: 0x0600046F RID: 1135 RVA: 0x00052008 File Offset: 0x00050208
	private static void updateCamera()
	{
		bool flag = GameScr.isPaintOther;
		if (!flag)
		{
			bool flag2 = GameScr.cmx != GameScr.cmtoX || GameScr.cmy != GameScr.cmtoY;
			if (flag2)
			{
				GameScr.cmvx = GameScr.cmtoX - GameScr.cmx << 2;
				GameScr.cmvy = GameScr.cmtoY - GameScr.cmy << 2;
				GameScr.cmdx += GameScr.cmvx;
				GameScr.cmx += GameScr.cmdx >> 4;
				GameScr.cmdx &= 15;
				GameScr.cmdy += GameScr.cmvy;
				GameScr.cmy += GameScr.cmdy >> 4;
				GameScr.cmdy &= 15;
				bool flag3 = GameScr.cmx < 24;
				if (flag3)
				{
					GameScr.cmx = 24;
				}
				bool flag4 = GameScr.cmx > GameScr.cmxLim;
				if (flag4)
				{
					GameScr.cmx = GameScr.cmxLim;
				}
				bool flag5 = GameScr.cmy < 0;
				if (flag5)
				{
					GameScr.cmy = 0;
				}
				bool flag6 = GameScr.cmy > GameScr.cmyLim;
				if (flag6)
				{
					GameScr.cmy = GameScr.cmyLim;
				}
			}
			GameScr.gssx = GameScr.cmx / (int)TileMap.size - 1;
			bool flag7 = GameScr.gssx < 0;
			if (flag7)
			{
				GameScr.gssx = 0;
			}
			GameScr.gssy = GameScr.cmy / (int)TileMap.size;
			GameScr.gssxe = GameScr.gssx + GameScr.gssw;
			GameScr.gssye = GameScr.gssy + GameScr.gssh;
			bool flag8 = GameScr.gssy < 0;
			if (flag8)
			{
				GameScr.gssy = 0;
			}
			bool flag9 = GameScr.gssye > TileMap.tmh - 1;
			if (flag9)
			{
				GameScr.gssye = TileMap.tmh - 1;
			}
			TileMap.gssx = (global::Char.myCharz().cx - 2 * GameScr.gW) / (int)TileMap.size;
			bool flag10 = TileMap.gssx < 0;
			if (flag10)
			{
				TileMap.gssx = 0;
			}
			TileMap.gssxe = TileMap.gssx + TileMap.countx;
			bool flag11 = TileMap.gssxe > TileMap.tmw;
			if (flag11)
			{
				TileMap.gssxe = TileMap.tmw;
				TileMap.gssx = TileMap.gssxe - TileMap.countx;
			}
			TileMap.gssy = (global::Char.myCharz().cy - 2 * GameScr.gH) / (int)TileMap.size;
			bool flag12 = TileMap.gssy < 0;
			if (flag12)
			{
				TileMap.gssy = 0;
			}
			TileMap.gssye = TileMap.gssy + TileMap.county;
			bool flag13 = TileMap.gssye > TileMap.tmh;
			if (flag13)
			{
				TileMap.gssye = TileMap.tmh;
				TileMap.gssy = TileMap.gssye - TileMap.county;
			}
			GameScr.scrMain.updatecm();
			GameScr.scrInfo.updatecm();
		}
	}

	// Token: 0x06000470 RID: 1136 RVA: 0x000522BC File Offset: 0x000504BC
	public bool testAct()
	{
		for (sbyte b = 2; b < 9; b += 2)
		{
			bool flag = GameCanvas.keyHold[(int)b];
			if (flag)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x06000471 RID: 1137 RVA: 0x000522F4 File Offset: 0x000504F4
	public void clanInvite(string strInvite, int clanID, int code)
	{
		ClanObject clanObject = new ClanObject();
		clanObject.code = code;
		clanObject.clanID = clanID;
		this.startYesNoPopUp(strInvite, new Command(mResources.YES, 12002, clanObject), new Command(mResources.NO, 12003, clanObject));
	}

	// Token: 0x06000472 RID: 1138 RVA: 0x00052340 File Offset: 0x00050540
	public void playerMenu(global::Char c)
	{
		this.auto = 0;
		GameCanvas.clearKeyHold();
		bool flag = global::Char.myCharz().charFocus.charID < 0 || global::Char.myCharz().charID < 0;
		if (!flag)
		{
			MyVector vPlayerMenu = GameCanvas.panel.vPlayerMenu;
			bool flag2 = vPlayerMenu.size() > 0;
			if (!flag2)
			{
				bool flag3 = global::Char.myCharz().taskMaint != null && global::Char.myCharz().taskMaint.taskId > 1;
				if (flag3)
				{
					vPlayerMenu.addElement(new Command(mResources.make_friend, 11112, global::Char.myCharz().charFocus));
					vPlayerMenu.addElement(new Command(mResources.trade, 11113, global::Char.myCharz().charFocus));
				}
				bool flag4 = global::Char.myCharz().clan != null && global::Char.myCharz().role < 2 && global::Char.myCharz().charFocus.clanID == -1;
				if (flag4)
				{
					vPlayerMenu.addElement(new Command(mResources.CHAR_ORDER[4], 110391));
				}
				bool flag5 = global::Char.myCharz().charFocus.statusMe != 14 && global::Char.myCharz().charFocus.statusMe != 5;
				if (flag5)
				{
					bool flag6 = global::Char.myCharz().taskMaint != null && global::Char.myCharz().taskMaint.taskId >= 14;
					if (flag6)
					{
						vPlayerMenu.addElement(new Command(mResources.CHAR_ORDER[0], 2003));
					}
				}
				else
				{
					bool flag7 = global::Char.myCharz().myskill.template.type != 4;
					if (flag7)
					{
					}
				}
				bool flag8 = global::Char.myCharz().clan != null && global::Char.myCharz().clan.ID == global::Char.myCharz().charFocus.clanID && global::Char.myCharz().charFocus.statusMe != 14 && global::Char.myCharz().taskMaint != null && global::Char.myCharz().taskMaint.taskId >= 14;
				if (flag8)
				{
					vPlayerMenu.addElement(new Command(mResources.CHAR_ORDER[1], 2004));
				}
				int num = global::Char.myCharz().nClass.skillTemplates.Length;
				for (int i = 0; i < num; i++)
				{
					SkillTemplate skillTemplate = global::Char.myCharz().nClass.skillTemplates[i];
					Skill skill = global::Char.myCharz().getSkill(skillTemplate);
					bool flag9 = skill != null && skillTemplate.isBuffToPlayer() && skill.point >= 1;
					if (flag9)
					{
						vPlayerMenu.addElement(new Command(skillTemplate.name, 12004, skill));
					}
				}
			}
		}
	}

	// Token: 0x06000473 RID: 1139 RVA: 0x00052608 File Offset: 0x00050808
	public bool isAttack()
	{
		bool flag = this.checkClickToBotton(global::Char.myCharz().charFocus);
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = this.checkClickToBotton(global::Char.myCharz().mobFocus);
			if (flag2)
			{
				result = false;
			}
			else
			{
				bool flag3 = this.checkClickToBotton(global::Char.myCharz().npcFocus);
				if (flag3)
				{
					result = false;
				}
				else
				{
					bool isShow = ChatTextField.gI().isShow;
					if (isShow)
					{
						result = false;
					}
					else
					{
						bool flag4 = InfoDlg.isLock || global::Char.myCharz().isLockAttack || global::Char.isLockKey;
						if (flag4)
						{
							result = false;
						}
						else
						{
							bool flag5 = global::Char.myCharz().myskill != null && global::Char.myCharz().myskill.template.id == 6 && global::Char.myCharz().itemFocus != null;
							if (flag5)
							{
								this.pickItem();
								result = false;
							}
							else
							{
								bool flag6 = global::Char.myCharz().myskill != null && global::Char.myCharz().myskill.template.type == 2 && global::Char.myCharz().npcFocus == null && global::Char.myCharz().myskill.template.id != 6;
								if (flag6)
								{
									bool flag7 = !this.checkSkillValid();
									result = !flag7;
								}
								else
								{
									bool flag8 = global::Char.myCharz().skillPaint != null || (global::Char.myCharz().mobFocus == null && global::Char.myCharz().npcFocus == null && global::Char.myCharz().charFocus == null && global::Char.myCharz().itemFocus == null);
									if (flag8)
									{
										result = false;
									}
									else
									{
										bool flag9 = global::Char.myCharz().mobFocus != null;
										if (flag9)
										{
											bool flag10 = global::Char.myCharz().mobFocus.isBigBoss() && global::Char.myCharz().mobFocus.status == 4;
											if (flag10)
											{
												global::Char.myCharz().mobFocus = null;
												global::Char.myCharz().currentMovePoint = null;
											}
											GameScr.isAutoPlay = true;
											bool flag11 = !this.isMeCanAttackMob(global::Char.myCharz().mobFocus);
											if (flag11)
											{
												Res.outz("can not attack");
												result = false;
											}
											else
											{
												bool flag12 = this.mobCapcha != null;
												if (flag12)
												{
													result = false;
												}
												else
												{
													bool flag13 = global::Char.myCharz().myskill == null;
													if (flag13)
													{
														result = false;
													}
													else
													{
														bool flag14 = global::Char.myCharz().isSelectingSkillUseAlone();
														if (flag14)
														{
															result = false;
														}
														else
														{
															int num = -1;
															int num2 = Res.abs(global::Char.myCharz().cx - GameScr.cmx) * mGraphics.zoomLevel;
															bool flag15 = global::Char.myCharz().charFocus != null;
															if (flag15)
															{
																num = Res.abs(global::Char.myCharz().cx - global::Char.myCharz().charFocus.cx) * mGraphics.zoomLevel;
															}
															else
															{
																bool flag16 = global::Char.myCharz().mobFocus != null;
																if (flag16)
																{
																	num = Res.abs(global::Char.myCharz().cx - global::Char.myCharz().mobFocus.x) * mGraphics.zoomLevel;
																}
															}
															bool flag17 = (global::Char.myCharz().mobFocus.status == 1 || global::Char.myCharz().mobFocus.status == 0 || global::Char.myCharz().myskill.template.type == 4 || num == -1 || num > num2) && global::Char.myCharz().myskill.template.type == 4;
															if (flag17)
															{
																bool flag18 = global::Char.myCharz().mobFocus.x < global::Char.myCharz().cx;
																if (flag18)
																{
																	global::Char.myCharz().cdir = -1;
																}
																else
																{
																	global::Char.myCharz().cdir = 1;
																}
																this.doSelectSkill(global::Char.myCharz().myskill, true);
															}
															bool flag19 = !this.checkSkillValid();
															if (flag19)
															{
																result = false;
															}
															else
															{
																bool flag20 = global::Char.myCharz().cx < global::Char.myCharz().mobFocus.getX();
																if (flag20)
																{
																	global::Char.myCharz().cdir = 1;
																}
																else
																{
																	global::Char.myCharz().cdir = -1;
																}
																int num3 = global::Math.abs(global::Char.myCharz().cx - global::Char.myCharz().mobFocus.getX());
																int num4 = global::Math.abs(global::Char.myCharz().cy - global::Char.myCharz().mobFocus.getY());
																global::Char.myCharz().cvx = 0;
																bool flag21 = num3 <= global::Char.myCharz().myskill.dx && num4 <= global::Char.myCharz().myskill.dy;
																if (flag21)
																{
																	bool flag22 = global::Char.myCharz().myskill.template.id == 20;
																	if (flag22)
																	{
																		result = true;
																	}
																	else
																	{
																		bool flag23 = num4 > num3 && Res.abs(global::Char.myCharz().cy - global::Char.myCharz().mobFocus.getY()) > 30 && global::Char.myCharz().mobFocus.getTemplate().type == 4;
																		if (flag23)
																		{
																			global::Char.myCharz().currentMovePoint = new MovePoint(global::Char.myCharz().cx + global::Char.myCharz().cdir, global::Char.myCharz().mobFocus.getY());
																			global::Char.myCharz().endMovePointCommand = new Command(null, null, 8002, null);
																			GameCanvas.clearKeyHold();
																			GameCanvas.clearKeyPressed();
																			result = false;
																		}
																		else
																		{
																			int num5 = 20;
																			bool flag24 = false;
																			bool flag25 = global::Char.myCharz().mobFocus is BigBoss || global::Char.myCharz().mobFocus is BigBoss2;
																			if (flag25)
																			{
																				flag24 = true;
																			}
																			bool flag26 = global::Char.myCharz().myskill.dx > 100;
																			if (flag26)
																			{
																				num5 = 60;
																				bool flag27 = num3 < 20;
																				if (flag27)
																				{
																					global::Char.myCharz().createShadow(global::Char.myCharz().cx, global::Char.myCharz().cy, 10);
																				}
																			}
																			bool flag28 = false;
																			bool flag29 = (TileMap.tileTypeAtPixel(global::Char.myCharz().cx, global::Char.myCharz().cy + 3) & 2) == 2;
																			if (flag29)
																			{
																				int num6 = (global::Char.myCharz().cx > global::Char.myCharz().mobFocus.getX()) ? 1 : -1;
																				bool flag30 = (TileMap.tileTypeAtPixel(global::Char.myCharz().mobFocus.getX() + num5 * num6, global::Char.myCharz().cy + 3) & 2) != 2;
																				if (flag30)
																				{
																					flag28 = true;
																				}
																			}
																			bool flag31 = num3 <= num5 && !flag28;
																			if (flag31)
																			{
																				bool flag32 = global::Char.myCharz().cx > global::Char.myCharz().mobFocus.getX();
																				if (flag32)
																				{
																					int num7 = global::Char.myCharz().mobFocus.getX() + num5 + (flag24 ? 30 : 0);
																					int i = global::Char.myCharz().mobFocus.getX();
																					bool flag33 = false;
																					while (i < num7)
																					{
																						bool flag34 = TileMap.tileTypeAtPixel(i, global::Char.myCharz().cy + 3) == 8 || TileMap.tileTypeAtPixel(i, global::Char.myCharz().cy + 3) == 4;
																						if (flag34)
																						{
																							flag33 = true;
																							break;
																						}
																						i += 24;
																					}
																					bool flag35 = flag33;
																					if (flag35)
																					{
																						global::Char.myCharz().cx = i - 24;
																					}
																					else
																					{
																						global::Char.myCharz().cx = num7;
																					}
																					global::Char.myCharz().cdir = -1;
																				}
																				else
																				{
																					int num8 = global::Char.myCharz().mobFocus.getX() - num5 - (flag24 ? 30 : 0);
																					int j = global::Char.myCharz().mobFocus.getX();
																					bool flag36 = false;
																					while (j > num8)
																					{
																						bool flag37 = TileMap.tileTypeAtPixel(j, global::Char.myCharz().cy + 3) == 8 || TileMap.tileTypeAtPixel(j, global::Char.myCharz().cy + 3) == 4;
																						if (flag37)
																						{
																							flag36 = true;
																							break;
																						}
																						j -= 24;
																					}
																					bool flag38 = flag36;
																					if (flag38)
																					{
																						global::Char.myCharz().cx = j + 24;
																					}
																					else
																					{
																						global::Char.myCharz().cx = num8;
																					}
																					global::Char.myCharz().cdir = 1;
																				}
																				Service.gI().charMove();
																			}
																			GameCanvas.clearKeyHold();
																			GameCanvas.clearKeyPressed();
																			result = true;
																		}
																	}
																}
																else
																{
																	bool flag39 = false;
																	bool flag40 = global::Char.myCharz().mobFocus is BigBoss || global::Char.myCharz().mobFocus is BigBoss2;
																	if (flag40)
																	{
																		flag39 = true;
																	}
																	int num9 = (global::Char.myCharz().myskill.dx - ((!flag39) ? 20 : 50)) * ((global::Char.myCharz().cx > global::Char.myCharz().mobFocus.getX()) ? 1 : -1);
																	bool flag41 = num3 <= global::Char.myCharz().myskill.dx;
																	if (flag41)
																	{
																		num9 = 0;
																	}
																	global::Char.myCharz().currentMovePoint = new MovePoint(global::Char.myCharz().mobFocus.getX() + num9, global::Char.myCharz().mobFocus.getY());
																	global::Char.myCharz().endMovePointCommand = new Command(null, null, 8002, null);
																	GameCanvas.clearKeyHold();
																	GameCanvas.clearKeyPressed();
																	result = false;
																}
															}
														}
													}
												}
											}
										}
										else
										{
											bool flag42 = global::Char.myCharz().npcFocus != null;
											if (flag42)
											{
												bool isHide = global::Char.myCharz().npcFocus.isHide;
												if (isHide)
												{
													result = false;
												}
												else
												{
													bool flag43 = global::Char.myCharz().cx < global::Char.myCharz().npcFocus.cx;
													if (flag43)
													{
														global::Char.myCharz().cdir = 1;
													}
													else
													{
														global::Char.myCharz().cdir = -1;
													}
													bool flag44 = global::Char.myCharz().cx < global::Char.myCharz().npcFocus.cx;
													if (flag44)
													{
														global::Char.myCharz().npcFocus.cdir = -1;
													}
													else
													{
														global::Char.myCharz().npcFocus.cdir = 1;
													}
													int num10 = global::Math.abs(global::Char.myCharz().cx - global::Char.myCharz().npcFocus.cx);
													int num11 = global::Math.abs(global::Char.myCharz().cy - global::Char.myCharz().npcFocus.cy);
													bool flag45 = num11 > 40;
													if (flag45)
													{
														global::Char.myCharz().cy = global::Char.myCharz().npcFocus.cy - 40;
													}
													bool flag46 = num10 < 60;
													if (flag46)
													{
														GameCanvas.clearKeyHold();
														GameCanvas.clearKeyPressed();
														bool flag47 = this.tMenuDelay == 0;
														if (flag47)
														{
															bool flag48 = global::Char.myCharz().taskMaint != null && global::Char.myCharz().taskMaint.taskId == 0;
															if (flag48)
															{
																bool flag49 = global::Char.myCharz().taskMaint.index < 4 && global::Char.myCharz().npcFocus.template.npcTemplateId == 4;
																if (flag49)
																{
																	return false;
																}
																bool flag50 = global::Char.myCharz().taskMaint.index < 3 && global::Char.myCharz().npcFocus.template.npcTemplateId == 3;
																if (flag50)
																{
																	return false;
																}
															}
															this.tMenuDelay = 50;
															InfoDlg.showWait();
															Service.gI().charMove();
															Service.gI().openMenu(global::Char.myCharz().npcFocus.template.npcTemplateId);
														}
													}
													else
													{
														int num12 = (20 + Res.r.nextInt(20)) * ((global::Char.myCharz().cx > global::Char.myCharz().npcFocus.cx) ? 1 : -1);
														global::Char.myCharz().currentMovePoint = new MovePoint(global::Char.myCharz().npcFocus.cx + num12, global::Char.myCharz().cy);
														global::Char.myCharz().endMovePointCommand = new Command(null, null, 8002, null);
														GameCanvas.clearKeyHold();
														GameCanvas.clearKeyPressed();
													}
													result = false;
												}
											}
											else
											{
												bool flag51 = global::Char.myCharz().charFocus != null;
												if (flag51)
												{
													bool flag52 = this.mobCapcha != null;
													if (flag52)
													{
														result = false;
													}
													else
													{
														bool flag53 = global::Char.myCharz().cx < global::Char.myCharz().charFocus.cx;
														if (flag53)
														{
															global::Char.myCharz().cdir = 1;
														}
														else
														{
															global::Char.myCharz().cdir = -1;
														}
														int num13 = global::Math.abs(global::Char.myCharz().cx - global::Char.myCharz().charFocus.cx);
														int num14 = global::Math.abs(global::Char.myCharz().cy - global::Char.myCharz().charFocus.cy);
														bool flag54 = global::Char.myCharz().isMeCanAttackOtherPlayer(global::Char.myCharz().charFocus) || global::Char.myCharz().isSelectingSkillBuffToPlayer();
														if (flag54)
														{
															bool flag55 = global::Char.myCharz().myskill == null;
															if (flag55)
															{
																result = false;
															}
															else
															{
																bool flag56 = !this.checkSkillValid();
																if (flag56)
																{
																	result = false;
																}
																else
																{
																	bool flag57 = global::Char.myCharz().cx < global::Char.myCharz().charFocus.cx;
																	if (flag57)
																	{
																		global::Char.myCharz().cdir = 1;
																	}
																	else
																	{
																		global::Char.myCharz().cdir = -1;
																	}
																	global::Char.myCharz().cvx = 0;
																	bool flag58 = num13 <= global::Char.myCharz().myskill.dx && num14 <= global::Char.myCharz().myskill.dy;
																	if (flag58)
																	{
																		bool flag59 = global::Char.myCharz().myskill.template.id == 20;
																		if (flag59)
																		{
																			result = true;
																		}
																		else
																		{
																			int num15 = 20;
																			bool flag60 = global::Char.myCharz().myskill.dx > 60;
																			if (flag60)
																			{
																				num15 = 60;
																				bool flag61 = num13 < 20;
																				if (flag61)
																				{
																					global::Char.myCharz().createShadow(global::Char.myCharz().cx, global::Char.myCharz().cy, 10);
																				}
																			}
																			bool flag62 = false;
																			bool flag63 = (TileMap.tileTypeAtPixel(global::Char.myCharz().cx, global::Char.myCharz().cy + 3) & 2) == 2;
																			if (flag63)
																			{
																				int num16 = (global::Char.myCharz().cx > global::Char.myCharz().charFocus.cx) ? 1 : -1;
																				bool flag64 = (TileMap.tileTypeAtPixel(global::Char.myCharz().charFocus.cx + num15 * num16, global::Char.myCharz().cy + 3) & 2) != 2;
																				if (flag64)
																				{
																					flag62 = true;
																				}
																			}
																			bool flag65 = num13 <= num15 && !flag62;
																			if (flag65)
																			{
																				bool flag66 = global::Char.myCharz().cx > global::Char.myCharz().charFocus.cx;
																				if (flag66)
																				{
																					global::Char.myCharz().cx = global::Char.myCharz().charFocus.cx + num15;
																					global::Char.myCharz().cdir = -1;
																				}
																				else
																				{
																					global::Char.myCharz().cx = global::Char.myCharz().charFocus.cx - num15;
																					global::Char.myCharz().cdir = 1;
																				}
																				Service.gI().charMove();
																			}
																			GameCanvas.clearKeyHold();
																			GameCanvas.clearKeyPressed();
																			result = true;
																		}
																	}
																	else
																	{
																		int num17 = (global::Char.myCharz().myskill.dx - 20) * ((global::Char.myCharz().cx > global::Char.myCharz().charFocus.cx) ? 1 : -1);
																		bool flag67 = num13 <= global::Char.myCharz().myskill.dx;
																		if (flag67)
																		{
																			num17 = 0;
																		}
																		global::Char.myCharz().currentMovePoint = new MovePoint(global::Char.myCharz().charFocus.cx + num17, global::Char.myCharz().charFocus.cy);
																		global::Char.myCharz().endMovePointCommand = new Command(null, null, 8002, null);
																		GameCanvas.clearKeyHold();
																		GameCanvas.clearKeyPressed();
																		result = false;
																	}
																}
															}
														}
														else
														{
															bool flag68 = num13 < 60 && num14 < 40;
															if (flag68)
															{
																this.playerMenu(global::Char.myCharz().charFocus);
																bool flag69 = !GameCanvas.isTouch && global::Char.myCharz().charFocus.charID >= 0 && TileMap.mapID != 51 && TileMap.mapID != 52 && this.popUpYesNo == null;
																if (flag69)
																{
																	GameCanvas.panel.setTypePlayerMenu(global::Char.myCharz().charFocus);
																	GameCanvas.panel.show();
																	Service.gI().getPlayerMenu(global::Char.myCharz().charFocus.charID);
																	Service.gI().messagePlayerMenu(global::Char.myCharz().charFocus.charID);
																}
															}
															else
															{
																int num18 = (20 + Res.r.nextInt(20)) * ((global::Char.myCharz().cx > global::Char.myCharz().charFocus.cx) ? 1 : -1);
																global::Char.myCharz().currentMovePoint = new MovePoint(global::Char.myCharz().charFocus.cx + num18, global::Char.myCharz().charFocus.cy);
																global::Char.myCharz().endMovePointCommand = new Command(null, null, 8002, null);
																GameCanvas.clearKeyHold();
																GameCanvas.clearKeyPressed();
															}
															result = false;
														}
													}
												}
												else
												{
													bool flag70 = global::Char.myCharz().itemFocus != null;
													if (flag70)
													{
														this.pickItem();
														result = false;
													}
													else
													{
														result = true;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return result;
	}

	// Token: 0x06000474 RID: 1140 RVA: 0x00053754 File Offset: 0x00051954
	public bool isMeCanAttackMob(Mob m)
	{
		bool flag = m == null;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = global::Char.myCharz().cTypePk == 5;
			if (flag2)
			{
				result = true;
			}
			else
			{
				bool flag3 = global::Char.myCharz().isAttacPlayerStatus() && !m.isMobMe;
				if (flag3)
				{
					result = false;
				}
				else
				{
					bool flag4 = global::Char.myCharz().mobMe != null && m.Equals(global::Char.myCharz().mobMe);
					if (flag4)
					{
						result = false;
					}
					else
					{
						global::Char @char = GameScr.findCharInMap(m.mobId);
						bool flag5 = @char == null;
						if (flag5)
						{
							result = true;
						}
						else
						{
							bool flag6 = @char.cTypePk == 5;
							if (flag6)
							{
								result = true;
							}
							else
							{
								bool flag7 = global::Char.myCharz().isMeCanAttackOtherPlayer(@char);
								result = flag7;
							}
						}
					}
				}
			}
		}
		return result;
	}

	// Token: 0x06000475 RID: 1141 RVA: 0x00053824 File Offset: 0x00051A24
	private bool checkSkillValid()
	{
		bool flag = global::Char.myCharz().myskill != null && ((global::Char.myCharz().myskill.template.manaUseType != 1 && global::Char.myCharz().cMP < (long)global::Char.myCharz().myskill.manaUse) || (global::Char.myCharz().myskill.template.manaUseType == 1 && global::Char.myCharz().cMP < global::Char.myCharz().cMPFull * (long)global::Char.myCharz().myskill.manaUse / 100L));
		bool result;
		if (flag)
		{
			GameScr.info1.addInfo(mResources.NOT_ENOUGH_MP, 0);
			this.auto = 0;
			result = false;
		}
		else
		{
			bool flag2 = global::Char.myCharz().myskill == null || (global::Char.myCharz().myskill.template.maxPoint > 0 && global::Char.myCharz().myskill.point == 0);
			if (flag2)
			{
				GameCanvas.startOKDlg(mResources.SKILL_FAIL);
				result = false;
			}
			else
			{
				result = true;
			}
		}
		return result;
	}

	// Token: 0x06000476 RID: 1142 RVA: 0x00053934 File Offset: 0x00051B34
	private bool checkSkillValid2()
	{
		bool flag = global::Char.myCharz().myskill != null && ((global::Char.myCharz().myskill.template.manaUseType != 1 && global::Char.myCharz().cMP < (long)global::Char.myCharz().myskill.manaUse) || (global::Char.myCharz().myskill.template.manaUseType == 1 && global::Char.myCharz().cMP < global::Char.myCharz().cMPFull * (long)global::Char.myCharz().myskill.manaUse / 100L));
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = global::Char.myCharz().myskill == null || (global::Char.myCharz().myskill.template.maxPoint > 0 && global::Char.myCharz().myskill.point == 0);
			result = !flag2;
		}
		return result;
	}

	// Token: 0x06000477 RID: 1143 RVA: 0x00053A20 File Offset: 0x00051C20
	public void resetButton()
	{
		GameCanvas.menu.showMenu = false;
		ChatTextField.gI().close();
		ChatTextField.gI().center = null;
		this.isLockKey = false;
		this.typeTrade = 0;
		GameScr.indexMenu = 0;
		GameScr.indexSelect = 0;
		this.indexItemUse = -1;
		GameScr.indexRow = -1;
		GameScr.indexRowMax = 0;
		GameScr.indexTitle = 0;
		this.typeTrade = (this.typeTradeOrder = 0);
		mSystem.endKey();
		bool flag = global::Char.myCharz().cHP <= 0L || global::Char.myCharz().statusMe == 14 || global::Char.myCharz().statusMe == 5;
		if (flag)
		{
			bool meDead = global::Char.myCharz().meDead;
			if (meDead)
			{
				this.cmdDead = new Command(mResources.DIES[0], 11038);
				this.center = this.cmdDead;
				global::Char.myCharz().cHP = 0L;
			}
			GameScr.isHaveSelectSkill = false;
		}
		else
		{
			GameScr.isHaveSelectSkill = true;
		}
		GameScr.scrMain.clear();
	}

	// Token: 0x06000478 RID: 1144 RVA: 0x00053B24 File Offset: 0x00051D24
	public override void keyPress(int keyCode)
	{
		base.keyPress(keyCode);
	}

	// Token: 0x06000479 RID: 1145 RVA: 0x00053B30 File Offset: 0x00051D30
	public override void updateKey()
	{
		bool flag = Controller.isStopReadMessage || global::Char.myCharz().isTeleport || global::Char.myCharz().isPaintNewSkill || InfoDlg.isLock;
		if (!flag)
		{
			bool flag2 = GameCanvas.isTouch && !ChatTextField.gI().isShow && !GameCanvas.menu.showMenu;
			if (flag2)
			{
				this.updateKeyTouchControl();
			}
			this.checkAuto();
			GameCanvas.debug("F2", 0);
			bool flag3 = ChatPopup.currChatPopup != null;
			if (flag3)
			{
				Command cmdNextLine = ChatPopup.currChatPopup.cmdNextLine;
				bool flag4 = (GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] || mScreen.getCmdPointerLast(cmdNextLine)) && cmdNextLine != null;
				if (flag4)
				{
					GameCanvas.isPointerJustRelease = false;
					GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
					mScreen.keyTouch = -1;
					if (cmdNextLine != null)
					{
						cmdNextLine.performAction();
					}
				}
			}
			else
			{
				bool flag5 = !ChatTextField.gI().isShow;
				if (flag5)
				{
					bool flag6 = (GameCanvas.keyPressed[12] || mScreen.getCmdPointerLast(GameCanvas.currentScreen.left)) && this.left != null;
					if (flag6)
					{
						GameCanvas.isPointerJustRelease = false;
						GameCanvas.isPointerClick = false;
						GameCanvas.keyPressed[12] = false;
						mScreen.keyTouch = -1;
						bool flag7 = this.left != null;
						if (flag7)
						{
							this.left.performAction();
						}
					}
					bool flag8 = (GameCanvas.keyPressed[13] || mScreen.getCmdPointerLast(GameCanvas.currentScreen.right)) && this.right != null;
					if (flag8)
					{
						GameCanvas.isPointerJustRelease = false;
						GameCanvas.isPointerClick = false;
						GameCanvas.keyPressed[13] = false;
						mScreen.keyTouch = -1;
						bool flag9 = this.right != null;
						if (flag9)
						{
							this.right.performAction();
						}
					}
					bool flag10 = (GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] || mScreen.getCmdPointerLast(GameCanvas.currentScreen.center)) && this.center != null;
					if (flag10)
					{
						GameCanvas.isPointerJustRelease = false;
						GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
						mScreen.keyTouch = -1;
						bool flag11 = this.center != null;
						if (flag11)
						{
							this.center.performAction();
						}
					}
				}
				else
				{
					bool flag12 = ChatTextField.gI().left != null && (GameCanvas.keyPressed[12] || mScreen.getCmdPointerLast(ChatTextField.gI().left)) && ChatTextField.gI().left != null;
					if (flag12)
					{
						ChatTextField.gI().left.performAction();
					}
					bool flag13 = ChatTextField.gI().right != null && (GameCanvas.keyPressed[13] || mScreen.getCmdPointerLast(ChatTextField.gI().right)) && ChatTextField.gI().right != null;
					if (flag13)
					{
						ChatTextField.gI().right.performAction();
					}
					bool flag14 = ChatTextField.gI().center != null && (GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] || mScreen.getCmdPointerLast(ChatTextField.gI().center)) && ChatTextField.gI().center != null;
					if (flag14)
					{
						ChatTextField.gI().center.performAction();
					}
				}
			}
			GameCanvas.debug("F6", 0);
			this.updateKeyAlert();
			GameCanvas.debug("F7", 0);
			bool flag15 = global::Char.myCharz().currentMovePoint != null;
			if (flag15)
			{
				for (int i = 0; i < GameCanvas.keyPressed.Length; i++)
				{
					bool flag16 = GameCanvas.keyPressed[i];
					if (flag16)
					{
						global::Char.myCharz().currentMovePoint = null;
						break;
					}
				}
			}
			GameCanvas.debug("F8", 0);
			bool flag17 = ChatTextField.gI().isShow && GameCanvas.keyAsciiPress != 0;
			if (flag17)
			{
				ChatTextField.gI().keyPressed(GameCanvas.keyAsciiPress);
				GameCanvas.keyAsciiPress = 0;
			}
			else
			{
				bool flag18 = this.isLockKey;
				if (flag18)
				{
					GameCanvas.clearKeyHold();
					GameCanvas.clearKeyPressed();
				}
				else
				{
					bool flag19 = GameCanvas.menu.showMenu || this.isOpenUI() || global::Char.isLockKey;
					if (!flag19)
					{
						bool flag20 = GameCanvas.keyPressed[10];
						if (flag20)
						{
							GameCanvas.keyPressed[10] = false;
							this.doUseHP();
							GameCanvas.clearKeyPressed();
						}
						bool flag21 = GameCanvas.keyPressed[11] && this.mobCapcha == null;
						if (flag21)
						{
							bool flag22 = this.popUpYesNo != null;
							if (flag22)
							{
								this.popUpYesNo.cmdYes.performAction();
							}
							else
							{
								bool flag23 = GameScr.info2.info.info != null && GameScr.info2.info.info.charInfo != null;
								if (flag23)
								{
									GameCanvas.panel.setTypeMessage();
									GameCanvas.panel.show();
								}
							}
							GameCanvas.keyPressed[11] = false;
							GameCanvas.clearKeyPressed();
						}
						bool flag24 = GameCanvas.keyAsciiPress != 0 && TField.isQwerty && GameCanvas.keyAsciiPress == 32;
						if (flag24)
						{
							this.doUseHP();
							GameCanvas.keyAsciiPress = 0;
							GameCanvas.clearKeyPressed();
						}
						bool flag25 = GameCanvas.keyAsciiPress != 0 && this.mobCapcha == null && TField.isQwerty && GameCanvas.keyAsciiPress == 121;
						if (flag25)
						{
							bool flag26 = this.popUpYesNo != null;
							if (flag26)
							{
								this.popUpYesNo.cmdYes.performAction();
								GameCanvas.keyAsciiPress = 0;
								GameCanvas.clearKeyPressed();
							}
							else
							{
								bool flag27 = GameScr.info2.info.info != null && GameScr.info2.info.info.charInfo != null;
								if (flag27)
								{
									GameCanvas.panel.setTypeMessage();
									GameCanvas.panel.show();
									GameCanvas.keyAsciiPress = 0;
									GameCanvas.clearKeyPressed();
								}
							}
						}
						bool flag28 = GameCanvas.keyPressed[10] && this.mobCapcha == null;
						if (flag28)
						{
							GameCanvas.keyPressed[10] = false;
							GameScr.info2.doClick(10);
							GameCanvas.clearKeyPressed();
						}
						this.checkDrag();
						bool flag29 = !global::Char.myCharz().isFlyAndCharge;
						if (flag29)
						{
							this.checkClick();
						}
						bool flag30 = global::Char.myCharz().cmdMenu != null && global::Char.myCharz().cmdMenu.isPointerPressInside();
						if (flag30)
						{
							global::Char.myCharz().cmdMenu.performAction();
						}
						bool flag31 = global::Char.myCharz().skillPaint != null;
						if (!flag31)
						{
							bool flag32 = GameCanvas.keyAsciiPress != 0;
							if (flag32)
							{
								bool flag33 = this.mobCapcha == null;
								if (flag33)
								{
									bool isQwerty = TField.isQwerty;
									if (isQwerty)
									{
										bool flag34 = GameCanvas.keyPressed[1];
										if (flag34)
										{
											bool flag35 = GameScr.keySkill[0] != null;
											if (flag35)
											{
												this.doSelectSkill(GameScr.keySkill[0], true);
											}
										}
										else
										{
											bool flag36 = GameCanvas.keyPressed[2];
											if (flag36)
											{
												bool flag37 = GameScr.keySkill[1] != null;
												if (flag37)
												{
													this.doSelectSkill(GameScr.keySkill[1], true);
												}
											}
											else
											{
												bool flag38 = GameCanvas.keyPressed[3];
												if (flag38)
												{
													bool flag39 = GameScr.keySkill[2] != null;
													if (flag39)
													{
														this.doSelectSkill(GameScr.keySkill[2], true);
													}
												}
												else
												{
													bool flag40 = GameCanvas.keyPressed[4];
													if (flag40)
													{
														bool flag41 = GameScr.keySkill[3] != null;
														if (flag41)
														{
															this.doSelectSkill(GameScr.keySkill[3], true);
														}
													}
													else
													{
														bool flag42 = GameCanvas.keyPressed[5];
														if (flag42)
														{
															bool flag43 = GameScr.keySkill[4] != null;
															if (flag43)
															{
																this.doSelectSkill(GameScr.keySkill[4], true);
															}
														}
														else
														{
															bool flag44 = GameCanvas.keyPressed[6];
															if (flag44)
															{
																bool flag45 = GameScr.keySkill[5] != null;
																if (flag45)
																{
																	this.doSelectSkill(GameScr.keySkill[5], true);
																}
															}
															else
															{
																bool flag46 = GameCanvas.keyPressed[7];
																if (flag46)
																{
																	bool flag47 = GameScr.keySkill[6] != null;
																	if (flag47)
																	{
																		this.doSelectSkill(GameScr.keySkill[6], true);
																	}
																}
																else
																{
																	bool flag48 = GameCanvas.keyPressed[8];
																	if (flag48)
																	{
																		bool flag49 = GameScr.keySkill[7] != null;
																		if (flag49)
																		{
																			this.doSelectSkill(GameScr.keySkill[7], true);
																		}
																	}
																	else
																	{
																		bool flag50 = GameCanvas.keyPressed[9];
																		if (flag50)
																		{
																			bool flag51 = GameScr.keySkill[8] != null;
																			if (flag51)
																			{
																				this.doSelectSkill(GameScr.keySkill[8], true);
																			}
																		}
																		else
																		{
																			bool flag52 = GameCanvas.keyPressed[0];
																			if (flag52)
																			{
																				bool flag53 = GameScr.keySkill[9] != null;
																				if (flag53)
																				{
																					this.doSelectSkill(GameScr.keySkill[9], true);
																				}
																			}
																			else
																			{
																				bool flag54 = GameCanvas.keyAsciiPress == 105;
																				if (flag54)
																				{
																					MyVector myVector = new MyVector();
																					myVector.addElement(new Command("Mặc set 1", 999901));
																					myVector.addElement(new Command("Mặc set 2", 999902));
																					GameCanvas.menu.startAt(myVector, 3);
																				}
																				else
																				{
																					bool flag55 = GameCanvas.keyAsciiPress == 114;
																					if (flag55)
																					{
																						ChatTextField.gI().startChat(this, string.Empty);
																					}
																					else
																					{
																						bool flag56 = GameCanvas.keyAsciiPress == 120;
																						if (flag56)
																						{
																							XmapController.ShowXmapMenu();
																						}
																						else
																						{
																							bool flag57 = GameCanvas.keyAsciiPress == 98;
																							if (flag57)
																							{
																								bool flag58 = DataAccount.Type == 1;
																								if (flag58)
																								{
																									SocketOutPut.Send(string.Format("bom|{0}", DataAccount.Team));
																								}
																							}
																							else
																							{
																								bool flag59 = GameCanvas.keyAsciiPress == 103;
																								if (flag59)
																								{
																									bool flag60 = DataAccount.Type == 1;
																									if (flag60)
																									{
																										SocketOutPut.Send(string.Format("sp|{0}|{1}|{2}", TileMap.mapID, TileMap.zoneID, DataAccount.Team));
																									}
																								}
																								else
																								{
																									bool flag61 = GameCanvas.keyAsciiPress == 100;
																									if (flag61)
																									{
																										bool flag62 = DataAccount.Type == 1;
																										if (flag62)
																										{
																											SocketOutPut.Send("dokhu");
																										}
																									}
																									else
																									{
																										bool flag63 = GameCanvas.keyAsciiPress == 109;
																										if (flag63)
																										{
																											Service.gI().openUIZone();
																											GameCanvas.panel.setTypeZone();
																											GameCanvas.panel.show();
																										}
																										else
																										{
																											bool flag64 = GameCanvas.keyAsciiPress == 102;
																											if (flag64)
																											{
																												bool flag65 = DataAccount.Type == 1;
																												if (flag65)
																												{
																													SocketOutPut.Send(string.Format("hopthe|{0}", DataAccount.Team));
																												}
																											}
																											else
																											{
																												bool flag66 = GameCanvas.keyAsciiPress == 119;
																												if (flag66)
																												{
																													bool flag67 = DataAccount.Type == 1;
																													if (flag67)
																													{
																														SocketOutPut.Send(string.Format("bohuyet|{0}", DataAccount.Team));
																													}
																												}
																												else
																												{
																													bool flag68 = GameCanvas.keyAsciiPress == 113;
																													if (flag68)
																													{
																														bool flag69 = DataAccount.Type == 1;
																														if (flag69)
																														{
																															SocketOutPut.Send(string.Format("ttnl|{0}", DataAccount.Team));
																														}
																													}
																													else
																													{
																														bool flag70 = GameCanvas.keyAsciiPress == 106;
																														if (flag70)
																														{
																															bool flag71 = GameScr.getX(0) > 0 && GameScr.getY(0) > 0;
																															if (flag71)
																															{
																																GameScr.MoveMyChar(GameScr.getX(0), GameScr.getY(0));
																															}
																														}
																														else
																														{
																															bool flag72 = GameCanvas.keyAsciiPress == 107;
																															if (flag72)
																															{
																																bool flag73 = GameScr.getX(1) > 0 && GameScr.getY(1) > 0;
																																if (flag73)
																																{
																																	GameScr.MoveMyChar(GameScr.getX(1), GameScr.getY(1));
																																	Service.gI().getMapOffline();
																																	Service.gI().requestChangeMap();
																																}
																															}
																															else
																															{
																																bool flag74 = GameCanvas.keyAsciiPress == 108;
																																if (flag74)
																																{
																																	bool flag75 = GameScr.getX(2) > 0 && GameScr.getY(2) > 0;
																																	if (flag75)
																																	{
																																		GameScr.MoveMyChar(GameScr.getX(2), GameScr.getY(2));
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									else
									{
										bool flag76 = !GameCanvas.isMoveNumberPad;
										if (flag76)
										{
											ChatTextField.gI().startChat(GameCanvas.keyAsciiPress, this, string.Empty);
										}
										else
										{
											bool flag77 = GameCanvas.keyAsciiPress == 55;
											if (flag77)
											{
												bool flag78 = GameScr.keySkill[0] != null;
												if (flag78)
												{
													this.doSelectSkill(GameScr.keySkill[0], true);
												}
											}
											else
											{
												bool flag79 = GameCanvas.keyAsciiPress == 56;
												if (flag79)
												{
													bool flag80 = GameScr.keySkill[1] != null;
													if (flag80)
													{
														this.doSelectSkill(GameScr.keySkill[1], true);
													}
												}
												else
												{
													bool flag81 = GameCanvas.keyAsciiPress == 57;
													if (flag81)
													{
														bool flag82 = GameScr.keySkill[(!Main.isPC) ? 2 : 21] != null;
														if (flag82)
														{
															this.doSelectSkill(GameScr.keySkill[2], true);
														}
													}
													else
													{
														bool flag83 = GameCanvas.keyAsciiPress == 48;
														if (flag83)
														{
															ChatTextField.gI().startChat(this, string.Empty);
														}
													}
												}
											}
										}
									}
								}
								else
								{
									char[] array = this.keyInput.ToCharArray();
									MyVector myVector2 = new MyVector();
									for (int j = 0; j < array.Length; j++)
									{
										myVector2.addElement(array[j].ToString() + string.Empty);
									}
									myVector2.removeElementAt(0);
									string text = ((char)GameCanvas.keyAsciiPress).ToString() + string.Empty;
									bool flag84 = text.Equals(string.Empty) || text == null || text.Equals("\n");
									if (flag84)
									{
										text = "-";
									}
									myVector2.insertElementAt(text, myVector2.size());
									this.keyInput = string.Empty;
									for (int k = 0; k < myVector2.size(); k++)
									{
										this.keyInput += ((string)myVector2.elementAt(k)).ToUpper();
									}
									Service.gI().mobCapcha((char)GameCanvas.keyAsciiPress);
								}
								GameCanvas.keyAsciiPress = 0;
							}
							bool flag85 = global::Char.myCharz().statusMe == 1;
							if (flag85)
							{
								GameCanvas.debug("F10", 0);
								bool flag86 = !this.doSeleckSkillFlag;
								if (flag86)
								{
									bool flag87 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25];
									if (flag87)
									{
										GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
										this.doFire(false, false);
									}
									else
									{
										bool flag88 = GameCanvas.keyHold[(!Main.isPC) ? 2 : 21];
										if (flag88)
										{
											bool flag89 = !global::Char.myCharz().isLockMove;
											if (flag89)
											{
												this.setCharJump(0);
											}
										}
										else
										{
											bool flag90 = GameCanvas.keyHold[1] && this.mobCapcha == null;
											if (flag90)
											{
												bool flag91 = !Main.isPC;
												if (flag91)
												{
													global::Char.myCharz().cdir = -1;
													bool flag92 = !global::Char.myCharz().isLockMove;
													if (flag92)
													{
														this.setCharJump(-4);
													}
												}
											}
											else
											{
												bool flag93 = GameCanvas.keyHold[(!Main.isPC) ? 5 : 25] && this.mobCapcha == null;
												if (flag93)
												{
													bool flag94 = !Main.isPC;
													if (flag94)
													{
														global::Char.myCharz().cdir = 1;
														bool flag95 = !global::Char.myCharz().isLockMove;
														if (flag95)
														{
															this.setCharJump(4);
														}
													}
												}
												else
												{
													bool flag96 = GameCanvas.keyHold[(!Main.isPC) ? 4 : 23];
													if (flag96)
													{
														GameScr.isAutoPlay = false;
														global::Char.myCharz().isAttack = false;
														bool flag97 = global::Char.myCharz().cdir == 1;
														if (flag97)
														{
															global::Char.myCharz().cdir = -1;
														}
														else
														{
															bool flag98 = !global::Char.myCharz().isLockMove;
															if (flag98)
															{
																bool flag99 = global::Char.myCharz().cx - global::Char.myCharz().cxSend != 0;
																if (flag99)
																{
																	Service.gI().charMove();
																}
																global::Char.myCharz().statusMe = 2;
																global::Char.myCharz().cvx = -global::Char.myCharz().cspeed;
															}
														}
														global::Char.myCharz().holder = false;
													}
													else
													{
														bool flag100 = GameCanvas.keyHold[(!Main.isPC) ? 6 : 24];
														if (flag100)
														{
															GameScr.isAutoPlay = false;
															global::Char.myCharz().isAttack = false;
															bool flag101 = global::Char.myCharz().cdir == -1;
															if (flag101)
															{
																global::Char.myCharz().cdir = 1;
															}
															else
															{
																bool flag102 = !global::Char.myCharz().isLockMove;
																if (flag102)
																{
																	bool flag103 = global::Char.myCharz().cx - global::Char.myCharz().cxSend != 0;
																	if (flag103)
																	{
																		Service.gI().charMove();
																	}
																	global::Char.myCharz().statusMe = 2;
																	global::Char.myCharz().cvx = global::Char.myCharz().cspeed;
																}
															}
															global::Char.myCharz().holder = false;
														}
													}
												}
											}
										}
									}
								}
							}
							else
							{
								bool flag104 = global::Char.myCharz().statusMe == 2;
								if (flag104)
								{
									GameCanvas.debug("F11", 0);
									bool flag105 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25];
									if (flag105)
									{
										GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
										this.doFire(false, true);
									}
									else
									{
										bool flag106 = GameCanvas.keyHold[(!Main.isPC) ? 2 : 21];
										if (flag106)
										{
											bool flag107 = global::Char.myCharz().cx - global::Char.myCharz().cxSend != 0 || global::Char.myCharz().cy - global::Char.myCharz().cySend != 0;
											if (flag107)
											{
												Service.gI().charMove();
											}
											global::Char.myCharz().cvy = -10;
											global::Char.myCharz().statusMe = 3;
											global::Char.myCharz().cp1 = 0;
										}
										else
										{
											bool flag108 = GameCanvas.keyHold[1] && this.mobCapcha == null;
											if (flag108)
											{
												bool isPC = Main.isPC;
												if (isPC)
												{
													bool flag109 = global::Char.myCharz().cx - global::Char.myCharz().cxSend != 0 || global::Char.myCharz().cy - global::Char.myCharz().cySend != 0;
													if (flag109)
													{
														Service.gI().charMove();
													}
													global::Char.myCharz().cdir = -1;
													global::Char.myCharz().cvy = -10;
													global::Char.myCharz().cvx = -4;
													global::Char.myCharz().statusMe = 3;
													global::Char.myCharz().cp1 = 0;
												}
											}
											else
											{
												bool flag110 = GameCanvas.keyHold[3] && this.mobCapcha == null;
												if (flag110)
												{
													bool flag111 = !Main.isPC;
													if (flag111)
													{
														bool flag112 = global::Char.myCharz().cx - global::Char.myCharz().cxSend != 0 || global::Char.myCharz().cy - global::Char.myCharz().cySend != 0;
														if (flag112)
														{
															Service.gI().charMove();
														}
														global::Char.myCharz().cdir = 1;
														global::Char.myCharz().cvy = -10;
														global::Char.myCharz().cvx = 4;
														global::Char.myCharz().statusMe = 3;
														global::Char.myCharz().cp1 = 0;
													}
												}
												else
												{
													bool flag113 = GameCanvas.keyHold[(!Main.isPC) ? 4 : 23];
													if (flag113)
													{
														GameScr.isAutoPlay = false;
														bool flag114 = global::Char.myCharz().cdir == 1;
														if (flag114)
														{
															global::Char.myCharz().cdir = -1;
														}
														else
														{
															global::Char.myCharz().cvx = -global::Char.myCharz().cspeed + global::Char.myCharz().cBonusSpeed;
														}
													}
													else
													{
														bool flag115 = GameCanvas.keyHold[(!Main.isPC) ? 6 : 24];
														if (flag115)
														{
															GameScr.isAutoPlay = false;
															bool flag116 = global::Char.myCharz().cdir == -1;
															if (flag116)
															{
																global::Char.myCharz().cdir = 1;
															}
															else
															{
																global::Char.myCharz().cvx = global::Char.myCharz().cspeed + global::Char.myCharz().cBonusSpeed;
															}
														}
													}
												}
											}
										}
									}
								}
								else
								{
									bool flag117 = global::Char.myCharz().statusMe == 3;
									if (flag117)
									{
										GameScr.isAutoPlay = false;
										GameCanvas.debug("F12", 0);
										bool flag118 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25];
										if (flag118)
										{
											GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
											this.doFire(false, true);
										}
										bool flag119 = GameCanvas.keyHold[(!Main.isPC) ? 4 : 23] || (GameCanvas.keyHold[1] && this.mobCapcha == null);
										if (flag119)
										{
											bool flag120 = global::Char.myCharz().cdir == 1;
											if (flag120)
											{
												global::Char.myCharz().cdir = -1;
											}
											else
											{
												global::Char.myCharz().cvx = -global::Char.myCharz().cspeed;
											}
										}
										else
										{
											bool flag121 = GameCanvas.keyHold[(!Main.isPC) ? 6 : 24] || (GameCanvas.keyHold[3] && this.mobCapcha == null);
											if (flag121)
											{
												bool flag122 = global::Char.myCharz().cdir == -1;
												if (flag122)
												{
													global::Char.myCharz().cdir = 1;
												}
												else
												{
													global::Char.myCharz().cvx = global::Char.myCharz().cspeed;
												}
											}
										}
										bool flag123 = (GameCanvas.keyHold[(!Main.isPC) ? 2 : 21] || ((GameCanvas.keyHold[1] || GameCanvas.keyHold[3]) && this.mobCapcha == null)) && global::Char.myCharz().canFly && global::Char.myCharz().cMP > 0L && global::Char.myCharz().cp1 < 8 && global::Char.myCharz().cvy > -4;
										if (flag123)
										{
											global::Char.myCharz().cp1++;
											global::Char.myCharz().cvy = -7;
										}
									}
									else
									{
										bool flag124 = global::Char.myCharz().statusMe == 4;
										if (flag124)
										{
											GameCanvas.debug("F13", 0);
											bool flag125 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25];
											if (flag125)
											{
												GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
												this.doFire(false, true);
											}
											bool flag126 = GameCanvas.keyHold[(!Main.isPC) ? 2 : 21] && global::Char.myCharz().cMP > 0L && global::Char.myCharz().canFly;
											if (flag126)
											{
												GameScr.isAutoPlay = false;
												bool flag127 = (global::Char.myCharz().cx - global::Char.myCharz().cxSend != 0 || global::Char.myCharz().cy - global::Char.myCharz().cySend != 0) && (Res.abs(global::Char.myCharz().cx - global::Char.myCharz().cxSend) > 96 || Res.abs(global::Char.myCharz().cy - global::Char.myCharz().cySend) > 24);
												if (flag127)
												{
													Service.gI().charMove();
												}
												global::Char.myCharz().cvy = -10;
												global::Char.myCharz().statusMe = 3;
												global::Char.myCharz().cp1 = 0;
											}
											bool flag128 = GameCanvas.keyHold[(!Main.isPC) ? 4 : 23];
											if (flag128)
											{
												GameScr.isAutoPlay = false;
												bool flag129 = global::Char.myCharz().cdir == 1;
												if (flag129)
												{
													global::Char.myCharz().cdir = -1;
												}
												else
												{
													global::Char.myCharz().cp1++;
													global::Char.myCharz().cvx = -global::Char.myCharz().cspeed;
													bool flag130 = global::Char.myCharz().cp1 > 5 && global::Char.myCharz().cvy > 6;
													if (flag130)
													{
														global::Char.myCharz().statusMe = 10;
														global::Char.myCharz().cp1 = 0;
														global::Char.myCharz().cvy = 0;
													}
												}
											}
											else
											{
												bool flag131 = GameCanvas.keyHold[(!Main.isPC) ? 6 : 24];
												if (flag131)
												{
													GameScr.isAutoPlay = false;
													bool flag132 = global::Char.myCharz().cdir == -1;
													if (flag132)
													{
														global::Char.myCharz().cdir = 1;
													}
													else
													{
														global::Char.myCharz().cp1++;
														global::Char.myCharz().cvx = global::Char.myCharz().cspeed;
														bool flag133 = global::Char.myCharz().cp1 > 5 && global::Char.myCharz().cvy > 6;
														if (flag133)
														{
															global::Char.myCharz().statusMe = 10;
															global::Char.myCharz().cp1 = 0;
															global::Char.myCharz().cvy = 0;
														}
													}
												}
											}
										}
										else
										{
											bool flag134 = global::Char.myCharz().statusMe == 10;
											if (flag134)
											{
												GameCanvas.debug("F14", 0);
												bool flag135 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25];
												if (flag135)
												{
													GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
													this.doFire(false, true);
												}
												bool flag136 = global::Char.myCharz().canFly && global::Char.myCharz().cMP > 0L;
												if (flag136)
												{
													bool flag137 = GameCanvas.keyHold[(!Main.isPC) ? 2 : 21];
													if (flag137)
													{
														GameScr.isAutoPlay = false;
														bool flag138 = (global::Char.myCharz().cx - global::Char.myCharz().cxSend != 0 || global::Char.myCharz().cy - global::Char.myCharz().cySend != 0) && (Res.abs(global::Char.myCharz().cx - global::Char.myCharz().cxSend) > 96 || Res.abs(global::Char.myCharz().cy - global::Char.myCharz().cySend) > 24);
														if (flag138)
														{
															Service.gI().charMove();
														}
														global::Char.myCharz().cvy = -10;
														global::Char.myCharz().statusMe = 3;
														global::Char.myCharz().cp1 = 0;
													}
													else
													{
														bool flag139 = GameCanvas.keyHold[(!Main.isPC) ? 4 : 23];
														if (flag139)
														{
															GameScr.isAutoPlay = false;
															bool flag140 = global::Char.myCharz().cdir == 1;
															if (flag140)
															{
																global::Char.myCharz().cdir = -1;
															}
															else
															{
																global::Char.myCharz().cvx = -(global::Char.myCharz().cspeed + 1);
															}
														}
														else
														{
															bool flag141 = GameCanvas.keyHold[(!Main.isPC) ? 6 : 24];
															if (flag141)
															{
																bool flag142 = global::Char.myCharz().cdir == -1;
																if (flag142)
																{
																	global::Char.myCharz().cdir = 1;
																}
																else
																{
																	global::Char.myCharz().cvx = global::Char.myCharz().cspeed + 1;
																}
															}
														}
													}
												}
											}
											else
											{
												bool flag143 = global::Char.myCharz().statusMe == 7;
												if (flag143)
												{
													GameCanvas.debug("F15", 0);
													bool flag144 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25];
													if (flag144)
													{
														GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
													}
													bool flag145 = GameCanvas.keyHold[(!Main.isPC) ? 4 : 23];
													if (flag145)
													{
														GameScr.isAutoPlay = false;
														bool flag146 = global::Char.myCharz().cdir == 1;
														if (flag146)
														{
															global::Char.myCharz().cdir = -1;
														}
														else
														{
															global::Char.myCharz().cvx = -global::Char.myCharz().cspeed + 2;
														}
													}
													else
													{
														bool flag147 = GameCanvas.keyHold[(!Main.isPC) ? 6 : 24];
														if (flag147)
														{
															GameScr.isAutoPlay = false;
															bool flag148 = global::Char.myCharz().cdir == -1;
															if (flag148)
															{
																global::Char.myCharz().cdir = 1;
															}
															else
															{
																global::Char.myCharz().cvx = global::Char.myCharz().cspeed - 2;
															}
														}
													}
												}
											}
										}
									}
								}
							}
							GameCanvas.debug("F17", 0);
							bool flag149 = GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] && GameCanvas.keyAsciiPress != 56;
							if (flag149)
							{
								GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] = false;
								global::Char.myCharz().delayFall = 0;
							}
							bool flag150 = GameCanvas.keyPressed[10];
							if (flag150)
							{
								GameCanvas.keyPressed[10] = false;
								this.doUseHP();
							}
							GameCanvas.debug("F20", 0);
							GameCanvas.clearKeyPressed();
							GameCanvas.debug("F23", 0);
							this.doSeleckSkillFlag = false;
						}
					}
				}
			}
		}
	}

	// Token: 0x0600047A RID: 1146 RVA: 0x00055798 File Offset: 0x00053998
	public bool isVsMap()
	{
		return true;
	}

	// Token: 0x0600047B RID: 1147 RVA: 0x000557AC File Offset: 0x000539AC
	private void checkDrag()
	{
		bool flag = GameScr.isAnalog == 1 || GameScr.gamePad.disableCheckDrag();
		if (!flag)
		{
			global::Char.myCharz().cmtoChar = true;
			bool flag2 = GameScr.isUseTouch;
			if (!flag2)
			{
				bool isPointerJustDown = GameCanvas.isPointerJustDown;
				if (isPointerJustDown)
				{
					GameCanvas.isPointerJustDown = false;
					this.isPointerDowning = true;
					this.ptDownTime = 0;
					this.ptLastDownX = (this.ptFirstDownX = GameCanvas.px);
					this.ptLastDownY = (this.ptFirstDownY = GameCanvas.py);
				}
				bool flag3 = this.isPointerDowning;
				if (flag3)
				{
					int num = GameCanvas.px - this.ptLastDownX;
					int num2 = GameCanvas.py - this.ptLastDownY;
					bool flag4 = !this.isChangingCameraMode && (Res.abs(GameCanvas.px - this.ptFirstDownX) > 15 || Res.abs(GameCanvas.py - this.ptFirstDownY) > 15);
					if (flag4)
					{
						this.isChangingCameraMode = true;
					}
					this.ptLastDownX = GameCanvas.px;
					this.ptLastDownY = GameCanvas.py;
					this.ptDownTime++;
					bool flag5 = this.isChangingCameraMode;
					if (flag5)
					{
						global::Char.myCharz().cmtoChar = false;
						GameScr.cmx -= num;
						GameScr.cmy -= num2;
						bool flag6 = GameScr.cmx < 24;
						if (flag6)
						{
							int num3 = (24 - GameScr.cmx) / 3;
							bool flag7 = num3 != 0;
							if (flag7)
							{
								GameScr.cmx += num - num / num3;
							}
						}
						bool flag8 = GameScr.cmx < (this.isVsMap() ? 24 : 0);
						if (flag8)
						{
							GameScr.cmx = (this.isVsMap() ? 24 : 0);
						}
						bool flag9 = GameScr.cmx > GameScr.cmxLim;
						if (flag9)
						{
							int num4 = (GameScr.cmx - GameScr.cmxLim) / 3;
							bool flag10 = num4 != 0;
							if (flag10)
							{
								GameScr.cmx += num - num / num4;
							}
						}
						bool flag11 = GameScr.cmx > GameScr.cmxLim + ((!this.isVsMap()) ? 24 : 0);
						if (flag11)
						{
							GameScr.cmx = GameScr.cmxLim + ((!this.isVsMap()) ? 24 : 0);
						}
						bool flag12 = GameScr.cmy < 0;
						if (flag12)
						{
							int num5 = -GameScr.cmy / 3;
							bool flag13 = num5 != 0;
							if (flag13)
							{
								GameScr.cmy += num2 - num2 / num5;
							}
						}
						bool flag14 = GameScr.cmy < -((!this.isVsMap()) ? 24 : 0);
						if (flag14)
						{
							GameScr.cmy = -((!this.isVsMap()) ? 24 : 0);
						}
						bool flag15 = GameScr.cmy > GameScr.cmyLim;
						if (flag15)
						{
							GameScr.cmy = GameScr.cmyLim;
						}
						GameScr.cmtoX = GameScr.cmx;
						GameScr.cmtoY = GameScr.cmy;
					}
				}
				bool flag16 = this.isPointerDowning && GameCanvas.isPointerJustRelease;
				if (flag16)
				{
					this.isPointerDowning = false;
					this.isChangingCameraMode = false;
					bool flag17 = Res.abs(GameCanvas.px - this.ptFirstDownX) > 15 || Res.abs(GameCanvas.py - this.ptFirstDownY) > 15;
					if (flag17)
					{
						GameCanvas.isPointerJustRelease = false;
					}
				}
			}
		}
	}

	// Token: 0x0600047C RID: 1148 RVA: 0x00055AF0 File Offset: 0x00053CF0
	private void checkClick()
	{
		bool flag = this.isCharging();
		if (!flag)
		{
			bool flag2 = this.popUpYesNo != null && this.popUpYesNo.cmdYes != null && this.popUpYesNo.cmdYes.isPointerPressInside();
			if (flag2)
			{
				this.popUpYesNo.cmdYes.performAction();
			}
			else
			{
				bool flag3 = this.checkClickToCapcha();
				if (!flag3)
				{
					long num = mSystem.currentTimeMillis();
					bool flag4 = this.lastSingleClick != 0L;
					if (flag4)
					{
						this.lastSingleClick = 0L;
						GameCanvas.isPointerJustDown = false;
						bool flag5 = !this.disableSingleClick;
						if (flag5)
						{
							this.checkSingleClick();
							GameCanvas.isPointerJustRelease = false;
							this.isWaitingDoubleClick = true;
							this.timeStartDblClick = mSystem.currentTimeMillis();
						}
					}
					bool flag6 = this.isWaitingDoubleClick;
					if (flag6)
					{
						this.timeEndDblClick = mSystem.currentTimeMillis();
						bool flag7 = this.timeEndDblClick - this.timeStartDblClick < 300L && GameCanvas.isPointerJustRelease;
						if (flag7)
						{
							this.isWaitingDoubleClick = false;
							this.checkDoubleClick();
						}
					}
					bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
					if (isPointerJustRelease)
					{
						this.disableSingleClick = this.checkSingleClickEarly();
						this.lastSingleClick = num;
						this.lastClickCMX = GameScr.cmx;
						this.lastClickCMY = GameScr.cmy;
						GameCanvas.isPointerJustRelease = false;
					}
				}
			}
		}
	}

	// Token: 0x0600047D RID: 1149 RVA: 0x00055C44 File Offset: 0x00053E44
	private IMapObject findClickToItem(int px, int py)
	{
		IMapObject mapObject = null;
		int num = 0;
		int num2 = 30;
		MyVector[] array = new MyVector[]
		{
			GameScr.vMob,
			GameScr.vNpc,
			GameScr.vItemMap,
			GameScr.vCharInMap
		};
		for (int i = 0; i < array.Length; i++)
		{
			for (int j = 0; j < array[i].size(); j++)
			{
				IMapObject mapObject2 = (IMapObject)array[i].elementAt(j);
				bool flag = mapObject2.isInvisible();
				if (!flag)
				{
					bool flag2 = mapObject2 is Mob;
					if (flag2)
					{
						Mob mob = (Mob)mapObject2;
						bool flag3 = mob.isMobMe && mob.Equals(global::Char.myCharz().mobMe);
						if (flag3)
						{
							goto IL_15F;
						}
					}
					int x = mapObject2.getX();
					int y = mapObject2.getY();
					int w = mapObject2.getW();
					int h = mapObject2.getH();
					bool flag4 = !this.inRectangle(px, py, x - w / 2 - num2, y - h - num2, w + num2 * 2, h + num2 * 2);
					if (!flag4)
					{
						bool flag5 = mapObject == null;
						if (flag5)
						{
							mapObject = mapObject2;
							num = Res.abs(px - x) + Res.abs(py - y);
							bool flag6 = i == 1;
							if (flag6)
							{
								return mapObject;
							}
						}
						else
						{
							int num3 = Res.abs(px - x) + Res.abs(py - y);
							bool flag7 = num3 < num;
							if (flag7)
							{
								mapObject = mapObject2;
								num = num3;
							}
						}
					}
				}
				IL_15F:;
			}
		}
		return mapObject;
	}

	// Token: 0x0600047E RID: 1150 RVA: 0x00055DEC File Offset: 0x00053FEC
	private Mob findClickToMOB(int px, int py)
	{
		int num = 30;
		Mob mob = null;
		int num2 = 0;
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob2 = (Mob)GameScr.vMob.elementAt(i);
			bool flag = mob2.isInvisible();
			if (!flag)
			{
				bool flag2 = mob2 != null;
				if (flag2)
				{
					Mob mob3 = mob2;
					bool flag3 = mob3.isMobMe && mob3.Equals(global::Char.myCharz().mobMe);
					if (flag3)
					{
						goto IL_110;
					}
				}
				int x = mob2.getX();
				int y = mob2.getY();
				int w = mob2.getW();
				int h = mob2.getH();
				bool flag4 = !this.inRectangle(px, py, x - w / 2 - num, y - h - num, w + num * 2, h + num * 2);
				if (!flag4)
				{
					bool flag5 = mob == null;
					if (flag5)
					{
						mob = mob2;
						num2 = Res.abs(px - x) + Res.abs(py - y);
					}
					else
					{
						int num3 = Res.abs(px - x) + Res.abs(py - y);
						bool flag6 = num3 < num2;
						if (flag6)
						{
							mob = mob2;
							num2 = num3;
						}
					}
				}
			}
			IL_110:;
		}
		return mob;
	}

	// Token: 0x0600047F RID: 1151 RVA: 0x00055F2C File Offset: 0x0005412C
	private bool inRectangle(int xClick, int yClick, int x, int y, int w, int h)
	{
		return xClick >= x && xClick <= x + w && yClick >= y && yClick <= y + h;
	}

	// Token: 0x06000480 RID: 1152 RVA: 0x00055F5C File Offset: 0x0005415C
	private bool checkSingleClickEarly()
	{
		int num = GameCanvas.px + GameScr.cmx;
		int num2 = GameCanvas.py + GameScr.cmy;
		global::Char.myCharz().cancelAttack();
		IMapObject mapObject = this.findClickToItem(num, num2);
		bool flag = mapObject != null;
		bool result;
		if (flag)
		{
			bool flag2 = global::Char.myCharz().isAttacPlayerStatus() && global::Char.myCharz().charFocus != null && !mapObject.Equals(global::Char.myCharz().charFocus) && !mapObject.Equals(global::Char.myCharz().charFocus.mobMe) && mapObject is global::Char;
			if (flag2)
			{
				global::Char @char = (global::Char)mapObject;
				bool flag3 = @char.cTypePk != 5 && !@char.isAttacPlayerStatus();
				if (flag3)
				{
					this.checkClickMoveTo(num, num2, 2);
					return false;
				}
			}
			bool flag4 = global::Char.myCharz().mobFocus == mapObject || global::Char.myCharz().itemFocus == mapObject;
			if (flag4)
			{
				this.doDoubleClickToObj(mapObject);
				result = true;
			}
			else
			{
				bool flag5 = TileMap.mapID == 51 && mapObject.Equals(global::Char.myCharz().npcFocus);
				if (flag5)
				{
					this.checkClickMoveTo(num, num2, 3);
					result = false;
				}
				else
				{
					bool flag6 = global::Char.myCharz().skillPaint != null || global::Char.myCharz().arr != null || global::Char.myCharz().dart != null || global::Char.myCharz().skillInfoPaint() != null;
					if (flag6)
					{
						result = false;
					}
					else
					{
						global::Char.myCharz().focusManualTo(mapObject);
						mapObject.stopMoving();
						result = false;
					}
				}
			}
		}
		else
		{
			result = false;
		}
		return result;
	}

	// Token: 0x06000481 RID: 1153 RVA: 0x000560F4 File Offset: 0x000542F4
	private void checkDoubleClick()
	{
		int num = GameCanvas.px + this.lastClickCMX;
		int num2 = GameCanvas.py + this.lastClickCMY;
		int cy = global::Char.myCharz().cy;
		bool flag = this.isLockKey;
		if (!flag)
		{
			IMapObject mapObject = this.findClickToItem(num, num2);
			bool flag2 = mapObject != null;
			if (flag2)
			{
				bool flag3 = mapObject is Mob && !this.isMeCanAttackMob((Mob)mapObject);
				if (flag3)
				{
					this.checkClickMoveTo(num, num2, 4);
				}
				else
				{
					bool flag4 = this.checkClickToBotton(mapObject) || (!mapObject.Equals(global::Char.myCharz().npcFocus) && this.mobCapcha != null);
					if (!flag4)
					{
						bool flag5 = global::Char.myCharz().isAttacPlayerStatus() && global::Char.myCharz().charFocus != null && !mapObject.Equals(global::Char.myCharz().charFocus) && !mapObject.Equals(global::Char.myCharz().charFocus.mobMe) && mapObject is global::Char;
						if (flag5)
						{
							global::Char @char = (global::Char)mapObject;
							bool flag6 = @char.cTypePk != 5 && !@char.isAttacPlayerStatus();
							if (flag6)
							{
								this.checkClickMoveTo(num, num2, 5);
								return;
							}
						}
						bool flag7 = TileMap.mapID == 51 && mapObject.Equals(global::Char.myCharz().npcFocus);
						if (flag7)
						{
							this.checkClickMoveTo(num, num2, 6);
						}
						else
						{
							this.doDoubleClickToObj(mapObject);
						}
					}
				}
			}
			else
			{
				bool flag8 = !this.checkClickToPopup(num, num2) && !this.checkClipTopChatPopUp(num, num2) && !Main.isPC;
				if (flag8)
				{
					this.checkClickMoveTo(num, num2, 7);
				}
			}
		}
	}

	// Token: 0x06000482 RID: 1154 RVA: 0x000562B0 File Offset: 0x000544B0
	private bool checkClickToBotton(IMapObject Object)
	{
		bool flag = Object == null;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			int i = Object.getY();
			int num = global::Char.myCharz().cy;
			bool flag2 = i < num;
			if (flag2)
			{
				while (i < num)
				{
					num -= 5;
					bool flag3 = TileMap.tileTypeAt(global::Char.myCharz().cx, num, 8192);
					if (flag3)
					{
						this.auto = 0;
						global::Char.myCharz().cancelAttack();
						global::Char.myCharz().currentMovePoint = null;
						return true;
					}
				}
			}
			result = false;
		}
		return result;
	}

	// Token: 0x06000483 RID: 1155 RVA: 0x00056340 File Offset: 0x00054540
	private void doDoubleClickToObj(IMapObject obj)
	{
		bool flag = (obj.Equals(global::Char.myCharz().npcFocus) || this.mobCapcha == null) && !this.checkClickToBotton(obj);
		if (flag)
		{
			this.checkEffToObj(obj, false);
			global::Char.myCharz().cancelAttack();
			global::Char.myCharz().currentMovePoint = null;
			global::Char.myCharz().cvx = (global::Char.myCharz().cvy = 0);
			obj.stopMoving();
			this.auto = 10;
			this.doFire(false, true);
			this.clickToX = obj.getX();
			this.clickToY = obj.getY();
			this.clickOnTileTop = false;
			this.clickMoving = true;
			this.clickMovingRed = true;
			this.clickMovingTimeOut = 20;
			this.clickMovingP1 = 30;
		}
	}

	// Token: 0x06000484 RID: 1156 RVA: 0x0005640C File Offset: 0x0005460C
	private void checkSingleClick()
	{
		int xClick = GameCanvas.px + this.lastClickCMX;
		int yClick = GameCanvas.py + this.lastClickCMY;
		bool flag = !this.isLockKey && !this.checkClickToPopup(xClick, yClick) && !this.checkClipTopChatPopUp(xClick, yClick);
		if (flag)
		{
			this.checkClickMoveTo(xClick, yClick, 0);
		}
	}

	// Token: 0x06000485 RID: 1157 RVA: 0x00056464 File Offset: 0x00054664
	private bool checkClipTopChatPopUp(int xClick, int yClick)
	{
		bool flag = this.Equals(GameScr.info2) && GameScr.gI().popUpYesNo != null;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = GameScr.info2.info.info != null && GameScr.info2.info.info.charInfo != null;
			if (flag2)
			{
				int x = Res.abs(GameScr.info2.cmx) + GameScr.info2.info.X - 40;
				int y = Res.abs(GameScr.info2.cmy) + GameScr.info2.info.Y;
				bool flag3 = this.inRectangle(xClick - GameScr.cmx, yClick - GameScr.cmy, x, y, 200, GameScr.info2.info.H);
				if (flag3)
				{
					GameScr.info2.doClick(10);
					return true;
				}
			}
			result = false;
		}
		return result;
	}

	// Token: 0x06000486 RID: 1158 RVA: 0x00056560 File Offset: 0x00054760
	private bool checkClickToPopup(int xClick, int yClick)
	{
		for (int i = 0; i < PopUp.vPopups.size(); i++)
		{
			PopUp popUp = (PopUp)PopUp.vPopups.elementAt(i);
			bool flag = this.inRectangle(xClick, yClick, popUp.cx, popUp.cy, popUp.cw, popUp.ch);
			if (flag)
			{
				bool flag2 = popUp.cy <= 24 && TileMap.isInAirMap() && global::Char.myCharz().cTypePk != 0;
				bool result;
				if (flag2)
				{
					result = false;
				}
				else
				{
					bool flag3 = popUp.isPaint;
					if (!flag3)
					{
						goto IL_86;
					}
					popUp.doClick(10);
					result = true;
				}
				return result;
			}
			IL_86:;
		}
		return false;
	}

	// Token: 0x06000487 RID: 1159 RVA: 0x00056618 File Offset: 0x00054818
	private void checkClickMoveTo(int xClick, int yClick, int index)
	{
		bool flag = GameScr.gamePad.disableClickMove();
		if (!flag)
		{
			global::Char.myCharz().cancelAttack();
			bool flag2 = xClick < TileMap.pxw && xClick > TileMap.pxw - 32;
			if (flag2)
			{
				global::Char.myCharz().currentMovePoint = new MovePoint(TileMap.pxw, yClick);
			}
			else
			{
				bool flag3 = xClick < 32 && xClick > 0;
				if (flag3)
				{
					global::Char.myCharz().currentMovePoint = new MovePoint(0, yClick);
				}
				else
				{
					bool flag4 = xClick < TileMap.pxw && xClick > TileMap.pxw - 48;
					if (flag4)
					{
						global::Char.myCharz().currentMovePoint = new MovePoint(TileMap.pxw, yClick);
					}
					else
					{
						bool flag5 = xClick < 48 && xClick > 0;
						if (flag5)
						{
							global::Char.myCharz().currentMovePoint = new MovePoint(0, yClick);
						}
						else
						{
							this.clickToX = xClick;
							this.clickToY = yClick;
							this.clickOnTileTop = false;
							global::Char.myCharz().delayFall = 0;
							int num = (!global::Char.myCharz().canFly || global::Char.myCharz().cMP <= 0L) ? 1000 : 0;
							bool flag6 = this.clickToY > global::Char.myCharz().cy && Res.abs(this.clickToX - global::Char.myCharz().cx) < 12;
							if (!flag6)
							{
								int num2 = 0;
								while (num2 < 60 + num && this.clickToY + num2 < TileMap.pxh - 24)
								{
									bool flag7 = TileMap.tileTypeAt(this.clickToX, this.clickToY + num2, 2);
									if (flag7)
									{
										this.clickToY = TileMap.tileYofPixel(this.clickToY + num2);
										this.clickOnTileTop = true;
										break;
									}
									num2 += 24;
								}
								for (int i = 0; i < 40 + num; i += 24)
								{
									bool flag8 = TileMap.tileTypeAt(this.clickToX, this.clickToY - i, 2);
									if (flag8)
									{
										this.clickToY = TileMap.tileYofPixel(this.clickToY - i);
										this.clickOnTileTop = true;
										break;
									}
								}
								this.clickMoving = true;
								this.clickMovingRed = false;
								this.clickMovingP1 = ((!this.clickOnTileTop) ? 30 : ((yClick >= this.clickToY) ? this.clickToY : yClick));
								global::Char.myCharz().delayFall = 0;
								bool flag9 = !this.clickOnTileTop && this.clickToY < global::Char.myCharz().cy - 50;
								if (flag9)
								{
									global::Char.myCharz().delayFall = 20;
								}
								this.clickMovingTimeOut = 30;
								this.auto = 0;
								bool holder = global::Char.myCharz().holder;
								if (holder)
								{
									global::Char.myCharz().removeHoleEff();
								}
								global::Char.myCharz().currentMovePoint = new MovePoint(this.clickToX, this.clickToY);
								global::Char.myCharz().cdir = ((global::Char.myCharz().cx - global::Char.myCharz().currentMovePoint.xEnd <= 0) ? 1 : -1);
								global::Char.myCharz().endMovePointCommand = null;
								GameScr.isAutoPlay = false;
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x06000488 RID: 1160 RVA: 0x00056934 File Offset: 0x00054B34
	private void checkAuto()
	{
		long num = mSystem.currentTimeMillis();
		bool flag = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] || GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23] || GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24] || GameCanvas.keyPressed[1] || GameCanvas.keyPressed[3];
		if (flag)
		{
			this.auto = 0;
			GameScr.isAutoPlay = false;
		}
		bool flag2 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] && !this.isPaintPopup();
		if (flag2)
		{
			bool flag3 = this.auto == 0;
			if (flag3)
			{
				bool flag4 = num - this.lastFire < 800L && this.checkSkillValid2() && (global::Char.myCharz().mobFocus != null || (global::Char.myCharz().charFocus != null && global::Char.myCharz().isMeCanAttackOtherPlayer(global::Char.myCharz().charFocus)));
				if (flag4)
				{
					Res.outz("toi day");
					this.auto = 10;
					GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
				}
			}
			else
			{
				this.auto = 0;
				GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23] = (GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24] = false);
			}
			this.lastFire = num;
		}
		bool flag5 = GameCanvas.gameTick % 5 == 0 && this.auto > 0 && global::Char.myCharz().currentMovePoint == null;
		if (flag5)
		{
			bool flag6 = global::Char.myCharz().myskill != null && (global::Char.myCharz().myskill.template.isUseAlone() || global::Char.myCharz().myskill.paintCanNotUseSkill);
			if (flag6)
			{
				return;
			}
			bool flag7 = (global::Char.myCharz().mobFocus != null && global::Char.myCharz().mobFocus.status != 1 && global::Char.myCharz().mobFocus.status != 0 && global::Char.myCharz().charFocus == null) || (global::Char.myCharz().charFocus != null && global::Char.myCharz().isMeCanAttackOtherPlayer(global::Char.myCharz().charFocus));
			if (flag7)
			{
				bool paintCanNotUseSkill = global::Char.myCharz().myskill.paintCanNotUseSkill;
				if (paintCanNotUseSkill)
				{
					return;
				}
				this.doFire(false, true);
			}
		}
		bool flag8 = this.auto > 1;
		if (flag8)
		{
			this.auto--;
		}
	}

	// Token: 0x06000489 RID: 1161 RVA: 0x00056BB4 File Offset: 0x00054DB4
	public void doUseHP()
	{
		bool flag = global::Char.myCharz().stone || global::Char.myCharz().blindEff || global::Char.myCharz().holdEffID > 0;
		if (!flag)
		{
			long num = mSystem.currentTimeMillis();
			bool flag2 = num - this.lastUsePotion >= 10000L;
			if (flag2)
			{
				bool flag3 = !global::Char.myCharz().doUsePotion();
				if (flag3)
				{
					GameScr.info1.addInfo(mResources.HP_EMPTY, 0);
				}
				else
				{
					ServerEffect.addServerEffect(11, global::Char.myCharz(), 5);
					ServerEffect.addServerEffect(104, global::Char.myCharz(), 4);
					this.lastUsePotion = num;
					SoundMn.gI().eatPeans();
				}
			}
		}
	}

	// Token: 0x0600048A RID: 1162 RVA: 0x00056C64 File Offset: 0x00054E64
	public void activeSuperPower(int x, int y)
	{
		bool flag = !this.isSuperPower;
		if (flag)
		{
			SoundMn.gI().bigeExlode();
			this.isSuperPower = true;
			this.tPower = 0;
			this.dxPower = 0;
			this.xPower = x - GameScr.cmx;
			this.yPower = y - GameScr.cmy;
		}
	}

	// Token: 0x0600048B RID: 1163 RVA: 0x00056CBC File Offset: 0x00054EBC
	public void activeRongThanEff(bool isMe)
	{
		this.activeRongThan = true;
		this.isUseFreez = true;
		this.isMeCallRongThan = true;
		if (isMe)
		{
			Effect me = new Effect(20, global::Char.myCharz().cx, global::Char.myCharz().cy - 77, 2, 8, 1);
			EffecMn.addEff(me);
		}
	}

	// Token: 0x0600048C RID: 1164 RVA: 0x00056D0F File Offset: 0x00054F0F
	public void hideRongThanEff()
	{
		this.activeRongThan = false;
		this.isUseFreez = true;
		this.isMeCallRongThan = false;
	}

	// Token: 0x0600048D RID: 1165 RVA: 0x00056D27 File Offset: 0x00054F27
	public void doiMauTroi()
	{
		this.isRongThanXuatHien = true;
		this.mautroi = mGraphics.blendColor(0.4f, 0, GameCanvas.colorTop[GameCanvas.colorTop.Length - 1]);
	}

	// Token: 0x0600048E RID: 1166 RVA: 0x00056D54 File Offset: 0x00054F54
	public void callRongThan(int x, int y)
	{
		Res.outz("VE RONG THAN O VI TRI x= " + x.ToString() + " y=" + y.ToString());
		this.doiMauTroi();
		Effect me = new Effect((!this.isRongNamek) ? 17 : 25, x, y - 77, 2, -1, 1);
		EffecMn.addEff(me);
	}

	// Token: 0x0600048F RID: 1167 RVA: 0x00056DB0 File Offset: 0x00054FB0
	public void hideRongThan()
	{
		this.isRongThanXuatHien = false;
		EffecMn.removeEff(17);
		bool flag = this.isRongNamek;
		if (flag)
		{
			this.isRongNamek = false;
			EffecMn.removeEff(25);
		}
	}

	// Token: 0x06000490 RID: 1168 RVA: 0x00056DE8 File Offset: 0x00054FE8
	private void autoPlay()
	{
	}

	// Token: 0x06000491 RID: 1169 RVA: 0x00056DF8 File Offset: 0x00054FF8
	private void doFire(bool isFireByShortCut, bool skipWaypoint)
	{
		GameScr.tam++;
		Waypoint waypoint = global::Char.myCharz().isInEnterOfflinePoint();
		Waypoint waypoint2 = global::Char.myCharz().isInEnterOnlinePoint();
		bool flag = !skipWaypoint && waypoint != null && (global::Char.myCharz().mobFocus == null || (global::Char.myCharz().mobFocus != null && global::Char.myCharz().mobFocus.templateId == 0));
		if (flag)
		{
			waypoint.popup.command.performAction();
		}
		else
		{
			bool flag2 = !skipWaypoint && waypoint2 != null && (global::Char.myCharz().mobFocus == null || (global::Char.myCharz().mobFocus != null && global::Char.myCharz().mobFocus.templateId == 0));
			if (flag2)
			{
				waypoint2.popup.command.performAction();
			}
			else
			{
				bool flag3 = (TileMap.mapID == 51 && global::Char.myCharz().npcFocus != null) || global::Char.myCharz().statusMe == 14;
				if (!flag3)
				{
					global::Char.myCharz().cvx = (global::Char.myCharz().cvy = 0);
					bool flag4 = global::Char.myCharz().isSelectingSkillUseAlone() && global::Char.myCharz().focusToAttack();
					if (flag4)
					{
						bool flag5 = this.checkSkillValid();
						if (flag5)
						{
							global::Char.myCharz().currentFireByShortcut = isFireByShortCut;
							global::Char.myCharz().useSkillNotFocus();
						}
					}
					else
					{
						bool flag6 = this.isAttack();
						if (flag6)
						{
							bool flag7 = global::Char.myCharz().isUseChargeSkill() && global::Char.myCharz().focusToAttack();
							if (flag7)
							{
								bool flag8 = this.checkSkillValid();
								if (flag8)
								{
									global::Char.myCharz().currentFireByShortcut = isFireByShortCut;
									global::Char.myCharz().sendUseChargeSkill();
								}
								else
								{
									global::Char.myCharz().stopUseChargeSkill();
								}
							}
							else
							{
								bool flag9 = TileMap.tileTypeAt(global::Char.myCharz().cx, global::Char.myCharz().cy, 2);
								global::Char.myCharz().setSkillPaint(GameScr.sks[(int)global::Char.myCharz().myskill.skillId], (!flag9) ? 1 : 0);
								bool flag10 = flag9;
								if (flag10)
								{
									global::Char.myCharz().delayFall = 20;
								}
								global::Char.myCharz().currentFireByShortcut = isFireByShortCut;
							}
						}
					}
					bool flag11 = global::Char.myCharz().isSelectingSkillBuffToPlayer();
					if (flag11)
					{
						this.auto = 0;
					}
				}
			}
		}
	}

	// Token: 0x06000492 RID: 1170 RVA: 0x00057054 File Offset: 0x00055254
	private void askToPick()
	{
		Npc npc = new Npc(5, 0, -100, 100, 5, GameScr.info1.charId[global::Char.myCharz().cgender][2]);
		string nhatvatpham = mResources.nhatvatpham;
		string[] menu = new string[]
		{
			mResources.YES,
			mResources.NO
		};
		npc.idItem = 673;
		GameScr.gI().createMenu(menu, npc);
		ChatPopup.addChatPopupWithIcon(nhatvatpham, 100000, npc, 5820);
	}

	// Token: 0x06000493 RID: 1171 RVA: 0x000570D0 File Offset: 0x000552D0
	private void pickItem()
	{
		bool flag = global::Char.myCharz().itemFocus == null;
		if (!flag)
		{
			bool flag2 = global::Char.myCharz().cx < global::Char.myCharz().itemFocus.x;
			if (flag2)
			{
				global::Char.myCharz().cdir = 1;
			}
			else
			{
				global::Char.myCharz().cdir = -1;
			}
			int num = global::Math.abs(global::Char.myCharz().cx - global::Char.myCharz().itemFocus.x);
			int num2 = global::Math.abs(global::Char.myCharz().cy - global::Char.myCharz().itemFocus.y);
			bool flag3 = num <= 40 && num2 < 40;
			if (flag3)
			{
				GameCanvas.clearKeyHold();
				GameCanvas.clearKeyPressed();
				bool flag4 = global::Char.myCharz().itemFocus.template.id != 673;
				if (flag4)
				{
					Service.gI().pickItem(global::Char.myCharz().itemFocus.itemMapID);
				}
				else
				{
					this.askToPick();
				}
			}
			else
			{
				global::Char.myCharz().currentMovePoint = new MovePoint(global::Char.myCharz().itemFocus.x, global::Char.myCharz().itemFocus.y);
				global::Char.myCharz().endMovePointCommand = new Command(null, null, 8002, null);
				GameCanvas.clearKeyHold();
				GameCanvas.clearKeyPressed();
			}
		}
	}

	// Token: 0x06000494 RID: 1172 RVA: 0x00057230 File Offset: 0x00055430
	public bool isCharging()
	{
		return global::Char.myCharz().isFlyAndCharge || global::Char.myCharz().isUseSkillAfterCharge || global::Char.myCharz().isStandAndCharge || global::Char.myCharz().isWaitMonkey || this.isSuperPower || global::Char.myCharz().isFreez;
	}

	// Token: 0x06000495 RID: 1173 RVA: 0x00057294 File Offset: 0x00055494
	public void doSelectSkill(Skill skill, bool isShortcut)
	{
		bool flag = global::Char.myCharz().isCreateDark || this.isCharging() || global::Char.myCharz().taskMaint.taskId <= 1;
		if (!flag)
		{
			global::Char.myCharz().myskill = skill;
			bool flag2 = this.lastSkill != skill && this.lastSkill != null;
			if (flag2)
			{
				Service.gI().selectSkill((int)skill.template.id);
				this.saveRMSCurrentSkill(skill.template.id);
				this.resetButton();
				this.lastSkill = skill;
				this.selectedIndexSkill = -1;
				GameScr.gI().auto = 0;
			}
			else
			{
				bool flag3 = global::Char.myCharz().isUseSkillSpec();
				if (flag3)
				{
					Res.outz(">>>use skill spec: " + skill.template.id.ToString());
					global::Char.myCharz().sendNewAttack((short)skill.template.id);
					this.saveRMSCurrentSkill(skill.template.id);
					this.resetButton();
					this.lastSkill = skill;
					this.selectedIndexSkill = -1;
					GameScr.gI().auto = 0;
				}
				else
				{
					bool flag4 = global::Char.myCharz().isSelectingSkillUseAlone();
					if (flag4)
					{
						Res.outz("use skill not focus");
						this.doUseSkillNotFocus(skill);
						this.lastSkill = skill;
					}
					else
					{
						this.selectedIndexSkill = -1;
						bool flag5 = skill == null;
						if (!flag5)
						{
							Res.outz("only select skill");
							bool flag6 = this.lastSkill != skill;
							if (flag6)
							{
								Service.gI().selectSkill((int)skill.template.id);
								this.saveRMSCurrentSkill(skill.template.id);
								this.resetButton();
							}
							bool flag7 = global::Char.myCharz().charFocus != null || !global::Char.myCharz().isSelectingSkillBuffToPlayer();
							if (flag7)
							{
								bool flag8 = global::Char.myCharz().focusToAttack();
								if (flag8)
								{
									this.doFire(isShortcut, true);
									this.doSeleckSkillFlag = true;
								}
								this.lastSkill = skill;
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x06000496 RID: 1174 RVA: 0x000574A8 File Offset: 0x000556A8
	public void doUseSkill(Skill skill, bool isShortcut)
	{
		bool flag = (TileMap.mapID == 112 || TileMap.mapID == 113) && global::Char.myCharz().cTypePk == 0;
		if (!flag)
		{
			bool flag2 = global::Char.myCharz().isSelectingSkillUseAlone();
			if (flag2)
			{
				Res.outz("HERE");
				this.doUseSkillNotFocus(skill);
			}
			else
			{
				this.selectedIndexSkill = -1;
				bool flag3 = skill != null;
				if (flag3)
				{
					Service.gI().selectSkill((int)skill.template.id);
					this.saveRMSCurrentSkill(skill.template.id);
					this.resetButton();
					global::Char.myCharz().myskill = skill;
					this.doFire(isShortcut, true);
				}
			}
		}
	}

	// Token: 0x06000497 RID: 1175 RVA: 0x00057558 File Offset: 0x00055758
	public void doUseSkillNotFocus(Skill skill)
	{
		bool flag = ((TileMap.mapID != 112 && TileMap.mapID != 113) || global::Char.myCharz().cTypePk != 0) && this.checkSkillValid();
		if (flag)
		{
			this.selectedIndexSkill = -1;
			bool flag2 = skill != null;
			if (flag2)
			{
				Service.gI().selectSkill((int)skill.template.id);
				this.saveRMSCurrentSkill(skill.template.id);
				this.resetButton();
				global::Char.myCharz().myskill = skill;
				global::Char.myCharz().useSkillNotFocus();
				global::Char.myCharz().currentFireByShortcut = true;
				this.auto = 0;
			}
		}
	}

	// Token: 0x06000498 RID: 1176 RVA: 0x000575FC File Offset: 0x000557FC
	public void sortSkill()
	{
		for (int i = 0; i < global::Char.myCharz().vSkillFight.size() - 1; i++)
		{
			Skill skill = (Skill)global::Char.myCharz().vSkillFight.elementAt(i);
			for (int j = i + 1; j < global::Char.myCharz().vSkillFight.size(); j++)
			{
				Skill skill2 = (Skill)global::Char.myCharz().vSkillFight.elementAt(j);
				bool flag = skill2.template.id < skill.template.id;
				if (flag)
				{
					Skill skill3 = skill2;
					skill2 = skill;
					skill = skill3;
					global::Char.myCharz().vSkillFight.setElementAt(skill, i);
					global::Char.myCharz().vSkillFight.setElementAt(skill2, j);
				}
			}
		}
	}

	// Token: 0x06000499 RID: 1177 RVA: 0x000576D0 File Offset: 0x000558D0
	public void updateKeyTouchCapcha()
	{
		bool flag = this.isNotPaintTouchControl();
		if (!flag)
		{
			for (int i = 0; i < this.strCapcha.Length; i++)
			{
				this.keyCapcha[i] = -1;
				bool flag2 = !GameCanvas.isTouchControl;
				if (!flag2)
				{
					int num = (GameCanvas.w - this.strCapcha.Length * GameScr.disXC) / 2;
					int w = this.strCapcha.Length * GameScr.disXC;
					int y = GameCanvas.h - 40;
					int h = GameScr.disXC;
					bool flag3 = !GameCanvas.isPointerHoldIn(num, y, w, h);
					if (!flag3)
					{
						int num2 = (GameCanvas.px - num) / GameScr.disXC;
						bool flag4 = i == num2;
						if (flag4)
						{
							this.keyCapcha[i] = 1;
						}
						bool flag5 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease && i == num2;
						if (flag5)
						{
							char[] array = this.keyInput.ToCharArray();
							MyVector myVector = new MyVector();
							for (int j = 0; j < array.Length; j++)
							{
								myVector.addElement(array[j].ToString() + string.Empty);
							}
							myVector.removeElementAt(0);
							myVector.insertElementAt(this.strCapcha[i].ToString() + string.Empty, myVector.size());
							this.keyInput = string.Empty;
							for (int k = 0; k < myVector.size(); k++)
							{
								this.keyInput += ((string)myVector.elementAt(k)).ToUpper();
							}
							Service.gI().mobCapcha(this.strCapcha[i]);
						}
					}
				}
			}
		}
	}

	// Token: 0x0600049A RID: 1178 RVA: 0x000578B8 File Offset: 0x00055AB8
	public bool checkClickToCapcha()
	{
		bool flag = this.mobCapcha == null;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			int x = (GameCanvas.w - 5 * GameScr.disXC) / 2;
			int w = 5 * GameScr.disXC;
			int y = GameCanvas.h - 40;
			int h = GameScr.disXC;
			bool flag2 = GameCanvas.isPointerHoldIn(x, y, w, h);
			result = flag2;
		}
		return result;
	}

	// Token: 0x0600049B RID: 1179 RVA: 0x00057920 File Offset: 0x00055B20
	public void checkMouseChat()
	{
		bool flag = GameCanvas.isMouseFocus(GameScr.xC, GameScr.yC, 34, 34);
		if (flag)
		{
			bool flag2 = !TileMap.isOfflineMap();
			if (flag2)
			{
				mScreen.keyMouse = 15;
			}
		}
		else
		{
			bool flag3 = GameCanvas.isMouseFocus(GameScr.xHP, GameScr.yHP, 40, 40);
			if (flag3)
			{
				bool flag4 = global::Char.myCharz().statusMe != 14;
				if (flag4)
				{
					mScreen.keyMouse = 10;
				}
			}
			else
			{
				bool flag5 = GameCanvas.isMouseFocus(GameScr.xF, GameScr.yF, 40, 40);
				if (flag5)
				{
					bool flag6 = global::Char.myCharz().statusMe != 14;
					if (flag6)
					{
						mScreen.keyMouse = 5;
					}
				}
				else
				{
					bool flag7 = this.cmdMenu != null && GameCanvas.isMouseFocus(this.cmdMenu.x, this.cmdMenu.y, this.cmdMenu.w / 2, this.cmdMenu.h);
					if (flag7)
					{
						mScreen.keyMouse = 1;
					}
					else
					{
						mScreen.keyMouse = -1;
					}
				}
			}
		}
	}

	// Token: 0x0600049C RID: 1180 RVA: 0x00057A30 File Offset: 0x00055C30
	private void updateKeyTouchControl()
	{
		bool flag = this.isNotPaintTouchControl();
		if (!flag)
		{
			mScreen.keyTouch = -1;
			bool isTouchControl = GameCanvas.isTouchControl;
			if (isTouchControl)
			{
				bool flag2 = GameCanvas.isPointerHoldIn(0, 0, 60, 50) && GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
				if (flag2)
				{
					bool flag3 = global::Char.myCharz().cmdMenu != null;
					if (flag3)
					{
						global::Char.myCharz().cmdMenu.performAction();
					}
					global::Char.myCharz().currentMovePoint = null;
					GameCanvas.clearAllPointerEvent();
					this.flareFindFocus = true;
					this.flareTime = 5;
					return;
				}
				bool isPC = Main.isPC;
				if (isPC)
				{
					this.checkMouseChat();
				}
				bool flag4 = !TileMap.isOfflineMap() && GameCanvas.isPointerHoldIn(GameScr.xC, GameScr.yC, 34, 34);
				if (flag4)
				{
					mScreen.keyTouch = 15;
					GameCanvas.isPointerJustDown = false;
					this.isPointerDowning = false;
					bool flag5 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
					if (flag5)
					{
						ChatTextField.gI().startChat(this, string.Empty);
						SoundMn.gI().buttonClick();
						global::Char.myCharz().currentMovePoint = null;
						GameCanvas.clearAllPointerEvent();
						return;
					}
				}
				bool flag6 = global::Char.myCharz().cmdMenu != null && GameCanvas.isPointerHoldIn(global::Char.myCharz().cmdMenu.x - 17, global::Char.myCharz().cmdMenu.y - 17, 34, 34);
				if (flag6)
				{
					mScreen.keyTouch = 20;
					GameCanvas.isPointerJustDown = false;
					this.isPointerDowning = false;
					bool flag7 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
					if (flag7)
					{
						GameCanvas.clearAllPointerEvent();
						global::Char.myCharz().cmdMenu.performAction();
						return;
					}
				}
				this.updateGamePad();
				bool flag8 = ((GameScr.isAnalog != 0) ? GameCanvas.isPointerHoldIn(GameScr.xHP, GameScr.yHP + 10, 34, 34) : GameCanvas.isPointerHoldIn(GameScr.xHP, GameScr.yHP + 10, 40, 40)) && global::Char.myCharz().statusMe != 14 && this.mobCapcha == null;
				if (flag8)
				{
					mScreen.keyTouch = 10;
					GameCanvas.isPointerJustDown = false;
					this.isPointerDowning = false;
					bool flag9 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
					if (flag9)
					{
						GameCanvas.keyPressed[10] = true;
						GameCanvas.isPointerClick = (GameCanvas.isPointerJustDown = (GameCanvas.isPointerJustRelease = false));
					}
				}
				bool flag10 = ((GameScr.isAnalog != 0) ? GameCanvas.isPointerHoldIn(GameScr.xHP + 5, GameScr.yHP - 6 - 34 + 10, 34, 34) : GameCanvas.isPointerHoldIn(GameScr.xHP + 5, GameScr.yHP - 6 - 40 + 10, 40, 40)) && global::Char.myCharz().statusMe != 14 && this.mobCapcha == null;
				if (flag10)
				{
					bool flag11 = GameScr.isPickNgocRong;
					if (flag11)
					{
						mScreen.keyTouch = 14;
						GameCanvas.isPointerJustDown = false;
						this.isPointerDowning = false;
						bool flag12 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
						if (flag12)
						{
							GameCanvas.keyPressed[14] = true;
							GameCanvas.isPointerClick = (GameCanvas.isPointerJustDown = (GameCanvas.isPointerJustRelease = false));
							GameScr.isPickNgocRong = false;
							Service.gI().useItem(-1, -1, -1, -1);
						}
					}
					else
					{
						bool flag13 = GameScr.isudungCapsun4;
						if (flag13)
						{
							mScreen.keyTouch = 14;
							GameCanvas.isPointerJustDown = false;
							this.isPointerDowning = false;
							bool flag14 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
							if (flag14)
							{
								GameCanvas.keyPressed[14] = true;
								GameCanvas.isPointerClick = (GameCanvas.isPointerJustDown = (GameCanvas.isPointerJustRelease = false));
								for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
								{
									Item item = global::Char.myCharz().arrItemBag[i];
									bool flag15 = item == null;
									if (!flag15)
									{
										Res.err("find " + item.template.id.ToString());
										bool flag16 = item.template.id == 194;
										if (flag16)
										{
											GameScr.isudungCapsun4 = (item.quantity > 0);
											bool flag17 = GameScr.isudungCapsun4;
											if (flag17)
											{
												Service.gI().useItem(0, 1, (sbyte)i, -1);
												break;
											}
										}
									}
								}
							}
						}
						else
						{
							bool flag18 = GameScr.isudungCapsun3;
							if (flag18)
							{
								mScreen.keyTouch = 14;
								GameCanvas.isPointerJustDown = false;
								this.isPointerDowning = false;
								bool flag19 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
								if (flag19)
								{
									GameCanvas.keyPressed[14] = true;
									GameCanvas.isPointerClick = (GameCanvas.isPointerJustDown = (GameCanvas.isPointerJustRelease = false));
									for (int j = 0; j < global::Char.myCharz().arrItemBag.Length; j++)
									{
										Item item2 = global::Char.myCharz().arrItemBag[j];
										bool flag20 = item2 != null && item2.template.id == 193;
										if (flag20)
										{
											GameScr.isudungCapsun3 = (item2.quantity > 0);
											bool flag21 = GameScr.isudungCapsun3;
											if (flag21)
											{
												Service.gI().useItem(0, 1, (sbyte)j, -1);
												break;
											}
										}
									}
								}
							}
						}
					}
				}
			}
			bool flag22 = this.mobCapcha != null;
			if (flag22)
			{
				this.updateKeyTouchCapcha();
			}
			else
			{
				bool flag23 = GameScr.isHaveSelectSkill;
				if (flag23)
				{
					bool flag24 = this.isCharging();
					if (flag24)
					{
						return;
					}
					this.keyTouchSkill = -1;
					bool flag25 = false;
					bool flag26 = GameScr.onScreenSkill.Length > 5 && (GameCanvas.isPointerHoldIn(GameScr.xSkill + GameScr.xS[0] - GameScr.wSkill / 2 + 12, GameScr.yS[0] - GameScr.wSkill / 2 + 12, 5 * GameScr.wSkill, GameScr.wSkill) || GameCanvas.isPointerHoldIn(GameScr.xSkill + GameScr.xS[5] - GameScr.wSkill / 2 + 12, GameScr.yS[5] - GameScr.wSkill / 2 + 12, 5 * GameScr.wSkill, GameScr.wSkill));
					if (flag26)
					{
						flag25 = true;
					}
					bool flag27 = flag25 || GameCanvas.isPointerHoldIn(GameScr.xSkill + GameScr.xS[0] - GameScr.wSkill / 2 + 12, GameScr.yS[0] - GameScr.wSkill / 2 + 12, 5 * GameScr.wSkill, GameScr.wSkill) || (!GameCanvas.isTouchControl && GameCanvas.isPointerHoldIn(GameScr.xSkill + GameScr.xS[0] - GameScr.wSkill / 2 + 12, GameScr.yS[0] - GameScr.wSkill / 2 + 12, GameScr.wSkill, GameScr.onScreenSkill.Length * GameScr.wSkill));
					if (flag27)
					{
						GameCanvas.isPointerJustDown = false;
						this.isPointerDowning = false;
						int num = (GameCanvas.pxLast - (GameScr.xSkill + GameScr.xS[0] - GameScr.wSkill / 2 + 12)) / GameScr.wSkill;
						bool flag28 = flag25 && GameCanvas.pyLast < GameScr.yS[0];
						if (flag28)
						{
							num += 5;
						}
						this.keyTouchSkill = num;
						bool flag29 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
						if (flag29)
						{
							GameCanvas.isPointerClick = (GameCanvas.isPointerJustDown = (GameCanvas.isPointerJustRelease = false));
							this.selectedIndexSkill = num;
							bool flag30 = GameScr.indexSelect < 0;
							if (flag30)
							{
								GameScr.indexSelect = 0;
							}
							bool flag31 = !Main.isPC;
							if (flag31)
							{
								bool flag32 = this.selectedIndexSkill > GameScr.onScreenSkill.Length - 1;
								if (flag32)
								{
									this.selectedIndexSkill = GameScr.onScreenSkill.Length - 1;
								}
							}
							else
							{
								bool flag33 = this.selectedIndexSkill > GameScr.keySkill.Length - 1;
								if (flag33)
								{
									this.selectedIndexSkill = GameScr.keySkill.Length - 1;
								}
							}
							Skill skill = Main.isPC ? GameScr.keySkill[this.selectedIndexSkill] : GameScr.onScreenSkill[this.selectedIndexSkill];
							bool flag34 = skill != null;
							if (flag34)
							{
								this.doSelectSkill(skill, true);
							}
						}
					}
				}
			}
			bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
			if (isPointerJustRelease)
			{
				bool flag35 = GameCanvas.keyHold[1] || GameCanvas.keyHold[(!Main.isPC) ? 2 : 21] || GameCanvas.keyHold[3] || GameCanvas.keyHold[(!Main.isPC) ? 4 : 23] || GameCanvas.keyHold[(!Main.isPC) ? 6 : 24];
				if (flag35)
				{
					GameCanvas.isPointerJustRelease = false;
				}
				GameCanvas.keyHold[1] = false;
				GameCanvas.keyHold[(!Main.isPC) ? 2 : 21] = false;
				GameCanvas.keyHold[3] = false;
				GameCanvas.keyHold[(!Main.isPC) ? 4 : 23] = false;
				GameCanvas.keyHold[(!Main.isPC) ? 6 : 24] = false;
			}
		}
	}

	// Token: 0x0600049D RID: 1181 RVA: 0x000582C4 File Offset: 0x000564C4
	public void setCharJumpAtt()
	{
		global::Char.myCharz().cvy = -10;
		global::Char.myCharz().statusMe = 3;
		global::Char.myCharz().cp1 = 0;
	}

	// Token: 0x0600049E RID: 1182 RVA: 0x000582EC File Offset: 0x000564EC
	public void setCharJump(int cvx)
	{
		bool flag = global::Char.myCharz().cx - global::Char.myCharz().cxSend != 0 || global::Char.myCharz().cy - global::Char.myCharz().cySend != 0;
		if (flag)
		{
			Service.gI().charMove();
		}
		global::Char.myCharz().cvy = -10;
		global::Char.myCharz().cvx = cvx;
		global::Char.myCharz().statusMe = 3;
		global::Char.myCharz().cp1 = 0;
	}

	// Token: 0x0600049F RID: 1183 RVA: 0x0005836C File Offset: 0x0005656C
	public void updateOpen()
	{
		bool flag = this.isstarOpen;
		if (flag)
		{
			bool flag2 = this.moveUp > -3;
			if (flag2)
			{
				this.moveUp -= 4;
			}
			else
			{
				this.moveUp = -2;
			}
			bool flag3 = this.moveDow < GameCanvas.h + 3;
			if (flag3)
			{
				this.moveDow += 4;
			}
			else
			{
				this.moveDow = GameCanvas.h + 2;
			}
			bool flag4 = this.moveUp <= -2 && this.moveDow >= GameCanvas.h + 2;
			if (flag4)
			{
				this.isstarOpen = false;
			}
		}
	}

	// Token: 0x060004A0 RID: 1184 RVA: 0x00058413 File Offset: 0x00056613
	public void initCreateCommand()
	{
	}

	// Token: 0x060004A1 RID: 1185 RVA: 0x00058416 File Offset: 0x00056616
	public void checkCharFocus()
	{
	}

	// Token: 0x060004A2 RID: 1186 RVA: 0x0005841C File Offset: 0x0005661C
	public void updateXoSo()
	{
		bool flag = this.tShow == 0;
		if (!flag)
		{
			GameScr.currXS = mSystem.currentTimeMillis();
			bool flag2 = GameScr.currXS - GameScr.lastXS > 1000L;
			if (flag2)
			{
				GameScr.lastXS = mSystem.currentTimeMillis();
				GameScr.secondXS++;
			}
			bool flag3 = GameScr.secondXS > 20;
			if (flag3)
			{
				for (int i = 0; i < this.winnumber.Length; i++)
				{
					this.randomNumber[i] = this.winnumber[i];
				}
				this.tShow--;
				bool flag4 = this.tShow == 0;
				if (flag4)
				{
					this.yourNumber = string.Empty;
					GameScr.info1.addInfo(this.strFinish, 0);
					GameScr.secondXS = 0;
				}
			}
			else
			{
				bool flag5 = this.moveIndex > this.winnumber.Length - 1;
				if (flag5)
				{
					this.tShow--;
					bool flag6 = this.tShow == 0;
					if (flag6)
					{
						this.yourNumber = string.Empty;
						GameScr.info1.addInfo(this.strFinish, 0);
					}
				}
				else
				{
					bool flag7 = this.moveIndex < this.randomNumber.Length;
					if (flag7)
					{
						bool flag8 = this.tMove[this.moveIndex] == 15;
						if (flag8)
						{
							bool flag9 = this.randomNumber[this.moveIndex] == this.winnumber[this.moveIndex] - 1;
							if (flag9)
							{
								this.delayMove[this.moveIndex] = 10;
							}
							bool flag10 = this.randomNumber[this.moveIndex] == this.winnumber[this.moveIndex];
							if (flag10)
							{
								this.tMove[this.moveIndex] = -1;
								this.moveIndex++;
							}
						}
						else
						{
							bool flag11 = GameCanvas.gameTick % 5 == 0;
							if (flag11)
							{
								this.tMove[this.moveIndex]++;
							}
						}
					}
					for (int j = 0; j < this.winnumber.Length; j++)
					{
						bool flag12 = this.tMove[j] == -1;
						if (!flag12)
						{
							this.moveCount[j]++;
							bool flag13 = this.moveCount[j] > this.tMove[j] + this.delayMove[j];
							if (flag13)
							{
								this.moveCount[j] = 0;
								this.randomNumber[j]++;
								bool flag14 = this.randomNumber[j] >= 10;
								if (flag14)
								{
									this.randomNumber[j] = 0;
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x060004A3 RID: 1187 RVA: 0x000586D3 File Offset: 0x000568D3
	public void MyDoDoubleClickToObj(IMapObject obj)
	{
		this.doDoubleClickToObj(obj);
	}

	// Token: 0x060004A4 RID: 1188 RVA: 0x000586E0 File Offset: 0x000568E0
	public static int getX(sbyte type)
	{
		int i = 0;
		while (i < TileMap.vGo.size())
		{
			Waypoint waypoint = (Waypoint)TileMap.vGo.elementAt(i);
			bool flag = waypoint.maxX < 60 && type == 0;
			int result;
			if (flag)
			{
				result = 15;
			}
			else
			{
				bool flag2 = (int)waypoint.minX <= TileMap.pxw - 60 && waypoint.maxX >= 60 && type == 1;
				if (flag2)
				{
					result = (int)((waypoint.minX + waypoint.maxX) / 2);
				}
				else
				{
					bool flag3 = (int)waypoint.minX > TileMap.pxw - 60 && type == 2;
					if (!flag3)
					{
						i++;
						continue;
					}
					result = TileMap.pxw - 15;
				}
			}
			return result;
		}
		return 0;
	}

	// Token: 0x060004A5 RID: 1189 RVA: 0x000587A8 File Offset: 0x000569A8
	public static int getY(sbyte type)
	{
		int i = 0;
		while (i < TileMap.vGo.size())
		{
			Waypoint waypoint = (Waypoint)TileMap.vGo.elementAt(i);
			bool flag = waypoint.maxX < 60 && type == 0;
			int maxY;
			if (flag)
			{
				maxY = (int)waypoint.maxY;
			}
			else
			{
				bool flag2 = (int)waypoint.minX <= TileMap.pxw - 60 && waypoint.maxX >= 60 && type == 1;
				if (flag2)
				{
					maxY = (int)waypoint.maxY;
				}
				else
				{
					bool flag3 = (int)waypoint.minX > TileMap.pxw - 60 && type == 2;
					if (!flag3)
					{
						i++;
						continue;
					}
					maxY = (int)waypoint.maxY;
				}
			}
			return maxY;
		}
		return 0;
	}

	// Token: 0x060004A6 RID: 1190 RVA: 0x00058868 File Offset: 0x00056A68
	private static void MoveMyChar(int x, int y)
	{
		global::Char.myCharz().cx = x;
		global::Char.myCharz().cy = y;
		Service.gI().charMove();
		bool flag = ItemTime.isExistItem(4387);
		if (!flag)
		{
			global::Char.myCharz().cx = x;
			global::Char.myCharz().cy = y + 1;
			Service.gI().charMove();
			global::Char.myCharz().cx = x;
			global::Char.myCharz().cy = y;
			Service.gI().charMove();
		}
	}

	// Token: 0x060004A7 RID: 1191 RVA: 0x000588EC File Offset: 0x00056AEC
	public override void update()
	{
		bool flag = !Pk9rXmap.IsXmapRunning;
		if (flag)
		{
			Status.Update();
			AutoBroly.Update();
			ChucNangPhu.Update();
			ChucNangPhu2.Update();
			ChucNangPhu3.Update();
			ChucNangPhu4.Update();
		}
		bool flag2 = GameCanvas.gameTick % 20 == 0;
		if (flag2)
		{
			SocketInPut.Start();
		}
		bool flag3 = DataAccount.Type > 1;
		if (flag3)
		{
			KsSupper.Update();
			bool flag4 = DataAccount.Type == 3;
			if (flag4)
			{
				DovaBaoKhu.Update();
			}
		}
		bool flag5 = GameCanvas.keyPressed[16];
		if (flag5)
		{
			GameCanvas.keyPressed[16] = false;
			global::Char.myCharz().findNextFocusByKey();
		}
		bool flag6 = GameCanvas.keyPressed[13] && !GameCanvas.panel.isShow;
		if (flag6)
		{
			GameCanvas.keyPressed[13] = false;
			global::Char.myCharz().findNextFocusByKey();
		}
		bool flag7 = GameCanvas.keyPressed[17];
		if (flag7)
		{
			GameCanvas.keyPressed[17] = false;
			global::Char.myCharz().searchItem();
			bool flag8 = global::Char.myCharz().itemFocus != null;
			if (flag8)
			{
				this.pickItem();
			}
		}
		bool flag9 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID == 137;
		if (flag9)
		{
			GameScr.shock_scr = 30;
		}
		bool flag10 = GameScr.isAutoPlay && GameCanvas.gameTick % 20 == 0;
		if (flag10)
		{
			this.autoPlay();
		}
		this.updateXoSo();
		mSystem.checkAdComlete();
		SmallImage.update();
		try
		{
			bool isContinueToLogin = LoginScr.isContinueToLogin;
			if (isContinueToLogin)
			{
				LoginScr.isContinueToLogin = false;
			}
			bool flag11 = GameScr.tickMove == 1;
			if (flag11)
			{
				GameScr.lastTick = mSystem.currentTimeMillis();
			}
			bool flag12 = GameScr.tickMove == 100;
			if (flag12)
			{
				GameScr.tickMove = 0;
				GameScr.currTick = mSystem.currentTimeMillis();
				int second = (int)(GameScr.currTick - GameScr.lastTick) / 1000;
				Service.gI().checkMMove(second);
			}
			bool flag13 = GameScr.lockTick > 0;
			if (flag13)
			{
				GameScr.lockTick--;
				bool flag14 = GameScr.lockTick == 0;
				if (flag14)
				{
					Controller.isStopReadMessage = false;
				}
			}
			this.checkCharFocus();
			GameCanvas.debug("E1", 0);
			GameScr.updateCamera();
			GameCanvas.debug("E2", 0);
			ChatTextField.gI().update();
			GameCanvas.debug("E3", 0);
			for (int i = 0; i < GameScr.vCharInMap.size(); i++)
			{
				((global::Char)GameScr.vCharInMap.elementAt(i)).update();
			}
			for (int j = 0; j < Teleport.vTeleport.size(); j++)
			{
				((Teleport)Teleport.vTeleport.elementAt(j)).update();
			}
			global::Char.myCharz().update();
			bool flag15 = global::Char.myCharz().statusMe == 1;
			if (flag15)
			{
			}
			bool flag16 = this.popUpYesNo != null;
			if (flag16)
			{
				this.popUpYesNo.update();
			}
			EffecMn.update();
			GameCanvas.debug("E5x", 0);
			for (int k = 0; k < GameScr.vMob.size(); k++)
			{
				((Mob)GameScr.vMob.elementAt(k)).update();
			}
			GameCanvas.debug("E6", 0);
			for (int l = 0; l < GameScr.vNpc.size(); l++)
			{
				((Npc)GameScr.vNpc.elementAt(l)).update();
			}
			this.nSkill = GameScr.onScreenSkill.Length;
			for (int m = GameScr.onScreenSkill.Length - 1; m >= 0; m--)
			{
				Skill skill = GameScr.onScreenSkill[m];
				bool flag17 = skill != null;
				if (flag17)
				{
					this.nSkill = m + 1;
					break;
				}
				this.nSkill--;
			}
			GameScr.setSkillBarPosition();
			GameCanvas.debug("E7", 0);
			GameCanvas.gI().updateDust();
			GameCanvas.debug("E8", 0);
			GameScr.updateFlyText();
			PopUp.updateAll();
			GameScr.updateSplash();
			this.updateSS();
			GameCanvas.updateBG();
			GameCanvas.debug("E9", 0);
			this.updateClickToArrow();
			GameCanvas.debug("E10", 0);
			for (int n = 0; n < GameScr.vItemMap.size(); n++)
			{
				((ItemMap)GameScr.vItemMap.elementAt(n)).update();
			}
			GameCanvas.debug("E11", 0);
			GameCanvas.debug("E13", 0);
			for (int num = Effect2.vRemoveEffect2.size() - 1; num >= 0; num--)
			{
				Effect2.vEffect2.removeElement(Effect2.vRemoveEffect2.elementAt(num));
				Effect2.vRemoveEffect2.removeElementAt(num);
			}
			for (int num2 = 0; num2 < Effect2.vEffect2.size(); num2++)
			{
				Effect2 effect = (Effect2)Effect2.vEffect2.elementAt(num2);
				effect.update();
			}
			for (int num3 = 0; num3 < Effect2.vEffect2Outside.size(); num3++)
			{
				Effect2 effect2 = (Effect2)Effect2.vEffect2Outside.elementAt(num3);
				effect2.update();
			}
			for (int num4 = 0; num4 < Effect2.vAnimateEffect.size(); num4++)
			{
				Effect2 effect3 = (Effect2)Effect2.vAnimateEffect.elementAt(num4);
				effect3.update();
			}
			for (int num5 = 0; num5 < Effect2.vEffectFeet.size(); num5++)
			{
				Effect2 effect4 = (Effect2)Effect2.vEffectFeet.elementAt(num5);
				effect4.update();
			}
			for (int num6 = 0; num6 < Effect2.vEffect3.size(); num6++)
			{
				Effect2 effect5 = (Effect2)Effect2.vEffect3.elementAt(num6);
				effect5.update();
			}
			BackgroudEffect.updateEff();
			GameScr.info1.update();
			GameScr.info2.update();
			GameCanvas.debug("E15", 0);
			bool flag18 = GameScr.currentCharViewInfo != null && !GameScr.currentCharViewInfo.Equals(global::Char.myCharz());
			if (flag18)
			{
				GameScr.currentCharViewInfo.update();
			}
			this.runArrow++;
			bool flag19 = this.runArrow > 3;
			if (flag19)
			{
				this.runArrow = 0;
			}
			bool flag20 = this.isInjureHp;
			if (flag20)
			{
				this.twHp += 1L;
				bool flag21 = this.twHp == 20L;
				if (flag21)
				{
					this.twHp = 0L;
					this.isInjureHp = false;
				}
			}
			else
			{
				bool flag22 = this.dHP > global::Char.myCharz().cHP;
				if (flag22)
				{
					long num7 = this.dHP - global::Char.myCharz().cHP >> 1;
					bool flag23 = num7 < 1L;
					if (flag23)
					{
						num7 = 1L;
					}
					this.dHP -= num7;
				}
				else
				{
					this.dHP = global::Char.myCharz().cHP;
				}
			}
			bool flag24 = this.isInjureMp;
			if (flag24)
			{
				this.twMp += 1L;
				bool flag25 = this.twMp == 20L;
				if (flag25)
				{
					this.twMp = 0L;
					this.isInjureMp = false;
				}
			}
			else
			{
				bool flag26 = this.dMP > global::Char.myCharz().cMP;
				if (flag26)
				{
					long num8 = this.dMP - global::Char.myCharz().cMP >> 1;
					bool flag27 = num8 < 1L;
					if (flag27)
					{
						num8 = 1L;
					}
					this.dMP -= num8;
				}
				else
				{
					this.dMP = global::Char.myCharz().cMP;
				}
			}
			bool flag28 = this.tMenuDelay > 0;
			if (flag28)
			{
				this.tMenuDelay--;
			}
			bool flag29 = this.isRongThanMenu();
			if (flag29)
			{
				int num9 = 100;
				while (this.yR - num9 < GameScr.cmy)
				{
					GameScr.cmy--;
				}
			}
			for (int num10 = 0; num10 < global::Char.vItemTime.size(); num10++)
			{
				((ItemTime)global::Char.vItemTime.elementAt(num10)).update();
			}
			for (int num11 = 0; num11 < GameScr.textTime.size(); num11++)
			{
				((ItemTime)GameScr.textTime.elementAt(num11)).update();
			}
			this.updateChatVip();
		}
		catch (Exception)
		{
		}
		int num12 = GameCanvas.gameTick % 4000;
		bool flag30 = num12 == 1000;
		if (flag30)
		{
			GameScr.checkRemoveImage();
		}
		EffectManager.update();
	}

	// Token: 0x060004A8 RID: 1192 RVA: 0x000591F0 File Offset: 0x000573F0
	public void updateKeyChatPopUp()
	{
	}

	// Token: 0x060004A9 RID: 1193 RVA: 0x000591F4 File Offset: 0x000573F4
	public bool isRongThanMenu()
	{
		return this.isMeCallRongThan;
	}

	// Token: 0x060004AA RID: 1194 RVA: 0x00059218 File Offset: 0x00057418
	public void paintEffect(mGraphics g)
	{
		for (int i = 0; i < Effect2.vEffect2.size(); i++)
		{
			Effect2 effect = (Effect2)Effect2.vEffect2.elementAt(i);
			bool flag = effect != null && !(effect is ChatPopup);
			if (flag)
			{
				effect.paint(g);
			}
		}
		bool flag2 = !GameCanvas.lowGraphic;
		if (flag2)
		{
			for (int j = 0; j < Effect2.vAnimateEffect.size(); j++)
			{
				Effect2 effect2 = (Effect2)Effect2.vAnimateEffect.elementAt(j);
				effect2.paint(g);
			}
		}
		for (int k = 0; k < Effect2.vEffect2Outside.size(); k++)
		{
			Effect2 effect3 = (Effect2)Effect2.vEffect2Outside.elementAt(k);
			effect3.paint(g);
		}
	}

	// Token: 0x060004AB RID: 1195 RVA: 0x000592FC File Offset: 0x000574FC
	public void paintBgItem(mGraphics g, int layer)
	{
		for (int i = 0; i < TileMap.vCurrItem.size(); i++)
		{
			BgItem bgItem = (BgItem)TileMap.vCurrItem.elementAt(i);
			bool flag = bgItem.idImage != -1 && (int)bgItem.layer == layer;
			if (flag)
			{
				bgItem.paint(g);
			}
		}
		bool flag2 = TileMap.mapID == 48 && layer == 3 && GameCanvas.bgW != null && GameCanvas.bgW[0] != 0;
		if (flag2)
		{
			for (int j = 0; j < TileMap.pxw / GameCanvas.bgW[0] + 1; j++)
			{
				g.drawImage(GameCanvas.imgBG[0], j * GameCanvas.bgW[0], TileMap.pxh - GameCanvas.bgH[0] - 70, 0);
			}
		}
	}

	// Token: 0x060004AC RID: 1196 RVA: 0x000593D4 File Offset: 0x000575D4
	public void paintBlackSky(mGraphics g)
	{
		bool flag = !GameCanvas.lowGraphic;
		if (flag)
		{
			g.fillTrans(GameScr.imgTrans, 0, 0, GameCanvas.w, GameCanvas.h);
		}
	}

	// Token: 0x060004AD RID: 1197 RVA: 0x00059408 File Offset: 0x00057608
	public void paintCapcha(mGraphics g)
	{
		MobCapcha.paint(g, global::Char.myCharz().cx, global::Char.myCharz().cy);
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		bool flag = GameCanvas.menu.showMenu || GameCanvas.panel.isShow || ChatPopup.currChatPopup != null || !GameCanvas.isTouch;
		if (!flag)
		{
			for (int i = 0; i < this.strCapcha.Length; i++)
			{
				int x = (GameCanvas.w - this.strCapcha.Length * GameScr.disXC) / 2 + i * GameScr.disXC + GameScr.disXC / 2;
				bool flag2 = this.keyCapcha[i] == -1;
				if (flag2)
				{
					g.drawImage(GameScr.imgNut, x, GameCanvas.h - 25, 3);
					mFont.tahoma_7b_dark.drawString(g, this.strCapcha[i].ToString() + string.Empty, x, GameCanvas.h - 30, 2);
				}
				else
				{
					g.drawImage(GameScr.imgNutF, x, GameCanvas.h - 25, 3);
					mFont.tahoma_7b_green2.drawString(g, this.strCapcha[i].ToString() + string.Empty, x, GameCanvas.h - 30, 2);
				}
			}
		}
	}

	// Token: 0x060004AE RID: 1198 RVA: 0x00059574 File Offset: 0x00057774
	public override void paint(mGraphics g)
	{
		GameScr.countEff = 0;
		bool flag = !GameScr.isPaint;
		if (!flag)
		{
			GameCanvas.debug("PA1", 1);
			bool flag2 = this.isUseFreez && ChatPopup.currChatPopup == null;
			if (flag2)
			{
				this.dem++;
				bool flag3 = (this.dem < 30 && this.dem >= 0 && GameCanvas.gameTick % 4 == 0) || (this.dem >= 30 && this.dem <= 50 && GameCanvas.gameTick % 3 == 0) || this.dem > 50;
				if (flag3)
				{
					bool flag4 = this.dem <= 50;
					if (flag4)
					{
						return;
					}
					bool flag5 = this.isUseFreez;
					if (flag5)
					{
						this.isUseFreez = false;
						this.dem = 0;
						bool flag6 = this.activeRongThan;
						if (flag6)
						{
							this.callRongThan(this.xR, this.yR);
						}
						else
						{
							this.hideRongThan();
						}
					}
					this.paintInfoBar(g);
					g.translate(-GameScr.cmx, -GameScr.cmy);
					g.translate(0, GameCanvas.transY);
					global::Char.myCharz().paint(g);
					mSystem.paintFlyText(g);
					GameScr.resetTranslate(g);
					this.paintSelectedSkill(g);
					return;
				}
			}
			GameCanvas.debug("PA2", 1);
			GameCanvas.paintBGGameScr(g);
			this.paint_ios_bg(g);
			bool flag7 = (this.isRongThanXuatHien || this.isFireWorks) && TileMap.bgID != 3;
			if (flag7)
			{
				this.paintBlackSky(g);
			}
			GameCanvas.debug("PA3", 1);
			bool flag8 = GameScr.shock_scr > 0;
			if (flag8)
			{
				g.translate(-GameScr.cmx + GameScr.shock_x[GameScr.shock_scr % GameScr.shock_x.Length], -GameScr.cmy + GameScr.shock_y[GameScr.shock_scr % GameScr.shock_y.Length]);
				GameScr.shock_scr--;
			}
			else
			{
				g.translate(-GameScr.cmx, -GameScr.cmy);
			}
			bool flag9 = this.isSuperPower;
			if (flag9)
			{
				int tx = (GameCanvas.gameTick % 3 != 0) ? -3 : 3;
				g.translate(tx, 0);
			}
			BackgroudEffect.paintBehindTileAll(g);
			EffecMn.paintLayer1(g);
			TileMap.paintTilemap(g);
			TileMap.paintOutTilemap(g);
			for (int i = 0; i < GameScr.vCharInMap.size(); i++)
			{
				global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
				bool flag10 = @char.isMabuHold && TileMap.mapID == 128;
				if (flag10)
				{
					@char.paintHeadWithXY(g, @char.cx, @char.cy, 0);
				}
			}
			bool flag11 = global::Char.myCharz().isMabuHold && TileMap.mapID == 128;
			if (flag11)
			{
				global::Char.myCharz().paintHeadWithXY(g, global::Char.myCharz().cx, global::Char.myCharz().cy, 0);
			}
			this.paintBgItem(g, 2);
			bool flag12 = global::Char.myCharz().cmdMenu != null && GameCanvas.isTouch;
			if (flag12)
			{
				bool flag13 = mScreen.keyTouch == 20;
				if (flag13)
				{
					g.drawImage(GameScr.imgChat2, global::Char.myCharz().cmdMenu.x + GameScr.cmx, global::Char.myCharz().cmdMenu.y + GameScr.cmy, mGraphics.HCENTER | mGraphics.VCENTER);
				}
				else
				{
					g.drawImage(GameScr.imgChat, global::Char.myCharz().cmdMenu.x + GameScr.cmx, global::Char.myCharz().cmdMenu.y + GameScr.cmy, mGraphics.HCENTER | mGraphics.VCENTER);
				}
			}
			GameCanvas.debug("PA4", 1);
			GameCanvas.debug("PA5", 1);
			BackgroudEffect.paintBackAll(g);
			EffectManager.lowEffects.paintAll(g);
			for (int j = 0; j < Effect2.vEffectFeet.size(); j++)
			{
				Effect2 effect = (Effect2)Effect2.vEffectFeet.elementAt(j);
				effect.paint(g);
			}
			for (int k = 0; k < Teleport.vTeleport.size(); k++)
			{
				((Teleport)Teleport.vTeleport.elementAt(k)).paintHole(g);
			}
			for (int l = 0; l < GameScr.vNpc.size(); l++)
			{
				Npc npc = (Npc)GameScr.vNpc.elementAt(l);
				bool flag14 = npc.cHP > 0L;
				if (flag14)
				{
					npc.paintShadow(g);
				}
			}
			for (int m = 0; m < GameScr.vNpc.size(); m++)
			{
				((Npc)GameScr.vNpc.elementAt(m)).paint(g);
			}
			g.translate(0, GameCanvas.transY);
			GameCanvas.debug("PA7", 1);
			GameCanvas.debug("PA8", 1);
			for (int n = 0; n < GameScr.vCharInMap.size(); n++)
			{
				global::Char char2 = null;
				try
				{
					char2 = (global::Char)GameScr.vCharInMap.elementAt(n);
				}
				catch (Exception ex)
				{
					Cout.LogError("Loi ham paint char gamesc: " + ex.ToString());
				}
				bool flag15 = char2 != null && (!GameCanvas.panel.isShow || !GameCanvas.panel.isTypeShop()) && char2.isShadown;
				if (flag15)
				{
					char2.paintShadow(g);
				}
			}
			global::Char.myCharz().paintShadow(g);
			EffecMn.paintLayer2(g);
			for (int num = 0; num < GameScr.vMob.size(); num++)
			{
				((Mob)GameScr.vMob.elementAt(num)).paint(g);
			}
			for (int num2 = 0; num2 < Teleport.vTeleport.size(); num2++)
			{
				((Teleport)Teleport.vTeleport.elementAt(num2)).paint(g);
			}
			for (int num3 = 0; num3 < GameScr.vCharInMap.size(); num3++)
			{
				global::Char char3 = null;
				try
				{
					char3 = (global::Char)GameScr.vCharInMap.elementAt(num3);
				}
				catch (Exception)
				{
				}
				bool flag16 = char3 != null && (!GameCanvas.panel.isShow || !GameCanvas.panel.isTypeShop());
				if (flag16)
				{
					char3.paint(g);
				}
			}
			global::Char.myCharz().paint(g);
			bool flag17 = global::Char.myCharz().skillPaint != null && global::Char.myCharz().skillInfoPaint() != null && global::Char.myCharz().indexSkill < global::Char.myCharz().skillInfoPaint().Length;
			if (flag17)
			{
				global::Char.myCharz().paintCharWithSkill(g);
				global::Char.myCharz().paintMount2(g);
			}
			for (int num4 = 0; num4 < GameScr.vCharInMap.size(); num4++)
			{
				global::Char char4 = null;
				try
				{
					char4 = (global::Char)GameScr.vCharInMap.elementAt(num4);
				}
				catch (Exception ex2)
				{
					Cout.LogError("Loi ham paint char gamescr: " + ex2.ToString());
				}
				bool flag18 = char4 != null && (!GameCanvas.panel.isShow || !GameCanvas.panel.isTypeShop()) && char4.skillPaint != null && char4.skillInfoPaint() != null && char4.indexSkill < char4.skillInfoPaint().Length;
				if (flag18)
				{
					char4.paintCharWithSkill(g);
					char4.paintMount2(g);
				}
			}
			for (int num5 = 0; num5 < GameScr.vItemMap.size(); num5++)
			{
				((ItemMap)GameScr.vItemMap.elementAt(num5)).paint(g);
			}
			g.translate(0, -GameCanvas.transY);
			GameCanvas.debug("PA9", 1);
			GameScr.paintSplash(g);
			GameCanvas.debug("PA10", 1);
			GameCanvas.debug("PA11", 1);
			GameCanvas.debug("PA13", 1);
			this.paintEffect(g);
			this.paintBgItem(g, 3);
			for (int num6 = 0; num6 < GameScr.vNpc.size(); num6++)
			{
				Npc npc2 = (Npc)GameScr.vNpc.elementAt(num6);
				npc2.paintName(g);
			}
			EffecMn.paintLayer3(g);
			for (int num7 = 0; num7 < GameScr.vNpc.size(); num7++)
			{
				Npc npc3 = (Npc)GameScr.vNpc.elementAt(num7);
				bool flag19 = npc3.chatInfo != null;
				if (flag19)
				{
					if (npc3 != null)
					{
						npc3.chatInfo.paint(g, npc3.cx, npc3.cy - npc3.ch - GameCanvas.transY, npc3.cdir);
					}
				}
			}
			for (int num8 = 0; num8 < GameScr.vCharInMap.size(); num8++)
			{
				global::Char char5 = null;
				try
				{
					char5 = (global::Char)GameScr.vCharInMap.elementAt(num8);
				}
				catch (Exception)
				{
				}
				bool flag20 = char5 != null && char5.chatInfo != null;
				if (flag20)
				{
					char5.chatInfo.paint(g, char5.cx, char5.cy - char5.ch, char5.cdir);
				}
			}
			bool flag21 = global::Char.myCharz().chatInfo != null;
			if (flag21)
			{
				global::Char.myCharz().chatInfo.paint(g, global::Char.myCharz().cx, global::Char.myCharz().cy - global::Char.myCharz().ch, global::Char.myCharz().cdir);
			}
			EffectManager.mid_2Effects.paintAll(g);
			EffectManager.midEffects.paintAll(g);
			BackgroudEffect.paintFrontAll(g);
			for (int num9 = 0; num9 < TileMap.vCurrItem.size(); num9++)
			{
				BgItem bgItem = (BgItem)TileMap.vCurrItem.elementAt(num9);
				bool flag22 = bgItem.idImage != -1 && bgItem.layer > 3;
				if (flag22)
				{
					bgItem.paint(g);
				}
			}
			PopUp.paintAll(g);
			bool flag23 = TileMap.mapID == 120;
			if (flag23)
			{
				bool flag24 = this.percentMabu != 100;
				if (flag24)
				{
					int w = (int)this.percentMabu * mGraphics.getImageWidth(GameScr.imgHPLost) / 100;
					int num10 = (int)this.percentMabu;
					g.drawImage(GameScr.imgHPLost, TileMap.pxw / 2 - mGraphics.getImageWidth(GameScr.imgHPLost) / 2, 220, 0);
					g.setClip(TileMap.pxw / 2 - mGraphics.getImageWidth(GameScr.imgHPLost) / 2, 220, w, 10);
					g.drawImage(GameScr.imgHP, TileMap.pxw / 2 - mGraphics.getImageWidth(GameScr.imgHPLost) / 2, 220, 0);
					g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
				}
				bool flag25 = this.mabuEff;
				if (flag25)
				{
					this.tMabuEff++;
					bool flag26 = GameCanvas.gameTick % 3 == 0;
					if (flag26)
					{
						Effect me = new Effect(19, Res.random(TileMap.pxw / 2 - 50, TileMap.pxw / 2 + 50), 340, 2, 1, -1);
						EffecMn.addEff(me);
					}
					bool flag27 = GameCanvas.gameTick % 15 == 0;
					if (flag27)
					{
						Effect me2 = new Effect(18, Res.random(TileMap.pxw / 2 - 5, TileMap.pxw / 2 + 5), Res.random(300, 320), 2, 1, -1);
						EffecMn.addEff(me2);
					}
					bool flag28 = this.tMabuEff == 100;
					if (flag28)
					{
						this.activeSuperPower(TileMap.pxw / 2, 300);
					}
					bool flag29 = this.tMabuEff == 110;
					if (flag29)
					{
						this.tMabuEff = 0;
						this.mabuEff = false;
					}
				}
			}
			BackgroudEffect.paintFog(g);
			bool flag30 = true;
			for (int num11 = 0; num11 < BackgroudEffect.vBgEffect.size(); num11++)
			{
				BackgroudEffect backgroudEffect = (BackgroudEffect)BackgroudEffect.vBgEffect.elementAt(num11);
				bool flag31 = backgroudEffect.typeEff == 0;
				if (flag31)
				{
					flag30 = false;
					break;
				}
			}
			bool flag32 = mGraphics.zoomLevel <= 1 || Main.isIpod || Main.isIphone4;
			if (flag32)
			{
				flag30 = false;
			}
			bool flag33 = flag30 && !this.isRongThanXuatHien;
			if (flag33)
			{
				int num12 = TileMap.pxw / (mGraphics.getImageWidth(TileMap.imgLight) + 50);
				bool flag34 = num12 <= 0;
				if (flag34)
				{
					num12 = 1;
				}
				bool flag35 = TileMap.tileID != 28;
				if (flag35)
				{
					for (int num13 = 0; num13 < num12; num13++)
					{
						int num14 = 100 + num13 * (mGraphics.getImageWidth(TileMap.imgLight) + 50) - GameScr.cmx / 2;
						int num15 = -20;
						int imageWidth = mGraphics.getImageWidth(TileMap.imgLight);
						bool flag36 = num14 + imageWidth >= GameScr.cmx && num14 <= GameScr.cmx + GameCanvas.w && num15 + mGraphics.getImageHeight(TileMap.imgLight) >= GameScr.cmy && num15 <= GameScr.cmy + GameCanvas.h;
						if (flag36)
						{
							g.drawImage(TileMap.imgLight, 100 + num13 * (mGraphics.getImageWidth(TileMap.imgLight) + 50) - GameScr.cmx / 2, num15, 0);
						}
					}
				}
			}
			mSystem.paintFlyText(g);
			GameCanvas.debug("PA14", 1);
			GameCanvas.debug("PA15", 1);
			GameCanvas.debug("PA16", 1);
			this.paintArrowPointToNPC(g);
			GameCanvas.debug("PA17", 1);
			bool flag37 = !GameScr.isPaintOther && GameScr.isPaintRada == 1 && !GameCanvas.panel.isShow;
			if (flag37)
			{
				this.paintInfoBar(g);
			}
			GameScr.resetTranslate(g);
			this.paint_xp_bar(g);
			bool flag38 = !GameScr.isPaintOther;
			if (flag38)
			{
				AutoBroly.Painting(g);
				GameCanvas.debug("PA21", 1);
				GameCanvas.debug("PA18", 1);
				g.translate(-g.getTranslateX(), -g.getTranslateY());
				bool flag39 = (TileMap.mapID == 128 || TileMap.mapID == 127) && GameScr.mabuPercent != 0;
				if (flag39)
				{
					int num16 = 30;
					int num17 = 200;
					g.setColor(0);
					g.fillRect(num16 - 27, num17 - 112, 54, 8);
					g.setColor(16711680);
					g.setClip(num16 - 25, num17 - 110, (int)GameScr.mabuPercent, 4);
					g.fillRect(num16 - 25, num17 - 110, 50, 4);
					g.setClip(0, 0, 3000, 3000);
					mFont.tahoma_7b_white.drawString(g, "Mabu", num16, num17 - 112 + 10, 2, mFont.tahoma_7b_dark);
				}
				bool isFusion = global::Char.myCharz().isFusion;
				if (isFusion)
				{
					global::Char.myCharz().tFusion++;
					bool flag40 = GameCanvas.gameTick % 3 == 0;
					if (flag40)
					{
						g.setColor(16777215);
						g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
					}
					bool flag41 = global::Char.myCharz().tFusion >= 100;
					if (flag41)
					{
						global::Char.myCharz().fusionComplete();
					}
				}
				for (int num18 = 0; num18 < GameScr.vCharInMap.size(); num18++)
				{
					global::Char char6 = null;
					try
					{
						char6 = (global::Char)GameScr.vCharInMap.elementAt(num18);
					}
					catch (Exception)
					{
					}
					bool flag42 = char6 != null && char6.isFusion && global::Char.isCharInScreen(char6);
					if (flag42)
					{
						char6.tFusion++;
						bool flag43 = GameCanvas.gameTick % 3 == 0;
						if (flag43)
						{
							g.setColor(16777215);
							g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
						}
						bool flag44 = char6.tFusion >= 100;
						if (flag44)
						{
							char6.fusionComplete();
						}
					}
				}
				GameCanvas.paintz.paintTabSoft(g);
				GameCanvas.debug("PA19", 1);
				GameCanvas.debug("PA20", 1);
				GameScr.resetTranslate(g);
				this.paintSelectedSkill(g);
				GameCanvas.debug("PA22", 1);
				GameScr.resetTranslate(g);
				bool flag45 = GameCanvas.isTouch && GameCanvas.isTouchControl;
				if (flag45)
				{
					this.paintTouchControl(g);
				}
				GameScr.resetTranslate(g);
				this.paintChatVip(g);
				bool flag46 = !GameCanvas.panel.isShow && GameCanvas.currentDialog == null && ChatPopup.currChatPopup == null && ChatPopup.serverChatPopUp == null && GameCanvas.currentScreen.Equals(GameScr.instance);
				if (flag46)
				{
					base.paint(g);
					bool flag47 = mScreen.keyMouse == 1 && this.cmdMenu != null;
					if (flag47)
					{
						g.drawImage(ItemMap.imageFlare, this.cmdMenu.x + 7, this.cmdMenu.y + 15, 3);
					}
				}
				GameScr.resetTranslate(g);
				int num19 = 100 + ((global::Char.vItemTime.size() != 0) ? (GameScr.textTime.size() * 12) : 0);
				bool flag48 = global::Char.myCharz().clan != null;
				if (flag48)
				{
					int num20 = 0;
					int num21 = 0;
					int num22 = (GameCanvas.h - 100 - 60) / 12;
					for (int num23 = 0; num23 < GameScr.vCharInMap.size(); num23++)
					{
						global::Char char7 = (global::Char)GameScr.vCharInMap.elementAt(num23);
						bool flag49 = char7.clanID == -1 || char7.clanID != global::Char.myCharz().clan.ID;
						if (!flag49)
						{
							bool flag50 = char7.isOutX() && char7.cx < global::Char.myCharz().cx;
							if (flag50)
							{
								int num24 = num22;
								bool flag51 = global::Char.vItemTime.size() != 0;
								if (flag51)
								{
									num24 -= GameScr.textTime.size();
								}
								bool flag52 = num20 <= num24;
								if (flag52)
								{
									mFont.tahoma_7_green.drawString(g, char7.cName, 20, num19 - 12 + num20 * 12, mFont.LEFT, mFont.tahoma_7_grey);
									char7.paintHp(g, 10, num19 + num20 * 12 - 5);
									num20++;
								}
							}
							else
							{
								bool flag53 = char7.isOutX() && char7.cx > global::Char.myCharz().cx && num21 <= num22;
								if (flag53)
								{
									mFont.tahoma_7_green.drawString(g, char7.cName, GameCanvas.w - 25, num19 - 12 + num21 * 12, mFont.RIGHT, mFont.tahoma_7_grey);
									char7.paintHp(g, GameCanvas.w - 15, num19 + num21 * 12 - 5);
									num21++;
								}
							}
						}
					}
				}
				ChatTextField.gI().paint(g);
				bool flag54 = GameScr.isNewClanMessage && !GameCanvas.panel.isShow && GameCanvas.gameTick % 4 == 0;
				if (flag54)
				{
					g.drawImage(ItemMap.imageFlare, this.cmdMenu.x + 15, this.cmdMenu.y + 30, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
				bool flag55 = this.isSuperPower;
				if (flag55)
				{
					this.dxPower += 5;
					bool flag56 = this.tPower >= 0;
					if (flag56)
					{
						this.tPower += this.dxPower;
					}
					Res.outz("x power= " + this.xPower.ToString());
					bool flag57 = this.tPower < 0;
					if (flag57)
					{
						this.tPower--;
						bool flag58 = this.tPower == -20;
						if (flag58)
						{
							this.isSuperPower = false;
							this.tPower = 0;
							this.dxPower = 0;
						}
					}
					else
					{
						bool flag59 = (this.xPower - this.tPower > 0 || this.tPower < TileMap.pxw) && this.tPower > 0;
						if (flag59)
						{
							g.setColor(16777215);
							bool flag60 = !GameCanvas.lowGraphic;
							if (flag60)
							{
								g.fillArg(0, 0, GameCanvas.w, GameCanvas.h, 0, 0);
							}
							else
							{
								g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
							}
						}
						else
						{
							this.tPower = -1;
						}
					}
				}
				for (int num25 = 0; num25 < global::Char.vItemTime.size(); num25++)
				{
					((ItemTime)global::Char.vItemTime.elementAt(num25)).paint(g, this.cmdMenu.x + 32 + num25 * 24, 55);
				}
				for (int num26 = 0; num26 < GameScr.textTime.size(); num26++)
				{
					((ItemTime)GameScr.textTime.elementAt(num26)).paintText(g, this.cmdMenu.x + ((global::Char.vItemTime.size() == 0) ? 25 : 5), ((global::Char.vItemTime.size() == 0) ? 45 : 90) + num26 * 12);
				}
				this.paintXoSo(g);
				bool flag61 = mResources.language == 1;
				if (flag61)
				{
					long second = mSystem.currentTimeMillis() - GameScr.deltaTime;
					mFont.tahoma_7b_white.drawString(g, NinjaUtil.getDate2(second), 10, GameCanvas.h - 65, 0, mFont.tahoma_7b_dark);
				}
				bool flag62 = !this.yourNumber.Equals(string.Empty);
				if (flag62)
				{
					for (int num27 = 0; num27 < this.strPaint.Length; num27++)
					{
						mFont.tahoma_7b_white.drawString(g, this.strPaint[num27], 5, 85 + num27 * 18, 0, mFont.tahoma_7b_dark);
					}
				}
			}
			int num28 = 0;
			int num29 = GameCanvas.hw;
			bool flag63 = num29 > 200;
			if (flag63)
			{
				num29 = 200;
			}
			this.paintPhuBanBar(g, num28 + GameCanvas.w / 2, 0, num29);
			EffectManager.hiEffects.paintAll(g);
			bool flag64 = GameScr.nCT_timeBallte > mSystem.currentTimeMillis() && TileMap.mapID == 170 && GameScr.isPaint_CT && GameScr.nCT_nBoyBaller / 2 > 0;
			if (flag64)
			{
				try
				{
					this.paint_CT(g, num28 + GameCanvas.w / 2, 0, num29);
				}
				catch (Exception)
				{
				}
			}
			bool flag65 = TileMap.mapID == 172;
			if (flag65)
			{
				string text = string.Concat(new string[]
				{
					mResources.WAIT,
					"  ",
					GameScr.nUSER_CT.ToString(),
					"/",
					GameScr.nUSER_MAX_CT.ToString()
				});
				mFont.tahoma_7b_dark.drawString(g, string.Concat(new string[]
				{
					mResources.WAIT,
					"  ",
					GameScr.nUSER_CT.ToString(),
					"/",
					GameScr.nUSER_MAX_CT.ToString()
				}), GameCanvas.w - 10, 40, 1);
			}
		}
	}

	// Token: 0x060004AF RID: 1199 RVA: 0x0005AD58 File Offset: 0x00058F58
	private void paintXoSo(mGraphics g)
	{
		bool flag = this.tShow != 0;
		if (flag)
		{
			string str = string.Empty;
			for (int i = 0; i < this.winnumber.Length; i++)
			{
				str = str + this.randomNumber[i].ToString() + " ";
			}
			PopUp.paintPopUp(g, 20, 45, 95, 35, 16777215, false);
			mFont.tahoma_7b_dark.drawString(g, mResources.kquaVongQuay, 68, 50, 2);
			mFont.tahoma_7b_dark.drawString(g, str + string.Empty, 68, 65, 2);
		}
	}

	// Token: 0x060004B0 RID: 1200 RVA: 0x0005ADFC File Offset: 0x00058FFC
	private void checkEffToObj(IMapObject obj, bool isnew)
	{
		bool flag = obj == null || this.tDoubleDelay > 0;
		if (!flag)
		{
			this.tDoubleDelay = 10;
			int x = obj.getX();
			int num = Res.abs(global::Char.myCharz().cx - x);
			int loopCount = (num <= 80) ? 1 : ((num > 80 && num <= 200) ? 2 : ((num <= 200 || num > 400) ? 4 : 3));
			bool flag2 = !isnew;
			if (flag2)
			{
				bool flag3 = obj.Equals(global::Char.myCharz().mobFocus) || (obj.Equals(global::Char.myCharz().charFocus) && global::Char.myCharz().isMeCanAttackOtherPlayer(global::Char.myCharz().charFocus));
				if (flag3)
				{
					ServerEffect.addServerEffect(135, obj.getX(), obj.getY(), loopCount);
				}
				else
				{
					bool flag4 = obj.Equals(global::Char.myCharz().npcFocus) || obj.Equals(global::Char.myCharz().itemFocus) || obj.Equals(global::Char.myCharz().charFocus);
					if (flag4)
					{
						ServerEffect.addServerEffect(136, obj.getX(), obj.getY(), loopCount);
					}
				}
			}
			else
			{
				ServerEffect.addServerEffect(136, obj.getX(), obj.getY(), loopCount);
			}
		}
	}

	// Token: 0x060004B1 RID: 1201 RVA: 0x0005AF58 File Offset: 0x00059158
	private void updateClickToArrow()
	{
		bool flag = this.tDoubleDelay > 0;
		if (flag)
		{
			this.tDoubleDelay--;
		}
		bool flag2 = this.clickMoving;
		if (flag2)
		{
			this.clickMoving = false;
			IMapObject mapObject = this.findClickToItem(this.clickToX, this.clickToY);
			bool flag3 = mapObject == null || (mapObject != null && mapObject.Equals(global::Char.myCharz().npcFocus) && TileMap.mapID == 51);
			if (flag3)
			{
				ServerEffect.addServerEffect(134, this.clickToX, this.clickToY + GameCanvas.transY / 2, 3);
			}
		}
	}

	// Token: 0x060004B2 RID: 1202 RVA: 0x0005AFF8 File Offset: 0x000591F8
	private void paintWaypointArrow(mGraphics g)
	{
		int num = 10;
		Task taskMaint = global::Char.myCharz().taskMaint;
		bool flag = taskMaint != null && taskMaint.taskId == 0 && ((taskMaint.index != 1 && taskMaint.index < 6) || taskMaint.index == 0);
		if (!flag)
		{
			for (int i = 0; i < TileMap.vGo.size(); i++)
			{
				Waypoint waypoint = (Waypoint)TileMap.vGo.elementAt(i);
				bool flag2 = waypoint.minY == 0 || (int)waypoint.maxY >= TileMap.pxh - 24;
				if (flag2)
				{
					bool flag3 = (int)waypoint.maxY <= TileMap.pxh / 2;
					if (flag3)
					{
						int x = (int)(waypoint.minX + (waypoint.maxX - waypoint.minX) / 2);
						int y = (int)(waypoint.minY + (waypoint.maxY - waypoint.minY) / 2) + this.runArrow;
						bool isTouch = GameCanvas.isTouch;
						if (isTouch)
						{
							y = (int)(waypoint.maxY + (waypoint.maxY - waypoint.minY)) + this.runArrow + num;
						}
						g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 6, x, y, StaticObj.VCENTER_HCENTER);
					}
					else
					{
						bool flag4 = (int)waypoint.minY >= TileMap.pxh / 2;
						if (flag4)
						{
							g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 4, (int)(waypoint.minX + (waypoint.maxX - waypoint.minX) / 2), (int)(waypoint.minY - 12) - this.runArrow, StaticObj.VCENTER_HCENTER);
						}
					}
				}
				else
				{
					bool flag5 = waypoint.minX >= 0 && waypoint.minX < 24;
					if (flag5)
					{
						bool flag6 = !GameCanvas.isTouch;
						if (flag6)
						{
							g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 2, (int)(waypoint.maxX + 12) + this.runArrow, (int)(waypoint.maxY - 12), StaticObj.VCENTER_HCENTER);
						}
						else
						{
							g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 2, (int)(waypoint.maxX + 12) + this.runArrow, (int)(waypoint.maxY - 32), StaticObj.VCENTER_HCENTER);
						}
					}
					else
					{
						bool flag7 = (int)waypoint.minX <= TileMap.tmw * 24 && (int)waypoint.minX >= TileMap.tmw * 24 - 48;
						if (flag7)
						{
							bool flag8 = !GameCanvas.isTouch;
							if (flag8)
							{
								g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 0, (int)(waypoint.minX - 12) - this.runArrow, (int)(waypoint.maxY - 12), StaticObj.VCENTER_HCENTER);
							}
							else
							{
								g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 0, (int)(waypoint.minX - 12) - this.runArrow, (int)(waypoint.maxY - 32), StaticObj.VCENTER_HCENTER);
							}
						}
						else
						{
							g.drawRegion(GameScr.arrow, 0, 0, 13, 16, 4, (int)(waypoint.minX + (waypoint.maxX - waypoint.minX) / 2), (int)(waypoint.maxY - 48) - this.runArrow, StaticObj.VCENTER_HCENTER);
						}
					}
				}
			}
		}
	}

	// Token: 0x060004B3 RID: 1203 RVA: 0x0005B34C File Offset: 0x0005954C
	public static Npc findNPCInMap(short id)
	{
		for (int i = 0; i < GameScr.vNpc.size(); i++)
		{
			Npc npc = (Npc)GameScr.vNpc.elementAt(i);
			bool flag = npc.template.npcTemplateId == (int)id;
			if (flag)
			{
				return npc;
			}
		}
		return null;
	}

	// Token: 0x060004B4 RID: 1204 RVA: 0x0005B3A4 File Offset: 0x000595A4
	public static global::Char findCharInMap(int charId)
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char.charID == charId;
			if (flag)
			{
				return @char;
			}
		}
		return null;
	}

	// Token: 0x060004B5 RID: 1205 RVA: 0x0005B3F8 File Offset: 0x000595F8
	public static Mob findMobInMap(sbyte mobIndex)
	{
		return (Mob)GameScr.vMob.elementAt((int)mobIndex);
	}

	// Token: 0x060004B6 RID: 1206 RVA: 0x0005B41C File Offset: 0x0005961C
	public static Mob findMobInMap(int mobId)
	{
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob = (Mob)GameScr.vMob.elementAt(i);
			bool flag = mob.mobId == mobId;
			if (flag)
			{
				return mob;
			}
		}
		return null;
	}

	// Token: 0x060004B7 RID: 1207 RVA: 0x0005B470 File Offset: 0x00059670
	public static Npc getNpcTask()
	{
		for (int i = 0; i < GameScr.vNpc.size(); i++)
		{
			Npc npc = (Npc)GameScr.vNpc.elementAt(i);
			bool flag = npc.template.npcTemplateId == (int)GameScr.getTaskNpcId();
			if (flag)
			{
				return npc;
			}
		}
		return null;
	}

	// Token: 0x060004B8 RID: 1208 RVA: 0x0005B4CC File Offset: 0x000596CC
	private void paintArrowPointToNPC(mGraphics g)
	{
		try
		{
			bool flag = ChatPopup.currChatPopup != null;
			if (!flag)
			{
				int taskNpcId = (int)GameScr.getTaskNpcId();
				bool flag2 = taskNpcId == -1;
				if (!flag2)
				{
					Npc npc = null;
					for (int i = 0; i < GameScr.vNpc.size(); i++)
					{
						Npc npc2 = (Npc)GameScr.vNpc.elementAt(i);
						bool flag3 = npc2.template.npcTemplateId == taskNpcId;
						if (flag3)
						{
							bool flag4 = npc == null;
							if (flag4)
							{
								npc = npc2;
							}
							else
							{
								bool flag5 = Res.abs(npc2.cx - global::Char.myCharz().cx) < Res.abs(npc.cx - global::Char.myCharz().cx);
								if (flag5)
								{
									npc = npc2;
								}
							}
						}
					}
					bool flag6 = npc == null || npc.statusMe == 15 || (npc.cx > GameScr.cmx && npc.cx < GameScr.cmx + GameScr.gW && npc.cy > GameScr.cmy && npc.cy < GameScr.cmy + GameScr.gH) || GameCanvas.gameTick % 10 < 5;
					if (!flag6)
					{
						int num = npc.cx - global::Char.myCharz().cx;
						int num2 = npc.cy - global::Char.myCharz().cy;
						int x = 0;
						int y = 0;
						int arg = 0;
						bool flag7 = num > 0 && num2 >= 0;
						if (flag7)
						{
							bool flag8 = Res.abs(num) >= Res.abs(num2);
							if (flag8)
							{
								x = GameScr.gW - 10;
								y = GameScr.gH / 2 + 30;
								bool isTouch = GameCanvas.isTouch;
								if (isTouch)
								{
									y = GameScr.gH / 2 + 10;
								}
								arg = 0;
							}
							else
							{
								x = GameScr.gW / 2;
								y = GameScr.gH - 10;
								arg = 5;
							}
						}
						else
						{
							bool flag9 = num >= 0 && num2 < 0;
							if (flag9)
							{
								bool flag10 = Res.abs(num) >= Res.abs(num2);
								if (flag10)
								{
									x = GameScr.gW - 10;
									y = GameScr.gH / 2 + 30;
									bool isTouch2 = GameCanvas.isTouch;
									if (isTouch2)
									{
										y = GameScr.gH / 2 + 10;
									}
									arg = 0;
								}
								else
								{
									x = GameScr.gW / 2;
									y = 10;
									arg = 6;
								}
							}
						}
						bool flag11 = num < 0 && num2 >= 0;
						if (flag11)
						{
							bool flag12 = Res.abs(num) >= Res.abs(num2);
							if (flag12)
							{
								x = 10;
								y = GameScr.gH / 2 + 30;
								bool isTouch3 = GameCanvas.isTouch;
								if (isTouch3)
								{
									y = GameScr.gH / 2 + 10;
								}
								arg = 3;
							}
							else
							{
								x = GameScr.gW / 2;
								y = GameScr.gH - 10;
								arg = 5;
							}
						}
						else
						{
							bool flag13 = num <= 0 && num2 < 0;
							if (flag13)
							{
								bool flag14 = Res.abs(num) >= Res.abs(num2);
								if (flag14)
								{
									x = 10;
									y = GameScr.gH / 2 + 30;
									bool isTouch4 = GameCanvas.isTouch;
									if (isTouch4)
									{
										y = GameScr.gH / 2 + 10;
									}
									arg = 3;
								}
								else
								{
									x = GameScr.gW / 2;
									y = 10;
									arg = 6;
								}
							}
						}
						GameScr.resetTranslate(g);
						g.drawRegion(GameScr.arrow, 0, 0, 13, 16, arg, x, y, StaticObj.VCENTER_HCENTER);
					}
				}
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("Loi ham arrow to npc: " + ex.ToString());
		}
	}

	// Token: 0x060004B9 RID: 1209 RVA: 0x0005B868 File Offset: 0x00059A68
	public static void resetTranslate(mGraphics g)
	{
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		g.setClip(0, -200, GameCanvas.w, 200 + GameCanvas.h);
	}

	// Token: 0x060004BA RID: 1210 RVA: 0x0005B8A0 File Offset: 0x00059AA0
	private void paintTouchControl(mGraphics g)
	{
		bool flag = this.isNotPaintTouchControl();
		if (!flag)
		{
			GameScr.resetTranslate(g);
			bool flag2 = !TileMap.isOfflineMap() && !this.isVS();
			if (flag2)
			{
				bool flag3 = mScreen.keyTouch == 15 || mScreen.keyMouse == 15;
				if (flag3)
				{
					g.drawImage((!Main.isPC) ? GameScr.imgChat2 : GameScr.imgChatsPC2, GameScr.xC + 17, GameScr.yC + 17 + mGraphics.addYWhenOpenKeyBoard, mGraphics.HCENTER | mGraphics.VCENTER);
				}
				else
				{
					g.drawImage((!Main.isPC) ? GameScr.imgChat : GameScr.imgChatPC, GameScr.xC + 17, GameScr.yC + 17 + mGraphics.addYWhenOpenKeyBoard, mGraphics.HCENTER | mGraphics.VCENTER);
				}
			}
			bool flag4 = GameScr.isUseTouch;
			if (flag4)
			{
			}
		}
	}

	// Token: 0x060004BB RID: 1211 RVA: 0x0005B984 File Offset: 0x00059B84
	public void paintImageBarRight(mGraphics g, global::Char c)
	{
		int num = (int)(c.cHP * GameScr.hpBarW / c.cHPFull);
		int num2 = (int)(c.cMP * (long)GameScr.mpBarW / c.cMPFull);
		int num3 = (int)(this.dHP * GameScr.hpBarW / c.cHPFull);
		int num4 = (int)(this.dMP * (long)GameScr.mpBarW / c.cMPFull);
		g.setClip(GameCanvas.w / 2 + 58 - mGraphics.getImageWidth(GameScr.imgPanel), 0, 95, 100);
		g.drawRegion(GameScr.imgPanel, 0, 0, mGraphics.getImageWidth(GameScr.imgPanel), mGraphics.getImageHeight(GameScr.imgPanel), 2, GameCanvas.w / 2 + 60, 0, mGraphics.RIGHT | mGraphics.TOP);
		g.setClip((int)((long)(GameCanvas.w / 2 + 60 - 83) - GameScr.hpBarW + GameScr.hpBarW - (long)num3), 5, num3, 10);
		g.drawImage(GameScr.imgHPLost, GameCanvas.w / 2 + 60 - 83, 5, mGraphics.RIGHT | mGraphics.TOP);
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
		g.setClip((int)((long)(GameCanvas.w / 2 + 60 - 83) - GameScr.hpBarW + GameScr.hpBarW - (long)num), 5, num, 10);
		g.drawImage(GameScr.imgHP, GameCanvas.w / 2 + 60 - 83, 5, mGraphics.RIGHT | mGraphics.TOP);
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
		g.setClip((int)((long)(GameCanvas.w / 2 + 60 - 83 - GameScr.mpBarW) + GameScr.hpBarW - (long)num4), 20, num4, 6);
		g.drawImage(GameScr.imgMPLost, GameCanvas.w / 2 + 60 - 83, 20, mGraphics.RIGHT | mGraphics.TOP);
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
		g.setClip((int)((long)(GameCanvas.w / 2 + 60 - 83 - GameScr.mpBarW) + GameScr.hpBarW - (long)num2), 20, num2, 6);
		g.drawImage(GameScr.imgMP, GameCanvas.w / 2 + 60 - 83, 20, mGraphics.RIGHT | mGraphics.TOP);
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
	}

	// Token: 0x060004BC RID: 1212 RVA: 0x0005BBC8 File Offset: 0x00059DC8
	private void paintImageBar(mGraphics g, bool isLeft, global::Char c)
	{
		bool flag = c != null;
		if (flag)
		{
			bool flag2 = c.charID == global::Char.myCharz().charID;
			int num;
			int num2;
			int num3;
			int num4;
			if (flag2)
			{
				num = (int)(this.dHP * GameScr.hpBarW / c.cHPFull);
				num2 = (int)(this.dMP * (long)GameScr.mpBarW / c.cMPFull);
				num3 = (int)(c.cHP * GameScr.hpBarW / c.cHPFull);
				num4 = (int)(c.cMP * (long)GameScr.mpBarW / c.cMPFull);
			}
			else
			{
				num = (int)(c.dHP * GameScr.hpBarW / c.cHPFull);
				num2 = c.perCentMp * GameScr.mpBarW / 100;
				num3 = (int)(c.cHP * GameScr.hpBarW / c.cHPFull);
				num4 = c.perCentMp * GameScr.mpBarW / 100;
			}
			bool flag3 = global::Char.myCharz().secondPower > 0;
			if (flag3)
			{
				int w = (int)global::Char.myCharz().powerPoint * GameScr.spBarW / (int)global::Char.myCharz().maxPowerPoint;
				g.drawImage(GameScr.imgPanel2, 58, 29, 0);
				g.setClip(83, 31, w, 10);
				g.drawImage(GameScr.imgSP, 83, 31, 0);
				g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
				mFont.tahoma_7_white.drawString(g, string.Concat(new string[]
				{
					global::Char.myCharz().strInfo,
					":",
					global::Char.myCharz().powerPoint.ToString(),
					"/",
					global::Char.myCharz().maxPowerPoint.ToString()
				}), 115, 29, 2);
			}
			bool flag4 = c.charID != global::Char.myCharz().charID;
			if (flag4)
			{
				g.setClip(mGraphics.getImageWidth(GameScr.imgPanel) - 95, 0, 95, 100);
			}
			g.drawImage(GameScr.imgPanel, 0, 0, 0);
			if (isLeft)
			{
				g.setClip(83, 5, num, 10);
			}
			else
			{
				g.setClip((int)(83L + GameScr.hpBarW - (long)num), 5, num, 10);
			}
			g.drawImage(GameScr.imgHPLost, 83, 5, 0);
			g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			if (isLeft)
			{
				g.setClip(83, 5, num3, 10);
			}
			else
			{
				g.setClip((int)(83L + GameScr.hpBarW - (long)num3), 5, num3, 10);
			}
			g.drawImage(GameScr.imgHP, 83, 5, 0);
			g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			if (isLeft)
			{
				g.setClip(83, 20, num2, 6);
			}
			else
			{
				g.setClip(83 + GameScr.mpBarW - num2, 20, num2, 6);
			}
			g.drawImage(GameScr.imgMPLost, 83, 20, 0);
			g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			if (isLeft)
			{
				g.setClip(83, 20, num2, 6);
			}
			else
			{
				g.setClip(83 + GameScr.mpBarW - num4, 20, num4, 6);
			}
			g.drawImage(GameScr.imgMP, 83, 20, 0);
			g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			bool flag5 = global::Char.myCharz().cMP == 0L && GameCanvas.gameTick % 10 > 5;
			if (flag5)
			{
				g.setClip(83, 20, 2, 6);
				g.drawImage(GameScr.imgMPLost, 83, 20, 0);
				g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			}
		}
	}

	// Token: 0x060004BD RID: 1213 RVA: 0x0005BF6C File Offset: 0x0005A16C
	public void getInjure()
	{
	}

	// Token: 0x060004BE RID: 1214 RVA: 0x0005BF70 File Offset: 0x0005A170
	public void starVS()
	{
		this.curr = (this.last = mSystem.currentTimeMillis());
		this.secondVS = 180;
	}

	// Token: 0x060004BF RID: 1215 RVA: 0x0005BFA0 File Offset: 0x0005A1A0
	private global::Char findCharVS1()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char.cTypePk != 0;
			if (flag)
			{
				return @char;
			}
		}
		return null;
	}

	// Token: 0x060004C0 RID: 1216 RVA: 0x0005BFF4 File Offset: 0x0005A1F4
	private global::Char findCharVS2()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char.cTypePk != 0 && @char != this.findCharVS1();
			if (flag)
			{
				return @char;
			}
		}
		return null;
	}

	// Token: 0x060004C1 RID: 1217 RVA: 0x0005C058 File Offset: 0x0005A258
	private void paintInfoBar(mGraphics g)
	{
		GameScr.resetTranslate(g);
		bool flag = TileMap.mapID == 130 && this.findCharVS1() != null && this.findCharVS2() != null;
		if (flag)
		{
			g.translate(GameCanvas.w / 2 - 62, 0);
			this.paintImageBar(g, true, this.findCharVS1());
			g.translate(-(GameCanvas.w / 2 - 65), 0);
			this.paintImageBarRight(g, this.findCharVS2());
			this.findCharVS1().paintHeadWithXY(g, 137, 25, 0);
			this.findCharVS2().paintHeadWithXY(g, GameCanvas.w - 15 - 122, 25, 2);
		}
		else
		{
			bool flag2 = this.isVS() && global::Char.myCharz().charFocus != null;
			if (flag2)
			{
				g.translate(GameCanvas.w / 2 - 62, 0);
				this.paintImageBar(g, true, global::Char.myCharz().charFocus);
				g.translate(-(GameCanvas.w / 2 - 65), 0);
				this.paintImageBarRight(g, global::Char.myCharz());
				global::Char.myCharz().paintHeadWithXY(g, 137, 25, 0);
				global::Char.myCharz().charFocus.paintHeadWithXY(g, GameCanvas.w - 15 - 122, 25, 2);
			}
			else
			{
				bool flag3 = GameScr.ispaintPhubangBar() && GameScr.isSmallScr();
				if (flag3)
				{
					GameScr.paintHPBar_NEW(g, 1, 1, global::Char.myCharz());
				}
				else
				{
					this.paintImageBar(g, true, global::Char.myCharz());
					bool flag4 = global::Char.myCharz().isInEnterOfflinePoint() != null || global::Char.myCharz().isInEnterOnlinePoint() != null;
					if (flag4)
					{
						mFont.tahoma_7_green2.drawString(g, mResources.enter, this.imgScrW / 2, 8 + mGraphics.addYWhenOpenKeyBoard, mFont.CENTER);
					}
					else
					{
						bool flag5 = global::Char.myCharz().mobFocus != null;
						if (!flag5)
						{
							bool flag6 = global::Char.myCharz().npcFocus != null;
							if (!flag6)
							{
								bool flag7 = global::Char.myCharz().charFocus != null;
								if (flag7)
								{
								}
							}
						}
					}
				}
			}
		}
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		bool flag8 = this.isVS() && this.secondVS > 0;
		if (flag8)
		{
			this.curr = mSystem.currentTimeMillis();
			bool flag9 = this.curr - this.last >= 1000L;
			if (flag9)
			{
				this.last = mSystem.currentTimeMillis();
				this.secondVS--;
			}
			mFont.tahoma_7b_white.drawString(g, this.secondVS.ToString() + string.Empty, GameCanvas.w / 2, 13, 2, mFont.tahoma_7b_dark);
		}
		bool flag10 = this.flareFindFocus;
		if (flag10)
		{
			g.drawImage(ItemMap.imageFlare, 40, 35, mGraphics.BOTTOM | mGraphics.HCENTER);
			this.flareTime--;
			bool flag11 = this.flareTime < 0;
			if (flag11)
			{
				this.flareTime = 0;
				this.flareFindFocus = false;
			}
		}
	}

	// Token: 0x060004C2 RID: 1218 RVA: 0x0005C368 File Offset: 0x0005A568
	public bool isVS()
	{
		return TileMap.isVoDaiMap() && (global::Char.myCharz().cTypePk != 0 || (TileMap.mapID == 130 && this.findCharVS1() != null && this.findCharVS2() != null));
	}

	// Token: 0x060004C3 RID: 1219 RVA: 0x0005C3C0 File Offset: 0x0005A5C0
	private void paintSelectedSkill(mGraphics g)
	{
		bool flag = this.mobCapcha != null;
		if (flag)
		{
			this.paintCapcha(g);
		}
		else
		{
			bool flag2 = GameCanvas.currentDialog != null || ChatPopup.currChatPopup != null || GameCanvas.menu.showMenu || this.isPaintPopup() || GameCanvas.panel.isShow || global::Char.myCharz().taskMaint.taskId == 0 || ChatTextField.gI().isShow || GameCanvas.currentScreen == MoneyCharge.instance;
			if (!flag2)
			{
				long num = mSystem.currentTimeMillis();
				long num2 = num - this.lastUsePotion;
				int num3 = 0;
				bool flag3 = num2 < 10000L;
				if (flag3)
				{
					num3 = (int)(num2 * 20L / 10000L);
				}
				bool flag4 = !GameCanvas.isTouch;
				if (flag4)
				{
					g.drawImage((mScreen.keyTouch != 10) ? GameScr.imgSkill : GameScr.imgSkill2, GameScr.xSkill + GameScr.xHP - 1, GameScr.yHP - 1, 0);
					SmallImage.drawSmallImage(g, 542, GameScr.xSkill + GameScr.xHP + 3, GameScr.yHP + 3, 0, 0);
					mFont.number_gray.drawString(g, string.Empty + GameScr.hpPotion.ToString(), GameScr.xSkill + GameScr.xHP + 22, GameScr.yHP + 15, 1);
					bool flag5 = num2 < 10000L;
					if (flag5)
					{
						g.setColor(2721889);
						num3 = (int)(num2 * 20L / 10000L);
						g.fillRect(GameScr.xSkill + GameScr.xHP + 3, GameScr.yHP + 3 + num3, 20, 20 - num3);
					}
				}
				else
				{
					bool flag6 = global::Char.myCharz().statusMe != 14;
					if (flag6)
					{
						bool isSmallGamePad = GameScr.gamePad.isSmallGamePad;
						if (isSmallGamePad)
						{
							bool flag7 = GameScr.isAnalog != 1;
							if (flag7)
							{
								g.setColor(9670800);
								g.fillRect(GameScr.xHP + 9, GameScr.yHP + 10 + 10, 22, 20);
								g.setColor(16777215);
								g.fillRect(GameScr.xHP + 9, GameScr.yHP + 10 + ((num3 != 0) ? (20 - num3) : 0) + 10, 22, (num3 == 0) ? 20 : num3);
								g.drawImage((mScreen.keyTouch != 10) ? GameScr.imgHP1 : GameScr.imgHP2, GameScr.xHP, GameScr.yHP + 10, 0);
								mFont.tahoma_7_red.drawString(g, string.Empty + GameScr.hpPotion.ToString(), GameScr.xHP + 20, GameScr.yHP + 15 + 10, 2);
								bool flag8 = GameScr.isPickNgocRong;
								if (flag8)
								{
									g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNR1 : GameScr.imgNR2, GameScr.xHP + 5, GameScr.yHP - 6 - 40 + 10, 0);
								}
								else
								{
									bool flag9 = GameScr.isudungCapsun4;
									if (flag9)
									{
										g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNutF : GameScr.imgNut, GameScr.xHP + 5, GameScr.yHP - 6 - 40 + 10, 0);
										SmallImage.drawSmallImage(g, 1088, GameScr.xHP - 7 + 5, GameScr.yHP - 6 - 40 - 7 + 10, 0, 0);
									}
									else
									{
										bool flag10 = GameScr.isudungCapsun3;
										if (flag10)
										{
											g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNutF : GameScr.imgNut, GameScr.xHP + 5, GameScr.yHP - 6 - 40 + 10, 0);
											SmallImage.drawSmallImage(g, 1087, GameScr.xHP - 7 + 5, GameScr.yHP - 6 - 40 - 7 + 10, 0, 0);
										}
									}
								}
							}
							else
							{
								bool flag11 = GameScr.isAnalog == 1;
								if (flag11)
								{
									int num4 = 10;
									g.drawImage((mScreen.keyTouch != 10) ? GameScr.imgSkill : GameScr.imgSkill2, GameScr.xSkill + GameScr.xHP - 1, GameScr.yHP - 1 + num4, 0);
									SmallImage.drawSmallImage(g, 542, GameScr.xSkill + GameScr.xHP + 3, GameScr.yHP + 3 + num4, 0, 0);
									mFont.number_gray.drawString(g, string.Empty + GameScr.hpPotion.ToString(), GameScr.xSkill + GameScr.xHP + 22, GameScr.yHP + 13 + num4, 1);
									bool flag12 = num2 < 10000L;
									if (flag12)
									{
										g.setColor(2721889);
										num3 = (int)(num2 * 20L / 10000L);
										g.fillRect(GameScr.xSkill + GameScr.xHP + 3, GameScr.yHP + 3 + num3 + num4, 20, 20 - num3);
									}
									bool flag13 = GameScr.isPickNgocRong;
									if (flag13)
									{
										g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNR3 : GameScr.imgNR4, GameScr.xHP + 20 + 5, GameScr.yHP + 20 - 6 - 40 + 10, mGraphics.HCENTER | mGraphics.VCENTER);
									}
									else
									{
										bool flag14 = GameScr.isudungCapsun4;
										if (flag14)
										{
											g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNut : GameScr.imgNutF, GameScr.xHP + 20 + 5, GameScr.yHP + 20 - 6 - 40 + 10, mGraphics.HCENTER | mGraphics.VCENTER);
											SmallImage.drawSmallImage(g, 1088, GameScr.xHP + 20 - 7 + 5, GameScr.yHP + 20 - 6 - 40 - 7 + 10, 0, 0);
										}
										else
										{
											bool flag15 = GameScr.isudungCapsun3;
											if (flag15)
											{
												g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNut : GameScr.imgNutF, GameScr.xHP + 20 + 5, GameScr.yHP + 20 - 6 - 40 + 10, mGraphics.HCENTER | mGraphics.VCENTER);
												SmallImage.drawSmallImage(g, 1087, GameScr.xHP + 20 - 7 + 5, GameScr.yHP + 20 - 6 - 40 - 7 + 10, 0, 0);
											}
										}
									}
								}
							}
						}
						else
						{
							bool flag16 = GameScr.isAnalog != 1;
							if (flag16)
							{
								g.setColor(9670800);
								g.fillRect(GameScr.xHP + 9, GameScr.yHP + 10 - 6, 22, 20);
								g.setColor(16777215);
								g.fillRect(GameScr.xHP + 9, GameScr.yHP + 10 + ((num3 != 0) ? (20 - num3) : 0) - 6, 22, (num3 == 0) ? 20 : num3);
								g.drawImage((mScreen.keyTouch != 10) ? GameScr.imgHP1 : GameScr.imgHP2, GameScr.xHP, GameScr.yHP - 6, 0);
								mFont.tahoma_7_red.drawString(g, string.Empty + GameScr.hpPotion.ToString(), GameScr.xHP + 20, GameScr.yHP + 15 - 6, 2);
								bool flag17 = GameScr.isPickNgocRong;
								if (flag17)
								{
									g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNR1 : GameScr.imgNR2, GameScr.xHP, GameScr.yHP - 6 - 40, 0);
								}
								else
								{
									bool flag18 = GameScr.isudungCapsun4;
									if (flag18)
									{
										g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNut : GameScr.imgNutF, GameScr.xHP + 20, GameScr.yHP + 20 - 6 - 40, mGraphics.HCENTER | mGraphics.VCENTER);
										SmallImage.drawSmallImage(g, 1088, GameScr.xHP + 20 - 7, GameScr.yHP + 20 - 6 - 40 - 7, 0, 0);
									}
									else
									{
										bool flag19 = GameScr.isudungCapsun3;
										if (flag19)
										{
											g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNut : GameScr.imgNutF, GameScr.xHP + 20, GameScr.yHP + 20 - 6 - 40, mGraphics.HCENTER | mGraphics.VCENTER);
											SmallImage.drawSmallImage(g, 1087, GameScr.xHP + 20 - 7, GameScr.yHP + 20 - 6 - 40 - 7, 0, 0);
										}
									}
								}
							}
							else
							{
								g.setColor(9670800);
								g.fillRect(GameScr.xHP + 10, GameScr.yHP + 10 - 6 + 10, 20, 18);
								g.setColor(16777215);
								g.fillRect(GameScr.xHP + 10, GameScr.yHP + 10 + ((num3 != 0) ? (20 - num3) : 0) - 6 + 10, 20, (num3 == 0) ? 18 : num3);
								g.drawImage((mScreen.keyTouch != 10) ? GameScr.imgHP3 : GameScr.imgHP4, GameScr.xHP + 20, GameScr.yHP + 20 - 6 + 10, mGraphics.HCENTER | mGraphics.VCENTER);
								mFont.tahoma_7_red.drawString(g, string.Empty + GameScr.hpPotion.ToString(), GameScr.xHP + 20, GameScr.yHP + 15 - 6 + 10, 2);
								bool flag20 = GameScr.isPickNgocRong;
								if (flag20)
								{
									g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNR3 : GameScr.imgNR4, GameScr.xHP + 20 + 5, GameScr.yHP + 20 - 6 - 40 + 10, mGraphics.HCENTER | mGraphics.VCENTER);
								}
								else
								{
									bool flag21 = GameScr.isudungCapsun4;
									if (flag21)
									{
										g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNut : GameScr.imgNutF, GameScr.xHP + 20 + 5, GameScr.yHP + 20 - 6 - 40 + 10, mGraphics.HCENTER | mGraphics.VCENTER);
										SmallImage.drawSmallImage(g, 1088, GameScr.xHP + 20 - 7 + 5, GameScr.yHP + 20 - 6 - 40 - 7 + 10, 0, 0);
									}
									else
									{
										bool flag22 = GameScr.isudungCapsun3;
										if (flag22)
										{
											g.drawImage((mScreen.keyTouch != 14) ? GameScr.imgNut : GameScr.imgNutF, GameScr.xHP + 20 + 5, GameScr.yHP + 20 - 6 - 40 + 10, mGraphics.HCENTER | mGraphics.VCENTER);
											SmallImage.drawSmallImage(g, 1087, GameScr.xHP + 20 - 7 + 5, GameScr.yHP + 20 - 6 - 40 - 7 + 10, 0, 0);
										}
									}
								}
							}
						}
					}
				}
				bool flag23 = GameScr.isHaveSelectSkill;
				if (flag23)
				{
					Skill[] array = Main.isPC ? GameScr.keySkill : ((!GameCanvas.isTouch) ? GameScr.keySkill : GameScr.onScreenSkill);
					bool flag24 = mScreen.keyTouch == 10;
					if (flag24)
					{
					}
					bool flag25 = !GameCanvas.isTouch;
					if (flag25)
					{
						g.setColor(11152401);
						g.fillRect(GameScr.xSkill + GameScr.xHP + 2, GameScr.yHP - 10 + 6, 20, 10);
						mFont.tahoma_7_white.drawString(g, "*", GameScr.xSkill + GameScr.xHP + 12, GameScr.yHP - 8 + 6, mFont.CENTER);
					}
					int num5 = Main.isPC ? array.Length : ((!GameCanvas.isTouch) ? array.Length : this.nSkill);
					for (int i = 0; i < num5; i++)
					{
						bool isPC = Main.isPC;
						if (isPC)
						{
							string[] array3;
							if (!TField.isQwerty)
							{
								string[] array2 = new string[5];
								array2[0] = "";
								array2[1] = "";
								array2[2] = "";
								array2[3] = "";
								array3 = array2;
								array2[4] = "";
							}
							else
							{
								string[] array4 = new string[10];
								array4[0] = "";
								array4[1] = "";
								array4[2] = "";
								array4[3] = "";
								array4[4] = "";
								array4[5] = "";
								array4[6] = "";
								array4[7] = "";
								array4[8] = "";
								array3 = array4;
								array4[9] = "";
							}
							string[] array5 = array3;
							int num6 = -13;
							bool flag26 = num5 > 5 && i < 5;
							if (flag26)
							{
								num6 = 27;
							}
							mFont.tahoma_7b_dark.drawString(g, array5[i], GameScr.xSkill + GameScr.xS[i] + 14, GameScr.yS[i] + num6, mFont.CENTER);
							mFont.tahoma_7b_white.drawString(g, array5[i], GameScr.xSkill + GameScr.xS[i] + 14, GameScr.yS[i] + num6 + 1, mFont.CENTER);
						}
						else
						{
							bool flag27 = !GameCanvas.isTouch;
							if (flag27)
							{
								string[] array7;
								if (!TField.isQwerty)
								{
									string[] array6 = new string[5];
									array6[0] = "7";
									array6[1] = "8";
									array6[2] = "9";
									array6[3] = "1";
									array7 = array6;
									array6[4] = "3";
								}
								else
								{
									string[] array8 = new string[5];
									array8[0] = "Q";
									array8[1] = "W";
									array8[2] = "E";
									array8[3] = "R";
									array7 = array8;
									array8[4] = "T";
								}
								string[] array9 = array7;
								g.setColor(11152401);
								g.fillRect(GameScr.xSkill + GameScr.xS[i] + 2, GameScr.yS[i] - 10 + 8, 20, 10);
								mFont.tahoma_7_white.drawString(g, array9[i], GameScr.xSkill + GameScr.xS[i] + 12, GameScr.yS[i] - 10 + 6, mFont.CENTER);
							}
						}
						Skill skill = array[i];
						bool flag28 = skill != global::Char.myCharz().myskill;
						if (flag28)
						{
							g.drawImage(GameScr.imgSkill, GameScr.xSkill + GameScr.xS[i] - 1, GameScr.yS[i] - 1, 0);
						}
						bool flag29 = skill == null;
						if (!flag29)
						{
							bool flag30 = skill == global::Char.myCharz().myskill;
							if (flag30)
							{
								g.drawImage(GameScr.imgSkill2, GameScr.xSkill + GameScr.xS[i] - 1, GameScr.yS[i] - 1, 0);
								bool flag31 = GameCanvas.isTouch && !Main.isPC;
								if (flag31)
								{
									g.drawRegion(Mob.imgHP, 0, 12, 9, 6, 0, GameScr.xSkill + GameScr.xS[i] + 8, GameScr.yS[i] - 7, 0);
								}
							}
							skill.paint(GameScr.xSkill + GameScr.xS[i] + 13, GameScr.yS[i] + 13, g);
							bool flag32 = (i == this.selectedIndexSkill && !this.isPaintUI() && GameCanvas.gameTick % 10 > 5) || i == this.keyTouchSkill;
							if (flag32)
							{
								g.drawImage(ItemMap.imageFlare, GameScr.xSkill + GameScr.xS[i] + 13, GameScr.yS[i] + 14, 3);
							}
							long num7 = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							bool flag33 = skill.template.id == 7;
							if (flag33)
							{
								GameScr.timehoichieubuff = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							}
							bool flag34 = skill.template.id == 19;
							if (flag34)
							{
								GameScr.timehoikhien = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							}
							bool flag35 = skill.template.id == 8;
							if (flag35)
							{
								GameScr.timehoiskill3 = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							}
							bool flag36 = skill.template.id == 1;
							if (flag36)
							{
								GameScr.ccc1 = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							}
							bool flag37 = skill.template.id == 3;
							if (flag37)
							{
								GameScr.ccc3 = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							}
							bool flag38 = skill.template.id == 5;
							if (flag38)
							{
								GameScr.ccc5 = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							}
							bool flag39 = skill.template.id == 14;
							if (flag39)
							{
								GameScr.timehoibom = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							}
							bool flag40 = skill.template.id == 22;
							if (flag40)
							{
								GameScr.timehoithoimien = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							}
							bool flag41 = skill.template.id == 24 || skill.template.id == 25 || skill.template.id == 26;
							if (flag41)
							{
								GameScr.timehoiskill9 = (long)skill.coolDown - mSystem.currentTimeMillis() + skill.lastTimeUseThisSkill;
							}
							mFont.tahoma_7b_white.drawString(g, (num7 > 0L) ? string.Concat(num7 / 1000L) : string.Empty, GameScr.xSkill + GameScr.xS[i] + 14, GameScr.yS[i] + 8, mFont.CENTER, mFont.tahoma_7b_red);
						}
					}
				}
				this.paintGamePad(g);
			}
		}
	}

	// Token: 0x060004C4 RID: 1220 RVA: 0x0005D4AC File Offset: 0x0005B6AC
	public void paintOpen(mGraphics g)
	{
		bool flag = this.isstarOpen;
		if (flag)
		{
			g.translate(-g.getTranslateX(), -g.getTranslateY());
			g.fillRect(0, 0, GameCanvas.w, this.moveUp);
			g.setColor(10275899);
			g.fillRect(0, this.moveUp - 1, GameCanvas.w, 1);
			g.fillRect(0, this.moveDow + 1, GameCanvas.w, 1);
		}
	}

	// Token: 0x060004C5 RID: 1221 RVA: 0x0005D528 File Offset: 0x0005B728
	public static void startFlyText(string flyString, int x, int y, int dx, int dy, int color)
	{
		int num = -1;
		for (int i = 0; i < 5; i++)
		{
			bool flag = GameScr.flyTextState[i] == -1;
			if (flag)
			{
				num = i;
				break;
			}
		}
		bool flag2 = num == -1;
		if (!flag2)
		{
			GameScr.flyTextColor[num] = color;
			GameScr.flyTextString[num] = flyString;
			GameScr.flyTextX[num] = x;
			GameScr.flyTextY[num] = y;
			GameScr.flyTextDx[num] = dx;
			GameScr.flyTextDy[num] = ((dy >= 0) ? 5 : -5);
			GameScr.flyTextState[num] = 0;
			GameScr.flyTime[num] = 0;
			GameScr.flyTextYTo[num] = 10;
			for (int j = 0; j < 5; j++)
			{
				bool flag3 = GameScr.flyTextState[j] != -1 && num != j && GameScr.flyTextDy[num] < 0 && Res.abs(GameScr.flyTextX[num] - GameScr.flyTextX[j]) <= 20 && GameScr.flyTextYTo[num] == GameScr.flyTextYTo[j];
				if (flag3)
				{
					GameScr.flyTextYTo[num] += 10;
				}
			}
		}
	}

	// Token: 0x060004C6 RID: 1222 RVA: 0x0005D638 File Offset: 0x0005B838
	public static void updateFlyText()
	{
		for (int i = 0; i < 5; i++)
		{
			bool flag = GameScr.flyTextState[i] == -1;
			if (!flag)
			{
				bool flag2 = GameScr.flyTextState[i] > GameScr.flyTextYTo[i];
				if (flag2)
				{
					GameScr.flyTime[i]++;
					bool flag3 = GameScr.flyTime[i] == 25;
					if (flag3)
					{
						GameScr.flyTime[i] = 0;
						GameScr.flyTextState[i] = -1;
						GameScr.flyTextYTo[i] = 0;
						GameScr.flyTextDx[i] = 0;
						GameScr.flyTextX[i] = 0;
					}
				}
				else
				{
					GameScr.flyTextState[i] += Res.abs(GameScr.flyTextDy[i]);
					GameScr.flyTextX[i] += GameScr.flyTextDx[i];
					GameScr.flyTextY[i] += GameScr.flyTextDy[i];
				}
			}
		}
	}

	// Token: 0x060004C7 RID: 1223 RVA: 0x0005D720 File Offset: 0x0005B920
	public static void loadSplash()
	{
		bool flag = GameScr.imgSplash == null;
		if (flag)
		{
			GameScr.imgSplash = new Image[3];
			for (int i = 0; i < 3; i++)
			{
				GameScr.imgSplash[i] = GameCanvas.loadImage("/e/sp" + i.ToString() + ".png");
			}
		}
		GameScr.splashX = new int[2];
		GameScr.splashY = new int[2];
		GameScr.splashState = new int[2];
		GameScr.splashF = new int[2];
		GameScr.splashDir = new int[2];
		GameScr.splashState[0] = (GameScr.splashState[1] = -1);
	}

	// Token: 0x060004C8 RID: 1224 RVA: 0x0005D7C4 File Offset: 0x0005B9C4
	public static bool startSplash(int x, int y, int dir)
	{
		int num = (GameScr.splashState[0] != -1) ? 1 : 0;
		bool flag = GameScr.splashState[num] != -1;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			GameScr.splashState[num] = 0;
			GameScr.splashDir[num] = dir;
			GameScr.splashX[num] = x;
			GameScr.splashY[num] = y;
			result = true;
		}
		return result;
	}

	// Token: 0x060004C9 RID: 1225 RVA: 0x0005D81C File Offset: 0x0005BA1C
	public static void updateSplash()
	{
		for (int i = 0; i < 2; i++)
		{
			bool flag = GameScr.splashState[i] != -1;
			if (flag)
			{
				GameScr.splashState[i]++;
				GameScr.splashX[i] += GameScr.splashDir[i] << 2;
				GameScr.splashY[i]--;
				bool flag2 = GameScr.splashState[i] >= 6;
				if (flag2)
				{
					GameScr.splashState[i] = -1;
				}
				else
				{
					GameScr.splashF[i] = (GameScr.splashState[i] >> 1) % 3;
				}
			}
		}
	}

	// Token: 0x060004CA RID: 1226 RVA: 0x0005D8C0 File Offset: 0x0005BAC0
	public static void paintSplash(mGraphics g)
	{
		for (int i = 0; i < 2; i++)
		{
			bool flag = GameScr.splashState[i] != -1;
			if (flag)
			{
				bool flag2 = GameScr.splashDir[i] == 1;
				if (flag2)
				{
					g.drawImage(GameScr.imgSplash[GameScr.splashF[i]], GameScr.splashX[i], GameScr.splashY[i], 3);
				}
				else
				{
					g.drawRegion(GameScr.imgSplash[GameScr.splashF[i]], 0, 0, mGraphics.getImageWidth(GameScr.imgSplash[GameScr.splashF[i]]), mGraphics.getImageHeight(GameScr.imgSplash[GameScr.splashF[i]]), 2, GameScr.splashX[i], GameScr.splashY[i], 3);
				}
			}
		}
	}

	// Token: 0x060004CB RID: 1227 RVA: 0x0005D97D File Offset: 0x0005BB7D
	private void loadInforBar()
	{
		this.imgScrW = 84;
		GameScr.hpBarW = 66L;
		GameScr.mpBarW = 59;
		GameScr.hpBarX = 52;
		GameScr.hpBarY = 10;
		GameScr.spBarW = 61;
		GameScr.expBarW = GameScr.gW - 61;
	}

	// Token: 0x060004CC RID: 1228 RVA: 0x0005D9BC File Offset: 0x0005BBBC
	public void updateSS()
	{
		bool flag = GameScr.indexMenu != -1;
		if (flag)
		{
			bool flag2 = GameScr.cmySK != GameScr.cmtoYSK;
			if (flag2)
			{
				GameScr.cmvySK = GameScr.cmtoYSK - GameScr.cmySK << 2;
				GameScr.cmdySK += GameScr.cmvySK;
				GameScr.cmySK += GameScr.cmdySK >> 4;
				GameScr.cmdySK &= 15;
			}
			bool flag3 = global::Math.abs(GameScr.cmtoYSK - GameScr.cmySK) < 15 && GameScr.cmySK < 0;
			if (flag3)
			{
				GameScr.cmtoYSK = 0;
			}
			bool flag4 = global::Math.abs(GameScr.cmtoYSK - GameScr.cmySK) < 15 && GameScr.cmySK > GameScr.cmyLimSK;
			if (flag4)
			{
				GameScr.cmtoYSK = GameScr.cmyLimSK;
			}
		}
	}

	// Token: 0x060004CD RID: 1229 RVA: 0x0005DA94 File Offset: 0x0005BC94
	public void updateKeyAlert()
	{
		bool flag = !GameScr.isPaintAlert || GameCanvas.currentDialog != null;
		if (!flag)
		{
			bool flag2 = false;
			bool flag3 = GameCanvas.keyPressed[Key.NUM8];
			if (flag3)
			{
				GameScr.indexRow++;
				bool flag4 = GameScr.indexRow >= this.texts.size();
				if (flag4)
				{
					GameScr.indexRow = 0;
				}
				flag2 = true;
			}
			else
			{
				bool flag5 = GameCanvas.keyPressed[Key.NUM2];
				if (flag5)
				{
					GameScr.indexRow--;
					bool flag6 = GameScr.indexRow < 0;
					if (flag6)
					{
						GameScr.indexRow = this.texts.size() - 1;
					}
					flag2 = true;
				}
			}
			bool flag7 = flag2;
			if (flag7)
			{
				GameScr.scrMain.moveTo(GameScr.indexRow * GameScr.scrMain.ITEM_SIZE);
				GameCanvas.clearKeyHold();
				GameCanvas.clearKeyPressed();
			}
			bool isTouch = GameCanvas.isTouch;
			if (isTouch)
			{
				ScrollResult scrollResult = GameScr.scrMain.updateKey();
				bool flag8 = scrollResult.isDowning || scrollResult.isFinish;
				if (flag8)
				{
					GameScr.indexRow = scrollResult.selected;
					flag2 = true;
				}
			}
			bool flag9 = !flag2 || GameScr.indexRow < 0 || GameScr.indexRow >= this.texts.size();
			if (!flag9)
			{
				string text = (string)this.texts.elementAt(GameScr.indexRow);
				this.fnick = null;
				this.alertURL = null;
				this.center = null;
				ChatTextField.gI().center = null;
				int num;
				bool flag10 = (num = text.IndexOf("http://")) >= 0;
				if (flag10)
				{
					Cout.println("currentLine: " + text);
					this.alertURL = text.Substring(num);
					this.center = new Command(mResources.open_link, 12000);
					bool flag11 = !GameCanvas.isTouch;
					if (flag11)
					{
						ChatTextField.gI().center = new Command(mResources.open_link, null, 12000, null);
					}
				}
				else
				{
					bool flag12 = text.IndexOf("@") < 0;
					if (!flag12)
					{
						string text2 = text.Substring(2);
						text2 = text2.Trim();
						num = text2.IndexOf("@");
						string text3 = text2.Substring(num);
						int num2 = text3.IndexOf(" ");
						num2 = ((num2 > 0) ? (num2 + num) : (num + text3.Length));
						this.fnick = text2.Substring(num + 1, num2);
						bool flag13 = !this.fnick.Equals(string.Empty) && !this.fnick.Equals(global::Char.myCharz().cName);
						if (flag13)
						{
							this.center = new Command(mResources.SELECT, 12009, this.fnick);
							bool flag14 = !GameCanvas.isTouch;
							if (flag14)
							{
								ChatTextField.gI().center = new Command(mResources.SELECT, null, 12009, this.fnick);
							}
						}
						else
						{
							this.fnick = null;
							this.center = null;
						}
					}
				}
			}
		}
	}

	// Token: 0x060004CE RID: 1230 RVA: 0x0005DDB4 File Offset: 0x0005BFB4
	public bool isPaintPopup()
	{
		return GameScr.isPaintItemInfo || GameScr.isPaintInfoMe || GameScr.isPaintStore || GameScr.isPaintWeapon || GameScr.isPaintNonNam || GameScr.isPaintNonNu || GameScr.isPaintAoNam || GameScr.isPaintAoNu || GameScr.isPaintGangTayNam || GameScr.isPaintGangTayNu || GameScr.isPaintQuanNam || GameScr.isPaintQuanNu || GameScr.isPaintGiayNam || GameScr.isPaintGiayNu || GameScr.isPaintLien || GameScr.isPaintNhan || GameScr.isPaintNgocBoi || GameScr.isPaintPhu || GameScr.isPaintStack || GameScr.isPaintStackLock || GameScr.isPaintGrocery || GameScr.isPaintGroceryLock || GameScr.isPaintUpGrade || GameScr.isPaintConvert || GameScr.isPaintSplit || GameScr.isPaintUpPearl || GameScr.isPaintBox || GameScr.isPaintTrade || GameScr.isPaintAlert || GameScr.isPaintZone || GameScr.isPaintTeam || GameScr.isPaintClan || GameScr.isPaintFindTeam || GameScr.isPaintTask || GameScr.isPaintFriend || GameScr.isPaintEnemies || GameScr.isPaintCharInMap || GameScr.isPaintMessage;
	}

	// Token: 0x060004CF RID: 1231 RVA: 0x0005DF14 File Offset: 0x0005C114
	public bool isNotPaintTouchControl()
	{
		bool flag = !GameCanvas.isTouchControl && GameCanvas.currentScreen == GameScr.gI();
		bool result;
		if (flag)
		{
			result = true;
		}
		else
		{
			bool flag2 = !GameCanvas.isTouch;
			if (flag2)
			{
				result = true;
			}
			else
			{
				bool isShow = ChatTextField.gI().isShow;
				if (isShow)
				{
					result = true;
				}
				else
				{
					bool isShow2 = InfoDlg.isShow;
					if (isShow2)
					{
						result = true;
					}
					else
					{
						bool flag3 = GameCanvas.currentDialog != null || ChatPopup.currChatPopup != null || GameCanvas.menu.showMenu || GameCanvas.panel.isShow || this.isPaintPopup();
						result = flag3;
					}
				}
			}
		}
		return result;
	}

	// Token: 0x060004D0 RID: 1232 RVA: 0x0005DFB4 File Offset: 0x0005C1B4
	public bool isPaintUI()
	{
		return GameScr.isPaintStore || GameScr.isPaintWeapon || GameScr.isPaintNonNam || GameScr.isPaintNonNu || GameScr.isPaintAoNam || GameScr.isPaintAoNu || GameScr.isPaintGangTayNam || GameScr.isPaintGangTayNu || GameScr.isPaintQuanNam || GameScr.isPaintQuanNu || GameScr.isPaintGiayNam || GameScr.isPaintGiayNu || GameScr.isPaintLien || GameScr.isPaintNhan || GameScr.isPaintNgocBoi || GameScr.isPaintPhu || GameScr.isPaintStack || GameScr.isPaintStackLock || GameScr.isPaintGrocery || GameScr.isPaintGroceryLock || GameScr.isPaintUpGrade || GameScr.isPaintConvert || GameScr.isPaintSplit || GameScr.isPaintUpPearl || GameScr.isPaintBox || GameScr.isPaintTrade;
	}

	// Token: 0x060004D1 RID: 1233 RVA: 0x0005E09C File Offset: 0x0005C29C
	public bool isOpenUI()
	{
		return GameScr.isPaintItemInfo || GameScr.isPaintInfoMe || GameScr.isPaintStore || GameScr.isPaintNonNam || GameScr.isPaintNonNu || GameScr.isPaintAoNam || GameScr.isPaintAoNu || GameScr.isPaintGangTayNam || GameScr.isPaintGangTayNu || GameScr.isPaintQuanNam || GameScr.isPaintQuanNu || GameScr.isPaintGiayNam || GameScr.isPaintGiayNu || GameScr.isPaintLien || GameScr.isPaintNhan || GameScr.isPaintNgocBoi || GameScr.isPaintPhu || GameScr.isPaintWeapon || GameScr.isPaintStack || GameScr.isPaintStackLock || GameScr.isPaintGrocery || GameScr.isPaintGroceryLock || GameScr.isPaintUpGrade || GameScr.isPaintConvert || GameScr.isPaintUpPearl || GameScr.isPaintBox || GameScr.isPaintSplit || GameScr.isPaintTrade;
	}

	// Token: 0x060004D2 RID: 1234 RVA: 0x0005E198 File Offset: 0x0005C398
	public static void setPopupSize(int w, int h)
	{
		bool flag = GameCanvas.w == 128 || GameCanvas.h <= 208;
		if (flag)
		{
			w = 126;
			h = 160;
		}
		GameScr.indexTitle = 0;
		GameScr.popupW = w;
		GameScr.popupH = h;
		GameScr.popupX = GameScr.gW2 - w / 2;
		GameScr.popupY = GameScr.gH2 - h / 2;
		bool flag2 = GameCanvas.isTouch && !GameScr.isPaintZone && !GameScr.isPaintTeam && !GameScr.isPaintClan && !GameScr.isPaintCharInMap && !GameScr.isPaintFindTeam && !GameScr.isPaintFriend && !GameScr.isPaintEnemies && !GameScr.isPaintTask && !GameScr.isPaintMessage;
		if (flag2)
		{
			bool flag3 = GameCanvas.h <= 240;
			if (flag3)
			{
				GameScr.popupY -= 10;
			}
			bool flag4 = GameCanvas.isTouch && !GameCanvas.isTouchControlSmallScreen && GameCanvas.currentScreen is GameScr;
			if (flag4)
			{
				GameScr.popupW = 310;
				GameScr.popupX = GameScr.gW / 2 - GameScr.popupW / 2;
				bool flag5 = GameScr.isPaintInfoMe && GameScr.indexMenu > 0;
				if (flag5)
				{
					GameScr.popupW = w;
					GameScr.popupX = GameScr.gW2 - w / 2;
				}
			}
		}
		bool flag6 = GameScr.popupY < -10;
		if (flag6)
		{
			GameScr.popupY = -10;
		}
		bool flag7 = GameCanvas.h > 208 && GameScr.popupY < 0;
		if (flag7)
		{
			GameScr.popupY = 0;
		}
		bool flag8 = GameCanvas.h == 208 && GameScr.popupY < 10;
		if (flag8)
		{
			GameScr.popupY = 10;
		}
	}

	// Token: 0x060004D3 RID: 1235 RVA: 0x0005E34C File Offset: 0x0005C54C
	public static void loadImg()
	{
		TileMap.loadTileImage();
	}

	// Token: 0x060004D4 RID: 1236 RVA: 0x0005E358 File Offset: 0x0005C558
	public void paintTitle(mGraphics g, string title, bool arrow)
	{
		int num = GameScr.gW / 2;
		g.setColor(Paint.COLORDARK);
		g.fillRoundRect(num - mFont.tahoma_8b.getWidth(title) / 2 - 12, GameScr.popupY + 4, mFont.tahoma_8b.getWidth(title) + 22, 24, 6, 6);
		bool flag = (GameScr.indexTitle == 0 || GameCanvas.isTouch) && arrow;
		if (flag)
		{
			SmallImage.drawSmallImage(g, 989, num - mFont.tahoma_8b.getWidth(title) / 2 - 15 - 7 - ((GameCanvas.gameTick % 8 <= 3) ? 2 : 0), GameScr.popupY + 16, 2, StaticObj.VCENTER_HCENTER);
			SmallImage.drawSmallImage(g, 989, num + mFont.tahoma_8b.getWidth(title) / 2 + 15 + 5 + ((GameCanvas.gameTick % 8 <= 3) ? 2 : 0), GameScr.popupY + 16, 0, StaticObj.VCENTER_HCENTER);
		}
		bool flag2 = GameScr.indexTitle == 0;
		if (flag2)
		{
			g.setColor(Paint.COLORFOCUS);
		}
		else
		{
			g.setColor(Paint.COLORBORDER);
		}
		g.drawRoundRect(num - mFont.tahoma_8b.getWidth(title) / 2 - 12, GameScr.popupY + 4, mFont.tahoma_8b.getWidth(title) + 22, 24, 6, 6);
		mFont.tahoma_8b.drawString(g, title, num, GameScr.popupY + 9, 2);
	}

	// Token: 0x060004D5 RID: 1237 RVA: 0x0005E4B4 File Offset: 0x0005C6B4
	public static int getTaskMapId()
	{
		bool flag = global::Char.myCharz().taskMaint == null;
		int result;
		if (flag)
		{
			result = -1;
		}
		else
		{
			result = GameScr.mapTasks[global::Char.myCharz().taskMaint.index];
		}
		return result;
	}

	// Token: 0x060004D6 RID: 1238 RVA: 0x0005E4F4 File Offset: 0x0005C6F4
	public static sbyte getTaskNpcId()
	{
		sbyte result = 0;
		bool flag = global::Char.myCharz().taskMaint == null;
		if (flag)
		{
			result = -1;
		}
		else
		{
			bool flag2 = global::Char.myCharz().taskMaint.index <= GameScr.tasks.Length - 1;
			if (flag2)
			{
				result = (sbyte)GameScr.tasks[global::Char.myCharz().taskMaint.index];
			}
		}
		return result;
	}

	// Token: 0x060004D7 RID: 1239 RVA: 0x0005E55A File Offset: 0x0005C75A
	public void refreshTeam()
	{
	}

	// Token: 0x060004D8 RID: 1240 RVA: 0x0005E560 File Offset: 0x0005C760
	public void onChatFromMe(string text, string to)
	{
		Res.outz("CHAT");
		bool flag = !GameScr.isPaintMessage || GameCanvas.isTouch;
		if (flag)
		{
			ChatTextField.gI().isShow = false;
		}
		bool flag2 = to.Equals(mResources.chat_player);
		if (flag2)
		{
			bool flag3 = GameScr.info2.playerID != global::Char.myCharz().charID;
			if (flag3)
			{
				Service.gI().chatPlayer(text, GameScr.info2.playerID);
			}
		}
		else
		{
			bool flag4 = !text.Equals(string.Empty);
			if (flag4)
			{
				Service.gI().chat(text);
			}
		}
	}

	// Token: 0x060004D9 RID: 1241 RVA: 0x0005E604 File Offset: 0x0005C804
	public void onCancelChat()
	{
		bool flag = GameScr.isPaintMessage;
		if (flag)
		{
			GameScr.isPaintMessage = false;
			ChatTextField.gI().center = null;
		}
	}

	// Token: 0x060004DA RID: 1242 RVA: 0x0005E630 File Offset: 0x0005C830
	public void openWeb(string strLeft, string strRight, string url, string title, string str)
	{
		GameScr.isPaintAlert = true;
		this.isLockKey = true;
		GameScr.indexRow = 0;
		GameScr.setPopupSize(175, 200);
		this.textsTitle = title;
		this.texts = mFont.tahoma_7.splitFontVector(str, GameScr.popupW - 30);
		this.center = null;
		this.left = new Command(strLeft, 11068, url);
		this.right = new Command(strRight, 11069);
	}

	// Token: 0x060004DB RID: 1243 RVA: 0x0005E6B0 File Offset: 0x0005C8B0
	public void sendSms(string strLeft, string strRight, short port, string syntax, string title, string str)
	{
		GameScr.isPaintAlert = true;
		this.isLockKey = true;
		GameScr.indexRow = 0;
		GameScr.setPopupSize(175, 200);
		this.textsTitle = title;
		this.texts = mFont.tahoma_7.splitFontVector(str, GameScr.popupW - 30);
		this.center = null;
		MyVector myVector = new MyVector();
		myVector.addElement(string.Empty + port.ToString());
		myVector.addElement(syntax);
		this.left = new Command(strLeft, 11074);
		this.right = new Command(strRight, 11075);
	}

	// Token: 0x060004DC RID: 1244 RVA: 0x0005E753 File Offset: 0x0005C953
	public void actMenu()
	{
		GameCanvas.panel.setTypeMain();
		GameCanvas.panel.show();
	}

	// Token: 0x060004DD RID: 1245 RVA: 0x0005E76C File Offset: 0x0005C96C
	public void openUIZone(Message message)
	{
		InfoDlg.hide();
		try
		{
			this.zones = new int[(int)message.reader().readByte()];
			this.pts = new int[this.zones.Length];
			this.numPlayer = new int[this.zones.Length];
			this.maxPlayer = new int[this.zones.Length];
			this.rank1 = new int[this.zones.Length];
			this.rankName1 = new string[this.zones.Length];
			this.rank2 = new int[this.zones.Length];
			this.rankName2 = new string[this.zones.Length];
			for (int i = 0; i < this.zones.Length; i++)
			{
				this.zones[i] = (int)message.reader().readByte();
				this.pts[i] = (int)message.reader().readByte();
				this.numPlayer[i] = (int)message.reader().readByte();
				this.maxPlayer[i] = (int)message.reader().readByte();
				sbyte b = message.reader().readByte();
				bool flag = b == 1;
				if (flag)
				{
					this.rankName1[i] = message.reader().readUTF();
					this.rank1[i] = message.reader().readInt();
					this.rankName2[i] = message.reader().readUTF();
					this.rank2[i] = message.reader().readInt();
				}
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("Loi ham OPEN UIZONE " + ex.ToString());
		}
	}

	// Token: 0x060004DE RID: 1246 RVA: 0x0005E928 File Offset: 0x0005CB28
	public void openUIZoneDemo(Message message)
	{
		InfoDlg.hide();
		try
		{
			this.zones = new int[(int)message.reader().readByte()];
			this.pts = new int[this.zones.Length];
			this.numPlayer = new int[this.zones.Length];
			this.maxPlayer = new int[this.zones.Length];
			this.rank1 = new int[this.zones.Length];
			this.rankName1 = new string[this.zones.Length];
			this.rank2 = new int[this.zones.Length];
			this.rankName2 = new string[this.zones.Length];
			for (int i = 0; i < this.zones.Length; i++)
			{
				this.zones[i] = (int)message.reader().readByte();
				this.pts[i] = (int)message.reader().readByte();
				this.numPlayer[i] = (int)message.reader().readByte();
				this.maxPlayer[i] = (int)message.reader().readByte();
				sbyte b = message.reader().readByte();
				bool flag = b == 1;
				if (flag)
				{
					this.rankName1[i] = message.reader().readUTF();
					this.rank1[i] = message.reader().readInt();
					this.rankName2[i] = message.reader().readUTF();
					this.rank2[i] = message.reader().readInt();
				}
			}
		}
		catch (Exception ex)
		{
			Cout.LogError("Loi ham OPEN UIZONE " + ex.ToString());
		}
		GameCanvas.panel.setTypeZone();
		GameCanvas.panel.show();
	}

	// Token: 0x060004DF RID: 1247 RVA: 0x0005EAF8 File Offset: 0x0005CCF8
	public void showViewInfo()
	{
		GameScr.indexMenu = 3;
		GameScr.isPaintInfoMe = true;
		GameScr.setPopupSize(175, 200);
	}

	// Token: 0x060004E0 RID: 1248 RVA: 0x0005EB18 File Offset: 0x0005CD18
	private void actDead()
	{
		MyVector myVector = new MyVector();
		myVector.addElement(new Command(mResources.DIES[1], 110381));
		myVector.addElement(new Command(mResources.DIES[2], 110382));
		myVector.addElement(new Command(mResources.DIES[3], 110383));
		GameCanvas.menu.startAt(myVector, 3);
	}

	// Token: 0x060004E1 RID: 1249 RVA: 0x0005EB81 File Offset: 0x0005CD81
	public void startYesNoPopUp(string info, Command cmdYes, Command cmdNo)
	{
		this.popUpYesNo = new PopUpYesNo();
		this.popUpYesNo.setPopUp(info, cmdYes, cmdNo);
	}

	// Token: 0x060004E2 RID: 1250 RVA: 0x0005EBA0 File Offset: 0x0005CDA0
	public void player_vs_player(int playerId, int xu, string info, sbyte typePK)
	{
		global::Char @char = GameScr.findCharInMap(playerId);
		bool flag = @char != null;
		if (flag)
		{
			bool flag2 = typePK == 3;
			if (flag2)
			{
				this.startYesNoPopUp(info, new Command(mResources.OK, 2000, @char), new Command(mResources.CLOSE, 2009, @char));
			}
			bool flag3 = typePK == 4;
			if (flag3)
			{
				this.startYesNoPopUp(info, new Command(mResources.OK, 2005, @char), new Command(mResources.CLOSE, 2009, @char));
			}
		}
	}

	// Token: 0x060004E3 RID: 1251 RVA: 0x0005EC28 File Offset: 0x0005CE28
	public void giaodich(int playerID)
	{
		global::Char @char = GameScr.findCharInMap(playerID);
		bool flag = @char != null;
		if (flag)
		{
			this.startYesNoPopUp(@char.cName + mResources.want_to_trade, new Command(mResources.YES, 11114, @char), new Command(mResources.NO, 2009, @char));
		}
	}

	// Token: 0x060004E4 RID: 1252 RVA: 0x0005EC80 File Offset: 0x0005CE80
	public void getFlagImage(int charID, sbyte cflag)
	{
		bool flag = GameScr.vFlag.size() == 0;
		if (flag)
		{
			Service.gI().getFlag(2, cflag);
			Res.outz("getFlag1");
		}
		else
		{
			bool flag2 = charID == global::Char.myCharz().charID;
			if (flag2)
			{
				Res.outz("my cflag: isme");
				bool flag3 = global::Char.myCharz().isGetFlagImage(cflag);
				if (flag3)
				{
					Res.outz("my cflag: true");
					for (int i = 0; i < GameScr.vFlag.size(); i++)
					{
						PKFlag pkflag = (PKFlag)GameScr.vFlag.elementAt(i);
						bool flag4 = pkflag != null && pkflag.cflag == cflag;
						if (flag4)
						{
							Res.outz("my cflag: cflag==");
							global::Char.myCharz().flagImage = pkflag.IDimageFlag;
						}
					}
				}
				else
				{
					bool flag5 = !global::Char.myCharz().isGetFlagImage(cflag);
					if (flag5)
					{
						Res.outz("my cflag: false");
						Service.gI().getFlag(2, cflag);
					}
				}
			}
			else
			{
				Res.outz("my cflag: not me");
				bool flag6 = GameScr.findCharInMap(charID) == null;
				if (!flag6)
				{
					bool flag7 = GameScr.findCharInMap(charID).isGetFlagImage(cflag);
					if (flag7)
					{
						Res.outz("my cflag: true");
						for (int j = 0; j < GameScr.vFlag.size(); j++)
						{
							PKFlag pkflag2 = (PKFlag)GameScr.vFlag.elementAt(j);
							bool flag8 = pkflag2 != null && pkflag2.cflag == cflag;
							if (flag8)
							{
								Res.outz("my cflag: cflag==");
								GameScr.findCharInMap(charID).flagImage = pkflag2.IDimageFlag;
							}
						}
					}
					else
					{
						bool flag9 = !GameScr.findCharInMap(charID).isGetFlagImage(cflag);
						if (flag9)
						{
							Res.outz("my cflag: false");
							Service.gI().getFlag(2, cflag);
						}
					}
				}
			}
		}
	}

	// Token: 0x060004E5 RID: 1253 RVA: 0x0005EE6C File Offset: 0x0005D06C
	public void actionPerform(int idAction, object p)
	{
		Cout.println("PERFORM WITH ID = " + idAction.ToString());
		bool flag = idAction == 999901;
		if (flag)
		{
			new Thread(new ThreadStart(AddSetDo.MacSet1)).Start();
		}
		bool flag2 = idAction == 999902;
		if (flag2)
		{
			new Thread(new ThreadStart(AddSetDo.MacSet2)).Start();
		}
		int num = idAction;
		int num2 = num;
		if (num2 <= 11059)
		{
			if (num2 <= 8002)
			{
				if (num2 <= 2)
				{
					if (num2 != 1)
					{
						if (num2 == 2)
						{
							GameCanvas.menu.showMenu = false;
						}
					}
					else
					{
						GameCanvas.endDlg();
					}
				}
				else
				{
					switch (num2)
					{
					case 2000:
					{
						this.popUpYesNo = null;
						GameCanvas.endDlg();
						bool flag3 = (global::Char)p == null;
						if (flag3)
						{
							Service.gI().player_vs_player(1, 3, -1);
						}
						else
						{
							Service.gI().player_vs_player(1, 3, ((global::Char)p).charID);
							Service.gI().charMove();
						}
						break;
					}
					case 2001:
						GameCanvas.endDlg();
						break;
					case 2002:
					case 2008:
						break;
					case 2003:
						GameCanvas.endDlg();
						InfoDlg.showWait();
						Service.gI().player_vs_player(0, 3, global::Char.myCharz().charFocus.charID);
						break;
					case 2004:
						GameCanvas.endDlg();
						Service.gI().player_vs_player(0, 4, global::Char.myCharz().charFocus.charID);
						break;
					case 2005:
					{
						GameCanvas.endDlg();
						this.popUpYesNo = null;
						bool flag4 = (global::Char)p == null;
						if (flag4)
						{
							Service.gI().player_vs_player(1, 4, -1);
						}
						else
						{
							Service.gI().player_vs_player(1, 4, ((global::Char)p).charID);
						}
						break;
					}
					case 2006:
						GameCanvas.endDlg();
						Service.gI().player_vs_player(2, 4, global::Char.myCharz().charFocus.charID);
						break;
					case 2007:
						GameCanvas.endDlg();
						GameMidlet.instance.exit();
						break;
					case 2009:
						this.popUpYesNo = null;
						break;
					default:
						if (num2 == 8002)
						{
							this.doFire(false, true);
							GameCanvas.clearKeyHold();
							GameCanvas.clearKeyPressed();
						}
						break;
					}
				}
			}
			else if (num2 <= 11038)
			{
				switch (num2)
				{
				case 11000:
					this.actMenu();
					break;
				case 11001:
					global::Char.myCharz().findNextFocusByKey();
					break;
				case 11002:
					GameCanvas.panel.hide();
					break;
				default:
					if (num2 == 11038)
					{
						this.actDead();
					}
					break;
				}
			}
			else if (num2 != 11057)
			{
				if (num2 == 11059)
				{
					Skill skill = GameScr.onScreenSkill[this.selectedIndexSkill];
					this.doUseSkill(skill, false);
					this.center = null;
				}
			}
			else
			{
				Effect2.vEffect2Outside.removeAllElements();
				Effect2.vEffect2.removeAllElements();
				Npc npc = (Npc)p;
				bool flag5 = npc.idItem == 0;
				if (flag5)
				{
					Service.gI().confirmMenu((short)npc.template.npcTemplateId, (sbyte)GameCanvas.menu.menuSelectedItem);
				}
				else
				{
					bool flag6 = GameCanvas.menu.menuSelectedItem == 0;
					if (flag6)
					{
						Service.gI().pickItem(npc.idItem);
					}
				}
			}
		}
		else if (num2 <= 110001)
		{
			if (num2 <= 11121)
			{
				if (num2 != 11067)
				{
					switch (num2)
					{
					case 11111:
					{
						bool flag7 = global::Char.myCharz().charFocus != null;
						if (flag7)
						{
							InfoDlg.showWait();
							bool flag8 = GameCanvas.panel.vPlayerMenu.size() <= 0;
							if (flag8)
							{
								this.playerMenu(global::Char.myCharz().charFocus);
							}
							GameCanvas.panel.setTypePlayerMenu(global::Char.myCharz().charFocus);
							GameCanvas.panel.show();
							Service.gI().getPlayerMenu(global::Char.myCharz().charFocus.charID);
							Service.gI().messagePlayerMenu(global::Char.myCharz().charFocus.charID);
						}
						break;
					}
					case 11112:
					{
						global::Char @char = (global::Char)p;
						Service.gI().friend(1, @char.charID);
						break;
					}
					case 11113:
					{
						global::Char char2 = (global::Char)p;
						bool flag9 = char2 != null;
						if (flag9)
						{
							Service.gI().giaodich(0, char2.charID, -1, -1);
						}
						break;
					}
					case 11114:
					{
						this.popUpYesNo = null;
						GameCanvas.endDlg();
						global::Char char3 = (global::Char)p;
						bool flag10 = char3 != null;
						if (flag10)
						{
							Service.gI().giaodich(1, char3.charID, -1, -1);
						}
						break;
					}
					case 11115:
					{
						bool flag11 = global::Char.myCharz().charFocus != null;
						if (flag11)
						{
							InfoDlg.showWait();
							Service.gI().playerMenuAction(global::Char.myCharz().charFocus.charID, (short)global::Char.myCharz().charFocus.menuSelect);
						}
						break;
					}
					case 11120:
					{
						object[] array = (object[])p;
						Skill skill2 = (Skill)array[0];
						int num3 = int.Parse((string)array[1]);
						for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
						{
							bool flag12 = GameScr.onScreenSkill[i] == skill2;
							if (flag12)
							{
								GameScr.onScreenSkill[i] = null;
							}
						}
						GameScr.onScreenSkill[num3] = skill2;
						this.saveonScreenSkillToRMS();
						break;
					}
					case 11121:
					{
						object[] array2 = (object[])p;
						Skill skill3 = (Skill)array2[0];
						int num4 = int.Parse((string)array2[1]);
						for (int j = 0; j < GameScr.keySkill.Length; j++)
						{
							bool flag13 = GameScr.keySkill[j] == skill3;
							if (flag13)
							{
								GameScr.keySkill[j] = null;
							}
						}
						GameScr.keySkill[num4] = skill3;
						this.saveKeySkillToRMS();
						break;
					}
					}
				}
				else
				{
					bool flag14 = TileMap.zoneID != GameScr.indexSelect;
					if (flag14)
					{
						Service.gI().requestChangeZone(GameScr.indexSelect, this.indexItemUse);
						InfoDlg.showWait();
					}
					else
					{
						GameScr.info1.addInfo(mResources.ZONE_HERE, 0);
					}
				}
			}
			else
			{
				switch (num2)
				{
				case 12000:
					Service.gI().getClan(1, -1, null);
					break;
				case 12001:
					GameCanvas.endDlg();
					break;
				case 12002:
				{
					GameCanvas.endDlg();
					ClanObject clanObject = (ClanObject)p;
					Service.gI().clanInvite(1, -1, clanObject.clanID, clanObject.code);
					this.popUpYesNo = null;
					break;
				}
				case 12003:
				{
					ClanObject clanObject2 = (ClanObject)p;
					GameCanvas.endDlg();
					Service.gI().clanInvite(2, -1, clanObject2.clanID, clanObject2.code);
					this.popUpYesNo = null;
					break;
				}
				case 12004:
				{
					Skill skill4 = (Skill)p;
					this.doUseSkill(skill4, true);
					global::Char.myCharz().saveLoadPreviousSkill();
					break;
				}
				case 12005:
				{
					bool flag15 = GameCanvas.serverScr == null;
					if (flag15)
					{
						GameCanvas.serverScr = new ServerScr();
					}
					GameCanvas.serverScr.switchToMe();
					GameCanvas.endDlg();
					break;
				}
				case 12006:
					GameMidlet.instance.exit();
					break;
				default:
					if (num2 == 110001)
					{
						GameCanvas.panel.setTypeMain();
						GameCanvas.panel.show();
					}
					break;
				}
			}
		}
		else if (num2 <= 110382)
		{
			if (num2 != 110004)
			{
				if (num2 == 110382)
				{
					Service.gI().returnTownFromDead();
				}
			}
			else
			{
				GameCanvas.menu.showMenu = false;
			}
		}
		else if (num2 != 110383)
		{
			if (num2 != 110391)
			{
				if (num2 == 888351)
				{
					Service.gI().petStatus(5);
					GameCanvas.endDlg();
				}
			}
			else
			{
				Service.gI().clanInvite(0, global::Char.myCharz().charFocus.charID, -1, -1);
			}
		}
		else
		{
			Service.gI().wakeUpFromDead();
		}
	}

	// Token: 0x060004E6 RID: 1254 RVA: 0x0005F6FC File Offset: 0x0005D8FC
	private static void setTouchBtn()
	{
		bool flag = GameScr.isAnalog != 0;
		if (flag)
		{
			GameScr.xTG = (GameScr.xF = GameCanvas.w - 45);
			bool isLargeGamePad = GameScr.gamePad.isLargeGamePad;
			if (isLargeGamePad)
			{
				GameScr.xSkill = GameScr.gamePad.wZone + 20;
				GameScr.wSkill = 35;
				GameScr.xHP = GameScr.xF - 45;
			}
			else
			{
				bool isMediumGamePad = GameScr.gamePad.isMediumGamePad;
				if (isMediumGamePad)
				{
					GameScr.xHP = GameScr.xF - 45;
				}
			}
			GameScr.yF = GameCanvas.h - 45;
			GameScr.yTG = GameScr.yF - 45;
		}
	}

	// Token: 0x060004E7 RID: 1255 RVA: 0x0005F7A0 File Offset: 0x0005D9A0
	private void updateGamePad()
	{
		bool flag = GameScr.isAnalog == 0 || global::Char.myCharz().statusMe == 14;
		if (!flag)
		{
			bool flag2 = GameCanvas.isPointerHoldIn(GameScr.xF, GameScr.yF, 40, 40);
			if (flag2)
			{
				mScreen.keyTouch = 5;
				bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
				if (isPointerJustRelease)
				{
					GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = true;
					GameCanvas.isPointerClick = (GameCanvas.isPointerJustDown = (GameCanvas.isPointerJustRelease = false));
				}
			}
			GameScr.gamePad.update();
			bool flag3 = GameCanvas.isPointerHoldIn(GameScr.xTG, GameScr.yTG, 34, 34);
			if (flag3)
			{
				mScreen.keyTouch = 13;
				GameCanvas.isPointerJustDown = false;
				this.isPointerDowning = false;
				bool flag4 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
				if (flag4)
				{
					global::Char.myCharz().findNextFocusByKey();
					GameCanvas.isPointerClick = (GameCanvas.isPointerJustDown = (GameCanvas.isPointerJustRelease = false));
				}
			}
		}
	}

	// Token: 0x060004E8 RID: 1256 RVA: 0x0005F88C File Offset: 0x0005DA8C
	private void paintGamePad(mGraphics g)
	{
		bool flag = GameScr.isAnalog != 0 && global::Char.myCharz().statusMe != 14;
		if (flag)
		{
			g.drawImage((mScreen.keyTouch != 5 && mScreen.keyMouse != 5) ? GameScr.imgFire0 : GameScr.imgFire1, GameScr.xF + 20, GameScr.yF + 20, mGraphics.HCENTER | mGraphics.VCENTER);
			GameScr.gamePad.paint(g);
			g.drawImage((mScreen.keyTouch != 13) ? GameScr.imgFocus : GameScr.imgFocus2, GameScr.xTG + 20, GameScr.yTG + 20, mGraphics.HCENTER | mGraphics.VCENTER);
		}
	}

	// Token: 0x060004E9 RID: 1257 RVA: 0x0005F940 File Offset: 0x0005DB40
	public void showWinNumber(string num, string finish)
	{
		this.winnumber = new int[num.Length];
		this.randomNumber = new int[num.Length];
		this.tMove = new int[num.Length];
		this.moveCount = new int[num.Length];
		this.delayMove = new int[num.Length];
		try
		{
			for (int i = 0; i < num.Length; i++)
			{
				this.winnumber[i] = (int)short.Parse(num[i].ToString());
				this.randomNumber[i] = Res.random(0, 11);
				this.tMove[i] = 1;
				this.delayMove[i] = 0;
			}
		}
		catch (Exception)
		{
		}
		this.tShow = 100;
		this.moveIndex = 0;
		this.strFinish = finish;
		GameScr.lastXS = (GameScr.currXS = mSystem.currentTimeMillis());
	}

	// Token: 0x060004EA RID: 1258 RVA: 0x0005FA38 File Offset: 0x0005DC38
	public void chatVip(string chatVip)
	{
		DovaBaoKhu.TbBoss = chatVip;
		bool flag = !this.startChat;
		if (flag)
		{
			this.currChatWidth = mFont.tahoma_7b_yellowSmall.getWidth(chatVip);
			this.xChatVip = GameCanvas.w;
			this.startChat = true;
		}
		bool flag2 = chatVip.StartsWith("!");
		if (flag2)
		{
			chatVip = chatVip.Substring(1, chatVip.Length);
			this.isFireWorks = true;
		}
		GameScr.vChatVip.addElement(chatVip);
	}

	// Token: 0x060004EB RID: 1259 RVA: 0x0005FAB1 File Offset: 0x0005DCB1
	public void clearChatVip()
	{
		GameScr.vChatVip.removeAllElements();
		this.xChatVip = GameCanvas.w;
		this.startChat = false;
	}

	// Token: 0x060004EC RID: 1260 RVA: 0x0005FAD4 File Offset: 0x0005DCD4
	public void paintChatVip(mGraphics g)
	{
		bool flag = GameScr.vChatVip.size() != 0 && GameScr.isPaintChatVip;
		if (flag)
		{
			g.setClip(0, GameCanvas.h - 13, GameCanvas.w, 15);
			g.fillRect(0, GameCanvas.h - 13, GameCanvas.w, 15, 0, 90);
			string st = (string)GameScr.vChatVip.elementAt(0);
			mFont.tahoma_7b_yellow.drawString(g, st, this.xChatVip, GameCanvas.h - 13, 0, mFont.tahoma_7b_dark);
		}
	}

	// Token: 0x060004ED RID: 1261 RVA: 0x0005FB60 File Offset: 0x0005DD60
	public void updateChatVip()
	{
		bool flag = !this.startChat;
		if (!flag)
		{
			this.xChatVip -= 2;
			bool flag2 = this.xChatVip < -this.currChatWidth;
			if (flag2)
			{
				this.xChatVip = GameCanvas.w;
				GameScr.vChatVip.removeElementAt(0);
				bool flag3 = GameScr.vChatVip.size() == 0;
				if (flag3)
				{
					this.isFireWorks = false;
					this.startChat = false;
				}
				else
				{
					this.currChatWidth = mFont.tahoma_7b_white.getWidth((string)GameScr.vChatVip.elementAt(0));
				}
			}
		}
	}

	// Token: 0x060004EE RID: 1262 RVA: 0x0005FBFD File Offset: 0x0005DDFD
	public void showYourNumber(string strNum)
	{
		this.yourNumber = strNum;
		this.strPaint = mFont.tahoma_7.splitFontArray(this.yourNumber, 500);
	}

	// Token: 0x060004EF RID: 1263 RVA: 0x0005FC22 File Offset: 0x0005DE22
	public static void checkRemoveImage()
	{
		ImgByName.checkDelHash(ImgByName.hashImagePath, 10, false);
	}

	// Token: 0x060004F0 RID: 1264 RVA: 0x0005FC34 File Offset: 0x0005DE34
	public static void StartServerPopUp(string strMsg)
	{
		GameCanvas.endDlg();
		int avatar = 1139;
		ChatPopup.addBigMessage(strMsg, 100000, new Npc(-1, 0, 0, 0, 0, 0)
		{
			avatar = avatar
		});
		ChatPopup.serverChatPopUp.cmdMsg1 = new Command(mResources.CLOSE, ChatPopup.serverChatPopUp, 1001, null);
		ChatPopup.serverChatPopUp.cmdMsg1.x = GameCanvas.w / 2 - 35;
		ChatPopup.serverChatPopUp.cmdMsg1.y = GameCanvas.h - 35;
	}

	// Token: 0x060004F1 RID: 1265 RVA: 0x0005FCC0 File Offset: 0x0005DEC0
	public static bool ispaintPhubangBar()
	{
		return TileMap.mapPhuBang() && GameScr.phuban_Info.type_PB == 0;
	}

	// Token: 0x060004F2 RID: 1266 RVA: 0x0005FCF4 File Offset: 0x0005DEF4
	public void paintPhuBanBar(mGraphics g, int x, int y, int w)
	{
		bool flag = GameScr.phuban_Info == null || GameScr.isPaintOther || GameScr.isPaintRada != 1 || GameCanvas.panel.isShow || !GameScr.ispaintPhubangBar();
		if (!flag)
		{
			bool flag2 = w < GameScr.fra_PVE_Bar_1.frameWidth + GameScr.fra_PVE_Bar_0.frameWidth * 4;
			if (flag2)
			{
				w = GameScr.fra_PVE_Bar_1.frameWidth + GameScr.fra_PVE_Bar_0.frameWidth * 4;
			}
			bool flag3 = x > GameCanvas.w - w / 2;
			if (flag3)
			{
				x = GameCanvas.w - w / 2;
			}
			bool flag4 = x < mGraphics.getImageWidth(GameScr.imgKhung) + w / 2 + 10;
			if (flag4)
			{
				x = mGraphics.getImageWidth(GameScr.imgKhung) + w / 2 + 10;
			}
			int frameHeight = GameScr.fra_PVE_Bar_0.frameHeight;
			int num = y + frameHeight + mGraphics.getImageHeight(GameScr.imgBall) / 2 + 2;
			int frameWidth = GameScr.fra_PVE_Bar_1.frameWidth;
			int num2 = w / 2 - frameWidth / 2;
			int num3 = x - w / 2;
			int num4 = x + frameWidth / 2;
			int y2 = y + 3;
			int num5 = num2 - GameScr.fra_PVE_Bar_0.frameWidth;
			int num6 = num5 / GameScr.fra_PVE_Bar_0.frameWidth;
			bool flag5 = num5 % GameScr.fra_PVE_Bar_0.frameWidth > 0;
			if (flag5)
			{
				num6++;
			}
			for (int i = 0; i < num6; i++)
			{
				bool flag6 = i < num6 - 1;
				if (flag6)
				{
					GameScr.fra_PVE_Bar_0.drawFrame(1, num3 + GameScr.fra_PVE_Bar_0.frameWidth + i * GameScr.fra_PVE_Bar_0.frameWidth, y2, 0, 0, g);
				}
				else
				{
					GameScr.fra_PVE_Bar_0.drawFrame(1, num3 + num5, y2, 0, 0, g);
				}
				bool flag7 = i < num6 - 1;
				if (flag7)
				{
					GameScr.fra_PVE_Bar_0.drawFrame(1, num4 + i * GameScr.fra_PVE_Bar_0.frameWidth, y2, 0, 0, g);
				}
				else
				{
					GameScr.fra_PVE_Bar_0.drawFrame(1, num4 + num5 - GameScr.fra_PVE_Bar_0.frameWidth, y2, 0, 0, g);
				}
			}
			GameScr.fra_PVE_Bar_0.drawFrame(0, num3, y2, 2, 0, g);
			GameScr.fra_PVE_Bar_0.drawFrame(0, num4 + num5, y2, 0, 0, g);
			bool flag8 = GameScr.phuban_Info.pointTeam1 > 0;
			if (flag8)
			{
				int idx = 2;
				int idx2 = 3;
				bool flag9 = GameScr.phuban_Info.color_1 == 4;
				if (flag9)
				{
					idx = 4;
					idx2 = 5;
				}
				int num7 = GameScr.phuban_Info.pointTeam1 * num2 / GameScr.phuban_Info.maxPoint;
				bool flag10 = num7 < 0;
				if (flag10)
				{
					num7 = 0;
				}
				bool flag11 = num7 > num2;
				if (flag11)
				{
					num7 = num2;
				}
				g.setClip(num3 + num2 - num7, y2, num7, frameHeight);
				for (int j = 0; j < num6; j++)
				{
					bool flag12 = j < num6 - 1;
					if (flag12)
					{
						GameScr.fra_PVE_Bar_0.drawFrame(idx2, num3 + GameScr.fra_PVE_Bar_0.frameWidth + j * GameScr.fra_PVE_Bar_0.frameWidth, y2, 0, 0, g);
					}
					else
					{
						GameScr.fra_PVE_Bar_0.drawFrame(idx2, num3 + num5, y2, 0, 0, g);
					}
				}
				GameScr.fra_PVE_Bar_0.drawFrame(idx, num3, y2, 2, 0, g);
				GameCanvas.resetTrans(g);
			}
			bool flag13 = GameScr.phuban_Info.pointTeam2 > 0;
			if (flag13)
			{
				int idx3 = 2;
				int idx4 = 3;
				bool flag14 = GameScr.phuban_Info.color_2 == 4;
				if (flag14)
				{
					idx3 = 4;
					idx4 = 5;
				}
				int num8 = GameScr.phuban_Info.pointTeam2 * num2 / GameScr.phuban_Info.maxPoint;
				bool flag15 = num8 < 0;
				if (flag15)
				{
					num8 = 0;
				}
				bool flag16 = num8 > num2;
				if (flag16)
				{
					num8 = num2;
				}
				g.setClip(num4, y2, num8, frameHeight);
				for (int k = 0; k < num6; k++)
				{
					bool flag17 = k < num6 - 1;
					if (flag17)
					{
						GameScr.fra_PVE_Bar_0.drawFrame(idx4, num4 + k * GameScr.fra_PVE_Bar_0.frameWidth, y2, 0, 0, g);
					}
					else
					{
						GameScr.fra_PVE_Bar_0.drawFrame(idx4, num4 + num5 - GameScr.fra_PVE_Bar_0.frameWidth, y2, 0, 0, g);
					}
				}
				GameScr.fra_PVE_Bar_0.drawFrame(idx3, num4 + num5, y2, 0, 0, g);
				GameCanvas.resetTrans(g);
			}
			GameScr.fra_PVE_Bar_1.drawFrame(0, x - frameWidth / 2, y, 0, 0, g);
			string timeCountDown = mSystem.getTimeCountDown(GameScr.phuban_Info.timeStart, (int)GameScr.phuban_Info.timeSecond, true, false);
			mFont.tahoma_7b_yellow.drawString(g, timeCountDown, x + 1, y + GameScr.fra_PVE_Bar_1.frameHeight / 2 - mFont.tahoma_7b_green2.getHeight() / 2, 2);
			Panel.setTextColor(GameScr.phuban_Info.color_1, 1).drawString(g, GameScr.phuban_Info.nameTeam1, x - 5, num + 5, 1);
			Panel.setTextColor(GameScr.phuban_Info.color_2, 1).drawString(g, GameScr.phuban_Info.nameTeam2, x + 5, num + 5, 0);
			bool flag18 = GameScr.phuban_Info.type_PB != 0;
			if (flag18)
			{
				int y3 = y + frameHeight / 2 - 2;
				mFont.bigNumber_While.drawString(g, string.Empty + GameScr.phuban_Info.pointTeam1.ToString(), num3 + num2 / 2, y3, 2);
				mFont.bigNumber_While.drawString(g, string.Empty + GameScr.phuban_Info.pointTeam2.ToString(), num4 + num2 / 2, y3, 2);
			}
			g.drawImage(GameScr.imgVS, x, y + GameScr.fra_PVE_Bar_1.frameHeight + 2, 3);
			bool flag19 = GameScr.phuban_Info.type_PB == 0;
			if (flag19)
			{
				GameScr.paintChienTruong_Life(g, GameScr.phuban_Info.maxLife, GameScr.phuban_Info.color_1, GameScr.phuban_Info.lifeTeam1, x - 13, GameScr.phuban_Info.color_2, GameScr.phuban_Info.lifeTeam2, x + 13, num);
			}
		}
	}

	// Token: 0x060004F3 RID: 1267 RVA: 0x000602FC File Offset: 0x0005E4FC
	public static void paintChienTruong_Life(mGraphics g, int maxLife, int cl1, int lifeTeam1, int x1, int cl2, int lifeTeam2, int x2, int y)
	{
		bool flag = GameScr.imgBall == null;
		if (!flag)
		{
			int num = mGraphics.getImageHeight(GameScr.imgBall) / 2;
			for (int i = 0; i < maxLife; i++)
			{
				int num2 = 0;
				bool flag2 = i < lifeTeam1;
				if (flag2)
				{
					num2 = 1;
				}
				g.drawRegion(GameScr.imgBall, 0, num2 * num, mGraphics.getImageWidth(GameScr.imgBall), num, 0, x1 - i * (num + 1), y, mGraphics.VCENTER | mGraphics.HCENTER);
			}
			for (int j = 0; j < maxLife; j++)
			{
				int num3 = 0;
				bool flag3 = j < lifeTeam2;
				if (flag3)
				{
					num3 = 1;
				}
				g.drawRegion(GameScr.imgBall, 0, num3 * num, mGraphics.getImageWidth(GameScr.imgBall), num, 0, x2 + j * (num + 1), y, mGraphics.VCENTER | mGraphics.HCENTER);
			}
		}
	}

	// Token: 0x060004F4 RID: 1268 RVA: 0x000603E0 File Offset: 0x0005E5E0
	public static void paintHPBar_NEW(mGraphics g, int x, int y, global::Char c)
	{
		g.drawImage(GameScr.imgKhung, x, y, 0);
		int x2 = x + 3;
		int num = y + 19;
		int width = GameScr.imgHP_NEW.getWidth();
		int num2 = GameScr.imgHP_NEW.getHeight() / 2;
		int num3 = (int)(c.cHP * (long)width / c.cHPFull);
		bool flag = num3 <= 0;
		if (flag)
		{
			num3 = 1;
		}
		else
		{
			bool flag2 = num3 > width;
			if (flag2)
			{
				num3 = width;
			}
		}
		g.drawRegion(GameScr.imgHP_NEW, 0, num2, num3, num2, 0, x2, num, 0);
		int num4 = (int)(c.cMP * (long)width / c.cMPFull);
		bool flag3 = num4 <= 0;
		if (flag3)
		{
			num4 = 1;
		}
		else
		{
			bool flag4 = num4 > width;
			if (flag4)
			{
				num4 = width;
			}
		}
		g.drawRegion(GameScr.imgHP_NEW, 0, 0, num4, num2, 0, x2, num + 6, 0);
		int x3 = x + GameScr.imgKhung.getWidth() / 2 + 1;
		int y2 = num + 13;
		mFont.tahoma_7_green2.drawString(g, c.cName, x3, y + 4, 2);
		bool flag5 = c.mobFocus != null;
		if (flag5)
		{
			bool flag6 = c.mobFocus.getTemplate() != null;
			if (flag6)
			{
				mFont.tahoma_7_green2.drawString(g, c.mobFocus.getTemplate().name, x3, y2, 2);
			}
		}
		else
		{
			bool flag7 = c.npcFocus != null;
			if (flag7)
			{
				mFont.tahoma_7_green2.drawString(g, c.npcFocus.template.name, x3, y2, 2);
			}
			else
			{
				bool flag8 = c.charFocus != null;
				if (flag8)
				{
					mFont.tahoma_7_green2.drawString(g, c.charFocus.cName, x3, y2, 2);
				}
			}
		}
	}

	// Token: 0x060004F5 RID: 1269 RVA: 0x00060598 File Offset: 0x0005E798
	public static void addEffectEnd(int type, int subtype, int typePaint, int x, int y, int levelPaint, int dir, short timeRemove, Point[] listObj)
	{
		Effect_End eff = new Effect_End(type, subtype, typePaint, x, y, levelPaint, dir, timeRemove, listObj);
		GameScr.addEffect2Vector(eff);
	}

	// Token: 0x060004F6 RID: 1270 RVA: 0x000605C4 File Offset: 0x0005E7C4
	public static void addEffectEnd_Target(int type, int subtype, int typePaint, global::Char charUse, Point target, int levelPaint, short timeRemove, short range)
	{
		Effect_End eff = new Effect_End(type, subtype, typePaint, charUse.clone(), target, levelPaint, timeRemove, range);
		GameScr.addEffect2Vector(eff);
	}

	// Token: 0x060004F7 RID: 1271 RVA: 0x000605F0 File Offset: 0x0005E7F0
	public static void addEffect2Vector(Effect_End eff)
	{
		bool flag = eff.levelPaint == 0;
		if (flag)
		{
			EffectManager.addHiEffect(eff);
		}
		else
		{
			bool flag2 = eff.levelPaint == 1;
			if (flag2)
			{
				EffectManager.addMidEffects(eff);
			}
			else
			{
				bool flag3 = eff.levelPaint == 2;
				if (flag3)
				{
					EffectManager.addMid_2Effects(eff);
				}
				else
				{
					EffectManager.addLowEffect(eff);
				}
			}
		}
	}

	// Token: 0x060004F8 RID: 1272 RVA: 0x00060650 File Offset: 0x0005E850
	public static bool setIsInScreen(int x, int y, int wOne, int hOne)
	{
		bool flag = x < GameScr.cmx - wOne || x > GameScr.cmx + GameCanvas.w + wOne || y < GameScr.cmy - hOne || y > GameScr.cmy + GameCanvas.h + hOne * 3 / 2;
		return !flag;
	}

	// Token: 0x060004F9 RID: 1273 RVA: 0x000606A8 File Offset: 0x0005E8A8
	public static bool isSmallScr()
	{
		return GameCanvas.w <= 320;
	}

	// Token: 0x060004FA RID: 1274 RVA: 0x000606D4 File Offset: 0x0005E8D4
	private void paint_xp_bar(mGraphics g)
	{
		g.setColor(8421504);
		g.fillRect(0, GameCanvas.h - 2, GameCanvas.w, 2);
		int num = (int)(global::Char.myCharz().cLevelPercent * (long)GameCanvas.w / 10000L);
		g.setColor(16777215);
		g.fillRect(0, GameCanvas.h - 2, num, 2);
		g.setColor(0);
		num = GameCanvas.w / 10;
		for (int i = 1; i < 10; i++)
		{
			g.fillRect(i * num, GameCanvas.h - 2, 1, 2);
		}
	}

	// Token: 0x060004FB RID: 1275 RVA: 0x00060774 File Offset: 0x0005E974
	private void paint_ios_bg(mGraphics g)
	{
		bool flag = mSystem.clientType == 5;
		if (flag)
		{
			bool flag2 = GameScr.imgBgIOS != null;
			if (flag2)
			{
				g.setColor(16777215);
				g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
				g.drawImage(GameScr.imgBgIOS, GameCanvas.w / 2, GameCanvas.h / 2, mGraphics.VCENTER | mGraphics.HCENTER);
			}
			else
			{
				GameScr.imgBgIOS = GameCanvas.loadImage("/bg/bg_ios_" + ((TileMap.bgID % 2 != 0) ? 1 : 2).ToString() + ".png");
			}
		}
	}

	// Token: 0x060004FC RID: 1276 RVA: 0x00060818 File Offset: 0x0005EA18
	public void paint_CT(mGraphics g, int x, int y, int w)
	{
		w = 194;
		w = 182;
		w = 170;
		int num = 66;
		int num2 = 11;
		bool flag = x > GameCanvas.w - w / 2;
		if (flag)
		{
			x = GameCanvas.w - w / 2;
		}
		bool flag2 = x < mGraphics.getImageWidth(GameScr.imgKhung) + w / 2 + 10;
		if (flag2)
		{
			x = mGraphics.getImageWidth(GameScr.imgKhung) + w / 2 + 10;
		}
		int frameHeight = GameScr.fra_PVE_Bar_0.frameHeight;
		int num3 = y + frameHeight + mGraphics.getImageHeight(GameScr.imgBall) / 2 + 2;
		int frameWidth = GameScr.fra_PVE_Bar_1.frameWidth;
		int num4 = w / 2 - frameWidth / 2;
		int num5 = x - w / 2 + 3;
		int num6 = x + frameWidth / 2;
		int num7 = y + 3;
		int num8 = num4 - GameScr.fra_PVE_Bar_0.frameWidth;
		int num9 = num8 / GameScr.fra_PVE_Bar_0.frameWidth;
		bool flag3 = num8 % GameScr.fra_PVE_Bar_0.frameWidth > 0;
		if (flag3)
		{
			num9++;
		}
		for (int i = 0; i < num9; i++)
		{
			bool flag4 = i < num9 - 1;
			if (flag4)
			{
				g.drawRegion(GameScr.img_ct_bar_0, 0, 15, mGraphics.getImageWidth(GameScr.img_ct_bar_0), 15, 2, num5 + GameScr.fra_PVE_Bar_0.frameWidth + i * GameScr.fra_PVE_Bar_0.frameWidth, num7, mGraphics.TOP | mGraphics.LEFT, true);
			}
			else
			{
				g.drawRegion(GameScr.img_ct_bar_0, 0, 15, mGraphics.getImageWidth(GameScr.img_ct_bar_0), 15, 2, num5 + num8, num7, mGraphics.TOP | mGraphics.LEFT, true);
			}
			bool flag5 = i < num9 - 1;
			if (flag5)
			{
				g.drawRegion(GameScr.img_ct_bar_0, 0, 15, mGraphics.getImageWidth(GameScr.img_ct_bar_0), 15, 2, num6 + i * GameScr.fra_PVE_Bar_0.frameWidth, num7, mGraphics.TOP | mGraphics.LEFT, true);
			}
			else
			{
				g.drawRegion(GameScr.img_ct_bar_0, 0, 15, mGraphics.getImageWidth(GameScr.img_ct_bar_0), 15, 2, num6 + num8 - GameScr.fra_PVE_Bar_0.frameWidth, num7, mGraphics.TOP | mGraphics.LEFT, true);
			}
		}
		GameScr.fra_PVE_Bar_0.drawFrame(0, num5, num7, 2, 0, g);
		GameScr.fra_PVE_Bar_0.drawFrame(0, num6 + num8, num7, 0, 0, g);
		int num10 = GameScr.nCT_TeamA * 100 / (GameScr.nCT_nBoyBaller / 2) * num / 100;
		bool flag6 = num10 > 0;
		if (flag6)
		{
			bool flag7 = num10 < 6;
			if (flag7)
			{
				num10 = 6;
			}
			g.setClip(num5, num7, num10, 15);
		}
		bool flag8 = GameScr.nCT_TeamA > 0;
		if (flag8)
		{
			for (int j = 0; j < num2; j++)
			{
				bool flag9 = j == 0;
				if (flag9)
				{
					g.drawRegion(GameScr.img_ct_bar_0, 0, 60, mGraphics.getImageWidth(GameScr.img_ct_bar_0), 15, 2, num5, num7, mGraphics.TOP | mGraphics.LEFT, true);
				}
				else
				{
					g.drawRegion(GameScr.img_ct_bar_0, 0, 75, mGraphics.getImageWidth(GameScr.img_ct_bar_0), 15, 2, num5 + j * 6, num7, mGraphics.TOP | mGraphics.LEFT, true);
				}
			}
		}
		GameCanvas.resetTrans(g);
		int num11 = GameScr.nCT_TeamB * 100 / (GameScr.nCT_nBoyBaller / 2) * num / 100;
		bool flag10 = num - (num - num11) > 0;
		if (flag10)
		{
			bool flag11 = num11 < 6;
			if (flag11)
			{
				num11 = 6;
			}
			g.setClip(num6 + num - num11, num7, num - (num - num11), 15);
		}
		bool flag12 = GameScr.nCT_TeamB > 0;
		if (flag12)
		{
			for (int k = 0; k < num2; k++)
			{
				bool flag13 = k == 0;
				if (flag13)
				{
					g.drawRegion(GameScr.img_ct_bar_0, 0, 30, mGraphics.getImageWidth(GameScr.img_ct_bar_0), 15, 0, num6 + num8, num7, mGraphics.TOP | mGraphics.LEFT, true);
				}
				else
				{
					g.drawRegion(GameScr.img_ct_bar_0, 0, 45, mGraphics.getImageWidth(GameScr.img_ct_bar_0), 15, 0, num6 + num8 - k * 6, num7, mGraphics.TOP | mGraphics.LEFT, true);
				}
			}
		}
		GameCanvas.resetTrans(g);
		GameScr.fra_PVE_Bar_1.drawFrame(0, x - frameWidth / 2 + 1, y, 0, 0, g);
		string st = NinjaUtil.getTime((int)((GameScr.nCT_timeBallte - mSystem.currentTimeMillis()) / 1000L)) + string.Empty;
		mFont.tahoma_7b_yellow.drawString(g, st, num5 + w / 2 - 2, y + 5, 2);
		mFont.tahoma_7_grey.drawString(g, "Tầng " + GameScr.nCT_floor.ToString(), num5 + w / 2 - 3, y + GameScr.fra_PVE_Bar_1.frameHeight, mFont.CENTER);
		int width = mFont.tahoma_7b_red.getWidth(GameScr.nCT_TeamA.ToString() + string.Empty);
		mFont.tahoma_7b_blue.drawString(g, GameScr.nCT_TeamA.ToString() + string.Empty, x - frameWidth / 2 - width, num7 + GameScr.fra_PVE_Bar_1.frameHeight, 0);
		SmallImage.drawSmallImage(g, 2325, x - frameWidth / 2 - width - 15, num7 + GameScr.fra_PVE_Bar_1.frameHeight, 2, mGraphics.TOP | mGraphics.LEFT);
		width = mFont.tahoma_7b_red.getWidth(GameScr.nCT_TeamB.ToString() + string.Empty);
		mFont.tahoma_7b_red.drawString(g, GameScr.nCT_TeamB.ToString() + string.Empty, x + frameWidth / 2, num7 + GameScr.fra_PVE_Bar_1.frameHeight, 0);
		SmallImage.drawSmallImage(g, 2323, x + frameWidth / 2 + width + 3, num7 + GameScr.fra_PVE_Bar_1.frameHeight, 0, mGraphics.TOP | mGraphics.LEFT);
		this.paint_board_CT(g, GameCanvas.w - mFont.tahoma_7b_dark.getWidth("#01 AAAAAAAAAA"), 40);
		GameCanvas.resetTrans(g);
	}

	// Token: 0x060004FD RID: 1277 RVA: 0x00060E18 File Offset: 0x0005F018
	private void paint_board_CT(mGraphics g, int x, int y)
	{
		bool flag = !GameScr.is_Paint_boardCT_Expand;
		if (flag)
		{
			string s = "#01 nnnnnnnnnnnn";
			int width = mFont.tahoma_7.getWidth(s);
			int num = GameCanvas.w - width - 20;
			for (int i = 0; i < GameScr.nTop; i++)
			{
				mFont mFont = mFont.tahoma_7_white;
				switch (i)
				{
				case 0:
					mFont = mFont.tahoma_7_red;
					break;
				case 1:
					mFont = mFont.tahoma_7_yellow;
					break;
				case 2:
					mFont = mFont.tahoma_7_blue;
					break;
				}
				bool flag2 = i == GameScr.nTop - 1;
				if (flag2)
				{
					mFont = mFont.tahoma_7_green;
				}
				string[] array = Res.split((string)GameScr.res_CT.elementAt(i), "|", 0);
				int[] array2 = new int[]
				{
					0,
					18
				};
				for (int j = 0; j < 2; j++)
				{
					mFont.drawString(g, array[j], num + array2[j], y + i * mFont.tahoma_7.getHeight(), 0, mFont.tahoma_7);
				}
			}
			GameCanvas.resetTrans(g);
			GameScr.xRect = num;
			GameScr.yRect = y;
			GameScr.wRect = width + 10;
			GameScr.hRect = mFont.tahoma_7b_dark.getHeight() * 6;
		}
		else
		{
			string s2 = "#01 namec1000000 0001   00000";
			int[] array3 = new int[]
			{
				0,
				18,
				80,
				101
			};
			int width2 = mFont.tahoma_7.getWidth(s2);
			int num2 = GameCanvas.w - width2 - 20;
			for (int k = 0; k < GameScr.nTop; k++)
			{
				string[] array4 = Res.split((string)GameScr.res_CT.elementAt(k), "|", 0);
				mFont mFont2 = mFont.tahoma_7_white;
				switch (k)
				{
				case 0:
					mFont2 = mFont.tahoma_7_red;
					break;
				case 1:
					mFont2 = mFont.tahoma_7_yellow;
					break;
				case 2:
					mFont2 = mFont.tahoma_7_blue;
					break;
				}
				bool flag3 = k == GameScr.nTop - 1;
				if (flag3)
				{
					mFont2 = mFont.tahoma_7_green;
				}
				int y2 = k * mFont.tahoma_7_white.getHeight() + y;
				for (int l = 0; l < array3.Length; l++)
				{
					mFont2.drawString(g, array4[l], num2 + array3[l], y2, 0, mFont.tahoma_7);
				}
			}
			GameScr.xRect = num2;
			GameScr.yRect = y;
			GameScr.wRect = width2 + 10;
			GameScr.hRect = mFont.tahoma_7b_dark.getHeight() * 6;
		}
		GameCanvas.resetTrans(g);
	}

	// Token: 0x060004FE RID: 1278 RVA: 0x000610BC File Offset: 0x0005F2BC
	private void paintHPCT(mGraphics g, int x, int y, global::Char c)
	{
		g.drawImage(GameScr.imgKhung, x, y, 0);
		int x2 = x + 3;
		int num = y + 19;
		int width = GameScr.imgHP_NEW.getWidth();
		int num2 = GameScr.imgHP_NEW.getHeight() / 2;
		int num3 = (int)(c.cHP * (long)width / c.cHPFull);
		bool flag = num3 <= 0;
		if (!flag)
		{
			bool flag2 = num3 > width;
			if (flag2)
			{
			}
		}
		g.drawRegion(GameScr.imgHP_NEW, 0, num2, 80, num2, 0, x2, num, 0);
		int num4 = (int)(c.cMP * (long)width / c.cMPFull);
		bool flag3 = num4 <= 0;
		if (!flag3)
		{
			bool flag4 = num4 > width;
			if (flag4)
			{
			}
		}
		g.drawRegion(GameScr.imgHP_NEW, 0, 0, 80, num2, 0, x2, num + 6, 0);
	}

	// Token: 0x0400076D RID: 1901
	public bool isWaitingDoubleClick;

	// Token: 0x0400076E RID: 1902
	public long timeStartDblClick;

	// Token: 0x0400076F RID: 1903
	public long timeEndDblClick;

	// Token: 0x04000770 RID: 1904
	public static bool isPaintOther = false;

	// Token: 0x04000771 RID: 1905
	public static MyVector textTime = new MyVector(string.Empty);

	// Token: 0x04000772 RID: 1906
	public static bool isLoadAllData = false;

	// Token: 0x04000773 RID: 1907
	public static GameScr instance;

	// Token: 0x04000774 RID: 1908
	public static int gW;

	// Token: 0x04000775 RID: 1909
	public static int gH;

	// Token: 0x04000776 RID: 1910
	public static int gW2;

	// Token: 0x04000777 RID: 1911
	public static int gssw;

	// Token: 0x04000778 RID: 1912
	public static int gssh;

	// Token: 0x04000779 RID: 1913
	public static int gH34;

	// Token: 0x0400077A RID: 1914
	public static int gW3;

	// Token: 0x0400077B RID: 1915
	public static int gH3;

	// Token: 0x0400077C RID: 1916
	public static int gH23;

	// Token: 0x0400077D RID: 1917
	public static int gW23;

	// Token: 0x0400077E RID: 1918
	public static int gH2;

	// Token: 0x0400077F RID: 1919
	public static int csPadMaxH;

	// Token: 0x04000780 RID: 1920
	public static int cmdBarH;

	// Token: 0x04000781 RID: 1921
	public static int gW34;

	// Token: 0x04000782 RID: 1922
	public static int gW6;

	// Token: 0x04000783 RID: 1923
	public static int gH6;

	// Token: 0x04000784 RID: 1924
	public static int cmx;

	// Token: 0x04000785 RID: 1925
	public static int cmy;

	// Token: 0x04000786 RID: 1926
	public static int cmdx;

	// Token: 0x04000787 RID: 1927
	public static int cmdy;

	// Token: 0x04000788 RID: 1928
	public static int cmvx;

	// Token: 0x04000789 RID: 1929
	public static int cmvy;

	// Token: 0x0400078A RID: 1930
	public static int cmtoX;

	// Token: 0x0400078B RID: 1931
	public static int cmtoY;

	// Token: 0x0400078C RID: 1932
	public static int cmxLim;

	// Token: 0x0400078D RID: 1933
	public static int cmyLim;

	// Token: 0x0400078E RID: 1934
	public static int gssx;

	// Token: 0x0400078F RID: 1935
	public static int gssy;

	// Token: 0x04000790 RID: 1936
	public static int gssxe;

	// Token: 0x04000791 RID: 1937
	public static int gssye;

	// Token: 0x04000792 RID: 1938
	public Command cmdback;

	// Token: 0x04000793 RID: 1939
	public Command cmdBag;

	// Token: 0x04000794 RID: 1940
	public Command cmdSkill;

	// Token: 0x04000795 RID: 1941
	public Command cmdTiemnang;

	// Token: 0x04000796 RID: 1942
	public Command cmdtrangbi;

	// Token: 0x04000797 RID: 1943
	public Command cmdInfo;

	// Token: 0x04000798 RID: 1944
	public Command cmdFocus;

	// Token: 0x04000799 RID: 1945
	public Command cmdFire;

	// Token: 0x0400079A RID: 1946
	public static int d;

	// Token: 0x0400079B RID: 1947
	public static int hpPotion;

	// Token: 0x0400079C RID: 1948
	public static SkillPaint[] sks;

	// Token: 0x0400079D RID: 1949
	public static Arrowpaint[] arrs;

	// Token: 0x0400079E RID: 1950
	public static DartInfo[] darts;

	// Token: 0x0400079F RID: 1951
	public static Part[] parts;

	// Token: 0x040007A0 RID: 1952
	public static EffectCharPaint[] efs;

	// Token: 0x040007A1 RID: 1953
	public static int lockTick;

	// Token: 0x040007A2 RID: 1954
	private int moveUp;

	// Token: 0x040007A3 RID: 1955
	private int moveDow;

	// Token: 0x040007A4 RID: 1956
	private int idTypeTask;

	// Token: 0x040007A5 RID: 1957
	private bool isstarOpen;

	// Token: 0x040007A6 RID: 1958
	private bool isChangeSkill;

	// Token: 0x040007A7 RID: 1959
	public static MyVector vClan = new MyVector();

	// Token: 0x040007A8 RID: 1960
	public static MyVector vPtMap = new MyVector();

	// Token: 0x040007A9 RID: 1961
	public static MyVector vFriend = new MyVector();

	// Token: 0x040007AA RID: 1962
	public static MyVector vEnemies = new MyVector();

	// Token: 0x040007AB RID: 1963
	public static MyVector vCharInMap = new MyVector();

	// Token: 0x040007AC RID: 1964
	public static MyVector vItemMap = new MyVector();

	// Token: 0x040007AD RID: 1965
	public static MyVector vMobAttack = new MyVector();

	// Token: 0x040007AE RID: 1966
	public static MyVector vSet = new MyVector();

	// Token: 0x040007AF RID: 1967
	public static MyVector vMob = new MyVector();

	// Token: 0x040007B0 RID: 1968
	public static MyVector vNpc = new MyVector();

	// Token: 0x040007B1 RID: 1969
	public static MyVector vFlag = new MyVector();

	// Token: 0x040007B2 RID: 1970
	public static NClass[] nClasss;

	// Token: 0x040007B3 RID: 1971
	public static int indexSize = 28;

	// Token: 0x040007B4 RID: 1972
	public static int indexTitle = 0;

	// Token: 0x040007B5 RID: 1973
	public static int indexSelect = 0;

	// Token: 0x040007B6 RID: 1974
	public static int indexRow = -1;

	// Token: 0x040007B7 RID: 1975
	public static int indexRowMax;

	// Token: 0x040007B8 RID: 1976
	public static int indexMenu = 0;

	// Token: 0x040007B9 RID: 1977
	public Item itemFocus;

	// Token: 0x040007BA RID: 1978
	public ItemOptionTemplate[] iOptionTemplates;

	// Token: 0x040007BB RID: 1979
	public SkillOptionTemplate[] sOptionTemplates;

	// Token: 0x040007BC RID: 1980
	private static Scroll scrInfo = new Scroll();

	// Token: 0x040007BD RID: 1981
	public static Scroll scrMain = new Scroll();

	// Token: 0x040007BE RID: 1982
	public static MyVector vItemUpGrade = new MyVector();

	// Token: 0x040007BF RID: 1983
	public static bool isTypeXu;

	// Token: 0x040007C0 RID: 1984
	public static bool isViewNext;

	// Token: 0x040007C1 RID: 1985
	public static bool isViewClanMemOnline = false;

	// Token: 0x040007C2 RID: 1986
	public static bool isViewClanInvite = true;

	// Token: 0x040007C3 RID: 1987
	public static bool isChop;

	// Token: 0x040007C4 RID: 1988
	public static string titleInputText = string.Empty;

	// Token: 0x040007C5 RID: 1989
	public static int tickMove;

	// Token: 0x040007C6 RID: 1990
	public static bool isPaintAlert = false;

	// Token: 0x040007C7 RID: 1991
	public static bool isPaintTask = false;

	// Token: 0x040007C8 RID: 1992
	public static bool isPaintTeam = false;

	// Token: 0x040007C9 RID: 1993
	public static bool isPaintFindTeam = false;

	// Token: 0x040007CA RID: 1994
	public static bool isPaintFriend = false;

	// Token: 0x040007CB RID: 1995
	public static bool isPaintEnemies = false;

	// Token: 0x040007CC RID: 1996
	public static bool isPaintItemInfo = false;

	// Token: 0x040007CD RID: 1997
	public static bool isHaveSelectSkill = false;

	// Token: 0x040007CE RID: 1998
	public static bool isPaintSkill = false;

	// Token: 0x040007CF RID: 1999
	public static bool isPaintInfoMe = false;

	// Token: 0x040007D0 RID: 2000
	public static bool isPaintStore = false;

	// Token: 0x040007D1 RID: 2001
	public static bool isPaintNonNam = false;

	// Token: 0x040007D2 RID: 2002
	public static bool isPaintNonNu = false;

	// Token: 0x040007D3 RID: 2003
	public static bool isPaintAoNam = false;

	// Token: 0x040007D4 RID: 2004
	public static bool isPaintAoNu = false;

	// Token: 0x040007D5 RID: 2005
	public static bool isPaintGangTayNam = false;

	// Token: 0x040007D6 RID: 2006
	public static bool isPaintGangTayNu = false;

	// Token: 0x040007D7 RID: 2007
	public static bool isPaintQuanNam = false;

	// Token: 0x040007D8 RID: 2008
	public static bool isPaintQuanNu = false;

	// Token: 0x040007D9 RID: 2009
	public static bool isPaintGiayNam = false;

	// Token: 0x040007DA RID: 2010
	public static bool isPaintGiayNu = false;

	// Token: 0x040007DB RID: 2011
	public static bool isPaintLien = false;

	// Token: 0x040007DC RID: 2012
	public static bool isPaintNhan = false;

	// Token: 0x040007DD RID: 2013
	public static bool isPaintNgocBoi = false;

	// Token: 0x040007DE RID: 2014
	public static bool isPaintPhu = false;

	// Token: 0x040007DF RID: 2015
	public static bool isPaintWeapon = false;

	// Token: 0x040007E0 RID: 2016
	public static bool isPaintStack = false;

	// Token: 0x040007E1 RID: 2017
	public static bool isPaintStackLock = false;

	// Token: 0x040007E2 RID: 2018
	public static bool isPaintGrocery = false;

	// Token: 0x040007E3 RID: 2019
	public static bool isPaintGroceryLock = false;

	// Token: 0x040007E4 RID: 2020
	public static bool isPaintUpGrade = false;

	// Token: 0x040007E5 RID: 2021
	public static bool isPaintConvert = false;

	// Token: 0x040007E6 RID: 2022
	public static bool isPaintUpGradeGold = false;

	// Token: 0x040007E7 RID: 2023
	public static bool isPaintUpPearl = false;

	// Token: 0x040007E8 RID: 2024
	public static bool isPaintBox = false;

	// Token: 0x040007E9 RID: 2025
	public static bool isPaintSplit = false;

	// Token: 0x040007EA RID: 2026
	public static bool isPaintCharInMap = false;

	// Token: 0x040007EB RID: 2027
	public static bool isPaintTrade = false;

	// Token: 0x040007EC RID: 2028
	public static bool isPaintZone = false;

	// Token: 0x040007ED RID: 2029
	public static bool isPaintMessage = false;

	// Token: 0x040007EE RID: 2030
	public static bool isPaintClan = false;

	// Token: 0x040007EF RID: 2031
	public static bool isRequestMember = false;

	// Token: 0x040007F0 RID: 2032
	public static global::Char currentCharViewInfo;

	// Token: 0x040007F1 RID: 2033
	public static long[] exps;

	// Token: 0x040007F2 RID: 2034
	public static int[] crystals;

	// Token: 0x040007F3 RID: 2035
	public static int[] upClothe;

	// Token: 0x040007F4 RID: 2036
	public static int[] upAdorn;

	// Token: 0x040007F5 RID: 2037
	public static int[] upWeapon;

	// Token: 0x040007F6 RID: 2038
	public static int[] coinUpCrystals;

	// Token: 0x040007F7 RID: 2039
	public static int[] coinUpClothes;

	// Token: 0x040007F8 RID: 2040
	public static int[] coinUpAdorns;

	// Token: 0x040007F9 RID: 2041
	public static int[] coinUpWeapons;

	// Token: 0x040007FA RID: 2042
	public static int[] maxPercents;

	// Token: 0x040007FB RID: 2043
	public static int[] goldUps;

	// Token: 0x040007FC RID: 2044
	public int tMenuDelay;

	// Token: 0x040007FD RID: 2045
	public int zoneCol = 6;

	// Token: 0x040007FE RID: 2046
	public int[] zones;

	// Token: 0x040007FF RID: 2047
	public int[] pts;

	// Token: 0x04000800 RID: 2048
	public int[] numPlayer;

	// Token: 0x04000801 RID: 2049
	public int[] maxPlayer;

	// Token: 0x04000802 RID: 2050
	public int[] rank1;

	// Token: 0x04000803 RID: 2051
	public int[] rank2;

	// Token: 0x04000804 RID: 2052
	public string[] rankName1;

	// Token: 0x04000805 RID: 2053
	public string[] rankName2;

	// Token: 0x04000806 RID: 2054
	public int typeTrade;

	// Token: 0x04000807 RID: 2055
	public int typeTradeOrder;

	// Token: 0x04000808 RID: 2056
	public int coinTrade;

	// Token: 0x04000809 RID: 2057
	public int coinTradeOrder;

	// Token: 0x0400080A RID: 2058
	public int timeTrade;

	// Token: 0x0400080B RID: 2059
	public int indexItemUse = -1;

	// Token: 0x0400080C RID: 2060
	public int cLastFocusID = -1;

	// Token: 0x0400080D RID: 2061
	public int cPreFocusID = -1;

	// Token: 0x0400080E RID: 2062
	public bool isLockKey;

	// Token: 0x0400080F RID: 2063
	public static int[] tasks;

	// Token: 0x04000810 RID: 2064
	public static int[] mapTasks;

	// Token: 0x04000811 RID: 2065
	public static Image imgRoomStat;

	// Token: 0x04000812 RID: 2066
	public static Image frBarPow0;

	// Token: 0x04000813 RID: 2067
	public static Image frBarPow1;

	// Token: 0x04000814 RID: 2068
	public static Image frBarPow2;

	// Token: 0x04000815 RID: 2069
	public static Image frBarPow20;

	// Token: 0x04000816 RID: 2070
	public static Image frBarPow21;

	// Token: 0x04000817 RID: 2071
	public static Image frBarPow22;

	// Token: 0x04000818 RID: 2072
	public MyVector texts;

	// Token: 0x04000819 RID: 2073
	public string textsTitle;

	// Token: 0x0400081A RID: 2074
	public static sbyte vcData;

	// Token: 0x0400081B RID: 2075
	public static sbyte vcMap;

	// Token: 0x0400081C RID: 2076
	public static sbyte vcSkill;

	// Token: 0x0400081D RID: 2077
	public static sbyte vcItem;

	// Token: 0x0400081E RID: 2078
	public static sbyte vsData;

	// Token: 0x0400081F RID: 2079
	public static sbyte vsMap;

	// Token: 0x04000820 RID: 2080
	public static sbyte vsSkill;

	// Token: 0x04000821 RID: 2081
	public static sbyte vsItem;

	// Token: 0x04000822 RID: 2082
	public static sbyte vcTask;

	// Token: 0x04000823 RID: 2083
	public static Image imgArrow;

	// Token: 0x04000824 RID: 2084
	public static Image imgArrow2;

	// Token: 0x04000825 RID: 2085
	public static Image imgChat;

	// Token: 0x04000826 RID: 2086
	public static Image imgChat2;

	// Token: 0x04000827 RID: 2087
	public static Image imgMenu;

	// Token: 0x04000828 RID: 2088
	public static Image imgFocus;

	// Token: 0x04000829 RID: 2089
	public static Image imgFocus2;

	// Token: 0x0400082A RID: 2090
	public static Image imgSkill;

	// Token: 0x0400082B RID: 2091
	public static Image imgSkill2;

	// Token: 0x0400082C RID: 2092
	public static Image imgHP1;

	// Token: 0x0400082D RID: 2093
	public static Image imgHP2;

	// Token: 0x0400082E RID: 2094
	public static Image imgHP3;

	// Token: 0x0400082F RID: 2095
	public static Image imgHP4;

	// Token: 0x04000830 RID: 2096
	public static Image imgFire0;

	// Token: 0x04000831 RID: 2097
	public static Image imgFire1;

	// Token: 0x04000832 RID: 2098
	public static Image imgNR1;

	// Token: 0x04000833 RID: 2099
	public static Image imgNR2;

	// Token: 0x04000834 RID: 2100
	public static Image imgNR3;

	// Token: 0x04000835 RID: 2101
	public static Image imgNR4;

	// Token: 0x04000836 RID: 2102
	public static Image imgLbtn;

	// Token: 0x04000837 RID: 2103
	public static Image imgLbtnFocus;

	// Token: 0x04000838 RID: 2104
	public static Image imgLbtn2;

	// Token: 0x04000839 RID: 2105
	public static Image imgLbtnFocus2;

	// Token: 0x0400083A RID: 2106
	public static Image imgAnalog1;

	// Token: 0x0400083B RID: 2107
	public static Image imgAnalog2;

	// Token: 0x0400083C RID: 2108
	public string tradeName = string.Empty;

	// Token: 0x0400083D RID: 2109
	public string tradeItemName = string.Empty;

	// Token: 0x0400083E RID: 2110
	public int timeLengthMap;

	// Token: 0x0400083F RID: 2111
	public int timeStartMap;

	// Token: 0x04000840 RID: 2112
	public static sbyte typeViewInfo = 0;

	// Token: 0x04000841 RID: 2113
	public static sbyte typeActive = 0;

	// Token: 0x04000842 RID: 2114
	public static InfoMe info1 = new InfoMe();

	// Token: 0x04000843 RID: 2115
	public static InfoMe info2 = new InfoMe();

	// Token: 0x04000844 RID: 2116
	public static Image imgPanel;

	// Token: 0x04000845 RID: 2117
	public static Image imgPanel2;

	// Token: 0x04000846 RID: 2118
	public static Image imgHP;

	// Token: 0x04000847 RID: 2119
	public static Image imgMP;

	// Token: 0x04000848 RID: 2120
	public static Image imgSP;

	// Token: 0x04000849 RID: 2121
	public static Image imgHPLost;

	// Token: 0x0400084A RID: 2122
	public static Image imgMPLost;

	// Token: 0x0400084B RID: 2123
	public static Image imgHP_tm_do;

	// Token: 0x0400084C RID: 2124
	public static Image imgHP_tm_vang;

	// Token: 0x0400084D RID: 2125
	public static Image imgHP_tm_xam;

	// Token: 0x0400084E RID: 2126
	public static Image imgHP_tm_xanh;

	// Token: 0x0400084F RID: 2127
	public static Image imgHP_tm_xanhnuocbien;

	// Token: 0x04000850 RID: 2128
	public Mob mobCapcha;

	// Token: 0x04000851 RID: 2129
	public MagicTree magicTree;

	// Token: 0x04000852 RID: 2130
	private short l;

	// Token: 0x04000853 RID: 2131
	public static int countEff;

	// Token: 0x04000854 RID: 2132
	public static GamePad gamePad = new GamePad();

	// Token: 0x04000855 RID: 2133
	public static Image imgChatPC;

	// Token: 0x04000856 RID: 2134
	public static Image imgChatsPC2;

	// Token: 0x04000857 RID: 2135
	public static int isAnalog = 0;

	// Token: 0x04000858 RID: 2136
	public static Image img_ct_bar_0 = mSystem.loadImage("/mainImage/i_pve_bar_0.png");

	// Token: 0x04000859 RID: 2137
	public static Image img_ct_bar_1 = mSystem.loadImage("/mainImage/i_pve_bar_1.png");

	// Token: 0x0400085A RID: 2138
	public static bool isUseTouch;

	// Token: 0x0400085B RID: 2139
	public Command cmdDoiCo;

	// Token: 0x0400085C RID: 2140
	public Command cmdLogOut;

	// Token: 0x0400085D RID: 2141
	public Command cmdChatTheGioi;

	// Token: 0x0400085E RID: 2142
	public Command cmdshowInfo;

	// Token: 0x0400085F RID: 2143
	private static Command[] cmdTestLogin = null;

	// Token: 0x04000860 RID: 2144
	public const int numSkill = 10;

	// Token: 0x04000861 RID: 2145
	public const int numSkill_2 = 5;

	// Token: 0x04000862 RID: 2146
	public static Skill[] keySkill = new Skill[10];

	// Token: 0x04000863 RID: 2147
	public static Skill[] onScreenSkill = new Skill[10];

	// Token: 0x04000864 RID: 2148
	public Command cmdMenu;

	// Token: 0x04000865 RID: 2149
	public static int firstY;

	// Token: 0x04000866 RID: 2150
	public static int wSkill;

	// Token: 0x04000867 RID: 2151
	public static long deltaTime;

	// Token: 0x04000868 RID: 2152
	public bool isPointerDowning;

	// Token: 0x04000869 RID: 2153
	public bool isChangingCameraMode;

	// Token: 0x0400086A RID: 2154
	private int ptLastDownX;

	// Token: 0x0400086B RID: 2155
	private int ptLastDownY;

	// Token: 0x0400086C RID: 2156
	private int ptFirstDownX;

	// Token: 0x0400086D RID: 2157
	private int ptFirstDownY;

	// Token: 0x0400086E RID: 2158
	private int ptDownTime;

	// Token: 0x0400086F RID: 2159
	private bool disableSingleClick;

	// Token: 0x04000870 RID: 2160
	public long lastSingleClick;

	// Token: 0x04000871 RID: 2161
	public bool clickMoving;

	// Token: 0x04000872 RID: 2162
	public bool clickOnTileTop;

	// Token: 0x04000873 RID: 2163
	public bool clickMovingRed;

	// Token: 0x04000874 RID: 2164
	private int clickToX;

	// Token: 0x04000875 RID: 2165
	private int clickToY;

	// Token: 0x04000876 RID: 2166
	private int lastClickCMX;

	// Token: 0x04000877 RID: 2167
	private int lastClickCMY;

	// Token: 0x04000878 RID: 2168
	private int clickMovingP1;

	// Token: 0x04000879 RID: 2169
	private int clickMovingTimeOut;

	// Token: 0x0400087A RID: 2170
	private long lastMove;

	// Token: 0x0400087B RID: 2171
	public static bool isNewClanMessage;

	// Token: 0x0400087C RID: 2172
	private long lastFire;

	// Token: 0x0400087D RID: 2173
	private long lastUsePotion;

	// Token: 0x0400087E RID: 2174
	public int auto;

	// Token: 0x0400087F RID: 2175
	public int dem;

	// Token: 0x04000880 RID: 2176
	private string strTam = string.Empty;

	// Token: 0x04000881 RID: 2177
	private int a;

	// Token: 0x04000882 RID: 2178
	public bool isFreez;

	// Token: 0x04000883 RID: 2179
	public bool isUseFreez;

	// Token: 0x04000884 RID: 2180
	public static Image imgTrans;

	// Token: 0x04000885 RID: 2181
	public bool isRongThanXuatHien;

	// Token: 0x04000886 RID: 2182
	public bool isRongNamek;

	// Token: 0x04000887 RID: 2183
	public bool isSuperPower;

	// Token: 0x04000888 RID: 2184
	public int tPower;

	// Token: 0x04000889 RID: 2185
	public int xPower;

	// Token: 0x0400088A RID: 2186
	public int yPower;

	// Token: 0x0400088B RID: 2187
	public int dxPower;

	// Token: 0x0400088C RID: 2188
	public bool activeRongThan;

	// Token: 0x0400088D RID: 2189
	public bool isMeCallRongThan;

	// Token: 0x0400088E RID: 2190
	public int mautroi;

	// Token: 0x0400088F RID: 2191
	public int mapRID;

	// Token: 0x04000890 RID: 2192
	public int zoneRID;

	// Token: 0x04000891 RID: 2193
	public int bgRID = -1;

	// Token: 0x04000892 RID: 2194
	public static int tam = 0;

	// Token: 0x04000893 RID: 2195
	public static bool isAutoPlay;

	// Token: 0x04000894 RID: 2196
	public static bool canAutoPlay;

	// Token: 0x04000895 RID: 2197
	public static bool isChangeZone;

	// Token: 0x04000896 RID: 2198
	private int timeSkill;

	// Token: 0x04000897 RID: 2199
	private int nSkill;

	// Token: 0x04000898 RID: 2200
	private int selectedIndexSkill = -1;

	// Token: 0x04000899 RID: 2201
	private Skill lastSkill;

	// Token: 0x0400089A RID: 2202
	private bool doSeleckSkillFlag;

	// Token: 0x0400089B RID: 2203
	public string strCapcha;

	// Token: 0x0400089C RID: 2204
	private long longPress;

	// Token: 0x0400089D RID: 2205
	private int move;

	// Token: 0x0400089E RID: 2206
	public bool flareFindFocus;

	// Token: 0x0400089F RID: 2207
	private int flareTime;

	// Token: 0x040008A0 RID: 2208
	public int keyTouchSkill = -1;

	// Token: 0x040008A1 RID: 2209
	private long lastSendUpdatePostion;

	// Token: 0x040008A2 RID: 2210
	public static long lastTick;

	// Token: 0x040008A3 RID: 2211
	public static long currTick;

	// Token: 0x040008A4 RID: 2212
	private int timeAuto;

	// Token: 0x040008A5 RID: 2213
	public static long lastXS;

	// Token: 0x040008A6 RID: 2214
	public static long currXS;

	// Token: 0x040008A7 RID: 2215
	public static int secondXS;

	// Token: 0x040008A8 RID: 2216
	public int runArrow;

	// Token: 0x040008A9 RID: 2217
	public static int isPaintRada;

	// Token: 0x040008AA RID: 2218
	public static Image imgNut;

	// Token: 0x040008AB RID: 2219
	public static Image imgNutF;

	// Token: 0x040008AC RID: 2220
	public int[] keyCapcha;

	// Token: 0x040008AD RID: 2221
	public static Image imgCapcha;

	// Token: 0x040008AE RID: 2222
	public string keyInput;

	// Token: 0x040008AF RID: 2223
	public static int disXC;

	// Token: 0x040008B0 RID: 2224
	public static bool isPaint = true;

	// Token: 0x040008B1 RID: 2225
	public static int shock_scr;

	// Token: 0x040008B2 RID: 2226
	private static int[] shock_x = new int[]
	{
		1,
		-1,
		1,
		-1
	};

	// Token: 0x040008B3 RID: 2227
	private static int[] shock_y = new int[]
	{
		1,
		-1,
		-1,
		1
	};

	// Token: 0x040008B4 RID: 2228
	private int tDoubleDelay;

	// Token: 0x040008B5 RID: 2229
	public static Image arrow;

	// Token: 0x040008B6 RID: 2230
	private static int yTouchBar;

	// Token: 0x040008B7 RID: 2231
	private static int xC;

	// Token: 0x040008B8 RID: 2232
	private static int yC;

	// Token: 0x040008B9 RID: 2233
	private static int xL;

	// Token: 0x040008BA RID: 2234
	private static int yL;

	// Token: 0x040008BB RID: 2235
	public int xR;

	// Token: 0x040008BC RID: 2236
	public int yR;

	// Token: 0x040008BD RID: 2237
	private static int xU;

	// Token: 0x040008BE RID: 2238
	private static int yU;

	// Token: 0x040008BF RID: 2239
	private static int xF;

	// Token: 0x040008C0 RID: 2240
	private static int yF;

	// Token: 0x040008C1 RID: 2241
	public static int xHP;

	// Token: 0x040008C2 RID: 2242
	public static int yHP;

	// Token: 0x040008C3 RID: 2243
	private static int xTG;

	// Token: 0x040008C4 RID: 2244
	private static int yTG;

	// Token: 0x040008C5 RID: 2245
	public static int[] xS;

	// Token: 0x040008C6 RID: 2246
	public static int[] yS;

	// Token: 0x040008C7 RID: 2247
	public static int xSkill;

	// Token: 0x040008C8 RID: 2248
	public static int ySkill;

	// Token: 0x040008C9 RID: 2249
	public static int padSkill;

	// Token: 0x040008CA RID: 2250
	public long dMP;

	// Token: 0x040008CB RID: 2251
	public long twMp;

	// Token: 0x040008CC RID: 2252
	public bool isInjureMp;

	// Token: 0x040008CD RID: 2253
	public long dHP;

	// Token: 0x040008CE RID: 2254
	public long twHp;

	// Token: 0x040008CF RID: 2255
	public bool isInjureHp;

	// Token: 0x040008D0 RID: 2256
	private long curr;

	// Token: 0x040008D1 RID: 2257
	private long last;

	// Token: 0x040008D2 RID: 2258
	private int secondVS;

	// Token: 0x040008D3 RID: 2259
	private int[] idVS = new int[]
	{
		-1,
		-1
	};

	// Token: 0x040008D4 RID: 2260
	public static string[] flyTextString;

	// Token: 0x040008D5 RID: 2261
	public static int[] flyTextX;

	// Token: 0x040008D6 RID: 2262
	public static int[] flyTextY;

	// Token: 0x040008D7 RID: 2263
	public static int[] flyTextYTo;

	// Token: 0x040008D8 RID: 2264
	public static int[] flyTextDx;

	// Token: 0x040008D9 RID: 2265
	public static int[] flyTextDy;

	// Token: 0x040008DA RID: 2266
	public static int[] flyTextState;

	// Token: 0x040008DB RID: 2267
	public static int[] flyTextColor;

	// Token: 0x040008DC RID: 2268
	public static int[] flyTime;

	// Token: 0x040008DD RID: 2269
	public static int[] splashX;

	// Token: 0x040008DE RID: 2270
	public static int[] splashY;

	// Token: 0x040008DF RID: 2271
	public static int[] splashState;

	// Token: 0x040008E0 RID: 2272
	public static int[] splashF;

	// Token: 0x040008E1 RID: 2273
	public static int[] splashDir;

	// Token: 0x040008E2 RID: 2274
	public static Image[] imgSplash;

	// Token: 0x040008E3 RID: 2275
	public static int cmdBarX;

	// Token: 0x040008E4 RID: 2276
	public static int cmdBarY;

	// Token: 0x040008E5 RID: 2277
	public static int cmdBarW;

	// Token: 0x040008E6 RID: 2278
	public static int cmdBarLeftW;

	// Token: 0x040008E7 RID: 2279
	public static int cmdBarRightW;

	// Token: 0x040008E8 RID: 2280
	public static int cmdBarCenterW;

	// Token: 0x040008E9 RID: 2281
	public static int hpBarX;

	// Token: 0x040008EA RID: 2282
	public static int hpBarY;

	// Token: 0x040008EB RID: 2283
	public static int spBarW;

	// Token: 0x040008EC RID: 2284
	public static int mpBarW;

	// Token: 0x040008ED RID: 2285
	public static int expBarW;

	// Token: 0x040008EE RID: 2286
	public static int lvPosX;

	// Token: 0x040008EF RID: 2287
	public static int moneyPosX;

	// Token: 0x040008F0 RID: 2288
	public static int hpBarH;

	// Token: 0x040008F1 RID: 2289
	public static int girlHPBarY;

	// Token: 0x040008F2 RID: 2290
	public static long hpBarW;

	// Token: 0x040008F3 RID: 2291
	public static Image[] imgCmdBar;

	// Token: 0x040008F4 RID: 2292
	private int imgScrW;

	// Token: 0x040008F5 RID: 2293
	public static int popupY;

	// Token: 0x040008F6 RID: 2294
	public static int popupX;

	// Token: 0x040008F7 RID: 2295
	public static int isborderIndex;

	// Token: 0x040008F8 RID: 2296
	public static int isselectedRow;

	// Token: 0x040008F9 RID: 2297
	private static Image imgNolearn;

	// Token: 0x040008FA RID: 2298
	public int cmxp;

	// Token: 0x040008FB RID: 2299
	public int cmvxp;

	// Token: 0x040008FC RID: 2300
	public int cmdxp;

	// Token: 0x040008FD RID: 2301
	public int cmxLimp;

	// Token: 0x040008FE RID: 2302
	public int cmyLimp;

	// Token: 0x040008FF RID: 2303
	public int cmyp;

	// Token: 0x04000900 RID: 2304
	public int cmvyp;

	// Token: 0x04000901 RID: 2305
	public int cmdyp;

	// Token: 0x04000902 RID: 2306
	private int indexTiemNang;

	// Token: 0x04000903 RID: 2307
	private string alertURL;

	// Token: 0x04000904 RID: 2308
	private string fnick;

	// Token: 0x04000905 RID: 2309
	public static int xstart;

	// Token: 0x04000906 RID: 2310
	public static int ystart;

	// Token: 0x04000907 RID: 2311
	public static int popupW = 140;

	// Token: 0x04000908 RID: 2312
	public static int popupH = 160;

	// Token: 0x04000909 RID: 2313
	public static int cmySK;

	// Token: 0x0400090A RID: 2314
	public static int cmtoYSK;

	// Token: 0x0400090B RID: 2315
	public static int cmdySK;

	// Token: 0x0400090C RID: 2316
	public static int cmvySK;

	// Token: 0x0400090D RID: 2317
	public static int cmyLimSK;

	// Token: 0x0400090E RID: 2318
	public static int columns = 6;

	// Token: 0x0400090F RID: 2319
	public static int rows;

	// Token: 0x04000910 RID: 2320
	private int totalRowInfo;

	// Token: 0x04000911 RID: 2321
	private int ypaintKill;

	// Token: 0x04000912 RID: 2322
	private int ylimUp;

	// Token: 0x04000913 RID: 2323
	private int ylimDow;

	// Token: 0x04000914 RID: 2324
	private int yPaint;

	// Token: 0x04000915 RID: 2325
	public static int indexEff = 0;

	// Token: 0x04000916 RID: 2326
	public static EffectCharPaint effUpok;

	// Token: 0x04000917 RID: 2327
	public static int inforX;

	// Token: 0x04000918 RID: 2328
	public static int inforY;

	// Token: 0x04000919 RID: 2329
	public static int inforW;

	// Token: 0x0400091A RID: 2330
	public static int inforH;

	// Token: 0x0400091B RID: 2331
	public Command cmdDead;

	// Token: 0x0400091C RID: 2332
	public static bool notPaint = false;

	// Token: 0x0400091D RID: 2333
	public static bool isPing = false;

	// Token: 0x0400091E RID: 2334
	public static int INFO = 0;

	// Token: 0x0400091F RID: 2335
	public static int STORE = 1;

	// Token: 0x04000920 RID: 2336
	public static int ZONE = 2;

	// Token: 0x04000921 RID: 2337
	public static int UPGRADE = 3;

	// Token: 0x04000922 RID: 2338
	private int Hitem = 30;

	// Token: 0x04000923 RID: 2339
	private int maxSizeRow = 5;

	// Token: 0x04000924 RID: 2340
	private int isTranKyNang;

	// Token: 0x04000925 RID: 2341
	private bool isTran;

	// Token: 0x04000926 RID: 2342
	private int cmY_Old;

	// Token: 0x04000927 RID: 2343
	private int cmX_Old;

	// Token: 0x04000928 RID: 2344
	public PopUpYesNo popUpYesNo;

	// Token: 0x04000929 RID: 2345
	public static MyVector vChatVip = new MyVector();

	// Token: 0x0400092A RID: 2346
	public static int vBig;

	// Token: 0x0400092B RID: 2347
	public bool isFireWorks;

	// Token: 0x0400092C RID: 2348
	public int[] winnumber;

	// Token: 0x0400092D RID: 2349
	public int[] randomNumber;

	// Token: 0x0400092E RID: 2350
	public int[] tMove;

	// Token: 0x0400092F RID: 2351
	public int[] moveCount;

	// Token: 0x04000930 RID: 2352
	public int[] delayMove;

	// Token: 0x04000931 RID: 2353
	public int moveIndex;

	// Token: 0x04000932 RID: 2354
	private bool isWin;

	// Token: 0x04000933 RID: 2355
	private string strFinish;

	// Token: 0x04000934 RID: 2356
	private int tShow;

	// Token: 0x04000935 RID: 2357
	private int xChatVip;

	// Token: 0x04000936 RID: 2358
	private int currChatWidth;

	// Token: 0x04000937 RID: 2359
	private bool startChat;

	// Token: 0x04000938 RID: 2360
	public sbyte percentMabu;

	// Token: 0x04000939 RID: 2361
	public bool mabuEff;

	// Token: 0x0400093A RID: 2362
	public int tMabuEff;

	// Token: 0x0400093B RID: 2363
	public static bool isPaintChatVip;

	// Token: 0x0400093C RID: 2364
	public static sbyte mabuPercent;

	// Token: 0x0400093D RID: 2365
	public static sbyte isNewMember;

	// Token: 0x0400093E RID: 2366
	private string yourNumber = string.Empty;

	// Token: 0x0400093F RID: 2367
	private string[] strPaint;

	// Token: 0x04000940 RID: 2368
	public static Image imgHP_NEW;

	// Token: 0x04000941 RID: 2369
	public static InfoPhuBan phuban_Info;

	// Token: 0x04000942 RID: 2370
	public static FrameImage fra_PVE_Bar_0;

	// Token: 0x04000943 RID: 2371
	public static FrameImage fra_PVE_Bar_1;

	// Token: 0x04000944 RID: 2372
	public static Image imgVS;

	// Token: 0x04000945 RID: 2373
	public static Image imgBall;

	// Token: 0x04000946 RID: 2374
	public static Image imgKhung;

	// Token: 0x04000947 RID: 2375
	public int countFrameSkill;

	// Token: 0x04000948 RID: 2376
	public static Image imgBgIOS;

	// Token: 0x04000949 RID: 2377
	public static int nCT_TeamB = 50;

	// Token: 0x0400094A RID: 2378
	public static int nCT_TeamA = 50;

	// Token: 0x0400094B RID: 2379
	public static long nCT_timeBallte;

	// Token: 0x0400094C RID: 2380
	public static string nCT_team;

	// Token: 0x0400094D RID: 2381
	public static int nCT_nBoyBaller = 100;

	// Token: 0x0400094E RID: 2382
	public static bool isPaint_CT;

	// Token: 0x0400094F RID: 2383
	public static sbyte nCT_floor;

	// Token: 0x04000950 RID: 2384
	public static bool is_Paint_boardCT_Expand;

	// Token: 0x04000951 RID: 2385
	private static int xRect;

	// Token: 0x04000952 RID: 2386
	private static int yRect;

	// Token: 0x04000953 RID: 2387
	private static int wRect;

	// Token: 0x04000954 RID: 2388
	private static int hRect;

	// Token: 0x04000955 RID: 2389
	public static MyVector res_CT = new MyVector();

	// Token: 0x04000956 RID: 2390
	public static int nTop = 1;

	// Token: 0x04000957 RID: 2391
	public static bool isPickNgocRong = false;

	// Token: 0x04000958 RID: 2392
	public static int nUSER_CT;

	// Token: 0x04000959 RID: 2393
	public static int nUSER_MAX_CT;

	// Token: 0x0400095A RID: 2394
	public static bool isudungCapsun;

	// Token: 0x0400095B RID: 2395
	public static bool isudungCapsun4;

	// Token: 0x0400095C RID: 2396
	public static bool isudungCapsun3;

	// Token: 0x0400095D RID: 2397
	public static long timehoichieubuff;

	// Token: 0x0400095E RID: 2398
	public static long timehoikhien;

	// Token: 0x0400095F RID: 2399
	public static long timehoiskill3;

	// Token: 0x04000960 RID: 2400
	public static long timehoiskill9;

	// Token: 0x04000961 RID: 2401
	public static long timehoibom;

	// Token: 0x04000962 RID: 2402
	public static long timehoithoimien;

	// Token: 0x04000963 RID: 2403
	public static long ccc1;

	// Token: 0x04000964 RID: 2404
	public static long ccc3;

	// Token: 0x04000965 RID: 2405
	public static long ccc5;
}
using System;

// Token: 0x02000059 RID: 89
public class Hint
{
	// Token: 0x06000500 RID: 1280 RVA: 0x000614A4 File Offset: 0x0005F6A4
	public static bool isOnTask(int tastId, int index)
	{
		return global::Char.myCharz().taskMaint != null && (int)global::Char.myCharz().taskMaint.taskId == tastId && global::Char.myCharz().taskMaint.index == index;
	}

	// Token: 0x06000501 RID: 1281 RVA: 0x000614F4 File Offset: 0x0005F6F4
	public static bool isPaintz()
	{
		bool flag = Hint.isOnTask(0, 3) && GameCanvas.panel.currentTabIndex == 0 && (GameCanvas.panel.cmy < 0 || GameCanvas.panel.cmy > 30);
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = Hint.isOnTask(2, 0) && GameCanvas.panel.isShow && GameCanvas.panel.currentTabIndex != 0;
			result = !flag2;
		}
		return result;
	}

	// Token: 0x06000502 RID: 1282 RVA: 0x00061574 File Offset: 0x0005F774
	public static void clickNpc()
	{
		bool flag = GameCanvas.panel.isShow;
		if (flag)
		{
			Hint.isPaint = false;
		}
		bool flag2 = GameScr.getNpcTask() != null;
		if (flag2)
		{
			Hint.x = GameScr.getNpcTask().cx;
			Hint.y = GameScr.getNpcTask().cy;
			Hint.trans = 0;
			Hint.isCamera = true;
			Hint.type = (GameCanvas.isTouch ? 1 : 0);
		}
	}

	// Token: 0x06000503 RID: 1283 RVA: 0x000615E0 File Offset: 0x0005F7E0
	public static void nextMap(int index)
	{
		bool flag = !GameCanvas.panel.isShow && PopUp.vPopups.size() - 1 >= index;
		if (flag)
		{
			PopUp popUp = (PopUp)PopUp.vPopups.elementAt(index);
			Hint.x = popUp.cx + popUp.sayWidth / 2;
			Hint.y = popUp.cy + 30;
			bool flag2 = popUp.isHide || !popUp.isPaint;
			if (flag2)
			{
				Hint.isPaint = false;
			}
			else
			{
				Hint.isPaint = true;
			}
			Hint.type = 0;
			Hint.isCamera = true;
			Hint.trans = 0;
			bool flag3 = !GameCanvas.isTouch;
			if (flag3)
			{
				Hint.isPaint = false;
			}
		}
	}

	// Token: 0x06000504 RID: 1284 RVA: 0x0006169C File Offset: 0x0005F89C
	public static void clickMob()
	{
		Hint.type = 1;
		bool flag = GameCanvas.panel.isShow;
		if (flag)
		{
			Hint.isPaint = false;
		}
		bool flag2 = false;
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob = (Mob)GameScr.vMob.elementAt(i);
			bool isHintFocus = mob.isHintFocus;
			if (isHintFocus)
			{
				flag2 = true;
				break;
			}
		}
		for (int j = 0; j < GameScr.vMob.size(); j++)
		{
			Mob mob2 = (Mob)GameScr.vMob.elementAt(j);
			bool isHintFocus2 = mob2.isHintFocus;
			if (isHintFocus2)
			{
				Hint.x = mob2.x;
				Hint.y = mob2.y + 5;
				Hint.isCamera = true;
				bool flag3 = mob2.status == 0;
				if (flag3)
				{
					mob2.isHintFocus = false;
				}
				break;
			}
			bool flag4 = !flag2;
			if (flag4)
			{
				bool flag5 = mob2.status != 0;
				if (flag5)
				{
					mob2.isHintFocus = true;
					break;
				}
				mob2.isHintFocus = false;
			}
		}
	}

	// Token: 0x06000505 RID: 1285 RVA: 0x000617BC File Offset: 0x0005F9BC
	public static bool isHaveItem()
	{
		bool flag = GameCanvas.panel.isShow;
		if (flag)
		{
			Hint.isPaint = false;
		}
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag2 = itemMap.playerId == global::Char.myCharz().charID && itemMap.template.id == 73;
			if (flag2)
			{
				Hint.type = 1;
				Hint.x = itemMap.x;
				Hint.y = itemMap.y + 5;
				Hint.isCamera = true;
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000506 RID: 1286 RVA: 0x00061868 File Offset: 0x0005FA68
	public static void paintArrowPointToHint(mGraphics g)
	{
		try
		{
			bool flag = !Hint.isPaintArrow || (Hint.x > GameScr.cmx && Hint.x < GameScr.cmx + GameScr.gW && Hint.y > GameScr.cmy && Hint.y < GameScr.cmy + GameScr.gH) || GameCanvas.gameTick % 10 < 5 || ChatPopup.currChatPopup != null || ChatPopup.serverChatPopUp != null || GameCanvas.panel.isShow || !Hint.isCamera;
			if (!flag)
			{
				int num = Hint.x - global::Char.myCharz().cx;
				int num2 = Hint.y - global::Char.myCharz().cy;
				int num3 = 0;
				int num4 = 0;
				int arg = 0;
				bool flag2 = num > 0 && num2 >= 0;
				if (flag2)
				{
					bool flag3 = Res.abs(num) >= Res.abs(num2);
					if (flag3)
					{
						num3 = GameScr.gW - 10;
						num4 = GameScr.gH / 2 + 30;
						bool isTouch = GameCanvas.isTouch;
						if (isTouch)
						{
							num4 = GameScr.gH / 2 + 10;
						}
						arg = 0;
					}
					else
					{
						num3 = GameScr.gW / 2;
						num4 = GameScr.gH - 10;
						arg = 5;
					}
				}
				else
				{
					bool flag4 = num >= 0 && num2 < 0;
					if (flag4)
					{
						bool flag5 = Res.abs(num) >= Res.abs(num2);
						if (flag5)
						{
							num3 = GameScr.gW - 10;
							num4 = GameScr.gH / 2 + 30;
							bool isTouch2 = GameCanvas.isTouch;
							if (isTouch2)
							{
								num4 = GameScr.gH / 2 + 10;
							}
							arg = 0;
						}
						else
						{
							num3 = GameScr.gW / 2;
							num4 = 10;
							arg = 6;
						}
					}
				}
				bool flag6 = num < 0 && num2 >= 0;
				if (flag6)
				{
					bool flag7 = Res.abs(num) >= Res.abs(num2);
					if (flag7)
					{
						num3 = 10;
						num4 = GameScr.gH / 2 + 30;
						bool isTouch3 = GameCanvas.isTouch;
						if (isTouch3)
						{
							num4 = GameScr.gH / 2 + 10;
						}
						arg = 3;
					}
					else
					{
						num3 = GameScr.gW / 2;
						num4 = GameScr.gH - 10;
						arg = 5;
					}
				}
				else
				{
					bool flag8 = num <= 0 && num2 < 0;
					if (flag8)
					{
						bool flag9 = Res.abs(num) >= Res.abs(num2);
						if (flag9)
						{
							num3 = 10;
							num4 = GameScr.gH / 2 + 30;
							bool isTouch4 = GameCanvas.isTouch;
							if (isTouch4)
							{
								num4 = GameScr.gH / 2 + 10;
							}
							arg = 3;
						}
						else
						{
							num3 = GameScr.gW / 2;
							num4 = 10;
							arg = 6;
						}
					}
				}
				GameScr.resetTranslate(g);
				g.drawRegion(GameScr.arrow, 0, 0, 13, 16, arg, num3, num4, StaticObj.VCENTER_HCENTER);
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000507 RID: 1287 RVA: 0x00061B24 File Offset: 0x0005FD24
	public static void paint(mGraphics g)
	{
		bool flag = ChatPopup.serverChatPopUp != null || global::Char.myCharz().isUsePlane || global::Char.myCharz().isTeleport;
		if (!flag)
		{
			Hint.paintArrowPointToHint(g);
			bool flag2 = GameCanvas.menu.tDelay == 0 && Hint.isPaint && ChatPopup.scr == null && !global::Char.ischangingMap && GameCanvas.currentScreen == GameScr.gI() && (!GameCanvas.panel.isShow || GameCanvas.panel.cmx == 0);
			if (flag2)
			{
				bool flag3 = Hint.isCamera;
				if (flag3)
				{
					g.translate(-GameScr.cmx, -GameScr.cmy);
				}
				bool flag4 = Hint.trans == 0;
				if (flag4)
				{
					g.drawImage(Panel.imgBantay, Hint.x - 15, Hint.y, 0);
				}
				bool flag5 = Hint.trans == 1;
				if (flag5)
				{
					g.drawRegion(Panel.imgBantay, 0, 0, 14, 16, 2, Hint.x + 15, Hint.y, StaticObj.TOP_RIGHT);
				}
				bool flag6 = Hint.paintFlare;
				if (flag6)
				{
					g.drawImage(ItemMap.imageFlare, Hint.x, Hint.y, 3);
				}
			}
		}
	}

	// Token: 0x06000508 RID: 1288 RVA: 0x00061C58 File Offset: 0x0005FE58
	public static void hint()
	{
		bool flag = global::Char.myCharz().taskMaint != null && GameCanvas.currentScreen == GameScr.instance;
		if (flag)
		{
			int taskId = (int)global::Char.myCharz().taskMaint.taskId;
			int index = global::Char.myCharz().taskMaint.index;
			Hint.isCamera = false;
			Hint.trans = 0;
			Hint.type = 0;
			Hint.isPaint = true;
			Hint.isPaintArrow = true;
			bool flag2 = GameCanvas.menu.showMenu && taskId > 0;
			if (flag2)
			{
				Hint.isPaint = false;
			}
			switch (taskId)
			{
			case 0:
			{
				bool flag3 = ChatPopup.currChatPopup != null || global::Char.myCharz().statusMe == 14;
				if (flag3)
				{
					Hint.x = GameCanvas.w / 2;
					Hint.y = GameCanvas.h - 15;
				}
				else
				{
					bool flag4 = index == 0 && TileMap.vGo.size() != 0;
					if (flag4)
					{
						Hint.x = (int)(((Waypoint)TileMap.vGo.elementAt(0)).minX - 100);
						Hint.y = (int)(((Waypoint)TileMap.vGo.elementAt(0)).minY + 40);
						Hint.isCamera = true;
					}
					bool flag5 = index == 1;
					if (flag5)
					{
						Hint.nextMap(0);
					}
					bool flag6 = index == 2;
					if (flag6)
					{
						Hint.clickNpc();
					}
					bool flag7 = index == 3;
					if (flag7)
					{
						bool flag8 = !GameCanvas.panel.isShow;
						if (flag8)
						{
							Hint.clickNpc();
						}
						else
						{
							bool flag9 = GameCanvas.panel.currentTabIndex == 0;
							if (flag9)
							{
								bool flag10 = GameCanvas.panel.cp == null;
								if (flag10)
								{
									Hint.x = GameCanvas.panel.xScroll + GameCanvas.panel.wScroll / 2;
									Hint.y = GameCanvas.panel.yScroll + 20;
								}
								else
								{
									bool flag11 = GameCanvas.menu.tDelay != 0;
									if (flag11)
									{
										Hint.x = GameCanvas.panel.xScroll + 25;
										Hint.y = GameCanvas.panel.yScroll + 60;
									}
								}
							}
							else
							{
								bool flag12 = GameCanvas.panel.currentTabIndex == 1;
								if (flag12)
								{
									Hint.x = GameCanvas.panel.startTabPos + 10;
									Hint.y = 65;
								}
							}
						}
					}
					bool flag13 = index == 4;
					if (flag13)
					{
						bool flag14 = GameCanvas.panel.isShow;
						if (flag14)
						{
							Hint.x = GameCanvas.panel.cmdClose.x + 5;
							Hint.y = GameCanvas.panel.cmdClose.y + 5;
						}
						else
						{
							bool showMenu = GameCanvas.menu.showMenu;
							if (showMenu)
							{
								Hint.x = GameCanvas.w / 2;
								Hint.y = GameCanvas.h - 20;
							}
							else
							{
								Hint.clickNpc();
							}
						}
					}
					bool flag15 = index == 5;
					if (flag15)
					{
						Hint.clickNpc();
					}
				}
				break;
			}
			case 1:
			{
				bool flag16 = ChatPopup.currChatPopup != null || global::Char.myCharz().statusMe == 14;
				if (flag16)
				{
					Hint.x = GameCanvas.w / 2;
					Hint.y = GameCanvas.h - 15;
				}
				else
				{
					bool flag17 = index == 0;
					if (flag17)
					{
						bool flag18 = TileMap.isOfflineMap();
						if (flag18)
						{
							Hint.nextMap(0);
						}
						else
						{
							Hint.clickMob();
						}
					}
					bool flag19 = index == 1;
					if (flag19)
					{
						bool flag20 = !TileMap.isOfflineMap();
						if (flag20)
						{
							Hint.nextMap(1);
						}
						else
						{
							Hint.clickNpc();
						}
					}
				}
				break;
			}
			case 2:
			{
				bool flag21 = ChatPopup.currChatPopup != null || global::Char.myCharz().statusMe == 14;
				if (flag21)
				{
					Hint.x = GameCanvas.w / 2;
					Hint.y = GameCanvas.h - 15;
				}
				else
				{
					bool flag22 = index == 0;
					if (flag22)
					{
						bool flag23 = !TileMap.isOfflineMap();
						if (flag23)
						{
							Hint.isViewMap = true;
						}
						bool flag24 = !GameCanvas.panel.isShow;
						if (flag24)
						{
							bool flag25 = !Hint.isViewMap;
							if (flag25)
							{
								Hint.x = GameScr.gI().cmdMenu.x;
								Hint.y = GameScr.gI().cmdMenu.y + 13;
								Hint.trans = 1;
							}
							else
							{
								bool flag26 = GameScr.getTaskMapId() == TileMap.mapID;
								if (flag26)
								{
									bool flag27 = !Hint.isHaveItem();
									if (flag27)
									{
										Hint.clickMob();
									}
								}
								else
								{
									Hint.nextMap(0);
								}
								bool flag28 = Hint.isViewMap;
								if (flag28)
								{
									Hint.isCloseMap = true;
								}
							}
						}
						else
						{
							bool flag29 = !Hint.isViewMap;
							if (flag29)
							{
								bool flag30 = GameCanvas.panel.currentTabIndex == 0;
								if (flag30)
								{
									int num = (GameCanvas.h <= 300) ? 10 : 15;
									Hint.x = GameCanvas.panel.xScroll + GameCanvas.panel.wScroll / 2;
									Hint.y = GameCanvas.panel.yScroll + GameCanvas.panel.hScroll - num;
								}
								else
								{
									Hint.x = GameCanvas.panel.startTabPos + 10;
									Hint.y = 65;
								}
							}
							else
							{
								bool flag31 = !Hint.isCloseMap;
								if (flag31)
								{
									Hint.x = GameCanvas.panel.cmdClose.x + 5;
									Hint.y = GameCanvas.panel.cmdClose.y + 5;
								}
								else
								{
									Hint.isPaint = false;
								}
							}
						}
						bool flag32 = global::Char.myCharz().cMP <= 0L;
						if (flag32)
						{
							Hint.x = GameScr.xHP + 5;
							Hint.y = GameScr.yHP + 13;
							Hint.isCamera = false;
						}
					}
					bool flag33 = index == 1;
					if (flag33)
					{
						Hint.isPaint = false;
						Hint.isPaintArrow = false;
					}
				}
				break;
			}
			case 3:
			{
				bool flag34 = ChatPopup.currChatPopup != null || global::Char.myCharz().statusMe == 14;
				if (flag34)
				{
					Hint.x = GameCanvas.w / 2;
					Hint.y = GameCanvas.h - 15;
				}
				else
				{
					bool flag35 = index == 0;
					if (flag35)
					{
						bool flag36 = !GameCanvas.panel.isShow;
						if (flag36)
						{
							bool flag37 = !Hint.isViewPotential;
							if (flag37)
							{
								Hint.x = GameScr.gI().cmdMenu.x;
								Hint.y = GameScr.gI().cmdMenu.y + 13;
								Hint.trans = 1;
							}
							else
							{
								bool flag38 = GameScr.getTaskMapId() == TileMap.mapID;
								if (flag38)
								{
									bool flag39 = !Hint.isHaveItem();
									if (flag39)
									{
										Hint.clickMob();
									}
								}
								else
								{
									Hint.nextMap(0);
								}
								bool flag40 = Hint.isViewMap;
								if (flag40)
								{
									Hint.isCloseMap = true;
								}
							}
						}
						else
						{
							bool flag41 = !Hint.isViewPotential;
							if (flag41)
							{
								int num2 = (GameCanvas.h <= 300) ? 10 : 15;
								Hint.x = GameCanvas.panel.xScroll + 10 + 108 - 18;
								Hint.y = 65;
							}
							else
							{
								bool flag42 = !Hint.isCloseMap;
								if (flag42)
								{
									Hint.x = GameCanvas.panel.cmdClose.x + 5;
									Hint.y = GameCanvas.panel.cmdClose.y + 5;
								}
								else
								{
									Hint.isPaint = false;
								}
							}
						}
						bool flag43 = global::Char.myCharz().cMP <= 0L;
						if (flag43)
						{
							Hint.x = GameScr.xHP + 5;
							Hint.y = GameScr.yHP + 13;
							Hint.isCamera = false;
						}
					}
					else
					{
						Hint.isPaint = false;
						Hint.isPaintArrow = false;
					}
				}
				break;
			}
			default:
			{
				bool flag44 = global::Char.myCharz().taskMaint.taskId == 9 && global::Char.myCharz().taskMaint.index == 2;
				if (flag44)
				{
					for (int i = 0; i < PopUp.vPopups.size(); i++)
					{
						PopUp popUp = (PopUp)PopUp.vPopups.elementAt(i);
						bool flag45 = popUp.cy <= 24;
						if (flag45)
						{
							Hint.x = popUp.cx + popUp.sayWidth / 2;
							Hint.y = popUp.cy + 30;
							Hint.isCamera = true;
							Hint.isPaint = false;
							Hint.isPaintArrow = true;
							return;
						}
					}
				}
				Hint.isPaint = false;
				Hint.isPaintArrow = false;
				break;
			}
			}
		}
		else
		{
			Hint.isPaint = false;
			Hint.isPaintArrow = false;
		}
	}

	// Token: 0x06000509 RID: 1289 RVA: 0x000624C8 File Offset: 0x000606C8
	public static void update()
	{
		Hint.hint();
		int num = (Hint.trans != 0) ? -2 : 2;
		bool flag = !Hint.activeClick;
		if (flag)
		{
			Hint.paintFlare = false;
			Hint.t++;
			bool flag2 = Hint.t == 50;
			if (flag2)
			{
				Hint.t = 0;
				Hint.activeClick = true;
			}
		}
		else
		{
			Hint.t++;
			bool flag3 = Hint.type == 0;
			if (flag3)
			{
				bool flag4 = Hint.t == 2;
				if (flag4)
				{
					Hint.x += 2 * num;
					Hint.y -= 4;
					Hint.paintFlare = true;
				}
				bool flag5 = Hint.t == 4;
				if (flag5)
				{
					Hint.x -= 2 * num;
					Hint.y += 4;
					Hint.activeClick = false;
					Hint.paintFlare = false;
					Hint.t = 0;
				}
				bool flag6 = Hint.t > 4;
				if (flag6)
				{
					Hint.activeClick = false;
				}
			}
			bool flag7 = Hint.type != 1;
			if (!flag7)
			{
				bool flag8 = Hint.t == 2;
				if (flag8)
				{
					bool isTouch = GameCanvas.isTouch;
					if (isTouch)
					{
						GameScr.startFlyText(mResources.press_twice, Hint.x, Hint.y + 10, 0, 20, mFont.MISS_ME);
					}
					Hint.paintFlare = true;
					Hint.x += 2 * num;
					Hint.y -= 4;
				}
				bool flag9 = Hint.t == 4;
				if (flag9)
				{
					Hint.paintFlare = false;
					Hint.x -= num;
					Hint.y += 2;
				}
				bool flag10 = Hint.t == 6;
				if (flag10)
				{
					Hint.paintFlare = true;
					Hint.x += num;
					Hint.y -= 2;
				}
				bool flag11 = Hint.t == 8;
				if (flag11)
				{
					Hint.paintFlare = false;
					Hint.x -= num;
					Hint.y += 2;
				}
				bool flag12 = Hint.t == 10;
				if (flag12)
				{
					Hint.x -= num;
					Hint.y += 2;
					Hint.activeClick = false;
					Hint.t = 0;
				}
			}
		}
	}

	// Token: 0x04000966 RID: 2406
	public static int x;

	// Token: 0x04000967 RID: 2407
	public static int y;

	// Token: 0x04000968 RID: 2408
	public static int type;

	// Token: 0x04000969 RID: 2409
	public static int t;

	// Token: 0x0400096A RID: 2410
	public static int xF;

	// Token: 0x0400096B RID: 2411
	public static int yF;

	// Token: 0x0400096C RID: 2412
	public static bool isShow;

	// Token: 0x0400096D RID: 2413
	public static bool activeClick;

	// Token: 0x0400096E RID: 2414
	public static bool isViewMap;

	// Token: 0x0400096F RID: 2415
	public static bool isCloseMap;

	// Token: 0x04000970 RID: 2416
	public static bool isViewPotential;

	// Token: 0x04000971 RID: 2417
	public static bool isPaint;

	// Token: 0x04000972 RID: 2418
	public static bool isCamera;

	// Token: 0x04000973 RID: 2419
	public static int trans;

	// Token: 0x04000974 RID: 2420
	public static bool paintFlare;

	// Token: 0x04000975 RID: 2421
	public static bool isPaintArrow;

	// Token: 0x04000976 RID: 2422
	private int s = 2;
}
using System;

// Token: 0x0200005A RID: 90
internal interface HTTPHandler
{
	// Token: 0x0600050B RID: 1291
	void onGetText(string s);
}
using System;

// Token: 0x0200005B RID: 91
public interface IActionListener
{
	// Token: 0x0600050C RID: 1292
	void perform(int idAction, object p);
}
using System;

// Token: 0x0200005C RID: 92
public interface IChatable
{
	// Token: 0x0600050D RID: 1293
	void onChatFromMe(string text, string to);

	// Token: 0x0600050E RID: 1294
	void onCancelChat();
}
using System;

// Token: 0x0200005D RID: 93
public interface IKbAction
{
	// Token: 0x0600050F RID: 1295
	void perform(string text);
}
using System;
using System.Threading;
using UnityEngine;

// Token: 0x0200005E RID: 94
public class Image
{
	// Token: 0x06000510 RID: 1296 RVA: 0x0006270C File Offset: 0x0006090C
	public static Image createEmptyImage()
	{
		return Image.__createEmptyImage();
	}

	// Token: 0x06000511 RID: 1297 RVA: 0x00062724 File Offset: 0x00060924
	public static Image createImage(string filename)
	{
		return Image.__createImage(filename);
	}

	// Token: 0x06000512 RID: 1298 RVA: 0x0006273C File Offset: 0x0006093C
	public static Image createImage(byte[] imageData)
	{
		return Image.__createImage(imageData);
	}

	// Token: 0x06000513 RID: 1299 RVA: 0x00062754 File Offset: 0x00060954
	public static Image createImage(Image src, int x, int y, int w, int h, int transform)
	{
		return Image.__createImage(src, x, y, w, h, transform);
	}

	// Token: 0x06000514 RID: 1300 RVA: 0x00062774 File Offset: 0x00060974
	public static Image createImage(int w, int h)
	{
		return Image.__createImage(w, h);
	}

	// Token: 0x06000515 RID: 1301 RVA: 0x00062790 File Offset: 0x00060990
	public static Image createImage(Image img)
	{
		Image image = Image.createImage(img.w, img.h);
		image.texture = img.texture;
		image.texture.Apply();
		return image;
	}

	// Token: 0x06000516 RID: 1302 RVA: 0x000627D0 File Offset: 0x000609D0
	public static Image createImage(sbyte[] imageData, int offset, int lenght)
	{
		bool flag = offset + lenght > imageData.Length;
		Image result;
		if (flag)
		{
			result = null;
		}
		else
		{
			byte[] array = new byte[lenght];
			for (int i = 0; i < lenght; i++)
			{
				array[i] = Image.convertSbyteToByte(imageData[i + offset]);
			}
			result = Image.createImage(array);
		}
		return result;
	}

	// Token: 0x06000517 RID: 1303 RVA: 0x00062824 File Offset: 0x00060A24
	public static byte convertSbyteToByte(sbyte var)
	{
		bool flag = var > 0;
		byte result;
		if (flag)
		{
			result = (byte)var;
		}
		else
		{
			result = (byte)((int)var + 256);
		}
		return result;
	}

	// Token: 0x06000518 RID: 1304 RVA: 0x0006284C File Offset: 0x00060A4C
	public static byte[] convertArrSbyteToArrByte(sbyte[] var)
	{
		byte[] array = new byte[var.Length];
		for (int i = 0; i < var.Length; i++)
		{
			bool flag = var[i] > 0;
			if (flag)
			{
				array[i] = (byte)var[i];
			}
			else
			{
				array[i] = (byte)((int)var[i] + 256);
			}
		}
		return array;
	}

	// Token: 0x06000519 RID: 1305 RVA: 0x000628A4 File Offset: 0x00060AA4
	public static Image createRGBImage(int[] rbg, int w, int h, bool bl)
	{
		Image image = Image.createImage(w, h);
		Color[] array = new Color[rbg.Length];
		for (int i = 0; i < array.Length; i++)
		{
			ref Color ptr = ref array[i];
			ptr = Image.setColorFromRBG(rbg[i]);
		}
		image.texture.SetPixels(0, 0, w, h, array);
		image.texture.Apply();
		return image;
	}

	// Token: 0x0600051A RID: 1306 RVA: 0x00062914 File Offset: 0x00060B14
	public static Color setColorFromRBG(int rgb)
	{
		int num = rgb & 255;
		int num2 = rgb >> 8 & 255;
		int num3 = rgb >> 16 & 255;
		float b = (float)num / 256f;
		float g = (float)num2 / 256f;
		float r = (float)num3 / 256f;
		return new Color(r, g, b);
	}

	// Token: 0x0600051B RID: 1307 RVA: 0x0006296C File Offset: 0x00060B6C
	public static void update()
	{
		bool flag = Image.status == 2;
		if (flag)
		{
			Image.status = 1;
			Image.imgTemp = Image.__createEmptyImage();
			Image.status = 0;
		}
		else
		{
			bool flag2 = Image.status == 3;
			if (flag2)
			{
				Image.status = 1;
				Image.imgTemp = Image.__createImage(Image.filenametemp);
				Image.status = 0;
			}
			else
			{
				bool flag3 = Image.status == 4;
				if (flag3)
				{
					Image.status = 1;
					Image.imgTemp = Image.__createImage(Image.datatemp);
					Image.status = 0;
				}
				else
				{
					bool flag4 = Image.status == 5;
					if (flag4)
					{
						Image.status = 1;
						Image.imgTemp = Image.__createImage(Image.imgSrcTemp, Image.xtemp, Image.ytemp, Image.wtemp, Image.htemp, Image.transformtemp);
						Image.status = 0;
					}
					else
					{
						bool flag5 = Image.status == 6;
						if (flag5)
						{
							Image.status = 1;
							Image.imgTemp = Image.__createImage(Image.wtemp, Image.htemp);
							Image.status = 0;
						}
					}
				}
			}
		}
	}

	// Token: 0x0600051C RID: 1308 RVA: 0x00062A70 File Offset: 0x00060C70
	private static Image _createEmptyImage()
	{
		bool flag = Image.status != 0;
		Image result;
		if (flag)
		{
			Cout.LogError("CANNOT CREATE EMPTY IMAGE WHEN CREATING OTHER IMAGE");
			result = null;
		}
		else
		{
			Image.imgTemp = null;
			Image.status = 2;
			int i;
			for (i = 0; i < 500; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Image.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 500;
			if (flag3)
			{
				Cout.LogError("TOO LONG FOR CREATE EMPTY IMAGE");
				Image.status = 0;
			}
			result = Image.imgTemp;
		}
		return result;
	}

	// Token: 0x0600051D RID: 1309 RVA: 0x00062B00 File Offset: 0x00060D00
	private static Image _createImage(string filename)
	{
		bool flag = Image.status != 0;
		Image result;
		if (flag)
		{
			Cout.LogError("CANNOT CREATE IMAGE " + filename + " WHEN CREATING OTHER IMAGE");
			result = null;
		}
		else
		{
			Image.imgTemp = null;
			Image.filenametemp = filename;
			Image.status = 3;
			int i;
			for (i = 0; i < 500; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Image.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 500;
			if (flag3)
			{
				Cout.LogError("TOO LONG FOR CREATE IMAGE " + filename);
				Image.status = 0;
			}
			result = Image.imgTemp;
		}
		return result;
	}

	// Token: 0x0600051E RID: 1310 RVA: 0x00062BA8 File Offset: 0x00060DA8
	private static Image _createImage(byte[] imageData)
	{
		bool flag = Image.status != 0;
		Image result;
		if (flag)
		{
			Cout.LogError("CANNOT CREATE IMAGE(FromArray) WHEN CREATING OTHER IMAGE");
			result = null;
		}
		else
		{
			Image.imgTemp = null;
			Image.datatemp = imageData;
			Image.status = 4;
			int i;
			for (i = 0; i < 500; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Image.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 500;
			if (flag3)
			{
				Cout.LogError("TOO LONG FOR CREATE IMAGE(FromArray)");
				Image.status = 0;
			}
			result = Image.imgTemp;
		}
		return result;
	}

	// Token: 0x0600051F RID: 1311 RVA: 0x00062C3C File Offset: 0x00060E3C
	private static Image _createImage(Image src, int x, int y, int w, int h, int transform)
	{
		bool flag = Image.status != 0;
		Image result;
		if (flag)
		{
			Cout.LogError("CANNOT CREATE IMAGE(FromSrcPart) WHEN CREATING OTHER IMAGE");
			result = null;
		}
		else
		{
			Image.imgTemp = null;
			Image.imgSrcTemp = src;
			Image.xtemp = x;
			Image.ytemp = y;
			Image.wtemp = w;
			Image.htemp = h;
			Image.transformtemp = transform;
			Image.status = 5;
			int i;
			for (i = 0; i < 500; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Image.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 500;
			if (flag3)
			{
				Cout.LogError("TOO LONG FOR CREATE IMAGE(FromSrcPart)");
				Image.status = 0;
			}
			result = Image.imgTemp;
		}
		return result;
	}

	// Token: 0x06000520 RID: 1312 RVA: 0x00062CF4 File Offset: 0x00060EF4
	private static Image _createImage(int w, int h)
	{
		bool flag = Image.status != 0;
		Image result;
		if (flag)
		{
			Cout.LogError("CANNOT CREATE IMAGE(w,h) WHEN CREATING OTHER IMAGE");
			result = null;
		}
		else
		{
			Image.imgTemp = null;
			Image.wtemp = w;
			Image.htemp = h;
			Image.status = 6;
			int i;
			for (i = 0; i < 500; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Image.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 500;
			if (flag3)
			{
				Cout.LogError("TOO LONG FOR CREATE IMAGE(w,h)");
				Image.status = 0;
			}
			result = Image.imgTemp;
		}
		return result;
	}

	// Token: 0x06000521 RID: 1313 RVA: 0x00062D90 File Offset: 0x00060F90
	public static byte[] loadData(string filename)
	{
		Image image = new Image();
		TextAsset textAsset = (TextAsset)Resources.Load(filename, typeof(TextAsset));
		bool flag = textAsset == null || textAsset.bytes == null || textAsset.bytes.Length == 0;
		if (flag)
		{
			throw new Exception("NULL POINTER EXCEPTION AT Image __createImage " + filename);
		}
		sbyte[] array = ArrayCast.cast(textAsset.bytes);
		Debug.LogError("CHIEU DAI MANG BYTE IMAGE CREAT = " + array.Length.ToString());
		return textAsset.bytes;
	}

	// Token: 0x06000522 RID: 1314 RVA: 0x00062E24 File Offset: 0x00061024
	private static Image __createImage(string filename)
	{
		Image image = new Image();
		Texture2D x = Resources.Load(filename) as Texture2D;
		bool flag = x == null;
		if (flag)
		{
			throw new Exception("NULL POINTER EXCEPTION AT Image __createImage " + filename);
		}
		image.texture = x;
		image.w = image.texture.width;
		image.h = image.texture.height;
		Image.setTextureQuality(image);
		return image;
	}

	// Token: 0x06000523 RID: 1315 RVA: 0x00062E98 File Offset: 0x00061098
	private static Image __createImage(byte[] imageData)
	{
		bool flag = imageData == null || imageData.Length == 0;
		Image result;
		if (flag)
		{
			Cout.LogError("Create Image from byte array fail");
			result = null;
		}
		else
		{
			Image image = new Image();
			try
			{
				image.texture.LoadImage(imageData);
				image.w = image.texture.width;
				image.h = image.texture.height;
				Image.setTextureQuality(image);
			}
			catch (Exception)
			{
				Cout.LogError("CREAT IMAGE FROM ARRAY FAIL \n" + Environment.StackTrace);
			}
			result = image;
		}
		return result;
	}

	// Token: 0x06000524 RID: 1316 RVA: 0x00062F34 File Offset: 0x00061134
	private static Image __createImage(Image src, int x, int y, int w, int h, int transform)
	{
		Image image = new Image();
		image.texture = new Texture2D(w, h);
		y = src.texture.height - y - h;
		for (int i = 0; i < w; i++)
		{
			for (int j = 0; j < h; j++)
			{
				int num = i;
				bool flag = transform == 2;
				if (flag)
				{
					num = w - i;
				}
				int num2 = j;
				image.texture.SetPixel(i, j, src.texture.GetPixel(x + num, y + num2));
			}
		}
		image.texture.Apply();
		image.w = image.texture.width;
		image.h = image.texture.height;
		Image.setTextureQuality(image);
		return image;
	}

	// Token: 0x06000525 RID: 1317 RVA: 0x00063004 File Offset: 0x00061204
	private static Image __createEmptyImage()
	{
		return new Image();
	}

	// Token: 0x06000526 RID: 1318 RVA: 0x0006301C File Offset: 0x0006121C
	public static Image __createImage(int w, int h)
	{
		Image image = new Image();
		image.texture = new Texture2D(w, h, TextureFormat.RGBA32, false);
		Image.setTextureQuality(image);
		image.w = w;
		image.h = h;
		image.texture.Apply();
		return image;
	}

	// Token: 0x06000527 RID: 1319 RVA: 0x00063068 File Offset: 0x00061268
	public static int getImageWidth(Image image)
	{
		return image.getWidth();
	}

	// Token: 0x06000528 RID: 1320 RVA: 0x00063080 File Offset: 0x00061280
	public static int getImageHeight(Image image)
	{
		return image.getHeight();
	}

	// Token: 0x06000529 RID: 1321 RVA: 0x00063098 File Offset: 0x00061298
	public int getWidth()
	{
		return this.w / mGraphics.zoomLevel;
	}

	// Token: 0x0600052A RID: 1322 RVA: 0x000630B8 File Offset: 0x000612B8
	public int getHeight()
	{
		return this.h / mGraphics.zoomLevel;
	}

	// Token: 0x0600052B RID: 1323 RVA: 0x000630D6 File Offset: 0x000612D6
	private static void setTextureQuality(Image img)
	{
		Image.setTextureQuality(img.texture);
	}

	// Token: 0x0600052C RID: 1324 RVA: 0x000630E5 File Offset: 0x000612E5
	public static void setTextureQuality(Texture2D texture)
	{
		texture.anisoLevel = 0;
		texture.filterMode = FilterMode.Point;
		texture.mipMapBias = 0f;
		texture.wrapMode = TextureWrapMode.Clamp;
	}

	// Token: 0x0600052D RID: 1325 RVA: 0x0006310C File Offset: 0x0006130C
	public Color[] getColor()
	{
		return this.texture.GetPixels();
	}

	// Token: 0x0600052E RID: 1326 RVA: 0x0006312C File Offset: 0x0006132C
	public int getRealImageWidth()
	{
		return this.w;
	}

	// Token: 0x0600052F RID: 1327 RVA: 0x00063144 File Offset: 0x00061344
	public int getRealImageHeight()
	{
		return this.h;
	}

	// Token: 0x06000530 RID: 1328 RVA: 0x0006315C File Offset: 0x0006135C
	public void getRGB(ref int[] data, int x1, int x2, int x, int y, int w, int h)
	{
		Color[] pixels = this.texture.GetPixels(x, this.h - 1 - y, w, h);
		for (int i = 0; i < pixels.Length; i++)
		{
			data[i] = mGraphics.getIntByColor(pixels[i]);
		}
	}

	// Token: 0x04000977 RID: 2423
	private const int INTERVAL = 5;

	// Token: 0x04000978 RID: 2424
	private const int MAXTIME = 500;

	// Token: 0x04000979 RID: 2425
	public Texture2D texture = new Texture2D(1, 1);

	// Token: 0x0400097A RID: 2426
	public static Image imgTemp;

	// Token: 0x0400097B RID: 2427
	public static string filenametemp;

	// Token: 0x0400097C RID: 2428
	public static byte[] datatemp;

	// Token: 0x0400097D RID: 2429
	public static Image imgSrcTemp;

	// Token: 0x0400097E RID: 2430
	public static int xtemp;

	// Token: 0x0400097F RID: 2431
	public static int ytemp;

	// Token: 0x04000980 RID: 2432
	public static int wtemp;

	// Token: 0x04000981 RID: 2433
	public static int htemp;

	// Token: 0x04000982 RID: 2434
	public static int transformtemp;

	// Token: 0x04000983 RID: 2435
	public int w;

	// Token: 0x04000984 RID: 2436
	public int h;

	// Token: 0x04000985 RID: 2437
	public static int status;

	// Token: 0x04000986 RID: 2438
	public Color colorBlend = Color.black;
}
using System;

// Token: 0x0200005F RID: 95
public class ImageInfo
{
	// Token: 0x04000987 RID: 2439
	public int ID;

	// Token: 0x04000988 RID: 2440
	public int x;

	// Token: 0x04000989 RID: 2441
	public int y;

	// Token: 0x0400098A RID: 2442
	public int x0;

	// Token: 0x0400098B RID: 2443
	public int y0;

	// Token: 0x0400098C RID: 2444
	public int w;

	// Token: 0x0400098D RID: 2445
	public int h;
}
using System;

// Token: 0x02000060 RID: 96
public interface IMapObject
{
	// Token: 0x06000533 RID: 1331
	int getX();

	// Token: 0x06000534 RID: 1332
	int getY();

	// Token: 0x06000535 RID: 1333
	int getW();

	// Token: 0x06000536 RID: 1334
	int getH();

	// Token: 0x06000537 RID: 1335
	void stopMoving();

	// Token: 0x06000538 RID: 1336
	bool isInvisible();
}
using System;

// Token: 0x02000061 RID: 97
public interface IMessageHandler
{
	// Token: 0x06000539 RID: 1337
	void onMessage(Message message);

	// Token: 0x0600053A RID: 1338
	void onConnectionFail(bool isMain);

	// Token: 0x0600053B RID: 1339
	void onDisconnected(bool isMain);

	// Token: 0x0600053C RID: 1340
	void onConnectOK(bool isMain);
}
using System;
using System.Collections;
using UnityEngine;

// Token: 0x02000062 RID: 98
public class ImgByName
{
	// Token: 0x0600053D RID: 1341 RVA: 0x000631D5 File Offset: 0x000613D5
	public static void SetImage(string name, Image img, sbyte nFrame)
	{
		ImgByName.hashImagePath.put(string.Empty + name, new MainImage(img, nFrame));
	}

	// Token: 0x0600053E RID: 1342 RVA: 0x000631F8 File Offset: 0x000613F8
	public static MainImage getImagePath(string nameImg, MyHashTable hash)
	{
		MainImage mainImage = (MainImage)hash.get(string.Empty + nameImg);
		bool flag = mainImage == null;
		if (flag)
		{
			mainImage = new MainImage();
			MainImage fromRms = ImgByName.getFromRms(nameImg);
			bool flag2 = fromRms != null;
			if (flag2)
			{
				mainImage.img = fromRms.img;
				mainImage.nFrame = fromRms.nFrame;
			}
			hash.put(string.Empty + nameImg, mainImage);
		}
		mainImage.count = GameCanvas.timeNow / 1000L;
		bool flag3 = mainImage.img == null;
		if (flag3)
		{
			mainImage.timeImageNull--;
			bool flag4 = mainImage.timeImageNull <= 0;
			if (flag4)
			{
				Service.gI().getImgByName(nameImg);
				mainImage.timeImageNull = 200;
			}
		}
		return mainImage;
	}

	// Token: 0x0600053F RID: 1343 RVA: 0x000632CC File Offset: 0x000614CC
	public static MainImage getFromRms(string nameImg)
	{
		string text = mGraphics.zoomLevel.ToString() + "ImgByName_" + nameImg;
		MainImage mainImage = null;
		sbyte[] array = Rms.loadRMS(text);
		bool flag = array == null;
		MainImage result;
		if (flag)
		{
			result = mainImage;
		}
		else
		{
			try
			{
				mainImage = new MainImage();
				mainImage.nFrame = array[0];
				mainImage.img = Image.createImage(array, 1, array.Length - 1);
				bool flag2 = mainImage.img != null;
				if (flag2)
				{
				}
			}
			catch (Exception)
			{
				Debug.LogError(text + ">>>>>getFromRms: nulllllllllll 2222");
				return null;
			}
			result = mainImage;
		}
		return result;
	}

	// Token: 0x06000540 RID: 1344 RVA: 0x00063370 File Offset: 0x00061570
	public static void saveRMS(string nameImg, sbyte nFrame, sbyte[] data)
	{
		string text = mGraphics.zoomLevel.ToString() + "ImgByName_" + nameImg;
		DataOutputStream dataOutputStream = new DataOutputStream(data.Length + 1);
		int i = 0;
		try
		{
			dataOutputStream.writeByte(nFrame);
			for (i = 0; i < data.Length; i++)
			{
				dataOutputStream.writeByte(data[i]);
			}
			Rms.saveRMS(text, dataOutputStream.toByteArray());
			dataOutputStream.close();
		}
		catch (Exception ex)
		{
			Debug.LogError(string.Concat(new string[]
			{
				i.ToString(),
				">>Errr save rms: ",
				text,
				"  ",
				ex.ToString()
			}));
		}
	}

	// Token: 0x06000541 RID: 1345 RVA: 0x00063430 File Offset: 0x00061630
	public static void checkDelHash(MyHashTable hash, int minute, bool isTrue)
	{
		MyVector myVector = new MyVector("checkDelHash");
		if (isTrue)
		{
			hash.clear();
		}
		else
		{
			IDictionaryEnumerator enumerator = hash.GetEnumerator();
			while (enumerator.MoveNext())
			{
				MainImage mainImage = (MainImage)enumerator.Value;
				bool flag = GameCanvas.timeNow / 1000L - mainImage.count > (long)(minute * 60);
				if (flag)
				{
					string o = (string)enumerator.Key;
					myVector.addElement(o);
				}
			}
			for (int i = 0; i < myVector.size(); i++)
			{
				hash.remove((string)myVector.elementAt(i));
			}
		}
	}

	// Token: 0x0400098E RID: 2446
	public static MyHashTable hashImagePath = new MyHashTable();
}
using System;

// Token: 0x02000063 RID: 99
public class Info : IActionListener
{
	// Token: 0x06000544 RID: 1348 RVA: 0x000634FC File Offset: 0x000616FC
	public void hide()
	{
		this.says = null;
		this.infoWaitToShow.removeAllElements();
	}

	// Token: 0x06000545 RID: 1349 RVA: 0x00063514 File Offset: 0x00061714
	public void paint(mGraphics g, int x, int y, int dir)
	{
		bool flag = this.infoWaitToShow.size() == 0;
		if (!flag)
		{
			g.translate(x, y);
			bool flag2 = this.says != null && this.says.Length != 0 && this.type != 1;
			if (flag2)
			{
				bool flag3 = this.outSide;
				if (flag3)
				{
					this.cx -= GameScr.cmx;
					this.cy -= GameScr.cmy;
					this.cy += 35;
				}
				int num = (mGraphics.zoomLevel != 1) ? 10 : 0;
				bool flag4 = this.info.charInfo == null;
				if (flag4)
				{
					PopUp.paintPopUp(g, this.X, this.Y, this.W, this.H, 16777215, false);
				}
				else
				{
					mSystem.paintPopUp2(g, this.X - 23, this.Y - num / 2, this.W + 15, this.H + ((!GameCanvas.isTouch) ? 14 : 0) + num);
				}
				bool flag5 = this.info.charInfo == null;
				if (flag5)
				{
					g.drawRegion(Info.gocnhon, 0, 0, 9, 8, (dir != 1) ? 2 : 0, this.cx - 3 + ((dir != 1) ? 20 : -15), this.cy - this.ch - 20 + this.sayRun + 2, mGraphics.TOP | mGraphics.HCENTER);
				}
				int num2 = -1;
				for (int i = 0; i < this.says.Length; i++)
				{
					mFont mFont = mFont.tahoma_7;
					string text = this.says[i];
					bool flag6 = this.says[i].StartsWith("|");
					int num4;
					if (flag6)
					{
						string[] array = Res.split(this.says[i], "|", 0);
						bool flag7 = array.Length == 3;
						if (flag7)
						{
							text = array[2];
						}
						bool flag8 = array.Length == 4;
						if (flag8)
						{
							text = array[3];
							int num3 = int.Parse(array[2]);
						}
						num4 = int.Parse(array[1]);
						num2 = num4;
					}
					else
					{
						num4 = num2;
					}
					switch (num4)
					{
					case -1:
						mFont = mFont.tahoma_7;
						break;
					case 0:
						mFont = mFont.tahoma_7b_dark;
						break;
					case 1:
						mFont = mFont.tahoma_7b_green;
						break;
					case 2:
						mFont = mFont.tahoma_7b_blue;
						break;
					case 3:
						mFont = mFont.tahoma_7_red;
						break;
					case 4:
						mFont = mFont.tahoma_7_green;
						break;
					case 5:
						mFont = mFont.tahoma_7_blue;
						break;
					case 7:
						mFont = mFont.tahoma_7b_red;
						break;
					}
					bool flag9 = this.info.charInfo == null;
					if (flag9)
					{
						mFont.drawString(g, text, this.cx, this.cy - this.ch - 15 + this.sayRun + i * 12 - this.says.Length * 12 - 9, 2);
					}
					else
					{
						int num5 = this.X - 23;
						int num6 = this.Y - num / 2;
						int num7 = (mSystem.clientType != 1) ? (this.W + 25) : (this.W + 28);
						int num8 = this.H + ((!GameCanvas.isTouch) ? 14 : 0) + num;
						g.setColor(4465169);
						g.fillRect(num5, num6 + num8, num7, 2);
						int num9 = this.info.timeCount * num7 / this.info.maxTime;
						bool flag10 = num9 < 0;
						if (flag10)
						{
							num9 = 0;
						}
						g.setColor(43758);
						g.fillRect(num5, num6 + num8, num9, 2);
						bool flag11 = this.info.timeCount == 0;
						if (flag11)
						{
							return;
						}
						this.info.charInfo.paintHead(g, this.X + 5, this.Y + this.H / 2, 0);
						bool flag12 = mGraphics.zoomLevel == 1;
						if (flag12)
						{
							((!this.info.isChatServer) ? mFont.tahoma_7b_greenSmall : mFont.tahoma_7b_yellowSmall2).drawString(g, this.info.charInfo.cName, this.X + 12, this.Y + 3, 0);
						}
						else
						{
							((!this.info.isChatServer) ? mFont.tahoma_7b_greenSmall : mFont.tahoma_7b_yellowSmall2).drawString(g, this.info.charInfo.cName, this.X + 12, this.Y - 3, 0);
						}
						bool flag13 = !GameCanvas.isTouch;
						if (flag13)
						{
							bool flag14 = !TField.isQwerty;
							if (flag14)
							{
								mFont.tahoma_7b_green2Small.drawString(g, "Nhấn # để chat", this.X + this.W / 2 + 10, this.Y + this.H, mFont.CENTER);
							}
							else
							{
								mFont.tahoma_7b_green2Small.drawString(g, "Nhấn Y để chat", this.X + this.W / 2 + 10, this.Y + this.H, mFont.CENTER);
							}
						}
						bool flag15 = mGraphics.zoomLevel == 1;
						if (flag15)
						{
							TextInfo.paint(g, text, this.X + 14, this.Y + this.H / 2 + 2, this.W - 16, this.H, mFont.tahoma_7_whiteSmall);
						}
						else
						{
							string[] array2 = mFont.tahoma_7_whiteSmall.splitFontArray(text, 120);
							for (int j = 0; j < array2.Length; j++)
							{
								mFont.tahoma_7_whiteSmall.drawString(g, array2[j], this.X + 12, this.Y + 12 + j * 12 - 3, 0);
							}
							GameCanvas.resetTrans(g);
						}
					}
				}
				bool flag16 = this.info.charInfo == null;
				if (flag16)
				{
				}
			}
			g.translate(-x, -y);
		}
	}

	// Token: 0x06000546 RID: 1350 RVA: 0x00063B14 File Offset: 0x00061D14
	public void update()
	{
		bool flag = this.infoWaitToShow.size() == 0 || this.info.timeCount != 0;
		if (!flag)
		{
			this.time++;
			bool flag2 = this.time >= this.info.speed;
			if (flag2)
			{
				this.time = 0;
				this.infoWaitToShow.removeElementAt(0);
				bool flag3 = this.infoWaitToShow.size() != 0;
				if (flag3)
				{
					InfoItem infoItem = (InfoItem)this.infoWaitToShow.firstElement();
					this.info = infoItem;
					this.getInfo();
				}
			}
		}
	}

	// Token: 0x06000547 RID: 1351 RVA: 0x00063BB8 File Offset: 0x00061DB8
	public void getInfo()
	{
		this.sayWidth = 100;
		bool flag = GameCanvas.w == 128;
		if (flag)
		{
			this.sayWidth = 128;
		}
		bool flag2 = this.info.charInfo != null;
		int num;
		if (flag2)
		{
			this.says = new string[]
			{
				this.info.s
			};
			bool flag3 = mGraphics.zoomLevel == 1;
			if (flag3)
			{
				num = this.says.Length;
			}
			else
			{
				string[] array = mFont.tahoma_7_whiteSmall.splitFontArray(this.info.s, 120);
				num = array.Length;
			}
		}
		else
		{
			this.says = mFont.tahoma_7.splitFontArray(this.info.s, this.sayWidth - 10);
			num = this.says.Length;
		}
		this.sayRun = 7;
		this.X = this.cx - this.sayWidth / 2 - 1;
		this.Y = this.cy - this.ch - 15 + this.sayRun - num * 12 - 15;
		this.W = this.sayWidth + 2 + ((this.info.charInfo != null) ? 30 : 0);
		this.H = (num + 1) * 12 + 1 + ((this.info.charInfo != null) ? 5 : 0);
	}

	// Token: 0x06000548 RID: 1352 RVA: 0x00063D08 File Offset: 0x00061F08
	public void addInfo(string s, int Type, global::Char cInfo, bool isChatServer)
	{
		this.type = Type;
		bool flag = GameCanvas.w == 128;
		if (flag)
		{
			this.limLeft = 1;
		}
		bool flag2 = this.infoWaitToShow.size() > 10;
		if (flag2)
		{
			this.infoWaitToShow.removeElementAt(0);
		}
		bool flag3 = this.infoWaitToShow.size() <= 0 || s.Equals(((InfoItem)this.infoWaitToShow.lastElement()).s);
		if (flag3)
		{
		}
		InfoItem infoItem = new InfoItem(s);
		bool flag4 = this.type == 0;
		if (flag4)
		{
			infoItem.speed = s.Length;
		}
		bool flag5 = infoItem.speed < 70;
		if (flag5)
		{
			infoItem.speed = 70;
		}
		bool flag6 = this.type == 1;
		if (flag6)
		{
			infoItem.speed = 10000000;
		}
		bool flag7 = this.type == 3;
		if (flag7)
		{
			infoItem.speed = 300;
			infoItem.last = mSystem.currentTimeMillis();
			infoItem.timeCount = s.Length;
			bool flag8 = infoItem.timeCount < 15;
			if (flag8)
			{
				infoItem.timeCount = 15;
			}
			bool flag9 = infoItem.timeCount > 100;
			if (flag9)
			{
				infoItem.timeCount = 100;
			}
			infoItem.maxTime = infoItem.timeCount;
		}
		bool flag10 = cInfo != null;
		if (flag10)
		{
			infoItem.charInfo = cInfo;
			infoItem.isChatServer = isChatServer;
			GameCanvas.panel.addChatMessage(infoItem);
			bool flag11 = GameCanvas.isTouch && GameCanvas.panel.isViewChatServer;
			if (flag11)
			{
				GameScr.info2.cmdChat = new Command(mResources.CHAT, this, 1000, infoItem);
			}
		}
		bool flag12 = (cInfo != null && GameCanvas.panel.isViewChatServer) || cInfo == null;
		if (flag12)
		{
			this.infoWaitToShow.addElement(infoItem);
		}
		bool flag13 = this.infoWaitToShow.size() == 1;
		if (flag13)
		{
			this.info = (InfoItem)this.infoWaitToShow.firstElement();
			this.getInfo();
		}
		bool flag14 = GameCanvas.isTouch && cInfo != null && GameCanvas.panel.isViewChatServer && GameCanvas.w - 50 > 155 + this.W;
		if (flag14)
		{
			GameScr.info2.cmdChat.x = GameCanvas.w - this.W - 50;
			GameScr.info2.cmdChat.y = 35;
		}
	}

	// Token: 0x06000549 RID: 1353 RVA: 0x00063F7C File Offset: 0x0006217C
	public void addInfo(string s, int speed, mFont f)
	{
		bool flag = GameCanvas.w == 128;
		if (flag)
		{
			this.limLeft = 1;
		}
		bool flag2 = this.infoWaitToShow.size() > 10;
		if (flag2)
		{
			this.infoWaitToShow.removeElementAt(0);
		}
		this.infoWaitToShow.addElement(new InfoItem(s, f, speed));
	}

	// Token: 0x0600054A RID: 1354 RVA: 0x00063FDC File Offset: 0x000621DC
	public bool isEmpty()
	{
		return this.p1 == 5 && this.infoWaitToShow.size() == 0;
	}

	// Token: 0x0600054B RID: 1355 RVA: 0x00064008 File Offset: 0x00062208
	public void perform(int idAction, object p)
	{
		bool flag = idAction == 1000;
		if (flag)
		{
			ChatTextField.gI().startChat(GameScr.gI(), mResources.chat_player);
		}
	}

	// Token: 0x0600054C RID: 1356 RVA: 0x00064039 File Offset: 0x00062239
	public void onCancelChat()
	{
	}

	// Token: 0x0400098F RID: 2447
	public MyVector infoWaitToShow = new MyVector();

	// Token: 0x04000990 RID: 2448
	public InfoItem info;

	// Token: 0x04000991 RID: 2449
	public int p1 = 5;

	// Token: 0x04000992 RID: 2450
	public int p2;

	// Token: 0x04000993 RID: 2451
	public int p3;

	// Token: 0x04000994 RID: 2452
	public int x;

	// Token: 0x04000995 RID: 2453
	public int strWidth;

	// Token: 0x04000996 RID: 2454
	public int limLeft = 2;

	// Token: 0x04000997 RID: 2455
	public int hI = 20;

	// Token: 0x04000998 RID: 2456
	public int xChar;

	// Token: 0x04000999 RID: 2457
	public int yChar;

	// Token: 0x0400099A RID: 2458
	public int sayWidth = 100;

	// Token: 0x0400099B RID: 2459
	public int sayRun;

	// Token: 0x0400099C RID: 2460
	public string[] says;

	// Token: 0x0400099D RID: 2461
	public int cx;

	// Token: 0x0400099E RID: 2462
	public int cy;

	// Token: 0x0400099F RID: 2463
	public int ch;

	// Token: 0x040009A0 RID: 2464
	public bool outSide;

	// Token: 0x040009A1 RID: 2465
	public int f;

	// Token: 0x040009A2 RID: 2466
	public int tF;

	// Token: 0x040009A3 RID: 2467
	public Image img;

	// Token: 0x040009A4 RID: 2468
	public static Image gocnhon = GameCanvas.loadImage("/mainImage/myTexture2dgocnhon.png");

	// Token: 0x040009A5 RID: 2469
	public int time;

	// Token: 0x040009A6 RID: 2470
	public int timeW;

	// Token: 0x040009A7 RID: 2471
	public int type;

	// Token: 0x040009A8 RID: 2472
	public int X;

	// Token: 0x040009A9 RID: 2473
	public int Y;

	// Token: 0x040009AA RID: 2474
	public int W;

	// Token: 0x040009AB RID: 2475
	public int H;
}
using System;

// Token: 0x02000064 RID: 100
public class InfoDlg
{
	// Token: 0x0600054F RID: 1359 RVA: 0x00064080 File Offset: 0x00062280
	public static void show(string title, string subtitle, int delay)
	{
		bool flag = title != null;
		if (flag)
		{
			InfoDlg.isShow = true;
			InfoDlg.title = title;
			InfoDlg.subtitke = subtitle;
			InfoDlg.delay = delay;
		}
	}

	// Token: 0x06000550 RID: 1360 RVA: 0x000640B0 File Offset: 0x000622B0
	public static void showWait()
	{
		InfoDlg.show(mResources.PLEASEWAIT, null, 1000);
		InfoDlg.isLock = true;
	}

	// Token: 0x06000551 RID: 1361 RVA: 0x000640CA File Offset: 0x000622CA
	public static void showWait(string str)
	{
		InfoDlg.show(str, null, 700);
		InfoDlg.isLock = true;
	}

	// Token: 0x06000552 RID: 1362 RVA: 0x000640E0 File Offset: 0x000622E0
	public static void paint(mGraphics g)
	{
		bool flag = InfoDlg.isShow && (!InfoDlg.isLock || InfoDlg.delay <= 4990) && !GameScr.isPaintAlert;
		if (flag)
		{
			int num = 10;
			GameCanvas.paintz.paintPopUp(GameCanvas.hw - 75, num, 150, 55, g);
			bool flag2 = InfoDlg.isLock;
			if (flag2)
			{
				GameCanvas.paintShukiren(GameCanvas.hw - mFont.tahoma_8b.getWidth(InfoDlg.title) / 2 - 10, num + 28, g);
				mFont.tahoma_8b.drawString(g, InfoDlg.title, GameCanvas.hw + 5, num + 21, 2);
			}
			else
			{
				bool flag3 = InfoDlg.subtitke != null;
				if (flag3)
				{
					mFont.tahoma_8b.drawString(g, InfoDlg.title, GameCanvas.hw, num + 13, 2);
					mFont.tahoma_7_green2.drawString(g, InfoDlg.subtitke, GameCanvas.hw, num + 30, 2);
				}
				else
				{
					mFont.tahoma_8b.drawString(g, InfoDlg.title, GameCanvas.hw, num + 21, 2);
				}
			}
		}
	}

	// Token: 0x06000553 RID: 1363 RVA: 0x000641F0 File Offset: 0x000623F0
	public static void update()
	{
		bool flag = InfoDlg.isShow && InfoDlg.delay > 0;
		if (flag)
		{
			InfoDlg.delay--;
			bool flag2 = InfoDlg.delay <= 0;
			if (flag2)
			{
				InfoDlg.hide();
			}
		}
	}

	// Token: 0x06000554 RID: 1364 RVA: 0x00064239 File Offset: 0x00062439
	public static void hide()
	{
		InfoDlg.title = string.Empty;
		InfoDlg.subtitke = null;
		InfoDlg.isLock = false;
		InfoDlg.delay = 0;
		InfoDlg.isShow = false;
	}

	// Token: 0x040009AC RID: 2476
	public static bool isShow;

	// Token: 0x040009AD RID: 2477
	private static string title;

	// Token: 0x040009AE RID: 2478
	private static string subtitke;

	// Token: 0x040009AF RID: 2479
	public static int delay;

	// Token: 0x040009B0 RID: 2480
	public static bool isLock;
}
using System;

// Token: 0x02000065 RID: 101
public class InfoItem
{
	// Token: 0x06000556 RID: 1366 RVA: 0x00064267 File Offset: 0x00062467
	public InfoItem(string s)
	{
		this.f = mFont.tahoma_7_green2;
		this.s = s;
		this.speed = 20;
	}

	// Token: 0x06000557 RID: 1367 RVA: 0x00064293 File Offset: 0x00062493
	public InfoItem(string s, mFont f, int speed)
	{
		this.f = f;
		this.s = s;
		this.speed = speed;
	}

	// Token: 0x040009B1 RID: 2481
	public string s;

	// Token: 0x040009B2 RID: 2482
	private mFont f;

	// Token: 0x040009B3 RID: 2483
	public int speed = 70;

	// Token: 0x040009B4 RID: 2484
	public global::Char charInfo;

	// Token: 0x040009B5 RID: 2485
	public bool isChatServer;

	// Token: 0x040009B6 RID: 2486
	public bool isOnline;

	// Token: 0x040009B7 RID: 2487
	public int timeCount;

	// Token: 0x040009B8 RID: 2488
	public int maxTime;

	// Token: 0x040009B9 RID: 2489
	public long last;

	// Token: 0x040009BA RID: 2490
	public long curr;
}
using System;
using System.IO;
using AssemblyCSharp.Mod.Xmap;

// Token: 0x02000066 RID: 102
public class InfoMe
{
	// Token: 0x06000558 RID: 1368 RVA: 0x000642BC File Offset: 0x000624BC
	public InfoMe()
	{
		for (int i = 0; i < this.charId.Length; i++)
		{
			this.charId[i] = new int[3];
		}
	}

	// Token: 0x06000559 RID: 1369 RVA: 0x00064318 File Offset: 0x00062518
	public static InfoMe gI()
	{
		bool flag = InfoMe.me == null;
		if (flag)
		{
			InfoMe.me = new InfoMe();
		}
		return InfoMe.me;
	}

	// Token: 0x0600055A RID: 1370 RVA: 0x00064348 File Offset: 0x00062548
	public void loadCharId()
	{
		for (int i = 0; i < this.charId.Length; i++)
		{
			this.charId[i] = new int[3];
		}
	}

	// Token: 0x0600055B RID: 1371 RVA: 0x00064380 File Offset: 0x00062580
	public void paint(mGraphics g)
	{
		bool flag = (this.Equals(GameScr.info2) && GameScr.gI().isVS()) || (this.Equals(GameScr.info2) && GameScr.gI().popUpYesNo != null) || !GameScr.isPaint || (GameCanvas.currentScreen != GameScr.gI() && GameCanvas.currentScreen != CrackBallScr.gI()) || ChatPopup.serverChatPopUp != null || !this.isUpdate || global::Char.ischangingMap || (GameCanvas.panel.isShow && this.Equals(GameScr.info2));
		if (!flag)
		{
			g.translate(-g.getTranslateX(), -g.getTranslateY());
			g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			bool flag2 = this.info != null;
			if (flag2)
			{
				this.info.paint(g, this.cmx, this.cmy, this.dir);
				bool flag3 = this.info.info == null || this.info.info.charInfo == null || this.cmdChat != null || !GameCanvas.isTouch;
				if (flag3)
				{
				}
				bool flag4 = this.info.info != null && this.info.info.charInfo != null && this.cmdChat == null;
				if (flag4)
				{
				}
			}
			bool flag5 = this.info.info != null && this.info.info.charInfo == null && this.charId != null;
			if (flag5)
			{
				SmallImage.drawSmallImage(g, this.charId[global::Char.myCharz().cgender][this.f], this.cmx, this.cmy + 3 + ((GameCanvas.gameTick % 10 > 5) ? 1 : 0), (this.dir != 1) ? 2 : 0, StaticObj.VCENTER_HCENTER);
			}
			g.translate(-g.getTranslateX(), -g.getTranslateY());
		}
	}

	// Token: 0x0600055C RID: 1372 RVA: 0x00064575 File Offset: 0x00062775
	public void hide()
	{
		this.info.hide();
	}

	// Token: 0x0600055D RID: 1373 RVA: 0x00064584 File Offset: 0x00062784
	public void moveCamera()
	{
		bool flag = this.cmy != this.cmtoY;
		if (flag)
		{
			this.cmvy = this.cmtoY - this.cmy << 2;
			this.cmdy += this.cmvy;
			this.cmy += this.cmdy >> 4;
			this.cmdy &= 15;
		}
		bool flag2 = this.cmx != this.cmtoX;
		if (flag2)
		{
			this.cmvx = this.cmtoX - this.cmx << 2;
			this.cmdx += this.cmvx;
			this.cmx += this.cmdx >> 4;
			this.cmdx &= 15;
		}
		this.tF++;
		bool flag3 = this.tF == 5;
		if (flag3)
		{
			this.tF = 0;
			bool flag4 = this.f == 0;
			if (flag4)
			{
				this.f = 1;
			}
			else
			{
				this.f = 0;
			}
		}
	}

	// Token: 0x0600055E RID: 1374 RVA: 0x0006469D File Offset: 0x0006289D
	public void doClick(int t)
	{
		this.timeDelay = t;
	}

	// Token: 0x0600055F RID: 1375 RVA: 0x000646A8 File Offset: 0x000628A8
	public void update()
	{
		bool flag = this.info != null && this.info.infoWaitToShow != null && this.info.infoWaitToShow.size() == 0 && this.cmy != -40;
		if (flag)
		{
			this.info.timeW--;
			bool flag2 = this.info.timeW <= 0;
			if (flag2)
			{
				this.cmy = -40;
				this.info.time = 0;
				this.info.infoWaitToShow.removeAllElements();
				this.info.says = null;
				this.info.timeW = 200;
			}
		}
		bool flag3 = (this.Equals(GameScr.info2) && GameScr.gI().popUpYesNo != null) || !this.isUpdate;
		if (!flag3)
		{
			this.moveCamera();
			bool flag4 = this.info == null || (this.info != null && this.info.info == null);
			if (!flag4)
			{
				bool flag5 = !this.isDone;
				if (flag5)
				{
					bool flag6 = this.timeDelay > 0;
					if (flag6)
					{
						this.timeDelay--;
						bool flag7 = this.timeDelay == 0;
						if (flag7)
						{
							GameCanvas.panel.setTypeMessage();
							GameCanvas.panel.show();
						}
					}
					bool flag8 = GameCanvas.gameTick % 3 == 0;
					if (flag8)
					{
						bool flag9 = global::Char.myCharz().cdir == 1;
						if (flag9)
						{
							this.cmtoX = global::Char.myCharz().cx - 20 - GameScr.cmx;
						}
						bool flag10 = global::Char.myCharz().cdir == -1;
						if (flag10)
						{
							this.cmtoX = global::Char.myCharz().cx + 20 - GameScr.cmx;
						}
						bool flag11 = this.cmtoX <= 24;
						if (flag11)
						{
							this.cmtoX += this.info.sayWidth / 2;
						}
						bool flag12 = this.cmtoX >= GameCanvas.w - 24;
						if (flag12)
						{
							this.cmtoX -= this.info.sayWidth / 2;
						}
						this.cmtoY = global::Char.myCharz().cy - 40 - GameScr.cmy;
						bool flag13 = this.info.says != null && this.cmtoY < (this.info.says.Length + 1) * 12 + 10;
						if (flag13)
						{
							this.cmtoY = (this.info.says.Length + 1) * 12 + 10;
						}
						bool flag14 = this.info.info.charInfo != null;
						if (flag14)
						{
							bool flag15 = GameCanvas.w - 50 > 155 + this.info.W;
							if (flag15)
							{
								this.cmtoX = GameCanvas.w - 60 - this.info.W / 2;
								this.cmtoY = this.info.H + 10;
							}
							else
							{
								this.cmtoX = GameCanvas.w - 20 - this.info.W / 2;
								this.cmtoY = 45 + this.info.H;
								bool flag16 = GameCanvas.w > GameCanvas.h || GameCanvas.w < 220;
								if (flag16)
								{
									this.cmtoX = GameCanvas.w - 20 - this.info.W / 2;
									this.cmtoY = this.info.H + 10;
								}
							}
						}
					}
					bool flag17 = this.cmx > global::Char.myCharz().cx - GameScr.cmx;
					if (flag17)
					{
						this.dir = -1;
					}
					else
					{
						this.dir = 1;
					}
				}
				bool flag18 = this.info.info == null;
				if (!flag18)
				{
					bool flag19 = this.info.infoWaitToShow.size() > 1;
					if (flag19)
					{
						bool flag20 = this.info.info.timeCount == 0;
						if (flag20)
						{
							this.info.time++;
							bool flag21 = this.info.time >= this.info.info.speed;
							if (flag21)
							{
								this.info.time = 0;
								this.info.infoWaitToShow.removeElementAt(0);
								InfoItem infoItem = (InfoItem)this.info.infoWaitToShow.firstElement();
								this.info.info = infoItem;
								this.info.getInfo();
							}
						}
						else
						{
							this.info.info.curr = mSystem.currentTimeMillis();
							bool flag22 = this.info.info.curr - this.info.info.last >= 1000L;
							if (flag22)
							{
								this.info.info.last = mSystem.currentTimeMillis();
								this.info.info.timeCount--;
							}
							bool flag23 = this.info.info.timeCount == 0;
							if (flag23)
							{
								this.info.infoWaitToShow.removeElementAt(0);
								bool flag24 = this.info.infoWaitToShow.size() != 0;
								if (flag24)
								{
									InfoItem infoItem2 = (InfoItem)this.info.infoWaitToShow.firstElement();
									this.info.info = infoItem2;
									this.info.getInfo();
								}
							}
						}
					}
					else
					{
						bool flag25 = this.info.infoWaitToShow.size() != 1;
						if (!flag25)
						{
							bool flag26 = this.info.info.timeCount == 0;
							if (flag26)
							{
								this.info.time++;
								bool flag27 = this.info.time >= this.info.info.speed;
								if (flag27)
								{
									this.isDone = true;
								}
								bool flag28 = this.info.time == this.info.info.speed;
								if (flag28)
								{
									this.cmtoY = -40;
									this.cmtoX = global::Char.myCharz().cx - GameScr.cmx + ((global::Char.myCharz().cdir != 1) ? 20 : -20);
								}
								bool flag29 = this.info.time >= this.info.info.speed + 20;
								if (flag29)
								{
									this.info.time = 0;
									this.info.infoWaitToShow.removeAllElements();
									this.info.says = null;
									this.info.timeW = 200;
								}
							}
							else
							{
								this.info.info.curr = mSystem.currentTimeMillis();
								bool flag30 = this.info.info.curr - this.info.info.last >= 1000L;
								if (flag30)
								{
									this.info.info.last = mSystem.currentTimeMillis();
									this.info.info.timeCount--;
								}
								bool flag31 = this.info.info.timeCount == 0;
								if (flag31)
								{
									this.isDone = true;
									this.cmtoY = -40;
									this.cmtoX = global::Char.myCharz().cx - GameScr.cmx + ((global::Char.myCharz().cdir != 1) ? 20 : -20);
									this.info.time = 0;
									this.info.infoWaitToShow.removeAllElements();
									this.info.says = null;
									this.cmdChat = null;
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x06000560 RID: 1376 RVA: 0x00064E9D File Offset: 0x0006309D
	public void addInfoWithChar(string s, global::Char c, bool isChatServer)
	{
		this.playerID = c.charID;
		this.info.addInfo(s, 3, c, isChatServer);
		this.isDone = false;
	}

	// Token: 0x06000561 RID: 1377 RVA: 0x00064EC3 File Offset: 0x000630C3
	public static void Getifor(string text)
	{
		File.WriteAllText("infor.txt", text);
	}

	// Token: 0x06000562 RID: 1378 RVA: 0x00064ED4 File Offset: 0x000630D4
	public void addInfo(string s, int Type)
	{
		Pk9rXmap.Info(s);
		AutoSKH.TimeConLai = s;
		s = Res.changeString(s);
		bool flag = this.info.infoWaitToShow.size() > 0 && s.Equals(((InfoItem)this.info.infoWaitToShow.lastElement()).s);
		if (!flag)
		{
			bool flag2 = this.info.infoWaitToShow.size() > 10;
			if (flag2)
			{
				for (int i = 0; i < 5; i++)
				{
					this.info.infoWaitToShow.removeElementAt(0);
				}
			}
			global::Char cInfo = null;
			this.info.addInfo(s, Type, cInfo, false);
			bool flag3 = this.info.infoWaitToShow.size() == 1;
			if (flag3)
			{
				this.cmy = 0;
				this.cmx = global::Char.myCharz().cx - GameScr.cmx + ((global::Char.myCharz().cdir != 1) ? 20 : -20);
			}
			this.isDone = false;
		}
	}

	// Token: 0x040009BB RID: 2491
	public static InfoMe me;

	// Token: 0x040009BC RID: 2492
	public int[][] charId = new int[3][];

	// Token: 0x040009BD RID: 2493
	public Info info = new Info();

	// Token: 0x040009BE RID: 2494
	public int dir;

	// Token: 0x040009BF RID: 2495
	public int f;

	// Token: 0x040009C0 RID: 2496
	public int tF;

	// Token: 0x040009C1 RID: 2497
	public int cmtoY;

	// Token: 0x040009C2 RID: 2498
	public int cmy;

	// Token: 0x040009C3 RID: 2499
	public int cmdy;

	// Token: 0x040009C4 RID: 2500
	public int cmvy;

	// Token: 0x040009C5 RID: 2501
	public int cmyLim;

	// Token: 0x040009C6 RID: 2502
	public int cmtoX;

	// Token: 0x040009C7 RID: 2503
	public int cmx;

	// Token: 0x040009C8 RID: 2504
	public int cmdx;

	// Token: 0x040009C9 RID: 2505
	public int cmvx;

	// Token: 0x040009CA RID: 2506
	public int cmxLim;

	// Token: 0x040009CB RID: 2507
	public bool isDone;

	// Token: 0x040009CC RID: 2508
	public bool isUpdate = true;

	// Token: 0x040009CD RID: 2509
	public int timeDelay;

	// Token: 0x040009CE RID: 2510
	public int playerID;

	// Token: 0x040009CF RID: 2511
	public int timeCount;

	// Token: 0x040009D0 RID: 2512
	public Command cmdChat;

	// Token: 0x040009D1 RID: 2513
	public bool isShow;
}
using System;

// Token: 0x02000067 RID: 103
public class InfoPhuBan
{
	// Token: 0x06000563 RID: 1379 RVA: 0x00064FDC File Offset: 0x000631DC
	public InfoPhuBan(int type_PB, short idmapPaint, string nameTeam1, string nameTeam2, int maxPoint, short timeSecond)
	{
		this.type_PB = type_PB;
		this.idmapPaint = idmapPaint;
		this.nameTeam1 = nameTeam1;
		this.nameTeam2 = nameTeam2;
		this.timeSecond = timeSecond;
		this.timeStart = GameCanvas.timeNow;
		this.maxPoint = maxPoint;
		bool flag = this.maxPoint <= 0;
		if (flag)
		{
			this.maxPoint = 1;
		}
		this.pointTeam1 = 0;
		this.pointTeam2 = 0;
		this.owner = 0;
		this.color_1 = 4;
		this.color_2 = 6;
	}

	// Token: 0x06000564 RID: 1380 RVA: 0x00065083 File Offset: 0x00063283
	public void updateTime(int type_PB, short timeSecond)
	{
		this.type_PB = type_PB;
		this.timeSecond = timeSecond;
		this.timeStart = GameCanvas.timeNow;
	}

	// Token: 0x06000565 RID: 1381 RVA: 0x0006509F File Offset: 0x0006329F
	public void updatePoint(int type_PB, int pointTeam1, int pointTeam2)
	{
		this.type_PB = type_PB;
		this.pointTeam1 = pointTeam1;
		this.pointTeam2 = pointTeam2;
	}

	// Token: 0x06000566 RID: 1382 RVA: 0x000650B7 File Offset: 0x000632B7
	public void updateLife(int type_PB, int lifeTeam1, int lifeTeam2)
	{
		this.type_PB = type_PB;
		this.lifeTeam1 = lifeTeam1;
		this.lifeTeam2 = lifeTeam2;
	}

	// Token: 0x040009D2 RID: 2514
	public int type_PB;

	// Token: 0x040009D3 RID: 2515
	public int maxPoint;

	// Token: 0x040009D4 RID: 2516
	public int pointTeam1;

	// Token: 0x040009D5 RID: 2517
	public int pointTeam2;

	// Token: 0x040009D6 RID: 2518
	public int color_1;

	// Token: 0x040009D7 RID: 2519
	public int color_2;

	// Token: 0x040009D8 RID: 2520
	public int maxLife = 1;

	// Token: 0x040009D9 RID: 2521
	public int lifeTeam1;

	// Token: 0x040009DA RID: 2522
	public int lifeTeam2;

	// Token: 0x040009DB RID: 2523
	public string nameTeam1;

	// Token: 0x040009DC RID: 2524
	public string nameTeam2;

	// Token: 0x040009DD RID: 2525
	public short idmapPaint;

	// Token: 0x040009DE RID: 2526
	public short timeSecond;

	// Token: 0x040009DF RID: 2527
	public short timepaintSecond;

	// Token: 0x040009E0 RID: 2528
	public short maxtimeSecond = 1;

	// Token: 0x040009E1 RID: 2529
	public byte owner;

	// Token: 0x040009E2 RID: 2530
	public long timeStart;

	// Token: 0x040009E3 RID: 2531
	public MyVector vecInfo = new MyVector("vecInfo chientruong");
}
using System;

// Token: 0x02000068 RID: 104
public class Info_RadaScr
{
	// Token: 0x06000567 RID: 1383 RVA: 0x000650D0 File Offset: 0x000632D0
	public void SetInfo(int id, int no, int idIcon, sbyte rank, sbyte typeMonster, short templateId, string name, string info, global::Char charInfo, ItemOption[] itemOption)
	{
		this.id = id;
		this.no = no;
		this.idIcon = idIcon;
		this.rank = rank;
		this.typeMonster = typeMonster;
		bool flag = templateId != -1;
		if (flag)
		{
			this.mobInfo = new Mob();
			this.mobInfo.templateId = (int)templateId;
		}
		this.name = name;
		this.info = info;
		this.charInfo = charInfo;
		this.itemOption = itemOption;
		this.addItemDetail();
	}

	// Token: 0x06000568 RID: 1384 RVA: 0x00065150 File Offset: 0x00063350
	public void SetAmount(sbyte amount, sbyte max_amount)
	{
		this.amount = amount;
		this.max_amount = max_amount;
	}

	// Token: 0x06000569 RID: 1385 RVA: 0x00065161 File Offset: 0x00063361
	public void SetLevel(sbyte level)
	{
		this.level = level;
		this.addItemDetail();
	}

	// Token: 0x0600056A RID: 1386 RVA: 0x00065172 File Offset: 0x00063372
	public void SetUse(sbyte isUse)
	{
		this.isUse = isUse;
		this.addItemDetail();
	}

	// Token: 0x0600056B RID: 1387 RVA: 0x00065184 File Offset: 0x00063384
	public static global::Char SetCharInfo(int head, int body, int leg, int bag)
	{
		return new global::Char
		{
			head = head,
			body = body,
			leg = leg,
			bag = bag
		};
	}

	// Token: 0x0600056C RID: 1388 RVA: 0x000651BC File Offset: 0x000633BC
	public static Info_RadaScr GetInfo(MyVector vec, int id)
	{
		bool flag = vec != null;
		if (flag)
		{
			for (int i = 0; i < vec.size(); i++)
			{
				Info_RadaScr info_RadaScr = (Info_RadaScr)vec.elementAt(i);
				bool flag2 = info_RadaScr != null && info_RadaScr.id == id;
				if (flag2)
				{
					return info_RadaScr;
				}
			}
		}
		return null;
	}

	// Token: 0x0600056D RID: 1389 RVA: 0x0006521C File Offset: 0x0006341C
	public void paintInfo(mGraphics g, int x, int y)
	{
		this.count++;
		bool flag = this.count > this.f.Length - 1;
		if (flag)
		{
			this.count = 0;
		}
		bool flag2 = this.typeMonster == 0;
		if (flag2)
		{
			bool flag3 = Mob.arrMobTemplate[this.mobInfo.templateId] != null;
			if (flag3)
			{
				bool flag4 = Mob.arrMobTemplate[this.mobInfo.templateId].data != null;
				if (flag4)
				{
					Mob.arrMobTemplate[this.mobInfo.templateId].data.paintFrame(g, this.f[this.count], x, y, 0, 0);
				}
				else
				{
					bool flag5 = this.timeRequest - GameCanvas.timeNow < 0L;
					if (flag5)
					{
						this.timeRequest = GameCanvas.timeNow + 1500L;
						this.mobInfo.getData();
					}
				}
			}
		}
		else
		{
			bool flag6 = this.charInfo != null;
			if (flag6)
			{
				this.charInfo.paintCharBody(g, x, y, 1, this.f[this.count], true);
			}
		}
	}

	// Token: 0x0600056E RID: 1390 RVA: 0x0006533C File Offset: 0x0006353C
	public void addItemDetail()
	{
		this.cp = new ChatPopup();
		string text = string.Empty;
		string text2 = string.Empty;
		text2 = text2 + "\n|6|" + this.info;
		text2 += "\n--";
		bool flag = this.itemOption != null;
		if (flag)
		{
			int num = 0;
			bool flag2 = true;
			while (flag2)
			{
				int num2 = 0;
				for (int i = 0; i < this.itemOption.Length; i++)
				{
					text = this.itemOption[i].getOptionString();
					bool flag3 = !text.Equals(string.Empty) && num == (int)this.itemOption[i].activeCard;
					if (flag3)
					{
						num2++;
						break;
					}
				}
				bool flag4 = num2 == 0;
				if (flag4)
				{
					break;
				}
				bool flag5 = num == 0;
				if (flag5)
				{
					text2 = text2 + "\n|6|2|--" + mResources.unlock + "--";
				}
				else
				{
					string text3 = text2;
					text2 = string.Concat(new string[]
					{
						text3,
						"\n|6|2|--",
						mResources.equip,
						" Lv.",
						num.ToString(),
						"--"
					});
				}
				for (int j = 0; j < this.itemOption.Length; j++)
				{
					text = this.itemOption[j].getOptionString();
					bool flag6 = text.Equals(string.Empty) || num != (int)this.itemOption[j].activeCard;
					if (!flag6)
					{
						string text4 = "1";
						bool flag7 = this.level == 0;
						if (flag7)
						{
							text4 = "2";
						}
						else
						{
							bool flag8 = this.itemOption[j].activeCard != 0;
							if (flag8)
							{
								bool flag9 = this.isUse == 0;
								if (flag9)
								{
									text4 = "2";
								}
								else
								{
									bool flag10 = this.level < this.itemOption[j].activeCard;
									if (flag10)
									{
										text4 = "2";
									}
								}
							}
						}
						string text5 = text2;
						text2 = string.Concat(new string[]
						{
							text5,
							"\n|",
							text4,
							"|1|",
							text
						});
					}
				}
				bool flag11 = num2 != 0;
				if (flag11)
				{
					num++;
				}
			}
		}
		this.popUpDetailInit(this.cp, text2);
	}

	// Token: 0x0600056F RID: 1391 RVA: 0x000655AC File Offset: 0x000637AC
	public void popUpDetailInit(ChatPopup cp, string chat)
	{
		cp.sayWidth = RadarScr.wText;
		cp.cx = RadarScr.xText;
		cp.says = mFont.tahoma_7.splitFontArray(chat, cp.sayWidth - 8);
		cp.delay = 10000000;
		cp.c = null;
		cp.ch = cp.says.Length * 12;
		cp.cy = RadarScr.yText;
		cp.strY = 10;
		cp.lim = cp.ch - RadarScr.hText;
		bool flag = cp.lim < 0;
		if (flag)
		{
			cp.lim = 0;
		}
	}

	// Token: 0x06000570 RID: 1392 RVA: 0x00065648 File Offset: 0x00063848
	public void SetEff()
	{
		bool flag = this.amount == this.max_amount && this.eff.size() == 0;
		if (flag)
		{
			int num = Res.random(1, 5);
			for (int i = 0; i < num; i++)
			{
				Position position = new Position();
				position.x = Res.random(5, 25);
				position.y = Res.random(5, 25);
				position.v = i * Res.random(0, 8);
				position.w = 0;
				position.anchor = -1;
				this.eff.addElement(position);
			}
		}
	}

	// Token: 0x06000571 RID: 1393 RVA: 0x000656E4 File Offset: 0x000638E4
	public void paintEff(mGraphics g, int x, int y)
	{
		this.SetEff();
		for (int i = 0; i < this.eff.size(); i++)
		{
			Position position = (Position)this.eff.elementAt(i);
			bool flag = position == null;
			if (!flag)
			{
				bool flag2 = position.w < position.v;
				if (flag2)
				{
					position.w++;
				}
				bool flag3 = position.w >= position.v;
				if (flag3)
				{
					position.anchor = GameCanvas.gameTick / 3 % (RadarScr.fraEff.nFrame + 1);
					bool flag4 = position.anchor >= RadarScr.fraEff.nFrame;
					if (flag4)
					{
						this.eff.removeElementAt(i);
						i--;
					}
					else
					{
						RadarScr.fraEff.drawFrame(position.anchor, x + position.x, y + position.y, 0, 3, g);
					}
				}
			}
		}
	}

	// Token: 0x040009E4 RID: 2532
	public const sbyte TYPE_MONSTER = 0;

	// Token: 0x040009E5 RID: 2533
	public const sbyte TYPE_CHARPART = 1;

	// Token: 0x040009E6 RID: 2534
	public sbyte rank;

	// Token: 0x040009E7 RID: 2535
	public sbyte amount;

	// Token: 0x040009E8 RID: 2536
	public sbyte max_amount;

	// Token: 0x040009E9 RID: 2537
	public sbyte typeMonster;

	// Token: 0x040009EA RID: 2538
	public int id;

	// Token: 0x040009EB RID: 2539
	public int no;

	// Token: 0x040009EC RID: 2540
	public int idIcon;

	// Token: 0x040009ED RID: 2541
	public string name;

	// Token: 0x040009EE RID: 2542
	public string info;

	// Token: 0x040009EF RID: 2543
	public sbyte level;

	// Token: 0x040009F0 RID: 2544
	public sbyte isUse;

	// Token: 0x040009F1 RID: 2545
	public global::Char charInfo;

	// Token: 0x040009F2 RID: 2546
	public Mob mobInfo;

	// Token: 0x040009F3 RID: 2547
	public ItemOption[] itemOption;

	// Token: 0x040009F4 RID: 2548
	private int[] f = new int[]
	{
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1
	};

	// Token: 0x040009F5 RID: 2549
	private int count;

	// Token: 0x040009F6 RID: 2550
	private long timeRequest;

	// Token: 0x040009F7 RID: 2551
	public ChatPopup cp;

	// Token: 0x040009F8 RID: 2552
	public MyVector eff = new MyVector(string.Empty);
}
using System;

// Token: 0x02000069 RID: 105
public class InputDlg : Dialog
{
	// Token: 0x06000573 RID: 1395 RVA: 0x0006581C File Offset: 0x00063A1C
	public InputDlg()
	{
		this.padLeft = 40;
		bool flag = GameCanvas.w <= 176;
		if (flag)
		{
			this.padLeft = 10;
		}
		this.tfInput = new TField();
		this.tfInput.x = this.padLeft + 10;
		this.tfInput.y = GameCanvas.h - mScreen.ITEM_HEIGHT - 43;
		this.tfInput.width = GameCanvas.w - 2 * (this.padLeft + 10);
		this.tfInput.height = mScreen.ITEM_HEIGHT + 2;
		this.tfInput.isFocus = true;
		this.right = this.tfInput.cmdClear;
	}

	// Token: 0x06000574 RID: 1396 RVA: 0x000658DC File Offset: 0x00063ADC
	public void show(string info, Command ok, int type)
	{
		this.tfInput.setText(string.Empty);
		this.tfInput.setIputType(type);
		this.info = mFont.tahoma_8b.splitFontArray(info, GameCanvas.w - this.padLeft * 2);
		this.left = new Command(mResources.CLOSE, GameCanvas.gI(), 8882, null);
		this.center = ok;
		this.show();
	}

	// Token: 0x06000575 RID: 1397 RVA: 0x00065950 File Offset: 0x00063B50
	public override void paint(mGraphics g)
	{
		GameCanvas.paintz.paintInputDlg(g, this.padLeft, GameCanvas.h - 77 - mScreen.cmdH, GameCanvas.w - this.padLeft * 2, 69, this.info);
		this.tfInput.paint(g);
		base.paint(g);
	}

	// Token: 0x06000576 RID: 1398 RVA: 0x000659A9 File Offset: 0x00063BA9
	public override void keyPress(int keyCode)
	{
		this.tfInput.keyPressed(keyCode);
		base.keyPress(keyCode);
	}

	// Token: 0x06000577 RID: 1399 RVA: 0x000659C1 File Offset: 0x00063BC1
	public override void update()
	{
		this.tfInput.update();
		base.update();
	}

	// Token: 0x06000578 RID: 1400 RVA: 0x000659D7 File Offset: 0x00063BD7
	public override void show()
	{
		GameCanvas.currentDialog = this;
	}

	// Token: 0x06000579 RID: 1401 RVA: 0x000659E0 File Offset: 0x00063BE0
	public void hide()
	{
		GameCanvas.endDlg();
	}

	// Token: 0x040009F9 RID: 2553
	protected string[] info;

	// Token: 0x040009FA RID: 2554
	public TField tfInput;

	// Token: 0x040009FB RID: 2555
	private int padLeft;
}
using System;

// Token: 0x0200006A RID: 106
public class InputStream : myReader
{
	// Token: 0x0600057A RID: 1402 RVA: 0x000659E9 File Offset: 0x00063BE9
	public InputStream()
	{
	}

	// Token: 0x0600057B RID: 1403 RVA: 0x000659F3 File Offset: 0x00063BF3
	public InputStream(sbyte[] data)
	{
		this.buffer = data;
	}

	// Token: 0x0600057C RID: 1404 RVA: 0x00065A04 File Offset: 0x00063C04
	public InputStream(string filename) : base(filename)
	{
	}
}
using System;
using System.Runtime.InteropServices;
using UnityEngine;

// Token: 0x0200006B RID: 107
public class iOSPlugins
{
	// Token: 0x0600057D RID: 1405
	[DllImport("__Internal")]
	private static extern void _SMSsend(string tophone, string withtext, int n);

	// Token: 0x0600057E RID: 1406
	[DllImport("__Internal")]
	private static extern int _unpause();

	// Token: 0x0600057F RID: 1407
	[DllImport("__Internal")]
	private static extern int _checkRotation();

	// Token: 0x06000580 RID: 1408
	[DllImport("__Internal")]
	private static extern int _back();

	// Token: 0x06000581 RID: 1409
	[DllImport("__Internal")]
	private static extern int _Send();

	// Token: 0x06000582 RID: 1410
	[DllImport("__Internal")]
	private static extern void _purchaseItem(string itemID, string userName, string gameID);

	// Token: 0x06000583 RID: 1411 RVA: 0x00065A10 File Offset: 0x00063C10
	public static int Check()
	{
		bool flag = Application.platform == RuntimePlatform.IPhonePlayer;
		int result;
		if (flag)
		{
			result = iOSPlugins.checkCanSendSMS();
		}
		else
		{
			iOSPlugins.devide = iPhoneSettings.generation.ToString();
			string a = string.Empty + iOSPlugins.devide[2].ToString();
			bool flag2 = a == "h" && iOSPlugins.devide.Length > 6;
			if (flag2)
			{
				iOSPlugins.Myname = SystemInfo.operatingSystem.ToString();
				string a2 = string.Empty + iOSPlugins.Myname[10].ToString();
				bool flag3 = a2 != "2" && a2 != "3";
				if (flag3)
				{
					result = 0;
				}
				else
				{
					result = 1;
				}
			}
			else
			{
				Cout.println(iOSPlugins.devide + "  loai");
				bool flag4 = iOSPlugins.devide == "Unknown" && ScaleGUI.WIDTH * ScaleGUI.HEIGHT < 786432f;
				if (flag4)
				{
					result = 0;
				}
				else
				{
					result = -1;
				}
			}
		}
		return result;
	}

	// Token: 0x06000584 RID: 1412 RVA: 0x00065B34 File Offset: 0x00063D34
	public static int checkCanSendSMS()
	{
		bool flag = iPhoneSettings.generation == iPhoneGeneration.iPhone3GS || iPhoneSettings.generation == iPhoneGeneration.iPhone4 || iPhoneSettings.generation == iPhoneGeneration.iPhone4S || iPhoneSettings.generation == iPhoneGeneration.iPhone5;
		int result;
		if (flag)
		{
			result = 0;
		}
		else
		{
			result = -1;
		}
		return result;
	}

	// Token: 0x06000585 RID: 1413 RVA: 0x00065B78 File Offset: 0x00063D78
	public static void SMSsend(string phonenumber, string bodytext, int n)
	{
		bool flag = Application.platform > RuntimePlatform.OSXEditor;
		if (flag)
		{
			iOSPlugins._SMSsend(phonenumber, bodytext, n);
		}
	}

	// Token: 0x06000586 RID: 1414 RVA: 0x00065BA0 File Offset: 0x00063DA0
	public static void back()
	{
		bool flag = Application.platform > RuntimePlatform.OSXEditor;
		if (flag)
		{
			iOSPlugins._back();
		}
	}

	// Token: 0x06000587 RID: 1415 RVA: 0x00065BC4 File Offset: 0x00063DC4
	public static void Send()
	{
		bool flag = Application.platform > RuntimePlatform.OSXEditor;
		if (flag)
		{
			iOSPlugins._Send();
		}
	}

	// Token: 0x06000588 RID: 1416 RVA: 0x00065BE8 File Offset: 0x00063DE8
	public static int unpause()
	{
		bool flag = Application.platform > RuntimePlatform.OSXEditor;
		int result;
		if (flag)
		{
			result = iOSPlugins._unpause();
		}
		else
		{
			result = 0;
		}
		return result;
	}

	// Token: 0x06000589 RID: 1417 RVA: 0x00065C10 File Offset: 0x00063E10
	public static int checkRotation()
	{
		bool flag = Application.platform > RuntimePlatform.OSXEditor;
		int result;
		if (flag)
		{
			result = iOSPlugins._checkRotation();
		}
		else
		{
			result = 0;
		}
		return result;
	}

	// Token: 0x0600058A RID: 1418 RVA: 0x00065C38 File Offset: 0x00063E38
	public static void purchaseItem(string itemID, string userName, string gameID)
	{
		bool flag = Application.platform > RuntimePlatform.OSXEditor;
		if (flag)
		{
			iOSPlugins._purchaseItem(itemID, userName, gameID);
		}
	}

	// Token: 0x040009FC RID: 2556
	public static string devide;

	// Token: 0x040009FD RID: 2557
	public static string Myname;
}
using System;

// Token: 0x0200006C RID: 108
public abstract class IPaint
{
	// Token: 0x0600058C RID: 1420
	public abstract void paintDefaultBg(mGraphics g);

	// Token: 0x0600058D RID: 1421
	public abstract void paintfillDefaultBg(mGraphics g);

	// Token: 0x0600058E RID: 1422
	public abstract void repaintCircleBg();

	// Token: 0x0600058F RID: 1423
	public abstract void paintSolidBg(mGraphics g);

	// Token: 0x06000590 RID: 1424
	public abstract void paintDefaultPopup(mGraphics g, int x, int y, int w, int h);

	// Token: 0x06000591 RID: 1425
	public abstract void paintWhitePopup(mGraphics g, int y, int x, int width, int height);

	// Token: 0x06000592 RID: 1426
	public abstract void paintDefaultPopupH(mGraphics g, int h);

	// Token: 0x06000593 RID: 1427
	public abstract void paintCmdBar(mGraphics g, Command left, Command center, Command right);

	// Token: 0x06000594 RID: 1428
	public abstract void paintSelect(mGraphics g, int x, int y, int w, int h);

	// Token: 0x06000595 RID: 1429
	public abstract void paintLogo(mGraphics g, int x, int y);

	// Token: 0x06000596 RID: 1430
	public abstract void paintHotline(mGraphics g, string num);

	// Token: 0x06000597 RID: 1431
	public abstract void paintInputTf(mGraphics g, bool iss, int x, int y, int w, int h, int xText, int yText, string text);

	// Token: 0x06000598 RID: 1432
	public abstract void paintTabSoft(mGraphics g);

	// Token: 0x06000599 RID: 1433
	public abstract void paintBackMenu(mGraphics g, int x, int y, int w, int h, bool iss);

	// Token: 0x0600059A RID: 1434
	public abstract void paintMsgBG(mGraphics g, int x, int y, int w, int h, string title, string subTitle, string check);

	// Token: 0x0600059B RID: 1435
	public abstract void paintDefaultScrLisst(mGraphics g, string title, string subTitle, string check);

	// Token: 0x0600059C RID: 1436
	public abstract void paintCheck(mGraphics g, int x, int y, int index);

	// Token: 0x0600059D RID: 1437
	public abstract void paintImgMsg(mGraphics g, int x, int y, int index);

	// Token: 0x0600059E RID: 1438
	public abstract void paintTitleBoard(mGraphics g, int roomID);

	// Token: 0x0600059F RID: 1439
	public abstract void paintCheckPass(mGraphics g, int x, int y, bool check, bool focus);

	// Token: 0x060005A0 RID: 1440
	public abstract void paintInputDlg(mGraphics g, int x, int y, int w, int h, string[] str);

	// Token: 0x060005A1 RID: 1441
	public abstract void paintIconMainMenu(mGraphics g, int x, int y, bool iss, bool issSe, int i, int wStr);

	// Token: 0x060005A2 RID: 1442
	public abstract void paintLineRoom(mGraphics g, int x, int y, int xTo, int yTo);

	// Token: 0x060005A3 RID: 1443
	public abstract void paintCellContaint(mGraphics g, int x, int y, int w, int h, bool iss);

	// Token: 0x060005A4 RID: 1444
	public abstract void paintScroll(mGraphics g, int x, int y, int h);

	// Token: 0x060005A5 RID: 1445
	public abstract int[] getColorMsg();

	// Token: 0x060005A6 RID: 1446
	public abstract void paintLogo(mGraphics g);

	// Token: 0x060005A7 RID: 1447
	public abstract void paintTextLogin(mGraphics g, bool issRes);

	// Token: 0x060005A8 RID: 1448
	public abstract void paintSellectBoard(mGraphics g, int x, int y, int w, int h);

	// Token: 0x060005A9 RID: 1449
	public abstract int issRegissterUsingWAP();

	// Token: 0x060005AA RID: 1450
	public abstract string getCard();

	// Token: 0x060005AB RID: 1451
	public abstract void paintSellectedShop(mGraphics g, int x, int y, int w, int h);

	// Token: 0x060005AC RID: 1452
	public abstract string getUrlUpdateGame();

	// Token: 0x060005AD RID: 1453 RVA: 0x00065C68 File Offset: 0x00063E68
	public string getFAQLink()
	{
		return "http://wap.teamobi.com/faqs.php?provider=";
	}

	// Token: 0x060005AE RID: 1454
	public abstract void doSelect(int focus);
}
using System;

// Token: 0x0200006D RID: 109
public enum iPhoneGeneration
{
	// Token: 0x040009FF RID: 2559
	Unknown,
	// Token: 0x04000A00 RID: 2560
	iPhone,
	// Token: 0x04000A01 RID: 2561
	iPhone3G,
	// Token: 0x04000A02 RID: 2562
	iPhone3GS,
	// Token: 0x04000A03 RID: 2563
	iPodTouch1Gen,
	// Token: 0x04000A04 RID: 2564
	iPodTouch2Gen,
	// Token: 0x04000A05 RID: 2565
	iPodTouch3Gen,
	// Token: 0x04000A06 RID: 2566
	iPad1Gen,
	// Token: 0x04000A07 RID: 2567
	iPhone4,
	// Token: 0x04000A08 RID: 2568
	iPodTouch4Gen,
	// Token: 0x04000A09 RID: 2569
	iPad2Gen,
	// Token: 0x04000A0A RID: 2570
	iPhone4S,
	// Token: 0x04000A0B RID: 2571
	iPad3Gen,
	// Token: 0x04000A0C RID: 2572
	iPhone5,
	// Token: 0x04000A0D RID: 2573
	iPodTouch5Gen,
	// Token: 0x04000A0E RID: 2574
	iPadMini1Gen,
	// Token: 0x04000A0F RID: 2575
	iPad4Gen,
	// Token: 0x04000A10 RID: 2576
	iPhoneUnknown = 10001,
	// Token: 0x04000A11 RID: 2577
	iPadUnknown,
	// Token: 0x04000A12 RID: 2578
	iPodTouchUnknown
}
using System;

// Token: 0x0200006E RID: 110
public class iPhoneSettings
{
	// Token: 0x04000A13 RID: 2579
	public static iPhoneGeneration generation;

	// Token: 0x04000A14 RID: 2580
	public static iPhoneGeneration iPhone;

	// Token: 0x04000A15 RID: 2581
	public static iPhoneGeneration iPhone3G;

	// Token: 0x04000A16 RID: 2582
	public static iPhoneGeneration iPodTouch1Gen;

	// Token: 0x04000A17 RID: 2583
	public static iPhoneGeneration iPodTouch2Gen;
}
using System;

// Token: 0x0200006F RID: 111
public class ipKeyboard
{
	// Token: 0x060005B1 RID: 1457 RVA: 0x00065C94 File Offset: 0x00063E94
	public static void openKeyBoard(string caption, int type, string text, Command action)
	{
		ipKeyboard.act = action;
		TouchScreenKeyboardType t = (type == 0 || type == 2) ? TouchScreenKeyboardType.ASCIICapable : TouchScreenKeyboardType.NumberPad;
		TouchScreenKeyboard.hideInput = false;
		ipKeyboard.tk = TouchScreenKeyboard.Open(text, t, false, false, type == 2, false, caption);
	}

	// Token: 0x060005B2 RID: 1458 RVA: 0x00065CD0 File Offset: 0x00063ED0
	public static void update()
	{
		try
		{
			bool flag = ipKeyboard.tk != null && ipKeyboard.tk.done;
			if (flag)
			{
				bool flag2 = ipKeyboard.act != null;
				if (flag2)
				{
					ipKeyboard.act.perform(ipKeyboard.tk.text);
				}
				ipKeyboard.tk.text = string.Empty;
				ipKeyboard.tk = null;
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x04000A18 RID: 2584
	private static TouchScreenKeyboard tk;

	// Token: 0x04000A19 RID: 2585
	public static int TEXT;

	// Token: 0x04000A1A RID: 2586
	public static int NUMBERIC = 1;

	// Token: 0x04000A1B RID: 2587
	public static int PASS = 2;

	// Token: 0x04000A1C RID: 2588
	private static Command act;
}
using System;

// Token: 0x02000070 RID: 112
public interface ISession
{
	// Token: 0x060005B5 RID: 1461
	bool isConnected();

	// Token: 0x060005B6 RID: 1462
	void setHandler(IMessageHandler messageHandler);

	// Token: 0x060005B7 RID: 1463
	void connect(string host, int port);

	// Token: 0x060005B8 RID: 1464
	void sendMessage(Message message);

	// Token: 0x060005B9 RID: 1465
	void close();
}
using System;

// Token: 0x02000071 RID: 113
public class Item
{
	// Token: 0x060005BA RID: 1466 RVA: 0x00065D63 File Offset: 0x00063F63
	public void getCompare()
	{
		this.compare = GameCanvas.panel.getCompare(this);
	}

	// Token: 0x060005BB RID: 1467 RVA: 0x00065D78 File Offset: 0x00063F78
	public string getPrice()
	{
		string text = string.Empty;
		bool flag = this.buyCoin <= 0 && this.buyGold <= 0;
		string result;
		if (flag)
		{
			result = null;
		}
		else
		{
			bool flag2 = this.buyCoin > 0 && this.buyGold <= 0;
			if (flag2)
			{
				text = this.buyCoin.ToString() + mResources.XU;
			}
			else
			{
				bool flag3 = this.buyGold > 0 && this.buyCoin <= 0;
				if (flag3)
				{
					text = this.buyGold.ToString() + mResources.LUONG;
				}
				else
				{
					bool flag4 = this.buyCoin > 0 && this.buyGold > 0;
					if (flag4)
					{
						text = string.Concat(new string[]
						{
							this.buyCoin.ToString(),
							mResources.XU,
							"/",
							this.buyGold.ToString(),
							mResources.LUONG
						});
					}
				}
			}
			result = text;
		}
		return result;
	}

	// Token: 0x060005BC RID: 1468 RVA: 0x00065E84 File Offset: 0x00064084
	public void paintUpgradeEffect(int x, int y, int upgrade, mGraphics g)
	{
		int num = GameScr.indexSize - 2;
		int num2 = 0;
		int num3 = (upgrade >= 4) ? ((upgrade < 8) ? 1 : ((upgrade < 12) ? 2 : ((upgrade > 14) ? 4 : 3))) : 0;
		for (int i = num2; i < this.size.Length; i++)
		{
			int num4 = x - num / 2 + this.upgradeEffectX(GameCanvas.gameTick - i * 4);
			int num5 = y - num / 2 + this.upgradeEffectY(GameCanvas.gameTick - i * 4);
			g.setColor(this.colorBorder[num3][i]);
			g.fillRect(num4 - this.size[i] / 2, num5 - this.size[i] / 2, this.size[i], this.size[i]);
		}
		bool flag = upgrade == 4 || upgrade == 8;
		if (flag)
		{
			for (int j = num2; j < this.size.Length; j++)
			{
				int num6 = x - num / 2 + this.upgradeEffectX(GameCanvas.gameTick - num * 2 - j * 4);
				int num7 = y - num / 2 + this.upgradeEffectY(GameCanvas.gameTick - num * 2 - j * 4);
				g.setColor(this.colorBorder[num3 - 1][j]);
				g.fillRect(num6 - this.size[j] / 2, num7 - this.size[j] / 2, this.size[j], this.size[j]);
			}
		}
		bool flag2 = upgrade != 1 && upgrade != 4 && upgrade != 8;
		if (flag2)
		{
			for (int k = num2; k < this.size.Length; k++)
			{
				int num8 = x - num / 2 + this.upgradeEffectX(GameCanvas.gameTick - num * 2 - k * 4);
				int num9 = y - num / 2 + this.upgradeEffectY(GameCanvas.gameTick - num * 2 - k * 4);
				g.setColor(this.colorBorder[num3][k]);
				g.fillRect(num8 - this.size[k] / 2, num9 - this.size[k] / 2, this.size[k], this.size[k]);
			}
		}
		bool flag3 = upgrade != 1 && upgrade != 4 && upgrade != 8 && upgrade != 12 && upgrade != 2 && upgrade != 5 && upgrade != 9;
		if (flag3)
		{
			for (int l = num2; l < this.size.Length; l++)
			{
				int num10 = x - num / 2 + this.upgradeEffectX(GameCanvas.gameTick - num - l * 4);
				int num11 = y - num / 2 + this.upgradeEffectY(GameCanvas.gameTick - num - l * 4);
				g.setColor(this.colorBorder[num3][l]);
				g.fillRect(num10 - this.size[l] / 2, num11 - this.size[l] / 2, this.size[l], this.size[l]);
			}
		}
		bool flag4 = upgrade != 1 && upgrade != 4 && upgrade != 8 && upgrade != 12 && upgrade != 2 && upgrade != 5 && upgrade != 9 && upgrade != 13 && upgrade != 3 && upgrade != 6 && upgrade != 10 && upgrade != 15;
		if (flag4)
		{
			for (int m = num2; m < this.size.Length; m++)
			{
				int num12 = x - num / 2 + this.upgradeEffectX(GameCanvas.gameTick - num * 3 - m * 4);
				int num13 = y - num / 2 + this.upgradeEffectY(GameCanvas.gameTick - num * 3 - m * 4);
				g.setColor(this.colorBorder[num3][m]);
				g.fillRect(num12 - this.size[m] / 2, num13 - this.size[m] / 2, this.size[m], this.size[m]);
			}
		}
	}

	// Token: 0x060005BD RID: 1469 RVA: 0x0006628C File Offset: 0x0006448C
	private int upgradeEffectY(int tick)
	{
		int num = GameScr.indexSize - 2;
		int num2 = tick % (4 * num);
		bool flag = 0 <= num2 && num2 < num;
		int result;
		if (flag)
		{
			result = 0;
		}
		else
		{
			bool flag2 = num <= num2 && num2 < num * 2;
			if (flag2)
			{
				result = num2 % num;
			}
			else
			{
				bool flag3 = num * 2 <= num2 && num2 < num * 3;
				if (flag3)
				{
					result = num;
				}
				else
				{
					result = num - num2 % num;
				}
			}
		}
		return result;
	}

	// Token: 0x060005BE RID: 1470 RVA: 0x000662FC File Offset: 0x000644FC
	private int upgradeEffectX(int tick)
	{
		int num = GameScr.indexSize - 2;
		int num2 = tick % (4 * num);
		bool flag = 0 <= num2 && num2 < num;
		int result;
		if (flag)
		{
			result = num2 % num;
		}
		else
		{
			bool flag2 = num <= num2 && num2 < num * 2;
			if (flag2)
			{
				result = num;
			}
			else
			{
				bool flag3 = num * 2 <= num2 && num2 < num * 3;
				if (flag3)
				{
					result = num - num2 % num;
				}
				else
				{
					result = 0;
				}
			}
		}
		return result;
	}

	// Token: 0x060005BF RID: 1471 RVA: 0x0006636C File Offset: 0x0006456C
	public bool isHaveOption(int id)
	{
		for (int i = 0; i < this.itemOption.Length; i++)
		{
			ItemOption itemOption = this.itemOption[i];
			bool flag = itemOption != null && itemOption.optionTemplate.id == id;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060005C0 RID: 1472 RVA: 0x000663C0 File Offset: 0x000645C0
	public Item clone()
	{
		Item item = new Item();
		item.template = this.template;
		bool flag = this.options != null;
		if (flag)
		{
			item.options = new MyVector();
			for (int i = 0; i < this.options.size(); i++)
			{
				ItemOption itemOption = new ItemOption();
				itemOption.optionTemplate = ((ItemOption)this.options.elementAt(i)).optionTemplate;
				itemOption.param = ((ItemOption)this.options.elementAt(i)).param;
				item.options.addElement(itemOption);
			}
		}
		item.itemId = this.itemId;
		item.playerId = this.playerId;
		item.indexUI = this.indexUI;
		item.quantity = this.quantity;
		item.isLock = this.isLock;
		item.sys = this.sys;
		item.upgrade = this.upgrade;
		item.buyCoin = this.buyCoin;
		item.buyCoinLock = this.buyCoinLock;
		item.buyGold = this.buyGold;
		item.buyGoldLock = this.buyGoldLock;
		item.saleCoinLock = this.saleCoinLock;
		item.typeUI = this.typeUI;
		item.isExpires = this.isExpires;
		return item;
	}

	// Token: 0x060005C1 RID: 1473 RVA: 0x00066514 File Offset: 0x00064714
	public bool isTypeBody()
	{
		return (0 <= this.template.type && this.template.type < 6) || this.template.type == 32 || this.template.type == 35 || this.template.type == 11 || this.template.type == 23;
	}

	// Token: 0x060005C2 RID: 1474 RVA: 0x0006658C File Offset: 0x0006478C
	public string getLockstring()
	{
		return (!this.isLock) ? mResources.NOLOCK : mResources.LOCKED;
	}

	// Token: 0x060005C3 RID: 1475 RVA: 0x000665B4 File Offset: 0x000647B4
	public string getUpgradestring()
	{
		bool flag = this.template.level < 10 || this.template.type >= 10;
		string result;
		if (flag)
		{
			result = mResources.NOTUPGRADE;
		}
		else
		{
			bool flag2 = this.upgrade == 0;
			if (flag2)
			{
				result = mResources.NOUPGRADE;
			}
			else
			{
				result = null;
			}
		}
		return result;
	}

	// Token: 0x060005C4 RID: 1476 RVA: 0x00066610 File Offset: 0x00064810
	public bool isTypeUIMe()
	{
		return this.typeUI == 5 || this.typeUI == 3 || this.typeUI == 4;
	}

	// Token: 0x060005C5 RID: 1477 RVA: 0x0006664C File Offset: 0x0006484C
	public bool isTypeUIShopView()
	{
		bool flag = this.isTypeUIShop();
		bool result;
		if (flag)
		{
			result = true;
		}
		else
		{
			bool flag2 = this.isTypeUIStore() || this.isTypeUIBook() || this.isTypeUIFashion();
			result = flag2;
		}
		return result;
	}

	// Token: 0x060005C6 RID: 1478 RVA: 0x00066690 File Offset: 0x00064890
	public bool isTypeUIShop()
	{
		return this.typeUI == 20 || this.typeUI == 21 || this.typeUI == 22 || this.typeUI == 23 || this.typeUI == 24 || this.typeUI == 25 || this.typeUI == 26 || this.typeUI == 27 || this.typeUI == 28 || this.typeUI == 29 || this.typeUI == 16 || this.typeUI == 17 || this.typeUI == 18 || this.typeUI == 19 || this.typeUI == 2 || this.typeUI == 6 || this.typeUI == 8;
	}

	// Token: 0x060005C7 RID: 1479 RVA: 0x00066764 File Offset: 0x00064964
	public bool isTypeUIShopLock()
	{
		return this.typeUI == 7 || this.typeUI == 9;
	}

	// Token: 0x060005C8 RID: 1480 RVA: 0x00066798 File Offset: 0x00064998
	public bool isTypeUIStore()
	{
		return this.typeUI == 14;
	}

	// Token: 0x060005C9 RID: 1481 RVA: 0x000667C0 File Offset: 0x000649C0
	public bool isTypeUIBook()
	{
		return this.typeUI == 15;
	}

	// Token: 0x060005CA RID: 1482 RVA: 0x000667E8 File Offset: 0x000649E8
	public bool isTypeUIFashion()
	{
		return this.typeUI == 32;
	}

	// Token: 0x060005CB RID: 1483 RVA: 0x00066810 File Offset: 0x00064A10
	public bool isUpMax()
	{
		return this.getUpMax() == this.upgrade;
	}

	// Token: 0x060005CC RID: 1484 RVA: 0x0006683C File Offset: 0x00064A3C
	public int getUpMax()
	{
		bool flag = this.template.level >= 1 && this.template.level < 20;
		int result;
		if (flag)
		{
			result = 4;
		}
		else
		{
			bool flag2 = this.template.level >= 20 && this.template.level < 40;
			if (flag2)
			{
				result = 8;
			}
			else
			{
				bool flag3 = this.template.level >= 40 && this.template.level < 50;
				if (flag3)
				{
					result = 12;
				}
				else
				{
					bool flag4 = this.template.level >= 50 && this.template.level < 60;
					if (flag4)
					{
						result = 14;
					}
					else
					{
						result = 16;
					}
				}
			}
		}
		return result;
	}

	// Token: 0x060005CD RID: 1485 RVA: 0x000668FE File Offset: 0x00064AFE
	public void setPartTemp(int headTemp, int bodyTemp, int legTemp, int bagTemp)
	{
		this.headTemp = headTemp;
		this.bodyTemp = bodyTemp;
		this.legTemp = legTemp;
		this.bagTemp = bagTemp;
	}

	// Token: 0x04000A1D RID: 2589
	public const int OPT_STAR = 34;

	// Token: 0x04000A1E RID: 2590
	public const int OPT_MOON = 35;

	// Token: 0x04000A1F RID: 2591
	public const int OPT_SUN = 36;

	// Token: 0x04000A20 RID: 2592
	public const int OPT_COLORNAME = 41;

	// Token: 0x04000A21 RID: 2593
	public const int OPT_LVITEM = 72;

	// Token: 0x04000A22 RID: 2594
	public const int OPT_STARSLOT = 102;

	// Token: 0x04000A23 RID: 2595
	public const int OPT_MAXSTARSLOT = 107;

	// Token: 0x04000A24 RID: 2596
	public const int TYPE_BODY_MIN = 0;

	// Token: 0x04000A25 RID: 2597
	public const int TYPE_BODY_MAX = 6;

	// Token: 0x04000A26 RID: 2598
	public const int TYPE_AO = 0;

	// Token: 0x04000A27 RID: 2599
	public const int TYPE_QUAN = 1;

	// Token: 0x04000A28 RID: 2600
	public const int TYPE_GANGTAY = 2;

	// Token: 0x04000A29 RID: 2601
	public const int TYPE_GIAY = 3;

	// Token: 0x04000A2A RID: 2602
	public const int TYPE_RADA = 4;

	// Token: 0x04000A2B RID: 2603
	public const int TYPE_HAIR = 5;

	// Token: 0x04000A2C RID: 2604
	public const int TYPE_DAUTHAN = 6;

	// Token: 0x04000A2D RID: 2605
	public const int TYPE_NGOCRONG = 12;

	// Token: 0x04000A2E RID: 2606
	public const int TYPE_SACH = 7;

	// Token: 0x04000A2F RID: 2607
	public const int TYPE_NHIEMVU = 8;

	// Token: 0x04000A30 RID: 2608
	public const int TYPE_GOLD = 9;

	// Token: 0x04000A31 RID: 2609
	public const int TYPE_DIAMOND = 10;

	// Token: 0x04000A32 RID: 2610
	public const int TYPE_BALO = 11;

	// Token: 0x04000A33 RID: 2611
	public const int TYPE_MOUNT = 23;

	// Token: 0x04000A34 RID: 2612
	public const int TYPE_MOUNT_VIP = 24;

	// Token: 0x04000A35 RID: 2613
	public const int TYPE_DIAMOND_LOCK = 34;

	// Token: 0x04000A36 RID: 2614
	public const int TYPE_TRAINSUIT = 32;

	// Token: 0x04000A37 RID: 2615
	public const int TYPE_HAT = 35;

	// Token: 0x04000A38 RID: 2616
	public const sbyte UI_WEAPON = 2;

	// Token: 0x04000A39 RID: 2617
	public const sbyte UI_BAG = 3;

	// Token: 0x04000A3A RID: 2618
	public const sbyte UI_BOX = 4;

	// Token: 0x04000A3B RID: 2619
	public const sbyte UI_BODY = 5;

	// Token: 0x04000A3C RID: 2620
	public const sbyte UI_STACK = 6;

	// Token: 0x04000A3D RID: 2621
	public const sbyte UI_STACK_LOCK = 7;

	// Token: 0x04000A3E RID: 2622
	public const sbyte UI_GROCERY = 8;

	// Token: 0x04000A3F RID: 2623
	public const sbyte UI_GROCERY_LOCK = 9;

	// Token: 0x04000A40 RID: 2624
	public const sbyte UI_UPGRADE = 10;

	// Token: 0x04000A41 RID: 2625
	public const sbyte UI_UPPEARL = 11;

	// Token: 0x04000A42 RID: 2626
	public const sbyte UI_UPPEARL_LOCK = 12;

	// Token: 0x04000A43 RID: 2627
	public const sbyte UI_SPLIT = 13;

	// Token: 0x04000A44 RID: 2628
	public const sbyte UI_STORE = 14;

	// Token: 0x04000A45 RID: 2629
	public const sbyte UI_BOOK = 15;

	// Token: 0x04000A46 RID: 2630
	public const sbyte UI_LIEN = 16;

	// Token: 0x04000A47 RID: 2631
	public const sbyte UI_NHAN = 17;

	// Token: 0x04000A48 RID: 2632
	public const sbyte UI_NGOCBOI = 18;

	// Token: 0x04000A49 RID: 2633
	public const sbyte UI_PHU = 19;

	// Token: 0x04000A4A RID: 2634
	public const sbyte UI_NONNAM = 20;

	// Token: 0x04000A4B RID: 2635
	public const sbyte UI_NONNU = 21;

	// Token: 0x04000A4C RID: 2636
	public const sbyte UI_AONAM = 22;

	// Token: 0x04000A4D RID: 2637
	public const sbyte UI_AONU = 23;

	// Token: 0x04000A4E RID: 2638
	public const sbyte UI_GANGTAYNAM = 24;

	// Token: 0x04000A4F RID: 2639
	public const sbyte UI_GANGTAYNU = 25;

	// Token: 0x04000A50 RID: 2640
	public const sbyte UI_QUANNAM = 26;

	// Token: 0x04000A51 RID: 2641
	public const sbyte UI_QUANNU = 27;

	// Token: 0x04000A52 RID: 2642
	public const sbyte UI_GIAYNAM = 28;

	// Token: 0x04000A53 RID: 2643
	public const sbyte UI_GIAYNU = 29;

	// Token: 0x04000A54 RID: 2644
	public const sbyte UI_TRADE = 30;

	// Token: 0x04000A55 RID: 2645
	public const sbyte UI_UPGRADE_GOLD = 31;

	// Token: 0x04000A56 RID: 2646
	public const sbyte UI_FASHION = 32;

	// Token: 0x04000A57 RID: 2647
	public const sbyte UI_CONVERT = 33;

	// Token: 0x04000A58 RID: 2648
	public ItemOption[] itemOption;

	// Token: 0x04000A59 RID: 2649
	public ItemTemplate template;

	// Token: 0x04000A5A RID: 2650
	public MyVector options;

	// Token: 0x04000A5B RID: 2651
	public int itemId;

	// Token: 0x04000A5C RID: 2652
	public int playerId;

	// Token: 0x04000A5D RID: 2653
	public bool isSelect;

	// Token: 0x04000A5E RID: 2654
	public int indexUI;

	// Token: 0x04000A5F RID: 2655
	public int quantity;

	// Token: 0x04000A60 RID: 2656
	public int quantilyToBuy;

	// Token: 0x04000A61 RID: 2657
	public long powerRequire;

	// Token: 0x04000A62 RID: 2658
	public bool isLock;

	// Token: 0x04000A63 RID: 2659
	public int sys;

	// Token: 0x04000A64 RID: 2660
	public int upgrade;

	// Token: 0x04000A65 RID: 2661
	public int buyCoin;

	// Token: 0x04000A66 RID: 2662
	public int buyCoinLock;

	// Token: 0x04000A67 RID: 2663
	public int buyGold;

	// Token: 0x04000A68 RID: 2664
	public int buyGoldLock;

	// Token: 0x04000A69 RID: 2665
	public int saleCoinLock;

	// Token: 0x04000A6A RID: 2666
	public int buySpec;

	// Token: 0x04000A6B RID: 2667
	public int buyRuby;

	// Token: 0x04000A6C RID: 2668
	public short iconSpec = -1;

	// Token: 0x04000A6D RID: 2669
	public sbyte buyType = -1;

	// Token: 0x04000A6E RID: 2670
	public int typeUI;

	// Token: 0x04000A6F RID: 2671
	public bool isExpires;

	// Token: 0x04000A70 RID: 2672
	public bool isBuySpec;

	// Token: 0x04000A71 RID: 2673
	public EffectCharPaint eff;

	// Token: 0x04000A72 RID: 2674
	public int indexEff;

	// Token: 0x04000A73 RID: 2675
	public Image img;

	// Token: 0x04000A74 RID: 2676
	public string info;

	// Token: 0x04000A75 RID: 2677
	public string content;

	// Token: 0x04000A76 RID: 2678
	public string reason = string.Empty;

	// Token: 0x04000A77 RID: 2679
	public int compare;

	// Token: 0x04000A78 RID: 2680
	public sbyte isMe;

	// Token: 0x04000A79 RID: 2681
	public bool newItem;

	// Token: 0x04000A7A RID: 2682
	public int headTemp = -1;

	// Token: 0x04000A7B RID: 2683
	public int bodyTemp = -1;

	// Token: 0x04000A7C RID: 2684
	public int legTemp = -1;

	// Token: 0x04000A7D RID: 2685
	public int bagTemp = -1;

	// Token: 0x04000A7E RID: 2686
	public int wpTemp = -1;

	// Token: 0x04000A7F RID: 2687
	public string nameNguoiKyGui = string.Empty;

	// Token: 0x04000A80 RID: 2688
	private int[] color = new int[]
	{
		0,
		0,
		0,
		0,
		600841,
		600841,
		667658,
		667658,
		3346944,
		3346688,
		4199680,
		5052928,
		3276851,
		3932211,
		4587571,
		5046280,
		6684682,
		3359744
	};

	// Token: 0x04000A81 RID: 2689
	private int[][] colorBorder = new int[][]
	{
		new int[]
		{
			18687,
			16869,
			15052,
			13235,
			11161,
			9344
		},
		new int[]
		{
			45824,
			39168,
			32768,
			26112,
			19712,
			13056
		},
		new int[]
		{
			16744192,
			15037184,
			13395456,
			11753728,
			10046464,
			8404992
		},
		new int[]
		{
			13500671,
			12058853,
			10682572,
			9371827,
			7995545,
			6684800
		},
		new int[]
		{
			16711705,
			15007767,
			13369364,
			11730962,
			10027023,
			8388621
		}
	};

	// Token: 0x04000A82 RID: 2690
	private int[] size = new int[]
	{
		2,
		1,
		1,
		1,
		1,
		1
	};
}
using System;

// Token: 0x02000072 RID: 114
public class ItemMap : IMapObject
{
	// Token: 0x060005CF RID: 1487 RVA: 0x00066A1C File Offset: 0x00064C1C
	public ItemMap(short itemMapID, short itemTemplateID, int x, int y, int xEnd, int yEnd)
	{
		this.itemMapID = (int)itemMapID;
		this.template = ItemTemplates.get(itemTemplateID);
		this.x = xEnd;
		this.y = y;
		this.xEnd = xEnd;
		this.yEnd = yEnd;
		this.vx = xEnd - x >> 2;
		this.vy = 5;
		Res.outz("playerid=  " + this.playerId.ToString() + " myid= " + global::Char.myCharz().charID.ToString());
	}

	// Token: 0x060005D0 RID: 1488 RVA: 0x00066AB0 File Offset: 0x00064CB0
	public ItemMap(int playerId, short itemMapID, short itemTemplateID, int x, int y, short r)
	{
		Res.outz(string.Concat(new string[]
		{
			"item map item= ",
			itemMapID.ToString(),
			" template= ",
			itemTemplateID.ToString(),
			" x= ",
			x.ToString(),
			" y= ",
			y.ToString()
		}));
		this.itemMapID = (int)itemMapID;
		this.template = ItemTemplates.get(itemTemplateID);
		Res.outz("playerid=  " + playerId.ToString() + " myid= " + global::Char.myCharz().charID.ToString());
		this.x = (this.xEnd = x);
		this.y = (this.yEnd = y);
		this.status = 1;
		this.playerId = playerId;
		bool flag = this.isAuraItem();
		if (flag)
		{
			this.rO = (int)r;
			this.setAuraItem();
		}
	}

	// Token: 0x060005D1 RID: 1489 RVA: 0x00066BAE File Offset: 0x00064DAE
	public void setPoint(int xEnd, int yEnd)
	{
		this.xEnd = xEnd;
		this.yEnd = yEnd;
		this.vx = xEnd - this.x >> 2;
		this.vy = yEnd - this.y >> 2;
		this.status = 2;
	}

	// Token: 0x060005D2 RID: 1490 RVA: 0x00066BE8 File Offset: 0x00064DE8
	public void update()
	{
		bool flag = this.status == 2 && this.x == this.xEnd && this.y == this.yEnd;
		if (flag)
		{
			GameScr.vItemMap.removeElement(this);
			bool flag2 = global::Char.myCharz().itemFocus != null && global::Char.myCharz().itemFocus.Equals(this);
			if (flag2)
			{
				global::Char.myCharz().itemFocus = null;
			}
		}
		else
		{
			bool flag3 = this.status > 0;
			if (flag3)
			{
				bool flag4 = this.vx == 0;
				if (flag4)
				{
					this.x = this.xEnd;
				}
				bool flag5 = this.vy == 0;
				if (flag5)
				{
					this.y = this.yEnd;
				}
				bool flag6 = this.x != this.xEnd;
				if (flag6)
				{
					this.x += this.vx;
					bool flag7 = (this.vx > 0 && this.x > this.xEnd) || (this.vx < 0 && this.x < this.xEnd);
					if (flag7)
					{
						this.x = this.xEnd;
					}
				}
				bool flag8 = this.y != this.yEnd;
				if (flag8)
				{
					this.y += this.vy;
					bool flag9 = (this.vy > 0 && this.y > this.yEnd) || (this.vy < 0 && this.y < this.yEnd);
					if (flag9)
					{
						this.y = this.yEnd;
					}
				}
			}
			else
			{
				this.status -= 4;
				bool flag10 = this.status < -12;
				if (flag10)
				{
					this.y -= 12;
					this.status = 1;
				}
			}
			bool flag11 = this.isAuraItem();
			if (flag11)
			{
				this.updateAuraItemEff();
			}
		}
	}

	// Token: 0x060005D3 RID: 1491 RVA: 0x00066DE8 File Offset: 0x00064FE8
	public void paint(mGraphics g)
	{
		bool flag = this.isAuraItem();
		if (flag)
		{
			g.drawImage(TileMap.bong, this.x + 3, this.y, mGraphics.VCENTER | mGraphics.HCENTER);
			bool flag2 = this.status <= 0;
			if (flag2)
			{
				bool flag3 = this.countAura < 10;
				if (flag3)
				{
					g.drawImage(ItemMap.imageAuraItem1, this.x, this.y + (int)this.status + 3, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
				else
				{
					g.drawImage(ItemMap.imageAuraItem2, this.x, this.y + (int)this.status + 3, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
			}
			else
			{
				bool flag4 = this.countAura < 10;
				if (flag4)
				{
					g.drawImage(ItemMap.imageAuraItem1, this.x, this.y + 3, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
				else
				{
					g.drawImage(ItemMap.imageAuraItem2, this.x, this.y + 3, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
			}
		}
		else
		{
			bool flag5 = !this.isAuraItem();
			if (flag5)
			{
				bool flag6 = GameCanvas.gameTick % 4 == 0;
				if (flag6)
				{
					g.drawImage(ItemMap.imageFlare, this.x, this.y + (int)this.status + 13, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
				bool flag7 = this.status <= 0;
				if (flag7)
				{
					SmallImage.drawSmallImage(g, (int)this.template.iconID, this.x, this.y + (int)this.status + 3, 0, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
				else
				{
					SmallImage.drawSmallImage(g, (int)this.template.iconID, this.x, this.y + 3, 0, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
				bool flag8 = global::Char.myCharz().itemFocus != null && global::Char.myCharz().itemFocus.Equals(this) && this.status != 2;
				if (flag8)
				{
					g.drawRegion(Mob.imgHP, 0, 24, 9, 6, 0, this.x, this.y - 17, 3);
				}
			}
		}
	}

	// Token: 0x060005D4 RID: 1492 RVA: 0x00067030 File Offset: 0x00065230
	private bool isAuraItem()
	{
		return this.template.type == 22;
	}

	// Token: 0x060005D5 RID: 1493 RVA: 0x00067060 File Offset: 0x00065260
	private void setAuraItem()
	{
		this.xO = this.x;
		this.yO = this.y;
		this.iDot = 120;
		this.angle = 0;
		bool flag = !GameCanvas.lowGraphic;
		if (flag)
		{
			this.iAngle = 360 / this.iDot;
			this.xArg = new int[this.iDot];
			this.yArg = new int[this.iDot];
			this.xDot = new int[this.iDot];
			this.yDot = new int[this.iDot];
			this.setDotPosition();
		}
	}

	// Token: 0x060005D6 RID: 1494 RVA: 0x00067100 File Offset: 0x00065300
	private void updateAuraItemEff()
	{
		this.count++;
		this.countAura++;
		bool flag = this.countAura >= 40;
		if (flag)
		{
			this.countAura = 0;
		}
		bool flag2 = this.count >= this.iDot;
		if (flag2)
		{
			this.count = 0;
		}
		bool flag3 = this.count % 10 == 0 && !GameCanvas.lowGraphic;
		if (flag3)
		{
			ServerEffect.addServerEffect(114, this.x - 5, this.y - 30, 1);
		}
	}

	// Token: 0x060005D7 RID: 1495 RVA: 0x00067198 File Offset: 0x00065398
	public void paintAuraItemEff(mGraphics g)
	{
		bool flag = GameCanvas.lowGraphic || !this.isAuraItem();
		if (!flag)
		{
			for (int i = 0; i < this.yArg.Length; i++)
			{
				bool flag2 = this.count == i;
				if (flag2)
				{
					bool flag3 = this.countAura <= 20;
					if (flag3)
					{
						g.drawImage(ItemMap.imageAuraItem3, this.xDot[i], this.yDot[i] + 3, mGraphics.BOTTOM | mGraphics.HCENTER);
					}
					else
					{
						SmallImage.drawSmallImage(g, (int)this.template.iconID, this.xDot[i], this.yDot[i] + 3, 0, mGraphics.BOTTOM | mGraphics.HCENTER);
					}
				}
			}
		}
	}

	// Token: 0x060005D8 RID: 1496 RVA: 0x00067264 File Offset: 0x00065464
	private void setDotPosition()
	{
		bool lowGraphic = GameCanvas.lowGraphic;
		if (!lowGraphic)
		{
			for (int i = 0; i < this.yArg.Length; i++)
			{
				this.yArg[i] = Res.abs(this.rO * Res.sin(this.angle) / 1024);
				this.xArg[i] = Res.abs(this.rO * Res.cos(this.angle) / 1024);
				bool flag = this.angle < 90;
				if (flag)
				{
					this.xDot[i] = this.xO + this.xArg[i];
					this.yDot[i] = this.yO - this.yArg[i];
				}
				else
				{
					bool flag2 = this.angle >= 90 && this.angle < 180;
					if (flag2)
					{
						this.xDot[i] = this.xO - this.xArg[i];
						this.yDot[i] = this.yO - this.yArg[i];
					}
					else
					{
						bool flag3 = this.angle >= 180 && this.angle < 270;
						if (flag3)
						{
							this.xDot[i] = this.xO - this.xArg[i];
							this.yDot[i] = this.yO + this.yArg[i];
						}
						else
						{
							this.xDot[i] = this.xO + this.xArg[i];
							this.yDot[i] = this.yO + this.yArg[i];
						}
					}
				}
				this.angle += this.iAngle;
			}
		}
	}

	// Token: 0x060005D9 RID: 1497 RVA: 0x0006741C File Offset: 0x0006561C
	public int getX()
	{
		return this.x;
	}

	// Token: 0x060005DA RID: 1498 RVA: 0x00067434 File Offset: 0x00065634
	public int getY()
	{
		return this.y;
	}

	// Token: 0x060005DB RID: 1499 RVA: 0x0006744C File Offset: 0x0006564C
	public int getH()
	{
		return 20;
	}

	// Token: 0x060005DC RID: 1500 RVA: 0x00067460 File Offset: 0x00065660
	public int getW()
	{
		return 20;
	}

	// Token: 0x060005DD RID: 1501 RVA: 0x00067474 File Offset: 0x00065674
	public void stopMoving()
	{
	}

	// Token: 0x060005DE RID: 1502 RVA: 0x00067478 File Offset: 0x00065678
	public bool isInvisible()
	{
		return false;
	}

	// Token: 0x04000A83 RID: 2691
	public int x;

	// Token: 0x04000A84 RID: 2692
	public int countAutoPick = 0;

	// Token: 0x04000A85 RID: 2693
	public int y;

	// Token: 0x04000A86 RID: 2694
	public int xEnd;

	// Token: 0x04000A87 RID: 2695
	public int yEnd;

	// Token: 0x04000A88 RID: 2696
	public int f;

	// Token: 0x04000A89 RID: 2697
	public int vx;

	// Token: 0x04000A8A RID: 2698
	public int vy;

	// Token: 0x04000A8B RID: 2699
	public int playerId;

	// Token: 0x04000A8C RID: 2700
	public int itemMapID;

	// Token: 0x04000A8D RID: 2701
	public int IdCharMove;

	// Token: 0x04000A8E RID: 2702
	public ItemTemplate template;

	// Token: 0x04000A8F RID: 2703
	public sbyte status;

	// Token: 0x04000A90 RID: 2704
	public bool isHintFocus;

	// Token: 0x04000A91 RID: 2705
	public int rO;

	// Token: 0x04000A92 RID: 2706
	public int xO;

	// Token: 0x04000A93 RID: 2707
	public int yO;

	// Token: 0x04000A94 RID: 2708
	public int angle;

	// Token: 0x04000A95 RID: 2709
	public int iAngle;

	// Token: 0x04000A96 RID: 2710
	public int iDot;

	// Token: 0x04000A97 RID: 2711
	public int[] xArg;

	// Token: 0x04000A98 RID: 2712
	public int[] yArg;

	// Token: 0x04000A99 RID: 2713
	public int[] xDot;

	// Token: 0x04000A9A RID: 2714
	public int[] yDot;

	// Token: 0x04000A9B RID: 2715
	public int count;

	// Token: 0x04000A9C RID: 2716
	public int countAura;

	// Token: 0x04000A9D RID: 2717
	public static Image imageFlare = GameCanvas.loadImage("/mainImage/myTexture2dflare.png");

	// Token: 0x04000A9E RID: 2718
	public static Image imageAuraItem1 = GameCanvas.loadImage("/mainImage/myTexture2ditemaura1.png");

	// Token: 0x04000A9F RID: 2719
	public static Image imageAuraItem2 = GameCanvas.loadImage("/mainImage/myTexture2ditemaura2.png");

	// Token: 0x04000AA0 RID: 2720
	public static Image imageAuraItem3 = GameCanvas.loadImage("/mainImage/myTexture2ditemaura3.png");
}
using System;

// Token: 0x02000073 RID: 115
public class ItemObject
{
	// Token: 0x04000AA1 RID: 2721
	public int id;

	// Token: 0x04000AA2 RID: 2722
	public int where;

	// Token: 0x04000AA3 RID: 2723
	public int type;

	// Token: 0x04000AA4 RID: 2724
	public int indexX;

	// Token: 0x04000AA5 RID: 2725
	public int indexY;

	// Token: 0x04000AA6 RID: 2726
	public Image image;
}
using System;

// Token: 0x02000074 RID: 116
public class ItemOption
{
	// Token: 0x060005E1 RID: 1505 RVA: 0x000674D2 File Offset: 0x000656D2
	public ItemOption()
	{
	}

	// Token: 0x060005E2 RID: 1506 RVA: 0x000674DC File Offset: 0x000656DC
	public ItemOption(int optionTemplateId, int param)
	{
		bool flag = optionTemplateId == 22;
		if (flag)
		{
			optionTemplateId = 6;
			param *= 1000;
		}
		bool flag2 = optionTemplateId == 23;
		if (flag2)
		{
			optionTemplateId = 7;
			param *= 1000;
		}
		this.param = param;
		this.optionTemplate = GameScr.gI().iOptionTemplates[optionTemplateId];
	}

	// Token: 0x060005E3 RID: 1507 RVA: 0x00067538 File Offset: 0x00065738
	public string getOptionString()
	{
		return NinjaUtil.replace(this.optionTemplate.name, "#", this.param.ToString() + string.Empty);
	}

	// Token: 0x060005E4 RID: 1508 RVA: 0x00067574 File Offset: 0x00065774
	public string getOptionName()
	{
		return NinjaUtil.replace(this.optionTemplate.name, "+#", string.Empty);
	}

	// Token: 0x060005E5 RID: 1509 RVA: 0x000675A0 File Offset: 0x000657A0
	public string getOptiongColor()
	{
		return NinjaUtil.replace(this.optionTemplate.name, "$", string.Empty);
	}

	// Token: 0x04000AA7 RID: 2727
	public int param;

	// Token: 0x04000AA8 RID: 2728
	public sbyte active;

	// Token: 0x04000AA9 RID: 2729
	public sbyte activeCard;

	// Token: 0x04000AAA RID: 2730
	public ItemOptionTemplate optionTemplate;
}
using System;

// Token: 0x02000075 RID: 117
public class ItemOptionTemplate
{
	// Token: 0x04000AAB RID: 2731
	public int id;

	// Token: 0x04000AAC RID: 2732
	public string name;

	// Token: 0x04000AAD RID: 2733
	public int type;
}
using System;

// Token: 0x02000076 RID: 118
public class ItemTemplate
{
	// Token: 0x060005E7 RID: 1511 RVA: 0x000675D8 File Offset: 0x000657D8
	public ItemTemplate(short templateID, sbyte type, sbyte gender, string name, string description, sbyte level, int strRequire, short iconID, short part, bool isUpToUp)
	{
		this.id = templateID;
		this.type = type;
		this.gender = gender;
		this.name = name;
		this.name = Res.changeString(this.name);
		this.description = description;
		this.description = Res.changeString(this.description);
		this.level = level;
		this.strRequire = strRequire;
		this.iconID = iconID;
		this.part = part;
		this.isUpToUp = isUpToUp;
	}

	// Token: 0x04000AAE RID: 2734
	public short id;

	// Token: 0x04000AAF RID: 2735
	public sbyte type;

	// Token: 0x04000AB0 RID: 2736
	public sbyte gender;

	// Token: 0x04000AB1 RID: 2737
	public string name;

	// Token: 0x04000AB2 RID: 2738
	public string[] subName;

	// Token: 0x04000AB3 RID: 2739
	public string description;

	// Token: 0x04000AB4 RID: 2740
	public sbyte level;

	// Token: 0x04000AB5 RID: 2741
	public short iconID;

	// Token: 0x04000AB6 RID: 2742
	public short part;

	// Token: 0x04000AB7 RID: 2743
	public bool isUpToUp;

	// Token: 0x04000AB8 RID: 2744
	public int w;

	// Token: 0x04000AB9 RID: 2745
	public int h;

	// Token: 0x04000ABA RID: 2746
	public int strRequire;
}
using System;

// Token: 0x02000077 RID: 119
public class ItemTemplates
{
	// Token: 0x060005E8 RID: 1512 RVA: 0x0006765C File Offset: 0x0006585C
	public static void add(ItemTemplate it)
	{
		ItemTemplates.itemTemplates.put(it.id, it);
	}

	// Token: 0x060005E9 RID: 1513 RVA: 0x00067678 File Offset: 0x00065878
	public static ItemTemplate get(short id)
	{
		return (ItemTemplate)ItemTemplates.itemTemplates.get(id);
	}

	// Token: 0x060005EA RID: 1514 RVA: 0x000676A0 File Offset: 0x000658A0
	public static short getPart(short itemTemplateID)
	{
		return ItemTemplates.get(itemTemplateID).part;
	}

	// Token: 0x060005EB RID: 1515 RVA: 0x000676C0 File Offset: 0x000658C0
	public static short getIcon(short itemTemplateID)
	{
		return ItemTemplates.get(itemTemplateID).iconID;
	}

	// Token: 0x04000ABB RID: 2747
	public static MyHashTable itemTemplates = new MyHashTable();
}
using System;

// Token: 0x02000078 RID: 120
public class ItemTime
{
	// Token: 0x060005EE RID: 1518 RVA: 0x000676F2 File Offset: 0x000658F2
	public ItemTime()
	{
	}

	// Token: 0x060005EF RID: 1519 RVA: 0x00067704 File Offset: 0x00065904
	public ItemTime(short idIcon, int s)
	{
		this.idIcon = idIcon;
		this.minute = s / 60;
		this.second = s % 60;
		this.time = s;
		this.coutTime = s;
		this.curr = (this.last = mSystem.currentTimeMillis());
		this.isPaint_coolDownBar = (idIcon == 14);
	}

	// Token: 0x060005F0 RID: 1520 RVA: 0x0006776C File Offset: 0x0006596C
	public void initTimeText(sbyte id, string text, int time)
	{
		bool flag = time == -1;
		if (flag)
		{
			this.dontClear = true;
		}
		else
		{
			this.dontClear = false;
		}
		this.isText = true;
		this.minute = time / 60;
		this.second = time % 60;
		this.idIcon = (short)id;
		this.time = time;
		this.coutTime = time;
		this.text = text;
		this.curr = (this.last = mSystem.currentTimeMillis());
		this.isPaint_coolDownBar = (this.idIcon == 14);
	}

	// Token: 0x060005F1 RID: 1521 RVA: 0x000677F4 File Offset: 0x000659F4
	public void initTime(int time, bool isText)
	{
		this.minute = time / 60;
		this.second = time % 60;
		this.time = time;
		this.coutTime = time;
		this.isText = isText;
		this.curr = (this.last = mSystem.currentTimeMillis());
	}

	// Token: 0x060005F2 RID: 1522 RVA: 0x00067840 File Offset: 0x00065A40
	public static bool isExistItem(int id)
	{
		for (int i = 0; i < global::Char.vItemTime.size(); i++)
		{
			ItemTime itemTime = (ItemTime)global::Char.vItemTime.elementAt(i);
			bool flag = (int)itemTime.idIcon == id;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060005F3 RID: 1523 RVA: 0x00067894 File Offset: 0x00065A94
	public static ItemTime getMessageById(int id)
	{
		for (int i = 0; i < GameScr.textTime.size(); i++)
		{
			ItemTime itemTime = (ItemTime)GameScr.textTime.elementAt(i);
			bool flag = (int)itemTime.idIcon == id;
			if (flag)
			{
				return itemTime;
			}
		}
		return null;
	}

	// Token: 0x060005F4 RID: 1524 RVA: 0x000678E8 File Offset: 0x00065AE8
	public static bool isExistMessage(int id)
	{
		for (int i = 0; i < GameScr.textTime.size(); i++)
		{
			ItemTime itemTime = (ItemTime)GameScr.textTime.elementAt(i);
			bool flag = (int)itemTime.idIcon == id;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060005F5 RID: 1525 RVA: 0x0006793C File Offset: 0x00065B3C
	public static ItemTime getItemById(int id)
	{
		for (int i = 0; i < global::Char.vItemTime.size(); i++)
		{
			ItemTime itemTime = (ItemTime)global::Char.vItemTime.elementAt(i);
			bool flag = (int)itemTime.idIcon == id;
			if (flag)
			{
				return itemTime;
			}
		}
		return null;
	}

	// Token: 0x060005F6 RID: 1526 RVA: 0x00067990 File Offset: 0x00065B90
	public void initTime(int time)
	{
		this.minute = time / 60;
		this.second = time % 60;
		this.coutTime = time;
		this.curr = (this.last = mSystem.currentTimeMillis());
	}

	// Token: 0x060005F7 RID: 1527 RVA: 0x000679D0 File Offset: 0x00065BD0
	public void paint(mGraphics g, int x, int y)
	{
		SmallImage.drawSmallImage(g, (int)this.idIcon, x, y, 0, 3);
		string st = string.Empty;
		st = this.minute.ToString() + "'";
		bool flag = this.minute == 0;
		if (flag)
		{
			st = this.second.ToString() + "s";
		}
		bool flag2 = this.idIcon == 3784;
		if (flag2)
		{
			ItemTime.TimeKhienCOnLai = this.second;
		}
		mFont.tahoma_7b_white.drawString(g, st, x, y + 15, 2, mFont.tahoma_7b_dark);
	}

	// Token: 0x060005F8 RID: 1528 RVA: 0x00067A68 File Offset: 0x00065C68
	public void paintText(mGraphics g, int x, int y)
	{
		bool flag = this.isPaint_coolDownBar;
		if (flag)
		{
			bool flag2 = global::Char.myCharz() != null;
			if (flag2)
			{
				int num = 80;
				int x2 = GameCanvas.w / 2 - num / 2;
				int y2 = GameCanvas.h - 80;
				g.setColor(8421504);
				g.fillRect(x2, y2, num, 2);
				g.setColor(16777215);
				bool flag3 = this.per > 0;
				if (flag3)
				{
					g.fillRect(x2, y2, num * this.per / 100, 2);
				}
			}
		}
		else
		{
			string str = string.Empty;
			str = this.minute.ToString() + "'";
			bool flag4 = this.minute < 1;
			if (flag4)
			{
				str = this.second.ToString() + "s";
			}
			bool flag5 = this.minute < 0;
			if (flag5)
			{
				str = string.Empty;
			}
			bool flag6 = this.dontClear;
			if (flag6)
			{
				str = string.Empty;
			}
			mFont.tahoma_7b_white.drawString(g, this.text + " " + str, x, y, 0, mFont.tahoma_7b_dark);
		}
	}

	// Token: 0x060005F9 RID: 1529 RVA: 0x00067B90 File Offset: 0x00065D90
	public void update()
	{
		this.curr = mSystem.currentTimeMillis();
		bool flag = this.curr - this.last >= 1000L;
		if (flag)
		{
			this.last = mSystem.currentTimeMillis();
			this.second--;
			this.coutTime--;
			bool flag2 = this.second <= 0;
			if (flag2)
			{
				this.second = 60;
				this.minute--;
			}
			bool flag3 = this.time > 0;
			if (flag3)
			{
				this.per = this.coutTime * 100 / this.time;
			}
		}
		bool flag4 = this.minute < 0 && !this.isText;
		if (flag4)
		{
			global::Char.vItemTime.removeElement(this);
		}
		bool flag5 = this.minute < 0 && this.isText && !this.dontClear;
		if (flag5)
		{
			GameScr.textTime.removeElement(this);
		}
	}

	// Token: 0x04000ABC RID: 2748
	public short idIcon;

	// Token: 0x04000ABD RID: 2749
	public int second;

	// Token: 0x04000ABE RID: 2750
	public int minute;

	// Token: 0x04000ABF RID: 2751
	private long curr;

	// Token: 0x04000AC0 RID: 2752
	private long last;

	// Token: 0x04000AC1 RID: 2753
	private bool isText;

	// Token: 0x04000AC2 RID: 2754
	private bool dontClear;

	// Token: 0x04000AC3 RID: 2755
	private string text;

	// Token: 0x04000AC4 RID: 2756
	private bool isPaint_coolDownBar;

	// Token: 0x04000AC5 RID: 2757
	public int time;

	// Token: 0x04000AC6 RID: 2758
	public int coutTime;

	// Token: 0x04000AC7 RID: 2759
	private int per = 100;

	// Token: 0x04000AC8 RID: 2760
	public static int TimeKhienCOnLai;
}
using System;

// Token: 0x0200001C RID: 28
internal class KameJoko
{
	// Token: 0x060000A3 RID: 163 RVA: 0x00006BC8 File Offset: 0x00004DC8
	public static void CheckKame()
	{
		bool flag = global::Char.myCharz().cLevelPercent <= 9990L;
		if (flag)
		{
			int tickCount = Environment.TickCount;
			bool flag2 = KameJoko.lastCheckTime == 0L;
			if (flag2)
			{
				KameJoko.lastPower = global::Char.myCharz().cPower;
				KameJoko.lastCheckTime = (long)tickCount;
			}
			long num = ((long)tickCount - KameJoko.lastCheckTime) / 100L;
			bool flag3 = num >= KameJoko.TimecheckOut;
			if (flag3)
			{
				bool flag4 = global::Char.myCharz().cPower <= KameJoko.lastPower;
				if (flag4)
				{
					GameScr.gI().doSelectSkill(GameScr.onScreenSkill[1], true);
				}
				else
				{
					KameJoko.lastPower = global::Char.myCharz().cPower;
					KameJoko.lastCheckTime = (long)tickCount;
				}
			}
		}
	}

	// Token: 0x0400007C RID: 124
	public static long lastPower = 0L;

	// Token: 0x0400007D RID: 125
	private static long lastCheckTime = 0L;

	// Token: 0x0400007E RID: 126
	public static long TimecheckOut = 100L;
}
using System;

// Token: 0x02000079 RID: 121
public class Key
{
	// Token: 0x060005FA RID: 1530 RVA: 0x00067C94 File Offset: 0x00065E94
	public static void mapKeyPC()
	{
		bool isPC = Main.isPC;
		if (isPC)
		{
			Key.UP = 15;
			Key.DOWN = 16;
			Key.LEFT = 17;
			Key.RIGHT = 18;
		}
	}

	// Token: 0x04000AC9 RID: 2761
	public static int NUM0;

	// Token: 0x04000ACA RID: 2762
	public static int NUM1 = 1;

	// Token: 0x04000ACB RID: 2763
	public static int NUM2 = 2;

	// Token: 0x04000ACC RID: 2764
	public static int NUM3 = 3;

	// Token: 0x04000ACD RID: 2765
	public static int NUM4 = 4;

	// Token: 0x04000ACE RID: 2766
	public static int NUM5 = 5;

	// Token: 0x04000ACF RID: 2767
	public static int NUM6 = 6;

	// Token: 0x04000AD0 RID: 2768
	public static int NUM7 = 7;

	// Token: 0x04000AD1 RID: 2769
	public static int NUM8 = 8;

	// Token: 0x04000AD2 RID: 2770
	public static int NUM9 = 9;

	// Token: 0x04000AD3 RID: 2771
	public static int STAR = 10;

	// Token: 0x04000AD4 RID: 2772
	public static int BOUND = 11;

	// Token: 0x04000AD5 RID: 2773
	public static int UP = 12;

	// Token: 0x04000AD6 RID: 2774
	public static int DOWN = 13;

	// Token: 0x04000AD7 RID: 2775
	public static int LEFT = 14;

	// Token: 0x04000AD8 RID: 2776
	public static int RIGHT = 15;

	// Token: 0x04000AD9 RID: 2777
	public static int FIRE = 16;

	// Token: 0x04000ADA RID: 2778
	public static int LEFT_SOFTKEY = 17;

	// Token: 0x04000ADB RID: 2779
	public static int RIGHT_SOFTKEY = 18;

	// Token: 0x04000ADC RID: 2780
	public static int CLEAR = 19;

	// Token: 0x04000ADD RID: 2781
	public static int BACK = 20;
}
using System;

// Token: 0x0200007A RID: 122
public class KeyConstant
{
	// Token: 0x04000ADE RID: 2782
	public const int KEY_NUM0 = 0;

	// Token: 0x04000ADF RID: 2783
	public const int KEY_NUM1 = 1;

	// Token: 0x04000AE0 RID: 2784
	public const int KEY_NUM2 = 2;

	// Token: 0x04000AE1 RID: 2785
	public const int KEY_NUM3 = 3;

	// Token: 0x04000AE2 RID: 2786
	public const int KEY_NUM4 = 4;

	// Token: 0x04000AE3 RID: 2787
	public const int KEY_NUM5 = 5;

	// Token: 0x04000AE4 RID: 2788
	public const int KEY_NUM6 = 6;

	// Token: 0x04000AE5 RID: 2789
	public const int KEY_NUM7 = 7;

	// Token: 0x04000AE6 RID: 2790
	public const int KEY_NUM8 = 8;

	// Token: 0x04000AE7 RID: 2791
	public const int KEY_NUM9 = 9;

	// Token: 0x04000AE8 RID: 2792
	public const int KEY_STAR = 10;

	// Token: 0x04000AE9 RID: 2793
	public const int KEY_BOUND = 11;

	// Token: 0x04000AEA RID: 2794
	public const int KEY_UP = 12;

	// Token: 0x04000AEB RID: 2795
	public const int KEY_DOWN = 13;

	// Token: 0x04000AEC RID: 2796
	public const int KEY_LEFT = 14;

	// Token: 0x04000AED RID: 2797
	public const int KEY_RIGHT = 15;

	// Token: 0x04000AEE RID: 2798
	public const int KEY_FIRE = 16;

	// Token: 0x04000AEF RID: 2799
	public const int KEY_LEFT_SOFTKEY = 17;

	// Token: 0x04000AF0 RID: 2800
	public const int KEY_RIGHT_SOFTKEY = 18;

	// Token: 0x04000AF1 RID: 2801
	public const int KEY_CLEAR = 19;

	// Token: 0x04000AF2 RID: 2802
	public const int KEY_BACK = 20;
}
using System;
using AssemblyCSharp.Mod.PickMob;
using AssemblyCSharp.Mod.Xmap;
using Mod.DungPham.KoiOctiiu957;

// Token: 0x02000015 RID: 21
internal class KsSupper
{
	// Token: 0x0600007A RID: 122 RVA: 0x00005A14 File Offset: 0x00003C14
	public static bool IsBoss()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.cName.Contains("Broly") && @char.cName.Contains("Super") && @char.cHPFull >= 16070777L;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x0600007B RID: 123 RVA: 0x00005A9C File Offset: 0x00003C9C
	public static void DoKhuNgauNhien()
	{
		bool flag = KsSupper.IsBoss() || Pk9rXmap.IsXmapRunning;
		if (!flag)
		{
			Service.gI().requestChangeZone(-1, -1);
		}
	}

	// Token: 0x0600007C RID: 124 RVA: 0x00005AD0 File Offset: 0x00003CD0
	public static void FocusSuperBroly()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.cName.Contains("Broly") && @char.cName.Contains("Super") && @char.cHP > 0L;
			if (flag)
			{
				bool flag2 = global::Char.myCharz().charFocus != @char;
				if (flag2)
				{
					global::Char.myCharz().npcFocus = null;
					global::Char.myCharz().mobFocus = null;
					global::Char.myCharz().charFocus = @char;
					break;
				}
				bool flag3 = Res.distance(@char.cx, @char.cy, global::Char.myCharz().cx, global::Char.myCharz().cy) > 200 && @char.cx > 500 && @char.cHP > 2L;
				if (flag3)
				{
					KsSupper.Move(@char.cx - 100, @char.cy);
					break;
				}
				bool flag4 = Res.distance(@char.cx, @char.cy, global::Char.myCharz().cx, global::Char.myCharz().cy) > 200 && @char.cx < 500 && @char.cHP > 2L;
				if (flag4)
				{
					KsSupper.Move(@char.cx + 100, @char.cy);
					break;
				}
				bool flag5 = Res.distance(@char.cx, @char.cy, global::Char.myCharz().cx, global::Char.myCharz().cy) < 80 && @char.cx < 500 && @char.cHP > 2L;
				if (flag5)
				{
					KsSupper.Move(@char.cx + 100, @char.cy);
					break;
				}
				bool flag6 = Res.distance(@char.cx, @char.cy, global::Char.myCharz().cx, global::Char.myCharz().cy) < 80 && @char.cx > 500 && @char.cHP > 2L;
				if (flag6)
				{
					KsSupper.Move(@char.cx - 100, @char.cy);
					break;
				}
			}
		}
	}

	// Token: 0x0600007D RID: 125 RVA: 0x00005D1C File Offset: 0x00003F1C
	private static void Move(int x, int y)
	{
		global::Char @char = global::Char.myCharz();
		bool flag = !Pk9rPickMob.IsVuotDiaHinh;
		if (flag)
		{
			@char.currentMovePoint = new MovePoint(x, y);
		}
		else
		{
			int[] pointYsdMax = KsSupper.GetPointYsdMax(@char.cx, x);
			bool flag2 = pointYsdMax[1] >= y || (pointYsdMax[1] >= @char.cy && (@char.statusMe == 2 || @char.statusMe == 1));
			if (flag2)
			{
				pointYsdMax[0] = x;
				pointYsdMax[1] = y;
			}
			@char.currentMovePoint = new MovePoint(pointYsdMax[0], pointYsdMax[1]);
		}
	}

	// Token: 0x0600007E RID: 126 RVA: 0x00005DA4 File Offset: 0x00003FA4
	private static int GetYsd(int xsd)
	{
		global::Char @char = global::Char.myCharz();
		int num = TileMap.pxh;
		int result = -1;
		for (int i = 24; i < TileMap.pxh; i += 24)
		{
			bool flag = TileMap.tileTypeAt(xsd, i, 2);
			if (flag)
			{
				int num2 = Res.abs(i - @char.cy);
				bool flag2 = num2 < num;
				if (flag2)
				{
					num = num2;
					result = i;
				}
			}
		}
		return result;
	}

	// Token: 0x0600007F RID: 127 RVA: 0x00005E14 File Offset: 0x00004014
	private static int[] GetPointYsdMax(int xStart, int xEnd)
	{
		int num = TileMap.pxh;
		int num2 = -1;
		bool flag = xStart > xEnd;
		if (flag)
		{
			for (int i = xEnd; i < xStart; i += 24)
			{
				int ysd = KsSupper.GetYsd(i);
				bool flag2 = ysd < num;
				if (flag2)
				{
					num = ysd;
					num2 = i;
				}
			}
		}
		else
		{
			for (int j = xEnd; j > xStart; j -= 24)
			{
				int ysd2 = KsSupper.GetYsd(j);
				bool flag3 = ysd2 < num;
				if (flag3)
				{
					num = ysd2;
					num2 = j;
				}
			}
		}
		return new int[]
		{
			num2,
			num
		};
	}

	// Token: 0x06000080 RID: 128 RVA: 0x00005EB0 File Offset: 0x000040B0
	public static void TelePortTo(int x, int y)
	{
		global::Char.myCharz().cx = x;
		global::Char.myCharz().cy = y;
		Service.gI().charMove();
		bool flag = ItemTime.isExistItem(4387);
		if (!flag)
		{
			global::Char.myCharz().cx = x;
			global::Char.myCharz().cy = y + 1;
			Service.gI().charMove();
			global::Char.myCharz().cx = x;
			global::Char.myCharz().cy = y;
			Service.gI().charMove();
		}
	}

	// Token: 0x06000081 RID: 129 RVA: 0x00005F34 File Offset: 0x00004134
	public static void Ks()
	{
		global::Char charFocus = global::Char.myCharz().charFocus;
		bool flag = Res.distance(charFocus.cx, charFocus.cy, global::Char.myCharz().cx, global::Char.myCharz().cy) > 100 && charFocus.cHP < 2L && charFocus.cHP > 0L;
		if (flag)
		{
			KsSupper.TelePortTo(charFocus.cx, charFocus.cy);
		}
		bool flag2 = Res.distance(charFocus.cx, charFocus.cy, global::Char.myCharz().cx, global::Char.myCharz().cy) < 100 && charFocus.cHP < 2L && charFocus.cHP > 0L;
		if (flag2)
		{
			AutoSkill.AutoSendAttack();
		}
	}

	// Token: 0x06000082 RID: 130 RVA: 0x00005FF4 File Offset: 0x000041F4
	public static void autoitem()
	{
		global::Char @char = global::Char.myCharz();
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag = itemMap != null;
			if (flag)
			{
				bool flag2 = itemMap.playerId == @char.charID;
				if (flag2)
				{
					bool flag3 = Res.abs(itemMap.xEnd - @char.cx) > 25;
					if (flag3)
					{
						KsSupper.Move(itemMap.xEnd, itemMap.yEnd);
					}
					Service.gI().pickItem(itemMap.itemMapID);
					return;
				}
			}
		}
		for (int j = 0; j < GameScr.vItemMap.size(); j++)
		{
			ItemMap itemMap2 = (ItemMap)GameScr.vItemMap.elementAt(j);
			bool flag4 = itemMap2 != null && itemMap2.playerId == -1;
			if (flag4)
			{
				bool flag5 = Res.abs(itemMap2.xEnd - @char.cx) > 25;
				if (flag5)
				{
					KsSupper.Move(itemMap2.xEnd, itemMap2.yEnd);
				}
				Service.gI().pickItem(itemMap2.itemMapID);
				break;
			}
		}
	}

	// Token: 0x06000083 RID: 131 RVA: 0x00006134 File Offset: 0x00004334
	public static void Update()
	{
		bool flag = KsSupper.IsBoss();
		if (flag)
		{
			KsSupper.FocusSuperBroly();
			bool flag2 = DataAccount.Type == 3;
			if (flag2)
			{
				KsSupper.Ks();
			}
		}
	}
}
using System;

// Token: 0x0200007B RID: 123
public class Layer
{
	// Token: 0x060005FE RID: 1534 RVA: 0x00067D6E File Offset: 0x00065F6E
	public void update()
	{
	}

	// Token: 0x060005FF RID: 1535 RVA: 0x00067D71 File Offset: 0x00065F71
	public void paint(mGraphics g, int x, int y)
	{
	}

	// Token: 0x06000600 RID: 1536 RVA: 0x00067D74 File Offset: 0x00065F74
	public void keyPress(int keyCode)
	{
	}
}
using System;

// Token: 0x0200007C RID: 124
public class Line
{
	// Token: 0x06000602 RID: 1538 RVA: 0x00067D80 File Offset: 0x00065F80
	public void setLine(int x0, int y0, int x1, int y1, int vx, int vy, bool is2Line)
	{
		this.x0 = x0;
		this.y0 = y0;
		this.x1 = x1;
		this.y1 = y1;
		this.vx = vx;
		this.vy = vy;
		this.is2Line = is2Line;
	}

	// Token: 0x06000603 RID: 1539 RVA: 0x00067DB8 File Offset: 0x00065FB8
	public void update()
	{
		this.x0 += this.vx;
		this.x1 += this.vx;
		this.y0 += this.vy;
		this.y1 += this.vy;
		this.f++;
	}

	// Token: 0x06000604 RID: 1540 RVA: 0x00067E20 File Offset: 0x00066020
	public void update_not_F()
	{
		this.x0 += this.vx;
		this.x1 += this.vx;
		this.y0 += this.vy;
		this.y1 += this.vy;
	}

	// Token: 0x04000AF3 RID: 2803
	public int x0;

	// Token: 0x04000AF4 RID: 2804
	public int y0;

	// Token: 0x04000AF5 RID: 2805
	public int x1;

	// Token: 0x04000AF6 RID: 2806
	public int y1;

	// Token: 0x04000AF7 RID: 2807
	public int vx;

	// Token: 0x04000AF8 RID: 2808
	public int vy;

	// Token: 0x04000AF9 RID: 2809
	public int f;

	// Token: 0x04000AFA RID: 2810
	public int fRe;

	// Token: 0x04000AFB RID: 2811
	public int idColor;

	// Token: 0x04000AFC RID: 2812
	public int type;

	// Token: 0x04000AFD RID: 2813
	public bool is2Line;

	// Token: 0x04000AFE RID: 2814
	public FrameImage fraImgEff;

	// Token: 0x04000AFF RID: 2815
	public int[] frame;
}
using System;

// Token: 0x0200007D RID: 125
public class ListNew
{
	// Token: 0x06000606 RID: 1542 RVA: 0x00067E83 File Offset: 0x00066083
	public ListNew()
	{
	}

	// Token: 0x06000607 RID: 1543 RVA: 0x00067E9C File Offset: 0x0006609C
	public ListNew(int x, int y, int maxW, int maxH, int itemH, int maxSize, int limX, bool isLim0)
	{
		this.x = x;
		this.y = y;
		this.maxW = maxW;
		this.maxH = maxH;
		this.itemH = itemH;
		this.maxSize = maxSize;
		this.cmxLim = limX;
		bool flag = isLim0 && this.cmxLim < 0;
		if (flag)
		{
			this.cmxLim = 0;
		}
	}

	// Token: 0x06000608 RID: 1544 RVA: 0x00067F10 File Offset: 0x00066110
	public void setMaxCamera(int limX)
	{
		bool flag = limX < 0;
		if (flag)
		{
			limX = 0;
		}
		this.cmxLim = limX;
		bool flag2 = this.cmx > this.cmxLim;
		if (flag2)
		{
			this.cmx = this.cmxLim;
		}
		bool flag3 = this.cmtoX > this.cmxLim;
		if (flag3)
		{
			this.cmtoX = this.cmxLim;
		}
	}

	// Token: 0x06000609 RID: 1545 RVA: 0x00067F72 File Offset: 0x00066172
	public void updatePos(int x, int y, int maxW, int maxH)
	{
		this.x = x;
		this.y = y;
		this.maxW = maxW;
		this.maxH = maxH;
	}

	// Token: 0x0600060A RID: 1546 RVA: 0x00067F94 File Offset: 0x00066194
	public void updateMenuKey()
	{
		bool flag = false;
		bool flag2 = GameCanvas.keyPressed[2];
		if (flag2)
		{
			flag = true;
			this.value--;
			bool flag3 = this.value < 0;
			if (flag3)
			{
				this.value = this.maxSize - 1;
			}
			GameCanvas.clearKeyPressed();
		}
		else
		{
			bool flag4 = GameCanvas.keyPressed[8];
			if (flag4)
			{
				flag = true;
				this.value++;
				bool flag5 = this.value > this.maxSize - 1;
				if (flag5)
				{
					this.value = this.maxSize - 1;
				}
				GameCanvas.clearKeyPressed();
			}
		}
		bool flag6 = flag;
		if (flag6)
		{
			this.cmtoX = (this.value + 1) * this.itemH - this.maxH / 2;
			bool flag7 = this.cmtoX > this.cmxLim;
			if (flag7)
			{
				this.cmtoX = this.cmxLim;
			}
			bool flag8 = this.cmtoX < 0;
			if (flag8)
			{
				this.cmtoX = 0;
			}
			bool flag9 = this.value == this.maxSize - 1 || this.value == 0;
			if (flag9)
			{
				this.cmx = this.cmtoX;
			}
		}
		this.update_Pos_UP_DOWN();
	}

	// Token: 0x0600060B RID: 1547 RVA: 0x000680CC File Offset: 0x000662CC
	public void update_Pos_UP_DOWN()
	{
		bool flag = this.cmxLim <= 0;
		if (!flag)
		{
			bool isPointerDown = GameCanvas.isPointerDown;
			if (isPointerDown)
			{
				bool flag2 = !this.pointerIsDowning && GameCanvas.isPointer(this.x, this.y, this.maxW, this.maxH);
				if (flag2)
				{
					for (int i = 0; i < this.pointerDownLastX.Length; i++)
					{
						this.pointerDownLastX[i] = GameCanvas.py;
					}
					this.pointerDownFirstX = GameCanvas.py;
					this.pointerIsDowning = true;
					this.isDownWhenRunning = (this.cmRun != 0);
					this.cmRun = 0;
				}
				else
				{
					bool flag3 = this.pointerIsDowning;
					if (flag3)
					{
						this.pointerDownTime++;
						bool flag4 = this.pointerDownTime > 5 && this.pointerDownFirstX == GameCanvas.py && !this.isDownWhenRunning;
						if (flag4)
						{
							this.pointerDownFirstX = -1000;
						}
						int num = GameCanvas.py - this.pointerDownLastX[0];
						bool flag5 = num != 0 && this.value != -1;
						if (flag5)
						{
							this.value = -1;
						}
						for (int j = this.pointerDownLastX.Length - 1; j > 0; j--)
						{
							this.pointerDownLastX[j] = this.pointerDownLastX[j - 1];
						}
						this.pointerDownLastX[0] = GameCanvas.py;
						this.cmtoX -= num;
						bool flag6 = this.cmtoX < 0;
						if (flag6)
						{
							this.cmtoX = 0;
						}
						bool flag7 = this.cmtoX > this.cmxLim;
						if (flag7)
						{
							this.cmtoX = this.cmxLim;
						}
						bool flag8 = this.cmx < 0 || this.cmx > this.cmxLim;
						if (flag8)
						{
							num /= 2;
						}
						this.cmx -= num;
					}
				}
			}
			bool flag9 = GameCanvas.isPointerClick && this.pointerIsDowning;
			if (flag9)
			{
				int i2 = GameCanvas.py - this.pointerDownLastX[0];
				GameCanvas.isPointerClick = false;
				bool flag10 = Res.abs(i2) < 20 && Res.abs(GameCanvas.py - this.pointerDownFirstX) < 20 && !this.isDownWhenRunning && GameCanvas.isPointerSelect;
				if (flag10)
				{
					this.cmRun = 0;
					this.cmtoX = this.cmx;
					this.pointerDownFirstX = -1000;
					this.pointerDownTime = 0;
				}
				else
				{
					bool flag11 = this.value != -1 && this.pointerDownTime > 5;
					if (flag11)
					{
						this.pointerDownTime = 0;
					}
					else
					{
						bool flag12 = this.value == -1 && !this.isDownWhenRunning;
						if (flag12)
						{
							bool flag13 = this.cmx < 0;
							if (flag13)
							{
								this.cmtoX = 0;
							}
							else
							{
								bool flag14 = this.cmx > this.cmxLim;
								if (flag14)
								{
									this.cmtoX = this.cmxLim;
								}
								else
								{
									int num2 = GameCanvas.py - this.pointerDownLastX[0] + (this.pointerDownLastX[0] - this.pointerDownLastX[1]) + (this.pointerDownLastX[1] - this.pointerDownLastX[2]);
									num2 = ((num2 > 10) ? 10 : ((num2 < -10) ? -10 : 0));
									this.cmRun = -num2 * 100;
								}
							}
						}
					}
				}
				this.pointerIsDowning = false;
				this.pointerDownTime = 0;
				GameCanvas.isPointerClick = false;
			}
			bool flag15 = this.cmx <= 0;
			if (flag15)
			{
				this.cmx = 0;
			}
			bool flag16 = this.cmx >= this.cmxLim;
			if (flag16)
			{
				this.cmx = this.cmxLim;
			}
		}
	}

	// Token: 0x0600060C RID: 1548 RVA: 0x00068490 File Offset: 0x00066690
	public void updatePos_LEFT_RIGHT()
	{
		bool isPointerDown = GameCanvas.isPointerDown;
		if (isPointerDown)
		{
			bool flag = !this.pointerIsDowning && GameCanvas.isPointer(this.x, this.y, this.maxW, this.maxH);
			if (flag)
			{
				for (int i = 0; i < this.pointerDownLastX.Length; i++)
				{
					this.pointerDownLastX[0] = GameCanvas.px;
				}
				this.pointerDownFirstX = GameCanvas.px;
				this.pointerIsDowning = true;
				this.isDownWhenRunning = (this.cmRun != 0);
				this.cmRun = 0;
			}
			else
			{
				bool flag2 = this.pointerIsDowning;
				if (flag2)
				{
					this.pointerDownTime++;
					bool flag3 = this.pointerDownTime > 5 && this.pointerDownFirstX == GameCanvas.px && !this.isDownWhenRunning;
					if (flag3)
					{
						this.pointerDownFirstX = -1000;
					}
					int num = GameCanvas.px - this.pointerDownLastX[0];
					bool flag4 = num != 0 && this.value != -1;
					if (flag4)
					{
						this.value = -1;
					}
					for (int j = this.pointerDownLastX.Length - 1; j > 0; j--)
					{
						this.pointerDownLastX[j] = this.pointerDownLastX[j - 1];
					}
					this.pointerDownLastX[0] = GameCanvas.px;
					this.cmtoX -= num;
					bool flag5 = this.cmtoX < 0;
					if (flag5)
					{
						this.cmtoX = 0;
					}
					bool flag6 = this.cmtoX > this.cmxLim;
					if (flag6)
					{
						this.cmtoX = this.cmxLim;
					}
					bool flag7 = this.cmx < 0 || this.cmx > this.cmxLim;
					if (flag7)
					{
						num /= 2;
					}
					this.cmx -= num;
				}
			}
		}
		bool flag8 = !GameCanvas.isPointerClick || !this.pointerIsDowning;
		if (!flag8)
		{
			int i2 = GameCanvas.px - this.pointerDownLastX[0];
			GameCanvas.isPointerClick = false;
			bool flag9 = Res.abs(i2) < 20 && Res.abs(GameCanvas.px - this.pointerDownFirstX) < 20 && !this.isDownWhenRunning && GameCanvas.isPointerSelect;
			if (flag9)
			{
				this.cmRun = 0;
				this.cmtoX = this.cmx;
				this.pointerDownFirstX = -1000;
				this.pointerDownTime = 0;
			}
			else
			{
				bool flag10 = this.value != -1 && this.pointerDownTime > 5;
				if (flag10)
				{
					this.pointerDownTime = 0;
				}
				else
				{
					bool flag11 = this.value == -1 && !this.isDownWhenRunning;
					if (flag11)
					{
						bool flag12 = this.cmx < 0;
						if (flag12)
						{
							this.cmtoX = 0;
						}
						else
						{
							bool flag13 = this.cmx > this.cmxLim;
							if (flag13)
							{
								this.cmtoX = this.cmxLim;
							}
							else
							{
								int num2 = GameCanvas.px - this.pointerDownLastX[0] + (this.pointerDownLastX[0] - this.pointerDownLastX[1]) + (this.pointerDownLastX[1] - this.pointerDownLastX[2]);
								num2 = ((num2 > 10) ? 10 : ((num2 < -10) ? -10 : 0));
								this.cmRun = -num2 * 100;
							}
						}
					}
				}
			}
			this.pointerIsDowning = false;
			this.pointerDownTime = 0;
			GameCanvas.isPointerClick = false;
		}
	}

	// Token: 0x0600060D RID: 1549 RVA: 0x00068800 File Offset: 0x00066A00
	public void moveCamera()
	{
		bool flag = this.cmRun != 0 && !this.pointerIsDowning;
		if (flag)
		{
			this.cmtoX += this.cmRun / 100;
			bool flag2 = this.cmtoX < 0;
			if (flag2)
			{
				this.cmtoX = 0;
			}
			else
			{
				bool flag3 = this.cmtoX > this.cmxLim;
				if (flag3)
				{
					this.cmtoX = this.cmxLim;
				}
				else
				{
					this.cmx = this.cmtoX;
				}
			}
			this.cmRun = this.cmRun * 9 / 10;
			bool flag4 = this.cmRun < 100 && this.cmRun > -100;
			if (flag4)
			{
				this.cmRun = 0;
			}
		}
		bool flag5 = this.cmx != this.cmtoX && !this.pointerIsDowning;
		if (flag5)
		{
			this.cmvx = this.cmtoX - this.cmx << 2;
			this.cmdx += this.cmvx;
			this.cmx += this.cmdx >> 4;
			this.cmdx &= 15;
		}
	}

	// Token: 0x0600060E RID: 1550 RVA: 0x0006892D File Offset: 0x00066B2D
	public void updateMenu()
	{
		this.moveCamera();
		this.updateMenuKey();
	}

	// Token: 0x0600060F RID: 1551 RVA: 0x00068940 File Offset: 0x00066B40
	public void setToX(int value)
	{
		bool flag = value < 0;
		if (flag)
		{
			value = 0;
		}
		bool flag2 = value > this.cmxLim;
		if (flag2)
		{
			value = this.cmxLim;
		}
		this.cmtoX = value;
	}

	// Token: 0x06000610 RID: 1552 RVA: 0x00068979 File Offset: 0x00066B79
	public void resetList()
	{
		this.cmtoX = 0;
	}

	// Token: 0x04000B00 RID: 2816
	public int maxW;

	// Token: 0x04000B01 RID: 2817
	public int itemH;

	// Token: 0x04000B02 RID: 2818
	public int maxH;

	// Token: 0x04000B03 RID: 2819
	public int maxSize;

	// Token: 0x04000B04 RID: 2820
	public int x;

	// Token: 0x04000B05 RID: 2821
	public int y;

	// Token: 0x04000B06 RID: 2822
	public int value;

	// Token: 0x04000B07 RID: 2823
	public int cmtoX;

	// Token: 0x04000B08 RID: 2824
	public int cmx;

	// Token: 0x04000B09 RID: 2825
	public int cmdy;

	// Token: 0x04000B0A RID: 2826
	public int cmvy;

	// Token: 0x04000B0B RID: 2827
	public int cmxLim;

	// Token: 0x04000B0C RID: 2828
	private int pointerDownTime;

	// Token: 0x04000B0D RID: 2829
	private int pointerDownFirstX;

	// Token: 0x04000B0E RID: 2830
	private int[] pointerDownLastX = new int[3];

	// Token: 0x04000B0F RID: 2831
	public bool pointerIsDowning;

	// Token: 0x04000B10 RID: 2832
	public bool isDownWhenRunning;

	// Token: 0x04000B11 RID: 2833
	private int cmRun;

	// Token: 0x04000B12 RID: 2834
	private MyVector vecCmd;

	// Token: 0x04000B13 RID: 2835
	public int w;

	// Token: 0x04000B14 RID: 2836
	private int cmvx;

	// Token: 0x04000B15 RID: 2837
	private int cmdx;
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using AssemblyCSharp.Mod.PickMob;
using AssemblyCSharp.Mod.Xmap;
using Mod.DungPham.KoiOctiiu957;

// Token: 0x0200001D RID: 29
internal class Lmao
{
	// Token: 0x060000A6 RID: 166 RVA: 0x00006CAC File Offset: 0x00004EAC
	public static void CheckOUT()
	{
		bool flag = global::Char.myCharz().cLevelPercent <= 9990L;
		if (flag)
		{
			int tickCount = Environment.TickCount;
			bool flag2 = Lmao.lastCheckTime == 0L;
			if (flag2)
			{
				Lmao.lastPower = global::Char.myCharz().cPower;
				Lmao.lastCheckTime = (long)tickCount;
			}
			long num = ((long)tickCount - Lmao.lastCheckTime) / 100L;
			bool flag3 = num >= 7000L;
			if (flag3)
			{
				bool flag4 = global::Char.myCharz().cPower <= Lmao.lastPower;
				if (flag4)
				{
					GameCanvas.startOKDlg("Lagggggggggg");
					Main.exit();
				}
				else
				{
					Lmao.lastPower = global::Char.myCharz().cPower;
					Lmao.lastCheckTime = (long)tickCount;
				}
			}
		}
	}

	// Token: 0x060000A7 RID: 167 RVA: 0x00006D6C File Offset: 0x00004F6C
	public static bool IsBanDoTruyenThuyet()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1565;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060000A8 RID: 168 RVA: 0x00006DCC File Offset: 0x00004FCC
	public static void findChiCHi()
	{
		for (int i = 0; i < GameScr.vNpc.size(); i++)
		{
			Npc npc = (Npc)GameScr.vNpc.elementAt(i);
			bool flag = npc != null && npc.template.npcTemplateId == 82;
			if (flag)
			{
				global::Char.myCharz().currentMovePoint = new MovePoint(npc.cx, npc.cy - 10);
				break;
			}
		}
	}

	// Token: 0x060000A9 RID: 169 RVA: 0x00006E40 File Offset: 0x00005040
	public static void FinhungVuong()
	{
		for (int i = 0; i < GameScr.vNpc.size(); i++)
		{
			Npc npc = (Npc)GameScr.vNpc.elementAt(i);
			bool flag = npc != null && npc.template.npcTemplateId == 52 && global::Char.myCharz().cx < npc.cx;
			bool flag2 = flag;
			if (flag2)
			{
				global::Char.myCharz().currentMovePoint = new MovePoint(npc.cx + 50, npc.cy - 10);
				break;
			}
		}
	}

	// Token: 0x060000AA RID: 170 RVA: 0x00006ED0 File Offset: 0x000050D0
	public static void MuabanDOTruyenThuyet()
	{
		int luong = global::Char.myCharz().luong;
		bool flag = GameCanvas.gameTick % 30 == 0 && !Lmao.IsBanDoTruyenThuyet() && luong > 2;
		if (flag)
		{
			bool flag2 = !Lmao.isMua;
			if (flag2)
			{
				Lmao.isMua = true;
			}
		}
		bool flag3 = GameCanvas.gameTick % 200 == 0 && !Lmao.IsBanDoTruyenThuyet() && luong < 2;
		if (flag3)
		{
			GameCanvas.startOKDlg("Ngọc đã hết vui lòng nạp thêm :)");
		}
		bool flag4 = Lmao.isMua;
		if (flag4)
		{
			bool flag5 = TileMap.mapID != 5 && !Pk9rXmap.IsXmapRunning;
			if (flag5)
			{
				XmapController.StartRunToMapId(5);
			}
			bool flag6 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID == 5 && !Lmao.StartMua;
			if (flag6)
			{
				Lmao.findChiCHi();
				Lmao.StartMua = true;
				new Thread(new ThreadStart(Lmao.Buy)).Start();
			}
		}
	}

	// Token: 0x060000AB RID: 171 RVA: 0x00006FC0 File Offset: 0x000051C0
	public static void MoCuaHang()
	{
		MyVector menuItems = GameCanvas.menu.menuItems;
		bool flag = menuItems == null;
		if (!flag)
		{
			for (int i = 0; i < menuItems.size(); i++)
			{
				Command command = (Command)menuItems.elementAt(i);
				bool flag2 = command == null || string.IsNullOrEmpty(command.caption);
				if (!flag2)
				{
					bool flag3 = command.caption.Contains("Cửa") && command.caption.Contains("hàng");
					if (flag3)
					{
						Service.gI().menu(82, i, 0);
						Service.gI().menu(82, 0, 0);
						break;
					}
				}
			}
		}
	}

	// Token: 0x060000AC RID: 172 RVA: 0x00007078 File Offset: 0x00005278
	public static void Buy()
	{
		Thread.Sleep(5000);
		Lmao.findChiCHi();
		Thread.Sleep(3000);
		GameScr.info1.addInfo("Đang Mua Bản đồ", 0);
		Service.gI().openMenu(82);
		Thread.Sleep(1000);
		Lmao.MoCuaHang();
		Thread.Sleep(1000);
		Service.gI().buyItem(0, 1565, 1);
		Thread.Sleep(3000);
		GameScr.info1.addInfo("Mua xong, Quay lại map!", 0);
		Thread.Sleep(3000);
		Lmao.isMua = false;
		Lmao.StartMua = false;
	}

	// Token: 0x060000AD RID: 173 RVA: 0x00007124 File Offset: 0x00005324
	public static void AnNho()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 211 || item.template.id == 212);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x060000AE RID: 174 RVA: 0x000071AC File Offset: 0x000053AC
	public static void SuDungBanDo()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1565;
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				Service.gI().menu(5, 0, 0);
				break;
			}
		}
	}

	// Token: 0x060000AF RID: 175 RVA: 0x0000722C File Offset: 0x0000542C
	public static bool IsMob()
	{
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob = (Mob)GameScr.vMob.elementAt(i);
			bool flag = mob != null && (mob.templateId == 82 || mob.templateId == 83 || mob.templateId == 84) && mob.hp > 0L;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060000B0 RID: 176 RVA: 0x000072A4 File Offset: 0x000054A4
	public static bool IsKhien()
	{
		return ItemTime.isExistItem(3784) && ItemTime.TimeKhienCOnLai > 3;
	}

	// Token: 0x060000B1 RID: 177 RVA: 0x000072D7 File Offset: 0x000054D7
	public static void VeNhaKhiQuaiDie()
	{
		Lmao.FinhungVuong();
		Service.gI().openMenu(52);
		Service.gI().menu(52, 0, 0);
	}

	// Token: 0x060000B2 RID: 178 RVA: 0x000072FC File Offset: 0x000054FC
	public static bool IsVatPham()
	{
		global::Char @char = global::Char.myCharz();
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag = itemMap.playerId == @char.charID || itemMap.playerId == -1;
			bool flag2 = itemMap != null && flag && ((itemMap.template.id == 1220 && Lmao.NgaVoiHT() <= 98) || (itemMap.template.id == 1221 && Lmao.CuaGaHT() <= 98) || (itemMap.template.id == 1222 && Lmao.LmaoHT() <= 98));
			if (flag2)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060000B3 RID: 179 RVA: 0x000073D8 File Offset: 0x000055D8
	private static int[] GetPointYsdMax(int xStart, int xEnd)
	{
		int num = TileMap.pxh;
		int num2 = -1;
		bool flag = xStart > xEnd;
		if (flag)
		{
			for (int i = xEnd; i < xStart; i += 24)
			{
				int ysd = Lmao.GetYsd(i);
				bool flag2 = ysd < num;
				if (flag2)
				{
					num = ysd;
					num2 = i;
				}
			}
		}
		else
		{
			for (int j = xEnd; j > xStart; j -= 24)
			{
				int ysd2 = Lmao.GetYsd(j);
				bool flag3 = ysd2 < num;
				if (flag3)
				{
					num = ysd2;
					num2 = j;
				}
			}
		}
		return new int[]
		{
			num2,
			num
		};
	}

	// Token: 0x060000B4 RID: 180 RVA: 0x00007474 File Offset: 0x00005674
	private static void Move(int x, int y)
	{
		global::Char @char = global::Char.myCharz();
		bool flag = !Pk9rPickMob.IsVuotDiaHinh;
		if (flag)
		{
			@char.currentMovePoint = new MovePoint(x, y);
		}
		else
		{
			int[] pointYsdMax = Lmao.GetPointYsdMax(@char.cx, x);
			bool flag2 = pointYsdMax[1] >= y || (pointYsdMax[1] >= @char.cy && (@char.statusMe == 2 || @char.statusMe == 1));
			if (flag2)
			{
				pointYsdMax[0] = x;
				pointYsdMax[1] = y;
			}
			@char.currentMovePoint = new MovePoint(pointYsdMax[0], pointYsdMax[1]);
		}
	}

	// Token: 0x060000B5 RID: 181 RVA: 0x000074FC File Offset: 0x000056FC
	private static int GetYsd(int xsd)
	{
		global::Char @char = global::Char.myCharz();
		int num = TileMap.pxh;
		int result = -1;
		for (int i = 24; i < TileMap.pxh; i += 24)
		{
			bool flag = TileMap.tileTypeAt(xsd, i, 2);
			if (flag)
			{
				int num2 = Res.abs(i - @char.cy);
				bool flag2 = num2 < num;
				if (flag2)
				{
					num = num2;
					result = i;
				}
			}
		}
		return result;
	}

	// Token: 0x060000B6 RID: 182 RVA: 0x0000756C File Offset: 0x0000576C
	public static void autoitem()
	{
		global::Char @char = global::Char.myCharz();
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag = itemMap != null;
			if (flag)
			{
				bool flag2 = itemMap.playerId == @char.charID && ((itemMap.template.id == 1220 && Lmao.NgaVoiHT() <= 98) || (itemMap.template.id == 1221 && Lmao.CuaGaHT() <= 98) || (itemMap.template.id == 1222 && Lmao.LmaoHT() <= 98));
				if (flag2)
				{
					bool flag3 = Res.abs(itemMap.xEnd - @char.cx) > 25;
					if (flag3)
					{
						Lmao.Move(itemMap.xEnd, itemMap.yEnd);
					}
					Service.gI().pickItem(itemMap.itemMapID);
					return;
				}
			}
		}
		for (int j = 0; j < GameScr.vItemMap.size(); j++)
		{
			ItemMap itemMap2 = (ItemMap)GameScr.vItemMap.elementAt(j);
			bool flag4 = itemMap2 != null && itemMap2.playerId == -1 && ((itemMap2.template.id == 1220 && Lmao.NgaVoiHT() <= 98) || (itemMap2.template.id == 1221 && Lmao.CuaGaHT() <= 98) || (itemMap2.template.id == 1222 && Lmao.LmaoHT() <= 98));
			if (flag4)
			{
				bool flag5 = Res.abs(itemMap2.xEnd - @char.cx) > 25;
				if (flag5)
				{
					Lmao.Move(itemMap2.xEnd, itemMap2.yEnd);
				}
				Service.gI().pickItem(itemMap2.itemMapID);
				break;
			}
		}
	}

	// Token: 0x060000B7 RID: 183 RVA: 0x00007770 File Offset: 0x00005970
	public static void TeleportTo(int x, int y)
	{
		global::Char @char = global::Char.myCharz();
		@char.cx = x;
		@char.cy = y;
		Service.gI().charMove();
		bool flag = !ItemTime.isExistItem(4387);
		if (flag)
		{
			@char.cx = x;
			@char.cy = y + 1;
			Service.gI().charMove();
			@char.cx = x;
			@char.cy = y;
			Service.gI().charMove();
		}
	}

	// Token: 0x060000B8 RID: 184 RVA: 0x000077E4 File Offset: 0x000059E4
	public static void Khien()
	{
		try
		{
			for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
			{
				Skill skill = GameScr.onScreenSkill[i];
				bool flag = skill != null && skill.template.id == 19 && GameScr.timehoikhien <= 0L;
				if (flag)
				{
					GameScr.gI().doUseSkillNotFocus(skill);
					break;
				}
			}
		}
		catch
		{
		}
	}

	// Token: 0x060000B9 RID: 185 RVA: 0x00007860 File Offset: 0x00005A60
	public static void ttnl()
	{
		try
		{
			for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
			{
				Skill skill = GameScr.onScreenSkill[i];
				bool flag = skill != null && skill.template.id == 8 && GameScr.timehoiskill3 <= 0L;
				if (flag)
				{
					GameScr.gI().doUseSkillNotFocus(skill);
					break;
				}
			}
		}
		catch
		{
		}
	}

	// Token: 0x060000BA RID: 186 RVA: 0x000078DC File Offset: 0x00005ADC
	public static void HsBanThan()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && skill.template.id == 7 && GameScr.timehoichieubuff <= 0L;
			if (flag)
			{
				Lmao.buffme();
				break;
			}
		}
	}

	// Token: 0x060000BB RID: 187 RVA: 0x00007938 File Offset: 0x00005B38
	public static void Skill2()
	{
		for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
		{
			Skill skill = GameScr.onScreenSkill[i];
			bool flag = skill != null && (skill.template.id == 1 || skill.template.id == 3 || skill.template.id == 5) && (GameScr.ccc1 <= 0L && GameScr.ccc3 <= 0L) && GameScr.ccc5 <= 0L;
			if (flag)
			{
				GameScr.gI().doUseSkill(skill, true);
				break;
			}
		}
	}

	// Token: 0x060000BC RID: 188 RVA: 0x000079D0 File Offset: 0x00005BD0
	public static void buffme()
	{
		Skill skill;
		bool flag = !Lmao.canBuffme(out skill);
		if (!flag)
		{
			Service.gI().selectSkill(7);
			Service.gI().sendPlayerAttack(new MyVector(), Lmao.getMyVectorMe(), -1);
			Service.gI().selectSkill((int)global::Char.myCharz().myskill.template.id);
			skill.lastTimeUseThisSkill = mSystem.currentTimeMillis();
		}
	}

	// Token: 0x060000BD RID: 189 RVA: 0x00007A3C File Offset: 0x00005C3C
	private static bool canBuffme(out Skill skillBuff)
	{
		skillBuff = global::Char.myCharz().getSkill(new SkillTemplate
		{
			id = 7
		});
		bool flag = skillBuff == null;
		return !flag;
	}

	// Token: 0x060000BE RID: 190 RVA: 0x00007A78 File Offset: 0x00005C78
	private static MyVector getMyVectorMe()
	{
		MyVector myVector = new MyVector();
		myVector.addElement(global::Char.myCharz());
		return myVector;
	}

	// Token: 0x060000BF RID: 191 RVA: 0x00007AA0 File Offset: 0x00005CA0
	public static void AutoBongTai()
	{
		bool flag = global::Char.myCharz().cHP < global::Char.myCharz().cHPFull / 4L || global::Char.myCharz().cMP < global::Char.myCharz().cMPFull / 4L || !global::Char.myCharz().isNhapThe;
		bool flag2 = flag;
		if (flag2)
		{
			for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
			{
				Item item = global::Char.myCharz().arrItemBag[i];
				bool flag3 = item != null && (item.template.id == 454 || item.template.id == 921);
				if (flag3)
				{
					Service.gI().useItem(0, 1, -1, item.template.id);
					break;
				}
			}
		}
	}

	// Token: 0x060000C0 RID: 192 RVA: 0x00007B74 File Offset: 0x00005D74
	public static void Bequantuluyen()
	{
		bool flag = global::Char.myCharz().mobFocus != null || global::Char.myCharz().charFocus != null || global::Char.myCharz().npcFocus != null;
		if (flag)
		{
			global::Char.myCharz().mobFocus = null;
			global::Char.myCharz().charFocus = null;
			global::Char.myCharz().npcFocus = null;
		}
		Lmao.FinhungVuong();
	}

	// Token: 0x060000C1 RID: 193 RVA: 0x00007BD8 File Offset: 0x00005DD8
	public static void AutoDuiGa()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag = itemMap != null && itemMap.template.id == 74;
			if (flag)
			{
				GameScr.info1.addInfo("Hồi sinh rồi :3", 0);
				Service.gI().pickItem(itemMap.itemMapID);
			}
		}
	}

	// Token: 0x060000C2 RID: 194 RVA: 0x00007C50 File Offset: 0x00005E50
	public static void UseTDLT()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 521;
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x060000C3 RID: 195 RVA: 0x00007CC0 File Offset: 0x00005EC0
	public static void AutoTdlt()
	{
		bool flag = File.Exists(Lmao.tdlt) && !ItemTime.isExistItem(4387);
		if (flag)
		{
			Lmao.UseTDLT();
		}
		bool flag2 = !File.Exists(Lmao.tdlt) && ItemTime.isExistItem(4387);
		if (flag2)
		{
			Lmao.UseTDLT();
		}
	}

	// Token: 0x060000C4 RID: 196 RVA: 0x00007D1C File Offset: 0x00005F1C
	public static bool isBoxFull()
	{
		for (int i = global::Char.myCharz().arrItemBox.Length - 1; i >= 0; i--)
		{
			bool flag = global::Char.myCharz().arrItemBox[i] == null;
			if (flag)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x060000C5 RID: 197 RVA: 0x00007D6C File Offset: 0x00005F6C
	public static int NgaVoiR()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBox.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBox[i];
			bool flag = item != null && item.template.id == 1220;
			if (flag)
			{
				return item.quantity;
			}
		}
		return 0;
	}

	// Token: 0x060000C6 RID: 198 RVA: 0x00007DD4 File Offset: 0x00005FD4
	public static int CuaGaR()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBox.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBox[i];
			bool flag = item != null && item.template.id == 1221;
			if (flag)
			{
				return item.quantity;
			}
		}
		return 0;
	}

	// Token: 0x060000C7 RID: 199 RVA: 0x00007E3C File Offset: 0x0000603C
	public static int LmaoR()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBox.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBox[i];
			bool flag = item != null && item.template.id == 1222;
			if (flag)
			{
				return item.quantity;
			}
		}
		return 0;
	}

	// Token: 0x060000C8 RID: 200 RVA: 0x00007EA4 File Offset: 0x000060A4
	public static int NgaVoiHT()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1220;
			if (flag)
			{
				return item.quantity;
			}
		}
		return 0;
	}

	// Token: 0x060000C9 RID: 201 RVA: 0x00007F0C File Offset: 0x0000610C
	public static int CuaGaHT()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1221;
			if (flag)
			{
				return item.quantity;
			}
		}
		return 0;
	}

	// Token: 0x060000CA RID: 202 RVA: 0x00007F74 File Offset: 0x00006174
	public static int LmaoHT()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1222;
			if (flag)
			{
				return item.quantity;
			}
		}
		return 0;
	}

	// Token: 0x060000CB RID: 203 RVA: 0x00007FDC File Offset: 0x000061DC
	public static void CatNgaVoi()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1220;
			if (flag)
			{
				Service.gI().getItem(1, (sbyte)i);
				break;
			}
		}
	}

	// Token: 0x060000CC RID: 204 RVA: 0x00008044 File Offset: 0x00006244
	public static void CatLmao()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1222;
			if (flag)
			{
				Service.gI().getItem(1, (sbyte)i);
				break;
			}
		}
	}

	// Token: 0x060000CD RID: 205 RVA: 0x000080AC File Offset: 0x000062AC
	public static void CatCuaGa()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1221;
			if (flag)
			{
				Service.gI().getItem(1, (sbyte)i);
				break;
			}
		}
	}

	// Token: 0x060000CE RID: 206 RVA: 0x00008114 File Offset: 0x00006314
	public static void PemKoDoiKhien()
	{
		bool flag = Lmao.IsMob();
		if (flag)
		{
			bool flag2 = !Pk9rPickMob.IsTanSat;
			if (flag2)
			{
				Pk9rPickMob.IsTanSat = true;
			}
			bool isTanSat = Pk9rPickMob.IsTanSat;
			if (isTanSat)
			{
				KameJoko.CheckKame();
				bool flag3 = GameCanvas.gameTick % 70 == 0;
				if (flag3)
				{
					bool flag4 = global::Char.myCharz().mobFocus != null && global::Char.myCharz().mobFocus.templateId > 80;
					if (flag4)
					{
						AutoSkill.AutoSendAttack();
					}
				}
			}
			bool flag5 = GameCanvas.gameTick % 100 == 0;
			if (flag5)
			{
				bool flag6 = global::Char.myCharz().cHP < global::Char.myCharz().cHPFull / 2L && global::Char.myCharz().cMP > global::Char.myCharz().cMPFull / 3L;
				if (flag6)
				{
					Lmao.Khien();
				}
				bool flag7 = global::Char.myCharz().cHP < global::Char.myCharz().cHPFull / 2L && global::Char.myCharz().cMP > global::Char.myCharz().cMPFull / 5L;
				if (flag7)
				{
					Lmao.HsBanThan();
				}
			}
		}
		bool flag8 = !Lmao.IsMob();
		if (flag8)
		{
			bool isTanSat2 = Pk9rPickMob.IsTanSat;
			if (isTanSat2)
			{
				Pk9rPickMob.IsTanSat = false;
			}
		}
	}

	// Token: 0x060000CF RID: 207 RVA: 0x00008258 File Offset: 0x00006458
	public static void GetTypePem()
	{
		bool flag = File.Exists("Nro_244_Data//Setting//doikhien");
		if (flag)
		{
			Lmao.TypePemQuai = 1;
		}
		else
		{
			Lmao.TypePemQuai = 0;
		}
	}

	// Token: 0x060000D0 RID: 208 RVA: 0x00008288 File Offset: 0x00006488
	public static void AutoSolveMathFromString(string inputString)
	{
		try
		{
			bool flag = !inputString.Contains("=");
			if (!flag)
			{
				string[] array = inputString.Split(new char[]
				{
					'='
				});
				bool flag2 = array.Length < 2;
				if (!flag2)
				{
					string expression = array[0].Split(new char[]
					{
						'\n'
					}).Last<string>().Trim();
					int num;
					try
					{
						num = Lmao.EvaluateExpression(expression);
					}
					catch (Exception ex)
					{
						return;
					}
					MyVector menuItems = GameCanvas.menu.menuItems;
					bool flag3 = menuItems == null;
					if (!flag3)
					{
						for (int i = 0; i < menuItems.size(); i++)
						{
							Command command = (Command)menuItems.elementAt(i);
							bool flag4 = command == null || string.IsNullOrEmpty(command.caption);
							if (!flag4)
							{
								string text = command.caption.Replace("\n", "").Trim();
								string[] array2 = text.Split(new char[]
								{
									'='
								});
								bool flag5 = array2.Length > 1;
								if (flag5)
								{
									string s = array2[1].Replace(")", "").Trim();
									int num2;
									bool flag6 = int.TryParse(s, out num2);
									if (flag6)
									{
										bool flag7 = num2 == num;
										if (flag7)
										{
											Service.gI().menu(5, i, 0);
											break;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		catch (Exception ex2)
		{
		}
	}

	// Token: 0x060000D1 RID: 209 RVA: 0x00008438 File Offset: 0x00006638
	public static int EvaluateExpression(string expression)
	{
		string[] array = expression.Split(new char[]
		{
			'+',
			'-'
		}, StringSplitOptions.RemoveEmptyEntries);
		List<int> list = new List<int>();
		foreach (string text in array)
		{
			list.Add(int.Parse(text.Trim()));
		}
		int num = list[0];
		for (int j = 1; j < list.Count; j++)
		{
			bool flag = expression.Contains("-");
			if (flag)
			{
				num -= list[j];
			}
			else
			{
				num += list[j];
			}
		}
		return num;
	}

	// Token: 0x060000D2 RID: 210 RVA: 0x000084EC File Offset: 0x000066EC
	public static void PemDoiKhien()
	{
		bool flag = Lmao.IsMob() && Lmao.IsKhien();
		if (flag)
		{
			bool flag2 = !Pk9rPickMob.IsTanSat;
			if (flag2)
			{
				Pk9rPickMob.IsTanSat = true;
			}
			bool isTanSat = Pk9rPickMob.IsTanSat;
			if (isTanSat)
			{
				KameJoko.CheckKame();
				bool flag3 = GameCanvas.gameTick % 50 == 0;
				if (flag3)
				{
					bool flag4 = global::Char.myCharz().mobFocus != null && global::Char.myCharz().mobFocus.templateId > 80;
					if (flag4)
					{
						AutoSkill.AutoSendAttack();
					}
				}
			}
		}
		bool flag5 = Lmao.IsMob() && !Lmao.IsKhien();
		if (flag5)
		{
			bool isTanSat2 = Pk9rPickMob.IsTanSat;
			if (isTanSat2)
			{
				Pk9rPickMob.IsTanSat = false;
			}
			bool flag6 = GameCanvas.gameTick % 100 == 0;
			if (flag6)
			{
				Lmao.Bequantuluyen();
				Lmao.Khien();
				bool flag7 = global::Char.myCharz().cHP < global::Char.myCharz().cHPFull / 2L;
				if (flag7)
				{
					Lmao.ttnl();
				}
				bool flag8 = global::Char.myCharz().cHP < global::Char.myCharz().cHPFull / 3L && global::Char.myCharz().cMP > global::Char.myCharz().cMPFull / 5L;
				if (flag8)
				{
					Lmao.HsBanThan();
				}
			}
		}
		bool flag9 = GameCanvas.gameTick % 200 == 0;
		if (flag9)
		{
			Lmao.HsBanThan();
		}
		bool flag10 = GameCanvas.gameTick % 200 == 0 && (global::Char.myCharz().cHP < global::Char.myCharz().cHPFull / 2L || global::Char.myCharz().cMP < global::Char.myCharz().cMPFull / 2L);
		if (flag10)
		{
			Lmao.ttnl();
		}
	}

	// Token: 0x060000D3 RID: 211 RVA: 0x000086A0 File Offset: 0x000068A0
	public static void UpdateQuaTrinh()
	{
		bool flag = !Lmao.isBoxFull() && ((Lmao.NgaVoiHT() >= 99 && Lmao.NgaVoiR() < 99) || (Lmao.LmaoHT() >= 99 && Lmao.LmaoR() < 99) || (Lmao.CuaGaHT() >= 99 && Lmao.CuaGaR() < 99));
		bool flag2 = flag;
		if (flag2)
		{
			Lmao.QuaTrinh = 1;
		}
		bool flag3 = !flag;
		if (flag3)
		{
			Lmao.QuaTrinh = 2;
		}
	}

	// Token: 0x060000D4 RID: 212 RVA: 0x00008714 File Offset: 0x00006914
	public static void Update()
	{
		bool flag = GameCanvas.gameTick % 500 == 0;
		if (flag)
		{
			Lmao.UpdateQuaTrinh();
		}
		bool flag2 = GameCanvas.gameTick % 200 == 0 && TileMap.mapID != global::Char.myCharz().cgender + 21 && (global::Char.myCharz().cHP <= 0L || global::Char.myCharz().meDead);
		if (flag2)
		{
			Service.gI().returnTownFromDead();
		}
		bool flag3 = GameCanvas.gameTick % 200 == 0;
		if (flag3)
		{
			Lmao.GetTypePem();
		}
		bool flag4 = global::Char.myCharz().cspeed != 8;
		if (flag4)
		{
			global::Char.myCharz().cspeed = 8;
		}
		bool flag5 = GameCanvas.gameTick % 200 == 0 && global::Char.myCharz().cStamina < 100;
		if (flag5)
		{
			Lmao.AnNho();
		}
		bool flag6 = GameCanvas.gameTick % 20 == 0 && TileMap.mapID == global::Char.myCharz().cgender + 21;
		if (flag6)
		{
			Lmao.AutoDuiGa();
		}
		bool flag7 = GameCanvas.gameTick % 200 == 0;
		if (flag7)
		{
			Lmao.AutoTdlt();
		}
		bool flag8 = GameCanvas.gameTick % 300 == 0;
		if (flag8)
		{
			Lmao.TrangThai = string.Format("Ngà voi: {0} - Cựa gà: {1} - Lmao: {2}", Lmao.NgaVoiHT() + Lmao.NgaVoiR(), Lmao.CuaGaHT() + Lmao.CuaGaR(), Lmao.LmaoHT() + Lmao.LmaoR());
		}
		bool flag9 = Lmao.QuaTrinh == 1;
		if (flag9)
		{
			bool flag10 = GameCanvas.gameTick % 100 == 0 && TileMap.mapID != global::Char.myCharz().cgender + 21 && !Pk9rXmap.IsXmapRunning;
			if (flag10)
			{
				XmapController.StartRunToMapId(global::Char.myCharz().cgender + 21);
			}
			bool flag11 = TileMap.mapID == global::Char.myCharz().cgender + 21;
			if (flag11)
			{
				bool flag12 = GameCanvas.gameTick % 200 == 0;
				if (flag12)
				{
					Lmao.CatCuaGa();
					Lmao.CatLmao();
					Lmao.CatNgaVoi();
				}
			}
		}
		bool flag13 = Lmao.QuaTrinh == 2;
		if (flag13)
		{
			bool flag14 = TileMap.mapID != 177;
			if (flag14)
			{
				Lmao.MuabanDOTruyenThuyet();
				bool flag15 = Lmao.IsBanDoTruyenThuyet();
				if (flag15)
				{
					bool flag16 = GameCanvas.gameTick % 200 == 0;
					if (flag16)
					{
						Lmao.SuDungBanDo();
					}
				}
			}
			bool flag17 = TileMap.mapID == 177;
			if (flag17)
			{
				Lmao.CheckOUT();
				bool flag18 = GameCanvas.gameTick % 100 == 0;
				if (flag18)
				{
					Lmao.AutoBongTai();
				}
				bool flag19 = !Lmao.IsMob();
				if (flag19)
				{
					bool isTanSat = Pk9rPickMob.IsTanSat;
					if (isTanSat)
					{
						Pk9rPickMob.IsTanSat = false;
					}
				}
				bool flag20 = global::Char.myCharz().npcFocus != null;
				if (flag20)
				{
					global::Char.myCharz().npcFocus = null;
				}
				bool flag21 = GameCanvas.gameTick % 20 == 0;
				if (flag21)
				{
					Lmao.autoitem();
				}
				bool flag22 = Lmao.TypePemQuai == 1;
				if (flag22)
				{
					Lmao.PemDoiKhien();
				}
				bool flag23 = Lmao.TypePemQuai == 0;
				if (flag23)
				{
					Lmao.PemKoDoiKhien();
				}
				bool flag24 = !Lmao.IsMob() && !Lmao.IsVatPham();
				if (flag24)
				{
					bool flag25 = GameCanvas.gameTick % 200 == 0;
					if (flag25)
					{
						Lmao.VeNhaKhiQuaiDie();
					}
				}
			}
		}
		bool flag26 = GameCanvas.gameTick % 500 == 0;
		if (flag26)
		{
			Lmao.TypeGa();
		}
	}

	// Token: 0x060000D5 RID: 213 RVA: 0x00008A98 File Offset: 0x00006C98
	public static void TypeGa()
	{
		bool flag = Lmao.NgaVoiHT() + Lmao.NgaVoiR() == 198 && Lmao.CuaGaR() + Lmao.CuaGaHT() == 198 && Lmao.LmaoR() + Lmao.LmaoHT() == 198;
		if (flag)
		{
			Lmao.startUp = 1;
		}
		bool flag2 = Lmao.startUp == 1;
		if (flag2)
		{
			bool flag3 = !Lmao.isHoanThanh;
			if (flag3)
			{
				Lmao.isHoanThanh = true;
				string path = string.Format("Nro_244_Data/Resources/Status/xong{0}", DataAccount.ID);
				File.Create(path).Close();
				new Thread(new ThreadStart(Lmao.Outttt)).Start();
			}
		}
	}

	// Token: 0x060000D6 RID: 214 RVA: 0x00008B45 File Offset: 0x00006D45
	public static void Outttt()
	{
		Thread.Sleep(5000);
		Main.exit();
	}

	// Token: 0x060000D7 RID: 215 RVA: 0x00008B5C File Offset: 0x00006D5C
	public static void Painting(mGraphics g)
	{
		string str = TileMap.mapNames[TileMap.mapID];
		string str2 = " - " + TileMap.zoneID.ToString();
		mFont.tahoma_7b_white.drawString(g, str + " " + str2 + " ", 30, GameCanvas.h - (GameCanvas.h - 10), 0);
		mFont.tahoma_7b_white.drawString(g, string.Concat(new string[]
		{
			Lmao.IsVatPham().ToString(),
			" - ",
			Lmao.IsMob().ToString(),
			" - ",
			Lmao.IsKhien().ToString()
		}), 30, GameCanvas.h - (GameCanvas.h - 30), 0);
		bool flag = DataAccount.Type == 2;
		bool flag2 = flag;
		if (flag2)
		{
			for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
			{
				Item item = global::Char.myCharz().arrItemBag[i];
				bool flag3 = item != null && item.template.id == 1822;
				bool flag4 = flag3;
				if (flag4)
				{
					mFont.tahoma_7b_white.drawString(g, item.template.name + ": " + item.quantity.ToString(), 50, GameCanvas.h - (GameCanvas.h - 30), 0);
				}
				bool flag5 = item != null && item.template.id == 1821;
				bool flag6 = flag5;
				if (flag6)
				{
					mFont.tahoma_7b_white.drawString(g, item.template.name + ": " + item.quantity.ToString(), 50, GameCanvas.h - (GameCanvas.h - 40), 0);
				}
				bool flag7 = item != null && item.template.id == 1820;
				bool flag8 = flag7;
				if (flag8)
				{
					mFont.tahoma_7b_white.drawString(g, item.template.name + ": " + item.quantity.ToString(), 50, GameCanvas.h - (GameCanvas.h - 50), 0);
				}
			}
		}
	}

	// Token: 0x0400007F RID: 127
	public static bool isMua = false;

	// Token: 0x04000080 RID: 128
	public static bool StartMua = false;

	// Token: 0x04000081 RID: 129
	public static string TrangThai = "Không có thông tin";

	// Token: 0x04000082 RID: 130
	public static long lastPower = 0L;

	// Token: 0x04000083 RID: 131
	private static long lastCheckTime = 0L;

	// Token: 0x04000084 RID: 132
	public static string NpxBox;

	// Token: 0x04000085 RID: 133
	public const sbyte idskillbuff = 7;

	// Token: 0x04000086 RID: 134
	public static string tdlt = "Nro_244_Data//Resources//tdlt";

	// Token: 0x04000087 RID: 135
	public static int TypePemQuai = 0;

	// Token: 0x04000088 RID: 136
	public static string CapCha;

	// Token: 0x04000089 RID: 137
	public static int QuaTrinh = 0;

	// Token: 0x0400008A RID: 138
	public static int startUp = 0;

	// Token: 0x0400008B RID: 139
	public static bool isHoanThanh = false;
}
using System;
using UnityEngine;

// Token: 0x0200007E RID: 126
public class LoginScr : mScreen, IActionListener
{
	// Token: 0x06000611 RID: 1553 RVA: 0x00068984 File Offset: 0x00066B84
	public LoginScr()
	{
		this.yLog = GameCanvas.hh - 30;
		TileMap.bgID = (int)((sbyte)(mSystem.currentTimeMillis() % 9L));
		bool flag = TileMap.bgID == 5 || TileMap.bgID == 6;
		if (flag)
		{
			TileMap.bgID = 4;
		}
		GameScr.loadCamera(true, -1, -1);
		GameScr.cmx = 100;
		GameScr.cmy = 200;
		Main.closeKeyBoard();
		bool flag2 = GameCanvas.h > 200;
		if (flag2)
		{
			this.defYL = GameCanvas.hh - 80;
		}
		else
		{
			this.defYL = GameCanvas.hh - 65;
		}
		this.resetLogo();
		this.wC = ((GameCanvas.w < 200) ? 140 : 160);
		this.yt = GameCanvas.hh - mScreen.ITEM_HEIGHT - 5;
		bool flag3 = GameCanvas.h <= 160;
		if (flag3)
		{
			this.yt = 20;
		}
		this.tfUser = new TField();
		this.tfUser.y = GameCanvas.hh - mScreen.ITEM_HEIGHT - 9;
		this.tfUser.width = this.wC;
		this.tfUser.height = mScreen.ITEM_HEIGHT + 2;
		this.tfUser.isFocus = true;
		this.tfUser.setIputType(TField.INPUT_TYPE_ANY);
		this.tfUser.name = ((mResources.language != 2) ? (mResources.phone + "/") : string.Empty) + mResources.email;
		this.tfPass = new TField();
		this.tfPass.y = GameCanvas.hh - 4;
		this.tfPass.setIputType(TField.INPUT_TYPE_PASSWORD);
		this.tfPass.width = this.wC;
		this.tfPass.height = mScreen.ITEM_HEIGHT + 2;
		this.yt += 35;
		this.isCheck = true;
		int num = Rms.loadRMSInt("check");
		int num2 = num;
		if (num2 != 1)
		{
			if (num2 == 2)
			{
				this.isCheck = false;
			}
		}
		else
		{
			this.isCheck = true;
		}
		this.tfUser.setText(Rms.loadRMSString("acc"));
		this.tfPass.setText(Rms.loadRMSString("pass"));
		bool flag4 = this.cmdCallHotline == null;
		if (flag4)
		{
			this.cmdCallHotline = new Command("Gọi hotline", this, 13, null);
			this.cmdCallHotline.x = GameCanvas.w - 75;
			bool flag5 = mSystem.clientType == 1 && !GameCanvas.isTouch;
			if (flag5)
			{
				this.cmdCallHotline.y = GameCanvas.h - 20;
			}
			else
			{
				int num3 = 2;
				this.cmdCallHotline.y = num3 + 6;
			}
		}
		this.focus = 0;
		this.cmdLogin = new Command((GameCanvas.w <= 200) ? mResources.login2 : mResources.login, GameCanvas.instance, 888393, null);
		this.cmdCheck = new Command(mResources.remember, this, 2001, null);
		this.cmdRes = new Command(mResources.register, this, 2002, null);
		this.cmdBackFromRegister = new Command(mResources.CANCEL, this, 10021, null);
		this.cmdBack = new Command(mResources.BACK, this, 101, null);
		this.left = (this.cmdMenu = new Command(mResources.MENU, this, 2003, null));
		this.freeAreaHeight = this.tfUser.y - 2 * this.tfUser.height;
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.cmdLogin.x = GameCanvas.w / 2 + 8;
			this.cmdMenu.x = GameCanvas.w / 2 - mScreen.cmdW - 8;
			bool flag6 = GameCanvas.h >= 200;
			if (flag6)
			{
				this.cmdLogin.y = this.yLog + 110;
				this.cmdMenu.y = this.yLog + 110;
			}
			this.cmdBackFromRegister.x = GameCanvas.w / 2 + 3;
			this.cmdBackFromRegister.y = this.yLog + 110;
			this.cmdRes.x = GameCanvas.w / 2 - 84;
			this.cmdRes.y = this.cmdMenu.y;
			this.cmdBack.x = 2;
			this.cmdBack.y = GameCanvas.h - mScreen.cmdH;
		}
		this.wP = 170;
		this.hP = ((!this.isRes) ? 100 : 110);
		this.xP = GameCanvas.hw - this.wP / 2;
		this.yP = this.tfUser.y - 15;
		int num4 = 4;
		int num5 = num4 * 32 + 23 + 33;
		bool flag7 = num5 >= GameCanvas.w;
		if (flag7)
		{
			num4--;
			num5 = num4 * 32 + 23 + 33;
		}
		this.xLog = GameCanvas.w / 2 - num5 / 2;
		this.yLog = GameCanvas.hh - 30;
		this.lY = ((GameCanvas.w < 200) ? (this.tfUser.y - 30) : (this.yLog - 30));
		this.tfUser.x = this.xLog + 10;
		this.tfUser.y = this.yLog + 20;
		this.cmdOK = new Command(mResources.OK, this, 2008, null);
		this.cmdOK.x = GameCanvas.w / 2 - 84;
		this.cmdOK.y = this.cmdLogin.y;
		this.cmdFogetPass = new Command(mResources.forgetPass, this, 1003, null);
		this.cmdFogetPass.x = GameCanvas.w / 2 + 3;
		this.cmdFogetPass.y = this.cmdLogin.y;
		this.center = this.cmdOK;
		this.left = this.cmdFogetPass;
	}

	// Token: 0x06000612 RID: 1554 RVA: 0x00068FF4 File Offset: 0x000671F4
	public static void getServerLink()
	{
		try
		{
			bool flag = LoginScr.isTryGetIPFromWap;
			if (!flag)
			{
				Command command = new Command();
				ActionChat actionChat = delegate(string str)
				{
					try
					{
						bool flag2 = str != null && !(str == string.Empty);
						if (flag2)
						{
							Rms.saveIP(str);
							bool flag3 = str.Contains(":");
							if (flag3)
							{
								int num = str.IndexOf(":");
								string text = str.Substring(0, num);
								string s = str.Substring(num + 1);
								GameMidlet.IP = text;
								GameMidlet.PORT = int.Parse(s);
								Session_ME.gI().connect(text, int.Parse(s));
								LoginScr.isTryGetIPFromWap = true;
							}
						}
					}
					catch (Exception)
					{
					}
				};
				command.actionChat = actionChat;
				Net.connectHTTP(ServerListScreen.linkGetHost, command);
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000613 RID: 1555 RVA: 0x00069060 File Offset: 0x00067260
	public override void switchToMe()
	{
		this.isRegistering = false;
		SoundMn.gI().stopAll();
		this.tfUser.isFocus = true;
		this.tfPass.isFocus = false;
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.tfUser.isFocus = false;
		}
		GameCanvas.loadBG(0);
		this.left = new Command(mResources.BACK, this, 101, null);
		base.switchToMe();
	}

	// Token: 0x06000614 RID: 1556 RVA: 0x000690D4 File Offset: 0x000672D4
	public void setUserPass()
	{
		string text = Rms.loadRMSString("acc");
		bool flag = text != null && !text.Equals(string.Empty);
		if (flag)
		{
			this.tfUser.setText(text);
		}
		string text2 = Rms.loadRMSString("pass");
		bool flag2 = text2 != null && !text2.Equals(string.Empty);
		if (flag2)
		{
			this.tfPass.setText(text2);
		}
	}

	// Token: 0x06000615 RID: 1557 RVA: 0x00069146 File Offset: 0x00067346
	public void updateTfWhenOpenKb()
	{
	}

	// Token: 0x06000616 RID: 1558 RVA: 0x0006914C File Offset: 0x0006734C
	protected void doMenu()
	{
		MyVector myVector = new MyVector();
		myVector.addElement(new Command(mResources.registerNewAcc, this, 2004, null));
		bool flag = !this.isLogin2;
		if (flag)
		{
			myVector.addElement(new Command(mResources.selectServer, this, 1004, null));
		}
		myVector.addElement(new Command(mResources.forgetPass, this, 1003, null));
		myVector.addElement(new Command(mResources.website, this, 1005, null));
		bool isPC = Main.isPC;
		if (isPC)
		{
			myVector.addElement(new Command(mResources.EXIT, GameCanvas.instance, 8885, null));
		}
		GameCanvas.menu.startAt(myVector, 0);
	}

	// Token: 0x06000617 RID: 1559 RVA: 0x00069204 File Offset: 0x00067404
	protected void doRegister()
	{
		bool flag = this.tfUser.getText().Equals(string.Empty);
		if (flag)
		{
			GameCanvas.startOKDlg(mResources.userBlank);
		}
		else
		{
			char[] array = this.tfUser.getText().ToCharArray();
			bool flag2 = this.tfPass.getText().Equals(string.Empty);
			if (flag2)
			{
				GameCanvas.startOKDlg(mResources.passwordBlank);
			}
			else
			{
				bool flag3 = this.tfUser.getText().Length < 5;
				if (flag3)
				{
					GameCanvas.startOKDlg(mResources.accTooShort);
				}
				else
				{
					int num = 0;
					string text = null;
					bool flag4 = mResources.language == 2;
					if (flag4)
					{
						bool flag5 = this.tfUser.getText().IndexOf("@") == -1 || this.tfUser.getText().IndexOf(".") == -1;
						if (flag5)
						{
							text = mResources.emailInvalid;
						}
						num = 0;
					}
					else
					{
						try
						{
							long num2 = long.Parse(this.tfUser.getText());
							bool flag6 = this.tfUser.getText().Length < 8 || this.tfUser.getText().Length > 12 || (!this.tfUser.getText().StartsWith("0") && !this.tfUser.getText().StartsWith("84"));
							if (flag6)
							{
								text = mResources.phoneInvalid;
							}
							num = 1;
						}
						catch (Exception)
						{
							bool flag7 = this.tfUser.getText().IndexOf("@") == -1 || this.tfUser.getText().IndexOf(".") == -1;
							if (flag7)
							{
								text = mResources.emailInvalid;
							}
							num = 0;
						}
					}
					bool flag8 = text != null;
					if (flag8)
					{
						GameCanvas.startOKDlg(text);
					}
					else
					{
						GameCanvas.msgdlg.setInfo(string.Concat(new string[]
						{
							mResources.plsCheckAcc,
							(num != 1) ? (mResources.email + ": ") : (mResources.phone + ": "),
							this.tfUser.getText(),
							"\n",
							mResources.password,
							": ",
							this.tfPass.getText()
						}), new Command(mResources.ACCEPT, this, 4000, null), null, new Command(mResources.NO, GameCanvas.instance, 8882, null));
					}
					GameCanvas.currentDialog = GameCanvas.msgdlg;
				}
			}
		}
	}

	// Token: 0x06000618 RID: 1560 RVA: 0x000694A0 File Offset: 0x000676A0
	protected void doRegister(string user)
	{
		this.isFAQ = false;
		GameCanvas.startWaitDlg(mResources.CONNECTING);
		GameCanvas.connect();
		GameCanvas.startWaitDlg(mResources.REGISTERING);
		this.passRe = this.tfPass.getText();
		Service.gI().requestRegister(user, this.tfPass.getText(), Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString()), Rms.loadRMSString("passAo" + ServerListScreen.ipSelect.ToString()), GameMidlet.VERSION);
		Rms.saveRMSString("acc", user);
		Rms.saveRMSString("pass", this.tfPass.getText());
		this.t = 20;
		this.isRegistering = true;
	}

	// Token: 0x06000619 RID: 1561 RVA: 0x00069564 File Offset: 0x00067764
	public void doViewFAQ()
	{
		bool flag = !this.listFAQ.Equals(string.Empty) || !this.listFAQ.Equals(string.Empty);
		if (flag)
		{
		}
		bool flag2 = !Session_ME.connected;
		if (flag2)
		{
			this.isFAQ = true;
			GameCanvas.connect();
		}
		GameCanvas.startWaitDlg();
	}

	// Token: 0x0600061A RID: 1562 RVA: 0x000695C4 File Offset: 0x000677C4
	protected void doSelectServer()
	{
		MyVector myVector = new MyVector();
		bool flag = LoginScr.isLocal;
		if (flag)
		{
			myVector.addElement(new Command("Server LOCAL", this, 20004, null));
		}
		myVector.addElement(new Command("Server Bokken", this, 20001, null));
		myVector.addElement(new Command("Server Shuriken", this, 20002, null));
		myVector.addElement(new Command("Server Tessen (mới)", this, 20003, null));
		GameCanvas.menu.startAt(myVector, 0);
		bool flag2 = this.loadIndexServer() != -1 && !GameCanvas.isTouch;
		if (flag2)
		{
			GameCanvas.menu.menuSelectedItem = this.loadIndexServer();
		}
	}

	// Token: 0x0600061B RID: 1563 RVA: 0x0006967A File Offset: 0x0006787A
	protected void saveIndexServer(int index)
	{
		Rms.saveRMSInt("indServer", index);
	}

	// Token: 0x0600061C RID: 1564 RVA: 0x0006968C File Offset: 0x0006788C
	protected int loadIndexServer()
	{
		return Rms.loadRMSInt("indServer");
	}

	// Token: 0x0600061D RID: 1565 RVA: 0x000696A8 File Offset: 0x000678A8
	public void doLogin()
	{
		string text = Rms.loadRMSString("acc");
		string text2 = Rms.loadRMSString("pass");
		bool flag = text != null && !text.Equals(string.Empty);
		if (flag)
		{
			this.isLogin2 = false;
		}
		else
		{
			bool flag2 = Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString()) != null && !Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString()).Equals(string.Empty);
			if (flag2)
			{
				this.isLogin2 = true;
			}
			else
			{
				this.isLogin2 = false;
			}
		}
		bool flag3 = (text == null || text.Equals(string.Empty)) && this.isLogin2;
		if (flag3)
		{
			text = Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString());
			text2 = "a";
		}
		bool flag4 = text == null || text2 == null || GameMidlet.VERSION == null || text.Equals(string.Empty);
		if (!flag4)
		{
			bool flag5 = text2.Equals(string.Empty);
			if (flag5)
			{
				this.focus = 1;
				this.tfUser.isFocus = false;
				this.tfPass.isFocus = true;
				bool flag6 = !GameCanvas.isTouch;
				if (flag6)
				{
					this.right = this.tfPass.cmdClear;
				}
			}
			else
			{
				bool flag7 = !Session_ME.gI().isConnected();
				if (flag7)
				{
					GameCanvas.connect();
				}
				Service.gI().login(DataAccount.Account, DataAccount.PassWord, GameMidlet.VERSION, this.isLogin2 ? 1 : 0);
				Res.outz(string.Concat(new string[]
				{
					Controller.isEXTRA_LINK.ToString(),
					" = Controller.isEXTRA_LINK ",
					text,
					" ",
					text2,
					" ",
					GameMidlet.VERSION,
					" ",
					(this.isLogin2 ? 1 : 0).ToString()
				}));
				Rms.saveRMSInt(ServerListScreen.RMS_svselect, ServerListScreen.ipSelect);
				bool connected = Session_ME.connected;
				if (connected)
				{
					GameCanvas.startWaitDlg();
				}
				else
				{
					GameCanvas.startOK(mResources.maychutathoacmatsong + " [0]", 8884, null);
				}
				this.focus = 0;
				bool flag8 = !this.isLogin2;
				if (flag8)
				{
					this.actRegisterLeft();
				}
				GameCanvas.timeBreakLoading = mSystem.currentTimeMillis() + 30000L;
			}
		}
	}

	// Token: 0x0600061E RID: 1566 RVA: 0x00069928 File Offset: 0x00067B28
	public void savePass()
	{
		bool flag = this.isCheck;
		if (flag)
		{
			Rms.saveRMSInt("check", 1);
			Rms.saveRMSString("acc", this.tfUser.getText().ToLower().Trim());
			Rms.saveRMSString("pass", this.tfPass.getText().ToLower().Trim());
		}
		else
		{
			Rms.saveRMSInt("check", 2);
			Rms.saveRMSString("acc", string.Empty);
			Rms.saveRMSString("pass", string.Empty);
		}
	}

	// Token: 0x0600061F RID: 1567 RVA: 0x000699C0 File Offset: 0x00067BC0
	public override void update()
	{
		bool flag = LoginScr.timeLogin > 0;
		if (flag)
		{
			GameCanvas.startWaitDlg();
			LoginScr.currTimeLogin = mSystem.currentTimeMillis();
			bool flag2 = LoginScr.currTimeLogin - LoginScr.lastTimeLogin >= 1000L;
			if (flag2)
			{
				LoginScr.timeLogin -= 1;
				bool flag3 = LoginScr.timeLogin == 0;
				if (flag3)
				{
					GameCanvas.loginScr.doLogin();
				}
				LoginScr.lastTimeLogin = LoginScr.currTimeLogin;
			}
		}
		bool flag4 = this.isLogin2 && !this.isRes;
		if (flag4)
		{
			this.tfUser.name = ((mResources.language != 2) ? (mResources.phone + "/") : string.Empty) + mResources.email;
			this.tfPass.name = mResources.password;
			this.tfUser.isPaintCarret = false;
			this.tfPass.isPaintCarret = false;
			this.tfUser.update();
			this.tfPass.update();
		}
		else
		{
			this.tfUser.name = ((mResources.language != 2) ? (mResources.phone + "/") : string.Empty) + mResources.email;
			this.tfPass.name = mResources.password;
			this.tfUser.update();
			this.tfPass.update();
		}
		bool visible = global::TouchScreenKeyboard.visible;
		if (visible)
		{
			mGraphics.addYWhenOpenKeyBoard = 50;
		}
		for (int i = 0; i < Effect2.vEffect2.size(); i++)
		{
			Effect2 effect = (Effect2)Effect2.vEffect2.elementAt(i);
			effect.update();
		}
		bool flag5 = LoginScr.isUpdateAll && !LoginScr.isUpdateData && !LoginScr.isUpdateItem && !LoginScr.isUpdateMap && !LoginScr.isUpdateSkill;
		if (flag5)
		{
			LoginScr.isUpdateAll = false;
			mSystem.gcc();
			Service.gI().finishUpdate();
		}
		GameScr.cmx++;
		bool flag6 = GameScr.cmx > GameCanvas.w * 3 + 100;
		if (flag6)
		{
			GameScr.cmx = 100;
		}
		bool flag7 = ChatPopup.currChatPopup != null;
		if (!flag7)
		{
			GameCanvas.debug("LGU1", 0);
			GameCanvas.debug("LGU2", 0);
			GameCanvas.debug("LGU3", 0);
			this.updateLogo();
			GameCanvas.debug("LGU4", 0);
			GameCanvas.debug("LGU5", 0);
			bool flag8 = this.g >= 0;
			if (flag8)
			{
				this.ylogo += this.dir * this.g;
				this.g += this.dir * this.v;
				bool flag9 = this.g <= 0;
				if (flag9)
				{
					this.dir *= -1;
				}
				bool flag10 = this.ylogo > 0;
				if (flag10)
				{
					this.dir *= -1;
					this.g -= 2 * this.v;
				}
			}
			GameCanvas.debug("LGU6", 0);
			bool flag11 = this.tipid >= 0 && GameCanvas.gameTick % 100 == 0;
			if (flag11)
			{
				this.doChangeTip();
			}
			bool flag12 = this.isLogin2 && !this.isRes;
			if (flag12)
			{
				this.tfUser.isPaintCarret = false;
				this.tfPass.isPaintCarret = false;
				this.tfUser.update();
				this.tfPass.update();
			}
			else
			{
				this.tfUser.name = ((mResources.language != 2) ? (mResources.phone + "/") : string.Empty) + mResources.email;
				this.tfPass.name = mResources.password;
				this.tfUser.update();
				this.tfPass.update();
			}
			bool isTouch = GameCanvas.isTouch;
			if (isTouch)
			{
				bool flag13 = this.isRes;
				if (flag13)
				{
					this.center = this.cmdRes;
					this.left = this.cmdBackFromRegister;
				}
				else
				{
					this.center = this.cmdOK;
					this.left = this.cmdFogetPass;
				}
				bool flag14 = this.cmdBack != null && this.cmdBack.isPointerPressInside();
				if (flag14)
				{
					this.cmdBack.performAction();
				}
			}
			else
			{
				bool flag15 = this.isRes;
				if (flag15)
				{
					this.center = this.cmdRes;
					this.left = this.cmdBackFromRegister;
				}
				else
				{
					this.center = this.cmdOK;
					this.left = this.cmdFogetPass;
				}
			}
			bool flag16 = !Main.isPC && !global::TouchScreenKeyboard.visible && !Main.isMiniApp && !Main.isWindowsPhone;
			if (flag16)
			{
				string text = this.tfUser.getText().ToLower().Trim();
				string text2 = this.tfPass.getText().ToLower().Trim();
				bool flag17 = !text.Equals(string.Empty) && !text2.Equals(string.Empty);
				if (flag17)
				{
					this.doLogin();
				}
				Main.isMiniApp = true;
			}
			this.updateTfWhenOpenKb();
		}
	}

	// Token: 0x06000620 RID: 1568 RVA: 0x00069F0C File Offset: 0x0006810C
	private void doChangeTip()
	{
		this.tipid++;
		bool flag = this.tipid >= mResources.tips.Length;
		if (flag)
		{
			this.tipid = 0;
		}
		bool flag2 = GameCanvas.currentDialog == GameCanvas.msgdlg && GameCanvas.msgdlg.isWait;
		if (flag2)
		{
			GameCanvas.msgdlg.setInfo(mResources.tips[this.tipid]);
		}
	}

	// Token: 0x06000621 RID: 1569 RVA: 0x00069F80 File Offset: 0x00068180
	public void updateLogo()
	{
		bool flag = this.defYL != this.yL;
		if (flag)
		{
			this.yL += this.defYL - this.yL >> 1;
		}
	}

	// Token: 0x06000622 RID: 1570 RVA: 0x00069FC4 File Offset: 0x000681C4
	public override void keyPress(int keyCode)
	{
		bool isFocus = this.tfUser.isFocus;
		if (isFocus)
		{
			this.tfUser.keyPressed(keyCode);
		}
		else
		{
			bool isFocus2 = this.tfPass.isFocus;
			if (isFocus2)
			{
				this.tfPass.keyPressed(keyCode);
			}
		}
		base.keyPress(keyCode);
	}

	// Token: 0x06000623 RID: 1571 RVA: 0x0006A018 File Offset: 0x00068218
	public override void unLoad()
	{
		base.unLoad();
	}

	// Token: 0x06000624 RID: 1572 RVA: 0x0006A024 File Offset: 0x00068224
	public override void paint(mGraphics g)
	{
		GameCanvas.debug("PLG1", 1);
		GameCanvas.paintBGGameScr(g);
		GameCanvas.debug("PLG2", 2);
		int num = this.tfUser.y - 50;
		bool flag = GameCanvas.h <= 220;
		if (flag)
		{
			num += 5;
		}
		mFont.tahoma_7_white.drawString(g, "v" + GameMidlet.VERSION, GameCanvas.w - 2, 17, 1, mFont.tahoma_7_grey);
		bool flag2 = mSystem.clientType == 1 && !GameCanvas.isTouch;
		if (flag2)
		{
			mFont.tahoma_7_white.drawString(g, ServerListScreen.linkweb, GameCanvas.w - 2, GameCanvas.h - 15, 1, mFont.tahoma_7_grey);
		}
		else
		{
			mFont.tahoma_7_white.drawString(g, ServerListScreen.linkweb, GameCanvas.w - 2, 2, 1, mFont.tahoma_7_grey);
		}
		bool flag3 = GameCanvas.currentDialog == null;
		if (flag3)
		{
			int h = 105;
			int w = (GameCanvas.w < 200) ? 160 : 180;
			PopUp.paintPopUp(g, this.xLog, this.yLog - 10, w, h, -1, true);
			bool flag4 = GameCanvas.h > 160 && LoginScr.imgTitle != null;
			if (flag4)
			{
				g.drawImage(LoginScr.imgTitle, GameCanvas.hw, num, 3);
			}
			GameCanvas.debug("PLG4", 1);
			int num2 = 4;
			int num3 = num2 * 32 + 23 + 33;
			bool flag5 = num3 >= GameCanvas.w;
			if (flag5)
			{
				num2--;
				num3 = num2 * 32 + 23 + 33;
			}
			this.xLog = GameCanvas.w / 2 - num3 / 2;
			this.tfUser.x = this.xLog + 10;
			this.tfUser.y = this.yLog + 20;
			this.tfPass.x = this.xLog + 10;
			this.tfPass.y = this.yLog + 55;
			this.tfUser.paint(g);
			this.tfPass.paint(g);
			bool flag6 = GameCanvas.w >= 176;
			if (!flag6)
			{
				mFont.tahoma_7b_green2.drawString(g, mResources.acc + ":", this.tfUser.x - 35, this.tfUser.y + 7, 0);
				mFont.tahoma_7b_green2.drawString(g, mResources.pwd + ":", this.tfPass.x - 35, this.tfPass.y + 7, 0);
				mFont.tahoma_7b_green2.drawString(g, mResources.server + ":" + LoginScr.serverName, GameCanvas.w / 2, this.tfPass.y + 32, 2);
			}
		}
		base.paint(g);
		this.cmdBack.paint(g);
	}

	// Token: 0x06000625 RID: 1573 RVA: 0x0006A324 File Offset: 0x00068524
	public override void updateKey()
	{
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			bool flag = this.cmdCallHotline != null && this.cmdCallHotline.isPointerPressInside();
			if (flag)
			{
				this.cmdCallHotline.performAction();
			}
		}
		else
		{
			bool flag2 = mSystem.clientType == 1 && GameCanvas.keyPressed[13];
			if (flag2)
			{
				GameCanvas.keyPressed[13] = false;
				this.cmdCallHotline.performAction();
			}
		}
		bool flag3 = LoginScr.isContinueToLogin;
		if (!flag3)
		{
			bool flag4 = !GameCanvas.isTouch;
			if (flag4)
			{
				bool isFocus = this.tfUser.isFocus;
				if (isFocus)
				{
					this.right = this.tfUser.cmdClear;
				}
				else
				{
					this.right = this.tfPass.cmdClear;
				}
			}
			bool flag5 = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21];
			if (flag5)
			{
				this.focus--;
				bool flag6 = this.focus < 0;
				if (flag6)
				{
					this.focus = 1;
				}
			}
			else
			{
				bool flag7 = GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] || GameCanvas.keyPressed[16];
				if (flag7)
				{
					this.focus++;
					bool flag8 = this.focus > 1;
					if (flag8)
					{
						this.focus = 0;
					}
				}
			}
			bool flag9 = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] || GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] || GameCanvas.keyPressed[16];
			if (flag9)
			{
				GameCanvas.clearKeyPressed();
				bool flag10 = !this.isLogin2 || this.isRes;
				if (flag10)
				{
					bool flag11 = this.focus == 1;
					if (flag11)
					{
						this.tfUser.isFocus = false;
						this.tfPass.isFocus = true;
					}
					else
					{
						bool flag12 = this.focus == 0;
						if (flag12)
						{
							this.tfUser.isFocus = true;
							this.tfPass.isFocus = false;
						}
						else
						{
							this.tfUser.isFocus = false;
							this.tfPass.isFocus = false;
						}
					}
				}
			}
			bool isTouch2 = GameCanvas.isTouch;
			if (isTouch2)
			{
				bool flag13 = this.isRes;
				if (flag13)
				{
					this.center = this.cmdRes;
					this.left = this.cmdBackFromRegister;
				}
				else
				{
					this.center = this.cmdOK;
					this.left = this.cmdFogetPass;
				}
			}
			else
			{
				bool flag14 = this.isRes;
				if (flag14)
				{
					this.center = this.cmdRes;
					this.left = this.cmdBackFromRegister;
				}
				else
				{
					this.center = this.cmdOK;
					this.left = this.cmdFogetPass;
				}
			}
			bool flag15 = GameCanvas.isPointerJustRelease && (!this.isLogin2 || this.isRes);
			if (flag15)
			{
				bool flag16 = GameCanvas.isPointerHoldIn(this.tfUser.x, this.tfUser.y, this.tfUser.width, this.tfUser.height);
				if (flag16)
				{
					this.focus = 0;
				}
				else
				{
					bool flag17 = GameCanvas.isPointerHoldIn(this.tfPass.x, this.tfPass.y, this.tfPass.width, this.tfPass.height);
					if (flag17)
					{
						this.focus = 1;
					}
				}
			}
			bool flag18 = Main.isPC && GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] && this.right != null;
			if (flag18)
			{
				this.right.performAction();
			}
			base.updateKey();
			GameCanvas.clearKeyPressed();
		}
	}

	// Token: 0x06000626 RID: 1574 RVA: 0x0006A6CC File Offset: 0x000688CC
	public void resetLogo()
	{
		this.yL = -50;
	}

	// Token: 0x06000627 RID: 1575 RVA: 0x0006A6D8 File Offset: 0x000688D8
	public void perform(int idAction, object p)
	{
		Debug.LogError(">>>>Loginscr perform: " + idAction.ToString());
		int num = idAction;
		int num2 = num;
		if (num2 <= 2008)
		{
			if (num2 <= 101)
			{
				if (num2 == 13)
				{
					switch (mSystem.clientType)
					{
					case 1:
						mSystem.callHotlineJava();
						break;
					case 3:
					case 5:
						mSystem.callHotlineIphone();
						break;
					case 4:
						mSystem.callHotlinePC();
						break;
					case 6:
						mSystem.callHotlineWindowsPhone();
						break;
					}
					return;
				}
				if (num2 != 101)
				{
					return;
				}
				GameCanvas.serverScreen.switchToMe();
				return;
			}
			else
			{
				switch (num2)
				{
				case 1000:
					try
					{
						GameMidlet.instance.platformRequest((string)p);
					}
					catch (Exception)
					{
					}
					GameCanvas.endDlg();
					return;
				case 1001:
					GameCanvas.endDlg();
					this.isRes = false;
					return;
				case 1002:
				{
					GameCanvas.startWaitDlg();
					string text = Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString());
					bool flag = text == null || text.Equals(string.Empty);
					if (flag)
					{
						Service.gI().login2(string.Empty);
						return;
					}
					GameCanvas.loginScr.isLogin2 = true;
					GameCanvas.connect();
					Service.gI().setClientType();
					Service.gI().login(text, string.Empty, GameMidlet.VERSION, 1);
					return;
				}
				case 1003:
					GameCanvas.startOKDlg(mResources.goToWebForPassword);
					return;
				case 1004:
					ServerListScreen.doUpdateServer();
					GameCanvas.serverScreen.switchToMe();
					return;
				case 1005:
					try
					{
						GameMidlet.instance.platformRequest("http://ngocrongonline.com");
						return;
					}
					catch (Exception)
					{
						return;
					}
					break;
				default:
					switch (num2)
					{
					case 2001:
					{
						bool flag2 = this.isCheck;
						if (flag2)
						{
							this.isCheck = false;
						}
						else
						{
							this.isCheck = true;
						}
						return;
					}
					case 2002:
						this.doRegister();
						return;
					case 2003:
						this.doMenu();
						return;
					case 2004:
						this.actRegister();
						return;
					case 2005:
					case 2006:
					case 2007:
						return;
					case 2008:
					{
						Rms.saveRMSString("acc", this.tfUser.getText().Trim());
						Rms.saveRMSString("pass", this.tfPass.getText().Trim());
						bool isNewUI = ServerListScreen.isNewUI;
						if (isNewUI)
						{
							Controller.isEXTRA_LINK = false;
							GameCanvas.serverScreen.Login_New();
						}
						else
						{
							bool loadScreen = ServerListScreen.loadScreen;
							if (loadScreen)
							{
								GameCanvas.serverScreen.switchToMe();
							}
							else
							{
								GameCanvas.serverScreen.show2();
							}
						}
						return;
					}
					default:
						return;
					}
					break;
				}
			}
		}
		else if (num2 <= 10021)
		{
			if (num2 == 4000)
			{
				this.doRegister(this.tfUser.getText());
				return;
			}
			if (num2 != 10021)
			{
				return;
			}
			this.actRegisterLeft();
			return;
		}
		else if (num2 != 10041)
		{
			if (num2 != 10042)
			{
				return;
			}
			Rms.saveRMSInt("lowGraphic", 1);
			GameCanvas.startOK(mResources.plsRestartGame, 8885, null);
			return;
		}
		Rms.saveRMSInt("lowGraphic", 0);
		GameCanvas.startOK(mResources.plsRestartGame, 8885, null);
	}

	// Token: 0x06000628 RID: 1576 RVA: 0x0006AA70 File Offset: 0x00068C70
	public void actRegisterLeft()
	{
		bool flag = this.isLogin2;
		if (flag)
		{
			this.doLogin();
		}
		else
		{
			this.isRes = false;
			this.tfPass.isFocus = false;
			this.tfUser.isFocus = true;
			this.left = this.cmdMenu;
		}
	}

	// Token: 0x06000629 RID: 1577 RVA: 0x0006AABD File Offset: 0x00068CBD
	public void actRegister()
	{
		GameCanvas.endDlg();
		this.isRes = true;
		this.tfPass.isFocus = false;
		this.tfUser.isFocus = true;
	}

	// Token: 0x0600062A RID: 1578 RVA: 0x0006AAE8 File Offset: 0x00068CE8
	public void backToRegister()
	{
		GameCanvas.timeBreakLoading = mSystem.currentTimeMillis() + 30000L;
		ServerListScreen.countDieConnect = 0;
		bool flag = GameCanvas.loginScr.isLogin2;
		if (flag)
		{
			GameCanvas.startYesNoDlg(mResources.note, new Command(mResources.YES, GameCanvas.panel, 10019, null), new Command(mResources.NO, GameCanvas.panel, 10020, null));
		}
		else
		{
			bool isWindowsPhone = Main.isWindowsPhone;
			if (isWindowsPhone)
			{
				GameMidlet.isBackWindowsPhone = true;
			}
			GameCanvas.instance.resetToLoginScr = false;
			ServerListScreen.isAutoLogin = false;
			ServerScr.isShowSv_HaveChar = false;
			GameCanvas.instance.doResetToLoginScr(GameCanvas.serverScreen);
		}
	}

	// Token: 0x04000B16 RID: 2838
	public TField tfUser;

	// Token: 0x04000B17 RID: 2839
	public TField tfPass;

	// Token: 0x04000B18 RID: 2840
	public static bool isContinueToLogin = false;

	// Token: 0x04000B19 RID: 2841
	private int focus;

	// Token: 0x04000B1A RID: 2842
	private int wC;

	// Token: 0x04000B1B RID: 2843
	private int yL;

	// Token: 0x04000B1C RID: 2844
	private int defYL;

	// Token: 0x04000B1D RID: 2845
	public bool isCheck;

	// Token: 0x04000B1E RID: 2846
	public bool isRes;

	// Token: 0x04000B1F RID: 2847
	public Command cmdLogin;

	// Token: 0x04000B20 RID: 2848
	public Command cmdCheck;

	// Token: 0x04000B21 RID: 2849
	public Command cmdFogetPass;

	// Token: 0x04000B22 RID: 2850
	public Command cmdRes;

	// Token: 0x04000B23 RID: 2851
	public Command cmdMenu;

	// Token: 0x04000B24 RID: 2852
	public Command cmdBackFromRegister;

	// Token: 0x04000B25 RID: 2853
	public Command cmdBack;

	// Token: 0x04000B26 RID: 2854
	public string listFAQ = string.Empty;

	// Token: 0x04000B27 RID: 2855
	public string titleFAQ;

	// Token: 0x04000B28 RID: 2856
	public string subtitleFAQ;

	// Token: 0x04000B29 RID: 2857
	private string numSupport = string.Empty;

	// Token: 0x04000B2A RID: 2858
	public static bool isLocal = false;

	// Token: 0x04000B2B RID: 2859
	public static bool isUpdateAll;

	// Token: 0x04000B2C RID: 2860
	public static bool isUpdateData;

	// Token: 0x04000B2D RID: 2861
	public static bool isUpdateMap;

	// Token: 0x04000B2E RID: 2862
	public static bool isUpdateSkill;

	// Token: 0x04000B2F RID: 2863
	public static bool isUpdateItem;

	// Token: 0x04000B30 RID: 2864
	public static string serverName;

	// Token: 0x04000B31 RID: 2865
	public static Image imgTitle;

	// Token: 0x04000B32 RID: 2866
	public int plX;

	// Token: 0x04000B33 RID: 2867
	public int plY;

	// Token: 0x04000B34 RID: 2868
	public int lY;

	// Token: 0x04000B35 RID: 2869
	public int lX;

	// Token: 0x04000B36 RID: 2870
	public int logoDes;

	// Token: 0x04000B37 RID: 2871
	public int lineX;

	// Token: 0x04000B38 RID: 2872
	public int lineY;

	// Token: 0x04000B39 RID: 2873
	public static int[] bgId = new int[]
	{
		0,
		8,
		2,
		6,
		9
	};

	// Token: 0x04000B3A RID: 2874
	public static bool isTryGetIPFromWap;

	// Token: 0x04000B3B RID: 2875
	public static short timeLogin;

	// Token: 0x04000B3C RID: 2876
	public static long lastTimeLogin;

	// Token: 0x04000B3D RID: 2877
	public static long currTimeLogin;

	// Token: 0x04000B3E RID: 2878
	private int yt;

	// Token: 0x04000B3F RID: 2879
	private Command cmdSelect;

	// Token: 0x04000B40 RID: 2880
	private Command cmdOK;

	// Token: 0x04000B41 RID: 2881
	private int xLog;

	// Token: 0x04000B42 RID: 2882
	private int yLog;

	// Token: 0x04000B43 RID: 2883
	public static GameMidlet m;

	// Token: 0x04000B44 RID: 2884
	private int yy = GameCanvas.hh - mScreen.ITEM_HEIGHT - 5;

	// Token: 0x04000B45 RID: 2885
	private int freeAreaHeight;

	// Token: 0x04000B46 RID: 2886
	private int xP;

	// Token: 0x04000B47 RID: 2887
	private int yP;

	// Token: 0x04000B48 RID: 2888
	private int wP;

	// Token: 0x04000B49 RID: 2889
	private int hP;

	// Token: 0x04000B4A RID: 2890
	private int t = 20;

	// Token: 0x04000B4B RID: 2891
	private bool isRegistering;

	// Token: 0x04000B4C RID: 2892
	private string passRe = string.Empty;

	// Token: 0x04000B4D RID: 2893
	public bool isFAQ;

	// Token: 0x04000B4E RID: 2894
	private int tipid = -1;

	// Token: 0x04000B4F RID: 2895
	public bool isLogin2;

	// Token: 0x04000B50 RID: 2896
	private int v = 2;

	// Token: 0x04000B51 RID: 2897
	private int g;

	// Token: 0x04000B52 RID: 2898
	private int ylogo = -40;

	// Token: 0x04000B53 RID: 2899
	private int dir = 1;

	// Token: 0x04000B54 RID: 2900
	private Command cmdCallHotline;

	// Token: 0x04000B55 RID: 2901
	public static bool isLoggingIn;
}
using System;

// Token: 0x02000080 RID: 128
public class MagicTree : Npc, IActionListener
{
	// Token: 0x06000630 RID: 1584 RVA: 0x0006B250 File Offset: 0x00069450
	public MagicTree(int npcId, int status, int cx, int cy, int templateId, int iconId) : base(npcId, status, cx, cy, templateId, iconId)
	{
		this.p = new PopUp(string.Empty, 0, 0);
		this.p.command = new Command(null, this, 1, null);
		PopUp.addPopUp(this.p);
	}

	// Token: 0x06000631 RID: 1585 RVA: 0x0006B2A0 File Offset: 0x000694A0
	public override void paint(mGraphics g)
	{
		bool flag = this.id == 0;
		if (!flag)
		{
			SmallImage.drawSmallImage(g, this.id, this.cx, this.cy, 0, StaticObj.BOTTOM_HCENTER);
			bool flag2 = global::Char.myCharz().npcFocus != null && global::Char.myCharz().npcFocus.Equals(this);
			if (flag2)
			{
				g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 0, this.cx, this.cy - SmallImage.smallImg[this.id][4] - 1, mGraphics.BOTTOM | mGraphics.HCENTER);
				bool flag3 = this.name != null;
				if (flag3)
				{
					mFont.tahoma_7b_white.drawString(g, this.name, this.cx, this.cy - SmallImage.smallImg[this.id][4] - 20, mFont.CENTER, mFont.tahoma_7_grey);
				}
			}
			else
			{
				bool flag4 = this.name != null;
				if (flag4)
				{
					mFont.tahoma_7b_white.drawString(g, this.name, this.cx, this.cy - SmallImage.smallImg[this.id][4] - 17, mFont.CENTER, mFont.tahoma_7_grey);
				}
			}
			try
			{
				for (int i = 0; i < this.currPeas; i++)
				{
					g.drawImage(MagicTree.pea, this.cx + this.peaPostionX[i] - SmallImage.smallImg[this.id][3] / 2, this.cy + this.peaPostionY[i] - SmallImage.smallImg[this.id][4], 0);
				}
			}
			catch (Exception)
			{
			}
			bool flag5 = this.indexEffTask < 0 || this.effTask == null || this.cTypePk != 0;
			if (!flag5)
			{
				SmallImage.drawSmallImage(g, this.effTask.arrEfInfo[this.indexEffTask].idImg, this.cx + this.effTask.arrEfInfo[this.indexEffTask].dx, this.cy - 15 + this.effTask.arrEfInfo[this.indexEffTask].dy, 0, mGraphics.VCENTER | mGraphics.HCENTER);
				bool flag6 = GameCanvas.gameTick % 2 == 0;
				if (flag6)
				{
					this.indexEffTask++;
					bool flag7 = this.indexEffTask >= this.effTask.arrEfInfo.Length;
					if (flag7)
					{
						this.indexEffTask = 0;
					}
				}
			}
		}
	}

	// Token: 0x06000632 RID: 1586 RVA: 0x0006B534 File Offset: 0x00069734
	public override void update()
	{
		this.p.isPaint = MagicTree.isPaint;
		this.cur = mSystem.currentTimeMillis();
		bool flag = this.cur - this.last >= 1000L;
		if (flag)
		{
			this.seconds--;
			this.last = this.cur;
			bool flag2 = this.seconds < 0;
			if (flag2)
			{
				this.seconds = 0;
			}
		}
		bool flag3 = !this.isUpdate;
		if (flag3)
		{
			bool flag4 = this.currPeas < this.maxPeas && this.seconds == 0;
			if (flag4)
			{
				this.waitToUpdate = true;
			}
		}
		else
		{
			bool flag5 = this.seconds == 0;
			if (flag5)
			{
				this.isUpdate = false;
				this.waitToUpdate = true;
			}
		}
		bool flag6 = this.waitToUpdate;
		if (flag6)
		{
			this.delay++;
			bool flag7 = this.delay == 20;
			if (flag7)
			{
				this.delay = 0;
				this.waitToUpdate = false;
				Service.gI().getMagicTree(2);
			}
		}
		this.num = ((this.peaPostionX != null) ? (this.peaPostionX.Length * this.currPeas / this.maxPeas) : 0);
		bool flag8 = this.isUpdateTree;
		if (flag8)
		{
			this.isUpdateTree = false;
			bool flag9 = (this.seconds >= 0 && this.currPeas < this.maxPeas) || (this.seconds >= 0 && this.isUpdate) || this.isPeasEffect;
			if (flag9)
			{
				this.p.updateXYWH(new string[]
				{
					this.isUpdate ? mResources.UPGRADING : (this.currPeas.ToString() + "/" + this.maxPeas.ToString()),
					NinjaUtil.getTime(this.seconds)
				}, this.cx, this.cy - 20 - SmallImage.smallImg[this.id][4]);
			}
			else
			{
				bool flag10 = this.currPeas == this.maxPeas && !this.isUpdate;
				if (flag10)
				{
					this.p.updateXYWH(new string[]
					{
						mResources.can_harvest,
						this.currPeas.ToString() + "/" + this.maxPeas.ToString()
					}, this.cx, this.cy - 20 - SmallImage.smallImg[this.id][4]);
				}
			}
		}
		bool flag11 = (this.seconds >= 0 && this.currPeas < this.maxPeas) || (this.seconds >= 0 && this.isUpdate);
		if (flag11)
		{
			this.p.says[this.p.says.Length - 1] = NinjaUtil.getTime(this.seconds);
		}
		bool flag12 = this.isPeasEffect;
		if (flag12)
		{
			this.p.isPaint = false;
			ServerEffect.addServerEffect(98, this.cx + this.peaPostionX[this.currPeas - 1] - SmallImage.smallImg[this.id][3] / 2, this.cy + this.peaPostionY[this.currPeas - 1] - SmallImage.smallImg[this.id][4], 1);
			this.currPeas--;
			bool flag13 = GameCanvas.gameTick % 2 == 0;
			if (flag13)
			{
				SoundMn.gI().HP_MPup();
			}
			bool flag14 = this.currPeas == this.remainPeas;
			if (flag14)
			{
				this.p.isPaint = true;
				this.isUpdateTree = true;
				this.isPeasEffect = false;
			}
		}
		base.update();
	}

	// Token: 0x06000633 RID: 1587 RVA: 0x0006B8E0 File Offset: 0x00069AE0
	public void perform(int idAction, object p)
	{
		bool flag = idAction == 1;
		if (flag)
		{
			Service.gI().magicTree(1);
		}
	}

	// Token: 0x04000B5D RID: 2909
	public static Image imgMagicTree;

	// Token: 0x04000B5E RID: 2910
	public static Image pea = GameCanvas.loadImage("/mainImage/myTexture2dhatdau.png");

	// Token: 0x04000B5F RID: 2911
	public int id;

	// Token: 0x04000B60 RID: 2912
	public int level;

	// Token: 0x04000B61 RID: 2913
	public int x;

	// Token: 0x04000B62 RID: 2914
	public int y;

	// Token: 0x04000B63 RID: 2915
	public int currPeas;

	// Token: 0x04000B64 RID: 2916
	public int remainPeas;

	// Token: 0x04000B65 RID: 2917
	public int maxPeas;

	// Token: 0x04000B66 RID: 2918
	public new string strInfo;

	// Token: 0x04000B67 RID: 2919
	public string name;

	// Token: 0x04000B68 RID: 2920
	public int timeToRecieve;

	// Token: 0x04000B69 RID: 2921
	public bool isUpdate;

	// Token: 0x04000B6A RID: 2922
	public int[] peaPostionX;

	// Token: 0x04000B6B RID: 2923
	public int[] peaPostionY;

	// Token: 0x04000B6C RID: 2924
	private int num;

	// Token: 0x04000B6D RID: 2925
	public PopUp p;

	// Token: 0x04000B6E RID: 2926
	public bool isUpdateTree;

	// Token: 0x04000B6F RID: 2927
	public new static bool isPaint = true;

	// Token: 0x04000B70 RID: 2928
	public bool isPeasEffect;

	// Token: 0x04000B71 RID: 2929
	public new int seconds;

	// Token: 0x04000B72 RID: 2930
	public new long last;

	// Token: 0x04000B73 RID: 2931
	public new long cur;

	// Token: 0x04000B74 RID: 2932
	private int wPopUp;

	// Token: 0x04000B75 RID: 2933
	private bool waitToUpdate;

	// Token: 0x04000B76 RID: 2934
	private int delay;
}
using System;
using System.IO;
using System.Net.NetworkInformation;
using System.Threading;
using AssemblyCSharp.Mod.Xmap;
using UnityEngine;

// Token: 0x02000081 RID: 129
public class Main : MonoBehaviour
{
	// Token: 0x06000635 RID: 1589 RVA: 0x0006B91C File Offset: 0x00069B1C
	private void Start()
	{
		Time.timeScale = 2f;
		int width = int.Parse(File.ReadAllText(Main.sizeG).Split(new char[]
		{
			'x'
		})[0]);
		int height = int.Parse(File.ReadAllText(Main.sizeG).Split(new char[]
		{
			'x'
		})[1]);
		bool flag = Main.started;
		if (!flag)
		{
			bool flag2 = Thread.CurrentThread.Name != "Main";
			if (flag2)
			{
				Thread.CurrentThread.Name = "Main";
			}
			Main.mainThreadName = Thread.CurrentThread.Name;
			Main.isPC = true;
			Main.started = true;
			bool flag3 = Main.isPC;
			if (flag3)
			{
				this.level = Rms.loadRMSInt("levelScreenKN");
				bool flag4 = this.level == 1;
				if (flag4)
				{
					Screen.SetResolution(width, height, false);
				}
				else
				{
					Screen.SetResolution(width, height, false);
				}
			}
		}
	}

	// Token: 0x06000636 RID: 1590 RVA: 0x0006BA14 File Offset: 0x00069C14
	public static void CauHinh()
	{
		try
		{
			bool flag = File.Exists(Main.fpsG);
			if (flag)
			{
				Application.targetFrameRate = 5;
			}
			bool flag2 = File.Exists(Main.fpsGPlus);
			if (flag2)
			{
				Application.targetFrameRate = 2;
			}
			bool flag3 = !File.Exists(Main.fpsG) && !File.Exists(Main.fpsGPlus);
			if (flag3)
			{
				Application.targetFrameRate = 10;
			}
		}
		catch
		{
		}
	}

	// Token: 0x06000637 RID: 1591 RVA: 0x0006BA94 File Offset: 0x00069C94
	private void SetInit()
	{
		base.enabled = true;
	}

	// Token: 0x06000638 RID: 1592 RVA: 0x0006BAA0 File Offset: 0x00069CA0
	private void OnHideUnity(bool isGameShown)
	{
		bool flag = !isGameShown;
		if (flag)
		{
			Time.timeScale = 0f;
		}
		else
		{
			Time.timeScale = 1f;
		}
	}

	// Token: 0x06000639 RID: 1593 RVA: 0x0006BAD4 File Offset: 0x00069CD4
	private void OnGUI()
	{
		bool flag = this.count >= 10;
		if (flag)
		{
			bool flag2 = this.fps == 0;
			if (flag2)
			{
				this.timefps = mSystem.currentTimeMillis();
			}
			else
			{
				bool flag3 = mSystem.currentTimeMillis() - this.timefps > 1000L;
				if (flag3)
				{
					this.max = this.fps;
					this.fps = 0;
					this.timefps = mSystem.currentTimeMillis();
				}
			}
			this.fps++;
			this.checkInput();
			Session_ME.update();
			Session_ME2.update();
			bool flag4 = Event.current.type.Equals(EventType.Repaint) && this.paintCount <= this.updateCount;
			if (flag4)
			{
				GameMidlet.gameCanvas.paint(Main.g);
				this.paintCount++;
				Main.g.reset();
			}
		}
	}

	// Token: 0x0600063A RID: 1594 RVA: 0x0006BBD4 File Offset: 0x00069DD4
	public void setsizeChange()
	{
		bool flag = !this.isRun;
		if (flag)
		{
			Screen.orientation = ScreenOrientation.LandscapeLeft;
			Application.runInBackground = true;
			QualitySettings.vSyncCount = 0;
			QualitySettings.shadows = ShadowQuality.Disable;
			QualitySettings.antiAliasing = 0;
			Application.targetFrameRate = 30;
			base.useGUILayout = false;
			Main.isCompactDevice = Main.detectCompactDevice();
			bool flag2 = Main.main == null;
			if (flag2)
			{
				Main.main = this;
			}
			this.isRun = true;
			ScaleGUI.initScaleGUI();
			bool flag3 = Main.isPC;
			if (flag3)
			{
				Main.IMEI = SystemInfo.deviceUniqueIdentifier;
			}
			else
			{
				Main.IMEI = this.GetMacAddress();
			}
			Main.isPC = true;
			bool flag4 = Main.isPC;
			if (flag4)
			{
				Screen.fullScreen = false;
			}
			bool flag5 = Main.isWindowsPhone;
			if (flag5)
			{
				Main.typeClient = 6;
			}
			bool flag6 = Main.isPC;
			if (flag6)
			{
				Main.typeClient = 4;
			}
			bool iphoneVersionApp = Main.IphoneVersionApp;
			if (iphoneVersionApp)
			{
				Main.typeClient = 5;
			}
			bool flag7 = iPhoneSettings.generation == iPhoneGeneration.iPodTouch4Gen;
			if (flag7)
			{
				Main.isIpod = true;
			}
			bool flag8 = iPhoneSettings.generation == iPhoneGeneration.iPhone4;
			if (flag8)
			{
				Main.isIphone4 = true;
			}
			Main.g = new mGraphics();
			Main.midlet = new GameMidlet();
			TileMap.loadBg();
			Paint.loadbg();
			PopUp.loadBg();
			GameScr.loadBg();
			InfoMe.gI().loadCharId();
			Panel.loadBg();
			Menu.loadBg();
			Key.mapKeyPC();
			SoundMn.gI().loadSound(TileMap.mapID);
			Main.g.CreateLineMaterial();
			Rms.saveRMSInt("lowGraphic", 1);
			Rms.saveRMSString("acc", "Jack ko bỏ con");
			Rms.saveRMSString("pass", "mewmew");
			Rms.saveRMSInt("viewchat", 0);
		}
	}

	// Token: 0x0600063B RID: 1595 RVA: 0x0006BD93 File Offset: 0x00069F93
	public static void setBackupIcloud(string path)
	{
	}

	// Token: 0x0600063C RID: 1596 RVA: 0x0006BD98 File Offset: 0x00069F98
	public string GetMacAddress()
	{
		string empty = string.Empty;
		NetworkInterface[] allNetworkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
		for (int i = 0; i < allNetworkInterfaces.Length; i++)
		{
			PhysicalAddress physicalAddress = allNetworkInterfaces[i].GetPhysicalAddress();
			bool flag = physicalAddress.ToString() != string.Empty;
			if (flag)
			{
				return physicalAddress.ToString();
			}
		}
		return string.Empty;
	}

	// Token: 0x0600063D RID: 1597 RVA: 0x0006BE00 File Offset: 0x0006A000
	public void doClearRMS()
	{
		bool flag = Main.isPC;
		if (flag)
		{
			int num = Rms.loadRMSInt("lastZoomlevel");
			bool flag2 = num != mGraphics.zoomLevel;
			if (flag2)
			{
				Rms.clearAll();
				Rms.saveRMSInt("lastZoomlevel", mGraphics.zoomLevel);
				Rms.saveRMSInt("levelScreenKN", this.level);
			}
		}
	}

	// Token: 0x0600063E RID: 1598 RVA: 0x0006BE5C File Offset: 0x0006A05C
	public static void closeKeyBoard()
	{
		bool visible = global::TouchScreenKeyboard.visible;
		if (visible)
		{
			TField.kb.active = false;
			TField.kb = null;
		}
	}

	// Token: 0x0600063F RID: 1599 RVA: 0x0006BE88 File Offset: 0x0006A088
	private void FixedUpdate()
	{
		Rms.update();
		this.count++;
		bool flag = this.count >= 10;
		if (flag)
		{
			bool flag2 = this.up == 0;
			if (flag2)
			{
				this.timeup = mSystem.currentTimeMillis();
			}
			else
			{
				bool flag3 = mSystem.currentTimeMillis() - this.timeup > 1000L;
				if (flag3)
				{
					this.upmax = this.up;
					this.up = 0;
					this.timeup = mSystem.currentTimeMillis();
				}
			}
			this.up++;
			this.setsizeChange();
			this.updateCount++;
			ipKeyboard.update();
			GameMidlet.gameCanvas.update();
			Image.update();
			DataInputStream.update();
			SMS.update();
			Net.update();
			Main.f++;
			bool flag4 = Main.f > 8;
			if (flag4)
			{
				Main.f = 0;
			}
			bool flag5 = !Main.isPC;
			if (flag5)
			{
				int num = 1 / Main.a;
			}
		}
	}

	// Token: 0x06000640 RID: 1600 RVA: 0x0006BF99 File Offset: 0x0006A199
	private void Update()
	{
		Pk9rXmap.Update();
	}

	// Token: 0x06000641 RID: 1601 RVA: 0x0006BFA4 File Offset: 0x0006A1A4
	private void checkInput()
	{
		bool mouseButtonDown = Input.GetMouseButtonDown(0);
		if (mouseButtonDown)
		{
			Vector3 mousePosition = Input.mousePosition;
			GameMidlet.gameCanvas.pointerPressed((int)(mousePosition.x / (float)mGraphics.zoomLevel), (int)(((float)Screen.height - mousePosition.y) / (float)mGraphics.zoomLevel) + mGraphics.addYWhenOpenKeyBoard);
			this.lastMousePos.x = mousePosition.x / (float)mGraphics.zoomLevel;
			this.lastMousePos.y = mousePosition.y / (float)mGraphics.zoomLevel + (float)mGraphics.addYWhenOpenKeyBoard;
		}
		bool mouseButton = Input.GetMouseButton(0);
		if (mouseButton)
		{
			Vector3 mousePosition2 = Input.mousePosition;
			GameMidlet.gameCanvas.pointerDragged((int)(mousePosition2.x / (float)mGraphics.zoomLevel), (int)(((float)Screen.height - mousePosition2.y) / (float)mGraphics.zoomLevel) + mGraphics.addYWhenOpenKeyBoard);
			this.lastMousePos.x = mousePosition2.x / (float)mGraphics.zoomLevel;
			this.lastMousePos.y = mousePosition2.y / (float)mGraphics.zoomLevel + (float)mGraphics.addYWhenOpenKeyBoard;
		}
		bool mouseButtonUp = Input.GetMouseButtonUp(0);
		if (mouseButtonUp)
		{
			Vector3 mousePosition3 = Input.mousePosition;
			this.lastMousePos.x = mousePosition3.x / (float)mGraphics.zoomLevel;
			this.lastMousePos.y = mousePosition3.y / (float)mGraphics.zoomLevel + (float)mGraphics.addYWhenOpenKeyBoard;
			GameMidlet.gameCanvas.pointerReleased((int)(mousePosition3.x / (float)mGraphics.zoomLevel), (int)(((float)Screen.height - mousePosition3.y) / (float)mGraphics.zoomLevel) + mGraphics.addYWhenOpenKeyBoard);
		}
		bool flag = Input.anyKeyDown && Event.current.type == EventType.KeyDown;
		if (flag)
		{
			int num = MyKeyMap.map(Event.current.keyCode);
			bool flag2 = Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift);
			if (flag2)
			{
				KeyCode keyCode = Event.current.keyCode;
				KeyCode keyCode2 = keyCode;
				if (keyCode2 != KeyCode.Minus)
				{
					if (keyCode2 == KeyCode.Alpha2)
					{
						num = 64;
					}
				}
				else
				{
					num = 95;
				}
			}
			bool flag3 = num != 0;
			if (flag3)
			{
				GameMidlet.gameCanvas.keyPressedz(num);
			}
		}
		bool flag4 = Event.current.type == EventType.KeyUp;
		if (flag4)
		{
			int num2 = MyKeyMap.map(Event.current.keyCode);
			bool flag5 = num2 != 0;
			if (flag5)
			{
				GameMidlet.gameCanvas.keyReleasedz(num2);
			}
		}
		bool flag6 = Main.isPC;
		if (flag6)
		{
			GameMidlet.gameCanvas.scrollMouse((int)(Input.GetAxis("Mouse ScrollWheel") * 10f));
			float x = Input.mousePosition.x;
			float y = Input.mousePosition.y;
			int x2 = (int)x / mGraphics.zoomLevel;
			int y2 = (Screen.height - (int)y) / mGraphics.zoomLevel;
			GameMidlet.gameCanvas.pointerMouse(x2, y2);
		}
	}

	// Token: 0x06000642 RID: 1602 RVA: 0x0006C274 File Offset: 0x0006A474
	private void OnApplicationQuit()
	{
		Debug.LogWarning("APP QUIT");
		GameCanvas.bRun = false;
		Session_ME.gI().close();
		Session_ME2.gI().close();
		bool flag = Main.isPC;
		if (flag)
		{
			Application.Quit();
		}
	}

	// Token: 0x06000643 RID: 1603 RVA: 0x0006C2BC File Offset: 0x0006A4BC
	private void OnApplicationPause(bool paused)
	{
		Main.isResume = false;
		if (paused)
		{
			bool flag = GameCanvas.isWaiting();
			if (flag)
			{
				Main.isQuitApp = true;
			}
		}
		else
		{
			Main.isResume = true;
		}
		bool visible = global::TouchScreenKeyboard.visible;
		if (visible)
		{
			TField.kb.active = false;
			TField.kb = null;
		}
		bool flag2 = Main.isQuitApp;
		if (flag2)
		{
			Application.Quit();
		}
	}

	// Token: 0x06000644 RID: 1604 RVA: 0x0006C320 File Offset: 0x0006A520
	public static void exit()
	{
		bool flag = Main.isPC;
		if (flag)
		{
			Main.main.OnApplicationQuit();
		}
		else
		{
			Main.a = 0;
		}
	}

	// Token: 0x06000645 RID: 1605 RVA: 0x0006C350 File Offset: 0x0006A550
	public static bool detectCompactDevice()
	{
		bool flag = iPhoneSettings.generation == iPhoneGeneration.iPhone || iPhoneSettings.generation == iPhoneGeneration.iPhone3G || iPhoneSettings.generation == iPhoneGeneration.iPodTouch1Gen || iPhoneSettings.generation == iPhoneGeneration.iPodTouch2Gen;
		return !flag;
	}

	// Token: 0x06000646 RID: 1606 RVA: 0x0006C390 File Offset: 0x0006A590
	public static bool checkCanSendSMS()
	{
		return iPhoneSettings.generation == iPhoneGeneration.iPhone3GS || iPhoneSettings.generation == iPhoneGeneration.iPhone4 || iPhoneSettings.generation > iPhoneGeneration.iPodTouch4Gen;
	}

	// Token: 0x04000B77 RID: 2935
	public static Main main;

	// Token: 0x04000B78 RID: 2936
	public static mGraphics g;

	// Token: 0x04000B79 RID: 2937
	public static GameMidlet midlet;

	// Token: 0x04000B7A RID: 2938
	public static string res = "res";

	// Token: 0x04000B7B RID: 2939
	public static string mainThreadName;

	// Token: 0x04000B7C RID: 2940
	public static bool started;

	// Token: 0x04000B7D RID: 2941
	public static bool isIpod;

	// Token: 0x04000B7E RID: 2942
	public static bool isIphone4;

	// Token: 0x04000B7F RID: 2943
	public static bool isPC;

	// Token: 0x04000B80 RID: 2944
	public static bool isWindowsPhone;

	// Token: 0x04000B81 RID: 2945
	public static bool isIPhone;

	// Token: 0x04000B82 RID: 2946
	public static bool IphoneVersionApp;

	// Token: 0x04000B83 RID: 2947
	public static string IMEI;

	// Token: 0x04000B84 RID: 2948
	public static int versionIp;

	// Token: 0x04000B85 RID: 2949
	public static int numberQuit = 1;

	// Token: 0x04000B86 RID: 2950
	public static int typeClient = 4;

	// Token: 0x04000B87 RID: 2951
	public const sbyte PC_VERSION = 4;

	// Token: 0x04000B88 RID: 2952
	public const sbyte IP_APPSTORE = 5;

	// Token: 0x04000B89 RID: 2953
	public const sbyte WINDOWSPHONE = 6;

	// Token: 0x04000B8A RID: 2954
	private int level;

	// Token: 0x04000B8B RID: 2955
	public const sbyte IP_JB = 3;

	// Token: 0x04000B8C RID: 2956
	private int updateCount;

	// Token: 0x04000B8D RID: 2957
	private int paintCount;

	// Token: 0x04000B8E RID: 2958
	private int count;

	// Token: 0x04000B8F RID: 2959
	private int fps;

	// Token: 0x04000B90 RID: 2960
	private int max;

	// Token: 0x04000B91 RID: 2961
	private int up;

	// Token: 0x04000B92 RID: 2962
	private int upmax;

	// Token: 0x04000B93 RID: 2963
	private long timefps;

	// Token: 0x04000B94 RID: 2964
	private long timeup;

	// Token: 0x04000B95 RID: 2965
	private bool isRun;

	// Token: 0x04000B96 RID: 2966
	public static int waitTick;

	// Token: 0x04000B97 RID: 2967
	public static int f;

	// Token: 0x04000B98 RID: 2968
	public static bool isResume;

	// Token: 0x04000B99 RID: 2969
	public static bool isMiniApp = true;

	// Token: 0x04000B9A RID: 2970
	public static bool isQuitApp;

	// Token: 0x04000B9B RID: 2971
	private Vector2 lastMousePos = default(Vector2);

	// Token: 0x04000B9C RID: 2972
	public static int a = 1;

	// Token: 0x04000B9D RID: 2973
	public static bool isCompactDevice = true;

	// Token: 0x04000B9E RID: 2974
	public static string sizeG = "Nro_244_Data//Resources//Data//size.txt";

	// Token: 0x04000B9F RID: 2975
	public static string fpsG = "Nro_244_Data//Resources//Cpu";

	// Token: 0x04000BA0 RID: 2976
	public static string fpsGPlus = "Nro_244_Data//Resources//CpuCao";
}
using System;

// Token: 0x02000082 RID: 130
public class MainImage
{
	// Token: 0x06000649 RID: 1609 RVA: 0x0006C433 File Offset: 0x0006A633
	public MainImage()
	{
	}

	// Token: 0x0600064A RID: 1610 RVA: 0x0006C457 File Offset: 0x0006A657
	public MainImage(Image im, sbyte nFrame)
	{
		this.img = im;
		this.count = 0L;
		this.nFrame = nFrame;
	}

	// Token: 0x04000BA1 RID: 2977
	public Image img;

	// Token: 0x04000BA2 RID: 2978
	public long count = -1L;

	// Token: 0x04000BA3 RID: 2979
	public int timeImageNull;

	// Token: 0x04000BA4 RID: 2980
	public int idImage;

	// Token: 0x04000BA5 RID: 2981
	public long timerequest;

	// Token: 0x04000BA6 RID: 2982
	public sbyte nFrame = 1;

	// Token: 0x04000BA7 RID: 2983
	public long timeUse = mSystem.currentTimeMillis();
}
using System;

// Token: 0x02000083 RID: 131
public class MapTemplate
{
	// Token: 0x04000BA8 RID: 2984
	public static int[] tmw = new int[3];

	// Token: 0x04000BA9 RID: 2985
	public static int[] tmh = new int[3];

	// Token: 0x04000BAA RID: 2986
	public static int[] pxw = new int[3];

	// Token: 0x04000BAB RID: 2987
	public static int[] pxh = new int[3];

	// Token: 0x04000BAC RID: 2988
	public static int[] tileID = new int[3];

	// Token: 0x04000BAD RID: 2989
	public static int[][] maps = new int[3][];

	// Token: 0x04000BAE RID: 2990
	public static int[][] types = new int[3][];

	// Token: 0x04000BAF RID: 2991
	public static MyVector[] vCurrItem = new MyVector[3];
}
using System;

// Token: 0x02000084 RID: 132
public class Math
{
	// Token: 0x0600064D RID: 1613 RVA: 0x0006C504 File Offset: 0x0006A704
	public static int abs(int i)
	{
		return (i <= 0) ? (-i) : i;
	}

	// Token: 0x0600064E RID: 1614 RVA: 0x0006C520 File Offset: 0x0006A720
	public static int min(int x, int y)
	{
		return (x >= y) ? y : x;
	}

	// Token: 0x0600064F RID: 1615 RVA: 0x0006C53C File Offset: 0x0006A73C
	public static int max(int x, int y)
	{
		return (x <= y) ? y : x;
	}

	// Token: 0x06000650 RID: 1616 RVA: 0x0006C558 File Offset: 0x0006A758
	public static int pow(int data, int x)
	{
		int num = 1;
		for (int i = 0; i < x; i++)
		{
			num *= data;
		}
		return num;
	}

	// Token: 0x04000BB0 RID: 2992
	public const double PI = 3.141592653589793;
}
using System;

// Token: 0x02000085 RID: 133
public class Member
{
	// Token: 0x06000652 RID: 1618 RVA: 0x0006C58C File Offset: 0x0006A78C
	public static string getRole(int r)
	{
		if (!true)
		{
		}
		string result;
		switch (r)
		{
		case 0:
			result = mResources.clan_leader;
			break;
		case 1:
			result = mResources.clan_coleader;
			break;
		case 2:
			result = mResources.member;
			break;
		default:
			result = string.Empty;
			break;
		}
		if (!true)
		{
		}
		return result;
	}

	// Token: 0x04000BB1 RID: 2993
	public int ID;

	// Token: 0x04000BB2 RID: 2994
	public short head;

	// Token: 0x04000BB3 RID: 2995
	public short headICON = -1;

	// Token: 0x04000BB4 RID: 2996
	public short leg;

	// Token: 0x04000BB5 RID: 2997
	public short body;

	// Token: 0x04000BB6 RID: 2998
	public string name;

	// Token: 0x04000BB7 RID: 2999
	public sbyte role;

	// Token: 0x04000BB8 RID: 3000
	public string powerPoint;

	// Token: 0x04000BB9 RID: 3001
	public int donate;

	// Token: 0x04000BBA RID: 3002
	public int receive_donate;

	// Token: 0x04000BBB RID: 3003
	public int curClanPoint;

	// Token: 0x04000BBC RID: 3004
	public int clanPoint;

	// Token: 0x04000BBD RID: 3005
	public int lastRequest;

	// Token: 0x04000BBE RID: 3006
	public string joinTime;
}
using System;

// Token: 0x02000086 RID: 134
public class Menu
{
	// Token: 0x06000654 RID: 1620 RVA: 0x0006C5EB File Offset: 0x0006A7EB
	public static void loadBg()
	{
		Menu.imgMenu1 = GameCanvas.loadImage("/mainImage/myTexture2dbtMenu1.png");
		Menu.imgMenu2 = GameCanvas.loadImage("/mainImage/myTexture2dbtMenu2.png");
	}

	// Token: 0x06000655 RID: 1621 RVA: 0x0006C60C File Offset: 0x0006A80C
	public void startWithoutCloseButton(MyVector menuItems, int pos)
	{
		this.startAt(menuItems, pos);
		this.disableClose = true;
	}

	// Token: 0x06000656 RID: 1622 RVA: 0x0006C620 File Offset: 0x0006A820
	public void startAt(MyVector menuItems, int x, int y)
	{
		this.startAt(menuItems, 0);
		this.menuX = x;
		this.menuY = y;
		while (this.menuY + this.menuH > GameCanvas.h)
		{
			this.menuY -= 2;
		}
	}

	// Token: 0x06000657 RID: 1623 RVA: 0x0006C670 File Offset: 0x0006A870
	public void startAt(MyVector menuItems, int pos)
	{
		bool flag = this.showMenu;
		if (!flag)
		{
			this.isClose = false;
			this.touch = false;
			this.close = false;
			this.tDelay = 0;
			bool flag2 = menuItems.size() == 1;
			if (flag2)
			{
				this.menuSelectedItem = 0;
				Command command = (Command)menuItems.elementAt(0);
				bool flag3 = command != null && command.caption.Equals(mResources.saying);
				if (flag3)
				{
					command.performAction();
					this.showMenu = false;
					InfoDlg.showWait();
					return;
				}
			}
			SoundMn.gI().openMenu();
			this.isNotClose = new bool[menuItems.size()];
			for (int i = 0; i < this.isNotClose.Length; i++)
			{
				this.isNotClose[i] = false;
			}
			this.disableClose = false;
			ChatPopup.currChatPopup = null;
			Effect2.vEffect2.removeAllElements();
			Effect2.vEffect2Outside.removeAllElements();
			InfoDlg.hide();
			bool flag4 = menuItems.size() != 0;
			if (flag4)
			{
				this.menuItems = menuItems;
				this.menuW = 60;
				this.menuH = 60;
				for (int j = 0; j < menuItems.size(); j++)
				{
					Command command2 = (Command)menuItems.elementAt(j);
					command2.isPlaySoundButton = false;
					int width = mFont.tahoma_7_yellow.getWidth(command2.caption);
					command2.subCaption = mFont.tahoma_7_yellow.splitFontArray(command2.caption, this.menuW - 10);
				}
				Menu.menuTemY = new int[menuItems.size()];
				this.menuX = (GameCanvas.w - menuItems.size() * this.menuW) / 2;
				bool flag5 = this.menuX < 1;
				if (flag5)
				{
					this.menuX = 1;
				}
				this.menuY = GameCanvas.h - this.menuH - (Paint.hTab + 1) - 1;
				bool isTouch = GameCanvas.isTouch;
				if (isTouch)
				{
					this.menuY -= 3;
				}
				this.menuY += 27;
				for (int k = 0; k < Menu.menuTemY.Length; k++)
				{
					Menu.menuTemY[k] = GameCanvas.h;
				}
				this.showMenu = true;
				this.menuSelectedItem = 0;
				Menu.cmxLim = this.menuItems.size() * this.menuW - GameCanvas.w;
				bool flag6 = Menu.cmxLim < 0;
				if (flag6)
				{
					Menu.cmxLim = 0;
				}
				Menu.cmtoX = 0;
				Menu.cmx = 0;
				Menu.xc = 50;
				this.w = menuItems.size() * this.menuW - 1;
				bool flag7 = this.w > GameCanvas.w - 2;
				if (flag7)
				{
					this.w = GameCanvas.w - 2;
				}
				bool flag8 = GameCanvas.isTouch && !Main.isPC;
				if (flag8)
				{
					this.menuSelectedItem = -1;
				}
			}
		}
	}

	// Token: 0x06000658 RID: 1624 RVA: 0x0006C964 File Offset: 0x0006AB64
	public bool isScrolling()
	{
		return (!this.isClose && Menu.menuTemY[Menu.menuTemY.Length - 1] > this.menuY) || (this.isClose && Menu.menuTemY[Menu.menuTemY.Length - 1] < GameCanvas.h);
	}

	// Token: 0x06000659 RID: 1625 RVA: 0x0006C9C4 File Offset: 0x0006ABC4
	public void updateMenuKey()
	{
		bool flag = (GameScr.gI().activeRongThan && GameScr.gI().isUseFreez) || !this.showMenu || this.isScrolling();
		if (!flag)
		{
			bool flag2 = false;
			bool flag3 = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] || GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23];
			if (flag3)
			{
				flag2 = true;
				this.menuSelectedItem--;
				bool flag4 = this.menuSelectedItem < 0;
				if (flag4)
				{
					this.menuSelectedItem = this.menuItems.size() - 1;
				}
			}
			else
			{
				bool flag5 = GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] || GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24];
				if (flag5)
				{
					flag2 = true;
					this.menuSelectedItem++;
					bool flag6 = this.menuSelectedItem > this.menuItems.size() - 1;
					if (flag6)
					{
						this.menuSelectedItem = 0;
					}
				}
				else
				{
					bool flag7 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25];
					if (flag7)
					{
						bool flag8 = this.center != null;
						if (flag8)
						{
							bool flag9 = this.center.idAction > 0;
							if (flag9)
							{
								bool flag10 = this.center.actionListener == GameScr.gI();
								if (flag10)
								{
									GameScr.gI().actionPerform(this.center.idAction, this.center.p);
								}
								else
								{
									this.perform(this.center.idAction, this.center.p);
								}
							}
						}
						else
						{
							this.waitToPerform = 2;
						}
					}
					else
					{
						bool flag11 = GameCanvas.keyPressed[12] && !GameScr.gI().isRongThanMenu();
						if (flag11)
						{
							bool flag12 = this.isScrolling();
							if (flag12)
							{
								return;
							}
							bool flag13 = this.left.idAction > 0;
							if (flag13)
							{
								this.perform(this.left.idAction, this.left.p);
							}
							else
							{
								this.waitToPerform = 2;
							}
							SoundMn.gI().buttonClose();
						}
						else
						{
							bool flag14 = !GameScr.gI().isRongThanMenu() && !this.disableClose && (GameCanvas.keyPressed[13] || mScreen.getCmdPointerLast(this.right));
							if (flag14)
							{
								bool flag15 = this.isScrolling();
								if (flag15)
								{
									return;
								}
								bool flag16 = !this.close;
								if (flag16)
								{
									this.close = true;
								}
								this.isClose = true;
								SoundMn.gI().buttonClose();
							}
						}
					}
				}
			}
			bool flag17 = flag2;
			if (flag17)
			{
				Menu.cmtoX = this.menuSelectedItem * this.menuW + this.menuW - GameCanvas.w / 2;
				bool flag18 = Menu.cmtoX > Menu.cmxLim;
				if (flag18)
				{
					Menu.cmtoX = Menu.cmxLim;
				}
				bool flag19 = Menu.cmtoX < 0;
				if (flag19)
				{
					Menu.cmtoX = 0;
				}
				bool flag20 = this.menuSelectedItem == this.menuItems.size() - 1 || this.menuSelectedItem == 0;
				if (flag20)
				{
					Menu.cmx = Menu.cmtoX;
				}
			}
			bool flag21 = true;
			bool flag22 = GameCanvas.panel.cp != null && GameCanvas.panel.cp.isClip;
			if (flag22)
			{
				bool flag23 = !GameCanvas.isPointerHoldIn(GameCanvas.panel.cp.cx, 0, GameCanvas.panel.cp.sayWidth + 2, GameCanvas.panel.cp.ch);
				if (flag23)
				{
					flag21 = true;
				}
				else
				{
					flag21 = false;
					GameCanvas.panel.cp.updateKey();
				}
			}
			bool flag24 = !this.disableClose && GameCanvas.isPointerJustRelease && !GameCanvas.isPointer(this.menuX, this.menuY, this.w, this.menuH) && !this.pointerIsDowning && !GameScr.gI().isRongThanMenu() && flag21;
			if (flag24)
			{
				bool flag25 = !this.isScrolling();
				if (flag25)
				{
					this.pointerDownTime = (this.pointerDownFirstX = 0);
					this.pointerIsDowning = false;
					GameCanvas.clearAllPointerEvent();
					Res.outz("menu select= " + this.menuSelectedItem.ToString());
					this.isClose = true;
					this.close = true;
					SoundMn.gI().buttonClose();
				}
			}
			else
			{
				bool isPointerDown = GameCanvas.isPointerDown;
				if (isPointerDown)
				{
					bool flag26 = !this.pointerIsDowning && GameCanvas.isPointer(this.menuX, this.menuY, this.w, this.menuH);
					if (flag26)
					{
						for (int i = 0; i < this.pointerDownLastX.Length; i++)
						{
							this.pointerDownLastX[0] = GameCanvas.px;
						}
						this.pointerDownFirstX = GameCanvas.px;
						this.pointerIsDowning = true;
						this.isDownWhenRunning = (this.cmRun != 0);
						this.cmRun = 0;
					}
					else
					{
						bool flag27 = this.pointerIsDowning;
						if (flag27)
						{
							this.pointerDownTime++;
							bool flag28 = this.pointerDownTime > 5 && this.pointerDownFirstX == GameCanvas.px && !this.isDownWhenRunning;
							if (flag28)
							{
								this.pointerDownFirstX = -1000;
								this.menuSelectedItem = (Menu.cmtoX + GameCanvas.px - this.menuX) / this.menuW;
							}
							int num = GameCanvas.px - this.pointerDownLastX[0];
							bool flag29 = num != 0 && this.menuSelectedItem != -1;
							if (flag29)
							{
								this.menuSelectedItem = -1;
							}
							for (int j = this.pointerDownLastX.Length - 1; j > 0; j--)
							{
								this.pointerDownLastX[j] = this.pointerDownLastX[j - 1];
							}
							this.pointerDownLastX[0] = GameCanvas.px;
							Menu.cmtoX -= num;
							bool flag30 = Menu.cmtoX < 0;
							if (flag30)
							{
								Menu.cmtoX = 0;
							}
							bool flag31 = Menu.cmtoX > Menu.cmxLim;
							if (flag31)
							{
								Menu.cmtoX = Menu.cmxLim;
							}
							bool flag32 = Menu.cmx < 0 || Menu.cmx > Menu.cmxLim;
							if (flag32)
							{
								num /= 2;
							}
							Menu.cmx -= num;
							bool flag33 = Menu.cmx < -(GameCanvas.h / 3);
							if (flag33)
							{
								this.wantUpdateList = true;
							}
							else
							{
								this.wantUpdateList = false;
							}
						}
					}
				}
				bool flag34 = GameCanvas.isPointerJustRelease && this.pointerIsDowning;
				if (flag34)
				{
					int i2 = GameCanvas.px - this.pointerDownLastX[0];
					GameCanvas.isPointerJustRelease = false;
					bool flag35 = Res.abs(i2) < 20 && Res.abs(GameCanvas.px - this.pointerDownFirstX) < 20 && !this.isDownWhenRunning;
					if (flag35)
					{
						this.cmRun = 0;
						Menu.cmtoX = Menu.cmx;
						this.pointerDownFirstX = -1000;
						this.menuSelectedItem = (Menu.cmtoX + GameCanvas.px - this.menuX) / this.menuW;
						this.pointerDownTime = 0;
						this.waitToPerform = 10;
					}
					else
					{
						bool flag36 = this.menuSelectedItem != -1 && this.pointerDownTime > 5;
						if (flag36)
						{
							this.pointerDownTime = 0;
							this.waitToPerform = 1;
						}
						else
						{
							bool flag37 = this.menuSelectedItem == -1 && !this.isDownWhenRunning;
							if (flag37)
							{
								bool flag38 = Menu.cmx < 0;
								if (flag38)
								{
									Menu.cmtoX = 0;
								}
								else
								{
									bool flag39 = Menu.cmx > Menu.cmxLim;
									if (flag39)
									{
										Menu.cmtoX = Menu.cmxLim;
									}
									else
									{
										int num2 = GameCanvas.px - this.pointerDownLastX[0] + (this.pointerDownLastX[0] - this.pointerDownLastX[1]) + (this.pointerDownLastX[1] - this.pointerDownLastX[2]);
										num2 = ((num2 > 10) ? 10 : ((num2 < -10) ? -10 : 0));
										this.cmRun = -num2 * 100;
									}
								}
							}
						}
					}
					this.pointerIsDowning = false;
					this.pointerDownTime = 0;
					GameCanvas.isPointerJustRelease = false;
				}
				GameCanvas.clearKeyPressed();
				GameCanvas.clearKeyHold();
			}
		}
	}

	// Token: 0x0600065A RID: 1626 RVA: 0x0006D218 File Offset: 0x0006B418
	public void moveCamera()
	{
		bool flag = this.cmRun != 0 && !this.pointerIsDowning;
		if (flag)
		{
			Menu.cmtoX += this.cmRun / 100;
			bool flag2 = Menu.cmtoX < 0;
			if (flag2)
			{
				Menu.cmtoX = 0;
			}
			else
			{
				bool flag3 = Menu.cmtoX > Menu.cmxLim;
				if (flag3)
				{
					Menu.cmtoX = Menu.cmxLim;
				}
				else
				{
					Menu.cmx = Menu.cmtoX;
				}
			}
			this.cmRun = this.cmRun * 9 / 10;
			bool flag4 = this.cmRun < 100 && this.cmRun > -100;
			if (flag4)
			{
				this.cmRun = 0;
			}
		}
		bool flag5 = Menu.cmx != Menu.cmtoX && !this.pointerIsDowning;
		if (flag5)
		{
			this.cmvx = Menu.cmtoX - Menu.cmx << 2;
			this.cmdx += this.cmvx;
			Menu.cmx += this.cmdx >> 4;
			this.cmdx &= 15;
		}
	}

	// Token: 0x0600065B RID: 1627 RVA: 0x0006D338 File Offset: 0x0006B538
	public void paintMenu(mGraphics g)
	{
		bool flag = GameScr.gI().activeRongThan && GameScr.gI().isUseFreez;
		if (!flag)
		{
			g.translate(-g.getTranslateX(), -g.getTranslateY());
			g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			g.translate(-Menu.cmx, 0);
			for (int i = 0; i < this.menuItems.size(); i++)
			{
				bool flag2 = i == this.menuSelectedItem;
				if (flag2)
				{
					g.drawImage(Menu.imgMenu2, this.menuX + i * this.menuW + 1, Menu.menuTemY[i], 0);
				}
				else
				{
					g.drawImage(Menu.imgMenu1, this.menuX + i * this.menuW + 1, Menu.menuTemY[i], 0);
				}
				Command command = (Command)this.menuItems.elementAt(i);
				string[] array = command.subCaption;
				bool flag3 = array == null;
				if (flag3)
				{
					array = new string[]
					{
						((Command)this.menuItems.elementAt(i)).caption
					};
				}
				int num = Menu.menuTemY[i] + (this.menuH - array.Length * 14) / 2 + 1;
				for (int j = 0; j < array.Length; j++)
				{
					bool flag4 = i == this.menuSelectedItem;
					if (flag4)
					{
						mFont.tahoma_7b_green2.drawString(g, array[j], this.menuX + i * this.menuW + this.menuW / 2, num + j * 14, 2);
					}
					else
					{
						bool isDisplay = command.isDisplay;
						if (isDisplay)
						{
							mFont.tahoma_7b_red.drawString(g, array[j], this.menuX + i * this.menuW + this.menuW / 2, num + j * 14, 2);
						}
						else
						{
							mFont.tahoma_7b_dark.drawString(g, array[j], this.menuX + i * this.menuW + this.menuW / 2, num + j * 14, 2);
						}
					}
				}
			}
			g.translate(-g.getTranslateX(), -g.getTranslateY());
		}
	}

	// Token: 0x0600065C RID: 1628 RVA: 0x0006D570 File Offset: 0x0006B770
	public void doCloseMenu()
	{
		Res.outz("CLOSE MENU");
		this.isClose = false;
		this.showMenu = false;
		InfoDlg.hide();
		bool flag = this.close;
		if (flag)
		{
			GameCanvas.panel.cp = null;
			global::Char.chatPopup = null;
			bool flag2 = GameCanvas.panel2 != null && GameCanvas.panel2.cp != null;
			if (flag2)
			{
				GameCanvas.panel2.cp = null;
			}
		}
		else
		{
			bool flag3 = !this.touch;
			if (!flag3)
			{
				GameCanvas.panel.cp = null;
				bool flag4 = GameCanvas.panel2 != null && GameCanvas.panel2.cp != null;
				if (flag4)
				{
					GameCanvas.panel2.cp = null;
				}
				bool flag5 = this.menuSelectedItem >= 0;
				if (flag5)
				{
					Command command = (Command)this.menuItems.elementAt(this.menuSelectedItem);
					bool flag6 = command != null;
					if (flag6)
					{
						SoundMn.gI().buttonClose();
						command.performAction();
					}
				}
			}
		}
	}

	// Token: 0x0600065D RID: 1629 RVA: 0x0006D67C File Offset: 0x0006B87C
	public void performSelect()
	{
		InfoDlg.hide();
		bool flag = this.menuSelectedItem >= 0;
		if (flag)
		{
			Command command = (Command)this.menuItems.elementAt(this.menuSelectedItem);
			if (command != null)
			{
				command.performAction();
			}
		}
	}

	// Token: 0x0600065E RID: 1630 RVA: 0x0006D6C4 File Offset: 0x0006B8C4
	public void updateMenu()
	{
		this.moveCamera();
		bool flag = !this.isClose;
		if (flag)
		{
			this.tDelay++;
			for (int i = 0; i < Menu.menuTemY.Length; i++)
			{
				bool flag2 = Menu.menuTemY[i] > this.menuY;
				if (flag2)
				{
					int num = Menu.menuTemY[i] - this.menuY >> 1;
					bool flag3 = num < 1;
					if (flag3)
					{
						num = 1;
					}
					bool flag4 = this.tDelay > i;
					if (flag4)
					{
						Menu.menuTemY[i] -= num;
					}
				}
			}
			bool flag5 = Menu.menuTemY[Menu.menuTemY.Length - 1] <= this.menuY;
			if (flag5)
			{
				this.tDelay = 0;
			}
		}
		else
		{
			this.tDelay++;
			for (int j = 0; j < Menu.menuTemY.Length; j++)
			{
				bool flag6 = Menu.menuTemY[j] < GameCanvas.h;
				if (flag6)
				{
					int num2 = (GameCanvas.h - Menu.menuTemY[j] >> 1) + 2;
					bool flag7 = num2 < 1;
					if (flag7)
					{
						num2 = 1;
					}
					bool flag8 = this.tDelay > j;
					if (flag8)
					{
						Menu.menuTemY[j] += num2;
					}
				}
			}
			bool flag9 = Menu.menuTemY[Menu.menuTemY.Length - 1] >= GameCanvas.h;
			if (flag9)
			{
				this.tDelay = 0;
				this.doCloseMenu();
			}
		}
		bool flag10 = Menu.xc != 0;
		if (flag10)
		{
			Menu.xc >>= 1;
			bool flag11 = Menu.xc < 0;
			if (flag11)
			{
				Menu.xc = 0;
			}
		}
		bool flag12 = this.isScrolling() || this.waitToPerform <= 0;
		if (!flag12)
		{
			this.waitToPerform--;
			bool flag13 = this.waitToPerform == 0;
			if (flag13)
			{
				bool flag14 = this.menuSelectedItem >= 0 && !this.isNotClose[this.menuSelectedItem];
				if (flag14)
				{
					this.isClose = true;
					this.touch = true;
					GameCanvas.panel.cp = null;
				}
				else
				{
					this.performSelect();
				}
			}
		}
	}

	// Token: 0x0600065F RID: 1631 RVA: 0x0006D90B File Offset: 0x0006BB0B
	public void perform(int idAction, object p)
	{
	}

	// Token: 0x04000BBF RID: 3007
	public bool showMenu;

	// Token: 0x04000BC0 RID: 3008
	public MyVector menuItems;

	// Token: 0x04000BC1 RID: 3009
	public int menuSelectedItem;

	// Token: 0x04000BC2 RID: 3010
	public int menuX;

	// Token: 0x04000BC3 RID: 3011
	public int menuY;

	// Token: 0x04000BC4 RID: 3012
	public int menuW;

	// Token: 0x04000BC5 RID: 3013
	public int menuH;

	// Token: 0x04000BC6 RID: 3014
	public static int[] menuTemY;

	// Token: 0x04000BC7 RID: 3015
	public static int cmtoX;

	// Token: 0x04000BC8 RID: 3016
	public static int cmx;

	// Token: 0x04000BC9 RID: 3017
	public static int cmdy;

	// Token: 0x04000BCA RID: 3018
	public static int cmvy;

	// Token: 0x04000BCB RID: 3019
	public static int cmxLim;

	// Token: 0x04000BCC RID: 3020
	public static int xc;

	// Token: 0x04000BCD RID: 3021
	private Command left = new Command(mResources.SELECT, 0);

	// Token: 0x04000BCE RID: 3022
	private Command right = new Command(mResources.CLOSE, 0, GameCanvas.w - 71, GameCanvas.h - mScreen.cmdH + 1);

	// Token: 0x04000BCF RID: 3023
	private Command center;

	// Token: 0x04000BD0 RID: 3024
	public static Image imgMenu1;

	// Token: 0x04000BD1 RID: 3025
	public static Image imgMenu2;

	// Token: 0x04000BD2 RID: 3026
	private bool disableClose;

	// Token: 0x04000BD3 RID: 3027
	public int tDelay;

	// Token: 0x04000BD4 RID: 3028
	public int w;

	// Token: 0x04000BD5 RID: 3029
	private int pa;

	// Token: 0x04000BD6 RID: 3030
	private bool trans;

	// Token: 0x04000BD7 RID: 3031
	private int pointerDownTime;

	// Token: 0x04000BD8 RID: 3032
	private int pointerDownFirstX;

	// Token: 0x04000BD9 RID: 3033
	private int[] pointerDownLastX = new int[3];

	// Token: 0x04000BDA RID: 3034
	private bool pointerIsDowning;

	// Token: 0x04000BDB RID: 3035
	private bool isDownWhenRunning;

	// Token: 0x04000BDC RID: 3036
	private bool wantUpdateList;

	// Token: 0x04000BDD RID: 3037
	private int waitToPerform;

	// Token: 0x04000BDE RID: 3038
	private int cmRun;

	// Token: 0x04000BDF RID: 3039
	private bool touch;

	// Token: 0x04000BE0 RID: 3040
	private bool close;

	// Token: 0x04000BE1 RID: 3041
	private int cmvx;

	// Token: 0x04000BE2 RID: 3042
	private int cmdx;

	// Token: 0x04000BE3 RID: 3043
	private bool isClose;

	// Token: 0x04000BE4 RID: 3044
	public bool[] isNotClose;
}
using System;

// Token: 0x02000087 RID: 135
public class Message
{
	// Token: 0x06000661 RID: 1633 RVA: 0x0006D967 File Offset: 0x0006BB67
	public Message(int command)
	{
		this.command = (sbyte)command;
		this.dos = new myWriter();
	}

	// Token: 0x06000662 RID: 1634 RVA: 0x0006D984 File Offset: 0x0006BB84
	public Message()
	{
		this.dos = new myWriter();
	}

	// Token: 0x06000663 RID: 1635 RVA: 0x0006D999 File Offset: 0x0006BB99
	public Message(sbyte command)
	{
		this.command = command;
		this.dos = new myWriter();
	}

	// Token: 0x06000664 RID: 1636 RVA: 0x0006D9B5 File Offset: 0x0006BBB5
	public Message(sbyte command, sbyte[] data)
	{
		this.command = command;
		this.dis = new myReader(data);
	}

	// Token: 0x06000665 RID: 1637 RVA: 0x0006D9D4 File Offset: 0x0006BBD4
	public sbyte[] getData()
	{
		return this.dos.getData();
	}

	// Token: 0x06000666 RID: 1638 RVA: 0x0006D9F4 File Offset: 0x0006BBF4
	public myReader reader()
	{
		return this.dis;
	}

	// Token: 0x06000667 RID: 1639 RVA: 0x0006DA0C File Offset: 0x0006BC0C
	public myWriter writer()
	{
		return this.dos;
	}

	// Token: 0x06000668 RID: 1640 RVA: 0x0006DA24 File Offset: 0x0006BC24
	public int readInt3Byte()
	{
		return this.dis.readInt();
	}

	// Token: 0x06000669 RID: 1641 RVA: 0x0006DA41 File Offset: 0x0006BC41
	public void cleanup()
	{
	}

	// Token: 0x04000BE5 RID: 3045
	public sbyte command;

	// Token: 0x04000BE6 RID: 3046
	private myReader dis;

	// Token: 0x04000BE7 RID: 3047
	private myWriter dos;
}
using System;
using System.Collections;
using UnityEngine;

// Token: 0x02000088 RID: 136
public class mFont
{
	// Token: 0x0600066A RID: 1642 RVA: 0x0006DA44 File Offset: 0x0006BC44
	public mFont(string strFont, string pathImage, string pathData, int space)
	{
		try
		{
			this.strFont = strFont;
			this.space = space;
			this.pathImage = pathImage;
			DataInputStream dataInputStream = null;
			this.reloadImage();
			try
			{
				dataInputStream = MyStream.readFile(pathData);
				this.fImages = new int[(int)dataInputStream.readShort()][];
				for (int i = 0; i < this.fImages.Length; i++)
				{
					this.fImages[i] = new int[4];
					this.fImages[i][0] = (int)dataInputStream.readShort();
					this.fImages[i][1] = (int)dataInputStream.readShort();
					this.fImages[i][2] = (int)dataInputStream.readShort();
					this.fImages[i][3] = (int)dataInputStream.readShort();
					this.setHeight(this.fImages[i][3]);
				}
				dataInputStream.close();
			}
			catch (Exception)
			{
				try
				{
					dataInputStream.close();
				}
				catch (Exception ex)
				{
					ex.StackTrace.ToString();
				}
			}
		}
		catch (Exception ex2)
		{
			ex2.StackTrace.ToString();
		}
	}

	// Token: 0x0600066B RID: 1643 RVA: 0x0006DBA0 File Offset: 0x0006BDA0
	public mFont(sbyte id)
	{
		string text = "chelthm";
		bool flag = (id > 0 && id < 10) || id == 19;
		if (flag)
		{
			this.yAdd = 1;
			text = "barmeneb";
		}
		else
		{
			bool flag2 = id >= 10 && id <= 18;
			if (flag2)
			{
				text = "chelthm";
				this.yAdd = 2;
			}
			else
			{
				bool flag3 = id > 24;
				if (flag3)
				{
					text = "staccato";
				}
			}
		}
		this.id = id;
		text = "FontSys/x" + mGraphics.zoomLevel.ToString() + "/" + text;
		this.myFont = (Font)Resources.Load(text);
		bool flag4 = id < 25;
		if (flag4)
		{
			this.color1 = this.setColorFont(id);
			this.color2 = this.setColorFont(id);
		}
		else
		{
			this.color1 = this.bigColor((int)id);
			this.color2 = this.bigColor((int)id);
		}
		this.wO = this.getWidthExactOf("o");
	}

	// Token: 0x0600066C RID: 1644 RVA: 0x0006DCCC File Offset: 0x0006BECC
	public static void init()
	{
		bool flag = mGraphics.zoomLevel == 1;
		if (flag)
		{
			mFont.tahoma_7b_red = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_red.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7b_blue = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_blue.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7b_white = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_white.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7b_yellow = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_yellow.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7b_yellowSmall = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_yellow.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7b_dark = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_brown.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7b_green2 = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_green2.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7b_green = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_green.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7b_focus = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_focus.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7b_unfocus = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7b_unfocus.png", "/myfont/tahoma_7b", 0);
			mFont.tahoma_7 = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7.png", "/myfont/tahoma_7", 0);
			mFont.tahoma_7_blue1 = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7_blue1.png", "/myfont/tahoma_7", 0);
			mFont.tahoma_7_green2 = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7_green2.png", "/myfont/tahoma_7", 0);
			mFont.tahoma_7_yellow = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7_yellow.png", "/myfont/tahoma_7", 0);
			mFont.tahoma_7_grey = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7_grey.png", "/myfont/tahoma_7", 0);
			mFont.tahoma_7_red = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7_red.png", "/myfont/tahoma_7", 0);
			mFont.tahoma_7_blue = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7_blue.png", "/myfont/tahoma_7", 0);
			mFont.tahoma_7_green = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7_green.png", "/myfont/tahoma_7", 0);
			mFont.tahoma_7_white = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_7_white.png", "/myfont/tahoma_7", 0);
			mFont.tahoma_8b = new mFont(" 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW", "/myfont/tahoma_8b.png", "/myfont/tahoma_8b", -1);
			mFont.number_yellow = new mFont(" 0123456789+-", "/myfont/number_yellow.png", "/myfont/number", 0);
			mFont.number_red = new mFont(" 0123456789+-", "/myfont/number_red.png", "/myfont/number", 0);
			mFont.number_green = new mFont(" 0123456789+-", "/myfont/number_green.png", "/myfont/number", 0);
			mFont.number_gray = new mFont(" 0123456789+-", "/myfont/number_gray.png", "/myfont/number", 0);
			mFont.number_orange = new mFont(" 0123456789+-", "/myfont/number_orange.png", "/myfont/number", 0);
			mFont.bigNumber_red = mFont.number_red;
			mFont.bigNumber_While = mFont.tahoma_7b_white;
			mFont.bigNumber_yellow = mFont.number_yellow;
			mFont.bigNumber_green = mFont.number_green;
			mFont.bigNumber_orange = mFont.number_orange;
			mFont.bigNumber_blue = mFont.tahoma_7_blue1;
			mFont.nameFontRed = mFont.tahoma_7_red;
			mFont.nameFontYellow = mFont.tahoma_7_yellow;
			mFont.nameFontGreen = mFont.tahoma_7_green;
			mFont.tahoma_7_greySmall = mFont.tahoma_7_grey;
			mFont.tahoma_7b_yellowSmall2 = mFont.tahoma_7_yellow;
			mFont.tahoma_7b_green2Small = mFont.tahoma_7b_green2;
			mFont.tahoma_7_whiteSmall = mFont.tahoma_7_white;
			mFont.tahoma_7b_greenSmall = mFont.tahoma_7b_green;
			mFont.tahoma_7_blue1Small = mFont.tahoma_7_blue1;
		}
		else
		{
			mFont.gI = new mFont(0);
			mFont.tahoma_7b_red = new mFont(1);
			mFont.tahoma_7b_blue = new mFont(2);
			mFont.tahoma_7b_white = new mFont(3);
			mFont.tahoma_7b_yellow = new mFont(4);
			mFont.tahoma_7b_yellowSmall = new mFont(4);
			mFont.tahoma_7b_dark = new mFont(5);
			mFont.tahoma_7b_green2 = new mFont(6);
			mFont.tahoma_7b_green = new mFont(7);
			mFont.tahoma_7b_focus = new mFont(8);
			mFont.tahoma_7b_unfocus = new mFont(9);
			mFont.tahoma_7 = new mFont(10);
			mFont.tahoma_7_blue1 = new mFont(11);
			mFont.tahoma_7_blue1Small = mFont.tahoma_7_blue1;
			mFont.tahoma_7_green2 = new mFont(12);
			mFont.tahoma_7_yellow = new mFont(13);
			mFont.tahoma_7_grey = new mFont(14);
			mFont.tahoma_7_red = new mFont(15);
			mFont.tahoma_7_blue = new mFont(16);
			mFont.tahoma_7_green = new mFont(17);
			mFont.tahoma_7_white = new mFont(18);
			mFont.tahoma_8b = new mFont(19);
			mFont.number_yellow = new mFont(20);
			mFont.number_red = new mFont(21);
			mFont.number_green = new mFont(22);
			mFont.number_gray = new mFont(23);
			mFont.number_orange = new mFont(24);
			mFont.bigNumber_red = new mFont(25);
			mFont.bigNumber_yellow = new mFont(26);
			mFont.bigNumber_green = new mFont(27);
			mFont.bigNumber_While = new mFont(28);
			mFont.bigNumber_blue = new mFont(29);
			mFont.bigNumber_orange = new mFont(30);
			mFont.bigNumber_black = new mFont(31);
			mFont.nameFontRed = mFont.tahoma_7b_red;
			mFont.nameFontYellow = mFont.tahoma_7_yellow;
			mFont.nameFontGreen = mFont.tahoma_7_green;
			mFont.tahoma_7_greySmall = mFont.tahoma_7_grey;
			mFont.tahoma_7b_yellowSmall2 = mFont.tahoma_7_yellow;
			mFont.tahoma_7b_green2Small = mFont.tahoma_7b_green2;
			mFont.tahoma_7_whiteSmall = mFont.tahoma_7_white;
			mFont.tahoma_7b_greenSmall = mFont.tahoma_7b_green;
			mFont.yAddFont = 1;
			bool flag2 = mGraphics.zoomLevel == 1;
			if (flag2)
			{
				mFont.yAddFont = -3;
			}
		}
	}

	// Token: 0x0600066D RID: 1645 RVA: 0x0006E206 File Offset: 0x0006C406
	public void setHeight(int height)
	{
		this.height = height;
	}

	// Token: 0x0600066E RID: 1646 RVA: 0x0006E210 File Offset: 0x0006C410
	public Color setColor(int rgb)
	{
		int num = rgb & 255;
		int num2 = rgb >> 8 & 255;
		int num3 = rgb >> 16 & 255;
		float b = (float)num / 256f;
		float g = (float)num2 / 256f;
		float r = (float)num3 / 256f;
		return new Color(r, g, b);
	}

	// Token: 0x0600066F RID: 1647 RVA: 0x0006E268 File Offset: 0x0006C468
	public Color bigColor(int id)
	{
		Color[] array = new Color[]
		{
			Color.red,
			Color.yellow,
			Color.green,
			Color.white,
			this.setColor(40404),
			Color.red,
			Color.black
		};
		return array[id - 25];
	}

	// Token: 0x06000670 RID: 1648 RVA: 0x0006E2E5 File Offset: 0x0006C4E5
	public void setColorByID(int ID)
	{
		this.color1 = this.setColor(mFont.colorJava[ID]);
		this.color2 = this.setColor(mFont.colorJava[ID]);
	}

	// Token: 0x06000671 RID: 1649 RVA: 0x0006E310 File Offset: 0x0006C510
	public void setTypePaint(mGraphics g, string st, int x, int y, int align, sbyte idFont)
	{
		sbyte colorByID = this.id;
		bool flag = idFont > 0;
		if (flag)
		{
			colorByID = idFont;
		}
		x--;
		bool flag2 = this.id > 24;
		if (flag2)
		{
			Color[] array = new Color[]
			{
				this.setColor(6029312),
				this.setColor(7169025),
				this.setColor(7680),
				this.setColor(0),
				this.setColor(9264),
				this.setColor(6029312)
			};
			this.color1 = array[(int)(this.id - 25)];
			this.color2 = array[(int)(this.id - 25)];
			this._drawString(g, st, x + 1, y, align);
			this._drawString(g, st, x - 1, y, align);
			this._drawString(g, st, x, y - 1, align);
			this._drawString(g, st, x, y + 1, align);
			this._drawString(g, st, x + 1, y + 1, align);
			this._drawString(g, st, x + 1, y - 1, align);
			this._drawString(g, st, x - 1, y - 1, align);
			this._drawString(g, st, x - 1, y + 1, align);
			this.color1 = this.bigColor((int)this.id);
			this.color2 = this.bigColor((int)this.id);
		}
		else
		{
			this.setColorByID((int)colorByID);
		}
		this._drawString(g, st, x, y - this.yAdd, align);
	}

	// Token: 0x06000672 RID: 1650 RVA: 0x0006E4B4 File Offset: 0x0006C6B4
	public Color setColorFont(sbyte id)
	{
		return this.setColor(mFont.colorJava[(int)id]);
	}

	// Token: 0x06000673 RID: 1651 RVA: 0x0006E4D4 File Offset: 0x0006C6D4
	public void drawString(mGraphics g, string st, int x, int y, int align)
	{
		bool flag = mGraphics.zoomLevel == 1;
		if (flag)
		{
			int length = st.Length;
			if (!true)
			{
			}
			int num;
			if (align != 0)
			{
				if (align != 1)
				{
					num = x - (this.getWidth(st) >> 1);
				}
				else
				{
					num = x - this.getWidth(st);
				}
			}
			else
			{
				num = x;
			}
			if (!true)
			{
			}
			int num2 = num;
			for (int i = 0; i < length; i++)
			{
				int num3 = this.strFont.IndexOf(st[i].ToString() + string.Empty);
				bool flag2 = num3 == -1;
				if (flag2)
				{
					num3 = 0;
				}
				bool flag3 = num3 > -1;
				if (flag3)
				{
					int x2 = this.fImages[num3][0];
					int num4 = this.fImages[num3][1];
					int w = this.fImages[num3][2];
					int num5 = this.fImages[num3][3];
					bool flag4 = num4 + num5 > this.imgFont.texture.height;
					if (flag4)
					{
						num4 -= this.imgFont.texture.height;
						x2 = this.imgFont.texture.width / 2;
					}
					g.drawRegion(this.imgFont, x2, num4, w, num5, 0, num2, y, 20);
				}
				num2 += this.fImages[num3][2] + this.space;
			}
		}
		else
		{
			this.setTypePaint(g, st, x, y, align, 0);
		}
	}

	// Token: 0x06000674 RID: 1652 RVA: 0x0006E654 File Offset: 0x0006C854
	public void drawStringBorder(mGraphics g, string st, int x, int y, int align)
	{
		bool flag = mGraphics.zoomLevel == 1;
		if (flag)
		{
			this.drawString(g, st, x, y, align);
		}
		else
		{
			this.setTypePaint(g, st, x, y, align, 0);
		}
	}

	// Token: 0x06000675 RID: 1653 RVA: 0x0006E694 File Offset: 0x0006C894
	public void drawStringBorder(mGraphics g, string st, int x, int y, int align, mFont font2)
	{
		bool flag = mGraphics.zoomLevel == 1;
		if (flag)
		{
			this.drawString(g, st, x, y, align, font2);
		}
		else
		{
			this.drawStringBd(g, st, x, y, align, font2);
		}
	}

	// Token: 0x06000676 RID: 1654 RVA: 0x0006E6D4 File Offset: 0x0006C8D4
	public void drawStringBd(mGraphics g, string st, int x, int y, int align, mFont font)
	{
		this.setTypePaint(g, st, x - 1, y - 1, align, 0);
		this.setTypePaint(g, st, x - 1, y + 1, align, 0);
		this.setTypePaint(g, st, x + 1, y - 1, align, 0);
		this.setTypePaint(g, st, x + 1, y + 1, align, 0);
		this.setTypePaint(g, st, x, y - 1, align, 0);
		this.setTypePaint(g, st, x, y + 1, align, 0);
		this.setTypePaint(g, st, x + 1, y, align, 0);
		this.setTypePaint(g, st, x - 1, y, align, 0);
		this.setTypePaint(g, st, x, y, align, 0);
	}

	// Token: 0x06000677 RID: 1655 RVA: 0x0006E784 File Offset: 0x0006C984
	public void drawString(mGraphics g, string st, int x, int y, int align, mFont font)
	{
		bool flag = mGraphics.zoomLevel == 1;
		if (flag)
		{
			int length = st.Length;
			if (!true)
			{
			}
			int num;
			if (align != 0)
			{
				if (align != 1)
				{
					num = x - (this.getWidth(st) >> 1);
				}
				else
				{
					num = x - this.getWidth(st);
				}
			}
			else
			{
				num = x;
			}
			if (!true)
			{
			}
			int num2 = num;
			for (int i = 0; i < length; i++)
			{
				int num3 = this.strFont.IndexOf(st[i]);
				bool flag2 = num3 == -1;
				if (flag2)
				{
					num3 = 0;
				}
				bool flag3 = num3 > -1;
				if (flag3)
				{
					int x2 = this.fImages[num3][0];
					int num4 = this.fImages[num3][1];
					int w = this.fImages[num3][2];
					int num5 = this.fImages[num3][3];
					bool flag4 = num4 + num5 > this.imgFont.texture.height;
					if (flag4)
					{
						num4 -= this.imgFont.texture.height;
						x2 = this.imgFont.texture.width / 2;
					}
					bool flag5 = !GameCanvas.lowGraphic && font != null;
					if (flag5)
					{
						g.drawRegion(font.imgFont, x2, num4, w, num5, 0, num2 + 1, y, 20);
						g.drawRegion(font.imgFont, x2, num4, w, num5, 0, num2, y + 1, 20);
					}
					g.drawRegion(this.imgFont, x2, num4, w, num5, 0, num2, y, 20);
				}
				num2 += this.fImages[num3][2] + this.space;
			}
		}
		else
		{
			this.setTypePaint(g, st, x, y + 1, align, font.id);
			this.setTypePaint(g, st, x, y, align, 0);
		}
	}

	// Token: 0x06000678 RID: 1656 RVA: 0x0006E95C File Offset: 0x0006CB5C
	public MyVector splitFontVector(string src, int lineWidth)
	{
		MyVector myVector = new MyVector();
		string text = string.Empty;
		for (int i = 0; i < src.Length; i++)
		{
			bool flag = src[i] == '\n' || src[i] == '\b';
			if (flag)
			{
				myVector.addElement(text);
				text = string.Empty;
			}
			else
			{
				text += src[i].ToString();
				bool flag2 = this.getWidth(text) > lineWidth;
				if (flag2)
				{
					int num = text.Length - 1;
					while (num >= 0 && text[num] != ' ')
					{
						num--;
					}
					bool flag3 = num < 0;
					if (flag3)
					{
						num = text.Length - 1;
					}
					myVector.addElement(text.Substring(0, num));
					i = i - (text.Length - num) + 1;
					text = string.Empty;
				}
				bool flag4 = i == src.Length - 1 && !text.Trim().Equals(string.Empty);
				if (flag4)
				{
					myVector.addElement(text);
				}
			}
		}
		return myVector;
	}

	// Token: 0x06000679 RID: 1657 RVA: 0x0006EA98 File Offset: 0x0006CC98
	public string splitFirst(string str)
	{
		string text = string.Empty;
		bool flag = false;
		for (int i = 0; i < str.Length; i++)
		{
			bool flag2 = !flag;
			if (flag2)
			{
				string text2 = str.Substring(i);
				text = ((!this.compare(text2, " ")) ? (text + text2) : (text + str[i].ToString() + "-"));
				flag = true;
			}
			else
			{
				bool flag3 = str[i] == ' ';
				if (flag3)
				{
					flag = false;
				}
			}
		}
		return text;
	}

	// Token: 0x0600067A RID: 1658 RVA: 0x0006EB30 File Offset: 0x0006CD30
	public string[] splitStrInLine(string src, int lineWidth)
	{
		ArrayList arrayList = this.splitStrInLineA(src, lineWidth);
		string[] array = new string[arrayList.Count];
		for (int i = 0; i < arrayList.Count; i++)
		{
			array[i] = (string)arrayList[i];
		}
		return array;
	}

	// Token: 0x0600067B RID: 1659 RVA: 0x0006EB80 File Offset: 0x0006CD80
	public ArrayList splitStrInLineA(string src, int lineWidth)
	{
		ArrayList arrayList = new ArrayList();
		int num = 0;
		int num2 = 0;
		int length = src.Length;
		bool flag = length < 5;
		ArrayList result;
		if (flag)
		{
			arrayList.Add(src);
			result = arrayList;
		}
		else
		{
			string text = string.Empty;
			try
			{
				for (;;)
				{
					bool flag2 = this.getWidthNotExactOf(text) < lineWidth;
					if (flag2)
					{
						text += src[num2].ToString();
						num2++;
						bool flag3 = src[num2] != '\n';
						if (flag3)
						{
							bool flag4 = num2 < length - 1;
							if (flag4)
							{
								continue;
							}
							num2 = length - 1;
						}
					}
					bool flag5 = num2 != length - 1 && src[num2 + 1] != ' ';
					if (flag5)
					{
						int num3 = num2;
						while (src[num2 + 1] != '\n' && (src[num2 + 1] != ' ' || src[num2] == ' ') && num2 != num)
						{
							num2--;
						}
						bool flag6 = num2 == num;
						if (flag6)
						{
							num2 = num3;
						}
					}
					string text2 = src.Substring(num, num2 + 1 - num);
					bool flag7 = text2[0] == '\n';
					if (flag7)
					{
						text2 = text2.Substring(1, text2.Length - 1);
					}
					bool flag8 = text2[text2.Length - 1] == '\n';
					if (flag8)
					{
						text2 = text2.Substring(0, text2.Length - 1);
					}
					arrayList.Add(text2);
					bool flag9 = num2 == length - 1;
					if (flag9)
					{
						break;
					}
					num = num2 + 1;
					while (num != length - 1 && src[num] == ' ')
					{
						num++;
					}
					bool flag10 = num == length - 1;
					if (flag10)
					{
						break;
					}
					num2 = num;
					text = string.Empty;
				}
			}
			catch (Exception ex)
			{
				Cout.LogWarning(string.Concat(new string[]
				{
					"EXCEPTION WHEN REAL SPLIT ",
					src,
					"\nend=",
					num2.ToString(),
					"\n",
					ex.Message,
					"\n",
					ex.StackTrace
				}));
				arrayList.Add(src);
			}
			result = arrayList;
		}
		return result;
	}

	// Token: 0x0600067C RID: 1660 RVA: 0x0006EDE0 File Offset: 0x0006CFE0
	public string[] splitFontArray(string src, int lineWidth)
	{
		MyVector myVector = this.splitFontVector(src, lineWidth);
		string[] array = new string[myVector.size()];
		for (int i = 0; i < myVector.size(); i++)
		{
			array[i] = (string)myVector.elementAt(i);
		}
		return array;
	}

	// Token: 0x0600067D RID: 1661 RVA: 0x0006EE30 File Offset: 0x0006D030
	public bool compare(string strSource, string str)
	{
		for (int i = 0; i < strSource.Length; i++)
		{
			bool flag = (string.Empty + strSource[i].ToString()).Equals(str);
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x0600067E RID: 1662 RVA: 0x0006EE84 File Offset: 0x0006D084
	public int getWidth(string s)
	{
		bool flag = mGraphics.zoomLevel == 1;
		int result;
		if (flag)
		{
			int num = 0;
			for (int i = 0; i < s.Length; i++)
			{
				int num2 = this.strFont.IndexOf(s[i]);
				bool flag2 = num2 == -1;
				if (flag2)
				{
					num2 = 0;
				}
				num += this.fImages[num2][2] + this.space;
			}
			result = num;
		}
		else
		{
			result = this.getWidthExactOf(s);
		}
		return result;
	}

	// Token: 0x0600067F RID: 1663 RVA: 0x0006EF04 File Offset: 0x0006D104
	public int getWidthExactOf(string s)
	{
		int result;
		try
		{
			result = (int)new GUIStyle
			{
				font = this.myFont
			}.CalcSize(new GUIContent(s)).x / mGraphics.zoomLevel;
		}
		catch (Exception ex)
		{
			Cout.LogError(string.Concat(new string[]
			{
				"GET WIDTH OF ",
				s,
				" FAIL.\n",
				ex.Message,
				"\n",
				ex.StackTrace
			}));
			result = this.getWidthNotExactOf(s);
		}
		return result;
	}

	// Token: 0x06000680 RID: 1664 RVA: 0x0006EFA0 File Offset: 0x0006D1A0
	public int getWidthNotExactOf(string s)
	{
		return s.Length * this.wO / mGraphics.zoomLevel;
	}

	// Token: 0x06000681 RID: 1665 RVA: 0x0006EFC8 File Offset: 0x0006D1C8
	public int getHeight()
	{
		bool flag = mGraphics.zoomLevel == 1;
		int result;
		if (flag)
		{
			result = this.height;
		}
		else
		{
			bool flag2 = this.height > 0;
			if (flag2)
			{
				result = this.height / mGraphics.zoomLevel;
			}
			else
			{
				GUIStyle guistyle = new GUIStyle();
				guistyle.font = this.myFont;
				try
				{
					this.height = (int)guistyle.CalcSize(new GUIContent("Adg")).y + 2;
				}
				catch (Exception ex)
				{
					Cout.LogError("FAIL GET HEIGHT " + ex.StackTrace);
					this.height = 20;
				}
				result = this.height / mGraphics.zoomLevel;
			}
		}
		return result;
	}

	// Token: 0x06000682 RID: 1666 RVA: 0x0006F088 File Offset: 0x0006D288
	public void _drawString(mGraphics g, string st, int x0, int y0, int align)
	{
		y0 += mFont.yAddFont;
		GUIStyle guistyle = new GUIStyle(GUI.skin.label);
		guistyle.font = this.myFont;
		float num = 0f;
		float num2 = 0f;
		switch (align)
		{
		case 0:
			num = (float)x0;
			num2 = (float)y0;
			guistyle.alignment = TextAnchor.UpperLeft;
			break;
		case 1:
			num = (float)(x0 - GameCanvas.w);
			num2 = (float)y0;
			guistyle.alignment = TextAnchor.UpperRight;
			break;
		case 2:
		case 3:
			num = (float)(x0 - GameCanvas.w / 2);
			num2 = (float)y0;
			guistyle.alignment = TextAnchor.UpperCenter;
			break;
		}
		guistyle.normal.textColor = this.color1;
		g.drawString(st, (int)num, (int)num2, guistyle);
	}

	// Token: 0x06000683 RID: 1667 RVA: 0x0006F148 File Offset: 0x0006D348
	public static string[] splitStringSv(string _text, string _searchStr)
	{
		int num = 0;
		int startIndex = 0;
		int length = _searchStr.Length;
		int num2 = _text.IndexOf(_searchStr, startIndex);
		while (num2 != -1)
		{
			startIndex = num2 + length;
			num2 = _text.IndexOf(_searchStr, startIndex);
			num++;
		}
		string[] array = new string[num + 1];
		int num3 = _text.IndexOf(_searchStr);
		int num4 = 0;
		int num5 = 0;
		while (num3 != -1)
		{
			array[num5] = _text.Substring(num4, num3 - num4);
			num4 = num3 + length;
			num3 = _text.IndexOf(_searchStr, num4);
			num5++;
		}
		array[num5] = _text.Substring(num4, _text.Length - num4);
		return array;
	}

	// Token: 0x06000684 RID: 1668 RVA: 0x0006F200 File Offset: 0x0006D400
	public void reloadImage()
	{
		bool flag = mGraphics.zoomLevel == 1;
		if (flag)
		{
			this.imgFont = GameCanvas.loadImage(this.pathImage);
		}
	}

	// Token: 0x06000685 RID: 1669 RVA: 0x0006F22D File Offset: 0x0006D42D
	public void freeImage()
	{
	}

	// Token: 0x04000BE8 RID: 3048
	public static int LEFT = 0;

	// Token: 0x04000BE9 RID: 3049
	public static int RIGHT = 1;

	// Token: 0x04000BEA RID: 3050
	public static int CENTER = 2;

	// Token: 0x04000BEB RID: 3051
	public static int RED = 0;

	// Token: 0x04000BEC RID: 3052
	public static int YELLOW = 1;

	// Token: 0x04000BED RID: 3053
	public static int GREEN = 2;

	// Token: 0x04000BEE RID: 3054
	public static int FATAL = 3;

	// Token: 0x04000BEF RID: 3055
	public static int MISS = 4;

	// Token: 0x04000BF0 RID: 3056
	public static int ORANGE = 5;

	// Token: 0x04000BF1 RID: 3057
	public static int ADDMONEY = 6;

	// Token: 0x04000BF2 RID: 3058
	public static int MISS_ME = 7;

	// Token: 0x04000BF3 RID: 3059
	public static int FATAL_ME = 8;

	// Token: 0x04000BF4 RID: 3060
	public static int HP = 9;

	// Token: 0x04000BF5 RID: 3061
	public static int MP = 10;

	// Token: 0x04000BF6 RID: 3062
	private int space;

	// Token: 0x04000BF7 RID: 3063
	private Image imgFont;

	// Token: 0x04000BF8 RID: 3064
	private string strFont;

	// Token: 0x04000BF9 RID: 3065
	private int[][] fImages;

	// Token: 0x04000BFA RID: 3066
	public static int yAddFont;

	// Token: 0x04000BFB RID: 3067
	public static int[] colorJava = new int[]
	{
		0,
		16711680,
		6520319,
		16777215,
		16755200,
		5449989,
		21285,
		52224,
		7386228,
		16771788,
		0,
		65535,
		21285,
		16776960,
		5592405,
		16742263,
		33023,
		8701737,
		15723503,
		7999781,
		16768815,
		14961237,
		4124899,
		4671303,
		16096312,
		16711680,
		16755200,
		52224,
		16777215,
		6520319,
		16096312
	};

	// Token: 0x04000BFC RID: 3068
	public static mFont gI;

	// Token: 0x04000BFD RID: 3069
	public static mFont tahoma_7b_red;

	// Token: 0x04000BFE RID: 3070
	public static mFont tahoma_7b_blue;

	// Token: 0x04000BFF RID: 3071
	public static mFont tahoma_7b_white;

	// Token: 0x04000C00 RID: 3072
	public static mFont tahoma_7b_yellow;

	// Token: 0x04000C01 RID: 3073
	public static mFont tahoma_7b_yellowSmall;

	// Token: 0x04000C02 RID: 3074
	public static mFont tahoma_7b_dark;

	// Token: 0x04000C03 RID: 3075
	public static mFont tahoma_7b_green2;

	// Token: 0x04000C04 RID: 3076
	public static mFont tahoma_7b_green;

	// Token: 0x04000C05 RID: 3077
	public static mFont tahoma_7b_focus;

	// Token: 0x04000C06 RID: 3078
	public static mFont tahoma_7b_unfocus;

	// Token: 0x04000C07 RID: 3079
	public static mFont tahoma_7;

	// Token: 0x04000C08 RID: 3080
	public static mFont tahoma_7_blue1;

	// Token: 0x04000C09 RID: 3081
	public static mFont tahoma_7_blue1Small;

	// Token: 0x04000C0A RID: 3082
	public static mFont tahoma_7_green2;

	// Token: 0x04000C0B RID: 3083
	public static mFont tahoma_7_yellow;

	// Token: 0x04000C0C RID: 3084
	public static mFont tahoma_7_grey;

	// Token: 0x04000C0D RID: 3085
	public static mFont tahoma_7_red;

	// Token: 0x04000C0E RID: 3086
	public static mFont tahoma_7_blue;

	// Token: 0x04000C0F RID: 3087
	public static mFont tahoma_7_green;

	// Token: 0x04000C10 RID: 3088
	public static mFont tahoma_7_white;

	// Token: 0x04000C11 RID: 3089
	public static mFont tahoma_8b;

	// Token: 0x04000C12 RID: 3090
	public static mFont number_yellow;

	// Token: 0x04000C13 RID: 3091
	public static mFont number_red;

	// Token: 0x04000C14 RID: 3092
	public static mFont number_green;

	// Token: 0x04000C15 RID: 3093
	public static mFont number_gray;

	// Token: 0x04000C16 RID: 3094
	public static mFont number_orange;

	// Token: 0x04000C17 RID: 3095
	public static mFont bigNumber_red;

	// Token: 0x04000C18 RID: 3096
	public static mFont bigNumber_While;

	// Token: 0x04000C19 RID: 3097
	public static mFont bigNumber_yellow;

	// Token: 0x04000C1A RID: 3098
	public static mFont bigNumber_green;

	// Token: 0x04000C1B RID: 3099
	public static mFont bigNumber_orange;

	// Token: 0x04000C1C RID: 3100
	public static mFont bigNumber_blue;

	// Token: 0x04000C1D RID: 3101
	public static mFont bigNumber_black;

	// Token: 0x04000C1E RID: 3102
	public static mFont nameFontRed;

	// Token: 0x04000C1F RID: 3103
	public static mFont nameFontYellow;

	// Token: 0x04000C20 RID: 3104
	public static mFont nameFontGreen;

	// Token: 0x04000C21 RID: 3105
	public static mFont tahoma_7_greySmall;

	// Token: 0x04000C22 RID: 3106
	public static mFont tahoma_7b_yellowSmall2;

	// Token: 0x04000C23 RID: 3107
	public static mFont tahoma_7b_green2Small;

	// Token: 0x04000C24 RID: 3108
	public static mFont tahoma_7_whiteSmall;

	// Token: 0x04000C25 RID: 3109
	public static mFont tahoma_7b_greenSmall;

	// Token: 0x04000C26 RID: 3110
	public Font myFont;

	// Token: 0x04000C27 RID: 3111
	private int height;

	// Token: 0x04000C28 RID: 3112
	private int wO;

	// Token: 0x04000C29 RID: 3113
	public Color color1 = Color.white;

	// Token: 0x04000C2A RID: 3114
	public Color color2 = Color.gray;

	// Token: 0x04000C2B RID: 3115
	public sbyte id;

	// Token: 0x04000C2C RID: 3116
	public int fstyle;

	// Token: 0x04000C2D RID: 3117
	public string st1 = "áàảãạăắằẳẵặâấầẩẫậéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵđÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴĐ";

	// Token: 0x04000C2E RID: 3118
	public string st2 = "¸µ¶·¹¨¾»¼½Æ©ÊÇÈÉËÐÌÎÏÑªÕÒÓÔÖÝ×ØÜÞãßáâä«èåæçé¬íêëìîóïñòô­øõö÷ùýúûüþ®¸µ¶·¹¡¾»¼½Æ¢ÊÇÈÉËÐÌÎÏÑ£ÕÒÓÔÖÝ×ØÜÞãßáâä¤èåæçé¥íêëìîóïñòô¦øõö÷ùýúûüþ§";

	// Token: 0x04000C2F RID: 3119
	public const string str = " 0123456789+-*='_?.,<>/[]{}!@#$%^&*():aáàảãạâấầẩẫậăắằẳẵặbcdđeéèẻẽẹêếềểễệfghiíìỉĩịjklmnoóòỏõọôốồổỗộơớờởỡợpqrstuúùủũụưứừửữựvxyýỳỷỹỵzwAÁÀẢÃẠĂẰẮẲẴẶÂẤẦẨẪẬBCDĐEÉÈẺẼẸÊẾỀỂỄỆFGHIÍÌỈĨỊJKLMNOÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢPQRSTUÚÙỦŨỤƯỨỪỬỮỰVXYÝỲỶỸỴZW";

	// Token: 0x04000C30 RID: 3120
	private int yAdd;

	// Token: 0x04000C31 RID: 3121
	private string pathImage;
}
using System;
using System.Collections;
using Assets.src.e;
using UnityEngine;

// Token: 0x02000089 RID: 137
public class mGraphics
{
	// Token: 0x06000687 RID: 1671 RVA: 0x0006F2AC File Offset: 0x0006D4AC
	private void cache(string key, Texture value)
	{
		bool flag = mGraphics.cachedTextures.Count > 400;
		if (flag)
		{
			mGraphics.cachedTextures.Clear();
		}
		bool flag2 = value.width * value.height < GameCanvas.w * GameCanvas.h;
		if (flag2)
		{
			mGraphics.cachedTextures.Add(key, value);
		}
	}

	// Token: 0x06000688 RID: 1672 RVA: 0x0006F30C File Offset: 0x0006D50C
	public void translate(int tx, int ty)
	{
		tx *= mGraphics.zoomLevel;
		ty *= mGraphics.zoomLevel;
		this.translateX += tx;
		this.translateY += ty;
		this.isTranslate = true;
		bool flag = this.translateX == 0 && this.translateY == 0;
		if (flag)
		{
			this.isTranslate = false;
		}
	}

	// Token: 0x06000689 RID: 1673 RVA: 0x0006F370 File Offset: 0x0006D570
	public void translate(float x, float y)
	{
		this.translateXf += x;
		this.translateYf += y;
		this.isTranslate = true;
		bool flag = this.translateXf == 0f && this.translateYf == 0f;
		if (flag)
		{
			this.isTranslate = false;
		}
	}

	// Token: 0x0600068A RID: 1674 RVA: 0x0006F3CC File Offset: 0x0006D5CC
	public int getTranslateX()
	{
		return this.translateX / mGraphics.zoomLevel;
	}

	// Token: 0x0600068B RID: 1675 RVA: 0x0006F3EC File Offset: 0x0006D5EC
	public int getTranslateY()
	{
		return this.translateY / mGraphics.zoomLevel + mGraphics.addYWhenOpenKeyBoard;
	}

	// Token: 0x0600068C RID: 1676 RVA: 0x0006F410 File Offset: 0x0006D610
	public void setClip(int x, int y, int w, int h)
	{
		x *= mGraphics.zoomLevel;
		y *= mGraphics.zoomLevel;
		w *= mGraphics.zoomLevel;
		h *= mGraphics.zoomLevel;
		this.clipTX = this.translateX;
		this.clipTY = this.translateY;
		this.clipX = x;
		this.clipY = y;
		this.clipW = w;
		this.clipH = h;
		this.isClip = true;
	}

	// Token: 0x0600068D RID: 1677 RVA: 0x0006F480 File Offset: 0x0006D680
	public int getClipX()
	{
		return GameScr.cmx;
	}

	// Token: 0x0600068E RID: 1678 RVA: 0x0006F498 File Offset: 0x0006D698
	public int getClipY()
	{
		return GameScr.cmy;
	}

	// Token: 0x0600068F RID: 1679 RVA: 0x0006F4B0 File Offset: 0x0006D6B0
	public int getClipWidth()
	{
		return GameScr.gW;
	}

	// Token: 0x06000690 RID: 1680 RVA: 0x0006F4C8 File Offset: 0x0006D6C8
	public int getClipHeight()
	{
		return GameScr.gH;
	}

	// Token: 0x06000691 RID: 1681 RVA: 0x0006F4E0 File Offset: 0x0006D6E0
	public void fillRect(int x, int y, int w, int h, int color, int alpha)
	{
		float alpha2 = 0.5f;
		this.setColor(color, alpha2);
		this.fillRect(x, y, w, h);
	}

	// Token: 0x06000692 RID: 1682 RVA: 0x0006F50C File Offset: 0x0006D70C
	public void drawLine(int x1, int y1, int x2, int y2)
	{
		x1 *= mGraphics.zoomLevel;
		y1 *= mGraphics.zoomLevel;
		x2 *= mGraphics.zoomLevel;
		y2 *= mGraphics.zoomLevel;
		bool flag = y1 == y2;
		if (flag)
		{
			bool flag2 = x1 > x2;
			if (flag2)
			{
				int num = x2;
				x2 = x1;
				x1 = num;
			}
			this.fillRect(x1, y1, x2 - x1, 1);
		}
		else
		{
			bool flag3 = x1 == x2;
			if (flag3)
			{
				bool flag4 = y1 > y2;
				if (flag4)
				{
					int num2 = y2;
					y2 = y1;
					y1 = num2;
				}
				this.fillRect(x1, y1, 1, y2 - y1);
			}
			else
			{
				bool flag5 = this.isTranslate;
				if (flag5)
				{
					x1 += this.translateX;
					y1 += this.translateY;
					x2 += this.translateX;
					y2 += this.translateY;
				}
				string key = "dl" + this.r.ToString() + this.g.ToString() + this.b.ToString();
				Texture2D texture2D = (Texture2D)mGraphics.cachedTextures[key];
				bool flag6 = texture2D == null;
				if (flag6)
				{
					texture2D = new Texture2D(1, 1);
					Color color = new Color(this.r, this.g, this.b);
					texture2D.SetPixel(0, 0, color);
					texture2D.Apply();
					this.cache(key, texture2D);
				}
				Vector2 vector = new Vector2((float)x1, (float)y1);
				Vector2 vector2 = new Vector2((float)x2, (float)y2);
				Vector2 vector3 = vector2 - vector;
				float num3 = 57.29578f * Mathf.Atan(vector3.y / vector3.x);
				bool flag7 = vector3.x < 0f;
				if (flag7)
				{
					num3 += 180f;
				}
				int num4 = (int)Mathf.Ceil(0f);
				GUIUtility.RotateAroundPivot(num3, vector);
				int num5 = 0;
				int num6 = 0;
				int num7 = 0;
				int num8 = 0;
				bool flag8 = this.isClip;
				if (flag8)
				{
					num5 = this.clipX;
					num6 = this.clipY;
					num7 = this.clipW;
					num8 = this.clipH;
					bool flag9 = this.isTranslate;
					if (flag9)
					{
						num5 += this.clipTX;
						num6 += this.clipTY;
					}
				}
				bool flag10 = this.isClip;
				if (flag10)
				{
					GUI.BeginGroup(new Rect((float)num5, (float)num6, (float)num7, (float)num8));
				}
				Graphics.DrawTexture(new Rect(vector.x - (float)num5, vector.y - (float)num4 - (float)num6, vector3.magnitude, 1f), texture2D);
				bool flag11 = this.isClip;
				if (flag11)
				{
					GUI.EndGroup();
				}
				GUIUtility.RotateAroundPivot(0f - num3, vector);
			}
		}
	}

	// Token: 0x06000693 RID: 1683 RVA: 0x0006F7B0 File Offset: 0x0006D9B0
	public Color setColorMiniMap(int rgb)
	{
		int num = rgb & 255;
		int num2 = rgb >> 8 & 255;
		int num3 = rgb >> 16 & 255;
		float num4 = (float)num / 256f;
		float num5 = (float)num2 / 256f;
		float num6 = (float)num3 / 256f;
		return new Color(num6, num5, num4);
	}

	// Token: 0x06000694 RID: 1684 RVA: 0x0006F808 File Offset: 0x0006DA08
	public float[] getRGB(Color cl)
	{
		float num = 256f * cl.r;
		float num2 = 256f * cl.g;
		float num3 = 256f * cl.b;
		return new float[]
		{
			num,
			num2,
			num3
		};
	}

	// Token: 0x06000695 RID: 1685 RVA: 0x0006F854 File Offset: 0x0006DA54
	public void drawRect(int x, int y, int w, int h)
	{
		int num = 1;
		this.fillRect(x, y, w, num);
		this.fillRect(x, y, num, h);
		this.fillRect(x + w, y, num, h + 1);
		this.fillRect(x, y + h, w + 1, num);
	}

	// Token: 0x06000696 RID: 1686 RVA: 0x0006F89C File Offset: 0x0006DA9C
	public void fillRect(int x, int y, int w, int h)
	{
		x *= mGraphics.zoomLevel;
		y *= mGraphics.zoomLevel;
		w *= mGraphics.zoomLevel;
		h *= mGraphics.zoomLevel;
		bool flag = w < 0 || h < 0;
		if (!flag)
		{
			bool flag2 = this.isTranslate;
			if (flag2)
			{
				x += this.translateX;
				y += this.translateY;
			}
			int width = 1;
			int height = 1;
			string key = string.Concat(new string[]
			{
				"fr",
				width.ToString(),
				height.ToString(),
				this.r.ToString(),
				this.g.ToString(),
				this.b.ToString(),
				this.a.ToString()
			});
			Texture2D texture2D = (Texture2D)mGraphics.cachedTextures[key];
			bool flag3 = texture2D == null;
			if (flag3)
			{
				texture2D = new Texture2D(width, height);
				Color color = new Color(this.r, this.g, this.b, this.a);
				texture2D.SetPixel(0, 0, color);
				texture2D.Apply();
				this.cache(key, texture2D);
			}
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			bool flag4 = this.isClip;
			if (flag4)
			{
				num = this.clipX;
				num2 = this.clipY;
				num3 = this.clipW;
				num4 = this.clipH;
				bool flag5 = this.isTranslate;
				if (flag5)
				{
					num += this.clipTX;
					num2 += this.clipTY;
				}
			}
			bool flag6 = this.isClip;
			if (flag6)
			{
				GUI.BeginGroup(new Rect((float)num, (float)num2, (float)num3, (float)num4));
			}
			GUI.DrawTexture(new Rect((float)(x - num), (float)(y - num2), (float)w, (float)h), texture2D);
			bool flag7 = this.isClip;
			if (flag7)
			{
				GUI.EndGroup();
			}
		}
	}

	// Token: 0x06000697 RID: 1687 RVA: 0x0006FA84 File Offset: 0x0006DC84
	public void setColor(int rgb)
	{
		int num = rgb & 255;
		int num2 = rgb >> 8 & 255;
		int num3 = rgb >> 16 & 255;
		this.b = (float)num / 256f;
		this.g = (float)num2 / 256f;
		this.r = (float)num3 / 256f;
		this.a = 255f;
	}

	// Token: 0x06000698 RID: 1688 RVA: 0x0006FAE4 File Offset: 0x0006DCE4
	public void setColor(Color color)
	{
		this.b = color.b;
		this.g = color.g;
		this.r = color.r;
	}

	// Token: 0x06000699 RID: 1689 RVA: 0x0006FB0C File Offset: 0x0006DD0C
	public void setBgColor(int rgb)
	{
		bool flag = rgb != this.currentBGColor;
		if (flag)
		{
			this.currentBGColor = rgb;
			int num = rgb & 255;
			int num2 = rgb >> 8 & 255;
			int num3 = rgb >> 16 & 255;
			this.b = (float)num / 256f;
			this.g = (float)num2 / 256f;
			this.r = (float)num3 / 256f;
			Main.main.GetComponent<Camera>().backgroundColor = new Color(this.r, this.g, this.b);
		}
	}

	// Token: 0x0600069A RID: 1690 RVA: 0x0006FBA4 File Offset: 0x0006DDA4
	public void drawString(string s, int x, int y, GUIStyle style)
	{
		x *= mGraphics.zoomLevel;
		y *= mGraphics.zoomLevel;
		bool flag = this.isTranslate;
		if (flag)
		{
			x += this.translateX;
			y += this.translateY;
		}
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		bool flag2 = this.isClip;
		if (flag2)
		{
			num = this.clipX;
			num2 = this.clipY;
			num3 = this.clipW;
			num4 = this.clipH;
			bool flag3 = this.isTranslate;
			if (flag3)
			{
				num += this.clipTX;
				num2 += this.clipTY;
			}
		}
		bool flag4 = this.isClip;
		if (flag4)
		{
			GUI.BeginGroup(new Rect((float)num, (float)num2, (float)num3, (float)num4));
		}
		GUI.Label(new Rect((float)(x - num), (float)(y - num2), ScaleGUI.WIDTH, 100f), s, style);
		bool flag5 = this.isClip;
		if (flag5)
		{
			GUI.EndGroup();
		}
	}

	// Token: 0x0600069B RID: 1691 RVA: 0x0006FC90 File Offset: 0x0006DE90
	public void setColor(int rgb, float alpha)
	{
		int num = rgb & 255;
		int num2 = rgb >> 8 & 255;
		int num3 = rgb >> 16 & 255;
		this.b = (float)num / 256f;
		this.g = (float)num2 / 256f;
		this.r = (float)num3 / 256f;
		this.a = alpha;
	}

	// Token: 0x0600069C RID: 1692 RVA: 0x0006FCEC File Offset: 0x0006DEEC
	public void drawString(string s, int x, int y, GUIStyle style, int w)
	{
		x *= mGraphics.zoomLevel;
		y *= mGraphics.zoomLevel;
		bool flag = this.isTranslate;
		if (flag)
		{
			x += this.translateX;
			y += this.translateY;
		}
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		bool flag2 = this.isClip;
		if (flag2)
		{
			num = this.clipX;
			num2 = this.clipY;
			num3 = this.clipW;
			num4 = this.clipH;
			bool flag3 = this.isTranslate;
			if (flag3)
			{
				num += this.clipTX;
				num2 += this.clipTY;
			}
		}
		bool flag4 = this.isClip;
		if (flag4)
		{
			GUI.BeginGroup(new Rect((float)num, (float)num2, (float)num3, (float)num4));
		}
		GUI.Label(new Rect((float)(x - num), (float)(y - num2 - 4), (float)w, 100f), s, style);
		bool flag5 = this.isClip;
		if (flag5)
		{
			GUI.EndGroup();
		}
	}

	// Token: 0x0600069D RID: 1693 RVA: 0x0006FDD8 File Offset: 0x0006DFD8
	private void UpdatePos(int anchor)
	{
		Vector2 vector = new Vector2(0f, 0f);
		if (anchor <= 17)
		{
			if (anchor <= 6)
			{
				if (anchor != 3)
				{
					if (anchor == 6)
					{
						vector = new Vector2(0f, (float)(Screen.height / 2));
					}
				}
				else
				{
					vector = new Vector2(this.size.x / 2f, this.size.y / 2f);
				}
			}
			else if (anchor != 10)
			{
				if (anchor == 17)
				{
					vector = new Vector2((float)(Screen.width / 2), 0f);
				}
			}
			else
			{
				vector = new Vector2((float)Screen.width, (float)(Screen.height / 2));
			}
		}
		else if (anchor <= 24)
		{
			if (anchor != 20)
			{
				if (anchor == 24)
				{
					vector = new Vector2((float)Screen.width, 0f);
				}
			}
			else
			{
				vector = new Vector2(0f, 0f);
			}
		}
		else if (anchor != 33)
		{
			if (anchor != 36)
			{
				if (anchor == 40)
				{
					vector = new Vector2((float)Screen.width, (float)Screen.height);
				}
			}
			else
			{
				vector = new Vector2(0f, (float)Screen.height);
			}
		}
		else
		{
			vector = new Vector2((float)(Screen.width / 2), (float)Screen.height);
		}
		this.pos = vector + this.relativePosition;
		this.rect = new Rect(this.pos.x - this.size.x * 0.5f, this.pos.y - this.size.y * 0.5f, this.size.x, this.size.y);
		this.pivot = new Vector2(this.rect.xMin + this.rect.width * 0.5f, this.rect.yMin + this.rect.height * 0.5f);
	}

	// Token: 0x0600069E RID: 1694 RVA: 0x0006FFF8 File Offset: 0x0006E1F8
	public void drawRegion(Image arg0, int x0, int y0, int w0, int h0, int arg5, int x, int y, int arg8)
	{
		bool flag = arg0 != null;
		if (flag)
		{
			x *= mGraphics.zoomLevel;
			y *= mGraphics.zoomLevel;
			x0 *= mGraphics.zoomLevel;
			y0 *= mGraphics.zoomLevel;
			w0 *= mGraphics.zoomLevel;
			h0 *= mGraphics.zoomLevel;
			this._drawRegion(arg0, (float)x0, (float)y0, w0, h0, arg5, x, y, arg8);
		}
	}

	// Token: 0x0600069F RID: 1695 RVA: 0x00070064 File Offset: 0x0006E264
	public void drawRegion(Image arg0, int x0, int y0, int w0, int h0, int arg5, float x, float y, int arg8)
	{
		bool flag = arg0 != null;
		if (flag)
		{
			x *= (float)mGraphics.zoomLevel;
			y *= (float)mGraphics.zoomLevel;
			x0 *= mGraphics.zoomLevel;
			y0 *= mGraphics.zoomLevel;
			w0 *= mGraphics.zoomLevel;
			h0 *= mGraphics.zoomLevel;
			this.__drawRegion(arg0, x0, y0, w0, h0, arg5, x, y, arg8);
		}
	}

	// Token: 0x060006A0 RID: 1696 RVA: 0x000700D0 File Offset: 0x0006E2D0
	public void drawRegion(Image arg0, int x0, int y0, int w0, int h0, int arg5, int x, int y, int arg8, bool isClip)
	{
		this.drawRegion(arg0, x0, y0, w0, h0, arg5, x, y, arg8);
	}

	// Token: 0x060006A1 RID: 1697 RVA: 0x000700F4 File Offset: 0x0006E2F4
	public void __drawRegion(Image image, int x0, int y0, int w, int h, int transform, float x, float y, int anchor)
	{
		bool flag = image == null;
		if (!flag)
		{
			bool flag2 = this.isTranslate;
			if (flag2)
			{
				x += (float)this.translateX;
				y += (float)this.translateY;
			}
			float num = (float)w;
			float num2 = (float)h;
			float num3 = 0f;
			float num4 = 0f;
			float num5 = 0f;
			float num6 = 0f;
			float num7 = 1f;
			float num8 = 0f;
			int num9 = 1;
			bool flag3 = (anchor & mGraphics.HCENTER) == mGraphics.HCENTER;
			if (flag3)
			{
				num5 -= num / 2f;
			}
			bool flag4 = (anchor & mGraphics.VCENTER) == mGraphics.VCENTER;
			if (flag4)
			{
				num6 -= num2 / 2f;
			}
			bool flag5 = (anchor & mGraphics.RIGHT) == mGraphics.RIGHT;
			if (flag5)
			{
				num5 -= num;
			}
			bool flag6 = (anchor & mGraphics.BOTTOM) == mGraphics.BOTTOM;
			if (flag6)
			{
				num6 -= num2;
			}
			x += num5;
			y += num6;
			int num10 = 0;
			int num11 = 0;
			bool flag7 = this.isClip;
			if (flag7)
			{
				num10 = this.clipX;
				int num12 = this.clipY;
				num11 = this.clipW;
				int num13 = this.clipH;
				bool flag8 = this.isTranslate;
				if (flag8)
				{
					num10 += this.clipTX;
					num12 += this.clipTY;
				}
				Rect r = new Rect(x, y, (float)w, (float)h);
				Rect r2 = new Rect((float)num10, (float)num12, (float)num11, (float)num13);
				Rect rect = this.intersectRect(r, r2);
				bool flag9 = rect.width <= 0f || rect.height <= 0f;
				if (flag9)
				{
					return;
				}
				num = rect.width;
				num2 = rect.height;
				num3 = rect.x - r.x;
				num4 = rect.y - r.y;
			}
			float num14 = 0f;
			float num15 = 0f;
			switch (transform)
			{
			case 1:
				num9 = -1;
				num15 += num2;
				break;
			case 2:
			{
				num14 += num;
				num7 = -1f;
				bool flag10 = this.isClip;
				if (flag10)
				{
					bool flag11 = (float)num10 > x;
					if (flag11)
					{
						num8 = 0f - num3;
					}
					else
					{
						bool flag12 = (float)(num10 + num11) < x + (float)w;
						if (flag12)
						{
							num8 = 0f - ((float)(num10 + num11) - x - (float)w);
						}
					}
				}
				break;
			}
			case 3:
				num9 = -1;
				num15 += num2;
				num7 = -1f;
				num14 += num;
				break;
			}
			int num16 = 0;
			int num17 = 0;
			bool flag13 = transform == 5 || transform == 6 || transform == 4 || transform == 7;
			if (flag13)
			{
				this.matrixBackup = GUI.matrix;
				this.size = new Vector2((float)w, (float)h);
				this.relativePosition = new Vector2(x, y);
				this.UpdatePos(3);
				if (transform != 5)
				{
					if (transform == 6)
					{
						this.UpdatePos(3);
					}
				}
				else
				{
					this.size = new Vector2((float)w, (float)h);
					this.UpdatePos(3);
				}
				switch (transform)
				{
				case 4:
				{
					GUIUtility.RotateAroundPivot(270f, this.pivot);
					num14 += num;
					num7 = -1f;
					bool flag14 = this.isClip;
					if (flag14)
					{
						bool flag15 = (float)num10 > x;
						if (flag15)
						{
							num8 = 0f - num3;
						}
						else
						{
							bool flag16 = (float)(num10 + num11) < x + (float)w;
							if (flag16)
							{
								num8 = 0f - ((float)(num10 + num11) - x - (float)w);
							}
						}
					}
					break;
				}
				case 5:
					GUIUtility.RotateAroundPivot(90f, this.pivot);
					break;
				case 6:
					GUIUtility.RotateAroundPivot(270f, this.pivot);
					break;
				case 7:
					GUIUtility.RotateAroundPivot(270f, this.pivot);
					num9 = -1;
					num15 += num2;
					break;
				}
			}
			Graphics.DrawTexture(new Rect(x + num3 + num14 + (float)num16, y + num4 + (float)num17 + num15, num * num7, num2 * (float)num9), image.texture, new Rect(((float)x0 + num3 + num8) / (float)image.texture.width, ((float)image.texture.height - num2 - ((float)y0 + num4)) / (float)image.texture.height, num / (float)image.texture.width, num2 / (float)image.texture.height), 0, 0, 0, 0);
			bool flag17 = transform == 5 || transform == 6 || transform == 4 || transform == 7;
			if (flag17)
			{
				GUI.matrix = this.matrixBackup;
			}
		}
	}

	// Token: 0x060006A2 RID: 1698 RVA: 0x000705C8 File Offset: 0x0006E7C8
	public void _drawRegion(Image image, float x0, float y0, int w, int h, int transform, int x, int y, int anchor)
	{
		bool flag = image == null;
		if (!flag)
		{
			bool flag2 = this.isTranslate;
			if (flag2)
			{
				x += this.translateX;
				y += this.translateY;
			}
			float num = (float)w;
			float num2 = (float)h;
			float num3 = 0f;
			float num4 = 0f;
			float num5 = 0f;
			float num6 = 0f;
			float num7 = 1f;
			float num8 = 0f;
			int num9 = 1;
			bool flag3 = (anchor & mGraphics.HCENTER) == mGraphics.HCENTER;
			if (flag3)
			{
				num5 -= num / 2f;
			}
			bool flag4 = (anchor & mGraphics.VCENTER) == mGraphics.VCENTER;
			if (flag4)
			{
				num6 -= num2 / 2f;
			}
			bool flag5 = (anchor & mGraphics.RIGHT) == mGraphics.RIGHT;
			if (flag5)
			{
				num5 -= num;
			}
			bool flag6 = (anchor & mGraphics.BOTTOM) == mGraphics.BOTTOM;
			if (flag6)
			{
				num6 -= num2;
			}
			x += (int)num5;
			y += (int)num6;
			int num10 = 0;
			int num11 = 0;
			bool flag7 = this.isClip;
			if (flag7)
			{
				num10 = this.clipX;
				int num12 = this.clipY;
				num11 = this.clipW;
				int num13 = this.clipH;
				bool flag8 = this.isTranslate;
				if (flag8)
				{
					num10 += this.clipTX;
					num12 += this.clipTY;
				}
				Rect r = new Rect((float)x, (float)y, (float)w, (float)h);
				Rect r2 = new Rect((float)num10, (float)num12, (float)num11, (float)num13);
				Rect rect = this.intersectRect(r, r2);
				bool flag9 = rect.width <= 0f || rect.height <= 0f;
				if (flag9)
				{
					return;
				}
				num = rect.width;
				num2 = rect.height;
				num3 = rect.x - r.x;
				num4 = rect.y - r.y;
			}
			float num14 = 0f;
			float num15 = 0f;
			switch (transform)
			{
			case 1:
				num9 = -1;
				num15 += num2;
				break;
			case 2:
			{
				num14 += num;
				num7 = -1f;
				bool flag10 = this.isClip;
				if (flag10)
				{
					bool flag11 = num10 > x;
					if (flag11)
					{
						num8 = 0f - num3;
					}
					else
					{
						bool flag12 = num10 + num11 < x + w;
						if (flag12)
						{
							num8 = (float)(-(float)(num10 + num11 - x - w));
						}
					}
				}
				break;
			}
			case 3:
				num9 = -1;
				num15 += num2;
				num7 = -1f;
				num14 += num;
				break;
			}
			int num16 = 0;
			int num17 = 0;
			bool flag13 = transform == 5 || transform == 6 || transform == 4 || transform == 7;
			if (flag13)
			{
				this.matrixBackup = GUI.matrix;
				this.size = new Vector2((float)w, (float)h);
				this.relativePosition = new Vector2((float)x, (float)y);
				this.UpdatePos(3);
				if (transform != 5)
				{
					if (transform == 6)
					{
						this.UpdatePos(3);
					}
				}
				else
				{
					this.size = new Vector2((float)w, (float)h);
					this.UpdatePos(3);
				}
				switch (transform)
				{
				case 4:
				{
					GUIUtility.RotateAroundPivot(270f, this.pivot);
					num14 += num;
					num7 = -1f;
					bool flag14 = this.isClip;
					if (flag14)
					{
						bool flag15 = num10 > x;
						if (flag15)
						{
							num8 = 0f - num3;
						}
						else
						{
							bool flag16 = num10 + num11 < x + w;
							if (flag16)
							{
								num8 = (float)(-(float)(num10 + num11 - x - w));
							}
						}
					}
					break;
				}
				case 5:
					GUIUtility.RotateAroundPivot(90f, this.pivot);
					break;
				case 6:
					GUIUtility.RotateAroundPivot(270f, this.pivot);
					break;
				case 7:
					GUIUtility.RotateAroundPivot(270f, this.pivot);
					num9 = -1;
					num15 += num2;
					break;
				}
			}
			Graphics.DrawTexture(new Rect((float)x + num3 + num14 + (float)num16, (float)y + num4 + (float)num17 + num15, num * num7, num2 * (float)num9), image.texture, new Rect((x0 + num3 + num8) / (float)image.texture.width, ((float)image.texture.height - num2 - (y0 + num4)) / (float)image.texture.height, num / (float)image.texture.width, num2 / (float)image.texture.height), 0, 0, 0, 0);
			bool flag17 = transform == 5 || transform == 6 || transform == 4 || transform == 7;
			if (flag17)
			{
				GUI.matrix = this.matrixBackup;
			}
		}
	}

	// Token: 0x060006A3 RID: 1699 RVA: 0x00070A8C File Offset: 0x0006EC8C
	public void drawRegionGui(Image image, float x0, float y0, int w, int h, int transform, float x, float y, int anchor)
	{
		GUI.color = this.setColorMiniMap(807956);
		x *= (float)mGraphics.zoomLevel;
		y *= (float)mGraphics.zoomLevel;
		x0 *= (float)mGraphics.zoomLevel;
		y0 *= (float)mGraphics.zoomLevel;
		w *= mGraphics.zoomLevel;
		h *= mGraphics.zoomLevel;
	}

	// Token: 0x060006A4 RID: 1700 RVA: 0x00070AEC File Offset: 0x0006ECEC
	public void drawRegion2(Image image, float x0, float y0, int w, int h, int transform, int x, int y, int anchor)
	{
		GUI.color = image.colorBlend;
		bool flag = this.isTranslate;
		if (flag)
		{
			x += this.translateX;
			y += this.translateY;
		}
		string key = string.Concat(new string[]
		{
			"dg",
			x0.ToString(),
			y0.ToString(),
			w.ToString(),
			h.ToString(),
			transform.ToString(),
			image.GetHashCode().ToString()
		});
		Texture2D texture2D = (Texture2D)mGraphics.cachedTextures[key];
		bool flag2 = texture2D == null;
		if (flag2)
		{
			Image image2 = Image.createImage(image, (int)x0, (int)y0, w, h, transform);
			texture2D = image2.texture;
			this.cache(key, texture2D);
		}
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		float num5 = (float)w;
		float num6 = (float)h;
		float num7 = 0f;
		float num8 = 0f;
		bool flag3 = (anchor & mGraphics.HCENTER) == mGraphics.HCENTER;
		if (flag3)
		{
			num7 -= num5 / 2f;
		}
		bool flag4 = (anchor & mGraphics.VCENTER) == mGraphics.VCENTER;
		if (flag4)
		{
			num8 -= num6 / 2f;
		}
		bool flag5 = (anchor & mGraphics.RIGHT) == mGraphics.RIGHT;
		if (flag5)
		{
			num7 -= num5;
		}
		bool flag6 = (anchor & mGraphics.BOTTOM) == mGraphics.BOTTOM;
		if (flag6)
		{
			num8 -= num6;
		}
		x += (int)num7;
		y += (int)num8;
		bool flag7 = this.isClip;
		if (flag7)
		{
			num = this.clipX;
			num2 = this.clipY;
			num3 = this.clipW;
			num4 = this.clipH;
			bool flag8 = this.isTranslate;
			if (flag8)
			{
				num += this.clipTX;
				num2 += this.clipTY;
			}
		}
		bool flag9 = this.isClip;
		if (flag9)
		{
			GUI.BeginGroup(new Rect((float)num, (float)num2, (float)num3, (float)num4));
		}
		GUI.DrawTexture(new Rect((float)(x - num), (float)(y - num2), (float)w, (float)h), texture2D);
		bool flag10 = this.isClip;
		if (flag10)
		{
			GUI.EndGroup();
		}
		GUI.color = new Color(1f, 1f, 1f, 1f);
	}

	// Token: 0x060006A5 RID: 1701 RVA: 0x00070D3C File Offset: 0x0006EF3C
	public void drawImagaByDrawTexture(Image image, float x, float y)
	{
		x *= (float)mGraphics.zoomLevel;
		y *= (float)mGraphics.zoomLevel;
		GUI.DrawTexture(new Rect(x + (float)this.translateX, y + (float)this.translateY, (float)image.getRealImageWidth(), (float)image.getRealImageHeight()), image.texture);
	}

	// Token: 0x060006A6 RID: 1702 RVA: 0x00070D90 File Offset: 0x0006EF90
	public void drawImage(Image image, int x, int y, int anchor)
	{
		bool flag = image != null;
		if (flag)
		{
			this.drawRegion(image, 0, 0, mGraphics.getImageWidth(image), mGraphics.getImageHeight(image), 0, x, y, anchor);
		}
	}

	// Token: 0x060006A7 RID: 1703 RVA: 0x00070DC4 File Offset: 0x0006EFC4
	public void drawImageFog(Image image, int x, int y, int anchor)
	{
		bool flag = image != null;
		if (flag)
		{
			this.drawRegion(image, 0, 0, image.texture.width, image.texture.height, 0, x, y, anchor);
		}
	}

	// Token: 0x060006A8 RID: 1704 RVA: 0x00070E04 File Offset: 0x0006F004
	public void drawImage(Image image, int x, int y)
	{
		bool flag = image != null;
		if (flag)
		{
			this.drawRegion(image, 0, 0, mGraphics.getImageWidth(image), mGraphics.getImageHeight(image), 0, x, y, mGraphics.TOP | mGraphics.LEFT);
		}
	}

	// Token: 0x060006A9 RID: 1705 RVA: 0x00070E40 File Offset: 0x0006F040
	public void drawImage(Image image, float x, float y, int anchor)
	{
		bool flag = image != null;
		if (flag)
		{
			this.drawRegion(image, 0, 0, mGraphics.getImageWidth(image), mGraphics.getImageHeight(image), 0, x, y, anchor);
		}
	}

	// Token: 0x060006AA RID: 1706 RVA: 0x00070E73 File Offset: 0x0006F073
	public void drawRoundRect(int x, int y, int w, int h, int arcWidth, int arcHeight)
	{
		this.drawRect(x, y, w, h);
	}

	// Token: 0x060006AB RID: 1707 RVA: 0x00070E82 File Offset: 0x0006F082
	public void fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)
	{
		this.fillRect(x, y, width, height);
	}

	// Token: 0x060006AC RID: 1708 RVA: 0x00070E91 File Offset: 0x0006F091
	public void reset()
	{
		this.isClip = false;
		this.isTranslate = false;
		this.translateX = 0;
		this.translateY = 0;
	}

	// Token: 0x060006AD RID: 1709 RVA: 0x00070EB0 File Offset: 0x0006F0B0
	public Rect intersectRect(Rect r1, Rect r2)
	{
		float num = r1.x;
		float num2 = r1.y;
		float x = r2.x;
		float y = r2.y;
		float num3 = num;
		num3 += r1.width;
		float num4 = num2;
		num4 += r1.height;
		float num5 = x;
		num5 += r2.width;
		float num6 = y;
		num6 += r2.height;
		bool flag = num < x;
		if (flag)
		{
			num = x;
		}
		bool flag2 = num2 < y;
		if (flag2)
		{
			num2 = y;
		}
		bool flag3 = num3 > num5;
		if (flag3)
		{
			num3 = num5;
		}
		bool flag4 = num4 > num6;
		if (flag4)
		{
			num4 = num6;
		}
		num3 -= num;
		num4 -= num2;
		bool flag5 = num3 < -30000f;
		if (flag5)
		{
			num3 = -30000f;
		}
		bool flag6 = num4 < -30000f;
		if (flag6)
		{
			num4 = -30000f;
		}
		return new Rect(num, num2, (float)((int)num3), (float)((int)num4));
	}

	// Token: 0x060006AE RID: 1710 RVA: 0x00070FAC File Offset: 0x0006F1AC
	public void drawImageScale(Image image, int x, int y, int w, int h, int tranform)
	{
		GUI.color = Color.red;
		x *= mGraphics.zoomLevel;
		y *= mGraphics.zoomLevel;
		w *= mGraphics.zoomLevel;
		h *= mGraphics.zoomLevel;
		bool flag = image != null;
		if (flag)
		{
			Graphics.DrawTexture(new Rect((float)(x + this.translateX), (float)(y + this.translateY), (float)((tranform != 0) ? (-(float)w) : w), (float)h), image.texture);
		}
	}

	// Token: 0x060006AF RID: 1711 RVA: 0x00071028 File Offset: 0x0006F228
	public void drawImageSimple(Image image, int x, int y)
	{
		x *= mGraphics.zoomLevel;
		y *= mGraphics.zoomLevel;
		bool flag = image != null;
		if (flag)
		{
			Graphics.DrawTexture(new Rect((float)x, (float)y, (float)image.w, (float)image.h), image.texture);
		}
	}

	// Token: 0x060006B0 RID: 1712 RVA: 0x00071078 File Offset: 0x0006F278
	public static int getImageWidth(Image image)
	{
		return image.getWidth();
	}

	// Token: 0x060006B1 RID: 1713 RVA: 0x00071090 File Offset: 0x0006F290
	public static int getImageHeight(Image image)
	{
		return image.getHeight();
	}

	// Token: 0x060006B2 RID: 1714 RVA: 0x000710A8 File Offset: 0x0006F2A8
	public static bool isNotTranColor(Color color)
	{
		bool flag = color == Color.clear || color == mGraphics.transParentColor;
		return !flag;
	}

	// Token: 0x060006B3 RID: 1715 RVA: 0x000710E0 File Offset: 0x0006F2E0
	public static Image blend(Image img0, float level, int rgb)
	{
		int num = rgb & 255;
		int num2 = rgb >> 8 & 255;
		int num3 = rgb >> 16 & 255;
		float num4 = (float)num / 256f;
		float num5 = (float)num2 / 256f;
		float num6 = (float)num3 / 256f;
		Color color = new Color(num6, num5, num4);
		Color[] pixels = img0.texture.GetPixels();
		float num7 = color.r;
		float num8 = color.g;
		float num9 = color.b;
		for (int i = 0; i < pixels.Length; i++)
		{
			Color color2 = pixels[i];
			bool flag = mGraphics.isNotTranColor(color2);
			if (flag)
			{
				float num10 = (num7 - color2.r) * level + color2.r;
				float num11 = (num8 - color2.g) * level + color2.g;
				float num12 = (num9 - color2.b) * level + color2.b;
				bool flag2 = num10 > 255f;
				if (flag2)
				{
					num10 = 255f;
				}
				bool flag3 = num10 < 0f;
				if (flag3)
				{
					num10 = 0f;
				}
				bool flag4 = num11 > 255f;
				if (flag4)
				{
					num11 = 255f;
				}
				bool flag5 = num11 < 0f;
				if (flag5)
				{
					num11 = 0f;
				}
				bool flag6 = num12 < 0f;
				if (flag6)
				{
					num12 = 0f;
				}
				bool flag7 = num12 > 255f;
				if (flag7)
				{
					num12 = 255f;
				}
				pixels[i].r = num10;
				pixels[i].g = num11;
				pixels[i].b = num12;
			}
		}
		Image image = Image.createImage(img0.getRealImageWidth(), img0.getRealImageHeight());
		image.texture.SetPixels(pixels);
		Image.setTextureQuality(image.texture);
		image.texture.Apply();
		Cout.LogError2("BLEND ----------------------------------------------------");
		return image;
	}

	// Token: 0x060006B4 RID: 1716 RVA: 0x000712EC File Offset: 0x0006F4EC
	public static Color setColorObj(int rgb)
	{
		int num = rgb & 255;
		int num2 = rgb >> 8 & 255;
		int num3 = rgb >> 16 & 255;
		float num4 = (float)num / 256f;
		float num5 = (float)num2 / 256f;
		float num6 = (float)num3 / 256f;
		return new Color(num6, num5, num4);
	}

	// Token: 0x060006B5 RID: 1717 RVA: 0x00071344 File Offset: 0x0006F544
	public void fillTrans(Image imgTrans, int x, int y, int w, int h)
	{
		this.setColor(0, 0.5f);
		this.fillRect(x * mGraphics.zoomLevel, y * mGraphics.zoomLevel, w * mGraphics.zoomLevel, h * mGraphics.zoomLevel);
	}

	// Token: 0x060006B6 RID: 1718 RVA: 0x0007137C File Offset: 0x0006F57C
	public static int blendColor(float level, int color, int colorBlend)
	{
		Color color2 = mGraphics.setColorObj(colorBlend);
		float num = color2.r * 255f;
		float num2 = color2.g * 255f;
		float num3 = color2.b * 255f;
		Color color3 = mGraphics.setColorObj(color);
		float num4 = (num + color3.r) * level + color3.r;
		float num5 = (num2 + color3.g) * level + color3.g;
		float num6 = (num3 + color3.b) * level + color3.b;
		bool flag = num4 > 255f;
		if (flag)
		{
			num4 = 255f;
		}
		bool flag2 = num4 < 0f;
		if (flag2)
		{
			num4 = 0f;
		}
		bool flag3 = num5 > 255f;
		if (flag3)
		{
			num5 = 255f;
		}
		bool flag4 = num5 < 0f;
		if (flag4)
		{
			num5 = 0f;
		}
		bool flag5 = num6 < 0f;
		if (flag5)
		{
			num6 = 0f;
		}
		bool flag6 = num6 > 255f;
		if (flag6)
		{
			num6 = 255f;
		}
		return (int)num6 & 255 + ((int)num5 << 8) & 255 + ((int)num4 << 16) & 255;
	}

	// Token: 0x060006B7 RID: 1719 RVA: 0x000714B8 File Offset: 0x0006F6B8
	public static int getIntByColor(Color cl)
	{
		float num = cl.r * 255f;
		float num2 = cl.b * 255f;
		float num3 = cl.g * 255f;
		return ((int)num & 255) << 16 | ((int)num3 & 255) << 8 | ((int)num2 & 255);
	}

	// Token: 0x060006B8 RID: 1720 RVA: 0x00071510 File Offset: 0x0006F710
	public static int getRealImageWidth(Image img)
	{
		return img.w;
	}

	// Token: 0x060006B9 RID: 1721 RVA: 0x00071528 File Offset: 0x0006F728
	public static int getRealImageHeight(Image img)
	{
		return img.h;
	}

	// Token: 0x060006BA RID: 1722 RVA: 0x00071540 File Offset: 0x0006F740
	public void fillArg(int i, int j, int k, int l, int m, int n)
	{
		this.fillRect(i * mGraphics.zoomLevel, j * mGraphics.zoomLevel, k * mGraphics.zoomLevel, l * mGraphics.zoomLevel);
	}

	// Token: 0x060006BB RID: 1723 RVA: 0x00071568 File Offset: 0x0006F768
	public void CreateLineMaterial()
	{
		bool flag = !this.lineMaterial;
		if (flag)
		{
			this.lineMaterial = new Material("Shader \"Lines/Colored Blended\" {SubShader { Pass {  Blend SrcAlpha OneMinusSrcAlpha  ZWrite Off Cull Off Fog { Mode Off }  BindChannels { Bind \"vertex\", vertex Bind \"color\", color }} } }");
			this.lineMaterial.hideFlags = HideFlags.HideAndDontSave;
			this.lineMaterial.shader.hideFlags = HideFlags.HideAndDontSave;
		}
	}

	// Token: 0x060006BC RID: 1724 RVA: 0x000715BC File Offset: 0x0006F7BC
	public void drawlineGL(MyVector totalLine)
	{
		this.lineMaterial.SetPass(0);
		GL.PushMatrix();
		GL.Begin(1);
		for (int i = 0; i < totalLine.size(); i++)
		{
			mLine mLine = (mLine)totalLine.elementAt(i);
			GL.Color(new Color(mLine.r, mLine.g, mLine.b, mLine.a));
			int num = mLine.x1 * mGraphics.zoomLevel;
			int num2 = mLine.y1 * mGraphics.zoomLevel;
			int num3 = mLine.x2 * mGraphics.zoomLevel;
			int num4 = mLine.y2 * mGraphics.zoomLevel;
			bool flag = this.isTranslate;
			if (flag)
			{
				num += this.translateX;
				num2 += this.translateY;
				num3 += this.translateX;
				num4 += this.translateY;
			}
			for (int j = 0; j < mGraphics.zoomLevel; j++)
			{
				GL.Vertex(new Vector2((float)(num + j), (float)(num2 + j)));
				GL.Vertex(new Vector2((float)(num3 + j), (float)(num4 + j)));
				bool flag2 = j > 0;
				if (flag2)
				{
					GL.Vertex(new Vector2((float)(num + j), (float)num2));
					GL.Vertex(new Vector2((float)(num3 + j), (float)num4));
					GL.Vertex(new Vector2((float)num, (float)(num2 + j)));
					GL.Vertex(new Vector2((float)num3, (float)(num4 + j)));
				}
			}
		}
		GL.End();
		GL.PopMatrix();
		totalLine.removeAllElements();
	}

	// Token: 0x060006BD RID: 1725 RVA: 0x00071778 File Offset: 0x0006F978
	public void drawLine(mGraphics g, int x, int y, int xTo, int yTo, int nLine, int color)
	{
		MyVector myVector = new MyVector();
		for (int i = 0; i < nLine; i++)
		{
			myVector.addElement(new mLine(x, y, xTo + i, yTo + i, color));
		}
		g.drawlineGL(myVector);
	}

	// Token: 0x060006BE RID: 1726 RVA: 0x000717BF File Offset: 0x0006F9BF
	internal void drawRegion(Small img, int p1, int p2, int p3, int p4, int transform, int x, int y, int anchor)
	{
		throw new NotImplementedException();
	}

	// Token: 0x04000C32 RID: 3122
	public static int HCENTER = 1;

	// Token: 0x04000C33 RID: 3123
	public static int VCENTER = 2;

	// Token: 0x04000C34 RID: 3124
	public static int LEFT = 4;

	// Token: 0x04000C35 RID: 3125
	public static int RIGHT = 8;

	// Token: 0x04000C36 RID: 3126
	public static int TOP = 16;

	// Token: 0x04000C37 RID: 3127
	public static int BOTTOM = 32;

	// Token: 0x04000C38 RID: 3128
	private float r;

	// Token: 0x04000C39 RID: 3129
	private float g;

	// Token: 0x04000C3A RID: 3130
	private float b;

	// Token: 0x04000C3B RID: 3131
	private float a;

	// Token: 0x04000C3C RID: 3132
	public int clipX;

	// Token: 0x04000C3D RID: 3133
	public int clipY;

	// Token: 0x04000C3E RID: 3134
	public int clipW;

	// Token: 0x04000C3F RID: 3135
	public int clipH;

	// Token: 0x04000C40 RID: 3136
	private bool isClip;

	// Token: 0x04000C41 RID: 3137
	private bool isTranslate = true;

	// Token: 0x04000C42 RID: 3138
	private int translateX;

	// Token: 0x04000C43 RID: 3139
	private int translateY;

	// Token: 0x04000C44 RID: 3140
	private float translateXf;

	// Token: 0x04000C45 RID: 3141
	private float translateYf;

	// Token: 0x04000C46 RID: 3142
	public static int zoomLevel = 1;

	// Token: 0x04000C47 RID: 3143
	public const int BASELINE = 64;

	// Token: 0x04000C48 RID: 3144
	public const int SOLID = 0;

	// Token: 0x04000C49 RID: 3145
	public const int DOTTED = 1;

	// Token: 0x04000C4A RID: 3146
	public const int TRANS_MIRROR = 2;

	// Token: 0x04000C4B RID: 3147
	public const int TRANS_MIRROR_ROT180 = 1;

	// Token: 0x04000C4C RID: 3148
	public const int TRANS_MIRROR_ROT270 = 4;

	// Token: 0x04000C4D RID: 3149
	public const int TRANS_MIRROR_ROT90 = 7;

	// Token: 0x04000C4E RID: 3150
	public const int TRANS_NONE = 0;

	// Token: 0x04000C4F RID: 3151
	public const int TRANS_ROT180 = 3;

	// Token: 0x04000C50 RID: 3152
	public const int TRANS_ROT270 = 6;

	// Token: 0x04000C51 RID: 3153
	public const int TRANS_ROT90 = 5;

	// Token: 0x04000C52 RID: 3154
	public static Hashtable cachedTextures = new Hashtable();

	// Token: 0x04000C53 RID: 3155
	public static int addYWhenOpenKeyBoard;

	// Token: 0x04000C54 RID: 3156
	private int clipTX;

	// Token: 0x04000C55 RID: 3157
	private int clipTY;

	// Token: 0x04000C56 RID: 3158
	private int currentBGColor;

	// Token: 0x04000C57 RID: 3159
	private Vector2 pos = new Vector2(0f, 0f);

	// Token: 0x04000C58 RID: 3160
	private Rect rect;

	// Token: 0x04000C59 RID: 3161
	private Matrix4x4 matrixBackup;

	// Token: 0x04000C5A RID: 3162
	private Vector2 pivot;

	// Token: 0x04000C5B RID: 3163
	public Vector2 size = new Vector2(128f, 128f);

	// Token: 0x04000C5C RID: 3164
	public Vector2 relativePosition = new Vector2(0f, 0f);

	// Token: 0x04000C5D RID: 3165
	public Color clTrans;

	// Token: 0x04000C5E RID: 3166
	public static Color transParentColor = new Color(1f, 1f, 1f, 0f);

	// Token: 0x04000C5F RID: 3167
	private Material lineMaterial;
}
using System;

// Token: 0x0200008A RID: 138
public class mLine
{
	// Token: 0x060006C1 RID: 1729 RVA: 0x00071885 File Offset: 0x0006FA85
	public mLine(int x1, int y1, int x2, int y2, int cl)
	{
		this.x1 = x1;
		this.y1 = y1;
		this.x2 = x2;
		this.y2 = y2;
		this.setColor(cl);
	}

	// Token: 0x060006C2 RID: 1730 RVA: 0x000718B8 File Offset: 0x0006FAB8
	public void setColor(int rgb)
	{
		int num = rgb & 255;
		int num2 = rgb >> 8 & 255;
		int num3 = rgb >> 16 & 255;
		this.b = (float)num / 256f;
		this.g = (float)num2 / 256f;
		this.r = (float)num3 / 256f;
		this.a = 255f;
	}

	// Token: 0x04000C60 RID: 3168
	public int x1;

	// Token: 0x04000C61 RID: 3169
	public int x2;

	// Token: 0x04000C62 RID: 3170
	public int y1;

	// Token: 0x04000C63 RID: 3171
	public int y2;

	// Token: 0x04000C64 RID: 3172
	public float r;

	// Token: 0x04000C65 RID: 3173
	public float b;

	// Token: 0x04000C66 RID: 3174
	public float g;

	// Token: 0x04000C67 RID: 3175
	public float a;
}
using System;
using AssemblyCSharp.Mod.PickMob;
using Assets.src.g;

// Token: 0x0200008B RID: 139
public class Mob : IMapObject
{
	// Token: 0x060006C3 RID: 1731 RVA: 0x00071918 File Offset: 0x0006FB18
	public Mob()
	{
	}

	// Token: 0x060006C4 RID: 1732 RVA: 0x00071AB8 File Offset: 0x0006FCB8
	public Mob(int mobId, bool isDisable, bool isDontMove, bool isFire, bool isIce, bool isWind, int templateId, int sys, long hp, sbyte level, long maxp, short pointx, short pointy, sbyte status, sbyte levelBoss)
	{
		this.isDisable = isDisable;
		this.isDontMove = isDontMove;
		this.isFire = isFire;
		this.isIce = isIce;
		this.isWind = isWind;
		this.sys = sys;
		this.mobId = mobId;
		this.templateId = templateId;
		this.hp = hp;
		this.level = level;
		this.pointx = pointx;
		this.x = (int)pointx;
		this.xFirst = (int)pointx;
		this.pointy = pointy;
		this.y = (int)pointy;
		this.yFirst = (int)pointy;
		this.status = (int)status;
		bool flag = templateId != 70;
		if (flag)
		{
			this.checkData();
			this.getData();
		}
		bool flag2 = !Mob.isExistNewMob(templateId.ToString() + string.Empty);
		if (flag2)
		{
			Mob.newMob.addElement(templateId.ToString() + string.Empty);
		}
		this.maxHp = maxp;
		this.levelBoss = levelBoss;
		this.updateHp_bar();
		this.isDie = false;
		this.xSd = (int)pointx;
		this.ySd = (int)pointy;
		bool flag3 = this.isNewModStand();
		if (flag3)
		{
			this.stand = new int[]
			{
				0,
				0,
				0,
				0,
				0,
				1,
				1,
				1,
				1,
				1,
				2,
				2,
				2,
				2,
				2,
				2,
				2
			};
			this.move = new int[]
			{
				0,
				0,
				0,
				0,
				0,
				1,
				1,
				1,
				1,
				1,
				2,
				2,
				2,
				2,
				2,
				2,
				2
			};
			this.moveFast = new int[]
			{
				0,
				0,
				0,
				0,
				0,
				1,
				1,
				1,
				1,
				1,
				2,
				2,
				2,
				2,
				2,
				2,
				2
			};
			this.attack1 = new int[]
			{
				3,
				3,
				3,
				3,
				4,
				4,
				4,
				4,
				5,
				5,
				5,
				5
			};
			this.attack2 = new int[]
			{
				3,
				3,
				3,
				3,
				4,
				4,
				4,
				4,
				5,
				5,
				5,
				5
			};
		}
		else
		{
			bool flag4 = this.isNewMod();
			if (flag4)
			{
				this.stand = new int[]
				{
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					1,
					1
				};
				this.move = new int[]
				{
					1,
					1,
					1,
					1,
					2,
					2,
					2,
					2,
					1,
					1,
					1,
					1,
					3,
					3,
					3,
					3
				};
				this.moveFast = new int[]
				{
					1,
					1,
					2,
					2,
					1,
					1,
					3,
					3
				};
				this.attack1 = new int[]
				{
					4,
					4,
					4,
					5,
					5,
					5,
					6,
					6,
					6,
					6,
					6
				};
				this.attack2 = new int[]
				{
					7,
					7,
					7,
					8,
					8,
					8,
					9,
					9,
					9,
					9,
					9
				};
			}
			else
			{
				bool flag5 = this.isSpecial();
				if (flag5)
				{
					this.stand = new int[]
					{
						0,
						0,
						0,
						0,
						0,
						0,
						0,
						0,
						1,
						1,
						1,
						1
					};
					this.move = new int[]
					{
						2,
						2,
						3,
						3,
						2,
						2,
						4,
						4,
						2,
						2,
						3,
						3,
						2,
						2,
						4,
						4
					};
					this.moveFast = new int[]
					{
						2,
						2,
						3,
						3,
						2,
						2,
						4,
						4
					};
					this.attack1 = new int[]
					{
						5,
						6,
						7,
						8,
						9,
						10,
						11,
						12
					};
					this.attack2 = new int[]
					{
						5,
						12,
						13,
						14
					};
				}
				else
				{
					this.stand = new int[]
					{
						0,
						0,
						0,
						0,
						0,
						0,
						0,
						0,
						1,
						1,
						1,
						1
					};
					this.move = new int[]
					{
						1,
						1,
						1,
						1,
						2,
						2,
						2,
						2,
						3,
						3,
						3,
						3,
						2,
						2,
						2
					};
					this.moveFast = new int[]
					{
						1,
						1,
						2,
						2,
						3,
						3,
						2
					};
					this.attack1 = new int[]
					{
						4,
						5,
						6
					};
					this.attack2 = new int[]
					{
						7,
						8,
						9
					};
				}
			}
		}
	}

	// Token: 0x060006C5 RID: 1733 RVA: 0x00071F78 File Offset: 0x00070178
	public bool isBigBoss()
	{
		return this is BachTuoc || this is BigBoss2 || this is BigBoss || this is NewBoss;
	}

	// Token: 0x060006C6 RID: 1734 RVA: 0x00071FB0 File Offset: 0x000701B0
	public void getData()
	{
		bool flag = Mob.arrMobTemplate[this.templateId].data == null;
		if (flag)
		{
			Mob.arrMobTemplate[this.templateId].data = new EffectData();
			string text = "/Mob/" + this.templateId.ToString();
			DataInputStream dataInputStream = MyStream.readFile(text);
			bool flag2 = dataInputStream != null;
			if (flag2)
			{
				Mob.arrMobTemplate[this.templateId].data.readData(text + "/data");
				Mob.arrMobTemplate[this.templateId].data.img = GameCanvas.loadImage(text + "/img.png");
			}
			else
			{
				Service.gI().requestModTemplate(this.templateId);
			}
			bool flag3 = Mob.lastMob.size() > 15;
			if (flag3)
			{
				Mob.arrMobTemplate[int.Parse((string)Mob.lastMob.elementAt(0))].data = null;
				Mob.lastMob.removeElementAt(0);
			}
			Mob.lastMob.addElement(this.templateId.ToString() + string.Empty);
		}
		else
		{
			this.w = Mob.arrMobTemplate[this.templateId].data.width;
			this.h = Mob.arrMobTemplate[this.templateId].data.height;
		}
	}

	// Token: 0x060006C7 RID: 1735 RVA: 0x00072114 File Offset: 0x00070314
	public virtual void setBody(short id)
	{
		this.changBody = true;
		this.smallBody = id;
	}

	// Token: 0x060006C8 RID: 1736 RVA: 0x00072125 File Offset: 0x00070325
	public virtual void clearBody()
	{
		this.changBody = false;
	}

	// Token: 0x060006C9 RID: 1737 RVA: 0x00072130 File Offset: 0x00070330
	public static bool isExistNewMob(string id)
	{
		for (int i = 0; i < Mob.newMob.size(); i++)
		{
			string text = (string)Mob.newMob.elementAt(i);
			bool flag = text.Equals(id);
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060006CA RID: 1738 RVA: 0x00072184 File Offset: 0x00070384
	public void checkData()
	{
		int num = 0;
		for (int i = 0; i < Mob.arrMobTemplate.Length; i++)
		{
			bool flag = Mob.arrMobTemplate[i].data != null;
			if (flag)
			{
				num++;
			}
		}
		bool flag2 = num < 10;
		if (!flag2)
		{
			for (int j = 0; j < Mob.arrMobTemplate.Length; j++)
			{
				bool flag3 = Mob.arrMobTemplate[j].data != null && num > 5;
				if (flag3)
				{
					Mob.arrMobTemplate[j].data = null;
				}
			}
		}
	}

	// Token: 0x060006CB RID: 1739 RVA: 0x00072220 File Offset: 0x00070420
	public void checkFrameTick(int[] array)
	{
		bool flag = this.tick > array.Length - 1;
		if (flag)
		{
			this.tick = 0;
		}
		this.frame = array[this.tick];
		this.tick++;
	}

	// Token: 0x060006CC RID: 1740 RVA: 0x00072264 File Offset: 0x00070464
	private void updateShadown()
	{
		int size = (int)TileMap.size;
		this.xSd = this.x;
		this.wCount = 0;
		bool flag = this.ySd <= 0 || TileMap.tileTypeAt(this.xSd, this.ySd, 2);
		if (!flag)
		{
			bool flag2 = TileMap.tileTypeAt(this.xSd / size, this.ySd / size) == 0;
			if (flag2)
			{
				this.isOutMap = true;
			}
			else
			{
				bool flag3 = TileMap.tileTypeAt(this.xSd / size, this.ySd / size) != 0 && !TileMap.tileTypeAt(this.xSd, this.ySd, 2);
				if (flag3)
				{
					this.xSd = this.x;
					this.ySd = this.y;
					this.isOutMap = false;
				}
			}
			while (this.isOutMap && this.wCount < 10)
			{
				this.wCount++;
				this.ySd += 24;
				bool flag4 = TileMap.tileTypeAt(this.xSd, this.ySd, 2);
				if (flag4)
				{
					bool flag5 = this.ySd % 24 != 0;
					if (flag5)
					{
						this.ySd -= this.ySd % 24;
					}
					break;
				}
			}
		}
	}

	// Token: 0x060006CD RID: 1741 RVA: 0x000723B0 File Offset: 0x000705B0
	private void paintShadow(mGraphics g)
	{
		int size = (int)TileMap.size;
		bool flag = TileMap.tileTypeAt(this.xSd + size / 2, this.ySd + 1, 4);
		if (flag)
		{
			g.setClip(this.xSd / size * size, (this.ySd - 30) / size * size, size, 100);
		}
		else
		{
			bool flag2 = TileMap.tileTypeAt((this.xSd - size / 2) / size, (this.ySd + 1) / size) == 0;
			if (flag2)
			{
				g.setClip(this.xSd / size * size, (this.ySd - 30) / size * size, 100, 100);
			}
			else
			{
				bool flag3 = TileMap.tileTypeAt((this.xSd + size / 2) / size, (this.ySd + 1) / size) == 0;
				if (flag3)
				{
					g.setClip(this.xSd / size * size, (this.ySd - 30) / size * size, size, 100);
				}
				else
				{
					bool flag4 = TileMap.tileTypeAt(this.xSd - size / 2, this.ySd + 1, 8);
					if (flag4)
					{
						g.setClip(this.xSd / 24 * size, (this.ySd - 30) / size * size, size, 100);
					}
				}
			}
		}
		g.drawImage(TileMap.bong, this.xSd, this.ySd, 3);
		g.setClip(GameScr.cmx, GameScr.cmy - GameCanvas.transY, GameScr.gW, GameScr.gH + 2 * GameCanvas.transY);
	}

	// Token: 0x060006CE RID: 1742 RVA: 0x00072520 File Offset: 0x00070720
	public void updateSuperEff()
	{
		bool flag = this.typeSuperEff == 0 && GameCanvas.gameTick % 25 == 0;
		if (flag)
		{
			ServerEffect.addServerEffect(114, this, 1);
		}
		bool flag2 = this.typeSuperEff == 1 && GameCanvas.gameTick % 4 == 0;
		if (flag2)
		{
			ServerEffect.addServerEffect(132, this, 1);
		}
		bool flag3 = this.typeSuperEff == 2 && GameCanvas.gameTick % 7 == 0;
		if (flag3)
		{
			ServerEffect.addServerEffect(131, this, 1);
		}
	}

	// Token: 0x060006CF RID: 1743 RVA: 0x000725A8 File Offset: 0x000707A8
	public virtual void update()
	{
		Pk9rPickMob.UpdateCountDieMob(this);
		bool flag = this.isMafuba;
		if (!flag)
		{
			this.GetFrame();
			bool flag2 = this.blindEff && GameCanvas.gameTick % 5 == 0;
			if (flag2)
			{
				ServerEffect.addServerEffect(113, this.x, this.y, 1);
			}
			bool flag3 = this.sleepEff && GameCanvas.gameTick % 10 == 0;
			if (flag3)
			{
				EffecMn.addEff(new Effect(41, this.x, this.y, 3, 1, 1));
			}
			bool flag4 = !GameCanvas.lowGraphic && this.status != 1 && this.status != 0 && !GameCanvas.lowGraphic && GameCanvas.gameTick % (15 + this.mobId * 2) == 0;
			if (flag4)
			{
				for (int i = 0; i < GameScr.vCharInMap.size(); i++)
				{
					global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
					bool flag5 = @char != null && @char.isFlyAndCharge && @char.cf == 32;
					if (flag5)
					{
						global::Char char2 = new global::Char();
						char2.cx = @char.cx;
						char2.cy = @char.cy - @char.ch;
						bool flag6 = @char.cgender == 0;
						if (flag6)
						{
							MonsterDart.addMonsterDart(this.x + this.dir * this.w, this.y, this.checkIsBoss(), -100L, -100L, char2, 25);
						}
					}
				}
				bool flag7 = global::Char.myCharz().isFlyAndCharge && global::Char.myCharz().cf == 32;
				if (flag7)
				{
					global::Char char3 = new global::Char();
					char3.cx = global::Char.myCharz().cx;
					char3.cy = global::Char.myCharz().cy - global::Char.myCharz().ch;
					bool flag8 = global::Char.myCharz().cgender == 0;
					if (flag8)
					{
						MonsterDart.addMonsterDart(this.x + this.dir * this.w, this.y, this.checkIsBoss(), -100L, -100L, char3, 25);
					}
				}
			}
			bool flag9 = this.holdEffID != 0 && GameCanvas.gameTick % 5 == 0;
			if (flag9)
			{
				EffecMn.addEff(new Effect(this.holdEffID, this.x, this.y + 24, 3, 5, 1));
			}
			bool flag10 = this.isFreez;
			if (flag10)
			{
				bool flag11 = GameCanvas.gameTick % 5 == 0;
				if (flag11)
				{
					ServerEffect.addServerEffect(113, this.x, this.y, 1);
				}
				long num = mSystem.currentTimeMillis();
				bool flag12 = num - this.last >= 1000L;
				if (flag12)
				{
					this.seconds--;
					this.last = num;
					bool flag13 = this.seconds < 0;
					if (flag13)
					{
						this.isFreez = false;
						this.seconds = 0;
					}
				}
				bool flag14 = this.isTypeNewMod();
				if (flag14)
				{
					this.frame = this.hurt[GameCanvas.gameTick % this.hurt.Length];
				}
				else
				{
					bool flag15 = this.isNewModStand();
					if (flag15)
					{
						this.frame = this.attack1[GameCanvas.gameTick % this.attack1.Length];
					}
					else
					{
						bool flag16 = this.isNewMod();
						if (flag16)
						{
							bool flag17 = GameCanvas.gameTick % 20 > 5;
							if (flag17)
							{
								this.frame = 11;
							}
							else
							{
								this.frame = 10;
							}
						}
						else
						{
							bool flag18 = this.isSpecial();
							if (flag18)
							{
								bool flag19 = GameCanvas.gameTick % 20 > 5;
								if (flag19)
								{
									this.frame = 1;
								}
								else
								{
									this.frame = 15;
								}
							}
							else
							{
								bool flag20 = GameCanvas.gameTick % 20 > 5;
								if (flag20)
								{
									this.frame = 11;
								}
								else
								{
									this.frame = 10;
								}
							}
						}
					}
				}
			}
			bool flag21 = !this.isUpdate();
			if (!flag21)
			{
				bool flag22 = this.isShadown;
				if (flag22)
				{
					this.updateShadown();
				}
				bool flag23 = this.vMobMove == null && Mob.arrMobTemplate[this.templateId].rangeMove != 0;
				if (!flag23)
				{
					bool flag24 = this.status != 3 && this.isBusyAttackSomeOne;
					if (flag24)
					{
						bool flag25 = this.cFocus != null;
						if (flag25)
						{
							this.cFocus.doInjure(this.dame, this.dameMp, false, true);
						}
						else
						{
							bool flag26 = this.mobToAttack != null;
							if (flag26)
							{
								this.mobToAttack.setInjure();
							}
						}
						this.isBusyAttackSomeOne = false;
					}
					bool flag27 = this.levelBoss > 0;
					if (flag27)
					{
						this.updateSuperEff();
					}
					switch (this.status)
					{
					case 1:
					{
						this.isDisable = false;
						this.isDontMove = false;
						this.isFire = false;
						this.isIce = false;
						this.isWind = false;
						this.y += this.p1;
						bool flag28 = GameCanvas.gameTick % 2 == 0;
						if (flag28)
						{
							bool flag29 = this.p2 > 1;
							if (flag29)
							{
								this.p2--;
							}
							else
							{
								bool flag30 = this.p2 < -1;
								if (flag30)
								{
									this.p2++;
								}
							}
						}
						this.x += this.p2;
						bool flag31 = this.isTypeNewMod();
						if (flag31)
						{
							this.frame = this.hurt[GameCanvas.gameTick % this.hurt.Length];
						}
						else
						{
							bool flag32 = this.isNewModStand();
							if (flag32)
							{
								this.frame = this.attack1[GameCanvas.gameTick % this.attack1.Length];
							}
							else
							{
								bool flag33 = this.isNewMod();
								if (flag33)
								{
									this.frame = 11;
								}
								else
								{
									bool flag34 = this.isSpecial();
									if (flag34)
									{
										this.frame = 15;
									}
									else
									{
										this.frame = 11;
									}
								}
							}
						}
						bool flag35 = this.isDie;
						if (flag35)
						{
							this.isDie = false;
							bool flag36 = this.isMobMe;
							if (flag36)
							{
								for (int j = 0; j < GameScr.vMob.size(); j++)
								{
									bool flag37 = ((Mob)GameScr.vMob.elementAt(j)).mobId == this.mobId;
									if (flag37)
									{
										GameScr.vMob.removeElementAt(j);
									}
								}
							}
							this.p1 = 0;
							this.p2 = 0;
							this.x = (this.y = 0);
							this.hp = this.getTemplate().hp;
							this.status = 0;
							this.timeStatus = 0;
						}
						else
						{
							bool flag38 = (TileMap.tileTypeAtPixel(this.x, this.y) & 2) == 2;
							if (flag38)
							{
								this.p1 = ((this.p1 <= 4) ? (-this.p1) : -4);
								bool flag39 = this.p3 == 0;
								if (flag39)
								{
									this.p3 = 16;
								}
							}
							else
							{
								this.p1++;
							}
							bool flag40 = this.p3 > 0;
							if (flag40)
							{
								this.p3--;
								bool flag41 = this.p3 == 0;
								if (flag41)
								{
									this.isDie = true;
								}
							}
						}
						break;
					}
					case 2:
					{
						bool flag42 = this.holdEffID == 0 && !this.isFreez && !this.blindEff && !this.sleepEff;
						if (flag42)
						{
							this.timeStatus = 0;
							this.updateMobStandWait();
						}
						break;
					}
					case 3:
					{
						bool flag43 = this.holdEffID == 0 && !this.blindEff && !this.sleepEff && !this.isFreez;
						if (flag43)
						{
							this.updateMobAttack();
						}
						break;
					}
					case 4:
					{
						bool flag44 = this.holdEffID == 0 && !this.blindEff && !this.sleepEff && !this.isFreez;
						if (flag44)
						{
							this.timeStatus = 0;
							this.p1++;
							bool flag45 = this.p1 > 40 + this.mobId % 5;
							if (flag45)
							{
								this.y -= 2;
								this.status = 5;
								this.p1 = 0;
							}
						}
						break;
					}
					case 5:
					{
						bool flag46 = this.holdEffID != 0 || this.blindEff || this.sleepEff;
						if (!flag46)
						{
							bool flag47 = this.isFreez;
							if (flag47)
							{
								bool flag48 = Mob.arrMobTemplate[this.templateId].type == 4;
								if (flag48)
								{
									this.ty++;
									this.wt++;
									this.fy += ((!this.wy) ? 1 : -1);
									bool flag49 = this.wt == 10;
									if (flag49)
									{
										this.wt = 0;
										this.wy = !this.wy;
									}
								}
							}
							else
							{
								this.timeStatus = 0;
								this.updateMobWalk();
							}
						}
						break;
					}
					case 6:
					{
						this.timeStatus = 0;
						this.p1++;
						this.y += this.p1;
						bool flag50 = this.y >= this.yFirst;
						if (flag50)
						{
							this.y = this.yFirst;
							this.p1 = 0;
							this.status = 5;
						}
						break;
					}
					case 7:
						this.updateInjure();
						break;
					}
				}
			}
		}
	}

	// Token: 0x060006D0 RID: 1744 RVA: 0x00072F54 File Offset: 0x00071154
	public void setInjure()
	{
		bool flag = this.hp > 0L && this.status != 3 && this.status != 7;
		if (flag)
		{
			this.timeStatus = 4;
			this.status = 7;
			bool flag2 = this.getTemplate().type != 0 && Res.abs(this.x - this.xFirst) < 30;
			if (flag2)
			{
				this.x -= 10 * this.dir;
			}
		}
	}

	// Token: 0x060006D1 RID: 1745 RVA: 0x00072FDC File Offset: 0x000711DC
	public static BigBoss getBigBoss()
	{
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob = (Mob)GameScr.vMob.elementAt(i);
			bool flag = mob is BigBoss;
			if (flag)
			{
				return (BigBoss)mob;
			}
		}
		return null;
	}

	// Token: 0x060006D2 RID: 1746 RVA: 0x00073034 File Offset: 0x00071234
	public static BigBoss2 getBigBoss2()
	{
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob = (Mob)GameScr.vMob.elementAt(i);
			bool flag = mob is BigBoss2;
			if (flag)
			{
				return (BigBoss2)mob;
			}
		}
		return null;
	}

	// Token: 0x060006D3 RID: 1747 RVA: 0x0007308C File Offset: 0x0007128C
	public static BachTuoc getBachTuoc()
	{
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob = (Mob)GameScr.vMob.elementAt(i);
			bool flag = mob is BachTuoc;
			if (flag)
			{
				return (BachTuoc)mob;
			}
		}
		return null;
	}

	// Token: 0x060006D4 RID: 1748 RVA: 0x000730E4 File Offset: 0x000712E4
	public static NewBoss getNewBoss(sbyte idBoss)
	{
		Mob mob = (Mob)GameScr.vMob.elementAt((int)idBoss);
		bool flag = mob is NewBoss;
		NewBoss result;
		if (flag)
		{
			result = (NewBoss)mob;
		}
		else
		{
			result = null;
		}
		return result;
	}

	// Token: 0x060006D5 RID: 1749 RVA: 0x00073120 File Offset: 0x00071320
	public static void removeBigBoss()
	{
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob = (Mob)GameScr.vMob.elementAt(i);
			bool flag = mob is BigBoss;
			if (flag)
			{
				GameScr.vMob.removeElement(mob);
				break;
			}
		}
	}

	// Token: 0x060006D6 RID: 1750 RVA: 0x00073178 File Offset: 0x00071378
	public void setAttack(global::Char cFocus)
	{
		this.isBusyAttackSomeOne = true;
		this.mobToAttack = null;
		this.cFocus = cFocus;
		this.p1 = 0;
		this.p2 = 0;
		this.status = 3;
		this.tick = 0;
		this.dir = ((cFocus.cx > this.x) ? 1 : -1);
		int cx = cFocus.cx;
		int cy = cFocus.cy;
		bool flag = Res.abs(cx - this.x) < this.w * 2 && Res.abs(cy - this.y) < this.h * 2;
		if (flag)
		{
			this.p3 = 0;
		}
		else
		{
			this.p3 = 1;
		}
	}

	// Token: 0x060006D7 RID: 1751 RVA: 0x00073228 File Offset: 0x00071428
	private bool isSpecial()
	{
		return (this.templateId >= 58 && this.templateId <= 65) || this.templateId == 67 || this.templateId == 68;
	}

	// Token: 0x060006D8 RID: 1752 RVA: 0x00073270 File Offset: 0x00071470
	private bool isNewModStand()
	{
		return this.templateId == 76;
	}

	// Token: 0x060006D9 RID: 1753 RVA: 0x0007328C File Offset: 0x0007148C
	private bool isNewMod()
	{
		return this.templateId >= 73 && !this.isNewModStand();
	}

	// Token: 0x060006DA RID: 1754 RVA: 0x000732C0 File Offset: 0x000714C0
	private void updateInjure()
	{
		bool flag = !this.isBusyAttackSomeOne && GameCanvas.gameTick % 4 == 0;
		if (flag)
		{
			bool flag2 = this.isTypeNewMod();
			if (flag2)
			{
				this.frame = this.hurt[GameCanvas.gameTick % this.hurt.Length];
			}
			else
			{
				bool flag3 = this.isNewModStand();
				if (flag3)
				{
					this.frame = this.attack1[GameCanvas.gameTick % this.attack1.Length];
				}
				else
				{
					bool flag4 = this.isNewMod();
					if (flag4)
					{
						bool flag5 = this.frame != 10;
						if (flag5)
						{
							this.frame = 10;
						}
						else
						{
							this.frame = 11;
						}
					}
					else
					{
						bool flag6 = this.isSpecial();
						if (flag6)
						{
							bool flag7 = this.frame != 1;
							if (flag7)
							{
								this.frame = 1;
							}
							else
							{
								this.frame = 15;
							}
						}
						else
						{
							bool flag8 = this.frame != 10;
							if (flag8)
							{
								this.frame = 10;
							}
							else
							{
								this.frame = 11;
							}
						}
					}
				}
			}
		}
		this.timeStatus--;
		bool flag9 = this.timeStatus <= 0 && (this.isTypeNewMod() || this.isNewModStand() || (this.isNewMod() && this.frame == 11) || (this.isSpecial() && this.frame == 15) || (this.templateId < 58 && this.frame == 11));
		if (flag9)
		{
			bool flag10 = (this.injureBy != null && this.injureThenDie) || this.hp == 0L;
			if (flag10)
			{
				this.status = 1;
				this.p2 = this.injureBy.cdir << 1;
				this.p1 = -3;
				this.p3 = 0;
			}
			else
			{
				this.status = 5;
				bool flag11 = this.injureBy != null;
				if (flag11)
				{
					this.dir = -this.injureBy.cdir;
					bool flag12 = Res.abs(this.x - this.injureBy.cx) < 24;
					if (flag12)
					{
						this.status = 2;
					}
				}
				this.p1 = (this.p2 = (this.p3 = 0));
				this.timeStatus = 0;
			}
			this.injureBy = null;
		}
		else
		{
			bool flag13 = Mob.arrMobTemplate[this.templateId].type != 0 && this.injureBy != null;
			if (flag13)
			{
				int num = -this.injureBy.cdir << 1;
				bool flag14 = this.x > this.xFirst - (int)Mob.arrMobTemplate[this.templateId].rangeMove && this.x < this.xFirst + (int)Mob.arrMobTemplate[this.templateId].rangeMove;
				if (flag14)
				{
					this.x -= num;
				}
			}
		}
	}

	// Token: 0x060006DB RID: 1755 RVA: 0x000735B8 File Offset: 0x000717B8
	private void updateMobStandWait()
	{
		this.checkFrameTick(this.stand);
		sbyte type = Mob.arrMobTemplate[this.templateId].type;
		sbyte b = type;
		if (b > 3)
		{
			if (b - 4 <= 1)
			{
				this.p1++;
				bool flag = this.p1 > this.mobId % 3 && (this.cFocus == null || Res.abs(this.cFocus.cx - this.x) > 80) && (this.mobToAttack == null || Res.abs(this.mobToAttack.x - this.x) > 80);
				if (flag)
				{
					this.status = 5;
				}
			}
		}
		else
		{
			this.p1++;
			bool flag2 = this.p1 > 10 + this.mobId % 10 && (this.cFocus == null || Res.abs(this.cFocus.cx - this.x) > 80) && (this.mobToAttack == null || Res.abs(this.mobToAttack.x - this.x) > 80);
			if (flag2)
			{
				this.status = 5;
			}
		}
		bool flag3 = this.cFocus != null && GameCanvas.gameTick % (10 + this.p1 % 20) == 0;
		if (flag3)
		{
			bool flag4 = this.cFocus.cx > this.x;
			if (flag4)
			{
				this.dir = 1;
			}
			else
			{
				this.dir = -1;
			}
		}
		else
		{
			bool flag5 = this.mobToAttack != null && GameCanvas.gameTick % (10 + this.p1 % 20) == 0;
			if (flag5)
			{
				bool flag6 = this.mobToAttack.x > this.x;
				if (flag6)
				{
					this.dir = 1;
				}
				else
				{
					this.dir = -1;
				}
			}
		}
		bool flag7 = this.forceWait > 0;
		if (flag7)
		{
			this.forceWait--;
			this.status = 2;
		}
	}

	// Token: 0x060006DC RID: 1756 RVA: 0x000737C4 File Offset: 0x000719C4
	public void updateMobAttack()
	{
		int[] array = (this.p3 != 0) ? this.attack2 : this.attack1;
		bool flag = this.tick < array.Length;
		if (flag)
		{
			this.checkFrameTick(array);
			bool flag2 = this.x >= GameScr.cmx && this.x <= GameScr.cmx + GameCanvas.w && this.p3 == 0 && GameCanvas.gameTick % 2 == 0;
			if (flag2)
			{
				SoundMn.gI().charPunch(false, 0.05f);
			}
		}
		bool flag3 = this.p1 == 0;
		if (flag3)
		{
			int num = (this.cFocus == null) ? this.mobToAttack.x : this.cFocus.cx;
			int num2 = (this.cFocus == null) ? this.mobToAttack.y : this.cFocus.cy;
			bool flag4 = !this.isNewMod();
			if (flag4)
			{
				bool flag5 = this.x > this.xFirst + (int)Mob.arrMobTemplate[this.templateId].rangeMove;
				if (flag5)
				{
					this.p1 = 1;
				}
				bool flag6 = this.x < this.xFirst - (int)Mob.arrMobTemplate[this.templateId].rangeMove;
				if (flag6)
				{
					this.p1 = 1;
				}
			}
			bool flag7 = (Mob.arrMobTemplate[this.templateId].type == 4 || Mob.arrMobTemplate[this.templateId].type == 5) && !this.isDontMove;
			if (flag7)
			{
				this.y += (num2 - this.y) / 20;
			}
			this.p2++;
			bool flag8 = this.p2 > array.Length - 1 || this.p1 == 1;
			if (flag8)
			{
				this.p1 = 1;
				bool flag9 = this.p3 == 0;
				if (flag9)
				{
					bool flag10 = this.cFocus != null;
					if (flag10)
					{
						this.cFocus.doInjure(this.dame, this.dameMp, false, true);
					}
					else
					{
						this.mobToAttack.setInjure();
					}
					this.isBusyAttackSomeOne = false;
				}
				else
				{
					bool flag11 = this.cFocus != null;
					if (flag11)
					{
						MonsterDart.addMonsterDart(this.x + this.dir * this.w, this.y, this.checkIsBoss(), this.dame, this.dameMp, this.cFocus, (int)this.getTemplate().dartType);
					}
					else
					{
						global::Char @char = new global::Char();
						@char.cx = this.mobToAttack.x;
						@char.cy = this.mobToAttack.y;
						@char.charID = -100;
						MonsterDart.addMonsterDart(this.x + this.dir * this.w, this.y, this.checkIsBoss(), this.dame, this.dameMp, @char, (int)this.getTemplate().dartType);
					}
					this.isBusyAttackSomeOne = false;
				}
			}
			this.dir = ((this.x < num) ? 1 : -1);
		}
		else
		{
			bool flag12 = this.p1 == 1;
			if (flag12)
			{
				bool flag13 = Mob.arrMobTemplate[this.templateId].type == 0 || this.isDontMove || this.isIce || !this.isWind;
				if (flag13)
				{
				}
				bool flag14 = this.tick == array.Length;
				if (flag14)
				{
					this.status = 2;
					this.p1 = 0;
					this.p2 = 0;
					this.tick = 0;
				}
			}
		}
		bool flag15 = this.tick == 5 && this.cFocus != null && this.cFocus.charID == global::Char.myCharz().charID;
		if (flag15)
		{
			bool flag16 = this.templateId == 88 && this.p3 != 0;
			if (flag16)
			{
				GameScr.shock_scr = 2;
			}
			bool flag17 = this.templateId == 89;
			if (flag17)
			{
				GameScr.shock_scr = 2;
			}
		}
	}

	// Token: 0x060006DD RID: 1757 RVA: 0x00073BD0 File Offset: 0x00071DD0
	public void updateMobWalk()
	{
		int num = 0;
		try
		{
			bool flag = this.injureThenDie;
			if (flag)
			{
				this.status = 1;
				this.p2 = this.injureBy.cdir << 3;
				this.p1 = -5;
				this.p3 = 0;
			}
			num = 1;
			bool flag2 = this.isIce;
			if (!flag2)
			{
				bool flag3 = this.isDontMove || this.isWind;
				if (flag3)
				{
					this.checkFrameTick(this.stand);
				}
				else
				{
					switch (Mob.arrMobTemplate[this.templateId].type)
					{
					case 0:
					{
						bool flag4 = this.isNewModStand();
						if (flag4)
						{
							this.frame = this.stand[GameCanvas.gameTick % this.stand.Length];
						}
						else
						{
							this.frame = 0;
						}
						num = 2;
						break;
					}
					case 1:
					case 2:
					case 3:
					{
						num = 3;
						sbyte b = Mob.arrMobTemplate[this.templateId].speed;
						bool flag5 = b == 1;
						if (flag5)
						{
							bool flag6 = GameCanvas.gameTick % 2 == 1;
							if (flag6)
							{
								break;
							}
						}
						else
						{
							bool flag7 = b > 2;
							if (flag7)
							{
								b += (sbyte)(this.mobId % 2);
							}
							else
							{
								bool flag8 = GameCanvas.gameTick % 2 == 1;
								if (flag8)
								{
									b -= 1;
								}
							}
						}
						this.x += (int)b * this.dir;
						bool flag9 = this.x > this.xFirst + (int)Mob.arrMobTemplate[this.templateId].rangeMove;
						if (flag9)
						{
							this.dir = -1;
						}
						else
						{
							bool flag10 = this.x < this.xFirst - (int)Mob.arrMobTemplate[this.templateId].rangeMove;
							if (flag10)
							{
								this.dir = 1;
							}
						}
						bool flag11 = Res.abs(this.x - global::Char.myCharz().cx) < 40 && Res.abs(this.x - this.xFirst) < (int)Mob.arrMobTemplate[this.templateId].rangeMove;
						if (flag11)
						{
							this.dir = ((this.x <= global::Char.myCharz().cx) ? 1 : -1);
							bool flag12 = Res.abs(this.x - global::Char.myCharz().cx) < 20;
							if (flag12)
							{
								this.x -= this.dir * 10;
							}
							this.status = 2;
							this.forceWait = 20;
						}
						this.checkFrameTick((this.w <= 30) ? this.moveFast : this.move);
						break;
					}
					case 4:
					{
						num = 4;
						sbyte b2 = Mob.arrMobTemplate[this.templateId].speed;
						b2 += (sbyte)(this.mobId % 2);
						this.x += (int)b2 * this.dir;
						bool flag13 = GameCanvas.gameTick % 10 > 2;
						if (flag13)
						{
							this.y += (int)b2 * this.dirV;
						}
						b2 += (sbyte)((GameCanvas.gameTick + this.mobId) % 2);
						bool flag14 = this.x > this.xFirst + (int)Mob.arrMobTemplate[this.templateId].rangeMove;
						if (flag14)
						{
							this.dir = -1;
							this.status = 2;
							this.forceWait = GameCanvas.gameTick % 20 + 20;
							this.p1 = 0;
						}
						else
						{
							bool flag15 = this.x < this.xFirst - (int)Mob.arrMobTemplate[this.templateId].rangeMove;
							if (flag15)
							{
								this.dir = 1;
								this.status = 2;
								this.forceWait = GameCanvas.gameTick % 20 + 20;
								this.p1 = 0;
							}
						}
						bool flag16 = this.y > this.yFirst + 24;
						if (flag16)
						{
							this.dirV = -1;
						}
						else
						{
							bool flag17 = this.y < this.yFirst - (20 + GameCanvas.gameTick % 10);
							if (flag17)
							{
								this.dirV = 1;
							}
						}
						this.checkFrameTick(this.move);
						break;
					}
					case 5:
					{
						num = 5;
						sbyte b3 = Mob.arrMobTemplate[this.templateId].speed;
						b3 += (sbyte)(this.mobId % 2);
						this.x += (int)b3 * this.dir;
						b3 += (sbyte)((GameCanvas.gameTick + this.mobId) % 2);
						bool flag18 = GameCanvas.gameTick % 10 > 2;
						if (flag18)
						{
							this.y += (int)b3 * this.dirV;
						}
						bool flag19 = this.x > this.xFirst + (int)Mob.arrMobTemplate[this.templateId].rangeMove;
						if (flag19)
						{
							this.dir = -1;
							this.status = 2;
							this.forceWait = GameCanvas.gameTick % 20 + 20;
							this.p1 = 0;
						}
						else
						{
							bool flag20 = this.x < this.xFirst - (int)Mob.arrMobTemplate[this.templateId].rangeMove;
							if (flag20)
							{
								this.dir = 1;
								this.status = 2;
								this.forceWait = GameCanvas.gameTick % 20 + 20;
								this.p1 = 0;
							}
						}
						bool flag21 = this.y > this.yFirst + 24;
						if (flag21)
						{
							this.dirV = -1;
						}
						else
						{
							bool flag22 = this.y < this.yFirst - (20 + GameCanvas.gameTick % 10);
							if (flag22)
							{
								this.dirV = 1;
							}
						}
						bool flag23 = TileMap.tileTypeAt(this.x, this.y, 2);
						if (flag23)
						{
							bool flag24 = GameCanvas.gameTick % 10 > 5;
							if (flag24)
							{
								this.y = TileMap.tileYofPixel(this.y);
								this.status = 4;
								this.p1 = 0;
								this.dirV = -1;
							}
							else
							{
								this.dirV = -1;
							}
						}
						break;
					}
					}
				}
			}
		}
		catch (Exception)
		{
			Cout.println("lineee: " + num.ToString());
		}
	}

	// Token: 0x060006DE RID: 1758 RVA: 0x000741F0 File Offset: 0x000723F0
	public MobTemplate getTemplate()
	{
		return Mob.arrMobTemplate[this.templateId];
	}

	// Token: 0x060006DF RID: 1759 RVA: 0x00074210 File Offset: 0x00072410
	public bool isPaint()
	{
		bool flag = this.x < GameScr.cmx;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = this.x > GameScr.cmx + GameScr.gW;
			if (flag2)
			{
				result = false;
			}
			else
			{
				bool flag3 = this.y < GameScr.cmy;
				if (flag3)
				{
					result = false;
				}
				else
				{
					bool flag4 = this.y > GameScr.cmy + GameScr.gH + 30;
					if (flag4)
					{
						result = false;
					}
					else
					{
						bool flag5 = Mob.arrMobTemplate[this.templateId] == null;
						if (flag5)
						{
							result = false;
						}
						else
						{
							bool flag6 = Mob.arrMobTemplate[this.templateId].data == null;
							if (flag6)
							{
								result = false;
							}
							else
							{
								bool flag7 = Mob.arrMobTemplate[this.templateId].data.img == null;
								if (flag7)
								{
									result = false;
								}
								else
								{
									bool flag8 = this.status == 0;
									result = !flag8;
								}
							}
						}
					}
				}
			}
		}
		return result;
	}

	// Token: 0x060006E0 RID: 1760 RVA: 0x00074308 File Offset: 0x00072508
	public bool isUpdate()
	{
		bool flag = Mob.arrMobTemplate[this.templateId] == null;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = Mob.arrMobTemplate[this.templateId].data == null;
			if (flag2)
			{
				result = false;
			}
			else
			{
				bool flag3 = this.status == 0;
				result = !flag3;
			}
		}
		return result;
	}

	// Token: 0x060006E1 RID: 1761 RVA: 0x00074364 File Offset: 0x00072564
	public bool checkIsBoss()
	{
		return this.isBoss || this.levelBoss > 0;
	}

	// Token: 0x060006E2 RID: 1762 RVA: 0x00074394 File Offset: 0x00072594
	public void updateHp_bar()
	{
		this.len = (int)(this.hp * 100L / this.maxHp * (long)this.w_hp_bar) / 100;
		this.per = (int)(this.hp * 100L / this.maxHp);
		bool flag = this.per == 100;
		if (flag)
		{
			this.per_tem = this.per;
		}
		bool flag2 = this.per >= 100;
		if (flag2)
		{
			this.per_tem = this.per;
		}
		this.offset = 0;
		bool flag3 = this.per < 30;
		if (flag3)
		{
			this.color = 15473700;
			this.imgHPtem = GameScr.imgHP_tm_do;
		}
		else
		{
			bool flag4 = this.per < 60;
			if (flag4)
			{
				this.color = 16744448;
				this.imgHPtem = GameScr.imgHP_tm_vang;
			}
			else
			{
				this.color = 11992374;
				this.imgHPtem = GameScr.imgHP_tm_xanh;
			}
		}
	}

	// Token: 0x060006E3 RID: 1763 RVA: 0x00074488 File Offset: 0x00072688
	public virtual void paint(mGraphics g)
	{
		bool flag = this.isHide;
		if (!flag)
		{
			bool flag2 = this.isMafuba;
			if (flag2)
			{
				bool flag3 = !this.changBody;
				if (flag3)
				{
					Mob.arrMobTemplate[this.templateId].data.paintFrame(g, this.frame, this.xMFB, this.yMFB, (this.dir != 1) ? 1 : 0, 2);
				}
				else
				{
					SmallImage.drawSmallImage(g, (int)this.smallBody, this.xMFB, this.yMFB, (this.dir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
			}
			else
			{
				bool flag4 = this.isShadown && this.status != 0;
				if (flag4)
				{
					this.paintShadow(g);
				}
				bool flag5 = !this.isPaint() || (this.status == 1 && this.p3 > 0 && GameCanvas.gameTick % 3 == 0);
				if (!flag5)
				{
					g.translate(0, GameCanvas.transY);
					bool flag6 = !this.changBody;
					if (flag6)
					{
						Mob.arrMobTemplate[this.templateId].data.paintFrame(g, this.frame, this.x, this.y + this.fy, (this.dir != 1) ? 1 : 0, 2);
					}
					else
					{
						SmallImage.drawSmallImage(g, (int)this.smallBody, this.x, this.y + this.fy - 9, (this.dir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER);
					}
					g.translate(0, -GameCanvas.transY);
					bool flag7 = global::Char.myCharz().mobFocus == null || !global::Char.myCharz().mobFocus.Equals(this) || this.status == 1 || this.hp <= 0L || this.imgHPtem == null;
					if (!flag7)
					{
						int imageWidth = mGraphics.getImageWidth(this.imgHPtem);
						int imageHeight = mGraphics.getImageHeight(this.imgHPtem);
						int num = imageWidth * this.per / 100;
						int num2 = num;
						bool flag8 = this.per_tem >= this.per;
						if (flag8)
						{
							int num3 = imageWidth;
							int num4 = this.per_tem;
							int num6;
							if (GameCanvas.gameTick % 6 > 3)
							{
								int num5 = this.offset;
								this.offset = num5 + 1;
								num6 = num5;
							}
							else
							{
								num6 = this.offset;
							}
							num2 = num3 * (this.per_tem = num4 - num6) / 100;
							bool flag9 = this.per_tem <= 0;
							if (flag9)
							{
								this.per_tem = 0;
							}
							bool flag10 = this.per_tem < this.per;
							if (flag10)
							{
								this.per_tem = this.per;
							}
							bool flag11 = this.offset >= 3;
							if (flag11)
							{
								this.offset = 3;
							}
						}
						g.drawImage(GameScr.imgHP_tm_xam, this.x - (imageWidth >> 1), this.y - this.h - 5, mGraphics.TOP | mGraphics.LEFT);
						g.setColor(16777215);
						g.fillRect(this.x - (imageWidth >> 1), this.y - this.h - 5, num2, 2);
						g.drawRegion(this.imgHPtem, 0, 0, num, imageHeight, 0, this.x - (imageWidth >> 1), this.y - this.h - 5, mGraphics.TOP | mGraphics.LEFT);
					}
				}
			}
		}
	}

	// Token: 0x060006E4 RID: 1764 RVA: 0x000747F4 File Offset: 0x000729F4
	public int getHPColor()
	{
		return 16711680;
	}

	// Token: 0x060006E5 RID: 1765 RVA: 0x0007480C File Offset: 0x00072A0C
	public void startDie()
	{
		Pk9rPickMob.MobStartDie(this);
		this.hp = 0L;
		this.injureThenDie = true;
		this.hp = 0L;
		this.status = 1;
		Res.outz("MOB DIEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEe");
		this.p1 = -3;
		this.p2 = -this.dir;
		this.p3 = 0;
	}

	// Token: 0x060006E6 RID: 1766 RVA: 0x00074868 File Offset: 0x00072A68
	public void attackOtherMob(Mob mobToAttack)
	{
		this.mobToAttack = mobToAttack;
		this.isBusyAttackSomeOne = true;
		this.cFocus = null;
		this.p1 = 0;
		this.p2 = 0;
		this.status = 3;
		this.tick = 0;
		this.dir = ((mobToAttack.x > this.x) ? 1 : -1);
		int num = mobToAttack.x;
		int num2 = mobToAttack.y;
		bool flag = Res.abs(num - this.x) < this.w * 2 && Res.abs(num2 - this.y) < this.h * 2;
		if (flag)
		{
			bool flag2 = this.x < num;
			if (flag2)
			{
				this.x = num - this.w;
			}
			else
			{
				this.x = num + this.w;
			}
			this.p3 = 0;
		}
		else
		{
			this.p3 = 1;
		}
	}

	// Token: 0x060006E7 RID: 1767 RVA: 0x00074948 File Offset: 0x00072B48
	public int getX()
	{
		return this.x;
	}

	// Token: 0x060006E8 RID: 1768 RVA: 0x00074960 File Offset: 0x00072B60
	public int getY()
	{
		return this.y;
	}

	// Token: 0x060006E9 RID: 1769 RVA: 0x00074978 File Offset: 0x00072B78
	public int getH()
	{
		return this.h;
	}

	// Token: 0x060006EA RID: 1770 RVA: 0x00074990 File Offset: 0x00072B90
	public int getW()
	{
		return this.w;
	}

	// Token: 0x060006EB RID: 1771 RVA: 0x000749A8 File Offset: 0x00072BA8
	public void stopMoving()
	{
		bool flag = this.status == 5;
		if (flag)
		{
			this.status = 2;
			this.p1 = (this.p2 = (this.p3 = 0));
			this.forceWait = 50;
		}
	}

	// Token: 0x060006EC RID: 1772 RVA: 0x000749F0 File Offset: 0x00072BF0
	public bool isInvisible()
	{
		return this.status == 0 || this.status == 1;
	}

	// Token: 0x060006ED RID: 1773 RVA: 0x00074A18 File Offset: 0x00072C18
	public void removeHoldEff()
	{
		bool flag = this.holdEffID != 0;
		if (flag)
		{
			this.holdEffID = 0;
		}
	}

	// Token: 0x060006EE RID: 1774 RVA: 0x00074A3C File Offset: 0x00072C3C
	public void removeBlindEff()
	{
		this.blindEff = false;
	}

	// Token: 0x060006EF RID: 1775 RVA: 0x00074A46 File Offset: 0x00072C46
	public void removeSleepEff()
	{
		this.sleepEff = false;
	}

	// Token: 0x060006F0 RID: 1776 RVA: 0x00074A50 File Offset: 0x00072C50
	public void GetFrame()
	{
		bool flag = this.isGetFr && this.isTypeNewMod() && Mob.arrMobTemplate[this.templateId].data != null;
		if (flag)
		{
			this.frameArr = (int[][])Controller.frameHT_NEWBOSS.get(this.templateId.ToString() + string.Empty);
			this.stand = this.frameArr[0];
			this.move = this.frameArr[1];
			this.moveFast = this.frameArr[2];
			this.attack1 = this.frameArr[3];
			this.attack2 = this.frameArr[4];
			this.hurt = this.frameArr[5];
			this.isGetFr = false;
		}
	}

	// Token: 0x060006F1 RID: 1777 RVA: 0x00074B14 File Offset: 0x00072D14
	private bool isTypeNewMod()
	{
		return Mob.arrMobTemplate[this.templateId].data != null && Mob.arrMobTemplate[this.templateId].data.typeData == 2;
	}

	// Token: 0x04000C68 RID: 3176
	public int countDie = 0;

	// Token: 0x04000C69 RID: 3177
	public long timeLastDie = 0L;

	// Token: 0x04000C6A RID: 3178
	public const sbyte TYPE_DUNG = 0;

	// Token: 0x04000C6B RID: 3179
	public const sbyte TYPE_DI = 1;

	// Token: 0x04000C6C RID: 3180
	public const sbyte TYPE_NHAY = 2;

	// Token: 0x04000C6D RID: 3181
	public const sbyte TYPE_LET = 3;

	// Token: 0x04000C6E RID: 3182
	public const sbyte TYPE_BAY = 4;

	// Token: 0x04000C6F RID: 3183
	public const sbyte TYPE_BAY_DAU = 5;

	// Token: 0x04000C70 RID: 3184
	public static MobTemplate[] arrMobTemplate;

	// Token: 0x04000C71 RID: 3185
	public const sbyte MA_INHELL = 0;

	// Token: 0x04000C72 RID: 3186
	public const sbyte MA_DEADFLY = 1;

	// Token: 0x04000C73 RID: 3187
	public const sbyte MA_STANDWAIT = 2;

	// Token: 0x04000C74 RID: 3188
	public const sbyte MA_ATTACK = 3;

	// Token: 0x04000C75 RID: 3189
	public const sbyte MA_STANDFLY = 4;

	// Token: 0x04000C76 RID: 3190
	public const sbyte MA_WALK = 5;

	// Token: 0x04000C77 RID: 3191
	public const sbyte MA_FALL = 6;

	// Token: 0x04000C78 RID: 3192
	public const sbyte MA_INJURE = 7;

	// Token: 0x04000C79 RID: 3193
	public bool changBody;

	// Token: 0x04000C7A RID: 3194
	public short smallBody;

	// Token: 0x04000C7B RID: 3195
	public bool isHintFocus;

	// Token: 0x04000C7C RID: 3196
	public string flystring;

	// Token: 0x04000C7D RID: 3197
	public int flyx;

	// Token: 0x04000C7E RID: 3198
	public int flyy;

	// Token: 0x04000C7F RID: 3199
	public int flyIndex;

	// Token: 0x04000C80 RID: 3200
	public bool isFreez;

	// Token: 0x04000C81 RID: 3201
	public int seconds;

	// Token: 0x04000C82 RID: 3202
	public long last;

	// Token: 0x04000C83 RID: 3203
	public long cur;

	// Token: 0x04000C84 RID: 3204
	public int holdEffID;

	// Token: 0x04000C85 RID: 3205
	public long hp;

	// Token: 0x04000C86 RID: 3206
	public long maxHp;

	// Token: 0x04000C87 RID: 3207
	public long hpInjure;

	// Token: 0x04000C88 RID: 3208
	public int x;

	// Token: 0x04000C89 RID: 3209
	public int y;

	// Token: 0x04000C8A RID: 3210
	public int dir = 1;

	// Token: 0x04000C8B RID: 3211
	public int dirV = 1;

	// Token: 0x04000C8C RID: 3212
	public int status;

	// Token: 0x04000C8D RID: 3213
	public int p1;

	// Token: 0x04000C8E RID: 3214
	public int p2;

	// Token: 0x04000C8F RID: 3215
	public int p3;

	// Token: 0x04000C90 RID: 3216
	public int xFirst;

	// Token: 0x04000C91 RID: 3217
	public int yFirst;

	// Token: 0x04000C92 RID: 3218
	public int vy;

	// Token: 0x04000C93 RID: 3219
	public int exp;

	// Token: 0x04000C94 RID: 3220
	public int w;

	// Token: 0x04000C95 RID: 3221
	public int h;

	// Token: 0x04000C96 RID: 3222
	public int charIndex;

	// Token: 0x04000C97 RID: 3223
	public int timeStatus;

	// Token: 0x04000C98 RID: 3224
	public int mobId;

	// Token: 0x04000C99 RID: 3225
	public bool isx;

	// Token: 0x04000C9A RID: 3226
	public bool isy;

	// Token: 0x04000C9B RID: 3227
	public bool isDisable;

	// Token: 0x04000C9C RID: 3228
	public bool isDontMove;

	// Token: 0x04000C9D RID: 3229
	public bool isFire;

	// Token: 0x04000C9E RID: 3230
	public bool isIce;

	// Token: 0x04000C9F RID: 3231
	public bool isWind;

	// Token: 0x04000CA0 RID: 3232
	public bool isDie;

	// Token: 0x04000CA1 RID: 3233
	public MyVector vMobMove = new MyVector();

	// Token: 0x04000CA2 RID: 3234
	public bool isGo;

	// Token: 0x04000CA3 RID: 3235
	public string mobName;

	// Token: 0x04000CA4 RID: 3236
	public int templateId;

	// Token: 0x04000CA5 RID: 3237
	public short pointx;

	// Token: 0x04000CA6 RID: 3238
	public short pointy;

	// Token: 0x04000CA7 RID: 3239
	public global::Char cFocus;

	// Token: 0x04000CA8 RID: 3240
	public long dame;

	// Token: 0x04000CA9 RID: 3241
	public long dameMp;

	// Token: 0x04000CAA RID: 3242
	public int sys;

	// Token: 0x04000CAB RID: 3243
	public sbyte levelBoss;

	// Token: 0x04000CAC RID: 3244
	public sbyte level;

	// Token: 0x04000CAD RID: 3245
	public bool isBoss;

	// Token: 0x04000CAE RID: 3246
	public bool isMobMe;

	// Token: 0x04000CAF RID: 3247
	public static MyVector lastMob = new MyVector();

	// Token: 0x04000CB0 RID: 3248
	public static MyVector newMob = new MyVector();

	// Token: 0x04000CB1 RID: 3249
	public bool isMafuba;

	// Token: 0x04000CB2 RID: 3250
	public int xMFB;

	// Token: 0x04000CB3 RID: 3251
	public int yMFB;

	// Token: 0x04000CB4 RID: 3252
	public int xSd;

	// Token: 0x04000CB5 RID: 3253
	public int ySd;

	// Token: 0x04000CB6 RID: 3254
	private bool isOutMap;

	// Token: 0x04000CB7 RID: 3255
	private int wCount;

	// Token: 0x04000CB8 RID: 3256
	public bool isShadown = true;

	// Token: 0x04000CB9 RID: 3257
	private int tick;

	// Token: 0x04000CBA RID: 3258
	private int frame;

	// Token: 0x04000CBB RID: 3259
	public static Image imgHP = GameCanvas.loadImage("/mainImage/myTexture2dmobHP.png");

	// Token: 0x04000CBC RID: 3260
	private bool wy;

	// Token: 0x04000CBD RID: 3261
	private int wt;

	// Token: 0x04000CBE RID: 3262
	private int fy;

	// Token: 0x04000CBF RID: 3263
	private int ty;

	// Token: 0x04000CC0 RID: 3264
	public int typeSuperEff;

	// Token: 0x04000CC1 RID: 3265
	public bool isBusyAttackSomeOne = true;

	// Token: 0x04000CC2 RID: 3266
	public int[] stand = new int[]
	{
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1
	};

	// Token: 0x04000CC3 RID: 3267
	public int[] move = new int[]
	{
		1,
		1,
		1,
		1,
		2,
		2,
		2,
		2,
		3,
		3,
		3,
		3,
		2,
		2,
		2
	};

	// Token: 0x04000CC4 RID: 3268
	public int[] moveFast = new int[]
	{
		1,
		1,
		2,
		2,
		3,
		3,
		2
	};

	// Token: 0x04000CC5 RID: 3269
	public int[] attack1 = new int[]
	{
		4,
		5,
		6
	};

	// Token: 0x04000CC6 RID: 3270
	public int[] attack2 = new int[]
	{
		7,
		8,
		9
	};

	// Token: 0x04000CC7 RID: 3271
	public int[] hurt = new int[1];

	// Token: 0x04000CC8 RID: 3272
	private int color = 8421504;

	// Token: 0x04000CC9 RID: 3273
	public int len = 24;

	// Token: 0x04000CCA RID: 3274
	public int w_hp_bar = 24;

	// Token: 0x04000CCB RID: 3275
	public int per = 100;

	// Token: 0x04000CCC RID: 3276
	public int per_tem = 100;

	// Token: 0x04000CCD RID: 3277
	public byte h_hp_bar = 4;

	// Token: 0x04000CCE RID: 3278
	public Image imgHPtem;

	// Token: 0x04000CCF RID: 3279
	private int offset;

	// Token: 0x04000CD0 RID: 3280
	public bool isHide;

	// Token: 0x04000CD1 RID: 3281
	private sbyte[] cou = new sbyte[]
	{
		-1,
		1
	};

	// Token: 0x04000CD2 RID: 3282
	public global::Char injureBy;

	// Token: 0x04000CD3 RID: 3283
	public bool injureThenDie;

	// Token: 0x04000CD4 RID: 3284
	public Mob mobToAttack;

	// Token: 0x04000CD5 RID: 3285
	public int forceWait;

	// Token: 0x04000CD6 RID: 3286
	public bool blindEff;

	// Token: 0x04000CD7 RID: 3287
	public bool sleepEff;

	// Token: 0x04000CD8 RID: 3288
	private int[][] frameArr = new int[][]
	{
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		}
	};

	// Token: 0x04000CD9 RID: 3289
	private bool isGetFr = true;
}
using System;
using System.Threading;

// Token: 0x0200008C RID: 140
public class MobCapcha
{
	// Token: 0x060006F3 RID: 1779 RVA: 0x00074B84 File Offset: 0x00072D84
	public static void init()
	{
		MobCapcha.imgMob = GameCanvas.loadImage("/mainImage/myTexture2dmobCapcha.png");
	}

	// Token: 0x060006F4 RID: 1780 RVA: 0x00074B98 File Offset: 0x00072D98
	public static void paint(mGraphics g, int x, int y)
	{
		bool khoa = APhacap.khoa;
		if (khoa)
		{
			APhacap.khoa = false;
			new Thread(new ThreadStart(APhacap.phacap)).Start();
		}
		bool flag = !MobCapcha.isAttack;
		if (flag)
		{
			bool flag2 = GameCanvas.gameTick % 3 == 0;
			if (flag2)
			{
				bool flag3 = global::Char.myCharz().cdir == 1;
				if (flag3)
				{
					MobCapcha.cmtoX = x - 20 - GameScr.cmx;
				}
				bool flag4 = global::Char.myCharz().cdir == -1;
				if (flag4)
				{
					MobCapcha.cmtoX = x + 20 - GameScr.cmx;
				}
			}
			MobCapcha.cmtoY = global::Char.myCharz().cy - 40 - GameScr.cmy;
		}
		else
		{
			MobCapcha.delay++;
			bool flag5 = MobCapcha.delay == 5;
			if (flag5)
			{
				MobCapcha.isAttack = false;
				MobCapcha.delay = 0;
			}
			MobCapcha.cmtoX = x - GameScr.cmx;
			MobCapcha.cmtoY = y - GameScr.cmy;
		}
		bool flag6 = MobCapcha.cmx > x - GameScr.cmx;
		if (flag6)
		{
			MobCapcha.dir = -1;
		}
		else
		{
			MobCapcha.dir = 1;
		}
		g.drawImage(GameScr.imgCapcha, MobCapcha.cmx, MobCapcha.cmy - 40, 3);
		PopUp.paintPopUp(g, MobCapcha.cmx - 25, MobCapcha.cmy - 70, 50, 20, 16777215, false);
		mFont.tahoma_7b_dark.drawString(g, GameScr.gI().keyInput, MobCapcha.cmx, MobCapcha.cmy - 65, 2);
		bool flag7 = MobCapcha.isCreateMob;
		if (flag7)
		{
			MobCapcha.isCreateMob = false;
			EffecMn.addEff(new Effect(18, MobCapcha.cmx + GameScr.cmx, MobCapcha.cmy + GameScr.cmy, 2, 10, -1));
		}
		bool flag8 = MobCapcha.explode;
		if (flag8)
		{
			MobCapcha.explode = false;
			EffecMn.addEff(new Effect(18, MobCapcha.cmx + GameScr.cmx, MobCapcha.cmy + GameScr.cmy, 2, 10, -1));
			GameScr.gI().mobCapcha = null;
			MobCapcha.cmtoX = -GameScr.cmx;
			MobCapcha.cmtoY = -GameScr.cmy;
		}
		g.drawRegion(MobCapcha.imgMob, 0, MobCapcha.f * 40, 40, 40, (MobCapcha.dir != 1) ? 2 : 0, MobCapcha.cmx, MobCapcha.cmy + 3 + ((GameCanvas.gameTick % 10 > 5) ? 1 : 0), 3);
		MobCapcha.moveCamera();
	}

	// Token: 0x060006F5 RID: 1781 RVA: 0x00074DF0 File Offset: 0x00072FF0
	public static void moveCamera()
	{
		bool flag = MobCapcha.cmy != MobCapcha.cmtoY;
		if (flag)
		{
			MobCapcha.cmvy = MobCapcha.cmtoY - MobCapcha.cmy << 2;
			MobCapcha.cmdy += MobCapcha.cmvy;
			MobCapcha.cmy += MobCapcha.cmdy >> 4;
			MobCapcha.cmdy &= 15;
		}
		bool flag2 = MobCapcha.cmx != MobCapcha.cmtoX;
		if (flag2)
		{
			MobCapcha.cmvx = MobCapcha.cmtoX - MobCapcha.cmx << 2;
			MobCapcha.cmdx += MobCapcha.cmvx;
			MobCapcha.cmx += MobCapcha.cmdx >> 4;
			MobCapcha.cmdx &= 15;
		}
		MobCapcha.tF++;
		bool flag3 = MobCapcha.tF == 5;
		if (flag3)
		{
			MobCapcha.tF = 0;
			MobCapcha.f++;
			bool flag4 = MobCapcha.f > 2;
			if (flag4)
			{
				MobCapcha.f = 0;
			}
		}
	}

	// Token: 0x04000CDA RID: 3290
	public static Image imgMob;

	// Token: 0x04000CDB RID: 3291
	public static int cmtoY;

	// Token: 0x04000CDC RID: 3292
	public static int cmy;

	// Token: 0x04000CDD RID: 3293
	public static int cmdy;

	// Token: 0x04000CDE RID: 3294
	public static int cmvy;

	// Token: 0x04000CDF RID: 3295
	public static int cmyLim;

	// Token: 0x04000CE0 RID: 3296
	public static int cmtoX;

	// Token: 0x04000CE1 RID: 3297
	public static int cmx;

	// Token: 0x04000CE2 RID: 3298
	public static int cmdx;

	// Token: 0x04000CE3 RID: 3299
	public static int cmvx;

	// Token: 0x04000CE4 RID: 3300
	public static int cmxLim;

	// Token: 0x04000CE5 RID: 3301
	public static bool explode;

	// Token: 0x04000CE6 RID: 3302
	public static int delay;

	// Token: 0x04000CE7 RID: 3303
	public static bool isCreateMob;

	// Token: 0x04000CE8 RID: 3304
	public static int tF;

	// Token: 0x04000CE9 RID: 3305
	public static int f;

	// Token: 0x04000CEA RID: 3306
	public static int dir;

	// Token: 0x04000CEB RID: 3307
	public static bool isAttack;
}
using System;

// Token: 0x0200008D RID: 141
public class MobTemplate
{
	// Token: 0x04000CEC RID: 3308
	public int mobTemplateId;

	// Token: 0x04000CED RID: 3309
	public sbyte rangeMove;

	// Token: 0x04000CEE RID: 3310
	public sbyte speed;

	// Token: 0x04000CEF RID: 3311
	public sbyte type;

	// Token: 0x04000CF0 RID: 3312
	public long hp;

	// Token: 0x04000CF1 RID: 3313
	public string name;

	// Token: 0x04000CF2 RID: 3314
	public EffectData data;

	// Token: 0x04000CF3 RID: 3315
	public sbyte dartType;
}
using System;

// Token: 0x0200008E RID: 142
public class MoneyCharge : mScreen, IActionListener
{
	// Token: 0x060006F8 RID: 1784 RVA: 0x00074EFC File Offset: 0x000730FC
	public MoneyCharge()
	{
		this.w = GameCanvas.w - 20;
		bool flag = this.w > 320;
		if (flag)
		{
			this.w = 320;
		}
		this.strPaint = mFont.tahoma_7b_green2.splitFontArray(mResources.pay_card, this.w - 20);
		this.x = (GameCanvas.w - this.w) / 2;
		this.y = GameCanvas.h - 150 - (this.strPaint.Length - 1) * 20;
		this.h = 110 + (this.strPaint.Length - 1) * 20;
		this.yP = this.y;
		this.tfSerial = new TField();
		this.tfSerial.name = mResources.SERI_NUM;
		this.tfSerial.x = this.x + 10;
		this.tfSerial.y = this.y + 35 + (this.strPaint.Length - 1) * 20;
		this.yt = this.tfSerial.y;
		this.tfSerial.width = this.w - 20;
		this.tfSerial.height = mScreen.ITEM_HEIGHT + 2;
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.tfSerial.isFocus = false;
		}
		else
		{
			this.tfSerial.isFocus = true;
		}
		this.tfSerial.setIputType(TField.INPUT_TYPE_ANY);
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.tfSerial.showSubTextField = false;
		}
		bool isIPhone = Main.isIPhone;
		if (isIPhone)
		{
			this.tfSerial.isPaintMouse = false;
		}
		bool flag2 = !GameCanvas.isTouch;
		if (flag2)
		{
			this.right = this.tfSerial.cmdClear;
		}
		this.tfCode = new TField();
		this.tfCode.name = mResources.CARD_CODE;
		this.tfCode.x = this.x + 10;
		this.tfCode.y = this.tfSerial.y + 35;
		this.tfCode.width = this.w - 20;
		this.tfCode.height = mScreen.ITEM_HEIGHT + 2;
		this.tfCode.isFocus = false;
		this.tfCode.setIputType(TField.INPUT_TYPE_ANY);
		bool isWindowsPhone2 = Main.isWindowsPhone;
		if (isWindowsPhone2)
		{
			this.tfCode.showSubTextField = false;
		}
		bool isIPhone2 = Main.isIPhone;
		if (isIPhone2)
		{
			this.tfCode.isPaintMouse = false;
		}
		this.left = new Command(mResources.CLOSE, this, 1, null);
		this.center = new Command(mResources.pay_card2, this, 2, null);
		bool isTouch2 = GameCanvas.isTouch;
		if (isTouch2)
		{
			this.center.x = GameCanvas.w / 2 + 18;
			this.left.x = GameCanvas.w / 2 - 85;
			this.center.y = (this.left.y = this.y + this.h + 5);
		}
		this.freeAreaHeight = this.tfSerial.y - (4 * this.tfSerial.height - 10);
		this.yP = this.tfSerial.y;
	}

	// Token: 0x060006F9 RID: 1785 RVA: 0x0007524C File Offset: 0x0007344C
	public static MoneyCharge gI()
	{
		bool flag = MoneyCharge.instance == null;
		if (flag)
		{
			MoneyCharge.instance = new MoneyCharge();
		}
		return MoneyCharge.instance;
	}

	// Token: 0x060006FA RID: 1786 RVA: 0x0007527B File Offset: 0x0007347B
	public override void switchToMe()
	{
		this.focus = 0;
		base.switchToMe();
	}

	// Token: 0x060006FB RID: 1787 RVA: 0x0007528C File Offset: 0x0007348C
	public void updateTfWhenOpenKb()
	{
	}

	// Token: 0x060006FC RID: 1788 RVA: 0x00075290 File Offset: 0x00073490
	public override void paint(mGraphics g)
	{
		GameScr.gI().paint(g);
		PopUp.paintPopUp(g, this.x, this.y, this.w, this.h, -1, true);
		for (int i = 0; i < this.strPaint.Length; i++)
		{
			mFont.tahoma_7b_green2.drawString(g, this.strPaint[i], GameCanvas.w / 2, this.y + 15 + i * 20, mFont.CENTER);
		}
		this.tfSerial.paint(g);
		this.tfCode.paint(g);
		base.paint(g);
	}

	// Token: 0x060006FD RID: 1789 RVA: 0x00075334 File Offset: 0x00073534
	public override void update()
	{
		GameScr.gI().update();
		this.tfSerial.update();
		this.tfCode.update();
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.updateTfWhenOpenKb();
		}
	}

	// Token: 0x060006FE RID: 1790 RVA: 0x00075378 File Offset: 0x00073578
	public override void keyPress(int keyCode)
	{
		bool isFocus = this.tfSerial.isFocus;
		if (isFocus)
		{
			this.tfSerial.keyPressed(keyCode);
		}
		else
		{
			bool isFocus2 = this.tfCode.isFocus;
			if (isFocus2)
			{
				this.tfCode.keyPressed(keyCode);
			}
		}
		base.keyPress(keyCode);
	}

	// Token: 0x060006FF RID: 1791 RVA: 0x000753CC File Offset: 0x000735CC
	public override void updateKey()
	{
		bool flag = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21];
		if (flag)
		{
			this.focus--;
			bool flag2 = this.focus < 0;
			if (flag2)
			{
				this.focus = 1;
			}
		}
		else
		{
			bool flag3 = GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22];
			if (flag3)
			{
				this.focus++;
				bool flag4 = this.focus > 1;
				if (flag4)
				{
					this.focus = 1;
				}
			}
		}
		bool flag5 = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] || GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22];
		if (flag5)
		{
			GameCanvas.clearKeyPressed();
			bool flag6 = this.focus == 1;
			if (flag6)
			{
				this.tfSerial.isFocus = false;
				this.tfCode.isFocus = true;
				bool flag7 = !GameCanvas.isTouch;
				if (flag7)
				{
					this.right = this.tfCode.cmdClear;
				}
			}
			else
			{
				bool flag8 = this.focus == 0;
				if (flag8)
				{
					this.tfSerial.isFocus = true;
					this.tfCode.isFocus = false;
					bool flag9 = !GameCanvas.isTouch;
					if (flag9)
					{
						this.right = this.tfSerial.cmdClear;
					}
				}
				else
				{
					this.tfSerial.isFocus = false;
					this.tfCode.isFocus = false;
				}
			}
		}
		bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
		if (isPointerJustRelease)
		{
			bool flag10 = GameCanvas.isPointerHoldIn(this.tfSerial.x, this.tfSerial.y, this.tfSerial.width, this.tfSerial.height);
			if (flag10)
			{
				this.focus = 0;
			}
			else
			{
				bool flag11 = GameCanvas.isPointerHoldIn(this.tfCode.x, this.tfCode.y, this.tfCode.width, this.tfCode.height);
				if (flag11)
				{
					this.focus = 1;
				}
			}
		}
		base.updateKey();
		GameCanvas.clearKeyPressed();
	}

	// Token: 0x06000700 RID: 1792 RVA: 0x000755DF File Offset: 0x000737DF
	public void clearScreen()
	{
		MoneyCharge.instance = null;
	}

	// Token: 0x06000701 RID: 1793 RVA: 0x000755E8 File Offset: 0x000737E8
	public void perform(int idAction, object p)
	{
		bool flag = idAction == 1;
		if (flag)
		{
			GameScr.instance.switchToMe();
			this.clearScreen();
		}
		bool flag2 = idAction == 2;
		if (flag2)
		{
			bool flag3 = this.tfSerial.getText() == null || this.tfSerial.getText().Equals(string.Empty);
			if (flag3)
			{
				GameCanvas.startOKDlg(mResources.serial_blank);
			}
			else
			{
				bool flag4 = this.tfCode.getText() == null || this.tfCode.getText().Equals(string.Empty);
				if (flag4)
				{
					GameCanvas.startOKDlg(mResources.card_code_blank);
				}
				else
				{
					Service.gI().sendCardInfo(this.tfSerial.getText(), this.tfCode.getText());
					GameScr.instance.switchToMe();
					this.clearScreen();
				}
			}
		}
	}

	// Token: 0x04000CF4 RID: 3316
	public static MoneyCharge instance;

	// Token: 0x04000CF5 RID: 3317
	public TField tfSerial;

	// Token: 0x04000CF6 RID: 3318
	public TField tfCode;

	// Token: 0x04000CF7 RID: 3319
	private int x;

	// Token: 0x04000CF8 RID: 3320
	private int y;

	// Token: 0x04000CF9 RID: 3321
	private int w;

	// Token: 0x04000CFA RID: 3322
	private int h;

	// Token: 0x04000CFB RID: 3323
	private string[] strPaint;

	// Token: 0x04000CFC RID: 3324
	private int focus;

	// Token: 0x04000CFD RID: 3325
	private int yt;

	// Token: 0x04000CFE RID: 3326
	private int freeAreaHeight;

	// Token: 0x04000CFF RID: 3327
	private int yy = GameCanvas.hh - mScreen.ITEM_HEIGHT - 5;

	// Token: 0x04000D00 RID: 3328
	private int yP;
}
using System;

// Token: 0x0200008F RID: 143
public class MonsterDart : Effect2
{
	// Token: 0x06000702 RID: 1794 RVA: 0x000756C0 File Offset: 0x000738C0
	public MonsterDart(int x, int y, bool isBoss, long dame, long dameMp, global::Char c, int dartType)
	{
		this.info = GameScr.darts[dartType];
		this.x = x;
		this.y = y;
		this.isBoss = isBoss;
		this.dame = dame;
		this.dameMp = dameMp;
		this.c = c;
		this.va = this.info.va;
		this.setAngle(Res.angle(c.cx - x, c.cy - y));
		bool flag = x >= GameScr.cmx && x <= GameScr.cmx + GameCanvas.w;
		if (flag)
		{
			SoundMn.gI().mobKame(dartType);
		}
	}

	// Token: 0x06000703 RID: 1795 RVA: 0x0007577C File Offset: 0x0007397C
	public MonsterDart(int x, int y, bool isBoss, long dame, long dameMp, int xTo, int yTo, int dartType)
	{
		this.info = GameScr.darts[dartType];
		this.x = x;
		this.y = y;
		this.isBoss = isBoss;
		this.dame = dame;
		this.dameMp = dameMp;
		this.xTo = xTo;
		this.yTo = yTo;
		this.va = this.info.va;
		this.setAngle(Res.angle(xTo - x, yTo - y));
		bool flag = x >= GameScr.cmx && x <= GameScr.cmx + GameCanvas.w;
		if (flag)
		{
			SoundMn.gI().mobKame(dartType);
		}
		this.c = null;
	}

	// Token: 0x06000704 RID: 1796 RVA: 0x0007583A File Offset: 0x00073A3A
	public void setAngle(int angle)
	{
		this.angle = angle;
		this.vx = this.va * Res.cos(angle) >> 10;
		this.vy = this.va * Res.sin(angle) >> 10;
	}

	// Token: 0x06000705 RID: 1797 RVA: 0x00075870 File Offset: 0x00073A70
	public static void addMonsterDart(int x, int y, bool isBoss, long dame, long dameMp, global::Char c, int dartType)
	{
		Effect2.vEffect2.addElement(new MonsterDart(x, y, isBoss, dame, dameMp, c, dartType));
	}

	// Token: 0x06000706 RID: 1798 RVA: 0x00075890 File Offset: 0x00073A90
	public static void addMonsterDart(int x, int y, bool isBoss, long dame, long dameMp, int xTo, int yTo, int dartType)
	{
		Effect2.vEffect2.addElement(new MonsterDart(x, y, isBoss, dame, dameMp, xTo, yTo, dartType));
	}

	// Token: 0x06000707 RID: 1799 RVA: 0x000758BC File Offset: 0x00073ABC
	public override void update()
	{
		for (int i = 0; i < (int)this.info.nUpdate; i++)
		{
			bool flag = this.info.tail.Length != 0;
			if (flag)
			{
				this.darts.addElement(new SmallDart(this.x, this.y));
			}
			this.dx = ((this.c == null) ? this.xTo : this.c.cx) - this.x;
			this.dy = ((this.c == null) ? this.yTo : this.c.cy) - 10 - this.y;
			int num = 60;
			bool flag2 = TileMap.mapID == 0;
			if (flag2)
			{
				num = 600;
			}
			this.life++;
			bool flag3 = (this.c != null && (this.c.statusMe == 5 || this.c.statusMe == 14)) || this.c == null;
			if (flag3)
			{
				this.x += (((this.c == null) ? this.xTo : this.c.cx) - this.x) / 2;
				this.y += (((this.c == null) ? this.yTo : this.c.cy) - this.y) / 2;
			}
			bool flag4 = (Res.abs(this.dx) < 16 && Res.abs(this.dy) < 16) || this.life > num;
			if (flag4)
			{
				bool flag5 = this.c != null && this.c.charID >= 0 && this.dameMp != -1L;
				if (flag5)
				{
					bool flag6 = this.dameMp != -100L;
					if (flag6)
					{
						this.c.doInjure(this.dame, this.dameMp, false, true);
					}
					else
					{
						ServerEffect.addServerEffect(80, this.c, 1);
					}
				}
				Effect2.vEffect2.removeElement(this);
				bool flag7 = this.dameMp != -100L;
				if (flag7)
				{
					ServerEffect.addServerEffect(81, this.c, 1);
					bool flag8 = this.x >= GameScr.cmx && this.x <= GameScr.cmx + GameCanvas.w;
					if (flag8)
					{
						SoundMn.gI().explode_2();
					}
				}
			}
			int num2 = Res.angle(this.dx, this.dy);
			bool flag9 = global::Math.abs(num2 - this.angle) < 90 || this.dx * this.dx + this.dy * this.dy > 4096;
			if (flag9)
			{
				bool flag10 = global::Math.abs(num2 - this.angle) < 15;
				if (flag10)
				{
					this.angle = num2;
				}
				else
				{
					bool flag11 = (num2 - this.angle >= 0 && num2 - this.angle < 180) || num2 - this.angle < -180;
					if (flag11)
					{
						this.angle = Res.fixangle(this.angle + 15);
					}
					else
					{
						this.angle = Res.fixangle(this.angle - 15);
					}
				}
			}
			bool flag12 = !this.isSpeedUp && this.va < 8192;
			if (flag12)
			{
				this.va += 1024;
			}
			this.vx = this.va * Res.cos(this.angle) >> 10;
			this.vy = this.va * Res.sin(this.angle) >> 10;
			this.dx += this.vx;
			int num3 = this.dx >> 10;
			this.x += num3;
			this.dx &= 1023;
			this.dy += this.vy;
			int num4 = this.dy >> 10;
			this.y += num4;
			this.dy &= 1023;
		}
		for (int j = 0; j < this.darts.size(); j++)
		{
			SmallDart smallDart = (SmallDart)this.darts.elementAt(j);
			smallDart.index++;
			bool flag13 = smallDart.index >= this.info.tail.Length;
			if (flag13)
			{
				this.darts.removeElementAt(j);
			}
		}
	}

	// Token: 0x06000708 RID: 1800 RVA: 0x00075D74 File Offset: 0x00073F74
	public static int findDirIndexFromAngle(int angle)
	{
		for (int i = 0; i < MonsterDart.ARROWINDEX.Length - 1; i++)
		{
			bool flag = angle >= MonsterDart.ARROWINDEX[i] && angle <= MonsterDart.ARROWINDEX[i + 1];
			if (flag)
			{
				bool flag2 = i >= 16;
				int result;
				if (flag2)
				{
					result = 0;
				}
				else
				{
					result = i;
				}
				return result;
			}
		}
		return 0;
	}

	// Token: 0x06000709 RID: 1801 RVA: 0x00075DDC File Offset: 0x00073FDC
	public override void paint(mGraphics g)
	{
		int num = MonsterDart.findDirIndexFromAngle(360 - this.angle);
		int num2 = (int)MonsterDart.FRAME[num];
		int transform = MonsterDart.TRANSFORM[num];
		for (int i = this.darts.size() / 2; i < this.darts.size(); i++)
		{
			SmallDart smallDart = (SmallDart)this.darts.elementAt(i);
			SmallImage.drawSmallImage(g, (int)this.info.tailBorder[smallDart.index], smallDart.x, smallDart.y, 0, 3);
		}
		int num3 = GameCanvas.gameTick % this.info.headBorder.Length;
		SmallImage.drawSmallImage(g, (int)this.info.headBorder[num3][num2], this.x, this.y, transform, 3);
		for (int j = 0; j < this.darts.size(); j++)
		{
			SmallDart smallDart2 = (SmallDart)this.darts.elementAt(j);
			SmallImage.drawSmallImage(g, (int)this.info.tail[smallDart2.index], smallDart2.x, smallDart2.y, 0, 3);
		}
		SmallImage.drawSmallImage(g, (int)this.info.head[num3][num2], this.x, this.y, transform, 3);
		for (int k = 0; k < this.darts.size(); k++)
		{
			SmallDart smallDart3 = (SmallDart)this.darts.elementAt(k);
			bool flag = Res.abs(MonsterDart.r.nextInt(100)) < (int)this.info.xdPercent;
			if (flag)
			{
				SmallImage.drawSmallImage(g, (int)((GameCanvas.gameTick % 2 != 0) ? this.info.xd2[smallDart3.index] : this.info.xd1[smallDart3.index]), smallDart3.x, smallDart3.y, 0, 3);
			}
		}
	}

	// Token: 0x0600070A RID: 1802 RVA: 0x00075FDE File Offset: 0x000741DE
	public static void addMonsterDart(int x2, int y2, bool checkIsBoss, int dame2, int dameMp2, Mob mobToAttack, sbyte dartType)
	{
		MonsterDart.addMonsterDart(x2, y2, checkIsBoss, (long)dame2, (long)dameMp2, mobToAttack.x, mobToAttack.y, (int)dartType);
	}

	// Token: 0x04000D01 RID: 3329
	public int va;

	// Token: 0x04000D02 RID: 3330
	private DartInfo info;

	// Token: 0x04000D03 RID: 3331
	public static MyRandom r = new MyRandom();

	// Token: 0x04000D04 RID: 3332
	public int angle;

	// Token: 0x04000D05 RID: 3333
	public int vx;

	// Token: 0x04000D06 RID: 3334
	public int vy;

	// Token: 0x04000D07 RID: 3335
	public int x;

	// Token: 0x04000D08 RID: 3336
	public int y;

	// Token: 0x04000D09 RID: 3337
	public int z;

	// Token: 0x04000D0A RID: 3338
	public int xTo;

	// Token: 0x04000D0B RID: 3339
	public int yTo;

	// Token: 0x04000D0C RID: 3340
	private int life;

	// Token: 0x04000D0D RID: 3341
	public bool isSpeedUp;

	// Token: 0x04000D0E RID: 3342
	public long dame;

	// Token: 0x04000D0F RID: 3343
	public long dameMp;

	// Token: 0x04000D10 RID: 3344
	public global::Char c;

	// Token: 0x04000D11 RID: 3345
	public bool isBoss;

	// Token: 0x04000D12 RID: 3346
	public MyVector darts = new MyVector();

	// Token: 0x04000D13 RID: 3347
	private int dx;

	// Token: 0x04000D14 RID: 3348
	private int dy;

	// Token: 0x04000D15 RID: 3349
	public static int[] ARROWINDEX = new int[]
	{
		0,
		15,
		37,
		52,
		75,
		105,
		127,
		142,
		165,
		195,
		217,
		232,
		255,
		285,
		307,
		322,
		345,
		370
	};

	// Token: 0x04000D16 RID: 3350
	public static int[] TRANSFORM = new int[]
	{
		0,
		0,
		0,
		7,
		6,
		6,
		6,
		2,
		2,
		3,
		3,
		4,
		5,
		5,
		5,
		1
	};

	// Token: 0x04000D17 RID: 3351
	public static sbyte[] FRAME = new sbyte[]
	{
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0,
		1,
		2,
		1,
		0
	};
}
using System;

// Token: 0x02000090 RID: 144
public class MotherCanvas
{
	// Token: 0x0600070C RID: 1804 RVA: 0x0007605C File Offset: 0x0007425C
	public MotherCanvas()
	{
		this.checkZoomLevel(this.getWidth(), this.getHeight());
	}

	// Token: 0x0600070D RID: 1805 RVA: 0x00076088 File Offset: 0x00074288
	public void checkZoomLevel(int w, int h)
	{
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			mGraphics.zoomLevel = 2;
			bool flag = w * h >= 2073600;
			if (flag)
			{
				mGraphics.zoomLevel = 4;
			}
			else
			{
				bool flag2 = w * h > 384000;
				if (flag2)
				{
					mGraphics.zoomLevel = 3;
				}
			}
		}
		else
		{
			bool flag3 = !Main.isPC;
			if (flag3)
			{
				bool isIpod = Main.isIpod;
				if (isIpod)
				{
					mGraphics.zoomLevel = 2;
				}
				else
				{
					bool flag4 = w * h >= 2073600;
					if (flag4)
					{
						mGraphics.zoomLevel = 4;
					}
					else
					{
						bool flag5 = w * h >= 691200;
						if (flag5)
						{
							mGraphics.zoomLevel = 3;
						}
						else
						{
							bool flag6 = w * h > 153600;
							if (flag6)
							{
								mGraphics.zoomLevel = 2;
							}
						}
					}
				}
			}
			else
			{
				mGraphics.zoomLevel = 2;
				bool flag7 = w * h < 480000;
				if (flag7)
				{
					mGraphics.zoomLevel = 1;
				}
			}
		}
	}

	// Token: 0x0600070E RID: 1806 RVA: 0x00076174 File Offset: 0x00074374
	public int getWidth()
	{
		return (int)ScaleGUI.WIDTH;
	}

	// Token: 0x0600070F RID: 1807 RVA: 0x0007618C File Offset: 0x0007438C
	public int getHeight()
	{
		return (int)ScaleGUI.HEIGHT;
	}

	// Token: 0x06000710 RID: 1808 RVA: 0x000761A4 File Offset: 0x000743A4
	public void setChildCanvas(GameCanvas tCanvas)
	{
		this.tCanvas = tCanvas;
	}

	// Token: 0x06000711 RID: 1809 RVA: 0x000761AE File Offset: 0x000743AE
	protected void paint(mGraphics g)
	{
		this.tCanvas.paint(g);
	}

	// Token: 0x06000712 RID: 1810 RVA: 0x000761BE File Offset: 0x000743BE
	protected void keyPressed(int keyCode)
	{
		this.tCanvas.keyPressedz(keyCode);
	}

	// Token: 0x06000713 RID: 1811 RVA: 0x000761CE File Offset: 0x000743CE
	protected void keyReleased(int keyCode)
	{
		this.tCanvas.keyReleasedz(keyCode);
	}

	// Token: 0x06000714 RID: 1812 RVA: 0x000761DE File Offset: 0x000743DE
	protected void pointerDragged(int x, int y)
	{
		x /= mGraphics.zoomLevel;
		y /= mGraphics.zoomLevel;
		this.tCanvas.pointerDragged(x, y);
	}

	// Token: 0x06000715 RID: 1813 RVA: 0x00076201 File Offset: 0x00074401
	protected void pointerPressed(int x, int y)
	{
		x /= mGraphics.zoomLevel;
		y /= mGraphics.zoomLevel;
		this.tCanvas.pointerPressed(x, y);
	}

	// Token: 0x06000716 RID: 1814 RVA: 0x00076224 File Offset: 0x00074424
	protected void pointerReleased(int x, int y)
	{
		x /= mGraphics.zoomLevel;
		y /= mGraphics.zoomLevel;
		this.tCanvas.pointerReleased(x, y);
	}

	// Token: 0x06000717 RID: 1815 RVA: 0x00076248 File Offset: 0x00074448
	public int getWidthz()
	{
		int width = this.getWidth();
		return width / mGraphics.zoomLevel + width % mGraphics.zoomLevel;
	}

	// Token: 0x06000718 RID: 1816 RVA: 0x00076270 File Offset: 0x00074470
	public int getHeightz()
	{
		int height = this.getHeight();
		return height / mGraphics.zoomLevel + height % mGraphics.zoomLevel;
	}

	// Token: 0x04000D18 RID: 3352
	public static MotherCanvas instance;

	// Token: 0x04000D19 RID: 3353
	public GameCanvas tCanvas;

	// Token: 0x04000D1A RID: 3354
	public int zoomLevel = 1;

	// Token: 0x04000D1B RID: 3355
	public Image imgCache;

	// Token: 0x04000D1C RID: 3356
	private int[] imgRGBCache;

	// Token: 0x04000D1D RID: 3357
	private int newWidth;

	// Token: 0x04000D1E RID: 3358
	private int newHeight;

	// Token: 0x04000D1F RID: 3359
	private int[] output;

	// Token: 0x04000D20 RID: 3360
	private int OUTPUTSIZE = 20;
}
using System;

// Token: 0x02000091 RID: 145
public class MovePoint
{
	// Token: 0x06000719 RID: 1817 RVA: 0x00076298 File Offset: 0x00074498
	public MovePoint(int xEnd, int yEnd, int act, int dir)
	{
		this.xEnd = xEnd;
		this.yEnd = yEnd;
		this.dir = dir;
		this.status = act;
	}

	// Token: 0x0600071A RID: 1818 RVA: 0x000762BF File Offset: 0x000744BF
	public MovePoint(int xEnd, int yEnd)
	{
		this.xEnd = xEnd;
		this.yEnd = yEnd;
	}

	// Token: 0x04000D21 RID: 3361
	public int xEnd;

	// Token: 0x04000D22 RID: 3362
	public int yEnd;

	// Token: 0x04000D23 RID: 3363
	public int dir;

	// Token: 0x04000D24 RID: 3364
	public int cvx;

	// Token: 0x04000D25 RID: 3365
	public int cvy;

	// Token: 0x04000D26 RID: 3366
	public int status;
}
using System;

// Token: 0x02000092 RID: 146
public class mResources
{
	// Token: 0x0600071B RID: 1819 RVA: 0x000762D7 File Offset: 0x000744D7
	public static void loadLanguague()
	{
		mResources.loadLanguague(1);
	}

	// Token: 0x0600071C RID: 1820 RVA: 0x000762E4 File Offset: 0x000744E4
	public static void loadLanguague(sbyte newLanguage)
	{
		mResources.language = newLanguage;
		switch (mResources.language)
		{
		case 0:
			LoginScr.imgTitle = GameCanvas.loadImage("/mainImage/logo1.png");
			T1.load();
			ServerListScreen.linkweb = "http://ngocrongonline.com";
			break;
		case 1:
			LoginScr.imgTitle = GameCanvas.loadImage("/mainImage/logo1E.png");
			T2.load();
			ServerListScreen.linkweb = "http://world.teamobi.com";
			break;
		case 2:
			LoginScr.imgTitle = GameCanvas.loadImage("/mainImage/logo1E.png");
			T3.load();
			ServerListScreen.linkweb = "http://dragonball.indonaga.com";
			break;
		}
	}

	// Token: 0x0600071D RID: 1821 RVA: 0x00076378 File Offset: 0x00074578
	public static string replace(string str, string replacement)
	{
		return NinjaUtil.replace(str, "#", replacement);
	}

	// Token: 0x04000D27 RID: 3367
	public static string chooseDefaultsv = string.Empty;

	// Token: 0x04000D28 RID: 3368
	public static string winLose = string.Empty;

	// Token: 0x04000D29 RID: 3369
	public static string learnSkill = string.Empty;

	// Token: 0x04000D2A RID: 3370
	public static string updSkill = string.Empty;

	// Token: 0x04000D2B RID: 3371
	public static string proficiency = string.Empty;

	// Token: 0x04000D2C RID: 3372
	public static string delacc = string.Empty;

	// Token: 0x04000D2D RID: 3373
	public static string notiINAPP = string.Empty;

	// Token: 0x04000D2E RID: 3374
	public static string notiRuby = string.Empty;

	// Token: 0x04000D2F RID: 3375
	public static string equip = string.Empty;

	// Token: 0x04000D30 RID: 3376
	public static string unlock = string.Empty;

	// Token: 0x04000D31 RID: 3377
	public static string radaCard = string.Empty;

	// Token: 0x04000D32 RID: 3378
	public static string not_enough_money_1 = string.Empty;

	// Token: 0x04000D33 RID: 3379
	public static string napngoc = string.Empty;

	// Token: 0x04000D34 RID: 3380
	public static string functionMaintain1 = string.Empty;

	// Token: 0x04000D35 RID: 3381
	public static string tang;

	// Token: 0x04000D36 RID: 3382
	public static string kquaVongQuay;

	// Token: 0x04000D37 RID: 3383
	public static string useGem;

	// Token: 0x04000D38 RID: 3384
	public static string autoFunction;

	// Token: 0x04000D39 RID: 3385
	public static string choitiep;

	// Token: 0x04000D3A RID: 3386
	public static string attack;

	// Token: 0x04000D3B RID: 3387
	public static string defend;

	// Token: 0x04000D3C RID: 3388
	public static string follow;

	// Token: 0x04000D3D RID: 3389
	public static string status;

	// Token: 0x04000D3E RID: 3390
	public static string gohome;

	// Token: 0x04000D3F RID: 3391
	public static string pet;

	// Token: 0x04000D40 RID: 3392
	public static string maychutathoacmatsong;

	// Token: 0x04000D41 RID: 3393
	public static string cauhinhthap;

	// Token: 0x04000D42 RID: 3394
	public static string cauhinhcao;

	// Token: 0x04000D43 RID: 3395
	public static string combineSpell;

	// Token: 0x04000D44 RID: 3396
	public static string combineFail;

	// Token: 0x04000D45 RID: 3397
	public static string combineSuccess;

	// Token: 0x04000D46 RID: 3398
	public static string turnOnAnalog;

	// Token: 0x04000D47 RID: 3399
	public static string turnOffAnalog;

	// Token: 0x04000D48 RID: 3400
	public static string analog;

	// Token: 0x04000D49 RID: 3401
	public static string inventory_Pass;

	// Token: 0x04000D4A RID: 3402
	public static string input_Inventory_Pass;

	// Token: 0x04000D4B RID: 3403
	public static string input_Inventory_Pass_wrong = string.Empty;

	// Token: 0x04000D4C RID: 3404
	public static string REGISTOPROTECT = string.Empty;

	// Token: 0x04000D4D RID: 3405
	public static string turnOnSound = string.Empty;

	// Token: 0x04000D4E RID: 3406
	public static string turnOffSound = string.Empty;

	// Token: 0x04000D4F RID: 3407
	public static string REGISTERING = string.Empty;

	// Token: 0x04000D50 RID: 3408
	public static string SENDINGMSG = string.Empty;

	// Token: 0x04000D51 RID: 3409
	public static string SENTMSG = string.Empty;

	// Token: 0x04000D52 RID: 3410
	public static string NOSENDMSG = string.Empty;

	// Token: 0x04000D53 RID: 3411
	public static string sendMsgSuccess = string.Empty;

	// Token: 0x04000D54 RID: 3412
	public static string cannotSendMsg = string.Empty;

	// Token: 0x04000D55 RID: 3413
	public static string sendGuessMsgSuccess = string.Empty;

	// Token: 0x04000D56 RID: 3414
	public static string sendMsgFail = string.Empty;

	// Token: 0x04000D57 RID: 3415
	public static string ALERT_PRIVATE_PASS_1 = string.Empty;

	// Token: 0x04000D58 RID: 3416
	public static string ALERT_PRIVATE_PASS_2 = string.Empty;

	// Token: 0x04000D59 RID: 3417
	public static string INPUT_PRIVATE_PASS = string.Empty;

	// Token: 0x04000D5A RID: 3418
	public static string change_account = string.Empty;

	// Token: 0x04000D5B RID: 3419
	public static string alreadyHadAccount1 = string.Empty;

	// Token: 0x04000D5C RID: 3420
	public static string alreadyHadAccount2 = string.Empty;

	// Token: 0x04000D5D RID: 3421
	public static string userBlank = string.Empty;

	// Token: 0x04000D5E RID: 3422
	public static string passwordBlank = string.Empty;

	// Token: 0x04000D5F RID: 3423
	public static string accTooShort = string.Empty;

	// Token: 0x04000D60 RID: 3424
	public static string phoneInvalid = string.Empty;

	// Token: 0x04000D61 RID: 3425
	public static string emailInvalid = string.Empty;

	// Token: 0x04000D62 RID: 3426
	public static string registerNewAcc = string.Empty;

	// Token: 0x04000D63 RID: 3427
	public static string selectServer = string.Empty;

	// Token: 0x04000D64 RID: 3428
	public static string selectServer2 = string.Empty;

	// Token: 0x04000D65 RID: 3429
	public static string forgetPass = string.Empty;

	// Token: 0x04000D66 RID: 3430
	public static string password = string.Empty;

	// Token: 0x04000D67 RID: 3431
	public static string[] LOGINLABELS = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D68 RID: 3432
	public static string msg = string.Empty;

	// Token: 0x04000D69 RID: 3433
	public static string[] msgg = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D6A RID: 3434
	public static string no_msg = string.Empty;

	// Token: 0x04000D6B RID: 3435
	public static string cancelAccountProtection = string.Empty;

	// Token: 0x04000D6C RID: 3436
	public static string plsCheckAcc = string.Empty;

	// Token: 0x04000D6D RID: 3437
	public static string phone = string.Empty;

	// Token: 0x04000D6E RID: 3438
	public static string email = string.Empty;

	// Token: 0x04000D6F RID: 3439
	public static string acc = string.Empty;

	// Token: 0x04000D70 RID: 3440
	public static string pwd = string.Empty;

	// Token: 0x04000D71 RID: 3441
	public static string goToWebForPassword = string.Empty;

	// Token: 0x04000D72 RID: 3442
	public static string dragon_ball = string.Empty;

	// Token: 0x04000D73 RID: 3443
	public static string character = string.Empty;

	// Token: 0x04000D74 RID: 3444
	public static string account = string.Empty;

	// Token: 0x04000D75 RID: 3445
	public static string account_server = string.Empty;

	// Token: 0x04000D76 RID: 3446
	public static string char_name_blank = string.Empty;

	// Token: 0x04000D77 RID: 3447
	public static string char_name_short = string.Empty;

	// Token: 0x04000D78 RID: 3448
	public static string char_name_long = string.Empty;

	// Token: 0x04000D79 RID: 3449
	public static string changeNameChar = string.Empty;

	// Token: 0x04000D7A RID: 3450
	public static string char_name = string.Empty;

	// Token: 0x04000D7B RID: 3451
	public static string login = string.Empty;

	// Token: 0x04000D7C RID: 3452
	public static string login2 = string.Empty;

	// Token: 0x04000D7D RID: 3453
	public static string register = string.Empty;

	// Token: 0x04000D7E RID: 3454
	public static string WAIT = string.Empty;

	// Token: 0x04000D7F RID: 3455
	public static string PLEASEWAIT = string.Empty;

	// Token: 0x04000D80 RID: 3456
	public static string CONNECTING = string.Empty;

	// Token: 0x04000D81 RID: 3457
	public static string LOGGING = string.Empty;

	// Token: 0x04000D82 RID: 3458
	public static string LOADING = string.Empty;

	// Token: 0x04000D83 RID: 3459
	public static string downloading_data = string.Empty;

	// Token: 0x04000D84 RID: 3460
	public static string select_server = string.Empty;

	// Token: 0x04000D85 RID: 3461
	public static string pls_restart_game_error = string.Empty;

	// Token: 0x04000D86 RID: 3462
	public static string pls_restart_game_error2 = string.Empty;

	// Token: 0x04000D87 RID: 3463
	public static string lost_connection = string.Empty;

	// Token: 0x04000D88 RID: 3464
	public static string check_3G = string.Empty;

	// Token: 0x04000D89 RID: 3465
	public static string UPDATE = string.Empty;

	// Token: 0x04000D8A RID: 3466
	public static string change_zone = string.Empty;

	// Token: 0x04000D8B RID: 3467
	public static string select_zone = string.Empty;

	// Token: 0x04000D8C RID: 3468
	public static string website = string.Empty;

	// Token: 0x04000D8D RID: 3469
	public static string server = string.Empty;

	// Token: 0x04000D8E RID: 3470
	public static string planet = string.Empty;

	// Token: 0x04000D8F RID: 3471
	public static string[] MENUME = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D90 RID: 3472
	public static string[] MENUNEWCHAR = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D91 RID: 3473
	public static string[] MENUGENDER = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D92 RID: 3474
	public static string[] CHAR_ORDER = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D93 RID: 3475
	public static string[][] mainTab1 = new string[][]
	{
		new string[]
		{
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty
		}
	};

	// Token: 0x04000D94 RID: 3476
	public static string[][] mainTab2 = new string[][]
	{
		new string[]
		{
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty
		}
	};

	// Token: 0x04000D95 RID: 3477
	public static string[][] petMainTab = new string[][]
	{
		new string[]
		{
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty
		}
	};

	// Token: 0x04000D96 RID: 3478
	public static string[][] petMainTab2 = new string[][]
	{
		new string[]
		{
			string.Empty,
			string.Empty
		}
	};

	// Token: 0x04000D97 RID: 3479
	public static string[] key_skill_qwerty = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D98 RID: 3480
	public static string[] key_skill = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D99 RID: 3481
	public static string SKILL_FAIL = string.Empty;

	// Token: 0x04000D9A RID: 3482
	public static string HP_EMPTY = string.Empty;

	// Token: 0x04000D9B RID: 3483
	public static string ZONE_HERE = string.Empty;

	// Token: 0x04000D9C RID: 3484
	public static string[] DES_TASK = new string[]
	{
		" ",
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D9D RID: 3485
	public static string[] DIES = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D9E RID: 3486
	public static string[] SYNTHESIS = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000D9F RID: 3487
	public static string[] tips = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000DA0 RID: 3488
	public static string TASK_INPUT_CLASS = string.Empty;

	// Token: 0x04000DA1 RID: 3489
	public static string SERI_NUM = string.Empty;

	// Token: 0x04000DA2 RID: 3490
	public static string CARD_CODE = string.Empty;

	// Token: 0x04000DA3 RID: 3491
	public static string pay_card = string.Empty;

	// Token: 0x04000DA4 RID: 3492
	public static string pay_card2 = string.Empty;

	// Token: 0x04000DA5 RID: 3493
	public static string serial_blank = string.Empty;

	// Token: 0x04000DA6 RID: 3494
	public static string card_code_blank = string.Empty;

	// Token: 0x04000DA7 RID: 3495
	public static string billion = string.Empty;

	// Token: 0x04000DA8 RID: 3496
	public static string million = string.Empty;

	// Token: 0x04000DA9 RID: 3497
	public static string MENU = string.Empty;

	// Token: 0x04000DAA RID: 3498
	public static string CLOSE = string.Empty;

	// Token: 0x04000DAB RID: 3499
	public static string ON = string.Empty;

	// Token: 0x04000DAC RID: 3500
	public static string OFF = string.Empty;

	// Token: 0x04000DAD RID: 3501
	public static string ENABLE = string.Empty;

	// Token: 0x04000DAE RID: 3502
	public static string DELETE = string.Empty;

	// Token: 0x04000DAF RID: 3503
	public static string VIEW = string.Empty;

	// Token: 0x04000DB0 RID: 3504
	public static string CONTINUE = string.Empty;

	// Token: 0x04000DB1 RID: 3505
	public static string NEXTSTEP = string.Empty;

	// Token: 0x04000DB2 RID: 3506
	public static string USE = string.Empty;

	// Token: 0x04000DB3 RID: 3507
	public static string SORT = string.Empty;

	// Token: 0x04000DB4 RID: 3508
	public static string YES = string.Empty;

	// Token: 0x04000DB5 RID: 3509
	public static string NO = string.Empty;

	// Token: 0x04000DB6 RID: 3510
	public static string EXIT = string.Empty;

	// Token: 0x04000DB7 RID: 3511
	public static string CHAT = string.Empty;

	// Token: 0x04000DB8 RID: 3512
	public static string REVENGE = string.Empty;

	// Token: 0x04000DB9 RID: 3513
	public static string OK = string.Empty;

	// Token: 0x04000DBA RID: 3514
	public static string retry = string.Empty;

	// Token: 0x04000DBB RID: 3515
	public static string uncheck = string.Empty;

	// Token: 0x04000DBC RID: 3516
	public static string remember = string.Empty;

	// Token: 0x04000DBD RID: 3517
	public static string ACCEPT = string.Empty;

	// Token: 0x04000DBE RID: 3518
	public static string CANCEL = string.Empty;

	// Token: 0x04000DBF RID: 3519
	public static string SELECT = string.Empty;

	// Token: 0x04000DC0 RID: 3520
	public static string enter = string.Empty;

	// Token: 0x04000DC1 RID: 3521
	public static string open_link = string.Empty;

	// Token: 0x04000DC2 RID: 3522
	public static string DOYOUWANTEXIT = string.Empty;

	// Token: 0x04000DC3 RID: 3523
	public static string NEWCHAR = string.Empty;

	// Token: 0x04000DC4 RID: 3524
	public static string BACK = string.Empty;

	// Token: 0x04000DC5 RID: 3525
	public static string LOCKED = string.Empty;

	// Token: 0x04000DC6 RID: 3526
	public static string KILL = string.Empty;

	// Token: 0x04000DC7 RID: 3527
	public static string KILLBOSS = string.Empty;

	// Token: 0x04000DC8 RID: 3528
	public static string NOLOCK = string.Empty;

	// Token: 0x04000DC9 RID: 3529
	public static string XU = string.Empty;

	// Token: 0x04000DCA RID: 3530
	public static string LUONG = string.Empty;

	// Token: 0x04000DCB RID: 3531
	public static string RUBY = string.Empty;

	// Token: 0x04000DCC RID: 3532
	public static string PK_NOW = string.Empty;

	// Token: 0x04000DCD RID: 3533
	public static string CUU_SAT = string.Empty;

	// Token: 0x04000DCE RID: 3534
	public static string NOT_ENOUGH_MP = string.Empty;

	// Token: 0x04000DCF RID: 3535
	public static string you_receive = string.Empty;

	// Token: 0x04000DD0 RID: 3536
	public static string MONTH = string.Empty;

	// Token: 0x04000DD1 RID: 3537
	public static string WEEK = string.Empty;

	// Token: 0x04000DD2 RID: 3538
	public static string DAY = string.Empty;

	// Token: 0x04000DD3 RID: 3539
	public static string HOUR = string.Empty;

	// Token: 0x04000DD4 RID: 3540
	public static string SECOND = string.Empty;

	// Token: 0x04000DD5 RID: 3541
	public static string MINUTE = string.Empty;

	// Token: 0x04000DD6 RID: 3542
	public static string LEARN_SKILL = string.Empty;

	// Token: 0x04000DD7 RID: 3543
	public static string rank = string.Empty;

	// Token: 0x04000DD8 RID: 3544
	public static string active_point = string.Empty;

	// Token: 0x04000DD9 RID: 3545
	public static string friend = string.Empty;

	// Token: 0x04000DDA RID: 3546
	public static string enemy = string.Empty;

	// Token: 0x04000DDB RID: 3547
	public static string no_friend = string.Empty;

	// Token: 0x04000DDC RID: 3548
	public static string chat_world = string.Empty;

	// Token: 0x04000DDD RID: 3549
	public static string change_flag = string.Empty;

	// Token: 0x04000DDE RID: 3550
	public static string gameInfo = string.Empty;

	// Token: 0x04000DDF RID: 3551
	public static string quayso = string.Empty;

	// Token: 0x04000DE0 RID: 3552
	public static string option = string.Empty;

	// Token: 0x04000DE1 RID: 3553
	public static string high = string.Empty;

	// Token: 0x04000DE2 RID: 3554
	public static string medium = string.Empty;

	// Token: 0x04000DE3 RID: 3555
	public static string low = string.Empty;

	// Token: 0x04000DE4 RID: 3556
	public static string increase_vga = string.Empty;

	// Token: 0x04000DE5 RID: 3557
	public static string decrease_vga = string.Empty;

	// Token: 0x04000DE6 RID: 3558
	public static string serverchat_off = string.Empty;

	// Token: 0x04000DE7 RID: 3559
	public static string serverchat_on = string.Empty;

	// Token: 0x04000DE8 RID: 3560
	public static string x2Screen = string.Empty;

	// Token: 0x04000DE9 RID: 3561
	public static string x1Screen = string.Empty;

	// Token: 0x04000DEA RID: 3562
	public static string changeSizeScreen = string.Empty;

	// Token: 0x04000DEB RID: 3563
	public static string aura_off = string.Empty;

	// Token: 0x04000DEC RID: 3564
	public static string aura_on = string.Empty;

	// Token: 0x04000DED RID: 3565
	public static string aura_off_2 = string.Empty;

	// Token: 0x04000DEE RID: 3566
	public static string aura_on_2 = string.Empty;

	// Token: 0x04000DEF RID: 3567
	public static string hat_off = string.Empty;

	// Token: 0x04000DF0 RID: 3568
	public static string hat_on = string.Empty;

	// Token: 0x04000DF1 RID: 3569
	public static string chest = string.Empty;

	// Token: 0x04000DF2 RID: 3570
	public static string[] chestt = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000DF3 RID: 3571
	public static string[] inventory = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000DF4 RID: 3572
	public static string[] combine = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000DF5 RID: 3573
	public static string[] mapp = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000DF6 RID: 3574
	public static string[] item_give = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000DF7 RID: 3575
	public static string[] item_receive = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000DF8 RID: 3576
	public static string[] zonee = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000DF9 RID: 3577
	public static string zone = string.Empty;

	// Token: 0x04000DFA RID: 3578
	public static string map = string.Empty;

	// Token: 0x04000DFB RID: 3579
	public static string item_receive2 = string.Empty;

	// Token: 0x04000DFC RID: 3580
	public static string item = string.Empty;

	// Token: 0x04000DFD RID: 3581
	public static string give_upper = string.Empty;

	// Token: 0x04000DFE RID: 3582
	public static string receive_upper = string.Empty;

	// Token: 0x04000DFF RID: 3583
	public static string receive_all = string.Empty;

	// Token: 0x04000E00 RID: 3584
	public static string no_map = string.Empty;

	// Token: 0x04000E01 RID: 3585
	public static string go_to_quest = string.Empty;

	// Token: 0x04000E02 RID: 3586
	public static string from_earth = string.Empty;

	// Token: 0x04000E03 RID: 3587
	public static string from_namec = string.Empty;

	// Token: 0x04000E04 RID: 3588
	public static string from_sayda = string.Empty;

	// Token: 0x04000E05 RID: 3589
	public static string expire = string.Empty;

	// Token: 0x04000E06 RID: 3590
	public static string pow_request = string.Empty;

	// Token: 0x04000E07 RID: 3591
	public static string your_pow = string.Empty;

	// Token: 0x04000E08 RID: 3592
	public static string used = string.Empty;

	// Token: 0x04000E09 RID: 3593
	public static string place = string.Empty;

	// Token: 0x04000E0A RID: 3594
	public static string FOREVER = string.Empty;

	// Token: 0x04000E0B RID: 3595
	public static string NOUPGRADE = string.Empty;

	// Token: 0x04000E0C RID: 3596
	public static string NOTUPGRADE = string.Empty;

	// Token: 0x04000E0D RID: 3597
	public static string UPGRADE = string.Empty;

	// Token: 0x04000E0E RID: 3598
	public static string UPGRADING = string.Empty;

	// Token: 0x04000E0F RID: 3599
	public static string make_shortcut = string.Empty;

	// Token: 0x04000E10 RID: 3600
	public static string into_place = string.Empty;

	// Token: 0x04000E11 RID: 3601
	public static string move_to_chest = string.Empty;

	// Token: 0x04000E12 RID: 3602
	public static string move_to_chest2 = string.Empty;

	// Token: 0x04000E13 RID: 3603
	public static string press_chat_querty = string.Empty;

	// Token: 0x04000E14 RID: 3604
	public static string press_chat = string.Empty;

	// Token: 0x04000E15 RID: 3605
	public static string saying = string.Empty;

	// Token: 0x04000E16 RID: 3606
	public static string miss = string.Empty;

	// Token: 0x04000E17 RID: 3607
	public static string donate = string.Empty;

	// Token: 0x04000E18 RID: 3608
	public static string receive = string.Empty;

	// Token: 0x04000E19 RID: 3609
	public static string press_twice = string.Empty;

	// Token: 0x04000E1A RID: 3610
	public static string can_harvest = string.Empty;

	// Token: 0x04000E1B RID: 3611
	public static string do_accept_qwerty = string.Empty;

	// Token: 0x04000E1C RID: 3612
	public static string do_accept = string.Empty;

	// Token: 0x04000E1D RID: 3613
	public static string plsRestartGame = string.Empty;

	// Token: 0x04000E1E RID: 3614
	public static string is_online = string.Empty;

	// Token: 0x04000E1F RID: 3615
	public static string is_offline = string.Empty;

	// Token: 0x04000E20 RID: 3616
	public static string make_friend = string.Empty;

	// Token: 0x04000E21 RID: 3617
	public static string chat_player = string.Empty;

	// Token: 0x04000E22 RID: 3618
	public static string chat_with = string.Empty;

	// Token: 0x04000E23 RID: 3619
	public static string clan_capsuledonate = string.Empty;

	// Token: 0x04000E24 RID: 3620
	public static string clan_capsuleself = string.Empty;

	// Token: 0x04000E25 RID: 3621
	public static string clan_point = string.Empty;

	// Token: 0x04000E26 RID: 3622
	public static string give_pea = string.Empty;

	// Token: 0x04000E27 RID: 3623
	public static string receive_pea = string.Empty;

	// Token: 0x04000E28 RID: 3624
	public static string request_pea = string.Empty;

	// Token: 0x04000E29 RID: 3625
	public static string time = string.Empty;

	// Token: 0x04000E2A RID: 3626
	public static string received = string.Empty;

	// Token: 0x04000E2B RID: 3627
	public static string power = string.Empty;

	// Token: 0x04000E2C RID: 3628
	public static string join_date = string.Empty;

	// Token: 0x04000E2D RID: 3629
	public static string clan_leader = string.Empty;

	// Token: 0x04000E2E RID: 3630
	public static string clan_coleader = string.Empty;

	// Token: 0x04000E2F RID: 3631
	public static string power_point = string.Empty;

	// Token: 0x04000E30 RID: 3632
	public static string member = string.Empty;

	// Token: 0x04000E31 RID: 3633
	public static string[] memberr = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000E32 RID: 3634
	public static string[] chatClan = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000E33 RID: 3635
	public static string[] leaveClan = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000E34 RID: 3636
	public static string[] createClan = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000E35 RID: 3637
	public static string[] findClan = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000E36 RID: 3638
	public static string[] khau_hieuu = new string[]
	{
		string.Empty
	};

	// Token: 0x04000E37 RID: 3639
	public static string[] bieu_tuongg = new string[]
	{
		string.Empty
	};

	// Token: 0x04000E38 RID: 3640
	public static string[] request_pea2 = new string[]
	{
		string.Empty,
		string.Empty
	};

	// Token: 0x04000E39 RID: 3641
	public static string level = string.Empty;

	// Token: 0x04000E3A RID: 3642
	public static string clan_birthday = string.Empty;

	// Token: 0x04000E3B RID: 3643
	public static string clan_list = string.Empty;

	// Token: 0x04000E3C RID: 3644
	public static string create = string.Empty;

	// Token: 0x04000E3D RID: 3645
	public static string find = string.Empty;

	// Token: 0x04000E3E RID: 3646
	public static string leave = string.Empty;

	// Token: 0x04000E3F RID: 3647
	public static string not_join_clan = string.Empty;

	// Token: 0x04000E40 RID: 3648
	public static string[] clanEmpty = new string[]
	{
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty
	};

	// Token: 0x04000E41 RID: 3649
	public static string input_clan_name = string.Empty;

	// Token: 0x04000E42 RID: 3650
	public static string clan_name = string.Empty;

	// Token: 0x04000E43 RID: 3651
	public static string chat_clan = string.Empty;

	// Token: 0x04000E44 RID: 3652
	public static string input_clan_name_to_create = string.Empty;

	// Token: 0x04000E45 RID: 3653
	public static string input_clan_slogan = string.Empty;

	// Token: 0x04000E46 RID: 3654
	public static string do_u_want_join_clan = string.Empty;

	// Token: 0x04000E47 RID: 3655
	public static string select_clan_icon = string.Empty;

	// Token: 0x04000E48 RID: 3656
	public static string request_join_clan = string.Empty;

	// Token: 0x04000E49 RID: 3657
	public static string view_clan_member = string.Empty;

	// Token: 0x04000E4A RID: 3658
	public static string create_clan_co_leader = string.Empty;

	// Token: 0x04000E4B RID: 3659
	public static string create_clan_leader = string.Empty;

	// Token: 0x04000E4C RID: 3660
	public static string disable_clan_mastership = string.Empty;

	// Token: 0x04000E4D RID: 3661
	public static string kick_clan_mem = string.Empty;

	// Token: 0x04000E4E RID: 3662
	public static string clan_name_blank = string.Empty;

	// Token: 0x04000E4F RID: 3663
	public static string clan_slogan_blank = string.Empty;

	// Token: 0x04000E50 RID: 3664
	public static string cannot_find_clan = string.Empty;

	// Token: 0x04000E51 RID: 3665
	public static string ago = string.Empty;

	// Token: 0x04000E52 RID: 3666
	public static string findingClan = string.Empty;

	// Token: 0x04000E53 RID: 3667
	public static string trade = string.Empty;

	// Token: 0x04000E54 RID: 3668
	public static string not_lock_trade = string.Empty;

	// Token: 0x04000E55 RID: 3669
	public static string not_lock_trade_upper = string.Empty;

	// Token: 0x04000E56 RID: 3670
	public static string locked_trade = string.Empty;

	// Token: 0x04000E57 RID: 3671
	public static string locked_trade_upper = string.Empty;

	// Token: 0x04000E58 RID: 3672
	public static string lock_trade = string.Empty;

	// Token: 0x04000E59 RID: 3673
	public static string wait_opp_lock_trade = string.Empty;

	// Token: 0x04000E5A RID: 3674
	public static string press_done = string.Empty;

	// Token: 0x04000E5B RID: 3675
	public static string THROW = string.Empty;

	// Token: 0x04000E5C RID: 3676
	public static string SPLIT = string.Empty;

	// Token: 0x04000E5D RID: 3677
	public static string done = string.Empty;

	// Token: 0x04000E5E RID: 3678
	public static string opponent = string.Empty;

	// Token: 0x04000E5F RID: 3679
	public static string you = string.Empty;

	// Token: 0x04000E60 RID: 3680
	public static string mlock = string.Empty;

	// Token: 0x04000E61 RID: 3681
	public static string money_trade = string.Empty;

	// Token: 0x04000E62 RID: 3682
	public static string GETOUT = string.Empty;

	// Token: 0x04000E63 RID: 3683
	public static string MOVEOUT = string.Empty;

	// Token: 0x04000E64 RID: 3684
	public static string MOVEFORPET = string.Empty;

	// Token: 0x04000E65 RID: 3685
	public static string GETOUTMONEY = string.Empty;

	// Token: 0x04000E66 RID: 3686
	public static string GETINMONEY = string.Empty;

	// Token: 0x04000E67 RID: 3687
	public static string SENDMONEY = string.Empty;

	// Token: 0x04000E68 RID: 3688
	public static string GETIN = string.Empty;

	// Token: 0x04000E69 RID: 3689
	public static string SALE = string.Empty;

	// Token: 0x04000E6A RID: 3690
	public static string SALES = string.Empty;

	// Token: 0x04000E6B RID: 3691
	public static string SALEALL = string.Empty;

	// Token: 0x04000E6C RID: 3692
	public static string BUY = string.Empty;

	// Token: 0x04000E6D RID: 3693
	public static string BUYS = string.Empty;

	// Token: 0x04000E6E RID: 3694
	public static string input_money_to_trade = string.Empty;

	// Token: 0x04000E6F RID: 3695
	public static string input_money = string.Empty;

	// Token: 0x04000E70 RID: 3696
	public static string input_money_wrong = string.Empty;

	// Token: 0x04000E71 RID: 3697
	public static string not_enough_money = string.Empty;

	// Token: 0x04000E72 RID: 3698
	public static string input_quantity_to_trade = string.Empty;

	// Token: 0x04000E73 RID: 3699
	public static string input_quantity = string.Empty;

	// Token: 0x04000E74 RID: 3700
	public static string input_quantity_wrong = string.Empty;

	// Token: 0x04000E75 RID: 3701
	public static string already_has_item = string.Empty;

	// Token: 0x04000E76 RID: 3702
	public static string unlock_item_to_trade = string.Empty;

	// Token: 0x04000E77 RID: 3703
	public static string root = string.Empty;

	// Token: 0x04000E78 RID: 3704
	public static string need = string.Empty;

	// Token: 0x04000E79 RID: 3705
	public static string need_upper = string.Empty;

	// Token: 0x04000E7A RID: 3706
	public static string free = string.Empty;

	// Token: 0x04000E7B RID: 3707
	public static string free1 = string.Empty;

	// Token: 0x04000E7C RID: 3708
	public static string free2 = string.Empty;

	// Token: 0x04000E7D RID: 3709
	public static string select_item = string.Empty;

	// Token: 0x04000E7E RID: 3710
	public static string random = string.Empty;

	// Token: 0x04000E7F RID: 3711
	public static string say_hello = string.Empty;

	// Token: 0x04000E80 RID: 3712
	public static string say_wat_do_u_want_to_buy = string.Empty;

	// Token: 0x04000E81 RID: 3713
	public static string say_wat_do_u_want_to_buy2 = string.Empty;

	// Token: 0x04000E82 RID: 3714
	public static string do_u_sure_to_trade = string.Empty;

	// Token: 0x04000E83 RID: 3715
	public static string learn_with = string.Empty;

	// Token: 0x04000E84 RID: 3716
	public static string buy_with = string.Empty;

	// Token: 0x04000E85 RID: 3717
	public static string can_not_do_when_die = string.Empty;

	// Token: 0x04000E86 RID: 3718
	public static string use_for_combine = string.Empty;

	// Token: 0x04000E87 RID: 3719
	public static string use_for_trade = string.Empty;

	// Token: 0x04000E88 RID: 3720
	public static string not_enough_luong_world_channel = string.Empty;

	// Token: 0x04000E89 RID: 3721
	public static string world_channel_5_luong = string.Empty;

	// Token: 0x04000E8A RID: 3722
	public static string want_to_trade = string.Empty;

	// Token: 0x04000E8B RID: 3723
	public static string hasJustUpgrade1 = string.Empty;

	// Token: 0x04000E8C RID: 3724
	public static string hasJustUpgrade2 = string.Empty;

	// Token: 0x04000E8D RID: 3725
	public static string potential_to_learn = string.Empty;

	// Token: 0x04000E8E RID: 3726
	public static string potential_point = string.Empty;

	// Token: 0x04000E8F RID: 3727
	public static string achievement_point = string.Empty;

	// Token: 0x04000E90 RID: 3728
	public static string increase = string.Empty;

	// Token: 0x04000E91 RID: 3729
	public static string increase_upper = string.Empty;

	// Token: 0x04000E92 RID: 3730
	public static string not_enough_potential_point1 = string.Empty;

	// Token: 0x04000E93 RID: 3731
	public static string not_enough_potential_point2 = string.Empty;

	// Token: 0x04000E94 RID: 3732
	public static string use_potential_point_for1 = string.Empty;

	// Token: 0x04000E95 RID: 3733
	public static string use_potential_point_for2 = string.Empty;

	// Token: 0x04000E96 RID: 3734
	public static string for_HP = string.Empty;

	// Token: 0x04000E97 RID: 3735
	public static string for_KI = string.Empty;

	// Token: 0x04000E98 RID: 3736
	public static string for_hit_point = string.Empty;

	// Token: 0x04000E99 RID: 3737
	public static string for_armor = string.Empty;

	// Token: 0x04000E9A RID: 3738
	public static string for_crit = string.Empty;

	// Token: 0x04000E9B RID: 3739
	public static string can_buy_from_Uron1 = string.Empty;

	// Token: 0x04000E9C RID: 3740
	public static string can_buy_from_Uron2 = string.Empty;

	// Token: 0x04000E9D RID: 3741
	public static string can_buy_from_Uron3 = string.Empty;

	// Token: 0x04000E9E RID: 3742
	public static string HP = string.Empty;

	// Token: 0x04000E9F RID: 3743
	public static string KI = string.Empty;

	// Token: 0x04000EA0 RID: 3744
	public static string hit_point = string.Empty;

	// Token: 0x04000EA1 RID: 3745
	public static string armor = string.Empty;

	// Token: 0x04000EA2 RID: 3746
	public static string vitality = string.Empty;

	// Token: 0x04000EA3 RID: 3747
	public static string critical = string.Empty;

	// Token: 0x04000EA4 RID: 3748
	public static string cap_do = string.Empty;

	// Token: 0x04000EA5 RID: 3749
	public static string KI_consume = string.Empty;

	// Token: 0x04000EA6 RID: 3750
	public static string cooldown = string.Empty;

	// Token: 0x04000EA7 RID: 3751
	public static string milisecond = string.Empty;

	// Token: 0x04000EA8 RID: 3752
	public static string max_level_reach = string.Empty;

	// Token: 0x04000EA9 RID: 3753
	public static string next_level_require = string.Empty;

	// Token: 0x04000EAA RID: 3754
	public static string potential = string.Empty;

	// Token: 0x04000EAB RID: 3755
	public static string not_learn = string.Empty;

	// Token: 0x04000EAC RID: 3756
	public static string learn_require = string.Empty;

	// Token: 0x04000EAD RID: 3757
	public static string learn = string.Empty;

	// Token: 0x04000EAE RID: 3758
	public static string to_gain_20hp = string.Empty;

	// Token: 0x04000EAF RID: 3759
	public static string to_gain_20mp = string.Empty;

	// Token: 0x04000EB0 RID: 3760
	public static string to_gain_1pow = string.Empty;

	// Token: 0x04000EB1 RID: 3761
	public static string[][] hairStyleName = new string[][]
	{
		new string[]
		{
			string.Empty,
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty,
			string.Empty
		},
		new string[]
		{
			string.Empty,
			string.Empty,
			string.Empty
		}
	};

	// Token: 0x04000EB2 RID: 3762
	public static string hp_ki_full = string.Empty;

	// Token: 0x04000EB3 RID: 3763
	public static string quest_place = string.Empty;

	// Token: 0x04000EB4 RID: 3764
	public static string no_mission = string.Empty;

	// Token: 0x04000EB5 RID: 3765
	public static string reward_mission = string.Empty;

	// Token: 0x04000EB6 RID: 3766
	public static string achievement_mission = string.Empty;

	// Token: 0x04000EB7 RID: 3767
	public static string trangbi = string.Empty;

	// Token: 0x04000EB8 RID: 3768
	public static string wat_do_u_want = string.Empty;

	// Token: 0x04000EB9 RID: 3769
	public static string off = string.Empty;

	// Token: 0x04000EBA RID: 3770
	public static string on = string.Empty;

	// Token: 0x04000EBB RID: 3771
	public static string select_map = string.Empty;

	// Token: 0x04000EBC RID: 3772
	public static string offPlease = string.Empty;

	// Token: 0x04000EBD RID: 3773
	public static string onPlease = string.Empty;

	// Token: 0x04000EBE RID: 3774
	public static sbyte language;

	// Token: 0x04000EBF RID: 3775
	public const sbyte VIETNAM = 0;

	// Token: 0x04000EC0 RID: 3776
	public const sbyte ENGLISH = 1;

	// Token: 0x04000EC1 RID: 3777
	public const sbyte INDONESIA = 2;

	// Token: 0x04000EC2 RID: 3778
	public static string choigame;

	// Token: 0x04000EC3 RID: 3779
	public static string no_enemy = string.Empty;

	// Token: 0x04000EC4 RID: 3780
	public static string kigui;

	// Token: 0x04000EC5 RID: 3781
	public static string kiguiXu;

	// Token: 0x04000EC6 RID: 3782
	public static string kiguiLuong;

	// Token: 0x04000EC7 RID: 3783
	public static string kiguiXuchat;

	// Token: 0x04000EC8 RID: 3784
	public static string kiguiLuongchat;

	// Token: 0x04000EC9 RID: 3785
	public static string huykigui;

	// Token: 0x04000ECA RID: 3786
	public static string nhantien;

	// Token: 0x04000ECB RID: 3787
	public static string dangban;

	// Token: 0x04000ECC RID: 3788
	public static string daban;

	// Token: 0x04000ECD RID: 3789
	public static string num;

	// Token: 0x04000ECE RID: 3790
	public static string upTop;

	// Token: 0x04000ECF RID: 3791
	public static string page;

	// Token: 0x04000ED0 RID: 3792
	public static string getDown;

	// Token: 0x04000ED1 RID: 3793
	public static string getUp;

	// Token: 0x04000ED2 RID: 3794
	public static string notYetSell;

	// Token: 0x04000ED3 RID: 3795
	public static string charger;

	// Token: 0x04000ED4 RID: 3796
	public static string finishBomong;

	// Token: 0x04000ED5 RID: 3797
	public static string note;

	// Token: 0x04000ED6 RID: 3798
	public static string regNote;

	// Token: 0x04000ED7 RID: 3799
	public static string remain;

	// Token: 0x04000ED8 RID: 3800
	public static string faster;

	// Token: 0x04000ED9 RID: 3801
	public static string fasterQuestion;

	// Token: 0x04000EDA RID: 3802
	public static string chuacotaikhoan;

	// Token: 0x04000EDB RID: 3803
	public static string taidulieudechoi;

	// Token: 0x04000EDC RID: 3804
	public static string huy;

	// Token: 0x04000EDD RID: 3805
	public static string taidulieu;

	// Token: 0x04000EDE RID: 3806
	public static string xoadulieu;

	// Token: 0x04000EDF RID: 3807
	public static string deletaDataNote;

	// Token: 0x04000EE0 RID: 3808
	public static string playNew;

	// Token: 0x04000EE1 RID: 3809
	public static string playAcc;

	// Token: 0x04000EE2 RID: 3810
	public static string vuilongnhapduthongtin;

	// Token: 0x04000EE3 RID: 3811
	public static string not_register_yet = string.Empty;

	// Token: 0x04000EE4 RID: 3812
	public static string nhanngoc;

	// Token: 0x04000EE5 RID: 3813
	public static string fusion;

	// Token: 0x04000EE6 RID: 3814
	public static string sure_fusion;

	// Token: 0x04000EE7 RID: 3815
	public static string fusionForever;

	// Token: 0x04000EE8 RID: 3816
	public static string xinchucmung;

	// Token: 0x04000EE9 RID: 3817
	public static string den;

	// Token: 0x04000EEA RID: 3818
	public static string nhatvatpham;

	// Token: 0x04000EEB RID: 3819
	public static string confirmChangeServer;

	// Token: 0x04000EEC RID: 3820
	public static string cauhinhthuong;

	// Token: 0x04000EED RID: 3821
	public static string countDown_waitingroom;

	// Token: 0x04000EEE RID: 3822
	public static string potential_to_learn_tuyetKi = string.Empty;
}
using System;

// Token: 0x02000093 RID: 147
public class mScreen
{
	// Token: 0x06000720 RID: 1824 RVA: 0x000777B8 File Offset: 0x000759B8
	public virtual void switchToMe()
	{
		GameCanvas.clearKeyPressed();
		GameCanvas.clearKeyHold();
		bool flag = GameCanvas.currentScreen != null;
		if (flag)
		{
			GameCanvas.currentScreen.unLoad();
		}
		GameCanvas.currentScreen = this;
		string str = ">>>>>>>>>>cur Screen: ";
		mScreen currentScreen = GameCanvas.currentScreen;
		Cout.LogError3(str + ((currentScreen != null) ? currentScreen.ToString() : null));
	}

	// Token: 0x06000721 RID: 1825 RVA: 0x00077812 File Offset: 0x00075A12
	public virtual void unLoad()
	{
	}

	// Token: 0x06000722 RID: 1826 RVA: 0x00077815 File Offset: 0x00075A15
	public static void initPos()
	{
	}

	// Token: 0x06000723 RID: 1827 RVA: 0x00077818 File Offset: 0x00075A18
	public virtual void keyPress(int keyCode)
	{
	}

	// Token: 0x06000724 RID: 1828 RVA: 0x0007781B File Offset: 0x00075A1B
	public virtual void update()
	{
	}

	// Token: 0x06000725 RID: 1829 RVA: 0x00077820 File Offset: 0x00075A20
	public virtual void updateKey()
	{
		bool flag = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] || mScreen.getCmdPointerLast(GameCanvas.currentScreen.center);
		if (flag)
		{
			GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
			mScreen.keyTouch = -1;
			GameCanvas.isPointerJustRelease = false;
			bool flag2 = this.center != null;
			if (flag2)
			{
				this.center.performAction();
			}
		}
		bool flag3 = GameCanvas.keyPressed[12] || mScreen.getCmdPointerLast(GameCanvas.currentScreen.left);
		if (flag3)
		{
			GameCanvas.keyPressed[12] = false;
			mScreen.keyTouch = -1;
			GameCanvas.isPointerJustRelease = false;
			bool isShow = ChatTextField.gI().isShow;
			if (isShow)
			{
				bool flag4 = ChatTextField.gI().left != null;
				if (flag4)
				{
					ChatTextField.gI().left.performAction();
				}
			}
			else
			{
				bool flag5 = this.left != null;
				if (flag5)
				{
					this.left.performAction();
				}
			}
		}
		bool flag6 = !GameCanvas.keyPressed[13] && !mScreen.getCmdPointerLast(GameCanvas.currentScreen.right);
		if (!flag6)
		{
			GameCanvas.keyPressed[13] = false;
			mScreen.keyTouch = -1;
			GameCanvas.isPointerJustRelease = false;
			bool isShow2 = ChatTextField.gI().isShow;
			if (isShow2)
			{
				bool flag7 = ChatTextField.gI().right != null;
				if (flag7)
				{
					ChatTextField.gI().right.performAction();
				}
			}
			else
			{
				bool flag8 = this.right != null;
				if (flag8)
				{
					this.right.performAction();
				}
			}
		}
	}

	// Token: 0x06000726 RID: 1830 RVA: 0x000779B4 File Offset: 0x00075BB4
	public static bool getCmdPointerLast(Command cmd)
	{
		bool flag = cmd == null;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = cmd.x >= 0 && cmd.y != 0;
			if (flag2)
			{
				result = cmd.isPointerPressInside();
			}
			else
			{
				bool flag3 = GameCanvas.currentDialog != null;
				if (flag3)
				{
					bool flag4 = GameCanvas.currentDialog.center != null && GameCanvas.isPointerHoldIn(GameCanvas.w - mScreen.cmdW >> 1, GameCanvas.h - mScreen.cmdH - 5, mScreen.cmdW, mScreen.cmdH + 10);
					if (flag4)
					{
						mScreen.keyTouch = 1;
						bool flag5 = cmd == GameCanvas.currentDialog.center && GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
						if (flag5)
						{
							return true;
						}
					}
					bool flag6 = GameCanvas.currentDialog.left != null && GameCanvas.isPointerHoldIn(0, GameCanvas.h - mScreen.cmdH - 5, mScreen.cmdW, mScreen.cmdH + 10);
					if (flag6)
					{
						mScreen.keyTouch = 0;
						bool flag7 = cmd == GameCanvas.currentDialog.left && GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
						if (flag7)
						{
							return true;
						}
					}
					bool flag8 = GameCanvas.currentDialog.right != null && GameCanvas.isPointerHoldIn(GameCanvas.w - mScreen.cmdW, GameCanvas.h - mScreen.cmdH - 5, mScreen.cmdW, mScreen.cmdH + 10);
					if (flag8)
					{
						mScreen.keyTouch = 2;
						bool flag9 = (cmd == GameCanvas.currentDialog.right || cmd == ChatTextField.gI().right) && GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
						if (flag9)
						{
							return true;
						}
					}
				}
				else
				{
					bool flag10 = cmd == GameCanvas.currentScreen.left && GameCanvas.isPointerHoldIn(0, GameCanvas.h - mScreen.cmdH - 5, mScreen.cmdW, mScreen.cmdH + 10);
					if (flag10)
					{
						mScreen.keyTouch = 0;
						bool flag11 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
						if (flag11)
						{
							return true;
						}
					}
					bool flag12 = cmd == GameCanvas.currentScreen.right && GameCanvas.isPointerHoldIn(GameCanvas.w - mScreen.cmdW, GameCanvas.h - mScreen.cmdH - 5, mScreen.cmdW, mScreen.cmdH + 10);
					if (flag12)
					{
						mScreen.keyTouch = 2;
						bool flag13 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
						if (flag13)
						{
							return true;
						}
					}
					bool flag14 = (cmd == GameCanvas.currentScreen.center || ChatPopup.currChatPopup != null) && GameCanvas.isPointerHoldIn(GameCanvas.w - mScreen.cmdW >> 1, GameCanvas.h - mScreen.cmdH - 5, mScreen.cmdW, mScreen.cmdH + 10);
					if (flag14)
					{
						mScreen.keyTouch = 1;
						bool flag15 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
						if (flag15)
						{
							return true;
						}
					}
				}
				result = false;
			}
		}
		return result;
	}

	// Token: 0x06000727 RID: 1831 RVA: 0x00077C98 File Offset: 0x00075E98
	public virtual void paint(mGraphics g)
	{
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h + 1);
		bool flag = (!ChatTextField.gI().isShow || !Main.isPC) && GameCanvas.currentDialog == null && !GameCanvas.menu.showMenu;
		if (flag)
		{
			GameCanvas.paintz.paintCmdBar(g, this.left, this.center, this.right);
		}
	}

	// Token: 0x04000EEF RID: 3823
	public Command left;

	// Token: 0x04000EF0 RID: 3824
	public Command center;

	// Token: 0x04000EF1 RID: 3825
	public Command right;

	// Token: 0x04000EF2 RID: 3826
	public Command cmdClose;

	// Token: 0x04000EF3 RID: 3827
	public static int ITEM_HEIGHT;

	// Token: 0x04000EF4 RID: 3828
	public static int yOpenKeyBoard = 100;

	// Token: 0x04000EF5 RID: 3829
	public static int cmdW = 68;

	// Token: 0x04000EF6 RID: 3830
	public static int cmdH = 26;

	// Token: 0x04000EF7 RID: 3831
	public static int keyTouch = -1;

	// Token: 0x04000EF8 RID: 3832
	public static int keyMouse = -1;
}
using System;

// Token: 0x02000094 RID: 148
public class MsgDlg : Dialog
{
	// Token: 0x0600072A RID: 1834 RVA: 0x00077D4C File Offset: 0x00075F4C
	public MsgDlg()
	{
		this.padLeft = 35;
		bool flag = GameCanvas.w <= 176;
		if (flag)
		{
			this.padLeft = 10;
		}
		bool flag2 = GameCanvas.w > 320;
		if (flag2)
		{
			this.padLeft = 80;
		}
	}

	// Token: 0x0600072B RID: 1835 RVA: 0x00077DA8 File Offset: 0x00075FA8
	public void pleasewait()
	{
		this.setInfo(mResources.PLEASEWAIT, null, null, null);
		GameCanvas.currentDialog = this;
		this.time = mSystem.currentTimeMillis() + 5000L;
	}

	// Token: 0x0600072C RID: 1836 RVA: 0x00077DD2 File Offset: 0x00075FD2
	public override void show()
	{
		GameCanvas.currentDialog = this;
		this.time = -1L;
	}

	// Token: 0x0600072D RID: 1837 RVA: 0x00077DE4 File Offset: 0x00075FE4
	public void setInfo(string info)
	{
		this.info = mFont.tahoma_8b.splitFontArray(info, GameCanvas.w - (this.padLeft * 2 + 20));
		this.h = 80;
		bool flag = this.info.Length >= 5;
		if (flag)
		{
			this.h = this.info.Length * mFont.tahoma_8b.getHeight() + 20;
		}
	}

	// Token: 0x0600072E RID: 1838 RVA: 0x00077E4C File Offset: 0x0007604C
	public void setInfo(string info, Command left, Command center, Command right)
	{
		this.info = mFont.tahoma_8b.splitFontArray(info, GameCanvas.w - (this.padLeft * 2 + 20));
		this.left = left;
		this.center = center;
		this.right = right;
		this.h = 80;
		bool flag = this.info.Length >= 5;
		if (flag)
		{
			this.h = this.info.Length * mFont.tahoma_8b.getHeight() + 20;
		}
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			bool flag2 = left != null;
			if (flag2)
			{
				this.left.x = GameCanvas.w / 2 - 68 - 5;
				this.left.y = GameCanvas.h - 50;
			}
			bool flag3 = right != null;
			if (flag3)
			{
				this.right.x = GameCanvas.w / 2 + 5;
				this.right.y = GameCanvas.h - 50;
			}
			bool flag4 = center != null;
			if (flag4)
			{
				this.center.x = GameCanvas.w / 2 - 35;
				this.center.y = GameCanvas.h - 50;
			}
		}
		this.isWait = false;
		this.time = -1L;
	}

	// Token: 0x0600072F RID: 1839 RVA: 0x00077F84 File Offset: 0x00076184
	public override void paint(mGraphics g)
	{
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
		bool flag = !LoginScr.isContinueToLogin;
		if (flag)
		{
			int num = GameCanvas.h - this.h - 38;
			int w = GameCanvas.w - this.padLeft * 2;
			GameCanvas.paintz.paintPopUp(this.padLeft, num, w, this.h, g);
			int num2 = num + (this.h - this.info.Length * mFont.tahoma_8b.getHeight()) / 2 - 2;
			bool flag2 = this.isWait;
			if (flag2)
			{
				num2 += 8;
				GameCanvas.paintShukiren(GameCanvas.hw, num2 - 12, g);
			}
			int i = 0;
			int num3 = num2;
			while (i < this.info.Length)
			{
				mFont.tahoma_7b_dark.drawString(g, this.info[i], GameCanvas.hw, num3, 2);
				i++;
				num3 += mFont.tahoma_8b.getHeight();
			}
			base.paint(g);
		}
	}

	// Token: 0x06000730 RID: 1840 RVA: 0x00078088 File Offset: 0x00076288
	public override void update()
	{
		base.update();
		bool flag = this.time != -1L && mSystem.currentTimeMillis() > this.time;
		if (flag)
		{
			GameCanvas.endDlg();
		}
	}

	// Token: 0x04000EF9 RID: 3833
	public string[] info;

	// Token: 0x04000EFA RID: 3834
	public bool isWait;

	// Token: 0x04000EFB RID: 3835
	private int h;

	// Token: 0x04000EFC RID: 3836
	private int padLeft;

	// Token: 0x04000EFD RID: 3837
	private long time = -1L;
}
using System;
using System.Text;
using UnityEngine;

// Token: 0x02000095 RID: 149
public class mSystem
{
	// Token: 0x06000731 RID: 1841 RVA: 0x000780C4 File Offset: 0x000762C4
	public static void AddIpTest()
	{
		bool flag = !mSystem.isTest;
		if (flag)
		{
		}
	}

	// Token: 0x06000732 RID: 1842 RVA: 0x000780E0 File Offset: 0x000762E0
	public static void resetCurInapp()
	{
		mSystem.curINAPP = 0;
	}

	// Token: 0x06000733 RID: 1843 RVA: 0x000780EC File Offset: 0x000762EC
	public static int getWidth(Image img)
	{
		bool flag = mSystem.clientType == 5;
		int width;
		if (flag)
		{
			width = img.getWidth();
		}
		else
		{
			width = img.getWidth();
		}
		return width;
	}

	// Token: 0x06000734 RID: 1844 RVA: 0x0007811C File Offset: 0x0007631C
	public static int getHeight(Image img)
	{
		bool flag = mSystem.clientType == 5;
		int result;
		if (flag)
		{
			result = img.getHeight();
		}
		else
		{
			result = img.getWidth();
		}
		return result;
	}

	// Token: 0x06000735 RID: 1845 RVA: 0x0007814C File Offset: 0x0007634C
	public static string getTimeCountDown(long timeStart, int secondCount, bool isOnlySecond, bool isShortText)
	{
		string text = string.Empty;
		long num = (timeStart + (long)(secondCount * 1000) - mSystem.currentTimeMillis()) / 1000L;
		bool flag = num <= 0L;
		string result;
		if (flag)
		{
			result = string.Empty;
		}
		else
		{
			long num2 = 0L;
			long num3 = 0L;
			long num4 = num / 60L;
			long num5 = num;
			if (isOnlySecond)
			{
				result = num5.ToString() + string.Empty;
			}
			else
			{
				bool flag2 = num >= 86400L;
				if (flag2)
				{
					num2 = num / 86400L;
					num3 = num % 86400L / 3600L;
				}
				else
				{
					bool flag3 = num >= 3600L;
					if (flag3)
					{
						num3 = num / 3600L;
						num4 = num % 3600L / 60L;
					}
					else
					{
						bool flag4 = num >= 60L;
						if (flag4)
						{
							num4 = num / 60L;
							num5 = num % 60L;
						}
						else
						{
							num5 = num;
						}
					}
				}
				if (isShortText)
				{
					bool flag5 = num2 > 0L;
					if (flag5)
					{
						return num2.ToString() + "d";
					}
					bool flag6 = num3 > 0L;
					if (flag6)
					{
						return num3.ToString() + "h";
					}
					bool flag7 = num4 > 0L;
					if (flag7)
					{
						return num4.ToString() + "m";
					}
					bool flag8 = num5 > 0L;
					if (flag8)
					{
						return num5.ToString() + "s";
					}
				}
				bool flag9 = num2 > 0L;
				if (flag9)
				{
					bool flag10 = num2 >= 10L;
					if (flag10)
					{
						text = ((num3 < 1L) ? (num2.ToString() + "d") : ((num3 >= 10L) ? (num2.ToString() + "d" + num3.ToString() + "h") : (num2.ToString() + "d0" + num3.ToString() + "h")));
					}
					else
					{
						bool flag11 = num2 < 10L;
						if (flag11)
						{
							text = ((num3 < 1L) ? (num2.ToString() + "d") : ((num3 >= 10L) ? (num2.ToString() + "d" + num3.ToString() + "h") : (num2.ToString() + "d0" + num3.ToString() + "h")));
						}
					}
				}
				else
				{
					bool flag12 = num3 > 0L;
					if (flag12)
					{
						bool flag13 = num3 >= 10L;
						if (flag13)
						{
							text = ((num4 < 1L) ? (num3.ToString() + "h") : ((num4 >= 10L) ? (num3.ToString() + "h" + num4.ToString() + "m") : (num3.ToString() + "h0" + num4.ToString() + "m")));
						}
						else
						{
							bool flag14 = num3 < 10L;
							if (flag14)
							{
								text = ((num4 < 1L) ? (num3.ToString() + "h") : ((num4 >= 10L) ? (num3.ToString() + "h" + num4.ToString() + "m") : (num3.ToString() + "h0" + num4.ToString() + "m")));
							}
						}
					}
					else
					{
						bool flag15 = num4 > 0L;
						if (flag15)
						{
							bool flag16 = num4 >= 10L;
							if (flag16)
							{
								bool flag17 = num5 >= 10L;
								if (flag17)
								{
									text = num4.ToString() + "m" + num5.ToString() + string.Empty;
								}
								else
								{
									bool flag18 = num5 < 10L;
									if (flag18)
									{
										text = num4.ToString() + "m0" + num5.ToString() + string.Empty;
									}
								}
							}
							else
							{
								bool flag19 = num4 < 10L;
								if (flag19)
								{
									bool flag20 = num5 >= 10L;
									if (flag20)
									{
										text = num4.ToString() + "m" + num5.ToString() + string.Empty;
									}
									else
									{
										bool flag21 = num5 < 10L;
										if (flag21)
										{
											text = num4.ToString() + "m0" + num5.ToString() + string.Empty;
										}
									}
								}
							}
						}
						else
						{
							text = ((num5 >= 10L) ? (num5.ToString() + string.Empty) : ("0" + num5.ToString() + string.Empty));
						}
					}
				}
				result = text;
			}
		}
		return result;
	}

	// Token: 0x06000736 RID: 1846 RVA: 0x000785F0 File Offset: 0x000767F0
	public static string numberTostring2(int aa)
	{
		string result;
		try
		{
			string text = string.Empty;
			string str = string.Empty;
			string text2 = aa.ToString() + string.Empty;
			bool flag = text2.Equals(string.Empty);
			if (flag)
			{
				result = text;
			}
			else
			{
				bool flag2 = text2[0] == '-';
				if (flag2)
				{
					str = "-";
					text2 = text2.Substring(1);
				}
				for (int i = text2.Length - 1; i >= 0; i--)
				{
					text = (((text2.Length - 1 - i) % 3 != 0 || text2.Length - 1 - i <= 0) ? (text2[i].ToString() + text) : (text2[i].ToString() + "." + text));
				}
				result = str + text;
			}
		}
		catch (Exception)
		{
			result = aa.ToString() + string.Empty;
		}
		return result;
	}

	// Token: 0x06000737 RID: 1847 RVA: 0x00078700 File Offset: 0x00076900
	public static string numberTostring(long number)
	{
		string text = string.Empty + number.ToString();
		bool flag = false;
		try
		{
			string text2 = string.Empty;
			bool flag2 = number < 0L;
			if (flag2)
			{
				flag = true;
				number = -number;
				text = string.Empty + number.ToString();
			}
			bool flag3 = number >= 1000000000L;
			int length;
			if (flag3)
			{
				text2 = "b";
				number /= 1000000000L;
				length = (string.Empty + number.ToString()).Length;
			}
			else
			{
				bool flag4 = number >= 1000000L;
				if (flag4)
				{
					text2 = "m";
					number /= 1000000L;
					length = (string.Empty + number.ToString()).Length;
				}
				else
				{
					bool flag5 = number < 1000L;
					if (flag5)
					{
						bool flag6 = flag;
						if (flag6)
						{
							return "-" + text;
						}
						return text;
					}
					else
					{
						text2 = "k";
						number /= 1000L;
						length = (string.Empty + number.ToString()).Length;
					}
				}
			}
			int num = int.Parse(text.Substring(length, 2));
			text = ((num == 0) ? (text.Substring(0, length) + text2) : ((num % 10 != 0) ? (text.Substring(0, length) + "," + text.Substring(length, 2) + text2) : (text.Substring(0, length) + "," + text.Substring(length, 1) + text2)));
		}
		catch (Exception)
		{
		}
		bool flag7 = flag;
		string result;
		if (flag7)
		{
			result = "-" + text;
		}
		else
		{
			result = text;
		}
		return result;
	}

	// Token: 0x06000738 RID: 1848 RVA: 0x000788D0 File Offset: 0x00076AD0
	public static void callHotlinePC()
	{
		Application.OpenURL("http://ngocrongonline.com/");
	}

	// Token: 0x06000739 RID: 1849 RVA: 0x000788DE File Offset: 0x00076ADE
	public static void callHotlineJava()
	{
	}

	// Token: 0x0600073A RID: 1850 RVA: 0x000788E1 File Offset: 0x00076AE1
	public static void callHotlineIphone()
	{
	}

	// Token: 0x0600073B RID: 1851 RVA: 0x000788E4 File Offset: 0x00076AE4
	public static void callHotlineWindowsPhone()
	{
	}

	// Token: 0x0600073C RID: 1852 RVA: 0x000788E7 File Offset: 0x00076AE7
	public static void closeBanner()
	{
	}

	// Token: 0x0600073D RID: 1853 RVA: 0x000788EA File Offset: 0x00076AEA
	public static void showBanner()
	{
	}

	// Token: 0x0600073E RID: 1854 RVA: 0x000788ED File Offset: 0x00076AED
	public static void createAdmob()
	{
	}

	// Token: 0x0600073F RID: 1855 RVA: 0x000788F0 File Offset: 0x00076AF0
	public static void checkAdComlete()
	{
	}

	// Token: 0x06000740 RID: 1856 RVA: 0x000788F3 File Offset: 0x00076AF3
	public static void paintPopUp2(mGraphics g, int x, int y, int w, int h)
	{
		g.fillRect(x, y, w + 10, h, 0, 90);
	}

	// Token: 0x06000741 RID: 1857 RVA: 0x00078908 File Offset: 0x00076B08
	public static void arraycopy(sbyte[] scr, int scrPos, sbyte[] dest, int destPos, int lenght)
	{
		Array.Copy(scr, scrPos, dest, destPos, lenght);
	}

	// Token: 0x06000742 RID: 1858 RVA: 0x00078918 File Offset: 0x00076B18
	public static void arrayReplace(sbyte[] scr, int scrPos, ref sbyte[] dest, int destPos, int lenght)
	{
		bool flag = scr != null && dest != null && scrPos + lenght <= scr.Length;
		if (flag)
		{
			sbyte[] array = new sbyte[dest.Length + lenght];
			for (int i = 0; i < destPos; i++)
			{
				array[i] = dest[i];
			}
			for (int j = destPos; j < destPos + lenght; j++)
			{
				array[j] = scr[scrPos + j - destPos];
			}
			for (int k = destPos + lenght; k < array.Length; k++)
			{
				array[k] = dest[destPos + k - lenght];
			}
		}
	}

	// Token: 0x06000743 RID: 1859 RVA: 0x000789BC File Offset: 0x00076BBC
	public static long currentTimeMillis()
	{
		DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
		return (DateTime.UtcNow.Ticks - dateTime.Ticks) / 10000L;
	}

	// Token: 0x06000744 RID: 1860 RVA: 0x000789FC File Offset: 0x00076BFC
	public static void freeData()
	{
		Resources.UnloadUnusedAssets();
		GC.Collect();
	}

	// Token: 0x06000745 RID: 1861 RVA: 0x00078A0C File Offset: 0x00076C0C
	public static sbyte[] convertToSbyte(byte[] scr)
	{
		sbyte[] array = new sbyte[scr.Length];
		for (int i = 0; i < scr.Length; i++)
		{
			array[i] = (sbyte)scr[i];
		}
		return array;
	}

	// Token: 0x06000746 RID: 1862 RVA: 0x00078A44 File Offset: 0x00076C44
	public static sbyte[] convertToSbyte(string scr)
	{
		ASCIIEncoding asciiencoding = new ASCIIEncoding();
		byte[] bytes = asciiencoding.GetBytes(scr);
		return mSystem.convertToSbyte(bytes);
	}

	// Token: 0x06000747 RID: 1863 RVA: 0x00078A6C File Offset: 0x00076C6C
	public static byte[] convetToByte(sbyte[] scr)
	{
		byte[] array = new byte[scr.Length];
		for (int i = 0; i < scr.Length; i++)
		{
			bool flag = scr[i] > 0;
			if (flag)
			{
				array[i] = (byte)scr[i];
			}
			else
			{
				array[i] = (byte)((int)scr[i] + 256);
			}
		}
		return array;
	}

	// Token: 0x06000748 RID: 1864 RVA: 0x00078AC4 File Offset: 0x00076CC4
	public static char[] ToCharArray(sbyte[] scr)
	{
		char[] array = new char[scr.Length];
		for (int i = 0; i < scr.Length; i++)
		{
			array[i] = (char)scr[i];
		}
		return array;
	}

	// Token: 0x06000749 RID: 1865 RVA: 0x00078AFC File Offset: 0x00076CFC
	public static int currentHour()
	{
		return DateTime.Now.Hour;
	}

	// Token: 0x0600074A RID: 1866 RVA: 0x00078B1B File Offset: 0x00076D1B
	public static void println(object str)
	{
		Debug.Log(str);
	}

	// Token: 0x0600074B RID: 1867 RVA: 0x00078B25 File Offset: 0x00076D25
	public static void gcc()
	{
		Resources.UnloadUnusedAssets();
		GC.Collect();
	}

	// Token: 0x0600074C RID: 1868 RVA: 0x00078B34 File Offset: 0x00076D34
	public static mSystem gI()
	{
		bool flag = mSystem.instance == null;
		if (flag)
		{
			mSystem.instance = new mSystem();
		}
		return mSystem.instance;
	}

	// Token: 0x0600074D RID: 1869 RVA: 0x00078B63 File Offset: 0x00076D63
	public static void onConnectOK()
	{
		Controller.isConnectOK = true;
	}

	// Token: 0x0600074E RID: 1870 RVA: 0x00078B6C File Offset: 0x00076D6C
	public static void onConnectionFail()
	{
		Controller.isConnectionFail = true;
		Debug.LogError(">>>>>>>> Controller.isConnectionFail = true;");
	}

	// Token: 0x0600074F RID: 1871 RVA: 0x00078B80 File Offset: 0x00076D80
	public static void onDisconnected()
	{
		Controller.isDisconnected = true;
	}

	// Token: 0x06000750 RID: 1872 RVA: 0x00078B89 File Offset: 0x00076D89
	public static void exitWP()
	{
	}

	// Token: 0x06000751 RID: 1873 RVA: 0x00078B8C File Offset: 0x00076D8C
	public static void paintFlyText(mGraphics g)
	{
		for (int i = 0; i < 5; i++)
		{
			bool flag = GameScr.flyTextState[i] != -1 && GameCanvas.isPaint(GameScr.flyTextX[i], GameScr.flyTextY[i]);
			if (flag)
			{
				bool flag2 = GameScr.flyTextColor[i] == mFont.RED;
				if (flag2)
				{
					mFont.bigNumber_red.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER);
				}
				else
				{
					bool flag3 = GameScr.flyTextColor[i] == mFont.YELLOW;
					if (flag3)
					{
						mFont.bigNumber_yellow.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER);
					}
					else
					{
						bool flag4 = GameScr.flyTextColor[i] == mFont.GREEN;
						if (flag4)
						{
							mFont.bigNumber_green.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER);
						}
						else
						{
							bool flag5 = GameScr.flyTextColor[i] == mFont.FATAL;
							if (flag5)
							{
								mFont.bigNumber_yellow.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER, mFont.bigNumber_black);
							}
							else
							{
								bool flag6 = GameScr.flyTextColor[i] == mFont.FATAL_ME;
								if (flag6)
								{
									mFont.bigNumber_green.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER, mFont.bigNumber_black);
								}
								else
								{
									bool flag7 = GameScr.flyTextColor[i] == mFont.MISS;
									if (flag7)
									{
										mFont.bigNumber_While.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER, mFont.tahoma_7_grey);
									}
									else
									{
										bool flag8 = GameScr.flyTextColor[i] == mFont.ORANGE;
										if (flag8)
										{
											mFont.bigNumber_orange.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER);
										}
										else
										{
											bool flag9 = GameScr.flyTextColor[i] == mFont.ADDMONEY;
											if (flag9)
											{
												mFont.bigNumber_yellow.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER, mFont.bigNumber_black);
											}
											else
											{
												bool flag10 = GameScr.flyTextColor[i] == mFont.MISS_ME;
												if (flag10)
												{
													mFont.bigNumber_While.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER, mFont.bigNumber_black);
												}
												else
												{
													bool flag11 = GameScr.flyTextColor[i] == mFont.HP;
													if (flag11)
													{
														mFont.bigNumber_red.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER, mFont.bigNumber_black);
													}
													else
													{
														bool flag12 = GameScr.flyTextColor[i] == mFont.MP;
														if (flag12)
														{
															mFont.bigNumber_blue.drawStringBorder(g, GameScr.flyTextString[i], GameScr.flyTextX[i], GameScr.flyTextY[i], mFont.CENTER, mFont.bigNumber_black);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x06000752 RID: 1874 RVA: 0x00078EBF File Offset: 0x000770BF
	public static void endKey()
	{
	}

	// Token: 0x06000753 RID: 1875 RVA: 0x00078EC4 File Offset: 0x000770C4
	public static FrameImage getFraImage(string nameImg)
	{
		FrameImage result = null;
		MainImage mainImage = null;
		bool flag = mainImage == null;
		if (flag)
		{
			mainImage = ImgByName.getImagePath(nameImg, ImgByName.hashImagePath);
		}
		bool flag2 = mainImage.img != null;
		if (flag2)
		{
			int num = mainImage.img.getHeight() / (int)mainImage.nFrame;
			bool flag3 = num < 1;
			if (flag3)
			{
				num = 1;
			}
			result = new FrameImage(mainImage.img, mainImage.img.getWidth(), num);
		}
		return result;
	}

	// Token: 0x06000754 RID: 1876 RVA: 0x00078F40 File Offset: 0x00077140
	public static Image loadImage(string path)
	{
		return GameCanvas.loadImage(path);
	}

	// Token: 0x04000EFE RID: 3838
	public static bool isTest;

	// Token: 0x04000EFF RID: 3839
	public static string strAdmob;

	// Token: 0x04000F00 RID: 3840
	public static bool loadAdOk;

	// Token: 0x04000F01 RID: 3841
	public static string publicID;

	// Token: 0x04000F02 RID: 3842
	public static string android_pack;

	// Token: 0x04000F03 RID: 3843
	public static int clientType = 4;

	// Token: 0x04000F04 RID: 3844
	public static sbyte LANGUAGE;

	// Token: 0x04000F05 RID: 3845
	public static sbyte curINAPP;

	// Token: 0x04000F06 RID: 3846
	public static sbyte maxINAPP = 5;

	// Token: 0x04000F07 RID: 3847
	public const int JAVA = 1;

	// Token: 0x04000F08 RID: 3848
	public const int ANDROID = 2;

	// Token: 0x04000F09 RID: 3849
	public const int IP_JB = 3;

	// Token: 0x04000F0A RID: 3850
	public const int PC = 4;

	// Token: 0x04000F0B RID: 3851
	public const int IP_APPSTORE = 5;

	// Token: 0x04000F0C RID: 3852
	public const int WINDOWS_PHONE = 6;

	// Token: 0x04000F0D RID: 3853
	public const int GOOGLE_PLAY = 7;

	// Token: 0x04000F0E RID: 3854
	public static mSystem instance;

	// Token: 0x04000F0F RID: 3855
	internal static bool isANDROID;
}
using System;
using UnityEngine;

// Token: 0x02000096 RID: 150
public class MyAudioClip
{
	// Token: 0x06000757 RID: 1879 RVA: 0x00078F6F File Offset: 0x0007716F
	public MyAudioClip(string filename)
	{
		this.clip = (AudioClip)Resources.Load(filename);
		this.name = filename;
	}

	// Token: 0x06000758 RID: 1880 RVA: 0x00078F91 File Offset: 0x00077191
	public void Play()
	{
		Main.main.GetComponent<AudioSource>().PlayOneShot(this.clip);
		this.timeStart = mSystem.currentTimeMillis();
	}

	// Token: 0x06000759 RID: 1881 RVA: 0x00078FB8 File Offset: 0x000771B8
	public bool isPlaying()
	{
		return false;
	}

	// Token: 0x04000F10 RID: 3856
	public string name;

	// Token: 0x04000F11 RID: 3857
	public AudioClip clip;

	// Token: 0x04000F12 RID: 3858
	public long timeStart;
}
using System;
using System.Collections;

// Token: 0x02000097 RID: 151
public class MyHashTable
{
	// Token: 0x0600075A RID: 1882 RVA: 0x00078FCC File Offset: 0x000771CC
	public object get(object k)
	{
		return this.h[k];
	}

	// Token: 0x0600075B RID: 1883 RVA: 0x00078FEA File Offset: 0x000771EA
	public void clear()
	{
		this.h.Clear();
	}

	// Token: 0x0600075C RID: 1884 RVA: 0x00078FFC File Offset: 0x000771FC
	public IDictionaryEnumerator GetEnumerator()
	{
		return this.h.GetEnumerator();
	}

	// Token: 0x0600075D RID: 1885 RVA: 0x0007901C File Offset: 0x0007721C
	public int size()
	{
		return this.h.Count;
	}

	// Token: 0x0600075E RID: 1886 RVA: 0x0007903C File Offset: 0x0007723C
	public void put(object k, object v)
	{
		bool flag = this.h.ContainsKey(k);
		if (flag)
		{
			this.h.Remove(k);
		}
		this.h.Add(k, v);
	}

	// Token: 0x0600075F RID: 1887 RVA: 0x00079077 File Offset: 0x00077277
	public void remove(object k)
	{
		this.h.Remove(k);
	}

	// Token: 0x06000760 RID: 1888 RVA: 0x00079087 File Offset: 0x00077287
	public void Remove(string key)
	{
		this.h.Remove(key);
	}

	// Token: 0x06000761 RID: 1889 RVA: 0x00079098 File Offset: 0x00077298
	public bool containsKey(object key)
	{
		return this.h.ContainsKey(key);
	}

	// Token: 0x04000F13 RID: 3859
	public Hashtable h = new Hashtable();
}
using System;
using System.Collections;
using UnityEngine;

// Token: 0x02000098 RID: 152
public class MyKeyMap
{
	// Token: 0x06000763 RID: 1891 RVA: 0x000790CC File Offset: 0x000772CC
	static MyKeyMap()
	{
		MyKeyMap.h.Add(KeyCode.A, 97);
		MyKeyMap.h.Add(KeyCode.B, 98);
		MyKeyMap.h.Add(KeyCode.C, 99);
		MyKeyMap.h.Add(KeyCode.D, 100);
		MyKeyMap.h.Add(KeyCode.E, 101);
		MyKeyMap.h.Add(KeyCode.F, 102);
		MyKeyMap.h.Add(KeyCode.G, 103);
		MyKeyMap.h.Add(KeyCode.H, 104);
		MyKeyMap.h.Add(KeyCode.I, 105);
		MyKeyMap.h.Add(KeyCode.J, 106);
		MyKeyMap.h.Add(KeyCode.K, 107);
		MyKeyMap.h.Add(KeyCode.L, 108);
		MyKeyMap.h.Add(KeyCode.M, 109);
		MyKeyMap.h.Add(KeyCode.N, 110);
		MyKeyMap.h.Add(KeyCode.O, 111);
		MyKeyMap.h.Add(KeyCode.P, 112);
		MyKeyMap.h.Add(KeyCode.Q, 113);
		MyKeyMap.h.Add(KeyCode.R, 114);
		MyKeyMap.h.Add(KeyCode.S, 115);
		MyKeyMap.h.Add(KeyCode.T, 116);
		MyKeyMap.h.Add(KeyCode.U, 117);
		MyKeyMap.h.Add(KeyCode.V, 118);
		MyKeyMap.h.Add(KeyCode.W, 119);
		MyKeyMap.h.Add(KeyCode.X, 120);
		MyKeyMap.h.Add(KeyCode.Y, 121);
		MyKeyMap.h.Add(KeyCode.Z, 122);
		MyKeyMap.h.Add(KeyCode.Alpha0, 48);
		MyKeyMap.h.Add(KeyCode.Alpha1, 49);
		MyKeyMap.h.Add(KeyCode.Alpha2, 50);
		MyKeyMap.h.Add(KeyCode.Alpha3, 51);
		MyKeyMap.h.Add(KeyCode.Alpha4, 52);
		MyKeyMap.h.Add(KeyCode.Alpha5, 53);
		MyKeyMap.h.Add(KeyCode.Alpha6, 54);
		MyKeyMap.h.Add(KeyCode.Alpha7, 55);
		MyKeyMap.h.Add(KeyCode.Alpha8, 56);
		MyKeyMap.h.Add(KeyCode.Alpha9, 57);
		MyKeyMap.h.Add(KeyCode.Space, 32);
		MyKeyMap.h.Add(KeyCode.F1, -21);
		MyKeyMap.h.Add(KeyCode.F2, -22);
		MyKeyMap.h.Add(KeyCode.Equals, -25);
		MyKeyMap.h.Add(KeyCode.Minus, 45);
		MyKeyMap.h.Add(KeyCode.F3, -23);
		MyKeyMap.h.Add(KeyCode.UpArrow, -1);
		MyKeyMap.h.Add(KeyCode.DownArrow, -2);
		MyKeyMap.h.Add(KeyCode.LeftArrow, -3);
		MyKeyMap.h.Add(KeyCode.RightArrow, -4);
		MyKeyMap.h.Add(KeyCode.Backspace, -8);
		MyKeyMap.h.Add(KeyCode.Return, -5);
		MyKeyMap.h.Add(KeyCode.Period, 46);
		MyKeyMap.h.Add(KeyCode.At, 64);
		MyKeyMap.h.Add(KeyCode.Tab, -26);
	}

	// Token: 0x06000764 RID: 1892 RVA: 0x000795F4 File Offset: 0x000777F4
	public static int map(KeyCode k)
	{
		object obj = MyKeyMap.h[k];
		bool flag = obj == null;
		int result;
		if (flag)
		{
			result = 0;
		}
		else
		{
			result = (int)obj;
		}
		return result;
	}

	// Token: 0x04000F14 RID: 3860
	private static Hashtable h = new Hashtable();
}
using System;

// Token: 0x02000099 RID: 153
public class MyRandom
{
	// Token: 0x06000766 RID: 1894 RVA: 0x00079633 File Offset: 0x00077833
	public MyRandom()
	{
		this.r = new Random();
	}

	// Token: 0x06000767 RID: 1895 RVA: 0x00079648 File Offset: 0x00077848
	public int nextInt()
	{
		return this.r.Next();
	}

	// Token: 0x06000768 RID: 1896 RVA: 0x00079668 File Offset: 0x00077868
	public int nextInt(int a)
	{
		return this.r.Next(a);
	}

	// Token: 0x06000769 RID: 1897 RVA: 0x00079688 File Offset: 0x00077888
	public int nextInt(int a, int b)
	{
		return this.r.Next(a, b);
	}

	// Token: 0x04000F15 RID: 3861
	public Random r;
}
using System;
using System.Text;
using UnityEngine;

// Token: 0x0200009A RID: 154
public class myReader
{
	// Token: 0x0600076A RID: 1898 RVA: 0x000796A7 File Offset: 0x000778A7
	public myReader()
	{
	}

	// Token: 0x0600076B RID: 1899 RVA: 0x000796B1 File Offset: 0x000778B1
	public myReader(sbyte[] data)
	{
		this.buffer = data;
	}

	// Token: 0x0600076C RID: 1900 RVA: 0x000796C4 File Offset: 0x000778C4
	public myReader(string filename)
	{
		TextAsset textAsset = (TextAsset)Resources.Load(filename, typeof(TextAsset));
		this.buffer = mSystem.convertToSbyte(textAsset.bytes);
	}

	// Token: 0x0600076D RID: 1901 RVA: 0x00079700 File Offset: 0x00077900
	public sbyte readSByte()
	{
		bool flag = this.posRead < this.buffer.Length;
		if (flag)
		{
			sbyte[] array = this.buffer;
			int num = this.posRead;
			this.posRead = num + 1;
			return array[num];
		}
		this.posRead = this.buffer.Length;
		throw new Exception(" loi doc sbyte eof ");
	}

	// Token: 0x0600076E RID: 1902 RVA: 0x00079758 File Offset: 0x00077958
	public sbyte readByte()
	{
		return this.readSByte();
	}

	// Token: 0x0600076F RID: 1903 RVA: 0x00079770 File Offset: 0x00077970
	public void mark(int readlimit)
	{
		this.posMark = this.posRead;
	}

	// Token: 0x06000770 RID: 1904 RVA: 0x0007977F File Offset: 0x0007797F
	public void reset()
	{
		this.posRead = this.posMark;
	}

	// Token: 0x06000771 RID: 1905 RVA: 0x00079790 File Offset: 0x00077990
	public byte readUnsignedByte()
	{
		return myReader.convertSbyteToByte(this.readSByte());
	}

	// Token: 0x06000772 RID: 1906 RVA: 0x000797B0 File Offset: 0x000779B0
	public short readShort()
	{
		short num = 0;
		for (int i = 0; i < 2; i++)
		{
			num = (short)(num << 8);
			short num2 = num;
			short num3 = 255;
			sbyte[] array = this.buffer;
			int num4 = this.posRead;
			this.posRead = num4 + 1;
			num = (num2 | (num3 & array[num4]));
		}
		return num;
	}

	// Token: 0x06000773 RID: 1907 RVA: 0x00079804 File Offset: 0x00077A04
	public ushort readUnsignedShort()
	{
		ushort num = 0;
		for (int i = 0; i < 2; i++)
		{
			num = (ushort)(num << 8);
			ushort num2 = num;
			ushort num3 = 255;
			sbyte[] array = this.buffer;
			int num4 = this.posRead;
			this.posRead = num4 + 1;
			num = (num2 | (num3 & array[num4]));
		}
		return num;
	}

	// Token: 0x06000774 RID: 1908 RVA: 0x00079858 File Offset: 0x00077A58
	public int readInt()
	{
		int num = 0;
		for (int i = 0; i < 4; i++)
		{
			num <<= 8;
			int num2 = num;
			int num3 = 255;
			sbyte[] array = this.buffer;
			int num4 = this.posRead;
			this.posRead = num4 + 1;
			num = (num2 | (num3 & array[num4]));
		}
		return num;
	}

	// Token: 0x06000775 RID: 1909 RVA: 0x000798A8 File Offset: 0x00077AA8
	public long readLong()
	{
		long num = 0L;
		for (int i = 0; i < 8; i++)
		{
			num <<= 8;
			long num2 = num;
			long num3 = 255L;
			sbyte[] array = this.buffer;
			int num4 = this.posRead;
			this.posRead = num4 + 1;
			num = (num2 | (num3 & array[num4]));
		}
		return num;
	}

	// Token: 0x06000776 RID: 1910 RVA: 0x000798F8 File Offset: 0x00077AF8
	public bool readBool()
	{
		return this.readSByte() > 0;
	}

	// Token: 0x06000777 RID: 1911 RVA: 0x00079914 File Offset: 0x00077B14
	public bool readBoolean()
	{
		return this.readSByte() > 0;
	}

	// Token: 0x06000778 RID: 1912 RVA: 0x00079930 File Offset: 0x00077B30
	public string readString()
	{
		short num = this.readShort();
		byte[] array = new byte[(int)num];
		for (int i = 0; i < (int)num; i++)
		{
			array[i] = myReader.convertSbyteToByte(this.readSByte());
		}
		UTF8Encoding utf8Encoding = new UTF8Encoding();
		return utf8Encoding.GetString(array);
	}

	// Token: 0x06000779 RID: 1913 RVA: 0x00079984 File Offset: 0x00077B84
	public string readStringUTF()
	{
		short num = this.readShort();
		byte[] array = new byte[(int)num];
		for (int i = 0; i < (int)num; i++)
		{
			array[i] = myReader.convertSbyteToByte(this.readSByte());
		}
		UTF8Encoding utf8Encoding = new UTF8Encoding();
		return utf8Encoding.GetString(array);
	}

	// Token: 0x0600077A RID: 1914 RVA: 0x000799D8 File Offset: 0x00077BD8
	public string readUTF()
	{
		return this.readStringUTF();
	}

	// Token: 0x0600077B RID: 1915 RVA: 0x000799F0 File Offset: 0x00077BF0
	public int read()
	{
		bool flag = this.posRead < this.buffer.Length;
		int result;
		if (flag)
		{
			result = (int)this.readSByte();
		}
		else
		{
			result = -1;
		}
		return result;
	}

	// Token: 0x0600077C RID: 1916 RVA: 0x00079A24 File Offset: 0x00077C24
	public int read(ref sbyte[] data)
	{
		bool flag = data == null;
		int result;
		if (flag)
		{
			result = 0;
		}
		else
		{
			int num = 0;
			for (int i = 0; i < data.Length; i++)
			{
				data[i] = this.readSByte();
				bool flag2 = this.posRead > this.buffer.Length;
				if (flag2)
				{
					return -1;
				}
				num++;
			}
			result = num;
		}
		return result;
	}

	// Token: 0x0600077D RID: 1917 RVA: 0x00079A88 File Offset: 0x00077C88
	public void readFully(ref sbyte[] data)
	{
		bool flag = data != null && data.Length + this.posRead <= this.buffer.Length;
		if (flag)
		{
			for (int i = 0; i < data.Length; i++)
			{
				data[i] = this.readSByte();
			}
		}
	}

	// Token: 0x0600077E RID: 1918 RVA: 0x00079ADC File Offset: 0x00077CDC
	public int available()
	{
		return this.buffer.Length - this.posRead;
	}

	// Token: 0x0600077F RID: 1919 RVA: 0x00079B00 File Offset: 0x00077D00
	public static byte convertSbyteToByte(sbyte var)
	{
		bool flag = var > 0;
		byte result;
		if (flag)
		{
			result = (byte)var;
		}
		else
		{
			result = (byte)((int)var + 256);
		}
		return result;
	}

	// Token: 0x06000780 RID: 1920 RVA: 0x00079B28 File Offset: 0x00077D28
	public static byte[] convertSbyteToByte(sbyte[] var)
	{
		byte[] array = new byte[var.Length];
		for (int i = 0; i < var.Length; i++)
		{
			bool flag = var[i] > 0;
			if (flag)
			{
				array[i] = (byte)var[i];
			}
			else
			{
				array[i] = (byte)((int)var[i] + 256);
			}
		}
		return array;
	}

	// Token: 0x06000781 RID: 1921 RVA: 0x00079B7E File Offset: 0x00077D7E
	public void Close()
	{
		this.buffer = null;
	}

	// Token: 0x06000782 RID: 1922 RVA: 0x00079B88 File Offset: 0x00077D88
	public void close()
	{
		this.buffer = null;
	}

	// Token: 0x06000783 RID: 1923 RVA: 0x00079B94 File Offset: 0x00077D94
	public void read(ref sbyte[] data, int arg1, int arg2)
	{
		bool flag = data == null;
		if (!flag)
		{
			for (int i = 0; i < arg2; i++)
			{
				data[i + arg1] = this.readSByte();
				bool flag2 = this.posRead > this.buffer.Length;
				if (flag2)
				{
					break;
				}
			}
		}
	}

	// Token: 0x04000F16 RID: 3862
	public sbyte[] buffer;

	// Token: 0x04000F17 RID: 3863
	private int posRead;

	// Token: 0x04000F18 RID: 3864
	private int posMark;

	// Token: 0x04000F19 RID: 3865
	private static string fileName;

	// Token: 0x04000F1A RID: 3866
	private static int status;
}
using System;

// Token: 0x0200009B RID: 155
public class MyStream
{
	// Token: 0x06000784 RID: 1924 RVA: 0x00079BE4 File Offset: 0x00077DE4
	public static DataInputStream readFile(string path)
	{
		path = Main.res + path;
		DataInputStream result;
		try
		{
			result = DataInputStream.getResourceAsStream(path);
		}
		catch (Exception)
		{
			result = null;
		}
		return result;
	}
}
using System;

// Token: 0x0200009B RID: 155
public class MyStream
{
	// Token: 0x06000784 RID: 1924 RVA: 0x00079BE4 File Offset: 0x00077DE4
	public static DataInputStream readFile(string path)
	{
		path = Main.res + path;
		DataInputStream result;
		try
		{
			result = DataInputStream.getResourceAsStream(path);
		}
		catch (Exception)
		{
			result = null;
		}
		return result;
	}
}
using System;
using System.Text;

// Token: 0x0200009D RID: 157
public class myWriter
{
	// Token: 0x06000796 RID: 1942 RVA: 0x00079E4A File Offset: 0x0007804A
	public myWriter()
	{
	}

	// Token: 0x06000797 RID: 1943 RVA: 0x00079E6F File Offset: 0x0007806F
	public myWriter(int len)
	{
		this.buffer = new sbyte[len];
		this.lenght = len;
	}

	// Token: 0x06000798 RID: 1944 RVA: 0x00079EA8 File Offset: 0x000780A8
	public void writeSByte(sbyte value)
	{
		this.checkLenght(0);
		sbyte[] array = this.buffer;
		int num = this.posWrite;
		this.posWrite = num + 1;
		array[num] = value;
	}

	// Token: 0x06000799 RID: 1945 RVA: 0x00079ED8 File Offset: 0x000780D8
	public void writeSByteUncheck(sbyte value)
	{
		sbyte[] array = this.buffer;
		int num = this.posWrite;
		this.posWrite = num + 1;
		array[num] = value;
	}

	// Token: 0x0600079A RID: 1946 RVA: 0x00079EFF File Offset: 0x000780FF
	public void writeByte(sbyte value)
	{
		this.writeSByte(value);
	}

	// Token: 0x0600079B RID: 1947 RVA: 0x00079F0A File Offset: 0x0007810A
	public void writeByte(int value)
	{
		this.writeSByte((sbyte)value);
	}

	// Token: 0x0600079C RID: 1948 RVA: 0x00079F16 File Offset: 0x00078116
	public void writeChar(char value)
	{
		this.writeSByte(0);
		this.writeSByte((sbyte)value);
	}

	// Token: 0x0600079D RID: 1949 RVA: 0x00079F2A File Offset: 0x0007812A
	public void writeUnsignedByte(byte value)
	{
		this.writeSByte((sbyte)value);
	}

	// Token: 0x0600079E RID: 1950 RVA: 0x00079F38 File Offset: 0x00078138
	public void writeUnsignedByte(byte[] value)
	{
		this.checkLenght(value.Length);
		for (int i = 0; i < value.Length; i++)
		{
			this.writeSByteUncheck((sbyte)value[i]);
		}
	}

	// Token: 0x0600079F RID: 1951 RVA: 0x00079F70 File Offset: 0x00078170
	public void writeSByte(sbyte[] value)
	{
		this.checkLenght(value.Length);
		for (int i = 0; i < value.Length; i++)
		{
			this.writeSByteUncheck(value[i]);
		}
	}

	// Token: 0x060007A0 RID: 1952 RVA: 0x00079FA8 File Offset: 0x000781A8
	public void writeShort(short value)
	{
		this.checkLenght(2);
		for (int i = 1; i >= 0; i--)
		{
			this.writeSByteUncheck((sbyte)(value >> i * 8));
		}
	}

	// Token: 0x060007A1 RID: 1953 RVA: 0x00079FE4 File Offset: 0x000781E4
	public void writeShort(int value)
	{
		this.checkLenght(2);
		short num = (short)value;
		for (int i = 1; i >= 0; i--)
		{
			this.writeSByteUncheck((sbyte)(num >> i * 8));
		}
	}

	// Token: 0x060007A2 RID: 1954 RVA: 0x0007A024 File Offset: 0x00078224
	public void writeUnsignedShort(ushort value)
	{
		this.checkLenght(2);
		for (int i = 1; i >= 0; i--)
		{
			this.writeSByteUncheck((sbyte)(value >> i * 8));
		}
	}

	// Token: 0x060007A3 RID: 1955 RVA: 0x0007A060 File Offset: 0x00078260
	public void writeInt(int value)
	{
		this.checkLenght(4);
		for (int i = 3; i >= 0; i--)
		{
			this.writeSByteUncheck((sbyte)(value >> i * 8));
		}
	}

	// Token: 0x060007A4 RID: 1956 RVA: 0x0007A09C File Offset: 0x0007829C
	public void writeLong(long value)
	{
		this.checkLenght(8);
		for (int i = 7; i >= 0; i--)
		{
			this.writeSByteUncheck((sbyte)(value >> i * 8));
		}
	}

	// Token: 0x060007A5 RID: 1957 RVA: 0x0007A0D7 File Offset: 0x000782D7
	public void writeBoolean(bool value)
	{
		this.writeSByte(value ? 1 : 0);
	}

	// Token: 0x060007A6 RID: 1958 RVA: 0x0007A0E9 File Offset: 0x000782E9
	public void writeBool(bool value)
	{
		this.writeSByte(value ? 1 : 0);
	}

	// Token: 0x060007A7 RID: 1959 RVA: 0x0007A0FC File Offset: 0x000782FC
	public void writeString(string value)
	{
		char[] array = value.ToCharArray();
		this.writeShort((short)array.Length);
		this.checkLenght(array.Length);
		for (int i = 0; i < array.Length; i++)
		{
			this.writeSByteUncheck((sbyte)array[i]);
		}
	}

	// Token: 0x060007A8 RID: 1960 RVA: 0x0007A148 File Offset: 0x00078348
	public void writeUTF(string value)
	{
		Encoding unicode = Encoding.Unicode;
		Encoding encoding = Encoding.GetEncoding(65001);
		byte[] bytes = unicode.GetBytes(value);
		byte[] array = Encoding.Convert(unicode, encoding, bytes);
		this.writeShort((short)array.Length);
		this.checkLenght(array.Length);
		foreach (sbyte value2 in array)
		{
			this.writeSByteUncheck(value2);
		}
	}

	// Token: 0x060007A9 RID: 1961 RVA: 0x0007A1B8 File Offset: 0x000783B8
	public void write(ref sbyte[] data, int arg1, int arg2)
	{
		bool flag = data == null;
		if (!flag)
		{
			for (int i = 0; i < arg2; i++)
			{
				this.writeSByte(data[i + arg1]);
				bool flag2 = this.posWrite > this.buffer.Length;
				if (flag2)
				{
					break;
				}
			}
		}
	}

	// Token: 0x060007AA RID: 1962 RVA: 0x0007A208 File Offset: 0x00078408
	public void write(sbyte[] value)
	{
		this.writeSByte(value);
	}

	// Token: 0x060007AB RID: 1963 RVA: 0x0007A214 File Offset: 0x00078414
	public sbyte[] getData()
	{
		bool flag = this.posWrite <= 0;
		sbyte[] result;
		if (flag)
		{
			result = null;
		}
		else
		{
			sbyte[] array = new sbyte[this.posWrite];
			for (int i = 0; i < this.posWrite; i++)
			{
				array[i] = this.buffer[i];
			}
			result = array;
		}
		return result;
	}

	// Token: 0x060007AC RID: 1964 RVA: 0x0007A26C File Offset: 0x0007846C
	public void checkLenght(int ltemp)
	{
		bool flag = this.posWrite + ltemp > this.lenght;
		if (flag)
		{
			sbyte[] array = new sbyte[this.lenght + 1024 + ltemp];
			for (int i = 0; i < this.lenght; i++)
			{
				array[i] = this.buffer[i];
			}
			this.buffer = null;
			this.buffer = array;
			this.lenght += 1024 + ltemp;
		}
	}

	// Token: 0x060007AD RID: 1965 RVA: 0x0007A2E8 File Offset: 0x000784E8
	public void Close()
	{
		this.buffer = null;
	}

	// Token: 0x060007AE RID: 1966 RVA: 0x0007A2F2 File Offset: 0x000784F2
	public void close()
	{
		this.buffer = null;
	}

	// Token: 0x04000F1C RID: 3868
	public sbyte[] buffer = new sbyte[2048];

	// Token: 0x04000F1D RID: 3869
	private int posWrite;

	// Token: 0x04000F1E RID: 3870
	private int lenght = 2048;
}
using System;

// Token: 0x0200009E RID: 158
public class NClass
{
	// Token: 0x04000F1F RID: 3871
	public int classId;

	// Token: 0x04000F20 RID: 3872
	public string name;

	// Token: 0x04000F21 RID: 3873
	public SkillTemplate[] skillTemplates;
}
using System;
using UnityEngine;

// Token: 0x0200009F RID: 159
internal class Net
{
	// Token: 0x060007B0 RID: 1968 RVA: 0x0007A308 File Offset: 0x00078508
	public static void update()
	{
		bool flag = Net.www != null && Net.www.isDone;
		if (flag)
		{
			string str = string.Empty;
			bool flag2 = Net.www.error == null || Net.www.error.Equals(string.Empty);
			if (flag2)
			{
				str = Net.www.text;
			}
			Net.www = null;
			bool flag3 = Net.h != null;
			if (flag3)
			{
				Net.h.perform(str);
			}
		}
	}

	// Token: 0x060007B1 RID: 1969 RVA: 0x0007A38C File Offset: 0x0007858C
	public static void connectHTTP(string link, Command h)
	{
		bool flag = Net.www != null;
		if (flag)
		{
			Cout.LogError("GET HTTP BUSY");
		}
		Net.www = new WWW(link);
		Net.h = h;
	}

	// Token: 0x060007B2 RID: 1970 RVA: 0x0007A3C4 File Offset: 0x000785C4
	public static void connectHTTP2(string link, Command h)
	{
		Net.h = h;
		bool flag = link != null;
		if (flag)
		{
			h.perform(link);
		}
	}

	// Token: 0x04000F22 RID: 3874
	public static WWW www;

	// Token: 0x04000F23 RID: 3875
	public static Command h;
}
using System;

// Token: 0x020000A0 RID: 160
public class NewBoss : Mob, IMapObject
{
	// Token: 0x060007B4 RID: 1972 RVA: 0x0007A3F4 File Offset: 0x000785F4
	public NewBoss(int id, short px, short py, int templateID, long hp, long maxHp, int s)
	{
		this.mobId = id;
		this.x = (this.xFirst = (int)(px + 20));
		this.yFirst = (int)py;
		this.y = (int)py;
		this.xTo = this.x;
		this.yTo = this.y;
		this.maxHp = maxHp;
		this.hp = hp;
		this.templateId = templateID;
		this.h_hp_bar = 6;
		this.w_hp_bar = 100;
		this.len = this.w_hp_bar;
		base.updateHp_bar();
		bool flag = Mob.arrMobTemplate[this.templateId].data == null;
		if (flag)
		{
			Service.gI().requestModTemplate(this.templateId);
		}
		this.status = 2;
		this.frameArr = null;
	}

	// Token: 0x060007B5 RID: 1973 RVA: 0x0007A65E File Offset: 0x0007885E
	public override void setBody(short id)
	{
		this.changBody = true;
		this.smallBody = id;
	}

	// Token: 0x060007B6 RID: 1974 RVA: 0x0007A66F File Offset: 0x0007886F
	public override void clearBody()
	{
		this.changBody = false;
	}

	// Token: 0x060007B7 RID: 1975 RVA: 0x0007A67C File Offset: 0x0007887C
	public new static bool isExistNewMob(string id)
	{
		for (int i = 0; i < Mob.newMob.size(); i++)
		{
			string text = (string)Mob.newMob.elementAt(i);
			bool flag = text.Equals(id);
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060007B8 RID: 1976 RVA: 0x0007A6D0 File Offset: 0x000788D0
	public new void checkFrameTick(int[] array)
	{
		this.tick++;
		bool flag = this.tick > array.Length - 1;
		if (flag)
		{
			this.tick = 0;
		}
		this.frame = array[this.tick];
	}

	// Token: 0x060007B9 RID: 1977 RVA: 0x0007A714 File Offset: 0x00078914
	public void updateShadown()
	{
		int i = 0;
		this.xSd = this.x;
		bool flag = TileMap.tileTypeAt(this.x, this.y, 2);
		if (flag)
		{
			this.ySd = this.y;
		}
		else
		{
			this.ySd = this.y;
			while (i < 30)
			{
				i++;
				this.ySd += 24;
				bool flag2 = TileMap.tileTypeAt(this.xSd, this.ySd, 2);
				if (flag2)
				{
					bool flag3 = this.ySd % 24 != 0;
					if (flag3)
					{
						this.ySd -= this.ySd % 24;
					}
					break;
				}
			}
		}
	}

	// Token: 0x060007BA RID: 1978 RVA: 0x0007A7C4 File Offset: 0x000789C4
	private void paintShadow(mGraphics g)
	{
		int size = (int)TileMap.size;
		bool flag = (TileMap.mapID < 114 || TileMap.mapID > 120) && TileMap.mapID != 127 && TileMap.mapID != 128;
		if (flag)
		{
			bool flag2 = TileMap.tileTypeAt(this.xSd + size / 2, this.ySd + 1, 4);
			if (flag2)
			{
				g.setClip(this.xSd / size * size, (this.ySd - 30) / size * size, size, 100);
			}
			else
			{
				bool flag3 = TileMap.tileTypeAt((this.xSd - size / 2) / size, (this.ySd + 1) / size) == 0;
				if (flag3)
				{
					g.setClip(this.xSd / size * size, (this.ySd - 30) / size * size, 100, 100);
				}
				else
				{
					bool flag4 = TileMap.tileTypeAt((this.xSd + size / 2) / size, (this.ySd + 1) / size) == 0;
					if (flag4)
					{
						g.setClip(this.xSd / size * size, (this.ySd - 30) / size * size, size, 100);
					}
					else
					{
						bool flag5 = TileMap.tileTypeAt(this.xSd - size / 2, this.ySd + 1, 8);
						if (flag5)
						{
							g.setClip(this.xSd / 24 * size, (this.ySd - 30) / size * size, size, 100);
						}
					}
				}
			}
		}
		g.drawImage(NewBoss.shadowBig, this.xSd, this.ySd - 5, 3);
		g.setClip(GameScr.cmx, GameScr.cmy - GameCanvas.transY, GameScr.gW, GameScr.gH + 2 * GameCanvas.transY);
	}

	// Token: 0x060007BB RID: 1979 RVA: 0x0007A96C File Offset: 0x00078B6C
	public new void updateSuperEff()
	{
	}

	// Token: 0x060007BC RID: 1980 RVA: 0x0007A970 File Offset: 0x00078B70
	public override void update()
	{
		bool flag = this.frameArr == null && Mob.arrMobTemplate[this.templateId].data != null;
		if (flag)
		{
			this.GetFrame();
		}
		bool flag2 = this.frameArr == null || !this.isUpdate();
		if (!flag2)
		{
			this.updateShadown();
			switch (this.status)
			{
			case 0:
			case 1:
				this.updateDead();
				break;
			case 2:
				this.updateMobStandWait();
				break;
			case 3:
				this.updateMobAttack();
				break;
			case 4:
				this.updateMobFly();
				break;
			case 5:
				this.timeStatus = 0;
				this.updateMobWalk();
				break;
			case 6:
			{
				this.timeStatus = 0;
				this.p1++;
				this.y += this.p1;
				bool flag3 = this.y >= this.yFirst;
				if (flag3)
				{
					this.y = this.yFirst;
					this.p1 = 0;
					this.status = 5;
				}
				break;
			}
			case 7:
				this.updateInjure();
				base.update();
				break;
			}
		}
	}

	// Token: 0x060007BD RID: 1981 RVA: 0x0007AAAC File Offset: 0x00078CAC
	private void updateDead()
	{
		this.tick++;
		bool flag = this.tick > this.frameArr[13].Length - 1;
		if (flag)
		{
			this.tick = this.frameArr[13].Length - 1;
		}
		this.frame = this.frameArr[13][this.tick];
		bool flag2 = this.x != this.xTo || this.y != this.yTo;
		if (flag2)
		{
			this.x += (this.xTo - this.x) / 4;
			this.y += (this.yTo - this.y) / 4;
		}
	}

	// Token: 0x060007BE RID: 1982 RVA: 0x0007AB6C File Offset: 0x00078D6C
	private void updateMobFly()
	{
	}

	// Token: 0x060007BF RID: 1983 RVA: 0x0007AB70 File Offset: 0x00078D70
	public new void setAttack(global::Char cFocus)
	{
		this.isBusyAttackSomeOne = true;
		this.mobToAttack = null;
		this.cFocus = cFocus;
		this.p1 = 0;
		this.p2 = 0;
		this.status = 3;
		this.tick = 0;
		int cx = cFocus.cx;
		int cy = cFocus.cy;
		bool flag = Res.abs(cx - this.x) < this.w * 2 && Res.abs(cy - this.y) < this.h * 2;
		if (flag)
		{
			bool flag2 = this.x < cx;
			if (flag2)
			{
				this.x = cx - this.w;
			}
			else
			{
				this.x = cx + this.w;
			}
			this.p3 = 0;
		}
		else
		{
			this.p3 = 1;
		}
	}

	// Token: 0x060007C0 RID: 1984 RVA: 0x0007AC35 File Offset: 0x00078E35
	private void updateInjure()
	{
	}

	// Token: 0x060007C1 RID: 1985 RVA: 0x0007AC38 File Offset: 0x00078E38
	private void updateMobStandWait()
	{
		this.checkFrameTick(this.frameArr[0]);
		bool flag = this.x != this.xTo || this.y != this.yTo;
		if (flag)
		{
			this.x += (this.xTo - this.x) / 4;
			this.y += (this.yTo - this.y) / 4;
		}
	}

	// Token: 0x060007C2 RID: 1986 RVA: 0x0007ACB5 File Offset: 0x00078EB5
	public void setFly()
	{
		this.status = 4;
		this.flyUp = true;
	}

	// Token: 0x060007C3 RID: 1987 RVA: 0x0007ACC8 File Offset: 0x00078EC8
	public void setAttack(global::Char[] cAttack, long[] dame, sbyte type, sbyte dir)
	{
		this.charAttack = cAttack;
		this.dameHP = dame;
		this.type = type;
		this.dir = (int)dir;
		this.status = 3;
		bool flag = this.x != this.xTo || this.y != this.yTo;
		if (flag)
		{
			this.x += (this.xTo - this.x) / 4;
			this.y += (this.yTo - this.y) / 4;
		}
	}

	// Token: 0x060007C4 RID: 1988 RVA: 0x0007AD5C File Offset: 0x00078F5C
	public new void updateMobAttack()
	{
		bool flag = this.tick == this.frameArr[(int)(this.type + 1)].Length - 1;
		if (flag)
		{
			this.status = 2;
		}
		this.checkFrameTick(this.frameArr[(int)(this.type + 1)]);
		bool flag2 = this.tick == this.frameArr[15][(int)(this.type - 1)];
		if (flag2)
		{
			for (int i = 0; i < this.charAttack.Length; i++)
			{
				this.charAttack[i].doInjure(this.dameHP[i], 0L, false, false);
				ServerEffect.addServerEffect(this.frameArr[16][(int)(this.type - 1)], this.charAttack[i].cx, this.charAttack[i].cy, 1);
			}
		}
	}

	// Token: 0x060007C5 RID: 1989 RVA: 0x0007AE30 File Offset: 0x00079030
	public new void updateMobWalk()
	{
		this.checkFrameTick(this.frameArr[1]);
		sbyte speed = Mob.arrMobTemplate[this.templateId].speed;
		int num = (int)speed;
		bool flag = Res.abs(this.x - this.xTo) < (int)speed;
		if (flag)
		{
			num = Res.abs(this.x - this.xTo);
		}
		this.x += ((this.x >= this.xTo) ? (-num) : num);
		this.y = this.yTo;
		bool flag2 = this.x < this.xTo;
		if (flag2)
		{
			this.dir = 1;
		}
		else
		{
			bool flag3 = this.x > this.xTo;
			if (flag3)
			{
				this.dir = -1;
			}
		}
		bool flag4 = Res.abs(this.x - this.xTo) <= 1;
		if (flag4)
		{
			this.x = this.xTo;
			this.status = 2;
		}
	}

	// Token: 0x060007C6 RID: 1990 RVA: 0x0007AF28 File Offset: 0x00079128
	public new bool isPaint()
	{
		bool flag = this.x < GameScr.cmx;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = this.x > GameScr.cmx + GameScr.gW;
			if (flag2)
			{
				result = false;
			}
			else
			{
				bool flag3 = this.y < GameScr.cmy;
				if (flag3)
				{
					result = false;
				}
				else
				{
					bool flag4 = this.y > GameScr.cmy + GameScr.gH + 30;
					if (flag4)
					{
						result = false;
					}
					else
					{
						bool flag5 = this.status == 0;
						result = !flag5;
					}
				}
			}
		}
		return result;
	}

	// Token: 0x060007C7 RID: 1991 RVA: 0x0007AFB8 File Offset: 0x000791B8
	public new bool isUpdate()
	{
		bool flag = this.status == 0;
		return !flag;
	}

	// Token: 0x060007C8 RID: 1992 RVA: 0x0007AFE0 File Offset: 0x000791E0
	public override void paint(mGraphics g)
	{
		bool flag = Mob.arrMobTemplate[this.templateId].data == null || this.isHide;
		if (!flag)
		{
			bool isMafuba = this.isMafuba;
			if (isMafuba)
			{
				bool flag2 = !this.changBody;
				if (flag2)
				{
					Mob.arrMobTemplate[this.templateId].data.paintFrame(g, this.frame, this.xMFB, this.yMFB, (this.dir != 1) ? 1 : 0, 2);
				}
				else
				{
					SmallImage.drawSmallImage(g, (int)this.smallBody, this.xMFB, this.yMFB, (this.dir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
			}
			else
			{
				bool flag3 = this.isShadown;
				if (flag3)
				{
					this.paintShadow(g);
				}
				g.translate(0, GameCanvas.transY);
				bool flag4 = !this.changBody;
				if (flag4)
				{
					int num = 33;
					bool flag5 = this.yTemp == -1;
					if (flag5)
					{
						this.yTemp = this.y;
					}
					bool flag6 = TileMap.tileTypeAt(this.x + num, this.y + this.fy, 4);
					if (flag6)
					{
						this.xTempLeft = TileMap.tileXofPixel(this.x + num) - num;
						this.xTempRight = TileMap.tileXofPixel(this.x + num);
						bool flag7 = this.x > this.xTempLeft && this.x < this.xTempRight && this.xTempRight != -1;
						if (flag7)
						{
							this.x = this.xTempLeft;
						}
					}
					bool flag8 = this.y < this.yTemp && this.yTemp != -1;
					if (flag8)
					{
						this.yTemp = this.y;
						this.x += num;
					}
					bool flag9 = this.y > this.yTemp;
					if (flag9)
					{
						this.yTemp = this.y;
						this.x -= num;
					}
					Mob.arrMobTemplate[this.templateId].data.paintFrame(g, this.frame, this.x, this.y + this.fy, (this.dir != 1) ? 1 : 0, 2);
				}
				else
				{
					SmallImage.drawSmallImage(g, (int)this.smallBody, this.x, this.y + this.fy - 9, (this.dir != 1) ? 2 : 0, mGraphics.BOTTOM | mGraphics.HCENTER);
				}
				g.translate(0, -GameCanvas.transY);
				bool flag10 = this.hp <= 0L;
				if (!flag10)
				{
					int imageWidth = mGraphics.getImageWidth(this.imgHPtem);
					int imageHeight = mGraphics.getImageHeight(this.imgHPtem);
					int num2 = imageWidth;
					int num3 = this.x - imageWidth;
					int y = this.y - this.h - 5;
					int num4 = imageWidth * 2 * this.per / 100;
					int w = num4;
					bool flag11 = this.per_tem >= this.per;
					if (flag11)
					{
						int num5 = imageWidth;
						int per_tem = this.per_tem;
						int num7;
						if (GameCanvas.gameTick % 6 > 3)
						{
							int num6 = this.offset;
							this.offset = num6 + 1;
							num7 = num6;
						}
						else
						{
							num7 = this.offset;
						}
						w = num5 * (this.per_tem = per_tem - num7) / 100;
						bool flag12 = this.per_tem <= 0;
						if (flag12)
						{
							this.per_tem = 0;
						}
						bool flag13 = this.per_tem < this.per;
						if (flag13)
						{
							this.per_tem = this.per;
						}
						bool flag14 = this.offset >= 3;
						if (flag14)
						{
							this.offset = 3;
						}
					}
					bool flag15 = num4 > num2;
					int num8;
					if (flag15)
					{
						num8 = num4 - num2;
						bool flag16 = num8 <= 0;
						if (flag16)
						{
							num8 = 0;
						}
					}
					else
					{
						num2 = num4;
						num8 = 0;
					}
					g.drawImage(GameScr.imgHP_tm_xam, num3, y, mGraphics.TOP | mGraphics.LEFT);
					g.drawImage(GameScr.imgHP_tm_xam, num3 + imageWidth, y, mGraphics.TOP | mGraphics.LEFT);
					g.setColor(16777215);
					g.fillRect(num3, y, w, 2);
					g.drawRegion(this.imgHPtem, 0, 0, num2, imageHeight, 0, num3, y, mGraphics.TOP | mGraphics.LEFT);
					g.drawRegion(this.imgHPtem, 0, 0, num8, imageHeight, 0, num3 + imageWidth, y, mGraphics.TOP | mGraphics.LEFT);
				}
			}
		}
	}

	// Token: 0x060007C9 RID: 1993 RVA: 0x0007B464 File Offset: 0x00079664
	public new int getHPColor()
	{
		return 16711680;
	}

	// Token: 0x060007CA RID: 1994 RVA: 0x0007B47B File Offset: 0x0007967B
	public new void startDie()
	{
		this.hp = 0L;
		this.injureThenDie = true;
		this.hp = 0L;
		this.status = 1;
		this.p1 = -3;
		this.p2 = -this.dir;
		this.p3 = 0;
	}

	// Token: 0x060007CB RID: 1995 RVA: 0x0007B4B8 File Offset: 0x000796B8
	public new void attackOtherMob(Mob mobToAttack)
	{
		this.mobToAttack = mobToAttack;
		this.isBusyAttackSomeOne = true;
		this.cFocus = null;
		this.p1 = 0;
		this.p2 = 0;
		this.status = 3;
		this.tick = 0;
		int x = mobToAttack.x;
		int y = mobToAttack.y;
		bool flag = Res.abs(x - this.x) < this.w * 2 && Res.abs(y - this.y) < this.h * 2;
		if (flag)
		{
			bool flag2 = this.x < x;
			if (flag2)
			{
				this.x = x - this.w;
			}
			else
			{
				this.x = x + this.w;
			}
			this.p3 = 0;
		}
		else
		{
			this.p3 = 1;
		}
	}

	// Token: 0x060007CC RID: 1996 RVA: 0x0007B580 File Offset: 0x00079780
	public new int getX()
	{
		return this.x;
	}

	// Token: 0x060007CD RID: 1997 RVA: 0x0007B598 File Offset: 0x00079798
	public new int getY()
	{
		return this.y;
	}

	// Token: 0x060007CE RID: 1998 RVA: 0x0007B5B0 File Offset: 0x000797B0
	public new int getH()
	{
		return this.h;
	}

	// Token: 0x060007CF RID: 1999 RVA: 0x0007B5C8 File Offset: 0x000797C8
	public new int getW()
	{
		return this.w;
	}

	// Token: 0x060007D0 RID: 2000 RVA: 0x0007B5E0 File Offset: 0x000797E0
	public new void stopMoving()
	{
		bool flag = this.status == 5;
		if (flag)
		{
			this.status = 2;
			this.p1 = (this.p2 = (this.p3 = 0));
			this.forceWait = 50;
		}
	}

	// Token: 0x060007D1 RID: 2001 RVA: 0x0007B628 File Offset: 0x00079828
	public new bool isInvisible()
	{
		return this.status == 0 || this.status == 1;
	}

	// Token: 0x060007D2 RID: 2002 RVA: 0x0007B650 File Offset: 0x00079850
	public new void removeHoldEff()
	{
		bool flag = this.holdEffID != 0;
		if (flag)
		{
			this.holdEffID = 0;
		}
	}

	// Token: 0x060007D3 RID: 2003 RVA: 0x0007B674 File Offset: 0x00079874
	public new void removeBlindEff()
	{
		this.blindEff = false;
	}

	// Token: 0x060007D4 RID: 2004 RVA: 0x0007B67E File Offset: 0x0007987E
	public new void removeSleepEff()
	{
		this.sleepEff = false;
	}

	// Token: 0x060007D5 RID: 2005 RVA: 0x0007B688 File Offset: 0x00079888
	public new void move(short xMoveTo, short yMoveTo)
	{
		bool flag = yMoveTo != -1;
		if (flag)
		{
			bool flag2 = Res.distance(this.x, this.y, this.xTo, this.yTo) > 100;
			if (flag2)
			{
				this.x = (int)xMoveTo;
				this.y = (int)yMoveTo;
				this.status = 2;
			}
			else
			{
				this.xTo = (int)xMoveTo;
				this.yTo = (int)yMoveTo;
				this.status = 5;
			}
		}
		else
		{
			this.xTo = (int)xMoveTo;
			this.status = 5;
		}
	}

	// Token: 0x060007D6 RID: 2006 RVA: 0x0007B70C File Offset: 0x0007990C
	public new void GetFrame()
	{
		try
		{
			this.frameArr = (int[][])Controller.frameHT_NEWBOSS.get(this.templateId.ToString() + string.Empty);
			this.w = Mob.arrMobTemplate[this.templateId].data.width;
			this.h = Mob.arrMobTemplate[this.templateId].data.height;
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060007D7 RID: 2007 RVA: 0x0007B798 File Offset: 0x00079998
	public void setDie()
	{
		this.status = 0;
	}

	// Token: 0x04000F24 RID: 3876
	public static Image shadowBig = mSystem.loadImage("/mainImage/shadowBig.png");

	// Token: 0x04000F25 RID: 3877
	public int xTo;

	// Token: 0x04000F26 RID: 3878
	public int yTo;

	// Token: 0x04000F27 RID: 3879
	public bool haftBody;

	// Token: 0x04000F28 RID: 3880
	public bool change;

	// Token: 0x04000F29 RID: 3881
	public new int xSd;

	// Token: 0x04000F2A RID: 3882
	public new int ySd;

	// Token: 0x04000F2B RID: 3883
	private int wCount;

	// Token: 0x04000F2C RID: 3884
	public new bool isShadown = true;

	// Token: 0x04000F2D RID: 3885
	private int tick;

	// Token: 0x04000F2E RID: 3886
	private int frame;

	// Token: 0x04000F2F RID: 3887
	public new static Image imgHP = mSystem.loadImage("/mainImage/myTexture2dmobHP.png");

	// Token: 0x04000F30 RID: 3888
	private bool wy;

	// Token: 0x04000F31 RID: 3889
	private int wt;

	// Token: 0x04000F32 RID: 3890
	private int fy;

	// Token: 0x04000F33 RID: 3891
	private int ty;

	// Token: 0x04000F34 RID: 3892
	public new int typeSuperEff;

	// Token: 0x04000F35 RID: 3893
	private global::Char focus;

	// Token: 0x04000F36 RID: 3894
	private bool flyUp;

	// Token: 0x04000F37 RID: 3895
	private bool flyDown;

	// Token: 0x04000F38 RID: 3896
	private int dy;

	// Token: 0x04000F39 RID: 3897
	public bool changePos;

	// Token: 0x04000F3A RID: 3898
	private int tShock;

	// Token: 0x04000F3B RID: 3899
	public new bool isBusyAttackSomeOne = true;

	// Token: 0x04000F3C RID: 3900
	private int tA;

	// Token: 0x04000F3D RID: 3901
	private global::Char[] charAttack;

	// Token: 0x04000F3E RID: 3902
	private long[] dameHP;

	// Token: 0x04000F3F RID: 3903
	private sbyte type;

	// Token: 0x04000F40 RID: 3904
	private int ff;

	// Token: 0x04000F41 RID: 3905
	private int offset;

	// Token: 0x04000F42 RID: 3906
	private int xTempRight = -1;

	// Token: 0x04000F43 RID: 3907
	private int xTempLeft = -1;

	// Token: 0x04000F44 RID: 3908
	private int yTemp = -1;

	// Token: 0x04000F45 RID: 3909
	private sbyte[] cou = new sbyte[]
	{
		-1,
		1
	};

	// Token: 0x04000F46 RID: 3910
	public new global::Char injureBy;

	// Token: 0x04000F47 RID: 3911
	public new bool injureThenDie;

	// Token: 0x04000F48 RID: 3912
	public new Mob mobToAttack;

	// Token: 0x04000F49 RID: 3913
	public new int forceWait;

	// Token: 0x04000F4A RID: 3914
	public new bool blindEff;

	// Token: 0x04000F4B RID: 3915
	public new bool sleepEff;

	// Token: 0x04000F4C RID: 3916
	private int[][] frameArr = new int[][]
	{
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		},
		new int[]
		{
			0,
			0,
			0,
			0,
			1,
			1,
			1,
			1
		}
	};

	// Token: 0x04000F4D RID: 3917
	public new const sbyte stand = 0;

	// Token: 0x04000F4E RID: 3918
	public const sbyte moveFra = 1;

	// Token: 0x04000F4F RID: 3919
	public new const sbyte attack1 = 2;

	// Token: 0x04000F50 RID: 3920
	public new const sbyte attack2 = 3;

	// Token: 0x04000F51 RID: 3921
	public const sbyte attack3 = 4;

	// Token: 0x04000F52 RID: 3922
	public const sbyte attack4 = 5;

	// Token: 0x04000F53 RID: 3923
	public const sbyte attack5 = 6;

	// Token: 0x04000F54 RID: 3924
	public const sbyte attack6 = 7;

	// Token: 0x04000F55 RID: 3925
	public const sbyte attack7 = 8;

	// Token: 0x04000F56 RID: 3926
	public const sbyte attack8 = 9;

	// Token: 0x04000F57 RID: 3927
	public const sbyte attack9 = 10;

	// Token: 0x04000F58 RID: 3928
	public const sbyte attack10 = 11;

	// Token: 0x04000F59 RID: 3929
	public new const sbyte hurt = 12;

	// Token: 0x04000F5A RID: 3930
	public const sbyte die = 13;

	// Token: 0x04000F5B RID: 3931
	public const sbyte fly = 14;

	// Token: 0x04000F5C RID: 3932
	public const sbyte adddame = 15;

	// Token: 0x04000F5D RID: 3933
	public const sbyte typeEff = 16;
}
using System;

// Token: 0x020000A1 RID: 161
internal class NewPanel : IActionListener, IChatable
{
	// Token: 0x060007D9 RID: 2009 RVA: 0x0007B7C2 File Offset: 0x000799C2
	public void paint(mGraphics g)
	{
	}

	// Token: 0x060007DA RID: 2010 RVA: 0x0007B7C5 File Offset: 0x000799C5
	public void update()
	{
	}

	// Token: 0x060007DB RID: 2011 RVA: 0x0007B7C8 File Offset: 0x000799C8
	public void perform(int idAction, object p)
	{
	}

	// Token: 0x060007DC RID: 2012 RVA: 0x0007B7CB File Offset: 0x000799CB
	public void onCancelChat()
	{
	}

	// Token: 0x060007DD RID: 2013 RVA: 0x0007B7CE File Offset: 0x000799CE
	public void onChatFromMe(string text, string to)
	{
	}
}
using System;

// Token: 0x020000A2 RID: 162
public class NinjaUtil
{
	// Token: 0x060007DF RID: 2015 RVA: 0x0007B7DA File Offset: 0x000799DA
	public static void onLoadMapComplete()
	{
		GameCanvas.endDlg();
	}

	// Token: 0x060007E0 RID: 2016 RVA: 0x0007B7E3 File Offset: 0x000799E3
	public void onLoading()
	{
		GameCanvas.startWaitDlg(mResources.downloading_data);
	}

	// Token: 0x060007E1 RID: 2017 RVA: 0x0007B7F4 File Offset: 0x000799F4
	public static int randomNumber(int max)
	{
		MyRandom myRandom = new MyRandom();
		return myRandom.nextInt(max);
	}

	// Token: 0x060007E2 RID: 2018 RVA: 0x0007B814 File Offset: 0x00079A14
	public static sbyte[] readByteArray(Message msg)
	{
		try
		{
			int num = msg.reader().readInt();
			bool flag = num > 1;
			if (flag)
			{
				sbyte[] result = new sbyte[num];
				msg.reader().read(ref result);
				return result;
			}
		}
		catch (Exception)
		{
		}
		return null;
	}

	// Token: 0x060007E3 RID: 2019 RVA: 0x0007B870 File Offset: 0x00079A70
	public static sbyte[] readByteArray(myReader dos)
	{
		try
		{
			int num = dos.readInt();
			sbyte[] result = new sbyte[num];
			dos.read(ref result);
			return result;
		}
		catch (Exception)
		{
			Cout.LogError("LOI DOC readByteArray dos  NINJAUTIL");
		}
		return null;
	}

	// Token: 0x060007E4 RID: 2020 RVA: 0x0007B8C0 File Offset: 0x00079AC0
	public static string replace(string text, string regex, string replacement)
	{
		return text.Replace(regex, replacement);
	}

	// Token: 0x060007E5 RID: 2021 RVA: 0x0007B8DC File Offset: 0x00079ADC
	public static string numberTostring(string number)
	{
		string text = string.Empty;
		string str = string.Empty;
		bool flag = number.Equals(string.Empty);
		string result;
		if (flag)
		{
			result = text;
		}
		else
		{
			bool flag2 = number[0] == '-';
			if (flag2)
			{
				str = "-";
				number = number.Substring(1);
			}
			for (int i = number.Length - 1; i >= 0; i--)
			{
				text = (((number.Length - 1 - i) % 3 != 0 || number.Length - 1 - i <= 0) ? (number[i].ToString() + text) : (number[i].ToString() + "." + text));
			}
			result = str + text;
		}
		return result;
	}

	// Token: 0x060007E6 RID: 2022 RVA: 0x0007B9B0 File Offset: 0x00079BB0
	public static string getDate(int second)
	{
		long num = (long)second * 1000L;
		DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).Add(new TimeSpan(num * 10000L)).ToUniversalTime();
		int hour = dateTime.Hour;
		int minute = dateTime.Minute;
		int day = dateTime.Day;
		int month = dateTime.Month;
		int year = dateTime.Year;
		return string.Concat(new string[]
		{
			day.ToString(),
			"/",
			month.ToString(),
			"/",
			year.ToString(),
			" ",
			hour.ToString(),
			"h"
		});
	}

	// Token: 0x060007E7 RID: 2023 RVA: 0x0007BA7C File Offset: 0x00079C7C
	public static string getDate2(long second)
	{
		long num = second + 25200000L;
		DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).Add(new TimeSpan(num * 10000L)).ToUniversalTime();
		int hour = dateTime.Hour;
		int minute = dateTime.Minute;
		return hour.ToString() + "h" + minute.ToString() + "m";
	}

	// Token: 0x060007E8 RID: 2024 RVA: 0x0007BAF8 File Offset: 0x00079CF8
	public static string getTime(int timeRemainS)
	{
		int num = 0;
		bool flag = timeRemainS > 60;
		if (flag)
		{
			num = timeRemainS / 60;
			timeRemainS %= 60;
		}
		int num2 = 0;
		bool flag2 = num > 60;
		if (flag2)
		{
			num2 = num / 60;
			num %= 60;
		}
		int num3 = 0;
		bool flag3 = num2 > 24;
		if (flag3)
		{
			num3 = num2 / 24;
			num2 %= 24;
		}
		string str = string.Empty;
		bool flag4 = num3 > 0;
		string result;
		if (flag4)
		{
			str += num3.ToString();
			str += "d";
			result = str + num2.ToString() + "h";
		}
		else
		{
			bool flag5 = num2 > 0;
			if (flag5)
			{
				str += num2.ToString();
				str += "h";
				result = str + num.ToString() + "'";
			}
			else
			{
				str = ((num <= 9) ? (str + "0" + num.ToString()) : (str + num.ToString()));
				str += ":";
				bool flag6 = timeRemainS > 9;
				if (flag6)
				{
					result = str + timeRemainS.ToString();
				}
				else
				{
					result = str + "0" + timeRemainS.ToString();
				}
			}
		}
		return result;
	}

	// Token: 0x060007E9 RID: 2025 RVA: 0x0007BC3C File Offset: 0x00079E3C
	public static string getMoneys(long m)
	{
		string text = string.Empty;
		long num = m / 1000L + 1L;
		int num2 = 0;
		while ((long)num2 < num)
		{
			bool flag = m >= 1000L;
			if (!flag)
			{
				text = m.ToString() + text;
				break;
			}
			long num3 = m % 1000L;
			text = ((num3 != 0L) ? ((num3 >= 10L) ? ((num3 >= 100L) ? ("." + num3.ToString() + text) : (".0" + num3.ToString() + text)) : (".00" + num3.ToString() + text)) : (".000" + text));
			m /= 1000L;
			num2++;
		}
		return text;
	}

	// Token: 0x060007EA RID: 2026 RVA: 0x0007BD10 File Offset: 0x00079F10
	public static string getTimeAgo(int timeRemainS)
	{
		int num = 0;
		bool flag = timeRemainS > 60;
		if (flag)
		{
			num = timeRemainS / 60;
			timeRemainS %= 60;
		}
		int num2 = 0;
		bool flag2 = num > 60;
		if (flag2)
		{
			num2 = num / 60;
			num %= 60;
		}
		int num3 = 0;
		bool flag3 = num2 > 24;
		if (flag3)
		{
			num3 = num2 / 24;
			num2 %= 24;
		}
		string str = string.Empty;
		bool flag4 = num3 > 0;
		string result;
		if (flag4)
		{
			str += num3.ToString();
			str += "d";
			result = str + num2.ToString() + "h";
		}
		else
		{
			bool flag5 = num2 > 0;
			if (flag5)
			{
				str += num2.ToString();
				str += "h";
				result = str + num.ToString() + "'";
			}
			else
			{
				bool flag6 = num == 0;
				if (flag6)
				{
					num = 1;
				}
				str += num.ToString();
				result = str + "ph";
			}
		}
		return result;
	}

	// Token: 0x060007EB RID: 2027 RVA: 0x0007BE14 File Offset: 0x0007A014
	public static string[] split(string original, string separator)
	{
		MyVector myVector = new MyVector();
		for (int i = original.IndexOf(separator); i >= 0; i = original.IndexOf(separator))
		{
			myVector.addElement(original.Substring(0, i));
			original = original.Substring(i + separator.Length);
		}
		myVector.addElement(original);
		string[] array = new string[myVector.size()];
		bool flag = myVector.size() > 0;
		if (flag)
		{
			for (int j = 0; j < myVector.size(); j++)
			{
				array[j] = (string)myVector.elementAt(j);
			}
		}
		return array;
	}

	// Token: 0x060007EC RID: 2028 RVA: 0x0007BEC0 File Offset: 0x0007A0C0
	public static bool checkNumber(string numberStr)
	{
		bool result;
		try
		{
			int.Parse(numberStr);
			result = true;
		}
		catch (Exception)
		{
			result = false;
		}
		return result;
	}
}
using System;

// Token: 0x020000A3 RID: 163
public class Npc : global::Char
{
	// Token: 0x060007EE RID: 2030 RVA: 0x0007BF00 File Offset: 0x0007A100
	public Npc(int npcId, int status, int cx, int cy, int templateId, int avatar)
	{
		this.isShadown = true;
		this.npcId = npcId;
		this.avatar = avatar;
		this.cx = cx;
		this.cy = cy;
		this.xSd = cx;
		this.ySd = cy;
		this.statusMe = status;
		bool flag = npcId != -1;
		if (flag)
		{
			this.template = Npc.arrNpcTemplate[templateId];
		}
		bool flag2 = templateId == 23 || templateId == 42;
		if (flag2)
		{
			this.ch = 45;
		}
		bool flag3 = templateId == 51;
		if (flag3)
		{
			this.isShadown = false;
			this.duaHauIndex = status;
		}
		bool flag4 = this.template != null;
		if (flag4)
		{
			bool flag5 = this.template.name == null;
			if (flag5)
			{
				this.template.name = string.Empty;
			}
			this.template.name = Res.changeString(this.template.name);
		}
	}

	// Token: 0x060007EF RID: 2031 RVA: 0x0007BFFC File Offset: 0x0007A1FC
	public void setStatus(sbyte s, int sc)
	{
		this.duaHauIndex = (int)s;
		this.last = (this.cur = mSystem.currentTimeMillis());
		this.seconds = sc;
	}

	// Token: 0x060007F0 RID: 2032 RVA: 0x0007C02C File Offset: 0x0007A22C
	public static void clearEffTask()
	{
		for (int i = 0; i < GameScr.vNpc.size(); i++)
		{
			Npc npc = (Npc)GameScr.vNpc.elementAt(i);
			npc.effTask = null;
			npc.indexEffTask = -1;
		}
	}

	// Token: 0x060007F1 RID: 2033 RVA: 0x0007C074 File Offset: 0x0007A274
	public override void update()
	{
		bool flag = this.template.npcTemplateId == 51;
		if (flag)
		{
			this.cur = mSystem.currentTimeMillis();
			bool flag2 = this.cur - this.last >= 1000L;
			if (flag2)
			{
				this.seconds--;
				this.last = this.cur;
				bool flag3 = this.seconds < 0;
				if (flag3)
				{
					this.seconds = 0;
				}
			}
		}
		bool isShadown = this.isShadown;
		if (isShadown)
		{
			base.updateShadown();
		}
		bool flag4 = this.effTask == null;
		if (flag4)
		{
			sbyte[] array = new sbyte[]
			{
				-1,
				9,
				9,
				10,
				10,
				11,
				11
			};
			bool flag5 = global::Char.myCharz().ctaskId >= 9 && global::Char.myCharz().ctaskId <= 10 && global::Char.myCharz().nClass.classId > 0 && (int)array[global::Char.myCharz().nClass.classId] == this.template.npcTemplateId;
			if (flag5)
			{
				bool flag6 = global::Char.myCharz().taskMaint == null;
				if (flag6)
				{
					this.effTask = GameScr.efs[57];
					this.indexEffTask = 0;
				}
				else
				{
					bool flag7 = global::Char.myCharz().taskMaint != null && global::Char.myCharz().taskMaint.index + 1 == global::Char.myCharz().taskMaint.subNames.Length;
					if (flag7)
					{
						this.effTask = GameScr.efs[62];
						this.indexEffTask = 0;
					}
				}
			}
			else
			{
				sbyte taskNpcId = GameScr.getTaskNpcId();
				bool flag8 = global::Char.myCharz().taskMaint == null && (int)taskNpcId == this.template.npcTemplateId;
				if (flag8)
				{
					this.indexEffTask = 0;
				}
				else
				{
					bool flag9 = global::Char.myCharz().taskMaint != null && (int)taskNpcId == this.template.npcTemplateId;
					if (flag9)
					{
						bool flag10 = global::Char.myCharz().taskMaint.index + 1 == global::Char.myCharz().taskMaint.subNames.Length;
						if (flag10)
						{
							this.effTask = GameScr.efs[98];
						}
						else
						{
							this.effTask = GameScr.efs[98];
						}
						this.indexEffTask = 0;
					}
				}
			}
		}
		base.update();
		bool flag11 = TileMap.mapID != 51;
		if (!flag11)
		{
			bool flag12 = this.cx > global::Char.myCharz().cx;
			if (flag12)
			{
				this.cdir = -1;
			}
			else
			{
				this.cdir = 1;
			}
			bool flag13 = this.template.npcTemplateId % 2 == 0;
			if (flag13)
			{
				bool flag14 = this.cf == 1;
				if (flag14)
				{
					this.cf = 0;
				}
				else
				{
					this.cf = 1;
				}
			}
		}
	}

	// Token: 0x060007F2 RID: 2034 RVA: 0x0007C33C File Offset: 0x0007A53C
	public void paintHead(mGraphics g, int xStart, int yStart)
	{
		Part part = GameScr.parts[this.template.headId];
		bool flag = this.cdir == 1;
		if (flag)
		{
			SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[this.cf][0][0]].id, GameCanvas.w - 31 - g.getTranslateX(), 2 - g.getTranslateY(), 0, 0);
		}
		else
		{
			SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[this.cf][0][0]].id, GameCanvas.w - 31 - g.getTranslateX(), 2 - g.getTranslateY(), 2, 24);
		}
	}

	// Token: 0x060007F3 RID: 2035 RVA: 0x0007C3E8 File Offset: 0x0007A5E8
	public override void paint(mGraphics g)
	{
		bool flag = global::Char.isLoadingMap || this.isHide || !base.isPaint() || this.statusMe == 15;
		if (!flag)
		{
			bool flag2 = this.cTypePk != 0;
			if (flag2)
			{
				base.paint(g);
			}
			else
			{
				bool flag3 = this.template == null;
				if (!flag3)
				{
					bool flag4 = this.template.npcTemplateId != 4 && this.template.npcTemplateId != 51 && this.template.npcTemplateId != 50;
					if (flag4)
					{
						g.drawImage(TileMap.bong, this.cx, this.cy, 3);
					}
					bool flag5 = this.template.npcTemplateId == 3;
					if (flag5)
					{
						SmallImage.drawSmallImage(g, 265, this.cx, this.cy, 0, mGraphics.BOTTOM | mGraphics.HCENTER);
						bool flag6 = global::Char.myCharz().npcFocus != null && global::Char.myCharz().npcFocus.Equals(this) && ChatPopup.currChatPopup == null;
						if (flag6)
						{
							g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 0, this.cx, this.cy - this.ch + 4, mGraphics.BOTTOM | mGraphics.HCENTER);
						}
						this.dyEff = 60;
					}
					else
					{
						bool flag7 = this.template.npcTemplateId != 4;
						if (flag7)
						{
							bool flag8 = this.template.npcTemplateId == 50 || this.template.npcTemplateId == 51;
							if (flag8)
							{
								bool flag9 = this.duahau != null;
								if (flag9)
								{
									bool flag10 = this.template.npcTemplateId == 50 && Npc.mabuEff;
									if (flag10)
									{
										Npc.tMabuEff++;
										bool flag11 = GameCanvas.gameTick % 3 == 0;
										if (flag11)
										{
											Effect me = new Effect(19, this.cx + Res.random(-50, 50), this.cy, 2, 1, -1);
											EffecMn.addEff(me);
										}
										bool flag12 = GameCanvas.gameTick % 15 == 0;
										if (flag12)
										{
											Effect me2 = new Effect(18, this.cx + Res.random(-5, 5), this.cy + Res.random(-90, 0), 2, 1, -1);
											EffecMn.addEff(me2);
										}
										bool flag13 = Npc.tMabuEff == 100;
										if (flag13)
										{
											GameScr.gI().activeSuperPower(this.cx, this.cy);
										}
										bool flag14 = Npc.tMabuEff == 110;
										if (flag14)
										{
											Npc.mabuEff = false;
											this.template.npcTemplateId = 4;
										}
									}
									int num = 0;
									bool flag15 = SmallImage.imgNew[this.duahau[this.duaHauIndex]] != null && SmallImage.imgNew[this.duahau[this.duaHauIndex]].img != null;
									if (flag15)
									{
										num = mGraphics.getImageHeight(SmallImage.imgNew[this.duahau[this.duaHauIndex]].img);
									}
									SmallImage.drawSmallImage(g, this.duahau[this.duaHauIndex], this.cx + Res.random(-1, 1), this.cy, 0, mGraphics.BOTTOM | mGraphics.HCENTER);
									bool flag16 = global::Char.myCharz().npcFocus != null && global::Char.myCharz().npcFocus.Equals(this);
									if (flag16)
									{
										bool flag17 = ChatPopup.currChatPopup == null;
										if (flag17)
										{
											g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 0, this.cx, this.cy - this.ch - 9 + 16 - num, mGraphics.BOTTOM | mGraphics.HCENTER);
										}
										mFont.tahoma_7b_white.drawString(g, NinjaUtil.getTime(this.seconds), this.cx, this.cy - this.ch - 16 - mFont.tahoma_7.getHeight() - 20 - num + 16, mFont.CENTER, mFont.tahoma_7b_dark);
									}
									else
									{
										mFont.tahoma_7b_white.drawString(g, NinjaUtil.getTime(this.seconds), this.cx, this.cy - this.ch - 8 - mFont.tahoma_7.getHeight() - 20 - num + 16, mFont.CENTER, mFont.tahoma_7b_dark);
									}
								}
							}
							else
							{
								bool flag18 = this.template.npcTemplateId == 6;
								if (flag18)
								{
									SmallImage.drawSmallImage(g, 545, this.cx, this.cy + 5, 0, mGraphics.BOTTOM | mGraphics.HCENTER);
									bool flag19 = global::Char.myCharz().npcFocus != null && global::Char.myCharz().npcFocus.Equals(this) && ChatPopup.currChatPopup == null;
									if (flag19)
									{
										g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 0, this.cx, this.cy - this.ch - 9, mGraphics.BOTTOM | mGraphics.HCENTER);
									}
									mFont.tahoma_7b_white.drawString(g, TileMap.zoneID.ToString() + string.Empty, this.cx, this.cy - this.ch + 19 - mFont.tahoma_7.getHeight(), mFont.CENTER);
								}
								else
								{
									int headId = this.template.headId;
									int legId = this.template.legId;
									int bodyId = this.template.bodyId;
									Part part = GameScr.parts[headId];
									Part part2 = GameScr.parts[legId];
									Part part3 = GameScr.parts[bodyId];
									bool flag20 = this.cdir == 1;
									if (flag20)
									{
										SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[this.cf][0][0]].id, this.cx + global::Char.CharInfo[this.cf][0][1] + (int)part.pi[global::Char.CharInfo[this.cf][0][0]].dx, this.cy - global::Char.CharInfo[this.cf][0][2] + (int)part.pi[global::Char.CharInfo[this.cf][0][0]].dy, 0, 0);
										SmallImage.drawSmallImage(g, (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].id, this.cx + global::Char.CharInfo[this.cf][1][1] + (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].dx, this.cy - global::Char.CharInfo[this.cf][1][2] + (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].dy, 0, 0);
										SmallImage.drawSmallImage(g, (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].id, this.cx + global::Char.CharInfo[this.cf][2][1] + (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].dx, this.cy - global::Char.CharInfo[this.cf][2][2] + (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].dy, 0, 0);
									}
									else
									{
										SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[this.cf][0][0]].id, this.cx - global::Char.CharInfo[this.cf][0][1] - (int)part.pi[global::Char.CharInfo[this.cf][0][0]].dx, this.cy - global::Char.CharInfo[this.cf][0][2] + (int)part.pi[global::Char.CharInfo[this.cf][0][0]].dy, 2, 24);
										SmallImage.drawSmallImage(g, (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].id, this.cx - global::Char.CharInfo[this.cf][1][1] - (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].dx, this.cy - global::Char.CharInfo[this.cf][1][2] + (int)part2.pi[global::Char.CharInfo[this.cf][1][0]].dy, 2, 24);
										SmallImage.drawSmallImage(g, (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].id, this.cx - global::Char.CharInfo[this.cf][2][1] - (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].dx, this.cy - global::Char.CharInfo[this.cf][2][2] + (int)part3.pi[global::Char.CharInfo[this.cf][2][0]].dy, 2, 24);
									}
									bool flag21 = TileMap.mapID != 51;
									if (flag21)
									{
										int num2 = 15;
										bool flag22 = this.template.npcTemplateId == 47;
										if (flag22)
										{
											num2 = 47;
										}
										bool flag23 = global::Char.myCharz().npcFocus != null && global::Char.myCharz().npcFocus.Equals(this);
										if (flag23)
										{
											bool flag24 = ChatPopup.currChatPopup == null;
											if (flag24)
											{
												int num3 = 0;
												int num4 = 0;
												bool flag25 = global::Char.myCharz().npcFocus.template.npcTemplateId == 28 || global::Char.myCharz().npcFocus.template.npcTemplateId == 41;
												if (flag25)
												{
													num3 = 3;
													num4 = -12;
												}
												g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 0, this.cx + num3, this.cy - this.ch - (num2 - 8) + num4, mGraphics.BOTTOM | mGraphics.HCENTER);
											}
										}
										else
										{
											bool flag26 = this.template.npcTemplateId == 47;
											if (flag26)
											{
											}
										}
									}
									this.dyEff = 65;
								}
							}
						}
					}
					bool flag27 = this.indexEffTask < 0 || this.effTask == null || this.cTypePk != 0;
					if (!flag27)
					{
						SmallImage.drawSmallImage(g, this.effTask.arrEfInfo[this.indexEffTask].idImg, this.cx + this.effTask.arrEfInfo[this.indexEffTask].dx, this.cy + this.effTask.arrEfInfo[this.indexEffTask].dy - this.dyEff, 0, mGraphics.VCENTER | mGraphics.HCENTER);
						bool flag28 = GameCanvas.gameTick % 2 == 0;
						if (flag28)
						{
							this.indexEffTask++;
							bool flag29 = this.indexEffTask >= this.effTask.arrEfInfo.Length;
							if (flag29)
							{
								this.indexEffTask = 0;
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x060007F4 RID: 2036 RVA: 0x0007CEFC File Offset: 0x0007B0FC
	public new void paintName(mGraphics g)
	{
		bool flag = global::Char.isLoadingMap || this.isHide || !base.isPaint() || this.statusMe == 15 || this.template == null;
		if (!flag)
		{
			bool flag2 = this.template.npcTemplateId == 3;
			if (flag2)
			{
				bool flag3 = global::Char.myCharz().npcFocus != null && global::Char.myCharz().npcFocus.Equals(this);
				if (flag3)
				{
					mFont.tahoma_7_yellow.drawString(g, this.template.name, this.cx, this.cy - this.ch - mFont.tahoma_7.getHeight() - 5, mFont.CENTER, mFont.tahoma_7_grey);
				}
				else
				{
					mFont.tahoma_7_yellow.drawString(g, this.template.name, this.cx, this.cy - this.ch - 3 - mFont.tahoma_7.getHeight(), mFont.CENTER, mFont.tahoma_7_grey);
				}
				this.dyEff = 60;
			}
			else
			{
				bool flag4 = this.template.npcTemplateId == 4;
				if (!flag4)
				{
					bool flag5 = this.template.npcTemplateId == 50 || this.template.npcTemplateId == 51;
					if (flag5)
					{
						bool flag6 = this.duahau != null;
						if (flag6)
						{
							int num = 0;
							bool flag7 = SmallImage.imgNew[this.duahau[this.duaHauIndex]] != null && SmallImage.imgNew[this.duahau[this.duaHauIndex]].img != null;
							if (flag7)
							{
								num = mGraphics.getImageHeight(SmallImage.imgNew[this.duahau[this.duaHauIndex]].img);
							}
							bool flag8 = global::Char.myCharz().npcFocus != null && global::Char.myCharz().npcFocus.Equals(this);
							if (flag8)
							{
								mFont.tahoma_7_yellow.drawString(g, this.template.name, this.cx, this.cy - this.ch - mFont.tahoma_7.getHeight() - num, mFont.CENTER, mFont.tahoma_7_grey);
							}
							else
							{
								mFont.tahoma_7_yellow.drawString(g, this.template.name, this.cx, this.cy - this.ch - 8 - mFont.tahoma_7.getHeight() - num + 16, mFont.CENTER, mFont.tahoma_7_grey);
							}
						}
					}
					else
					{
						bool flag9 = this.template.npcTemplateId == 6;
						if (flag9)
						{
							bool flag10 = global::Char.myCharz().npcFocus != null && global::Char.myCharz().npcFocus.Equals(this);
							if (flag10)
							{
								mFont.tahoma_7_yellow.drawString(g, this.template.name, this.cx, this.cy - this.ch - mFont.tahoma_7.getHeight() - 16, mFont.CENTER, mFont.tahoma_7_grey);
							}
							else
							{
								mFont.tahoma_7_yellow.drawString(g, this.template.name, this.cx, this.cy - this.ch - 8 - mFont.tahoma_7.getHeight(), mFont.CENTER, mFont.tahoma_7_grey);
							}
						}
						else
						{
							bool flag11 = TileMap.mapID != 51;
							if (flag11)
							{
								int num2 = 15;
								bool flag12 = this.template.npcTemplateId == 47;
								if (flag12)
								{
									num2 = 47;
								}
								bool flag13 = global::Char.myCharz().npcFocus != null && global::Char.myCharz().npcFocus.Equals(this);
								if (flag13)
								{
									bool flag14 = TileMap.mapID != 113;
									if (flag14)
									{
										int num3 = 0;
										int num4 = 0;
										bool flag15 = global::Char.myCharz().npcFocus.template.npcTemplateId == 28 || global::Char.myCharz().npcFocus.template.npcTemplateId == 41;
										if (flag15)
										{
											num3 = 3;
											num4 = -12;
										}
										mFont.tahoma_7_yellow.drawString(g, this.template.name, this.cx + num3, this.cy - this.ch - mFont.tahoma_7.getHeight() - num2 + num4, mFont.CENTER, mFont.tahoma_7_grey);
									}
								}
								else
								{
									num2 = 8;
									bool flag16 = this.template.npcTemplateId == 47;
									if (flag16)
									{
										num2 = 40;
									}
									bool flag17 = TileMap.mapID != 113;
									if (flag17)
									{
										int num5 = 0;
										int num6 = 0;
										bool flag18 = this.template.npcTemplateId == 28 || this.template.npcTemplateId == 41;
										if (flag18)
										{
											num5 = 3;
											num6 = -12;
										}
										mFont.tahoma_7_yellow.drawString(g, this.template.name, this.cx + num5, this.cy - this.ch - num2 - mFont.tahoma_7.getHeight() + num6, mFont.CENTER, mFont.tahoma_7_grey);
									}
								}
							}
							this.dyEff = 65;
						}
					}
				}
			}
		}
	}

	// Token: 0x060007F5 RID: 2037 RVA: 0x0007D413 File Offset: 0x0007B613
	public new void hide()
	{
		this.statusMe = 15;
		global::Char.chatPopup = null;
	}

	// Token: 0x04000F5E RID: 3934
	public const sbyte BINH_KHI = 0;

	// Token: 0x04000F5F RID: 3935
	public const sbyte PHONG_CU = 1;

	// Token: 0x04000F60 RID: 3936
	public const sbyte TRANG_SUC = 2;

	// Token: 0x04000F61 RID: 3937
	public const sbyte DUOC_PHAM = 3;

	// Token: 0x04000F62 RID: 3938
	public const sbyte TAP_HOA = 4;

	// Token: 0x04000F63 RID: 3939
	public const sbyte THU_KHO = 5;

	// Token: 0x04000F64 RID: 3940
	public const sbyte DA_LUYEN = 6;

	// Token: 0x04000F65 RID: 3941
	public NpcTemplate template;

	// Token: 0x04000F66 RID: 3942
	public int npcId;

	// Token: 0x04000F67 RID: 3943
	public bool isFocus = true;

	// Token: 0x04000F68 RID: 3944
	public static NpcTemplate[] arrNpcTemplate;

	// Token: 0x04000F69 RID: 3945
	public int sys;

	// Token: 0x04000F6A RID: 3946
	public new bool isHide;

	// Token: 0x04000F6B RID: 3947
	private int duaHauIndex;

	// Token: 0x04000F6C RID: 3948
	private int dyEff;

	// Token: 0x04000F6D RID: 3949
	public static bool mabuEff;

	// Token: 0x04000F6E RID: 3950
	public static int tMabuEff;

	// Token: 0x04000F6F RID: 3951
	private static int[] shock_x = new int[]
	{
		1,
		-1,
		1,
		-1
	};

	// Token: 0x04000F70 RID: 3952
	private static int[] shock_y = new int[]
	{
		1,
		-1,
		-1,
		1
	};

	// Token: 0x04000F71 RID: 3953
	public static int shock_scr;

	// Token: 0x04000F72 RID: 3954
	public int[] duahau;

	// Token: 0x04000F73 RID: 3955
	public new int seconds;

	// Token: 0x04000F74 RID: 3956
	public new long last;

	// Token: 0x04000F75 RID: 3957
	public new long cur;

	// Token: 0x04000F76 RID: 3958
	public int idItem;
}
using System;

// Token: 0x020000A4 RID: 164
public class NpcTemplate
{
	// Token: 0x04000F77 RID: 3959
	public int npcTemplateId;

	// Token: 0x04000F78 RID: 3960
	public string name;

	// Token: 0x04000F79 RID: 3961
	public int headId;

	// Token: 0x04000F7A RID: 3962
	public int bodyId;

	// Token: 0x04000F7B RID: 3963
	public int legId;

	// Token: 0x04000F7C RID: 3964
	public string[][] menu;
}
using System;

// Token: 0x020000A5 RID: 165
public class Paint
{
	// Token: 0x060007F8 RID: 2040 RVA: 0x0007D45C File Offset: 0x0007B65C
	public static void loadbg()
	{
		for (int i = 0; i < Paint.goc.Length; i++)
		{
			Paint.goc[i] = GameCanvas.loadImage("/mainImage/myTexture2dgoc" + (i + 1).ToString() + ".png");
		}
	}

	// Token: 0x060007F9 RID: 2041 RVA: 0x0007D4A8 File Offset: 0x0007B6A8
	public void paintDefaultBg(mGraphics g)
	{
		g.setColor(8916494);
		g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
		g.drawImage(Paint.imgBg, GameCanvas.w / 2, GameCanvas.h / 2 - Paint.hTab / 2 - 1, 3);
		g.drawImage(Paint.imgLT, 0, 0, 0);
		g.drawImage(Paint.imgRT, GameCanvas.w, 0, mGraphics.TOP | mGraphics.RIGHT);
		g.drawImage(Paint.imgLB, 0, GameCanvas.h - Paint.hTab - 2, mGraphics.BOTTOM | mGraphics.LEFT);
		g.drawImage(Paint.imgRB, GameCanvas.w, GameCanvas.h - Paint.hTab - 2, mGraphics.BOTTOM | mGraphics.RIGHT);
		g.setColor(16774843);
		g.drawRect(0, 0, GameCanvas.w, 0);
		g.drawRect(0, GameCanvas.h - Paint.hTab - 2, GameCanvas.w, 0);
		g.drawRect(0, 0, 0, GameCanvas.h - Paint.hTab);
		g.drawRect(GameCanvas.w - 1, 0, 0, GameCanvas.h - Paint.hTab);
	}

	// Token: 0x060007FA RID: 2042 RVA: 0x0007D5DA File Offset: 0x0007B7DA
	public void paintfillDefaultBg(mGraphics g)
	{
		g.setColor(205314);
		g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
	}

	// Token: 0x060007FB RID: 2043 RVA: 0x0007D5FC File Offset: 0x0007B7FC
	public void repaintCircleBg()
	{
	}

	// Token: 0x060007FC RID: 2044 RVA: 0x0007D5FF File Offset: 0x0007B7FF
	public void paintSolidBg(mGraphics g)
	{
	}

	// Token: 0x060007FD RID: 2045 RVA: 0x0007D602 File Offset: 0x0007B802
	public void paintDefaultPopup(mGraphics g, int x, int y, int w, int h)
	{
		g.setColor(8411138);
		g.fillRect(x, y, w, h);
		g.setColor(13606712);
		g.drawRect(x, y, w, h);
	}

	// Token: 0x060007FE RID: 2046 RVA: 0x0007D637 File Offset: 0x0007B837
	public void paintWhitePopup(mGraphics g, int y, int x, int width, int height)
	{
		g.setColor(16776363);
		g.fillRect(x, y, width, height);
		g.setColor(0);
		g.drawRect(x - 1, y - 1, width + 1, height + 1);
	}

	// Token: 0x060007FF RID: 2047 RVA: 0x0007D670 File Offset: 0x0007B870
	public void paintDefaultPopupH(mGraphics g, int h)
	{
		g.setColor(14279153);
		g.fillRect(8, GameCanvas.h - (h + 37), GameCanvas.w - 16, h + 4);
		g.setColor(4682453);
		g.fillRect(10, GameCanvas.h - (h + 35), GameCanvas.w - 20, h);
	}

	// Token: 0x06000800 RID: 2048 RVA: 0x0007D6D0 File Offset: 0x0007B8D0
	public void paintCmdBar(mGraphics g, Command left, Command center, Command right)
	{
		mFont mFont = (!GameCanvas.isTouch) ? mFont.tahoma_7b_dark : mFont.tahoma_7b_dark;
		int num = 3;
		bool flag = left != null;
		if (flag)
		{
			Paint.lenCaption = mFont.getWidth(left.caption);
			bool flag2 = Paint.lenCaption > 0;
			if (flag2)
			{
				bool flag3 = left.x >= 0 && left.y > 0;
				if (flag3)
				{
					left.paint(g);
				}
				else
				{
					g.drawImage((mScreen.keyTouch != 0) ? GameScr.imgLbtn : GameScr.imgLbtnFocus, 1, GameCanvas.h - mScreen.cmdH - 1, 0);
					mFont.drawString(g, left.caption, 35, GameCanvas.h - mScreen.cmdH + 3 + num, 2);
				}
			}
		}
		bool flag4 = center != null;
		if (flag4)
		{
			Paint.lenCaption = mFont.getWidth(center.caption);
			bool flag5 = Paint.lenCaption > 0;
			if (flag5)
			{
				bool flag6 = center.x > 0 && center.y > 0;
				if (flag6)
				{
					center.paint(g);
				}
				else
				{
					g.drawImage((mScreen.keyTouch != 1) ? GameScr.imgLbtn : GameScr.imgLbtnFocus, GameCanvas.hw - 35, GameCanvas.h - mScreen.cmdH - 1, 0);
					mFont.drawString(g, center.caption, GameCanvas.hw, GameCanvas.h - mScreen.cmdH + 3 + num, 2);
				}
			}
		}
		bool flag7 = right == null;
		if (!flag7)
		{
			Paint.lenCaption = mFont.getWidth(right.caption);
			bool flag8 = Paint.lenCaption > 0;
			if (flag8)
			{
				bool flag9 = right.x > 0 && right.y > 0;
				if (flag9)
				{
					right.paint(g);
				}
				else
				{
					g.drawImage((mScreen.keyTouch != 2) ? GameScr.imgLbtn : GameScr.imgLbtnFocus, GameCanvas.w - 71, GameCanvas.h - mScreen.cmdH - 1, 0);
					mFont.drawString(g, right.caption, GameCanvas.w - 35, GameCanvas.h - mScreen.cmdH + 3 + num, 2);
				}
			}
		}
	}

	// Token: 0x06000801 RID: 2049 RVA: 0x0007D8F6 File Offset: 0x0007BAF6
	public void paintTabSoft(mGraphics g)
	{
	}

	// Token: 0x06000802 RID: 2050 RVA: 0x0007D8F9 File Offset: 0x0007BAF9
	public void paintSelect(mGraphics g, int x, int y, int w, int h)
	{
		g.setColor(16774843);
		g.fillRect(x, y, w, h);
	}

	// Token: 0x06000803 RID: 2051 RVA: 0x0007D915 File Offset: 0x0007BB15
	public void paintLogo(mGraphics g, int x, int y)
	{
		g.drawImage(Paint.imgLogo, x, y, 3);
	}

	// Token: 0x06000804 RID: 2052 RVA: 0x0007D927 File Offset: 0x0007BB27
	public void paintHotline(mGraphics g, string number)
	{
	}

	// Token: 0x06000805 RID: 2053 RVA: 0x0007D92C File Offset: 0x0007BB2C
	public void paintBackMenu(mGraphics g, int x, int y, int w, int h, bool iss)
	{
		if (iss)
		{
			g.setColor(16646144);
			g.fillRoundRect(x, y, w, h, 10, 10);
			g.setColor(16770612);
		}
		else
		{
			g.setColor(16775097);
			g.fillRoundRect(x, y, w, h, 10, 10);
			g.setColor(16775097);
		}
		g.fillRoundRect(x + 3, y + 3, w - 6, h - 6, 10, 10);
	}

	// Token: 0x06000806 RID: 2054 RVA: 0x0007D9B1 File Offset: 0x0007BBB1
	public void paintMsgBG(mGraphics g, int x, int y, int w, int h, string title, string subTitle, string check)
	{
	}

	// Token: 0x06000807 RID: 2055 RVA: 0x0007D9B4 File Offset: 0x0007BBB4
	public void paintDefaultScrList(mGraphics g, string title, string subTitle, string check)
	{
	}

	// Token: 0x06000808 RID: 2056 RVA: 0x0007D9B8 File Offset: 0x0007BBB8
	public void paintCheck(mGraphics g, int x, int y, int index)
	{
		g.drawImage(Paint.imgTick[1], x, y, 3);
		bool flag = index == 1;
		if (flag)
		{
			g.drawImage(Paint.imgTick[0], x + 1, y - 3, 3);
		}
	}

	// Token: 0x06000809 RID: 2057 RVA: 0x0007D9F7 File Offset: 0x0007BBF7
	public void paintImgMsg(mGraphics g, int x, int y, int index)
	{
		g.drawImage(Paint.imgMsg[index], x, y, 0);
	}

	// Token: 0x0600080A RID: 2058 RVA: 0x0007DA0C File Offset: 0x0007BC0C
	public void paintTitleBoard(mGraphics g, int roomId)
	{
		this.paintDefaultBg(g);
	}

	// Token: 0x0600080B RID: 2059 RVA: 0x0007DA18 File Offset: 0x0007BC18
	public void paintCheckPass(mGraphics g, int x, int y, bool check, bool focus)
	{
		if (focus)
		{
			g.drawRegion(Paint.imgCheck, 0, ((!check) ? 1 : 3) * 18, 20, 18, 0, x, y, 0);
		}
		else
		{
			g.drawRegion(Paint.imgCheck, 0, (check ? 2 : 0) * 18, 20, 18, 0, x, y, 0);
		}
	}

	// Token: 0x0600080C RID: 2060 RVA: 0x0007DA74 File Offset: 0x0007BC74
	public void paintInputDlg(mGraphics g, int x, int y, int w, int h, string[] str)
	{
		this.paintFrame(x, y, w, h, g);
		int num = y + 20 - mFont.tahoma_8b.getHeight();
		int i = 0;
		int num2 = num;
		while (i < str.Length)
		{
			mFont.tahoma_8b.drawString(g, str[i], x + w / 2, num2, 2);
			i++;
			num2 += mFont.tahoma_8b.getHeight();
		}
	}

	// Token: 0x0600080D RID: 2061 RVA: 0x0007DADC File Offset: 0x0007BCDC
	public void paintIconMainMenu(mGraphics g, int x, int y, bool iss, bool isSe, int i, int wStr)
	{
	}

	// Token: 0x0600080E RID: 2062 RVA: 0x0007DADF File Offset: 0x0007BCDF
	public void paintLineRoom(mGraphics g, int x, int y, int xTo, int yTo)
	{
		g.setColor(16774843);
		g.drawLine(x, y, xTo, yTo);
	}

	// Token: 0x0600080F RID: 2063 RVA: 0x0007DAFC File Offset: 0x0007BCFC
	public void paintCellContaint(mGraphics g, int x, int y, int w, int h, bool iss)
	{
		if (iss)
		{
			g.setColor(13132288);
			g.fillRect(x + 2, y + 2, w - 3, w - 3);
		}
		g.setColor(3502080);
		g.drawRect(x, y, w, w);
	}

	// Token: 0x06000810 RID: 2064 RVA: 0x0007DB4C File Offset: 0x0007BD4C
	public void paintScroll(mGraphics g, int x, int y, int h)
	{
		g.setColor(3847752);
		g.fillRect(x, y, 4, h);
	}

	// Token: 0x06000811 RID: 2065 RVA: 0x0007DB68 File Offset: 0x0007BD68
	public int[] getColorMsg()
	{
		return this.color;
	}

	// Token: 0x06000812 RID: 2066 RVA: 0x0007DB80 File Offset: 0x0007BD80
	public void paintLogo(mGraphics g)
	{
		g.setColor(8916494);
		g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
		g.drawImage(Paint.imgLogo, GameCanvas.h >> 1, GameCanvas.w >> 1, 3);
	}

	// Token: 0x06000813 RID: 2067 RVA: 0x0007DBC0 File Offset: 0x0007BDC0
	public void paintTextLogin(mGraphics g, bool isRes)
	{
		int num = 0;
		bool flag = !isRes && GameCanvas.h <= 240;
		if (flag)
		{
			num = 15;
		}
		mFont.tahoma_7b_green2.drawString(g, mResources.LOGINLABELS[0], GameCanvas.hw, GameCanvas.hh + 60 - num, 2);
		mFont.tahoma_7b_green2.drawString(g, mResources.LOGINLABELS[1], GameCanvas.hw, GameCanvas.hh + 73 - num, 2);
	}

	// Token: 0x06000814 RID: 2068 RVA: 0x0007DC34 File Offset: 0x0007BE34
	public void paintSellectBoard(mGraphics g, int x, int y, int w, int h)
	{
		g.drawImage(Paint.imgSelectBoard, x - 7, y, 0);
	}

	// Token: 0x06000815 RID: 2069 RVA: 0x0007DC48 File Offset: 0x0007BE48
	public int isRegisterUsingWAP()
	{
		return 0;
	}

	// Token: 0x06000816 RID: 2070 RVA: 0x0007DC5C File Offset: 0x0007BE5C
	public string getCard()
	{
		return "/vmg/card.on";
	}

	// Token: 0x06000817 RID: 2071 RVA: 0x0007DC73 File Offset: 0x0007BE73
	public void paintSellectedShop(mGraphics g, int x, int y, int w, int h)
	{
		g.setColor(16777215);
		g.drawRect(x, y, 40, 40);
		g.drawRect(x + 1, y + 1, 38, 38);
	}

	// Token: 0x06000818 RID: 2072 RVA: 0x0007DCA0 File Offset: 0x0007BEA0
	public string getUrlUpdateGame()
	{
		return "http://wap.teamobi.com?info=checkupdate&game=3&version=" + GameMidlet.VERSION + "&provider=" + GameMidlet.PROVIDER.ToString();
	}

	// Token: 0x06000819 RID: 2073 RVA: 0x0007DCD0 File Offset: 0x0007BED0
	public void doSelect(int focus)
	{
	}

	// Token: 0x0600081A RID: 2074 RVA: 0x0007DCD4 File Offset: 0x0007BED4
	public void paintPopUp(int x, int y, int w, int h, mGraphics g)
	{
		g.setColor(9340251);
		g.drawRect(x + 18, y, (w - 36) / 2 - 32, h);
		g.drawRect(x + 18 + (w - 36) / 2 + 32, y, (w - 36) / 2 - 22, h);
		g.drawRect(x, y + 8, w, h - 17);
		g.setColor(Paint.COLORBACKGROUND);
		g.fillRect(x + 18, y + 3, (w - 36) / 2 - 32, h - 4);
		g.fillRect(x + 18 + (w - 36) / 2 + 31, y + 3, (w - 38) / 2 - 22, h - 4);
		g.fillRect(x + 1, y + 6, w - 1, h - 11);
		g.setColor(14667919);
		g.fillRect(x + 18, y + 1, (w - 36) / 2 - 32, 2);
		g.fillRect(x + 18 + (w - 36) / 2 + 32, y + 1, (w - 36) / 2 - 12, 2);
		g.fillRect(x + 18, y + h - 2, (w - 36) / 2 - 31, 2);
		g.fillRect(x + 18 + (w - 36) / 2 + 32, y + h - 2, (w - 36) / 2 - 31, 2);
		g.fillRect(x + 1, y + 11, 2, h - 18);
		g.fillRect(x + w - 2, y + 11, 2, h - 18);
		g.drawImage(Paint.goc[0], x - 3, y - 2, mGraphics.TOP | mGraphics.LEFT);
		g.drawImage(Paint.goc[2], x + w + 3, y - 2, StaticObj.TOP_RIGHT);
		g.drawImage(Paint.goc[1], x - 3, y + h + 3, StaticObj.BOTTOM_LEFT);
		g.drawImage(Paint.goc[3], x + w + 4, y + h + 2, StaticObj.BOTTOM_RIGHT);
		g.drawImage(Paint.goc[4], x + w / 2, y, StaticObj.TOP_CENTER);
		g.drawImage(Paint.goc[5], x + w / 2, y + h + 1, StaticObj.BOTTOM_HCENTER);
	}

	// Token: 0x0600081B RID: 2075 RVA: 0x0007DF08 File Offset: 0x0007C108
	public void paintFrame(int x, int y, int w, int h, mGraphics g)
	{
		g.setColor(13524492);
		g.drawRect(x + 6, y, w - 12, h);
		g.drawRect(x, y + 6, w, h - 12);
		g.drawRect(x + 7, y + 1, w - 14, h - 2);
		g.drawRect(x + 1, y + 7, w - 2, h - 14);
		g.setColor(14338484);
		g.fillRect(x + 8, y + 2, w - 16, h - 3);
		g.fillRect(x + 2, y + 8, w - 3, h - 14);
		g.drawImage(GameCanvas.imgBorder[2], x, y, mGraphics.TOP | mGraphics.LEFT);
		g.drawRegion(GameCanvas.imgBorder[2], 0, 0, 16, 16, 2, x + w + 1, y, StaticObj.TOP_RIGHT);
		g.drawRegion(GameCanvas.imgBorder[2], 0, 0, 16, 16, 1, x, y + h + 1, StaticObj.BOTTOM_LEFT);
		g.drawRegion(GameCanvas.imgBorder[2], 0, 0, 16, 16, 3, x + w + 1, y + h + 1, StaticObj.BOTTOM_RIGHT);
	}

	// Token: 0x0600081C RID: 2076 RVA: 0x0007E031 File Offset: 0x0007C231
	public void paintFrameSimple(int x, int y, int w, int h, mGraphics g)
	{
		g.setColor(6702080);
		g.fillRect(x, y, w, h);
		g.setColor(14338484);
		g.fillRect(x + 1, y + 1, w - 2, h - 2);
	}

	// Token: 0x0600081D RID: 2077 RVA: 0x0007E070 File Offset: 0x0007C270
	public void paintFrameBorder(int x, int y, int w, int h, mGraphics g)
	{
		this.paintFrame(x, y, w, h, g);
	}

	// Token: 0x0600081E RID: 2078 RVA: 0x0007E081 File Offset: 0x0007C281
	public void paintFrameInside(int x, int y, int w, int h, mGraphics g)
	{
		g.setColor(Paint.COLORBACKGROUND);
		g.fillRect(x, y, w, h);
	}

	// Token: 0x0600081F RID: 2079 RVA: 0x0007E09E File Offset: 0x0007C29E
	public void paintFrameInsideSelected(int x, int y, int w, int h, mGraphics g)
	{
		g.setColor(Paint.COLORLIGHT);
		g.fillRect(x, y, w, h);
	}

	// Token: 0x04000F7D RID: 3965
	public static int COLORBACKGROUND = 15787715;

	// Token: 0x04000F7E RID: 3966
	public static int COLORLIGHT = 16383818;

	// Token: 0x04000F7F RID: 3967
	public static int COLORDARK = 3937280;

	// Token: 0x04000F80 RID: 3968
	public static int COLORBORDER = 15224576;

	// Token: 0x04000F81 RID: 3969
	public static int COLORFOCUS = 16777215;

	// Token: 0x04000F82 RID: 3970
	public static Image imgBg;

	// Token: 0x04000F83 RID: 3971
	public static Image imgLogo;

	// Token: 0x04000F84 RID: 3972
	public static Image imgLB;

	// Token: 0x04000F85 RID: 3973
	public static Image imgLT;

	// Token: 0x04000F86 RID: 3974
	public static Image imgRB;

	// Token: 0x04000F87 RID: 3975
	public static Image imgRT;

	// Token: 0x04000F88 RID: 3976
	public static Image imgChuong;

	// Token: 0x04000F89 RID: 3977
	public static Image imgSelectBoard;

	// Token: 0x04000F8A RID: 3978
	public static Image imgtoiSmall;

	// Token: 0x04000F8B RID: 3979
	public static Image imgTayTren;

	// Token: 0x04000F8C RID: 3980
	public static Image imgTayDuoi;

	// Token: 0x04000F8D RID: 3981
	public static Image[] imgTick = new Image[2];

	// Token: 0x04000F8E RID: 3982
	public static Image[] imgMsg = new Image[2];

	// Token: 0x04000F8F RID: 3983
	public static Image[] goc = new Image[6];

	// Token: 0x04000F90 RID: 3984
	public static int hTab = 24;

	// Token: 0x04000F91 RID: 3985
	public static int lenCaption = 0;

	// Token: 0x04000F92 RID: 3986
	public int[] color = new int[]
	{
		15970400,
		13479911,
		2250052,
		16374659,
		15906669,
		12931125,
		3108954
	};

	// Token: 0x04000F93 RID: 3987
	public static Image imgCheck = GameCanvas.loadImage("/mainImage/myTexture2dcheck.png");
}
using System;
using System.Collections.Generic;
using AssemblyCSharp.Mod.Xmap;
using Assets.src.g;
using UnityEngine;

// Token: 0x020000A6 RID: 166
public class Panel : IActionListener, IChatable
{
	// Token: 0x06000822 RID: 2082 RVA: 0x0007E158 File Offset: 0x0007C358
	public Panel()
	{
		this.init();
		this.cmdClose = new Command(string.Empty, this, 1003, null);
		this.cmdClose.img = GameCanvas.loadImage("/mainImage/myTexture2dbtX.png");
		this.cmdClose.cmdClosePanel = true;
		this.currItem = null;
	}

	// Token: 0x06000823 RID: 2083 RVA: 0x0007E560 File Offset: 0x0007C760
	public static void loadBg()
	{
		Panel.imgMap = GameCanvas.loadImage("/img/map" + TileMap.planetID.ToString() + ".png");
		Panel.imgBantay = GameCanvas.loadImage("/mainImage/myTexture2dbantay.png");
		Panel.imgX = GameCanvas.loadImage("/mainImage/myTexture2dbtX.png");
		Panel.imgXu = GameCanvas.loadImage("/mainImage/myTexture2dimgMoney.png");
		Panel.imgLuong = GameCanvas.loadImage("/mainImage/myTexture2dimgDiamond.png");
		Panel.imgLuongKhoa = GameCanvas.loadImage("/mainImage/luongkhoa.png");
		Panel.imgUp = GameCanvas.loadImage("/mainImage/myTexture2dup.png");
		Panel.imgDown = GameCanvas.loadImage("/mainImage/myTexture2ddown.png");
		Panel.imgStar = GameCanvas.loadImage("/mainImage/star.png");
		Panel.imgMaxStar = GameCanvas.loadImage("/mainImage/starE.png");
		Panel.imgStar8 = GameCanvas.loadImage("/mainImage/star8.png");
		Panel.imgStar9 = mSystem.loadImage("/mainImage/star9.png");
		Panel.imgStarCuongHoa = mSystem.loadImage("/mainImage/starCH.png");
		Panel.imgNew = GameCanvas.loadImage("/mainImage/new.png");
		Panel.imgTicket = GameCanvas.loadImage("/mainImage/ticket12.png");
	}

	// Token: 0x06000824 RID: 2084 RVA: 0x0007E664 File Offset: 0x0007C864
	public void init()
	{
		this.pX = GameCanvas.pxLast + this.cmxMap;
		this.pY = GameCanvas.pyLast + this.cmyMap;
		this.lastTabIndex = new int[this.tabName.Length];
		for (int i = 0; i < this.lastTabIndex.Length; i++)
		{
			this.lastTabIndex[i] = -1;
		}
	}

	// Token: 0x06000825 RID: 2085 RVA: 0x0007E6CC File Offset: 0x0007C8CC
	public int getXMap()
	{
		for (int i = 0; i < Panel.mapId[(int)TileMap.planetID].Length; i++)
		{
			bool flag = TileMap.mapID == Panel.mapId[(int)TileMap.planetID][i];
			if (flag)
			{
				return Panel.mapX[(int)TileMap.planetID][i];
			}
		}
		return -1;
	}

	// Token: 0x06000826 RID: 2086 RVA: 0x0007E728 File Offset: 0x0007C928
	public int getYMap()
	{
		for (int i = 0; i < Panel.mapId[(int)TileMap.planetID].Length; i++)
		{
			bool flag = TileMap.mapID == Panel.mapId[(int)TileMap.planetID][i];
			if (flag)
			{
				return Panel.mapY[(int)TileMap.planetID][i];
			}
		}
		return -1;
	}

	// Token: 0x06000827 RID: 2087 RVA: 0x0007E784 File Offset: 0x0007C984
	public int getXMapTask()
	{
		bool flag = global::Char.myCharz().taskMaint == null;
		int result;
		if (flag)
		{
			result = -1;
		}
		else
		{
			for (int i = 0; i < Panel.mapId[(int)TileMap.planetID].Length; i++)
			{
				bool flag2 = GameScr.mapTasks[global::Char.myCharz().taskMaint.index] == Panel.mapId[(int)TileMap.planetID][i];
				if (flag2)
				{
					return Panel.mapX[(int)TileMap.planetID][i];
				}
			}
			result = -1;
		}
		return result;
	}

	// Token: 0x06000828 RID: 2088 RVA: 0x0007E808 File Offset: 0x0007CA08
	public int getYMapTask()
	{
		bool flag = global::Char.myCharz().taskMaint == null;
		int result;
		if (flag)
		{
			result = -1;
		}
		else
		{
			for (int i = 0; i < Panel.mapId[(int)TileMap.planetID].Length; i++)
			{
				bool flag2 = GameScr.mapTasks[global::Char.myCharz().taskMaint.index] == Panel.mapId[(int)TileMap.planetID][i];
				if (flag2)
				{
					return Panel.mapY[(int)TileMap.planetID][i];
				}
			}
			result = -1;
		}
		return result;
	}

	// Token: 0x06000829 RID: 2089 RVA: 0x0007E88C File Offset: 0x0007CA8C
	private void setType(int position)
	{
		this.typeShop = -1;
		this.W = Panel.WIDTH_PANEL;
		this.H = GameCanvas.h;
		this.X = 0;
		this.Y = 0;
		this.ITEM_HEIGHT = 24;
		this.position = position;
		if (position != 0)
		{
			if (position == 1)
			{
				this.wScroll = this.W - 4;
				this.xScroll = GameCanvas.w - this.wScroll;
				this.yScroll = 80;
				this.hScroll = this.H - 96;
				this.X = this.xScroll - 2;
				this.cmx = -(GameCanvas.w + this.W);
				this.cmtoX = GameCanvas.w - this.W;
			}
		}
		else
		{
			this.xScroll = 2;
			this.yScroll = 80;
			this.wScroll = this.W - 4;
			this.hScroll = this.H - 96;
			this.cmx = this.wScroll;
			this.cmtoX = 0;
			this.X = 0;
		}
		this.TAB_W = this.W / 5 - 1;
		this.currentTabIndex = 0;
		this.currentTabName = this.tabName[this.type];
		bool flag = this.currentTabName.Length < 5;
		if (flag)
		{
			this.TAB_W += 5;
		}
		this.startTabPos = this.xScroll + this.wScroll / 2 - this.currentTabName.Length * this.TAB_W / 2;
		this.lastSelect = new int[this.currentTabName.Length];
		this.cmyLast = new int[this.currentTabName.Length];
		for (int i = 0; i < this.currentTabName.Length; i++)
		{
			this.lastSelect[i] = (GameCanvas.isTouch ? -1 : 0);
		}
		bool flag2 = this.lastTabIndex[this.type] != -1;
		if (flag2)
		{
			this.currentTabIndex = this.lastTabIndex[this.type];
		}
		bool flag3 = this.currentTabIndex < 0;
		if (flag3)
		{
			this.currentTabIndex = 0;
		}
		bool flag4 = this.currentTabIndex > this.currentTabName.Length - 1;
		if (flag4)
		{
			this.currentTabIndex = this.currentTabName.Length - 1;
		}
		this.scroll = null;
	}

	// Token: 0x0600082A RID: 2090 RVA: 0x0007EAD8 File Offset: 0x0007CCD8
	public void setTypeMapTrans()
	{
		this.type = 14;
		this.setType(0);
		this.setTabMapTrans();
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x0600082B RID: 2091 RVA: 0x0007EB0D File Offset: 0x0007CD0D
	public void setTypeInfomatioin()
	{
		this.type = 6;
		this.cmx = this.wScroll;
		this.cmtoX = 0;
	}

	// Token: 0x0600082C RID: 2092 RVA: 0x0007EB2C File Offset: 0x0007CD2C
	public void setTypeMap()
	{
		bool flag = !GameScr.gI().isMapFize() && Panel.isPaintMap;
		if (flag)
		{
			bool flag2 = Hint.isOnTask(2, 0);
			if (flag2)
			{
				Hint.isViewMap = true;
				GameScr.info1.addInfo(mResources.go_to_quest, 0);
			}
			bool flag3 = Hint.isOnTask(3, 0);
			if (flag3)
			{
				Hint.isViewPotential = true;
			}
			this.type = 4;
			this.currentTabName = this.tabName[this.type];
			this.startTabPos = this.xScroll + this.wScroll / 2 - this.currentTabName.Length * this.TAB_W / 2;
			this.cmx = (this.cmtoX = 0);
			this.setTabMap();
		}
	}

	// Token: 0x0600082D RID: 2093 RVA: 0x0007EBE8 File Offset: 0x0007CDE8
	public void setTypeArchivement()
	{
		this.currentListLength = global::Char.myCharz().arrArchive.Length;
		this.setType(0);
		this.type = 9;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = 0);
		}
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x0600082E RID: 2094 RVA: 0x0007ECB8 File Offset: 0x0007CEB8
	public void setTypeKiGuiOnly()
	{
		this.type = 17;
		this.setType(1);
		this.setTabKiGui();
		this.typeShop = 2;
		this.currentTabIndex = 0;
	}

	// Token: 0x0600082F RID: 2095 RVA: 0x0007ECE0 File Offset: 0x0007CEE0
	public void setTabChatManager()
	{
		this.currentListLength = this.chats.Count;
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
	}

	// Token: 0x06000830 RID: 2096 RVA: 0x0007ED90 File Offset: 0x0007CF90
	public void setTabChatPlayer()
	{
	}

	// Token: 0x06000831 RID: 2097 RVA: 0x0007ED93 File Offset: 0x0007CF93
	public void setTypeChatPlayer()
	{
	}

	// Token: 0x06000832 RID: 2098 RVA: 0x0007ED98 File Offset: 0x0007CF98
	public void setTabKiGui()
	{
		this.ITEM_HEIGHT = 24;
		this.currentListLength = global::Char.myCharz().arrItemShop[4].Length;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x06000833 RID: 2099 RVA: 0x0007EE67 File Offset: 0x0007D067
	public void setTypeBodyOnly()
	{
		this.type = 7;
		this.setType(1);
		this.setTabInventory(true);
		this.currentTabIndex = 0;
	}

	// Token: 0x06000834 RID: 2100 RVA: 0x0007EE88 File Offset: 0x0007D088
	public void addChatMessage(InfoItem info)
	{
		this.logChat.insertElementAt(info, 0);
		bool flag = this.logChat.size() > 20;
		if (flag)
		{
			this.logChat.removeElementAt(this.logChat.size() - 1);
		}
	}

	// Token: 0x06000835 RID: 2101 RVA: 0x0007EED4 File Offset: 0x0007D0D4
	private bool IsNewMessage(string name)
	{
		return false;
	}

	// Token: 0x06000836 RID: 2102 RVA: 0x0007EEE8 File Offset: 0x0007D0E8
	public bool IsHaveNewMessage()
	{
		return false;
	}

	// Token: 0x06000837 RID: 2103 RVA: 0x0007EEFB File Offset: 0x0007D0FB
	private void ClearNewMessage(string name)
	{
	}

	// Token: 0x06000838 RID: 2104 RVA: 0x0007EEFE File Offset: 0x0007D0FE
	public void addPlayerMenu(Command pm)
	{
		this.vPlayerMenu.addElement(pm);
	}

	// Token: 0x06000839 RID: 2105 RVA: 0x0007EF10 File Offset: 0x0007D110
	public void setTabPlayerMenu()
	{
		this.ITEM_HEIGHT = 24;
		this.currentListLength = this.vPlayerMenu.size();
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x0600083A RID: 2106 RVA: 0x0007EFDC File Offset: 0x0007D1DC
	public void setTypeFlag()
	{
		this.type = 18;
		this.setType(0);
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.setTabFlag();
	}

	// Token: 0x0600083B RID: 2107 RVA: 0x0007F010 File Offset: 0x0007D210
	public void setTabFlag()
	{
		this.currentListLength = this.vFlag.size();
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		bool flag4 = this.selected > this.currentListLength - 1;
		if (flag4)
		{
			this.selected = this.currentListLength - 1;
		}
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x0600083C RID: 2108 RVA: 0x0007F0F9 File Offset: 0x0007D2F9
	public void setTypePlayerMenu(global::Char c)
	{
		this.type = 10;
		this.setType(0);
		this.setTabPlayerMenu();
		this.charMenu = c;
	}

	// Token: 0x0600083D RID: 2109 RVA: 0x0007F11A File Offset: 0x0007D31A
	public void setTypeFriend()
	{
		this.type = 11;
		this.setType(0);
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.setTabFriend();
	}

	// Token: 0x0600083E RID: 2110 RVA: 0x0007F14D File Offset: 0x0007D34D
	public void setTypeEnemy()
	{
		this.type = 16;
		this.setType(0);
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.setTabEnemy();
	}

	// Token: 0x0600083F RID: 2111 RVA: 0x0007F180 File Offset: 0x0007D380
	public void setTypeTop(sbyte t)
	{
		this.type = 15;
		this.setType(0);
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.setTabTop();
		this.isThachDau = (t != 0);
	}

	// Token: 0x06000840 RID: 2112 RVA: 0x0007F1C0 File Offset: 0x0007D3C0
	public void setTabTop()
	{
		this.currentListLength = this.vTop.size();
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		bool flag4 = this.selected > this.currentListLength - 1;
		if (flag4)
		{
			this.selected = this.currentListLength - 1;
		}
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x06000841 RID: 2113 RVA: 0x0007F2AC File Offset: 0x0007D4AC
	public void setTabFriend()
	{
		this.currentListLength = this.vFriend.size();
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		bool flag4 = this.selected > this.currentListLength - 1;
		if (flag4)
		{
			this.selected = this.currentListLength - 1;
		}
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x06000842 RID: 2114 RVA: 0x0007F398 File Offset: 0x0007D598
	public void setTabEnemy()
	{
		this.currentListLength = this.vEnemy.size();
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		bool flag4 = this.selected > this.currentListLength - 1;
		if (flag4)
		{
			this.selected = this.currentListLength - 1;
		}
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x06000843 RID: 2115 RVA: 0x0007F481 File Offset: 0x0007D681
	public void setTypeMessage()
	{
		this.type = 8;
		this.setType(0);
		this.setTabMessage();
		this.currentTabIndex = 0;
	}

	// Token: 0x06000844 RID: 2116 RVA: 0x0007F4A1 File Offset: 0x0007D6A1
	public void setTypeLockInventory()
	{
		this.type = 8;
		this.setType(0);
		this.setTabMessage();
		this.currentTabIndex = 0;
	}

	// Token: 0x06000845 RID: 2117 RVA: 0x0007F4C1 File Offset: 0x0007D6C1
	public void setTypeShop(int typeShop)
	{
		this.type = 1;
		this.setType(0);
		this.setTabShop();
		this.currentTabIndex = 0;
		this.typeShop = typeShop;
	}

	// Token: 0x06000846 RID: 2118 RVA: 0x0007F4E8 File Offset: 0x0007D6E8
	public void setTypeBox()
	{
		this.type = 2;
		bool flag = GameCanvas.w > 2 * Panel.WIDTH_PANEL;
		if (flag)
		{
			Panel.boxTabName = new string[][]
			{
				mResources.chestt
			};
		}
		else
		{
			Panel.boxTabName = new string[][]
			{
				mResources.chestt,
				mResources.inventory
			};
		}
		this.tabName[2] = Panel.boxTabName;
		this.setType(0);
		bool flag2 = this.currentTabIndex == 0;
		if (flag2)
		{
			this.setTabBox();
		}
		bool flag3 = this.currentTabIndex == 1;
		if (flag3)
		{
			this.setTabInventory(true);
		}
		bool flag4 = GameCanvas.w > 2 * Panel.WIDTH_PANEL;
		if (flag4)
		{
			GameCanvas.panel2 = new Panel();
			GameCanvas.panel2.tabName[7] = new string[][]
			{
				new string[]
				{
					string.Empty
				}
			};
			GameCanvas.panel2.setTypeBodyOnly();
			GameCanvas.panel2.show();
		}
	}

	// Token: 0x06000847 RID: 2119 RVA: 0x0007F5DC File Offset: 0x0007D7DC
	public void setTypeCombine()
	{
		this.type = 12;
		bool flag = GameCanvas.w > 2 * Panel.WIDTH_PANEL;
		if (flag)
		{
			Panel.boxCombine = new string[][]
			{
				mResources.combine
			};
		}
		else
		{
			Panel.boxCombine = new string[][]
			{
				mResources.combine,
				mResources.inventory
			};
		}
		this.tabName[this.type] = Panel.boxCombine;
		this.setType(0);
		bool flag2 = this.currentTabIndex == 0;
		if (flag2)
		{
			this.setTabCombine();
		}
		bool flag3 = this.currentTabIndex == 1;
		if (flag3)
		{
			this.setTabInventory(true);
		}
		bool flag4 = GameCanvas.w > 2 * Panel.WIDTH_PANEL;
		if (flag4)
		{
			GameCanvas.panel2 = new Panel();
			GameCanvas.panel2.tabName[7] = new string[][]
			{
				new string[]
				{
					string.Empty
				}
			};
			GameCanvas.panel2.setTypeBodyOnly();
			GameCanvas.panel2.show();
		}
		this.combineSuccess = -1;
		this.isDoneCombine = true;
	}

	// Token: 0x06000848 RID: 2120 RVA: 0x0007F6E4 File Offset: 0x0007D8E4
	public void setTabCombine()
	{
		this.currentListLength = this.vItemCombine.size() + 1;
		this.ITEM_HEIGHT = 24;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 9;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x06000849 RID: 2121 RVA: 0x0007F7B4 File Offset: 0x0007D9B4
	public void setTypeAuto()
	{
		this.type = 22;
		this.setType(0);
		this.setTabAuto();
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x0600084A RID: 2122 RVA: 0x0007F7EC File Offset: 0x0007D9EC
	private void setTabAuto()
	{
		this.currentListLength = Panel.strAuto.Length;
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
	}

	// Token: 0x0600084B RID: 2123 RVA: 0x0007F8B4 File Offset: 0x0007DAB4
	public void setTypePetMain()
	{
		this.type = 21;
		bool flag = GameCanvas.panel2 != null;
		if (flag)
		{
			Panel.boxPet = mResources.petMainTab2;
		}
		else
		{
			Panel.boxPet = mResources.petMainTab;
		}
		this.tabName[21] = Panel.boxPet;
		bool flag2 = global::Char.myCharz().cgender == 1;
		if (flag2)
		{
			this.strStatus = new string[]
			{
				mResources.follow,
				mResources.defend,
				mResources.attack,
				mResources.gohome,
				mResources.fusion,
				mResources.fusionForever
			};
		}
		else
		{
			this.strStatus = new string[]
			{
				mResources.follow,
				mResources.defend,
				mResources.attack,
				mResources.gohome,
				mResources.fusion
			};
		}
		this.setType(2);
		bool flag3 = this.currentTabIndex == 0;
		if (flag3)
		{
			this.setTabPetInventory();
		}
		bool flag4 = this.currentTabIndex == 1;
		if (flag4)
		{
			this.setTabPetStatus();
		}
		bool flag5 = this.currentTabIndex == 2;
		if (flag5)
		{
			this.setTabInventory(true);
		}
	}

	// Token: 0x0600084C RID: 2124 RVA: 0x0007F9D4 File Offset: 0x0007DBD4
	public void setTypeMain()
	{
		this.type = 0;
		this.setType(0);
		bool flag = this.currentTabIndex == 1;
		if (flag)
		{
			this.setTabInventory(true);
		}
		bool flag2 = this.currentTabIndex == 2;
		if (flag2)
		{
			this.setTabSkill();
		}
		bool flag3 = this.currentTabIndex == 3;
		if (flag3)
		{
			bool flag4 = this.mainTabName.Length == 4;
			if (flag4)
			{
				this.setTabTool();
			}
			else
			{
				this.setTabClans();
			}
		}
		bool flag5 = this.currentTabIndex == 4;
		if (flag5)
		{
			this.setTabTool();
		}
	}

	// Token: 0x0600084D RID: 2125 RVA: 0x0007FA68 File Offset: 0x0007DC68
	public void setTypeZone()
	{
		this.type = 3;
		this.setType(0);
		this.setTabZone();
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x0600084E RID: 2126 RVA: 0x0007FA9C File Offset: 0x0007DC9C
	public void addItemDetail(Item item)
	{
		try
		{
			this.cp = new ChatPopup();
			string text = string.Empty;
			string text2 = string.Empty;
			bool flag = (int)item.template.gender != global::Char.myCharz().cgender;
			if (flag)
			{
				bool flag2 = item.template.gender == 0;
				if (flag2)
				{
					text2 = text2 + "\n|7|1|" + mResources.from_earth;
				}
				else
				{
					bool flag3 = item.template.gender == 1;
					if (flag3)
					{
						text2 = text2 + "\n|7|1|" + mResources.from_namec;
					}
					else
					{
						bool flag4 = item.template.gender == 2;
						if (flag4)
						{
							text2 = text2 + "\n|7|1|" + mResources.from_sayda;
						}
					}
				}
			}
			string str = string.Empty;
			bool flag5 = item.itemOption != null;
			if (flag5)
			{
				for (int i = 0; i < item.itemOption.Length; i++)
				{
					bool flag6 = item.itemOption[i].optionTemplate.id == 72;
					if (flag6)
					{
						str = " [+" + item.itemOption[i].param.ToString() + "]";
					}
				}
			}
			bool flag7 = false;
			bool flag8 = item.itemOption != null;
			if (flag8)
			{
				for (int j = 0; j < item.itemOption.Length; j++)
				{
					bool flag9 = item.itemOption[j].optionTemplate.id == 41;
					if (flag9)
					{
						flag7 = true;
						bool flag10 = item.itemOption[j].param == 1;
						if (flag10)
						{
							text2 = text2 + "|0|1|" + item.template.name + str;
						}
						bool flag11 = item.itemOption[j].param == 2;
						if (flag11)
						{
							text2 = text2 + "|2|1|" + item.template.name + str;
						}
						bool flag12 = item.itemOption[j].param == 3;
						if (flag12)
						{
							text2 = text2 + "|8|1|" + item.template.name + str;
						}
						bool flag13 = item.itemOption[j].param == 4;
						if (flag13)
						{
							text2 = text2 + "|7|1|" + item.template.name + str;
						}
					}
				}
			}
			bool flag14 = !flag7;
			if (flag14)
			{
				text2 = text2 + "|0|1|" + item.template.name + str;
			}
			bool flag15 = item.itemOption != null;
			if (flag15)
			{
				int k = 0;
				while (k < item.itemOption.Length)
				{
					bool flag16 = item.itemOption[k].optionTemplate.name.StartsWith("$");
					if (flag16)
					{
						text = item.itemOption[k].getOptiongColor();
						bool flag17 = item.itemOption[k].param == 1;
						if (flag17)
						{
							text2 = text2 + "\n|1|1|" + text;
						}
						bool flag18 = item.itemOption[k].param == 0;
						if (flag18)
						{
							text2 = text2 + "\n|0|1|" + text;
						}
						goto IL_3EC;
					}
					text = item.itemOption[k].getOptionString();
					bool flag19 = !text.Equals(string.Empty);
					if (flag19)
					{
						bool flag20 = item.itemOption[k].optionTemplate.id == 72;
						if (flag20)
						{
							goto IL_4A2;
						}
						bool flag21 = item.itemOption[k].optionTemplate.id == 102;
						if (flag21)
						{
							this.cp.starSlot = (sbyte)item.itemOption[k].param;
						}
						else
						{
							bool flag22 = item.itemOption[k].optionTemplate.id == 107;
							if (flag22)
							{
								this.cp.maxStarSlot = (sbyte)item.itemOption[k].param;
							}
							else
							{
								text2 = text2 + "\n|1|1|" + text;
							}
						}
					}
					goto IL_3EC;
					IL_4A2:
					k++;
					continue;
					IL_3EC:
					bool flag23 = item.itemOption[k].optionTemplate.id != 228;
					if (flag23)
					{
						goto IL_4A2;
					}
					Res.outz("========>>> " + item.itemOption[k].optionTemplate.name + "_" + item.itemOption[k].param.ToString());
					bool flag24 = item.itemOption[k].param > 7;
					if (flag24)
					{
						for (int l = 0; l < item.itemOption[k].param - 7; l++)
						{
							this.cp.starCuongHoa[l + 7] = true;
						}
					}
					goto IL_4A2;
				}
			}
			bool flag25 = this.currItem.template.strRequire > 1;
			if (flag25)
			{
				string str2 = mResources.pow_request + ": " + this.currItem.template.strRequire.ToString();
				bool flag26 = (long)this.currItem.template.strRequire > global::Char.myCharz().cPower;
				if (flag26)
				{
					text2 = text2 + "\n|3|1|" + str2;
					string text3 = text2;
					text2 = string.Concat(new string[]
					{
						text3,
						"\n|3|1|",
						mResources.your_pow,
						": ",
						global::Char.myCharz().cPower.ToString()
					});
				}
				else
				{
					text2 = text2 + "\n|6|1|" + str2;
				}
			}
			else
			{
				text2 += "\n|6|1|";
			}
			this.currItem.compare = this.getCompare(this.currItem);
			text2 += "\n--";
			text2 = text2 + "\n|6|" + item.template.description;
			bool flag27 = !item.reason.Equals(string.Empty);
			if (flag27)
			{
				bool flag28 = !item.template.description.Equals(string.Empty);
				if (flag28)
				{
					text2 += "\n--";
				}
				text2 = text2 + "\n|2|" + item.reason;
			}
			bool flag29 = this.cp.maxStarSlot > 0;
			if (flag29)
			{
				text2 += "\n\n";
			}
			this.popUpDetailInit(this.cp, text2);
			this.idIcon = (int)item.template.iconID;
			this.partID = null;
			this.charInfo = null;
		}
		catch (Exception ex)
		{
			Res.outz("ex " + ex.StackTrace);
		}
	}

	// Token: 0x0600084F RID: 2127 RVA: 0x0008015C File Offset: 0x0007E35C
	public void popUpDetailInit(ChatPopup cp, string chat)
	{
		cp.isClip = false;
		cp.sayWidth = 180;
		cp.cx = 3 + this.X - ((this.X != 0) ? (Res.abs(cp.sayWidth - this.W) + 8) : 0);
		cp.says = mFont.tahoma_7_red.splitFontArray(chat, cp.sayWidth - 10);
		cp.delay = 10000000;
		cp.c = null;
		cp.sayRun = 7;
		cp.ch = 15 - cp.sayRun + cp.says.Length * 12 + 10;
		bool flag = cp.ch > GameCanvas.h - 80;
		if (flag)
		{
			cp.ch = GameCanvas.h - 80;
			cp.lim = cp.says.Length * 12 - cp.ch + 17;
			bool flag2 = cp.lim < 0;
			if (flag2)
			{
				cp.lim = 0;
			}
			ChatPopup.cmyText = 0;
			cp.isClip = true;
		}
		cp.cy = GameCanvas.menu.menuY - cp.ch;
		while (cp.cy < 10)
		{
			cp.cy++;
			GameCanvas.menu.menuY++;
		}
		cp.mH = 0;
		cp.strY = 10;
	}

	// Token: 0x06000850 RID: 2128 RVA: 0x000802B8 File Offset: 0x0007E4B8
	public void popUpDetailInitArray(ChatPopup cp, string[] chat)
	{
		cp.sayWidth = 160;
		cp.cx = 3 + this.X;
		cp.says = chat;
		cp.delay = 10000000;
		cp.c = null;
		cp.sayRun = 7;
		cp.ch = 15 - cp.sayRun + cp.says.Length * 12 + 10;
		cp.cy = GameCanvas.menu.menuY - cp.ch;
		cp.mH = 0;
		cp.strY = 10;
	}

	// Token: 0x06000851 RID: 2129 RVA: 0x00080344 File Offset: 0x0007E544
	public void addMessageDetail(ClanMessage cm)
	{
		this.cp = new ChatPopup();
		string text = "|0|" + cm.playerName;
		text = text + "\n|1|" + Member.getRole((int)cm.role);
		for (int i = 0; i < this.myMember.size(); i++)
		{
			Member member = (Member)this.myMember.elementAt(i);
			bool flag = cm.playerId == member.ID;
			if (flag)
			{
				string text2 = text;
				text = string.Concat(new string[]
				{
					text2,
					"\n|5|",
					mResources.clan_capsuledonate,
					": ",
					member.clanPoint.ToString()
				});
				text2 = text;
				text = string.Concat(new string[]
				{
					text2,
					"\n|5|",
					mResources.clan_capsuleself,
					": ",
					member.curClanPoint.ToString()
				});
				text2 = text;
				text = string.Concat(new string[]
				{
					text2,
					"\n|4|",
					mResources.give_pea,
					": ",
					member.donate.ToString(),
					mResources.time
				});
				text2 = text;
				text = string.Concat(new string[]
				{
					text2,
					"\n|4|",
					mResources.receive_pea,
					": ",
					member.receive_donate.ToString(),
					mResources.time
				});
				this.partID = new int[]
				{
					(int)member.head,
					(int)member.leg,
					(int)member.body
				};
				break;
			}
		}
		text += "\n--";
		for (int j = 0; j < cm.chat.Length; j++)
		{
			text = text + "\n" + cm.chat[j];
		}
		bool flag2 = cm.type == 1;
		if (flag2)
		{
			string text3 = text;
			text = string.Concat(new string[]
			{
				text3,
				"\n|6|",
				mResources.received,
				" ",
				cm.recieve.ToString(),
				"/",
				cm.maxCap.ToString()
			});
		}
		this.popUpDetailInit(this.cp, text);
		this.charInfo = null;
	}

	// Token: 0x06000852 RID: 2130 RVA: 0x000805A8 File Offset: 0x0007E7A8
	public void addThachDauDetail(TopInfo t)
	{
		string text = "|0|1|" + t.name;
		text = text + "\n|1|Top " + t.rank.ToString();
		text = text + "\n|1|" + t.info;
		text = text + "\n|2|" + t.info2;
		this.cp = new ChatPopup();
		this.popUpDetailInit(this.cp, text);
		this.partID = new int[]
		{
			t.headID,
			(int)t.leg,
			(int)t.body
		};
		this.currItem = null;
		this.charInfo = null;
	}

	// Token: 0x06000853 RID: 2131 RVA: 0x00080650 File Offset: 0x0007E850
	public void addClanMemberDetail(Member m)
	{
		string text = "|0|1|" + m.name;
		string str = "\n|2|1|";
		bool flag = m.role == 0;
		if (flag)
		{
			str = "\n|7|1|";
		}
		bool flag2 = m.role == 1;
		if (flag2)
		{
			str = "\n|1|1|";
		}
		bool flag3 = m.role == 2;
		if (flag3)
		{
			str = "\n|0|1|";
		}
		text = text + str + Member.getRole((int)m.role);
		string text2 = text;
		text = string.Concat(new string[]
		{
			text2,
			"\n|2|1|",
			mResources.power,
			": ",
			m.powerPoint
		});
		text += "\n--";
		text2 = text;
		text = string.Concat(new string[]
		{
			text2,
			"\n|5|",
			mResources.clan_capsuledonate,
			": ",
			m.clanPoint.ToString()
		});
		text2 = text;
		text = string.Concat(new string[]
		{
			text2,
			"\n|5|",
			mResources.clan_capsuleself,
			": ",
			m.curClanPoint.ToString()
		});
		text2 = text;
		text = string.Concat(new string[]
		{
			text2,
			"\n|4|",
			mResources.give_pea,
			": ",
			m.donate.ToString(),
			mResources.time
		});
		text2 = text;
		text = string.Concat(new string[]
		{
			text2,
			"\n|4|",
			mResources.receive_pea,
			": ",
			m.receive_donate.ToString(),
			mResources.time
		});
		text2 = text;
		text = string.Concat(new string[]
		{
			text2,
			"\n|6|",
			mResources.join_date,
			": ",
			m.joinTime
		});
		this.cp = new ChatPopup();
		this.popUpDetailInit(this.cp, text);
		this.partID = new int[]
		{
			(int)m.head,
			(int)m.leg,
			(int)m.body
		};
		this.currItem = null;
		this.charInfo = null;
	}

	// Token: 0x06000854 RID: 2132 RVA: 0x0008087C File Offset: 0x0007EA7C
	public void addClanDetail(Clan cl)
	{
		try
		{
			string text = "|0|" + cl.name;
			string[] array = mFont.tahoma_7_green.splitFontArray(cl.slogan, this.wScroll - 60);
			for (int i = 0; i < array.Length; i++)
			{
				text = text + "\n|2|" + array[i];
			}
			text += "\n--";
			string text2 = text;
			text = string.Concat(new string[]
			{
				text2,
				"\n|7|",
				mResources.clan_leader,
				": ",
				cl.leaderName
			});
			text2 = text;
			text = string.Concat(new string[]
			{
				text2,
				"\n|1|",
				mResources.power_point,
				": ",
				cl.powerPoint
			});
			text2 = text;
			text = string.Concat(new string[]
			{
				text2,
				"\n|4|",
				mResources.member,
				": ",
				cl.currMember.ToString(),
				"/",
				cl.maxMember.ToString()
			});
			text2 = text;
			text = string.Concat(new string[]
			{
				text2,
				"\n|4|",
				mResources.level,
				": ",
				cl.level.ToString()
			});
			text2 = text;
			text = string.Concat(new string[]
			{
				text2,
				"\n|4|",
				mResources.clan_birthday,
				": ",
				NinjaUtil.getDate(cl.date)
			});
			this.cp = new ChatPopup();
			this.popUpDetailInit(this.cp, text);
			this.idIcon = (int)ClanImage.getClanImage((short)cl.imgID).idImage[0];
			this.currItem = null;
		}
		catch (Exception ex)
		{
			Res.outz("Throw  exception " + ex.StackTrace);
		}
	}

	// Token: 0x06000855 RID: 2133 RVA: 0x00080A80 File Offset: 0x0007EC80
	public void addSkillDetail(SkillTemplate tp, Skill skill, Skill nextSkill)
	{
		string text = "|0|" + tp.name;
		for (int i = 0; i < tp.description.Length; i++)
		{
			text = text + "\n|4|" + tp.description[i];
		}
		text += "\n--";
		bool flag = skill != null;
		if (flag)
		{
			string text2 = text;
			text = string.Concat(new string[]
			{
				text2,
				"\n|2|",
				mResources.cap_do,
				": ",
				skill.point.ToString()
			});
			text = text + "\n|5|" + NinjaUtil.replace(tp.damInfo, "#", skill.damage.ToString() + string.Empty);
			text2 = text;
			text = string.Concat(new string[]
			{
				text2,
				"\n|5|",
				mResources.KI_consume,
				skill.manaUse.ToString(),
				(tp.manaUseType != 1) ? string.Empty : "%"
			});
			text2 = text;
			text = string.Concat(new string[]
			{
				text2,
				"\n|5|",
				mResources.cooldown,
				": ",
				skill.strTimeReplay(),
				"s"
			});
			text += "\n--";
			bool flag2 = skill.point == tp.maxPoint;
			if (flag2)
			{
				text = text + "\n|0|" + mResources.max_level_reach;
			}
			else
			{
				bool flag3 = !skill.template.isSkillSpec();
				if (flag3)
				{
					text2 = text;
					text = string.Concat(new string[]
					{
						text2,
						"\n|1|",
						mResources.next_level_require,
						Res.formatNumber(nextSkill.powRequire),
						" ",
						mResources.potential
					});
				}
				text = text + "\n|4|" + NinjaUtil.replace(tp.damInfo, "#", nextSkill.damage.ToString() + string.Empty);
			}
		}
		else
		{
			text = text + "\n|2|" + mResources.not_learn;
			string text3 = text;
			text = string.Concat(new string[]
			{
				text3,
				"\n|1|",
				mResources.learn_require,
				Res.formatNumber(nextSkill.powRequire),
				" ",
				mResources.potential
			});
			text = text + "\n|4|" + NinjaUtil.replace(tp.damInfo, "#", nextSkill.damage.ToString() + string.Empty);
			text3 = text;
			text = string.Concat(new string[]
			{
				text3,
				"\n|4|",
				mResources.KI_consume,
				nextSkill.manaUse.ToString(),
				(tp.manaUseType != 1) ? string.Empty : "%"
			});
			text3 = text;
			text = string.Concat(new string[]
			{
				text3,
				"\n|4|",
				mResources.cooldown,
				": ",
				nextSkill.strTimeReplay(),
				"s"
			});
		}
		this.currItem = null;
		this.partID = null;
		this.charInfo = null;
		this.cp = new ChatPopup();
		this.popUpDetailInit(this.cp, text);
		this.idIcon = 0;
	}

	// Token: 0x06000856 RID: 2134 RVA: 0x00080DE4 File Offset: 0x0007EFE4
	public void show()
	{
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.cmdClose.x = 156;
			this.cmdClose.y = 3;
		}
		else
		{
			this.cmdClose.x = GameCanvas.w - 19;
			this.cmdClose.y = GameCanvas.h - 19;
		}
		this.cmdClose.isPlaySoundButton = false;
		ChatPopup.currChatPopup = null;
		InfoDlg.hide();
		this.timeShow = 20;
		this.isShow = true;
		this.isClose = false;
		SoundMn.gI().panelOpen();
		bool flag = this.isTypeShop();
		if (flag)
		{
			global::Char.myCharz().setPartOld();
		}
	}

	// Token: 0x06000857 RID: 2135 RVA: 0x00080E94 File Offset: 0x0007F094
	public void chatTFUpdateKey()
	{
		bool flag = this.chatTField != null && this.chatTField.isShow;
		if (flag)
		{
			bool flag2 = this.chatTField.left != null && (GameCanvas.keyPressed[12] || mScreen.getCmdPointerLast(this.chatTField.left)) && this.chatTField.left != null;
			if (flag2)
			{
				this.chatTField.left.performAction();
			}
			bool flag3 = this.chatTField.right != null && (GameCanvas.keyPressed[13] || mScreen.getCmdPointerLast(this.chatTField.right)) && this.chatTField.right != null;
			if (flag3)
			{
				this.chatTField.right.performAction();
			}
			bool flag4 = this.chatTField.center != null && (GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] || mScreen.getCmdPointerLast(this.chatTField.center)) && this.chatTField.center != null;
			if (flag4)
			{
				this.chatTField.center.performAction();
			}
			bool flag5 = this.chatTField.isShow && GameCanvas.keyAsciiPress != 0;
			if (flag5)
			{
				this.chatTField.keyPressed(GameCanvas.keyAsciiPress);
				GameCanvas.keyAsciiPress = 0;
			}
			GameCanvas.clearKeyHold();
			GameCanvas.clearKeyPressed();
		}
	}

	// Token: 0x06000858 RID: 2136 RVA: 0x00081004 File Offset: 0x0007F204
	public void updateKey()
	{
		bool flag = (this.chatTField != null && this.chatTField.isShow) || !GameCanvas.panel.isDoneCombine || InfoDlg.isShow;
		if (!flag)
		{
			bool flag2 = this.tabIcon != null && this.tabIcon.isShow;
			if (flag2)
			{
				this.tabIcon.updateKey();
			}
			else
			{
				bool flag3 = this.isClose || !this.isShow;
				if (!flag3)
				{
					bool flag4 = this.cmdClose.isPointerPressInside();
					if (flag4)
					{
						this.cmdClose.performAction();
					}
					else
					{
						bool flag5 = GameCanvas.keyPressed[13];
						if (flag5)
						{
							bool flag6 = this.type != 4;
							if (flag6)
							{
								this.hide();
								return;
							}
							this.setTypeMain();
							this.cmx = (this.cmtoX = 0);
						}
						bool flag7 = GameCanvas.keyPressed[12] || GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25];
						if (flag7)
						{
							bool flag8 = this.left.idAction > 0;
							if (flag8)
							{
								this.perform(this.left.idAction, this.left.p);
							}
							else
							{
								this.waitToPerform = 2;
							}
						}
						bool flag9 = this.Equals(GameCanvas.panel) && GameCanvas.panel2 == null && GameCanvas.isPointerJustRelease && !GameCanvas.isPointer(this.X, this.Y, this.W, this.H) && !this.pointerIsDowning;
						if (flag9)
						{
							this.hide();
						}
						else
						{
							bool flag10 = !this.isClanOption;
							if (flag10)
							{
								this.updateKeyInTabBar();
							}
							switch (this.type)
							{
							case 0:
							{
								bool flag11 = this.currentTabIndex == 0;
								if (flag11)
								{
									this.updateKeyQuest();
									GameCanvas.clearKeyPressed();
									return;
								}
								bool flag12 = this.currentTabIndex == 1;
								if (flag12)
								{
									this.updateKeyInventory();
								}
								bool flag13 = this.currentTabIndex == 2;
								if (flag13)
								{
									this.updateKeySkill();
								}
								bool flag14 = this.currentTabIndex == 3;
								if (flag14)
								{
									bool flag15 = this.mainTabName.Length == 4;
									if (flag15)
									{
										this.updateKeyTool();
									}
									else
									{
										this.updateKeyClans();
									}
								}
								bool flag16 = this.currentTabIndex == 4;
								if (flag16)
								{
									this.updateKeyTool();
								}
								break;
							}
							case 1:
							case 17:
							case 25:
							{
								bool flag17 = this.currentTabIndex < this.currentTabName.Length - ((GameCanvas.panel2 == null) ? 1 : 0) && this.type != 17;
								if (flag17)
								{
									this.updateKeyScrollView();
								}
								else
								{
									bool flag18 = this.typeShop == 0;
									if (flag18)
									{
										this.updateKeyInventory();
									}
									else
									{
										this.updateKeyScrollView();
									}
								}
								break;
							}
							case 2:
								this.updateKeyInventory();
								break;
							case 3:
								this.updateKeyScrollView();
								break;
							case 4:
								this.updateKeyMap();
								GameCanvas.clearKeyPressed();
								return;
							case 7:
								this.updateKeyInventory();
								break;
							case 8:
								this.updateKeyScrollView();
								break;
							case 9:
								this.updateKeyScrollView();
								break;
							case 10:
								this.updateKeyScrollView();
								break;
							case 11:
							case 16:
								this.updateKeyScrollView();
								break;
							case 12:
								this.updateKeyCombine();
								break;
							case 13:
								this.updateKeyGiaoDich();
								break;
							case 14:
								this.updateKeyScrollView();
								break;
							case 15:
								this.updateKeyScrollView();
								break;
							case 18:
								this.updateKeyScrollView();
								break;
							case 19:
								this.updateKeyOption();
								break;
							case 20:
								this.updateKeyOption();
								break;
							case 21:
							{
								bool flag19 = this.currentTabIndex == 0;
								if (flag19)
								{
									this.updateKeyScrollView();
								}
								bool flag20 = this.currentTabIndex == 1;
								if (flag20)
								{
									this.updateKeyPetStatus();
								}
								bool flag21 = this.currentTabIndex == 2;
								if (flag21)
								{
									this.updateKeyScrollView();
								}
								break;
							}
							case 22:
								this.updateKeyAuto();
								break;
							case 23:
							case 24:
								this.updateKeyScrollView();
								break;
							}
							GameCanvas.clearKeyHold();
							for (int i = 0; i < GameCanvas.keyPressed.Length; i++)
							{
								GameCanvas.keyPressed[i] = false;
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x06000859 RID: 2137 RVA: 0x00081480 File Offset: 0x0007F680
	private void updateKeyAuto()
	{
	}

	// Token: 0x0600085A RID: 2138 RVA: 0x00081483 File Offset: 0x0007F683
	private void updateKeyPetStatus()
	{
		this.updateKeyScrollView();
	}

	// Token: 0x0600085B RID: 2139 RVA: 0x0008148D File Offset: 0x0007F68D
	private void updateKeyPetSkill()
	{
	}

	// Token: 0x0600085C RID: 2140 RVA: 0x00081490 File Offset: 0x0007F690
	private void keyGiaodich()
	{
		this.updateKeyScrollView();
	}

	// Token: 0x0600085D RID: 2141 RVA: 0x0008149C File Offset: 0x0007F69C
	private void updateKeyGiaoDich()
	{
		bool flag = this.currentTabIndex == 0;
		if (flag)
		{
			bool flag2 = this.Equals(GameCanvas.panel);
			if (flag2)
			{
				this.updateKeyInventory();
			}
			bool flag3 = this.Equals(GameCanvas.panel2);
			if (flag3)
			{
				this.keyGiaodich();
			}
		}
		bool flag4 = this.currentTabIndex == 1 || this.currentTabIndex == 2;
		if (flag4)
		{
			this.keyGiaodich();
		}
	}

	// Token: 0x0600085E RID: 2142 RVA: 0x0008150B File Offset: 0x0007F70B
	private void updateKeyTool()
	{
		this.updateKeyScrollView();
	}

	// Token: 0x0600085F RID: 2143 RVA: 0x00081515 File Offset: 0x0007F715
	private void updateKeySkill()
	{
		this.updateKeyScrollView();
	}

	// Token: 0x06000860 RID: 2144 RVA: 0x0008151F File Offset: 0x0007F71F
	private void updateKeyClanIcon()
	{
		this.updateKeyScrollView();
	}

	// Token: 0x06000861 RID: 2145 RVA: 0x0008152C File Offset: 0x0007F72C
	public void setTabGiaoDich(bool isMe)
	{
		this.currentListLength = ((!isMe) ? (this.vFriendGD.size() + 3) : (this.vMyGD.size() + 3));
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
	}

	// Token: 0x06000862 RID: 2146 RVA: 0x0008160C File Offset: 0x0007F80C
	public void setTypeGiaoDich(global::Char cGD)
	{
		this.type = 13;
		this.tabName[this.type] = Panel.boxGD;
		this.isAccept = false;
		this.isLock = false;
		this.isFriendLock = false;
		this.vMyGD.removeAllElements();
		this.vFriendGD.removeAllElements();
		this.moneyGD = 0;
		this.friendMoneyGD = 0;
		bool flag = GameCanvas.w > 2 * Panel.WIDTH_PANEL;
		if (flag)
		{
			GameCanvas.panel2 = new Panel();
			GameCanvas.panel2.type = 13;
			GameCanvas.panel2.tabName[this.type] = new string[][]
			{
				mResources.item_receive
			};
			GameCanvas.panel2.setType(1);
			GameCanvas.panel2.setTabGiaoDich(false);
			GameCanvas.panel.tabName[this.type] = new string[][]
			{
				mResources.inventory,
				mResources.item_give
			};
			GameCanvas.panel2.show();
			GameCanvas.panel2.charMenu = cGD;
		}
		bool flag2 = this.Equals(GameCanvas.panel);
		if (flag2)
		{
			this.setType(0);
		}
		bool flag3 = this.currentTabIndex == 0;
		if (flag3)
		{
			this.setTabInventory(true);
		}
		bool flag4 = this.currentTabIndex == 1;
		if (flag4)
		{
			this.setTabGiaoDich(true);
		}
		bool flag5 = this.currentTabIndex == 2;
		if (flag5)
		{
			this.setTabGiaoDich(false);
		}
		this.charMenu = cGD;
	}

	// Token: 0x06000863 RID: 2147 RVA: 0x00081778 File Offset: 0x0007F978
	private void paintGiaoDich(mGraphics g, bool isMe)
	{
		g.setColor(16711680);
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		MyVector myVector = (!isMe) ? this.vFriendGD : this.vMyGD;
		for (int i = 0; i < this.currentListLength; i++)
		{
			int num = this.xScroll + 36;
			int num2 = this.yScroll + i * this.ITEM_HEIGHT;
			int num3 = this.wScroll - 36;
			int num4 = this.ITEM_HEIGHT - 1;
			int num5 = this.xScroll;
			int num6 = this.yScroll + i * this.ITEM_HEIGHT;
			int num7 = 34;
			int num8 = this.ITEM_HEIGHT - 1;
			bool flag = num2 - this.cmy > this.yScroll + this.hScroll || num2 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
			if (!flag)
			{
				bool flag2 = i == this.currentListLength - 1;
				if (flag2)
				{
					bool flag3 = !isMe;
					if (!flag3)
					{
						g.setColor(15196114);
						g.fillRect(num5, num2, this.wScroll, num4);
						bool flag4 = !this.isLock;
						if (flag4)
						{
							bool flag5 = !this.isFriendLock;
							if (flag5)
							{
								mFont.tahoma_7_grey.drawString(g, mResources.opponent + mResources.not_lock_trade, this.xScroll + this.wScroll / 2, num2 + num4 / 2 - 4, mFont.CENTER);
							}
							else
							{
								mFont.tahoma_7_grey.drawString(g, mResources.opponent + mResources.locked_trade, this.xScroll + this.wScroll / 2, num2 + num4 / 2 - 4, mFont.CENTER);
							}
						}
						else
						{
							bool flag6 = this.isFriendLock;
							if (flag6)
							{
								g.setColor(15196114);
								g.fillRect(num5, num2, this.wScroll, num4);
								g.drawImage((i != this.selected) ? GameScr.imgLbtn2 : GameScr.imgLbtnFocus2, this.xScroll + this.wScroll - 5, num2 + 2, StaticObj.TOP_RIGHT);
								((i != this.selected) ? mFont.tahoma_7b_dark : mFont.tahoma_7b_green2).drawString(g, mResources.done, this.xScroll + this.wScroll - 22, num2 + 7, 2);
								mFont.tahoma_7_grey.drawString(g, mResources.opponent + mResources.locked_trade, this.xScroll + 5, num2 + num4 / 2 - 4, mFont.LEFT);
							}
							else
							{
								mFont.tahoma_7_grey.drawString(g, mResources.opponent + mResources.not_lock_trade, this.xScroll + this.wScroll / 2, num2 + num4 / 2 - 4, mFont.CENTER);
							}
						}
					}
				}
				else
				{
					bool flag7 = i == this.currentListLength - 2;
					if (flag7)
					{
						if (isMe)
						{
							g.setColor(15196114);
							g.fillRect(num5, num2, this.wScroll, num4);
							bool flag8 = !this.isAccept;
							if (flag8)
							{
								bool flag9 = !this.isLock;
								if (flag9)
								{
									g.drawImage((i != this.selected) ? GameScr.imgLbtn2 : GameScr.imgLbtnFocus2, this.xScroll + this.wScroll - 5, num2 + 2, StaticObj.TOP_RIGHT);
									((i != this.selected) ? mFont.tahoma_7b_dark : mFont.tahoma_7b_green2).drawString(g, mResources.mlock, this.xScroll + this.wScroll - 22, num2 + 7, 2);
									mFont.tahoma_7_grey.drawString(g, mResources.you + mResources.not_lock_trade, this.xScroll + 5, num2 + num4 / 2 - 4, mFont.LEFT);
								}
								else
								{
									g.drawImage((i != this.selected) ? GameScr.imgLbtn2 : GameScr.imgLbtnFocus2, this.xScroll + this.wScroll - 5, num2 + 2, StaticObj.TOP_RIGHT);
									((i != this.selected) ? mFont.tahoma_7b_dark : mFont.tahoma_7b_green2).drawString(g, mResources.CANCEL, this.xScroll + this.wScroll - 22, num2 + 7, 2);
									mFont.tahoma_7_grey.drawString(g, mResources.you + mResources.locked_trade, this.xScroll + 5, num2 + num4 / 2 - 4, mFont.LEFT);
								}
							}
						}
						else
						{
							bool flag10 = !this.isFriendLock;
							if (flag10)
							{
								mFont.tahoma_7b_dark.drawString(g, mResources.not_lock_trade_upper, this.xScroll + this.wScroll / 2, num2 + num4 / 2 - 4, mFont.CENTER);
							}
							else
							{
								mFont.tahoma_7b_dark.drawString(g, mResources.locked_trade_upper, this.xScroll + this.wScroll / 2, num2 + num4 / 2 - 4, mFont.CENTER);
							}
						}
					}
					else
					{
						bool flag11 = i == this.currentListLength - 3;
						if (flag11)
						{
							bool flag12 = this.isLock;
							if (flag12)
							{
								g.setColor(13748667);
							}
							else
							{
								g.setColor((i != this.selected) ? 15196114 : 16383818);
							}
							g.fillRect(num, num2, num3, num4);
							bool flag13 = this.isLock;
							if (flag13)
							{
								g.setColor(13748667);
							}
							else
							{
								g.setColor((i != this.selected) ? 9993045 : 7300181);
							}
							g.fillRect(num5, num6, num7, num8);
							g.drawImage(Panel.imgXu, num5 + num7 / 2, num6 + num8 / 2, 3);
							mFont.tahoma_7_green2.drawString(g, NinjaUtil.getMoneys((long)((!isMe) ? this.friendMoneyGD : this.moneyGD)) + " " + mResources.XU, num + 5, num2 + 11, 0);
							mFont.tahoma_7_green.drawString(g, mResources.money_trade, num + 5, num2, 0);
						}
						else
						{
							bool flag14 = myVector.size() == 0;
							if (flag14)
							{
								return;
							}
							bool flag15 = this.isLock;
							if (flag15)
							{
								g.setColor(13748667);
							}
							else
							{
								g.setColor((i != this.selected) ? 15196114 : 16383818);
							}
							g.fillRect(num, num2, num3, num4);
							bool flag16 = this.isLock;
							if (flag16)
							{
								g.setColor(13748667);
							}
							else
							{
								g.setColor((i != this.selected) ? 9993045 : 9541120);
							}
							Item item = (Item)myVector.elementAt(i);
							bool flag17 = item != null;
							if (flag17)
							{
								for (int j = 0; j < item.itemOption.Length; j++)
								{
									bool flag18 = item.itemOption[j].optionTemplate.id != 72 || item.itemOption[j].param <= 0;
									if (!flag18)
									{
										sbyte color_Item_Upgrade = Panel.GetColor_Item_Upgrade(item.itemOption[j].param);
										int color_ItemBg = Panel.GetColor_ItemBg((int)color_Item_Upgrade);
										bool flag19 = color_ItemBg != -1;
										if (flag19)
										{
											bool flag20 = this.isLock;
											if (flag20)
											{
												g.setColor(13748667);
											}
											else
											{
												g.setColor((i != this.selected) ? Panel.GetColor_ItemBg((int)color_Item_Upgrade) : Panel.GetColor_ItemBg((int)color_Item_Upgrade));
											}
										}
									}
								}
							}
							g.fillRect(num5, num6, num7, num8);
							bool flag21 = item == null;
							if (!flag21)
							{
								string str = string.Empty;
								mFont mFont = mFont.tahoma_7_green2;
								bool flag22 = item.itemOption != null;
								if (flag22)
								{
									for (int k = 0; k < item.itemOption.Length; k++)
									{
										bool flag23 = item.itemOption[k].optionTemplate.id == 72;
										if (flag23)
										{
											str = " [+" + item.itemOption[k].param.ToString() + "]";
										}
										bool flag24 = item.itemOption[k].optionTemplate.id == 41;
										if (flag24)
										{
											bool flag25 = item.itemOption[k].param == 1;
											if (flag25)
											{
												mFont = Panel.GetFont(0);
											}
											else
											{
												bool flag26 = item.itemOption[k].param == 2;
												if (flag26)
												{
													mFont = Panel.GetFont(2);
												}
												else
												{
													bool flag27 = item.itemOption[k].param == 3;
													if (flag27)
													{
														mFont = Panel.GetFont(8);
													}
													else
													{
														bool flag28 = item.itemOption[k].param == 4;
														if (flag28)
														{
															mFont = Panel.GetFont(7);
														}
													}
												}
											}
										}
									}
								}
								mFont.drawString(g, item.template.name + str, num + 5, num2 + 1, 0);
								string text = string.Empty;
								bool flag29 = item.itemOption != null;
								if (flag29)
								{
									bool flag30 = item.itemOption.Length != 0 && item.itemOption[0] != null;
									if (flag30)
									{
										text += item.itemOption[0].getOptionString();
									}
									mFont mFont2 = mFont.tahoma_7_blue;
									bool flag31 = item.compare < 0 && item.template.type != 5;
									if (flag31)
									{
										mFont2 = mFont.tahoma_7_red;
									}
									bool flag32 = item.itemOption.Length > 1;
									if (flag32)
									{
										for (int l = 1; l < item.itemOption.Length; l++)
										{
											bool flag33 = item.itemOption[l] != null && item.itemOption[l].optionTemplate.id != 102 && item.itemOption[l].optionTemplate.id != 107;
											if (flag33)
											{
												text = text + "," + item.itemOption[l].getOptionString();
											}
										}
									}
									mFont2.drawString(g, text, num + 5, num2 + 11, mFont.LEFT);
								}
								SmallImage.drawSmallImage(g, (int)item.template.iconID, num5 + num7 / 2, num6 + num8 / 2, 0, 3);
								bool flag34 = item.itemOption != null;
								if (flag34)
								{
									for (int m = 0; m < item.itemOption.Length; m++)
									{
										this.paintOptItem(g, item.itemOption[m].optionTemplate.id, item.itemOption[m].param, num5, num6, num7, num8);
									}
									for (int n = 0; n < item.itemOption.Length; n++)
									{
										this.paintOptSlotItem(g, item.itemOption[n].optionTemplate.id, item.itemOption[n].param, num5, num6, num7, num8);
									}
								}
								bool flag35 = item.quantity > 1;
								if (flag35)
								{
									mFont.tahoma_7_yellow.drawString(g, string.Empty + item.quantity.ToString(), num5 + num7, num6 + num8 - mFont.tahoma_7_yellow.getHeight(), 1);
								}
							}
						}
					}
				}
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x06000864 RID: 2148 RVA: 0x00082308 File Offset: 0x00080508
	private void updateKeyMap()
	{
		bool flag = GameCanvas.keyHold[(!Main.isPC) ? 2 : 21];
		if (flag)
		{
			this.yMove -= 5;
			this.cmyMap = this.yMove - (this.yScroll + this.hScroll / 2);
			bool flag2 = this.yMove < this.yScroll;
			if (flag2)
			{
				this.yMove = this.yScroll;
			}
		}
		bool flag3 = GameCanvas.keyHold[(!Main.isPC) ? 8 : 22];
		if (flag3)
		{
			this.yMove += 5;
			this.cmyMap = this.yMove - (this.yScroll + this.hScroll / 2);
			bool flag4 = this.yMove > this.yScroll + 200;
			if (flag4)
			{
				this.yMove = this.yScroll + 200;
			}
		}
		bool flag5 = GameCanvas.keyHold[(!Main.isPC) ? 4 : 23];
		if (flag5)
		{
			this.xMove -= 5;
			this.cmxMap = this.xMove - this.wScroll / 2;
			bool flag6 = this.xMove < 16;
			if (flag6)
			{
				this.xMove = 16;
			}
		}
		bool flag7 = GameCanvas.keyHold[(!Main.isPC) ? 6 : 24];
		if (flag7)
		{
			this.xMove += 5;
			this.cmxMap = this.xMove - this.wScroll / 2;
			bool flag8 = this.xMove > 250;
			if (flag8)
			{
				this.xMove = 250;
			}
		}
		bool isPointerDown = GameCanvas.isPointerDown;
		if (isPointerDown)
		{
			this.pointerIsDowning = true;
			bool flag9 = !this.trans;
			if (flag9)
			{
				this.pa1 = this.cmxMap;
				this.pa2 = this.cmyMap;
				this.trans = true;
			}
			this.cmxMap = this.pa1 + (GameCanvas.pxLast - GameCanvas.px);
			this.cmyMap = this.pa2 + (GameCanvas.pyLast - GameCanvas.py);
		}
		bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
		if (isPointerJustRelease)
		{
			this.trans = false;
			GameCanvas.pxLast = GameCanvas.px;
			GameCanvas.pyLast = GameCanvas.py;
			this.pX = GameCanvas.pxLast + this.cmxMap;
			this.pY = GameCanvas.pyLast + this.cmyMap;
		}
		bool isPointerClick = GameCanvas.isPointerClick;
		if (isPointerClick)
		{
			this.pointerIsDowning = false;
		}
		bool flag10 = this.cmxMap < 0;
		if (flag10)
		{
			this.cmxMap = 0;
		}
		bool flag11 = this.cmxMap > this.cmxMapLim;
		if (flag11)
		{
			this.cmxMap = this.cmxMapLim;
		}
		bool flag12 = this.cmyMap < 0;
		if (flag12)
		{
			this.cmyMap = 0;
		}
		bool flag13 = this.cmyMap > this.cmyMapLim;
		if (flag13)
		{
			this.cmyMap = this.cmyMapLim;
		}
	}

	// Token: 0x06000865 RID: 2149 RVA: 0x000825E4 File Offset: 0x000807E4
	private void updateKeyCombine()
	{
		bool flag = this.currentTabIndex == 0;
		if (flag)
		{
			this.updateKeyScrollView();
			this.keyTouchCombine = -1;
			bool flag2 = this.selected == this.vItemCombine.size() && GameCanvas.isPointerClick;
			if (flag2)
			{
				GameCanvas.isPointerClick = false;
				this.keyTouchCombine = 1;
			}
		}
		bool flag3 = this.currentTabIndex == 1;
		if (flag3)
		{
			this.updateKeyScrollView();
		}
	}

	// Token: 0x06000866 RID: 2150 RVA: 0x00082654 File Offset: 0x00080854
	private void updateKeyQuest()
	{
		bool flag = GameCanvas.keyHold[(!Main.isPC) ? 2 : 21];
		if (flag)
		{
			this.cmyQuest -= 5;
		}
		bool flag2 = GameCanvas.keyHold[(!Main.isPC) ? 8 : 22];
		if (flag2)
		{
			this.cmyQuest += 5;
		}
		bool flag3 = this.cmyQuest < 0;
		if (flag3)
		{
			this.cmyQuest = 0;
		}
		int num = this.indexRowMax * 12 - (this.hScroll - 60);
		bool flag4 = num < 0;
		if (flag4)
		{
			num = 0;
		}
		bool flag5 = this.cmyQuest > num;
		if (flag5)
		{
			this.cmyQuest = num;
		}
		bool flag6 = this.scroll != null;
		if (flag6)
		{
			bool flag7 = !GameCanvas.isTouch;
			if (flag7)
			{
				this.scroll.cmy = this.cmyQuest;
			}
			this.scroll.updateKey();
		}
		int num2 = this.xScroll + this.wScroll / 2 - 35;
		int num3 = (GameCanvas.h <= 300) ? 15 : 20;
		int num4 = this.yScroll + this.hScroll - num3 - 15;
		int px = GameCanvas.px;
		int py = GameCanvas.py;
		this.keyTouchMapButton = -1;
		bool flag8 = Panel.isPaintMap && !GameScr.gI().isMapDocNhan() && px >= num2 && px <= num2 + 70 && py >= num4 && py <= num4 + 30 && (this.scroll == null || !this.scroll.pointerIsDowning);
		if (flag8)
		{
			this.keyTouchMapButton = 1;
			bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
			if (isPointerJustRelease)
			{
				SoundMn.gI().buttonClick();
				this.waitToPerform = 2;
				GameCanvas.clearAllPointerEvent();
			}
		}
	}

	// Token: 0x06000867 RID: 2151 RVA: 0x00082810 File Offset: 0x00080A10
	private void getCurrClanOtion()
	{
		this.isClanOption = false;
		bool flag = this.type != 0 || this.mainTabName.Length != 5 || this.currentTabIndex != 3;
		if (!flag)
		{
			this.isClanOption = false;
			bool flag2 = this.selected == 0;
			if (flag2)
			{
				this.currClanOption = new int[this.clansOption.Length];
				for (int i = 0; i < this.currClanOption.Length; i++)
				{
					this.currClanOption[i] = i;
				}
				bool flag3 = !this.isViewMember;
				if (flag3)
				{
					this.isClanOption = true;
				}
			}
			else
			{
				bool flag4 = this.selected != 1 && !this.isSearchClan && this.selected > 0;
				if (flag4)
				{
					this.currClanOption = new int[1];
					for (int j = 0; j < this.currClanOption.Length; j++)
					{
						this.currClanOption[j] = j;
					}
					this.isClanOption = true;
				}
			}
		}
	}

	// Token: 0x06000868 RID: 2152 RVA: 0x00082918 File Offset: 0x00080B18
	private void updateKeyClansOption()
	{
		bool flag = this.currClanOption == null;
		if (!flag)
		{
			bool flag2 = GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23];
			if (flag2)
			{
				this.currMess = this.getCurrMessage();
				this.cSelected--;
				bool flag3 = this.selected == 0 && this.cSelected < 0;
				if (flag3)
				{
					this.cSelected = this.currClanOption.Length - 1;
				}
				bool flag4 = this.selected > 1 && this.isMessage && this.currMess.option != null && this.cSelected < 0;
				if (flag4)
				{
					this.cSelected = this.currMess.option.Length - 1;
				}
			}
			else
			{
				bool flag5 = GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24];
				if (flag5)
				{
					this.currMess = this.getCurrMessage();
					this.cSelected++;
					bool flag6 = this.selected == 0 && this.cSelected > this.currClanOption.Length - 1;
					if (flag6)
					{
						this.cSelected = 0;
					}
					bool flag7 = this.selected > 1 && this.isMessage && this.currMess.option != null && this.cSelected > this.currMess.option.Length - 1;
					if (flag7)
					{
						this.cSelected = 0;
					}
				}
			}
		}
	}

	// Token: 0x06000869 RID: 2153 RVA: 0x00082A8C File Offset: 0x00080C8C
	private void updateKeyClans()
	{
		this.updateKeyScrollView();
		this.updateKeyClansOption();
	}

	// Token: 0x0600086A RID: 2154 RVA: 0x00082AA0 File Offset: 0x00080CA0
	private void checkOptionSelect()
	{
		try
		{
			bool flag = this.type != 0 || this.currentTabIndex != 3 || this.mainTabName.Length != 5 || this.selected == -1;
			if (!flag)
			{
				int num = 0;
				bool flag2 = this.selected == 0;
				if (flag2)
				{
					num = this.xScroll + this.wScroll / 2 - this.clansOption.Length * this.TAB_W / 2;
					this.cSelected = (GameCanvas.px - num) / this.TAB_W;
				}
				else
				{
					this.currMess = this.getCurrMessage();
					bool flag3 = this.currMess != null && this.currMess.option != null;
					if (flag3)
					{
						num = this.xScroll + this.wScroll - 2 - this.currMess.option.Length * 40;
						this.cSelected = (GameCanvas.px - num) / 40;
					}
				}
				bool flag4 = GameCanvas.px < num;
				if (flag4)
				{
					this.cSelected = -1;
				}
			}
		}
		catch (Exception ex)
		{
			Res.outz("Throw err " + ex.StackTrace);
		}
	}

	// Token: 0x0600086B RID: 2155 RVA: 0x00082BD0 File Offset: 0x00080DD0
	public void updateScroolMouse(int a)
	{
		bool flag = false;
		bool flag2 = GameCanvas.pxMouse > this.wScroll;
		if (!flag2)
		{
			bool flag3 = this.indexMouse == -1;
			if (flag3)
			{
				this.indexMouse = this.selected;
			}
			bool flag4 = a > 0;
			if (flag4)
			{
				this.indexMouse -= a;
				flag = true;
			}
			else
			{
				bool flag5 = a < 0;
				if (flag5)
				{
					this.indexMouse += -a;
					flag = true;
				}
			}
			bool flag6 = this.indexMouse < 0;
			if (flag6)
			{
				this.indexMouse = 0;
			}
			bool flag7 = flag;
			if (flag7)
			{
				this.cmtoY = this.indexMouse * 12;
				bool flag8 = this.cmtoY > this.cmyLim;
				if (flag8)
				{
					this.cmtoY = this.cmyLim;
				}
				bool flag9 = this.cmtoY < 0;
				if (flag9)
				{
					this.cmtoY = 0;
				}
			}
		}
	}

	// Token: 0x0600086C RID: 2156 RVA: 0x00082CB8 File Offset: 0x00080EB8
	private void updateKeyScrollView()
	{
		bool flag = this.currentListLength <= 0;
		if (!flag)
		{
			bool flag2 = false;
			bool flag3 = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21];
			if (flag3)
			{
				flag2 = true;
				bool flag4 = this.isTabInven() && this.isnewInventory;
				if (flag4)
				{
					bool flag5 = this.selected > 0 && this.sellectInventory == 0;
					if (flag5)
					{
						this.selected--;
					}
				}
				else
				{
					this.selected--;
					bool flag6 = this.type == 24;
					if (flag6)
					{
						this.selected -= 2;
						bool flag7 = this.selected < 0;
						if (flag7)
						{
							this.selected = 0;
						}
					}
					else
					{
						bool flag8 = this.selected < 0;
						if (flag8)
						{
							bool flag9 = this.Equals(GameCanvas.panel) && this.typeShop == 2 && this.currentTabIndex <= 3 && this.maxPageShop[this.currentTabIndex] > 1;
							if (flag9)
							{
								InfoDlg.showWait();
								bool flag10 = this.currPageShop[this.currentTabIndex] <= 0;
								if (flag10)
								{
									Service.gI().kigui(4, -1, (sbyte)this.currentTabIndex, this.maxPageShop[this.currentTabIndex] - 1, -1);
								}
								else
								{
									Service.gI().kigui(4, -1, (sbyte)this.currentTabIndex, this.currPageShop[this.currentTabIndex] - 1, -1);
								}
								return;
							}
							this.selected = this.currentListLength - 1;
							bool flag11 = this.isClanOption;
							if (flag11)
							{
								this.selected = -1;
							}
							bool flag12 = this.size_tab > 0;
							if (flag12)
							{
								this.selected = -1;
							}
						}
					}
					this.lastSelect[this.currentTabIndex] = this.selected;
					this.cSelected = 0;
					this.getCurrClanOtion();
				}
			}
			else
			{
				bool flag13 = GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22];
				if (flag13)
				{
					flag2 = true;
					bool flag14 = this.isTabInven() && this.isnewInventory;
					if (flag14)
					{
						bool flag15 = this.selected < 1 && this.sellectInventory == 0;
						if (flag15)
						{
							this.selected++;
						}
					}
					else
					{
						this.selected++;
						bool flag16 = this.type == 24;
						if (flag16)
						{
							this.selected += 2;
							bool flag17 = this.selected > this.currentListLength - 1;
							if (flag17)
							{
								this.selected = this.currentListLength - 1;
							}
						}
						else
						{
							bool flag18 = this.selected > this.currentListLength - 1;
							if (flag18)
							{
								bool flag19 = this.Equals(GameCanvas.panel) && this.typeShop == 2 && this.currentTabIndex <= 3 && this.maxPageShop[this.currentTabIndex] > 1;
								if (flag19)
								{
									InfoDlg.showWait();
									bool flag20 = this.currPageShop[this.currentTabIndex] >= this.maxPageShop[this.currentTabIndex] - 1;
									if (flag20)
									{
										Service.gI().kigui(4, -1, (sbyte)this.currentTabIndex, 0, -1);
									}
									else
									{
										Service.gI().kigui(4, -1, (sbyte)this.currentTabIndex, this.currPageShop[this.currentTabIndex] + 1, -1);
									}
									return;
								}
								this.selected = 0;
							}
						}
						this.lastSelect[this.currentTabIndex] = this.selected;
						this.cSelected = 0;
						this.getCurrClanOtion();
					}
				}
			}
			bool flag21 = this.isnewInventory && GameCanvas.keyPressed[5] && this.itemInvenNew != null;
			if (flag21)
			{
				this.pointerDownTime = 0;
				this.waitToPerform = 2;
			}
			bool flag22 = flag2;
			if (flag22)
			{
				this.cmtoY = this.selected * this.ITEM_HEIGHT - this.hScroll / 2;
				bool flag23 = this.cmtoY > this.cmyLim;
				if (flag23)
				{
					this.cmtoY = this.cmyLim;
				}
				bool flag24 = this.cmtoY < 0;
				if (flag24)
				{
					this.cmtoY = 0;
				}
				this.cmy = this.cmtoY;
			}
			bool isPointerDown = GameCanvas.isPointerDown;
			if (isPointerDown)
			{
				this.justRelease = false;
				bool flag25 = !this.pointerIsDowning && GameCanvas.isPointer(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
				if (flag25)
				{
					for (int i = 0; i < this.pointerDownLastX.Length; i++)
					{
						this.pointerDownLastX[0] = GameCanvas.py;
					}
					this.pointerDownFirstX = GameCanvas.py;
					this.pointerIsDowning = true;
					this.isDownWhenRunning = (this.cmRun != 0);
					this.cmRun = 0;
				}
				else
				{
					bool flag26 = this.pointerIsDowning;
					if (flag26)
					{
						this.pointerDownTime++;
						bool flag27 = this.pointerDownTime > 5 && this.pointerDownFirstX == GameCanvas.py && !this.isDownWhenRunning;
						if (flag27)
						{
							this.pointerDownFirstX = -1000;
							this.selected = (this.cmtoY + GameCanvas.py - this.yScroll) / this.ITEM_HEIGHT;
							bool flag28 = this.selected >= this.currentListLength;
							if (flag28)
							{
								this.selected = -1;
							}
							this.checkOptionSelect();
						}
						else
						{
							this.indexMouse = -1;
						}
						int num = GameCanvas.py - this.pointerDownLastX[0];
						bool flag29 = num != 0 && this.selected != -1;
						if (flag29)
						{
							this.selected = -1;
							this.cSelected = -1;
						}
						for (int j = this.pointerDownLastX.Length - 1; j > 0; j--)
						{
							this.pointerDownLastX[j] = this.pointerDownLastX[j - 1];
						}
						this.pointerDownLastX[0] = GameCanvas.py;
						this.cmtoY -= num;
						bool flag30 = this.cmtoY < 0;
						if (flag30)
						{
							this.cmtoY = 0;
						}
						bool flag31 = this.cmtoY > this.cmyLim;
						if (flag31)
						{
							this.cmtoY = this.cmyLim;
						}
						bool flag32 = this.cmy < 0 || this.cmy > this.cmyLim;
						if (flag32)
						{
							num /= 2;
						}
						this.cmy -= num;
						bool flag33 = this.cmy < -(GameCanvas.h / 3);
						if (flag33)
						{
							this.wantUpdateList = true;
						}
						else
						{
							this.wantUpdateList = false;
						}
						bool flag34 = this.isnewInventory;
						if (flag34)
						{
							int num2 = GameCanvas.px - this.xScroll;
							int num3 = GameCanvas.py - this.yScroll;
							this.sellectInventory = num3 / 34 * 5 + num2 / 34;
						}
					}
				}
			}
			bool flag35 = !GameCanvas.isPointerJustRelease || !this.pointerIsDowning;
			if (!flag35)
			{
				this.justRelease = true;
				int i2 = GameCanvas.py - this.pointerDownLastX[0];
				GameCanvas.isPointerJustRelease = false;
				bool flag36 = Res.abs(i2) < 20 && Res.abs(GameCanvas.py - this.pointerDownFirstX) < 20 && !this.isDownWhenRunning;
				if (flag36)
				{
					this.cmRun = 0;
					this.cmtoY = this.cmy;
					this.pointerDownFirstX = -1000;
					this.selected = (this.cmtoY + GameCanvas.py - this.yScroll) / this.ITEM_HEIGHT;
					bool flag37 = this.selected >= this.currentListLength;
					if (flag37)
					{
						this.selected = -1;
					}
					this.checkOptionSelect();
					this.pointerDownTime = 0;
					this.waitToPerform = 10;
					bool flag38 = this.isnewInventory;
					if (flag38)
					{
						this.waitToPerform = -1;
					}
					SoundMn.gI().panelClick();
				}
				else
				{
					bool flag39 = this.selected != -1 && this.pointerDownTime > 5;
					if (flag39)
					{
						this.pointerDownTime = 0;
						this.waitToPerform = 1;
					}
					else
					{
						bool flag40 = this.selected == -1 && !this.isDownWhenRunning;
						if (flag40)
						{
							bool flag41 = this.cmy < 0;
							if (flag41)
							{
								this.cmtoY = 0;
							}
							else
							{
								bool flag42 = this.cmy > this.cmyLim;
								if (flag42)
								{
									this.cmtoY = this.cmyLim;
								}
								else
								{
									int num4 = GameCanvas.py - this.pointerDownLastX[0] + (this.pointerDownLastX[0] - this.pointerDownLastX[1]) + (this.pointerDownLastX[1] - this.pointerDownLastX[2]);
									num4 = ((num4 > 10) ? 10 : ((num4 < -10) ? -10 : 0));
									this.cmRun = -num4 * 100;
								}
							}
						}
					}
				}
				bool flag43 = (this.isTabInven() || this.type == 13) && GameCanvas.py < this.yScroll + 21;
				if (flag43)
				{
					this.selected = 0;
					this.updateKeyInvenTab();
				}
				this.pointerIsDowning = false;
				this.pointerDownTime = 0;
				GameCanvas.isPointerJustRelease = false;
			}
		}
	}

	// Token: 0x0600086D RID: 2157 RVA: 0x000835EC File Offset: 0x000817EC
	public string subArray(string[] str)
	{
		return null;
	}

	// Token: 0x0600086E RID: 2158 RVA: 0x00083600 File Offset: 0x00081800
	private void updateKeyInTabBar()
	{
		bool flag = (this.scroll != null && this.scroll.pointerIsDowning) || this.pointerIsDowning;
		if (!flag)
		{
			int num = this.currentTabIndex;
			bool flag2 = this.isTabInven() && this.isnewInventory;
			if (flag2)
			{
				bool flag3 = this.selected == -1;
				if (flag3)
				{
					bool flag4 = GameCanvas.keyPressed[6];
					if (flag4)
					{
						this.currentTabIndex++;
						bool flag5 = this.currentTabIndex >= this.currentTabName.Length;
						if (flag5)
						{
							bool flag6 = GameCanvas.panel2 != null;
							if (flag6)
							{
								this.currentTabIndex = this.currentTabName.Length - 1;
								GameCanvas.isFocusPanel2 = true;
							}
							else
							{
								this.currentTabIndex = 0;
							}
						}
						this.selected = this.lastSelect[this.currentTabIndex];
						this.lastTabIndex[this.type] = this.currentTabIndex;
					}
					bool flag7 = GameCanvas.keyPressed[4];
					if (flag7)
					{
						this.currentTabIndex--;
						bool flag8 = this.currentTabIndex < 0;
						if (flag8)
						{
							this.currentTabIndex = this.currentTabName.Length - 1;
						}
						bool isFocusPanel = GameCanvas.isFocusPanel2;
						if (isFocusPanel)
						{
							GameCanvas.isFocusPanel2 = false;
						}
						this.selected = this.lastSelect[this.currentTabIndex];
						this.lastTabIndex[this.type] = this.currentTabIndex;
					}
				}
				else
				{
					bool flag9 = this.selected > 0;
					if (flag9)
					{
						bool flag10 = GameCanvas.keyPressed[8];
						if (flag10)
						{
							bool flag11 = this.newSelected == 0;
							if (flag11)
							{
								this.sellectInventory++;
							}
							else
							{
								this.sellectInventory += 5;
							}
						}
						else
						{
							bool flag12 = GameCanvas.keyPressed[2];
							if (flag12)
							{
								bool flag13 = this.newSelected == 0;
								if (flag13)
								{
									this.sellectInventory--;
								}
								else
								{
									this.sellectInventory -= 5;
								}
							}
							else
							{
								bool flag14 = GameCanvas.keyPressed[4];
								if (flag14)
								{
									bool flag15 = this.newSelected == 0;
									if (flag15)
									{
										this.sellectInventory -= 5;
									}
									else
									{
										this.sellectInventory--;
									}
								}
								else
								{
									bool flag16 = GameCanvas.keyPressed[6];
									if (flag16)
									{
										bool flag17 = this.newSelected == 0;
										if (flag17)
										{
											this.sellectInventory += 5;
										}
										else
										{
											this.sellectInventory++;
										}
									}
								}
							}
						}
					}
				}
				bool flag18 = this.sellectInventory < 0;
				if (flag18)
				{
				}
				bool flag19 = this.sellectInventory == this.nTableItem;
				if (flag19)
				{
					this.sellectInventory = 0;
				}
			}
			else
			{
				bool flag20 = !this.IsTabOption();
				if (flag20)
				{
					bool flag21 = GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24];
					if (flag21)
					{
						bool flag22 = this.isTabInven();
						if (flag22)
						{
							bool flag23 = this.selected >= 0;
							if (flag23)
							{
								this.updateKeyInvenTab();
							}
							else
							{
								this.currentTabIndex++;
								bool flag24 = this.currentTabIndex >= this.currentTabName.Length;
								if (flag24)
								{
									bool flag25 = GameCanvas.panel2 != null;
									if (flag25)
									{
										this.currentTabIndex = this.currentTabName.Length - 1;
										GameCanvas.isFocusPanel2 = true;
									}
									else
									{
										this.currentTabIndex = 0;
									}
								}
								this.selected = this.lastSelect[this.currentTabIndex];
								this.lastTabIndex[this.type] = this.currentTabIndex;
							}
						}
						else
						{
							this.currentTabIndex++;
							bool flag26 = this.currentTabIndex >= this.currentTabName.Length;
							if (flag26)
							{
								bool flag27 = GameCanvas.panel2 != null;
								if (flag27)
								{
									this.currentTabIndex = this.currentTabName.Length - 1;
									GameCanvas.isFocusPanel2 = true;
								}
								else
								{
									this.currentTabIndex = 0;
								}
							}
							this.selected = this.lastSelect[this.currentTabIndex];
							this.lastTabIndex[this.type] = this.currentTabIndex;
						}
					}
					bool flag28 = GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23];
					if (flag28)
					{
						this.currentTabIndex--;
						bool flag29 = this.currentTabIndex < 0;
						if (flag29)
						{
							this.currentTabIndex = this.currentTabName.Length - 1;
						}
						bool isFocusPanel2 = GameCanvas.isFocusPanel2;
						if (isFocusPanel2)
						{
							GameCanvas.isFocusPanel2 = false;
						}
						this.selected = this.lastSelect[this.currentTabIndex];
						this.lastTabIndex[this.type] = this.currentTabIndex;
					}
				}
			}
			this.keyTouchTab = -1;
			for (int i = 0; i < this.currentTabName.Length; i++)
			{
				bool flag30 = !GameCanvas.isPointer(this.startTabPos + i * this.TAB_W, 52, this.TAB_W - 1, 25);
				if (!flag30)
				{
					this.keyTouchTab = i;
					bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
					if (isPointerJustRelease)
					{
						this.currentTabIndex = i;
						this.lastTabIndex[this.type] = i;
						GameCanvas.isPointerJustRelease = false;
						this.selected = this.lastSelect[this.currentTabIndex];
						bool flag31 = num == this.currentTabIndex && this.cmRun == 0;
						if (flag31)
						{
							this.cmtoY = 0;
							this.selected = (GameCanvas.isTouch ? -1 : 0);
						}
						break;
					}
				}
			}
			bool flag32 = num == this.currentTabIndex;
			if (!flag32)
			{
				this.size_tab = 0;
				SoundMn.gI().panelClick();
				int num2 = this.type;
				int num3 = num2;
				if (num3 <= 12)
				{
					switch (num3)
					{
					case 0:
					{
						bool flag33 = this.currentTabIndex == 0;
						if (flag33)
						{
							this.setTabTask();
						}
						bool flag34 = this.currentTabIndex == 1;
						if (flag34)
						{
							this.setTabInventory(true);
						}
						bool flag35 = this.currentTabIndex == 2;
						if (flag35)
						{
							this.setTabSkill();
						}
						bool flag36 = this.currentTabIndex == 3;
						if (flag36)
						{
							bool flag37 = this.mainTabName.Length > 4;
							if (flag37)
							{
								this.setTabClans();
							}
							else
							{
								this.setTabTool();
							}
						}
						bool flag38 = this.currentTabIndex == 4;
						if (flag38)
						{
							this.setTabTool();
						}
						break;
					}
					case 1:
						this.setTabShop();
						break;
					case 2:
					{
						bool flag39 = this.currentTabIndex == 0;
						if (flag39)
						{
							this.setTabBox();
						}
						bool flag40 = this.currentTabIndex == 1;
						if (flag40)
						{
							this.setTabInventory(true);
						}
						break;
					}
					case 3:
						this.setTabZone();
						break;
					default:
						if (num3 == 12)
						{
							bool flag41 = this.currentTabIndex == 0;
							if (flag41)
							{
								this.setTabCombine();
							}
							bool flag42 = this.currentTabIndex == 1;
							if (flag42)
							{
								this.setTabInventory(true);
							}
						}
						break;
					}
				}
				else if (num3 != 13)
				{
					if (num3 != 21)
					{
						if (num3 == 25)
						{
							this.setTabSpeacialSkill();
						}
					}
					else
					{
						bool flag43 = this.currentTabIndex == 0;
						if (flag43)
						{
							this.setTabPetInventory();
						}
						bool flag44 = this.currentTabIndex == 1;
						if (flag44)
						{
							this.setTabPetStatus();
						}
						bool flag45 = this.currentTabIndex == 2;
						if (flag45)
						{
							this.setTabInventory(true);
						}
					}
				}
				else
				{
					bool flag46 = this.currentTabIndex == 0;
					if (flag46)
					{
						bool flag47 = this.Equals(GameCanvas.panel);
						if (flag47)
						{
							this.setTabInventory(true);
						}
						else
						{
							bool flag48 = this.Equals(GameCanvas.panel2);
							if (flag48)
							{
								this.setTabGiaoDich(false);
							}
						}
					}
					bool flag49 = this.currentTabIndex == 1;
					if (flag49)
					{
						this.setTabGiaoDich(true);
					}
					bool flag50 = this.currentTabIndex == 2;
					if (flag50)
					{
						this.setTabGiaoDich(false);
					}
				}
				this.selected = this.lastSelect[this.currentTabIndex];
			}
		}
	}

	// Token: 0x0600086F RID: 2159 RVA: 0x00083E14 File Offset: 0x00082014
	private void setTabPetStatus()
	{
		this.currentListLength = this.strStatus.Length;
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
	}

	// Token: 0x06000870 RID: 2160 RVA: 0x00083EDD File Offset: 0x000820DD
	private void setTabPetSkill()
	{
	}

	// Token: 0x06000871 RID: 2161 RVA: 0x00083EE0 File Offset: 0x000820E0
	private void setTabTool()
	{
		SoundMn.gI().getSoundOption();
		this.currentListLength = Panel.strTool.Length;
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
	}

	// Token: 0x06000872 RID: 2162 RVA: 0x00083FB4 File Offset: 0x000821B4
	public void initTabClans()
	{
		bool flag = this.isSearchClan;
		if (flag)
		{
			this.currentListLength = ((this.clans != null) ? (this.clans.Length + 2) : 2);
			this.clanInfo = mResources.clan_list;
		}
		else
		{
			bool flag2 = this.isViewMember;
			if (flag2)
			{
				this.clanReport = string.Empty;
				this.currentListLength = ((this.member != null) ? this.member.size() : this.myMember.size()) + 2;
				this.clanInfo = mResources.member + " " + ((this.currClan == null) ? global::Char.myCharz().clan.name : this.currClan.name);
			}
			else
			{
				bool flag3 = this.isMessage;
				if (flag3)
				{
					this.currentListLength = ClanMessage.vMessage.size() + 2;
					this.clanInfo = mResources.msg;
					this.clanReport = string.Empty;
				}
			}
		}
		bool flag4 = global::Char.myCharz().clan == null;
		if (flag4)
		{
			this.clansOption = new string[][]
			{
				mResources.findClan,
				mResources.createClan
			};
		}
		else
		{
			bool flag5 = !this.isViewMember;
			if (flag5)
			{
				bool flag6 = this.myMember.size() > 1;
				if (flag6)
				{
					this.clansOption = new string[][]
					{
						mResources.chatClan,
						mResources.request_pea2,
						mResources.memberr
					};
				}
				else
				{
					this.clansOption = new string[][]
					{
						mResources.memberr
					};
				}
			}
			else
			{
				bool flag7 = global::Char.myCharz().role > 0;
				if (flag7)
				{
					this.clansOption = new string[][]
					{
						mResources.msgg,
						mResources.leaveClan
					};
				}
				else
				{
					bool flag8 = this.myMember.size() > 1;
					if (flag8)
					{
						this.clansOption = new string[][]
						{
							mResources.msgg,
							mResources.leaveClan,
							mResources.khau_hieuu,
							mResources.bieu_tuongg
						};
					}
					else
					{
						this.clansOption = new string[][]
						{
							mResources.msgg,
							mResources.khau_hieuu,
							mResources.bieu_tuongg
						};
					}
				}
			}
		}
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag9 = this.cmyLim < 0;
		if (flag9)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag10 = this.cmy < 0;
		if (flag10)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag11 = this.cmy > this.cmyLim;
		if (flag11)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
	}

	// Token: 0x06000873 RID: 2163 RVA: 0x00084280 File Offset: 0x00082480
	public void setTabClans()
	{
		GameScr.isNewClanMessage = false;
		this.ITEM_HEIGHT = 24;
		bool flag = this.lastSelect != null && this.lastSelect[3] == 0;
		if (flag)
		{
			this.lastSelect[3] = -1;
		}
		this.currentListLength = 2;
		bool flag2 = global::Char.myCharz().clan != null;
		if (flag2)
		{
			this.isMessage = true;
			this.isViewMember = false;
			this.isSearchClan = false;
		}
		else
		{
			this.isMessage = false;
			this.isViewMember = false;
			this.isSearchClan = true;
		}
		bool flag3 = global::Char.myCharz().clan != null;
		if (flag3)
		{
			this.currentListLength = ClanMessage.vMessage.size() + 2;
		}
		this.initTabClans();
		this.cSelected = -1;
		bool flag4 = this.chatTField == null;
		if (flag4)
		{
			this.chatTField = new ChatTextField();
			this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
			this.chatTField.initChatTextField();
			this.chatTField.parentScreen = GameCanvas.panel;
		}
		bool flag5 = global::Char.myCharz().clan == null;
		if (flag5)
		{
			this.clanReport = mResources.findingClan;
			Service.gI().searchClan(string.Empty);
		}
		this.selected = this.lastSelect[this.currentTabIndex];
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.selected = -1;
		}
	}

	// Token: 0x06000874 RID: 2164 RVA: 0x000843F4 File Offset: 0x000825F4
	public void initLogMessage()
	{
		this.currentListLength = this.logChat.size() + 1;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x06000875 RID: 2165 RVA: 0x000844B9 File Offset: 0x000826B9
	private void setTabMessage()
	{
		this.ITEM_HEIGHT = 24;
		this.initLogMessage();
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x06000876 RID: 2166 RVA: 0x000844DC File Offset: 0x000826DC
	public void setTabShop()
	{
		this.ITEM_HEIGHT = 24;
		bool flag = this.currentTabIndex == this.currentTabName.Length - 1 && GameCanvas.panel2 == null && this.typeShop != 2;
		if (flag)
		{
			this.currentListLength = this.checkCurrentListLength(global::Char.myCharz().arrItemBody.Length + global::Char.myCharz().arrItemBag.Length);
		}
		else
		{
			this.currentListLength = global::Char.myCharz().arrItemShop[this.currentTabIndex].Length;
		}
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag2 = this.cmyLim < 0;
		if (flag2)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag3 = this.cmy < 0;
		if (flag3)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag4 = this.cmy > this.cmyLim;
		if (flag4)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x06000877 RID: 2167 RVA: 0x0008460C File Offset: 0x0008280C
	private void setTabSkill()
	{
		this.ITEM_HEIGHT = 30;
		this.currentListLength = global::Char.myCharz().nClass.skillTemplates.Length + 6;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = this.cmyLim;
		}
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x06000878 RID: 2168 RVA: 0x000846D8 File Offset: 0x000828D8
	private void setTabMapTrans()
	{
		this.ITEM_HEIGHT = 24;
		this.currentListLength = this.mapNames.Length;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		this.cmy = (this.cmtoY = 0);
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x06000879 RID: 2169 RVA: 0x00084738 File Offset: 0x00082938
	private void setTabZone()
	{
		this.ITEM_HEIGHT = 24;
		this.currentListLength = GameScr.gI().zones.Length;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		this.cmy = (this.cmtoY = 0);
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x0600087A RID: 2170 RVA: 0x0008479C File Offset: 0x0008299C
	private void setTabBox()
	{
		this.currentListLength = this.checkCurrentListLength(global::Char.myCharz().arrItemBox.Length);
		this.ITEM_HEIGHT = 24;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 9;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x0600087B RID: 2171 RVA: 0x00084870 File Offset: 0x00082A70
	private void setTabPetInventory()
	{
		this.ITEM_HEIGHT = 30;
		Item[] arrItemBody = global::Char.myPetz().arrItemBody;
		Skill[] arrPetSkill = global::Char.myPetz().arrPetSkill;
		this.currentListLength = arrItemBody.Length + arrPetSkill.Length;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = 0);
		}
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x0600087C RID: 2172 RVA: 0x00084950 File Offset: 0x00082B50
	private void setTabInventory(bool resetSelect)
	{
		bool flag = this.isnewInventory;
		if (flag)
		{
			int num = global::Char.myCharz().arrItemBody.Length + global::Char.myCharz().arrItemBag.Length;
			this.currentListLength = this.checkCurrentListLength(num);
			this.currentListLength = 3;
			this.newSelected = 0;
			this.size_tab = (sbyte)(num / 20 + ((num % 20 > 0) ? 1 : 0));
			Res.outz("sizeTab = " + this.size_tab.ToString());
		}
		else
		{
			this.currentListLength = this.checkCurrentListLength(global::Char.myCharz().arrItemBody.Length + global::Char.myCharz().arrItemBag.Length);
			this.ITEM_HEIGHT = 24;
			this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
			this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
			bool flag2 = this.cmyLim < 0;
			if (flag2)
			{
				this.cmyLim = 0;
			}
			bool flag3 = this.cmy < 0;
			if (flag3)
			{
				this.cmy = (this.cmtoY = 0);
			}
			bool flag4 = this.cmy > this.cmyLim;
			if (flag4)
			{
				this.cmy = (this.cmtoY = 0);
			}
			if (resetSelect)
			{
				this.selected = (GameCanvas.isTouch ? -1 : 0);
			}
		}
	}

	// Token: 0x0600087D RID: 2173 RVA: 0x00084AB0 File Offset: 0x00082CB0
	private void setTabMap()
	{
		bool flag = !Panel.isPaintMap;
		if (!flag)
		{
			bool flag2 = TileMap.lastPlanetId != TileMap.planetID;
			if (flag2)
			{
				Res.outz("LOAD TAM HINH");
				Panel.imgMap = GameCanvas.loadImageRMS("/img/map" + TileMap.planetID.ToString() + ".png");
				TileMap.lastPlanetId = TileMap.planetID;
			}
			this.cmxMap = this.getXMap() - this.wScroll / 2;
			this.cmyMap = this.getYMap() + this.yScroll - (this.yScroll + this.hScroll / 2);
			this.pa1 = this.cmxMap;
			this.pa2 = this.cmyMap;
			this.cmxMapLim = 250 - this.wScroll;
			this.cmyMapLim = 220 - this.hScroll;
			bool flag3 = this.cmxMapLim < 0;
			if (flag3)
			{
				this.cmxMapLim = 0;
			}
			bool flag4 = this.cmyMapLim < 0;
			if (flag4)
			{
				this.cmyMapLim = 0;
			}
			for (int i = 0; i < Panel.mapId[(int)TileMap.planetID].Length; i++)
			{
				bool flag5 = TileMap.mapID == Panel.mapId[(int)TileMap.planetID][i];
				if (flag5)
				{
					this.xMove = Panel.mapX[(int)TileMap.planetID][i] + this.xScroll;
					this.yMove = Panel.mapY[(int)TileMap.planetID][i] + this.yScroll + 5;
					break;
				}
			}
			this.xMap = this.getXMap() + this.xScroll;
			this.yMap = this.getYMap() + this.yScroll;
			this.xMapTask = this.getXMapTask() + this.xScroll;
			this.yMapTask = this.getYMapTask() + this.yScroll;
			Resources.UnloadUnusedAssets();
			GC.Collect();
		}
	}

	// Token: 0x0600087E RID: 2174 RVA: 0x00084C8F File Offset: 0x00082E8F
	private void setTabTask()
	{
		this.cmyQuest = 0;
	}

	// Token: 0x0600087F RID: 2175 RVA: 0x00084C9C File Offset: 0x00082E9C
	public void moveCamera()
	{
		bool flag = this.timeShow > 0;
		if (flag)
		{
			this.timeShow--;
		}
		bool flag2 = this.justRelease && this.Equals(GameCanvas.panel) && this.typeShop == 2 && this.maxPageShop[this.currentTabIndex] > 1;
		if (flag2)
		{
			bool flag3 = this.cmy < -50;
			if (flag3)
			{
				InfoDlg.showWait();
				this.justRelease = false;
				bool flag4 = this.currPageShop[this.currentTabIndex] <= 0;
				if (flag4)
				{
					Service.gI().kigui(4, -1, (sbyte)this.currentTabIndex, this.maxPageShop[this.currentTabIndex] - 1, -1);
				}
				else
				{
					Service.gI().kigui(4, -1, (sbyte)this.currentTabIndex, this.currPageShop[this.currentTabIndex] - 1, -1);
				}
			}
			else
			{
				bool flag5 = this.cmy > this.cmyLim + 50;
				if (flag5)
				{
					this.justRelease = false;
					InfoDlg.showWait();
					bool flag6 = this.currPageShop[this.currentTabIndex] >= this.maxPageShop[this.currentTabIndex] - 1;
					if (flag6)
					{
						Service.gI().kigui(4, -1, (sbyte)this.currentTabIndex, 0, -1);
					}
					else
					{
						Service.gI().kigui(4, -1, (sbyte)this.currentTabIndex, this.currPageShop[this.currentTabIndex] + 1, -1);
					}
				}
			}
		}
		bool flag7 = this.cmx != this.cmtoX && !this.pointerIsDowning;
		if (flag7)
		{
			this.cmvx = this.cmtoX - this.cmx << 2;
			this.cmdx += this.cmvx;
			this.cmx += this.cmdx >> 3;
			this.cmdx &= 15;
		}
		bool flag8 = global::Math.abs(this.cmtoX - this.cmx) < 10;
		if (flag8)
		{
			this.cmx = this.cmtoX;
		}
		bool flag9 = this.isClose;
		if (flag9)
		{
			this.isClose = false;
			this.cmtoX = this.wScroll;
		}
		bool flag10 = this.cmtoX >= this.wScroll - 10 && this.cmx >= this.wScroll - 10 && this.position == 0;
		if (flag10)
		{
			this.isShow = false;
			this.cleanCombine();
			bool flag11 = this.isChangeZone;
			if (flag11)
			{
				this.isChangeZone = false;
				bool flag12 = global::Char.myCharz().cHP > 0L && global::Char.myCharz().statusMe != 14;
				if (flag12)
				{
					InfoDlg.showWait();
					bool flag13 = this.type == 3;
					if (flag13)
					{
						Service.gI().requestChangeZone(this.selected, -1);
					}
					else
					{
						bool flag14 = this.type == 14;
						if (flag14)
						{
							Pk9rXmap.SelectMapTrans(this.selected);
						}
					}
				}
			}
			bool flag15 = this.isSelectPlayerMenu;
			if (flag15)
			{
				this.isSelectPlayerMenu = false;
				int num = this.vPlayerMenu.size() - this.vPlayerMenu_id.size();
				bool flag16 = global::Char.myCharz().charFocus != null;
				if (flag16)
				{
					bool flag17 = this.selected - num < 0;
					if (flag17)
					{
						global::Char.myCharz().charFocus.menuSelect = this.selected;
					}
					else
					{
						global::Char.myCharz().charFocus.menuSelect = (int)short.Parse((string)this.vPlayerMenu_id.elementAt(this.selected - num));
					}
				}
				Command command = (Command)this.vPlayerMenu.elementAt(this.selected);
				command.performAction();
			}
			this.vPlayerMenu.removeAllElements();
			this.vPlayerMenu_id.removeAllElements();
			this.charMenu = null;
		}
		bool flag18 = this.cmRun != 0 && !this.pointerIsDowning;
		if (flag18)
		{
			this.cmtoY += this.cmRun / 100;
			bool flag19 = this.cmtoY < 0;
			if (flag19)
			{
				this.cmtoY = 0;
			}
			else
			{
				bool flag20 = this.cmtoY > this.cmyLim;
				if (flag20)
				{
					this.cmtoY = this.cmyLim;
				}
				else
				{
					this.cmy = this.cmtoY;
				}
			}
			this.cmRun = this.cmRun * 9 / 10;
			bool flag21 = this.cmRun < 100 && this.cmRun > -100;
			if (flag21)
			{
				this.cmRun = 0;
			}
		}
		bool flag22 = this.cmy != this.cmtoY && !this.pointerIsDowning;
		if (flag22)
		{
			this.cmvy = this.cmtoY - this.cmy << 2;
			this.cmdy += this.cmvy;
			this.cmy += this.cmdy >> 4;
			this.cmdy &= 15;
		}
		this.cmyLast[this.currentTabIndex] = this.cmy;
	}

	// Token: 0x06000880 RID: 2176 RVA: 0x000851B8 File Offset: 0x000833B8
	public void paintDetail(mGraphics g)
	{
		bool flag = this.cp == null || this.cp.says == null;
		if (!flag)
		{
			this.cp.paint(g);
			int num = this.cp.cx + 13;
			int num2 = this.cp.cy + 11;
			bool flag2 = this.type == 15;
			if (flag2)
			{
				num += 5;
				num2 += 26;
			}
			bool flag3 = this.type == 0 && this.currentTabIndex == 3;
			if (flag3)
			{
				bool flag4 = this.isSearchClan;
				if (flag4)
				{
					num -= 5;
				}
				else
				{
					bool flag5 = this.partID != null || this.charInfo != null;
					if (flag5)
					{
						num = this.cp.cx + 21;
						num2 = this.cp.cy + 40;
					}
				}
			}
			bool flag6 = this.partID != null;
			if (flag6)
			{
				Part part = GameScr.parts[this.partID[0]];
				Part part2 = GameScr.parts[this.partID[1]];
				Part part3 = GameScr.parts[this.partID[2]];
				SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, num + global::Char.CharInfo[0][0][1] + (int)part.pi[global::Char.CharInfo[0][0][0]].dx, num2 - global::Char.CharInfo[0][0][2] + (int)part.pi[global::Char.CharInfo[0][0][0]].dy, 0, 0);
				SmallImage.drawSmallImage(g, (int)part2.pi[global::Char.CharInfo[0][1][0]].id, num + global::Char.CharInfo[0][1][1] + (int)part2.pi[global::Char.CharInfo[0][1][0]].dx, num2 - global::Char.CharInfo[0][1][2] + (int)part2.pi[global::Char.CharInfo[0][1][0]].dy, 0, 0);
				SmallImage.drawSmallImage(g, (int)part3.pi[global::Char.CharInfo[0][2][0]].id, num + global::Char.CharInfo[0][2][1] + (int)part3.pi[global::Char.CharInfo[0][2][0]].dx, num2 - global::Char.CharInfo[0][2][2] + (int)part3.pi[global::Char.CharInfo[0][2][0]].dy, 0, 0);
			}
			else
			{
				bool flag7 = this.charInfo != null;
				if (flag7)
				{
					this.charInfo.paintCharBody(g, num + 5, num2 + 25, 1, 0, true);
				}
				else
				{
					bool flag8 = this.idIcon != -1;
					if (flag8)
					{
						SmallImage.drawSmallImage(g, this.idIcon, this.cp.cx + 8, this.cp.cy + 2, 0, mGraphics.TOP | mGraphics.LEFT);
					}
				}
			}
			bool flag9 = this.currItem != null && this.currItem.template.type != 5;
			if (flag9)
			{
				bool flag10 = this.currItem.compare > 0;
				if (flag10)
				{
					g.drawImage(Panel.imgUp, num - 7, num2 + 13, 3);
					mFont.tahoma_7b_green.drawString(g, Res.abs(this.currItem.compare).ToString() + string.Empty, num + 1, num2 + 8, 0);
				}
				else
				{
					bool flag11 = this.currItem.compare < 0 && this.currItem.compare != -1;
					if (flag11)
					{
						g.drawImage(Panel.imgDown, num - 7, num2 + 13, 3);
						mFont.tahoma_7b_red.drawString(g, Res.abs(this.currItem.compare).ToString() + string.Empty, num + 1, num2 + 8, 0);
					}
				}
			}
		}
	}

	// Token: 0x06000881 RID: 2177 RVA: 0x00085598 File Offset: 0x00083798
	public void paintTop(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		g.setColor(0);
		bool flag = this.currentListLength == 0;
		if (!flag)
		{
			int num = (this.cmy + this.hScroll) / 24 + 1;
			bool flag2 = num < this.hScroll / 24 + 1;
			if (flag2)
			{
				num = this.hScroll / 24 + 1;
			}
			bool flag3 = num > this.currentListLength;
			if (flag3)
			{
				num = this.currentListLength;
			}
			int num2 = this.cmy / 24;
			bool flag4 = num2 >= num;
			if (flag4)
			{
				num2 = num - 1;
			}
			bool flag5 = num2 < 0;
			if (flag5)
			{
				num2 = 0;
			}
			for (int i = num2; i < num; i++)
			{
				int num3 = this.xScroll;
				int num4 = this.yScroll + i * this.ITEM_HEIGHT;
				int num5 = 24;
				int h = this.ITEM_HEIGHT - 1;
				int num6 = this.xScroll + num5;
				int num7 = this.yScroll + i * this.ITEM_HEIGHT;
				int num8 = this.wScroll - num5;
				int num9 = this.ITEM_HEIGHT - 1;
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(num6, num7, num8, num9);
				g.setColor((i != this.selected) ? 9993045 : 9541120);
				g.fillRect(num3, num4, num5, h);
				TopInfo topInfo = (TopInfo)this.vTop.elementAt(i);
				bool flag6 = topInfo.headICON != -1;
				if (flag6)
				{
					SmallImage.drawSmallImage(g, topInfo.headICON, num3, num4, 0, 0);
				}
				else
				{
					Part part = GameScr.parts[topInfo.headID];
					SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, num3 + (int)part.pi[global::Char.CharInfo[0][0][0]].dx, num4 + num9 - 1, 0, mGraphics.BOTTOM | mGraphics.LEFT);
				}
				g.setClip(this.xScroll, this.yScroll + this.cmy, this.wScroll, this.hScroll);
				bool flag7 = topInfo.pId != global::Char.myCharz().charID;
				if (flag7)
				{
					mFont.tahoma_7b_green.drawString(g, topInfo.name, num6 + 5, num7, 0);
				}
				else
				{
					mFont.tahoma_7b_red.drawString(g, topInfo.name, num6 + 5, num7, 0);
				}
				mFont.tahoma_7_blue.drawString(g, topInfo.info, num6 + num8 - 5, num7 + 11, 1);
				mFont.tahoma_7_green2.drawString(g, mResources.rank + ": " + topInfo.rank.ToString() + string.Empty, num6 + 5, num7 + 11, 0);
			}
			this.paintScrollArrow(g);
		}
	}

	// Token: 0x06000882 RID: 2178 RVA: 0x000858AC File Offset: 0x00083AAC
	public void paint(mGraphics g)
	{
		g.translate(-g.getTranslateX(), -g.getTranslateY() + mGraphics.addYWhenOpenKeyBoard);
		g.translate(-this.cmx, 0);
		g.translate(this.X, this.Y);
		bool flag = GameCanvas.panel.combineSuccess != -1;
		if (flag)
		{
			bool flag2 = this.Equals(GameCanvas.panel);
			if (flag2)
			{
				this.paintCombineEff(g);
			}
		}
		else
		{
			GameCanvas.paintz.paintFrameSimple(this.X, this.Y, this.W, this.H, g);
			try
			{
				this.paintTopInfo(g);
			}
			catch (Exception)
			{
			}
			this.paintBottomMoneyInfo(g);
			this.paintTab(g);
			switch (this.type)
			{
			case 0:
			{
				bool flag3 = this.currentTabIndex == 0;
				if (flag3)
				{
					this.paintTask(g);
				}
				bool flag4 = this.currentTabIndex == 1;
				if (flag4)
				{
					this.paintInventory(g);
				}
				bool flag5 = this.currentTabIndex == 2;
				if (flag5)
				{
					this.paintSkill(g);
				}
				bool flag6 = this.currentTabIndex == 3;
				if (flag6)
				{
					bool flag7 = this.mainTabName.Length == 4;
					if (flag7)
					{
						this.paintTools(g);
					}
					else
					{
						this.paintClans(g);
					}
				}
				bool flag8 = this.currentTabIndex == 4;
				if (flag8)
				{
					this.paintTools(g);
				}
				break;
			}
			case 1:
				this.paintShop(g);
				break;
			case 2:
			{
				bool flag9 = this.currentTabIndex == 0;
				if (flag9)
				{
					this.paintBox(g);
				}
				bool flag10 = this.currentTabIndex == 1;
				if (flag10)
				{
					this.paintInventory(g);
				}
				break;
			}
			case 3:
				this.paintZone(g);
				break;
			case 4:
				this.paintMap(g);
				break;
			case 7:
				this.paintInventory(g);
				break;
			case 8:
				this.paintLogChat(g);
				break;
			case 9:
				this.paintArchivement(g);
				break;
			case 10:
				this.paintPlayerMenu(g);
				break;
			case 11:
				this.paintFriend(g);
				break;
			case 12:
			{
				bool flag11 = this.currentTabIndex == 0;
				if (flag11)
				{
					this.paintCombine(g);
				}
				bool flag12 = this.currentTabIndex == 1;
				if (flag12)
				{
					this.paintInventory(g);
				}
				break;
			}
			case 13:
			{
				bool flag13 = this.currentTabIndex == 0;
				if (flag13)
				{
					bool flag14 = this.Equals(GameCanvas.panel);
					if (flag14)
					{
						this.paintInventory(g);
					}
					else
					{
						this.paintGiaoDich(g, false);
					}
				}
				bool flag15 = this.currentTabIndex == 1;
				if (flag15)
				{
					this.paintGiaoDich(g, true);
				}
				bool flag16 = this.currentTabIndex == 2;
				if (flag16)
				{
					this.paintGiaoDich(g, false);
				}
				break;
			}
			case 14:
				this.paintMapTrans(g);
				break;
			case 15:
				this.paintTop(g);
				break;
			case 16:
				this.paintEnemy(g);
				break;
			case 17:
				this.paintShop(g);
				break;
			case 18:
				this.paintFlagChange(g);
				break;
			case 19:
				this.paintOption(g);
				break;
			case 20:
				this.paintAccount(g);
				break;
			case 21:
			{
				bool flag17 = this.currentTabIndex == 0;
				if (flag17)
				{
					this.paintPetInventory(g);
				}
				bool flag18 = this.currentTabIndex == 1;
				if (flag18)
				{
					this.paintPetStatus(g);
				}
				bool flag19 = this.currentTabIndex == 2;
				if (flag19)
				{
					this.paintInventory(g);
				}
				break;
			}
			case 22:
				this.paintAuto(g);
				break;
			case 23:
				this.paintGameInfo(g);
				break;
			case 24:
				this.paintGameSubInfo(g);
				break;
			case 25:
				this.paintSpeacialSkill(g);
				break;
			}
			GameScr.resetTranslate(g);
			this.paintDetail(g);
			bool flag20 = this.cmx == this.cmtoX && !GameCanvas.menu.showMenu;
			if (flag20)
			{
				this.cmdClose.paint(g);
			}
			bool flag21 = this.tabIcon != null && this.tabIcon.isShow;
			if (flag21)
			{
				this.tabIcon.paint(g);
			}
			g.translate(-g.getTranslateX(), -g.getTranslateY());
			g.translate(this.X, this.Y);
			g.translate(-this.cmx, 0);
		}
	}

	// Token: 0x06000883 RID: 2179 RVA: 0x00085D58 File Offset: 0x00083F58
	private void paintShop(mGraphics g)
	{
		try
		{
			bool flag = this.type == 1 && this.currentTabIndex == this.currentTabName.Length - 1 && GameCanvas.panel2 == null && this.typeShop != 2;
			if (flag)
			{
				this.paintInventory(g);
			}
			else
			{
				g.setColor(16711680);
				g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
				bool flag2 = this.typeShop == 2 && this.Equals(GameCanvas.panel);
				if (flag2)
				{
					bool flag3 = this.currentTabIndex <= 3 && GameCanvas.isTouch;
					if (flag3)
					{
						bool flag4 = this.cmy < -50;
						if (flag4)
						{
							GameCanvas.paintShukiren(this.xScroll + this.wScroll / 2, this.yScroll + 30, g);
						}
						else
						{
							bool flag5 = this.cmy < 0;
							if (flag5)
							{
								mFont.tahoma_7_grey.drawString(g, mResources.getDown, this.xScroll + this.wScroll / 2, this.yScroll + 15, 2);
							}
							else
							{
								bool flag6 = this.cmyLim >= 0;
								if (flag6)
								{
									bool flag7 = this.cmy > this.cmyLim + 50;
									if (flag7)
									{
										GameCanvas.paintShukiren(this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll - 30, g);
									}
									else
									{
										bool flag8 = this.cmy > this.cmyLim;
										if (flag8)
										{
											mFont.tahoma_7_grey.drawString(g, mResources.getUp, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll - 25, 2);
										}
									}
								}
							}
						}
					}
					bool flag9 = global::Char.myCharz().arrItemShop[this.currentTabIndex].Length == 0 && this.type != 17;
					if (flag9)
					{
						mFont.tahoma_7_grey.drawString(g, mResources.notYetSell, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll / 2 - 10, 2);
						return;
					}
				}
				g.translate(0, -this.cmy);
				Item[] array = global::Char.myCharz().arrItemShop[this.currentTabIndex];
				bool flag10 = this.typeShop == 2 && (this.currentTabIndex == 4 || this.type == 17);
				if (flag10)
				{
					array = global::Char.myCharz().arrItemShop[4];
					bool flag11 = array.Length == 0;
					if (flag11)
					{
						mFont.tahoma_7_grey.drawString(g, mResources.notYetSell, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll / 2 - 10, 2);
						return;
					}
				}
				int num = array.Length;
				for (int i = 0; i < num; i++)
				{
					int num2 = this.xScroll + 26;
					int num3 = this.yScroll + i * this.ITEM_HEIGHT;
					int num4 = this.wScroll - 26;
					int h = this.ITEM_HEIGHT - 1;
					int num5 = this.xScroll;
					int num6 = this.yScroll + i * this.ITEM_HEIGHT;
					int num7 = 24;
					int num8 = this.ITEM_HEIGHT - 1;
					bool flag12 = num3 - this.cmy > this.yScroll + this.hScroll || num3 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
					if (!flag12)
					{
						g.setColor((i != this.selected) ? 15196114 : 16383818);
						g.fillRect(num2, num3, num4, h);
						g.setColor((i != this.selected) ? 9993045 : 9541120);
						g.fillRect(num5, num6, num7, num8);
						Item item = array[i];
						bool flag13 = item != null;
						if (flag13)
						{
							string str = string.Empty;
							mFont mFont = mFont.tahoma_7_green2;
							bool flag14 = item.isMe != 0 && this.typeShop == 2 && this.currentTabIndex <= 3 && !this.Equals(GameCanvas.panel2) && item.template.name.Length < 20;
							if (flag14)
							{
								mFont = mFont.tahoma_7b_green;
							}
							bool flag15 = item.itemOption != null;
							if (flag15)
							{
								for (int j = 0; j < item.itemOption.Length; j++)
								{
									bool flag16 = item.itemOption[j].optionTemplate.id == 72;
									if (flag16)
									{
										str = " [+" + item.itemOption[j].param.ToString() + "]";
									}
									bool flag17 = item.itemOption[j].optionTemplate.id == 41;
									if (flag17)
									{
										bool flag18 = item.itemOption[j].param == 1;
										if (flag18)
										{
											mFont = Panel.GetFont(0);
										}
										else
										{
											bool flag19 = item.itemOption[j].param == 2;
											if (flag19)
											{
												mFont = Panel.GetFont(2);
											}
											else
											{
												bool flag20 = item.itemOption[j].param == 3;
												if (flag20)
												{
													mFont = Panel.GetFont(8);
												}
												else
												{
													bool flag21 = item.itemOption[j].param == 4;
													if (flag21)
													{
														mFont = Panel.GetFont(7);
													}
												}
											}
										}
									}
								}
							}
							mFont.drawString(g, item.template.name + str, num2 + 5, num3 + 1, 0);
							string text = string.Empty;
							bool flag22 = item.itemOption != null && item.itemOption.Length >= 1;
							if (flag22)
							{
								bool flag23 = item.itemOption[0] != null && item.itemOption[0].optionTemplate.id != 102 && item.itemOption[0].optionTemplate.id != 107;
								if (flag23)
								{
									text += item.itemOption[0].getOptionString();
								}
								mFont mFont2 = mFont.tahoma_7_blue;
								bool flag24 = item.compare < 0 && item.template.type != 5;
								if (flag24)
								{
									mFont2 = mFont.tahoma_7_red;
								}
								bool flag25 = this.typeShop == 2 && item.itemOption.Length > 1 && item.buyType != -1;
								if (flag25)
								{
									text += string.Empty;
								}
								bool flag26 = this.typeShop != 2 || (this.typeShop == 2 && item.buyType <= 1);
								if (flag26)
								{
									mFont2.drawString(g, text, num2 + 5, num3 + 11, 0);
								}
							}
							bool flag27 = item.buySpec > 0;
							if (flag27)
							{
								SmallImage.drawSmallImage(g, (int)item.iconSpec, num2 + num4 - 7, num3 + 9, 0, 3);
								mFont.tahoma_7b_blue.drawString(g, Res.formatNumber((long)item.buySpec), num2 + num4 - 15, num3 + 1, mFont.RIGHT);
							}
							bool flag28 = item.buyCoin != 0 || item.buyGold != 0;
							if (flag28)
							{
								bool flag29 = this.typeShop != 2 && item.powerRequire == 0L;
								if (flag29)
								{
									bool flag30 = item.buyCoin > 0 && item.buyGold > 0;
									if (flag30)
									{
										bool flag31 = item.buyCoin > 0;
										if (flag31)
										{
											g.drawImage(Panel.imgXu, num2 + num4 - 7, num3 + 7, 3);
											mFont.tahoma_7b_yellow.drawString(g, Res.formatNumber((long)item.buyCoin), num2 + num4 - 15, num3 + 1, mFont.RIGHT);
										}
										bool flag32 = item.buyGold > 0;
										if (flag32)
										{
											g.drawImage(Panel.imgLuong, num2 + num4 - 7, num3 + 7 + 11, 3);
											mFont.tahoma_7b_green.drawString(g, Res.formatNumber((long)item.buyGold), num2 + num4 - 15, num3 + 12, mFont.RIGHT);
										}
									}
									else
									{
										bool flag33 = item.buyCoin > 0;
										if (flag33)
										{
											g.drawImage(Panel.imgXu, num2 + num4 - 7, num3 + 7, 3);
											mFont.tahoma_7b_yellow.drawString(g, Res.formatNumber((long)item.buyCoin), num2 + num4 - 15, num3 + 1, mFont.RIGHT);
										}
										bool flag34 = item.buyGold > 0;
										if (flag34)
										{
											g.drawImage(Panel.imgLuong, num2 + num4 - 7, num3 + 7, 3);
											mFont.tahoma_7b_green.drawString(g, Res.formatNumber((long)item.buyGold), num2 + num4 - 15, num3 + 1, mFont.RIGHT);
										}
									}
								}
								bool flag35 = this.typeShop == 2 && this.currentTabIndex <= 3 && !this.Equals(GameCanvas.panel2);
								if (flag35)
								{
									bool flag36 = item.buyCoin > 0 && item.buyGold > 0;
									if (flag36)
									{
										bool flag37 = item.buyCoin > 0;
										if (flag37)
										{
											g.drawImage(Panel.imgXu, num2 + num4 - 7, num3 + 7, 3);
											mFont = ((global::Char.myCharz().xu >= (long)item.buyCoin) ? mFont.tahoma_7b_yellow : mFont.tahoma_7b_red);
											mFont.drawString(g, Res.formatNumber2((long)item.buyCoin), num2 + num4 - 15, num3 + 1, mFont.RIGHT);
										}
										bool flag38 = item.buyGold > 0;
										if (flag38)
										{
											g.drawImage(Panel.imgLuong, num2 + num4 - 7, num3 + 7 + 11, 3);
											mFont = ((global::Char.myCharz().luong >= item.buyGold) ? mFont.tahoma_7b_green : mFont.tahoma_7b_red);
											mFont.drawString(g, Res.formatNumber2((long)item.buyGold), num2 + num4 - 15, num3 + 12, mFont.RIGHT);
										}
									}
									else
									{
										bool flag39 = item.buyCoin > 0;
										if (flag39)
										{
											g.drawImage(Panel.imgXu, num2 + num4 - 7, num3 + 7, 3);
											mFont = ((global::Char.myCharz().xu >= (long)item.buyCoin) ? mFont.tahoma_7b_yellow : mFont.tahoma_7b_red);
											mFont.drawString(g, Res.formatNumber2((long)item.buyCoin), num2 + num4 - 15, num3 + 1, mFont.RIGHT);
										}
										bool flag40 = item.buyGold > 0;
										if (flag40)
										{
											g.drawImage(Panel.imgLuong, num2 + num4 - 7, num3 + 7, 3);
											mFont = ((global::Char.myCharz().luong >= item.buyGold) ? mFont.tahoma_7b_green : mFont.tahoma_7b_red);
											mFont.drawString(g, Res.formatNumber2((long)item.buyGold), num2 + num4 - 15, num3 + 1, mFont.RIGHT);
										}
										try
										{
											mFont = mFont.tahoma_7b_green;
											bool flag41 = !global::Char.myCharz().cName.Equals(item.nameNguoiKyGui);
											if (flag41)
											{
												mFont = mFont.tahoma_7b_green;
											}
											mFont.drawString(g, item.nameNguoiKyGui, num2 + num4, num3 + 1 + mFont.tahoma_7b_red.getHeight(), mFont.RIGHT);
										}
										catch (Exception)
										{
										}
									}
								}
							}
							SmallImage.drawSmallImage(g, (int)item.template.iconID, num5 + num7 / 2, num6 + num8 / 2, 0, 3);
							bool flag42 = item.quantity > 1;
							if (flag42)
							{
								mFont.tahoma_7_yellow.drawString(g, string.Empty + item.quantity.ToString(), num5 + num7, num6 + num8 - mFont.tahoma_7_yellow.getHeight(), 1);
							}
							bool flag43 = item.newItem && GameCanvas.gameTick % 10 > 5;
							if (flag43)
							{
								g.drawImage(Panel.imgNew, num5 + num7 / 2, num3 + 19, 3);
							}
						}
						bool flag44 = this.typeShop != 2 || (!this.Equals(GameCanvas.panel2) && this.currentTabIndex != 4) || item.buyType == 0;
						if (!flag44)
						{
							bool flag45 = item.buyType == 1;
							if (flag45)
							{
								mFont.tahoma_7_green.drawString(g, mResources.dangban, num2 + num4 - 5, num3 + 1, mFont.RIGHT);
								bool flag46 = item.buyCoin != -1;
								if (flag46)
								{
									g.drawImage(Panel.imgXu, num2 + num4 - 7, num3 + 19, 3);
									mFont.tahoma_7b_yellow.drawString(g, Res.formatNumber2((long)item.buyCoin), num2 + num4 - 15, num3 + 13, mFont.RIGHT);
								}
								else
								{
									bool flag47 = item.buyGold != -1;
									if (flag47)
									{
										g.drawImage(Panel.imgLuongKhoa, num2 + num4 - 7, num3 + 17, 3);
										mFont.tahoma_7b_red.drawString(g, Res.formatNumber2((long)item.buyGold), num2 + num4 - 15, num3 + 11, mFont.RIGHT);
									}
								}
							}
							else
							{
								bool flag48 = item.buyType == 2;
								if (flag48)
								{
									mFont.tahoma_7b_blue.drawString(g, mResources.daban, num2 + num4 - 5, num3 + 1, mFont.RIGHT);
									bool flag49 = item.buyCoin != -1;
									if (flag49)
									{
										g.drawImage(Panel.imgXu, num2 + num4 - 7, num3 + 17, 3);
										mFont.tahoma_7b_yellow.drawString(g, Res.formatNumber2((long)item.buyCoin), num2 + num4 - 15, num3 + 11, mFont.RIGHT);
									}
									else
									{
										bool flag50 = item.buyGold != -1;
										if (flag50)
										{
											g.drawImage(Panel.imgLuongKhoa, num2 + num4 - 7, num3 + 17, 3);
											mFont.tahoma_7b_red.drawString(g, Res.formatNumber2((long)item.buyGold), num2 + num4 - 15, num3 + 11, mFont.RIGHT);
										}
									}
								}
							}
						}
					}
				}
				this.paintScrollArrow(g);
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000884 RID: 2180 RVA: 0x00086BD8 File Offset: 0x00084DD8
	private void paintAuto(mGraphics g)
	{
	}

	// Token: 0x06000885 RID: 2181 RVA: 0x00086BDC File Offset: 0x00084DDC
	private void paintPetStatus(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		for (int i = 0; i < this.strStatus.Length; i++)
		{
			int x = this.xScroll;
			int num = this.yScroll + i * this.ITEM_HEIGHT;
			int num2 = this.wScroll - 1;
			int h = this.ITEM_HEIGHT - 1;
			bool flag = num - this.cmy <= this.yScroll + this.hScroll && num - this.cmy >= this.yScroll - this.ITEM_HEIGHT;
			if (flag)
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(x, num, num2, h);
				mFont.tahoma_7b_dark.drawString(g, this.strStatus[i], this.xScroll + this.wScroll / 2, num + 6, mFont.CENTER);
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x06000886 RID: 2182 RVA: 0x00086CFA File Offset: 0x00084EFA
	private void paintPetSkill()
	{
	}

	// Token: 0x06000887 RID: 2183 RVA: 0x00086D00 File Offset: 0x00084F00
	private void paintPetInventory(mGraphics g)
	{
		g.setColor(16711680);
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		Item[] arrItemBody = global::Char.myPetz().arrItemBody;
		Skill[] arrPetSkill = global::Char.myPetz().arrPetSkill;
		for (int i = 0; i < arrItemBody.Length + arrPetSkill.Length; i++)
		{
			bool flag = i < arrItemBody.Length;
			int num = i;
			int num2 = i - arrItemBody.Length;
			int num3 = this.xScroll + 36;
			int num4 = this.yScroll + i * this.ITEM_HEIGHT;
			int num5 = this.wScroll - 36;
			int h = this.ITEM_HEIGHT - 1;
			int num6 = this.xScroll;
			int num7 = this.yScroll + i * this.ITEM_HEIGHT;
			int num8 = 34;
			int num9 = this.ITEM_HEIGHT - 1;
			bool flag2 = num4 - this.cmy > this.yScroll + this.hScroll || num4 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
			if (!flag2)
			{
				Item item = (!flag) ? null : arrItemBody[num];
				g.setColor((i == this.selected) ? 16383818 : ((!flag) ? 15723751 : 15196114));
				g.fillRect(num3, num4, num5, h);
				g.setColor((i == this.selected) ? 9541120 : ((!flag) ? 11837316 : 9993045));
				bool flag3 = item != null;
				if (flag3)
				{
					for (int j = 0; j < item.itemOption.Length; j++)
					{
						bool flag4 = item.itemOption[j].optionTemplate.id == 72 && item.itemOption[j].param > 0;
						if (flag4)
						{
							sbyte color_Item_Upgrade = Panel.GetColor_Item_Upgrade(item.itemOption[j].param);
							int color_ItemBg = Panel.GetColor_ItemBg((int)color_Item_Upgrade);
							bool flag5 = color_ItemBg != -1;
							if (flag5)
							{
								g.setColor((i != this.selected) ? Panel.GetColor_ItemBg((int)color_Item_Upgrade) : Panel.GetColor_ItemBg((int)color_Item_Upgrade));
							}
						}
					}
				}
				g.fillRect(num6, num7, num8, num9);
				bool flag6 = item != null && item.isSelect && GameCanvas.panel.type == 12;
				if (flag6)
				{
					g.setColor((i != this.selected) ? 6047789 : 7040779);
					g.fillRect(num6, num7, num8, num9);
				}
				bool flag7 = item != null;
				if (flag7)
				{
					string str = string.Empty;
					mFont mFont = mFont.tahoma_7_green2;
					bool flag8 = item.itemOption != null;
					if (flag8)
					{
						for (int k = 0; k < item.itemOption.Length; k++)
						{
							bool flag9 = item.itemOption[k].optionTemplate.id == 72;
							if (flag9)
							{
								str = " [+" + item.itemOption[k].param.ToString() + "]";
							}
							bool flag10 = item.itemOption[k].optionTemplate.id == 41;
							if (flag10)
							{
								bool flag11 = item.itemOption[k].param == 1;
								if (flag11)
								{
									mFont = Panel.GetFont(0);
								}
								else
								{
									bool flag12 = item.itemOption[k].param == 2;
									if (flag12)
									{
										mFont = Panel.GetFont(2);
									}
									else
									{
										bool flag13 = item.itemOption[k].param == 3;
										if (flag13)
										{
											mFont = Panel.GetFont(8);
										}
										else
										{
											bool flag14 = item.itemOption[k].param == 4;
											if (flag14)
											{
												mFont = Panel.GetFont(7);
											}
										}
									}
								}
							}
						}
					}
					mFont.drawString(g, item.template.name + str, num3 + 5, num4 + 1, 0);
					string text = string.Empty;
					bool flag15 = item.itemOption != null;
					if (flag15)
					{
						bool flag16 = item.itemOption.Length != 0 && item.itemOption[0] != null && item.itemOption[0].optionTemplate.id != 102 && item.itemOption[0].optionTemplate.id != 107;
						if (flag16)
						{
							text += item.itemOption[0].getOptionString();
						}
						mFont mFont2 = mFont.tahoma_7_blue;
						bool flag17 = item.compare < 0 && item.template.type != 5;
						if (flag17)
						{
							mFont2 = mFont.tahoma_7_red;
						}
						bool flag18 = item.itemOption.Length > 1;
						if (flag18)
						{
							for (int l = 1; l < 2; l++)
							{
								bool flag19 = item.itemOption[l] != null && item.itemOption[l].optionTemplate.id != 102 && item.itemOption[l].optionTemplate.id != 107;
								if (flag19)
								{
									text = text + "," + item.itemOption[l].getOptionString();
								}
							}
						}
						mFont2.drawString(g, text, num3 + 5, num4 + 11, mFont.LEFT);
					}
					SmallImage.drawSmallImage(g, (int)item.template.iconID, num6 + num8 / 2, num7 + num9 / 2, 0, 3);
					bool flag20 = item.itemOption != null;
					if (flag20)
					{
						for (int m = 0; m < item.itemOption.Length; m++)
						{
							this.paintOptItem(g, item.itemOption[m].optionTemplate.id, item.itemOption[m].param, num6, num7, num8, num9);
						}
						for (int n = 0; n < item.itemOption.Length; n++)
						{
							this.paintOptSlotItem(g, item.itemOption[n].optionTemplate.id, item.itemOption[n].param, num6, num7, num8, num9);
						}
					}
					bool flag21 = item.quantity > 1;
					if (flag21)
					{
						mFont.tahoma_7_yellow.drawString(g, string.Empty + item.quantity.ToString(), num6 + num8, num7 + num9 - mFont.tahoma_7_yellow.getHeight(), 1);
					}
				}
				else
				{
					bool flag22 = !flag;
					if (flag22)
					{
						Skill skill = arrPetSkill[num2];
						g.drawImage(GameScr.imgSkill, num6 + num8 / 2, num7 + num9 / 2, 3);
						bool flag23 = skill.template != null;
						if (flag23)
						{
							mFont.tahoma_7_blue.drawString(g, skill.template.name, num3 + 5, num4 + 1, 0);
							mFont.tahoma_7_green2.drawString(g, mResources.level + ": " + skill.point.ToString() + string.Empty, num3 + 5, num4 + 11, 0);
							SmallImage.drawSmallImage(g, skill.template.iconId, num6 + num8 / 2, num7 + num9 / 2, 0, 3);
						}
						else
						{
							mFont.tahoma_7_green2.drawString(g, skill.moreInfo, num3 + 5, num4 + 5, 0);
							SmallImage.drawSmallImage(g, GameScr.efs[98].arrEfInfo[0].idImg, num6 + num8 / 2, num7 + num9 / 2, 0, 3);
						}
					}
				}
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x06000888 RID: 2184 RVA: 0x000874C0 File Offset: 0x000856C0
	private void paintScrollArrow(mGraphics g)
	{
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		bool flag = (this.cmy > 24 && this.currentListLength > 0) || (this.Equals(GameCanvas.panel) && this.typeShop == 2 && this.maxPageShop[this.currentTabIndex] > 1);
		if (flag)
		{
			g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 1, this.xScroll + this.wScroll - 12, this.yScroll + 3, 0);
		}
		bool flag2 = (this.cmy < this.cmyLim && this.currentListLength > 0) || (this.Equals(GameCanvas.panel) && this.typeShop == 2 && this.maxPageShop[this.currentTabIndex] > 1);
		if (flag2)
		{
			g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 0, this.xScroll + this.wScroll - 12, this.yScroll + this.hScroll - 8, 0);
		}
	}

	// Token: 0x06000889 RID: 2185 RVA: 0x000875D0 File Offset: 0x000857D0
	private void paintTools(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		for (int i = 0; i < Panel.strTool.Length; i++)
		{
			int num = this.xScroll;
			int num2 = this.yScroll + i * this.ITEM_HEIGHT;
			int num3 = this.wScroll - 1;
			int h = this.ITEM_HEIGHT - 1;
			bool flag = num2 - this.cmy > this.yScroll + this.hScroll || num2 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
			if (!flag)
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(num, num2, num3, h);
				mFont.tahoma_7b_dark.drawString(g, Panel.strTool[i], this.xScroll + this.wScroll / 2, num2 + 6, mFont.CENTER);
				bool flag2 = !Panel.strTool[i].Equals(mResources.gameInfo);
				if (!flag2)
				{
					for (int j = 0; j < Panel.vGameInfo.size(); j++)
					{
						GameInfo gameInfo = (GameInfo)Panel.vGameInfo.elementAt(j);
						bool flag3 = !gameInfo.hasRead;
						if (flag3)
						{
							bool flag4 = GameCanvas.gameTick % 20 > 10;
							if (flag4)
							{
								g.drawImage(Panel.imgNew, num + 10, num2 + 10, 3);
							}
							break;
						}
					}
				}
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x0600088A RID: 2186 RVA: 0x0008777C File Offset: 0x0008597C
	private void paintGameSubInfo(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		for (int i = 0; i < Panel.contenInfo.Length; i++)
		{
			int num = this.xScroll;
			int num2 = this.yScroll + i * 15;
			int num3 = this.wScroll - 1;
			int num4 = this.ITEM_HEIGHT - 1;
			bool flag = num2 - this.cmy <= this.yScroll + this.hScroll && num2 - this.cmy >= this.yScroll - this.ITEM_HEIGHT;
			if (flag)
			{
				mFont.tahoma_7b_dark.drawString(g, Panel.contenInfo[i], this.xScroll + 5, num2 + 6, mFont.LEFT);
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x0600088B RID: 2187 RVA: 0x00087868 File Offset: 0x00085A68
	private void paintGameInfo(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		for (int i = 0; i < Panel.vGameInfo.size(); i++)
		{
			GameInfo gameInfo = (GameInfo)Panel.vGameInfo.elementAt(i);
			int num = this.xScroll;
			int num2 = this.yScroll + i * this.ITEM_HEIGHT;
			int num3 = this.wScroll - 1;
			int h = this.ITEM_HEIGHT - 1;
			bool flag = num2 - this.cmy <= this.yScroll + this.hScroll && num2 - this.cmy >= this.yScroll - this.ITEM_HEIGHT;
			if (flag)
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(num, num2, num3, h);
				mFont.tahoma_7b_dark.drawString(g, gameInfo.main, this.xScroll + this.wScroll / 2, num2 + 6, mFont.CENTER);
				bool flag2 = !gameInfo.hasRead && GameCanvas.gameTick % 20 > 10;
				if (flag2)
				{
					g.drawImage(Panel.imgNew, num + 10, num2 + 10, 3);
				}
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x0600088C RID: 2188 RVA: 0x000879D0 File Offset: 0x00085BD0
	private void paintSkill(mGraphics g)
	{
		g.setColor(16711680);
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		int num = global::Char.myCharz().nClass.skillTemplates.Length;
		for (int i = 0; i < num + 6; i++)
		{
			int num2 = this.xScroll + 30;
			int num3 = this.yScroll + i * this.ITEM_HEIGHT;
			int num4 = this.wScroll - 30;
			int h = this.ITEM_HEIGHT - 1;
			int num5 = this.xScroll;
			int num6 = this.yScroll + i * this.ITEM_HEIGHT;
			int num7 = this.ITEM_HEIGHT - 1;
			bool flag = num3 - this.cmy > this.yScroll + this.hScroll || num3 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
			if (!flag)
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				bool flag2 = i == 5;
				if (flag2)
				{
					g.setColor((i != this.selected) ? 16765060 : 16776068);
				}
				g.fillRect(num2, num3, num4, h);
				g.drawImage(GameScr.imgSkill, num5, num6, 0);
				bool flag3 = i == 0;
				if (flag3)
				{
					SmallImage.drawSmallImage(g, 567, num5 + 4, num6 + 4, 0, 0);
					string st = string.Concat(new string[]
					{
						mResources.HP,
						" ",
						mResources.root,
						": ",
						NinjaUtil.getMoneys((long)global::Char.myCharz().cHPGoc)
					});
					mFont.tahoma_7b_blue.drawString(g, st, num2 + 5, num3 + 3, 0);
					mFont.tahoma_7_green2.drawString(g, string.Concat(new string[]
					{
						NinjaUtil.getMoneys((long)(global::Char.myCharz().cHPGoc + 1000)),
						" ",
						mResources.potential,
						": ",
						mResources.increase,
						" ",
						global::Char.myCharz().hpFrom1000TiemNang.ToString()
					}), num2 + 5, num3 + 15, 0);
				}
				bool flag4 = i == 1;
				if (flag4)
				{
					SmallImage.drawSmallImage(g, 569, num5 + 4, num6 + 4, 0, 0);
					string st2 = string.Concat(new string[]
					{
						mResources.KI,
						" ",
						mResources.root,
						": ",
						NinjaUtil.getMoneys((long)global::Char.myCharz().cMPGoc)
					});
					mFont.tahoma_7b_blue.drawString(g, st2, num2 + 5, num3 + 3, 0);
					mFont.tahoma_7_green2.drawString(g, string.Concat(new string[]
					{
						NinjaUtil.getMoneys((long)(global::Char.myCharz().cMPGoc + 1000)),
						" ",
						mResources.potential,
						": ",
						mResources.increase,
						" ",
						global::Char.myCharz().mpFrom1000TiemNang.ToString()
					}), num2 + 5, num3 + 15, 0);
				}
				bool flag5 = i == 2;
				if (flag5)
				{
					SmallImage.drawSmallImage(g, 568, num5 + 4, num6 + 4, 0, 0);
					string st3 = string.Concat(new string[]
					{
						mResources.hit_point,
						" ",
						mResources.root,
						": ",
						NinjaUtil.getMoneys((long)global::Char.myCharz().cDamGoc)
					});
					mFont.tahoma_7b_blue.drawString(g, st3, num2 + 5, num3 + 3, 0);
					mFont.tahoma_7_green2.drawString(g, string.Concat(new string[]
					{
						NinjaUtil.getMoneys((long)(global::Char.myCharz().cDamGoc * 100)),
						" ",
						mResources.potential,
						": ",
						mResources.increase,
						" ",
						global::Char.myCharz().damFrom1000TiemNang.ToString()
					}), num2 + 5, num3 + 15, 0);
				}
				bool flag6 = i == 3;
				if (flag6)
				{
					SmallImage.drawSmallImage(g, 721, num5 + 4, num6 + 4, 0, 0);
					string st4 = string.Concat(new string[]
					{
						mResources.armor,
						" ",
						mResources.root,
						": ",
						NinjaUtil.getMoneys((long)global::Char.myCharz().cDefGoc)
					});
					mFont.tahoma_7b_blue.drawString(g, st4, num2 + 5, num3 + 3, 0);
					mFont.tahoma_7_green2.drawString(g, string.Concat(new string[]
					{
						NinjaUtil.getMoneys((long)(500000 + global::Char.myCharz().cDefGoc * 100000)),
						" ",
						mResources.potential,
						": ",
						mResources.increase,
						" ",
						global::Char.myCharz().defFrom1000TiemNang.ToString()
					}), num2 + 5, num3 + 15, 0);
				}
				bool flag7 = i == 4;
				if (flag7)
				{
					SmallImage.drawSmallImage(g, 719, num5 + 4, num6 + 4, 0, 0);
					string st5 = string.Concat(new string[]
					{
						mResources.critical,
						" ",
						mResources.root,
						": ",
						global::Char.myCharz().cCriticalGoc.ToString(),
						"%"
					});
					int num8 = global::Char.myCharz().cCriticalGoc;
					bool flag8 = num8 > Panel.t_tiemnang.Length - 1;
					if (flag8)
					{
						num8 = Panel.t_tiemnang.Length - 1;
					}
					long num9 = Panel.t_tiemnang[num8];
					mFont.tahoma_7b_blue.drawString(g, st5, num2 + 5, num3 + 3, 0);
					long number = num9;
					mFont.tahoma_7_green2.drawString(g, string.Concat(new string[]
					{
						Res.formatNumber2(number),
						" ",
						mResources.potential,
						": ",
						mResources.increase,
						" ",
						global::Char.myCharz().criticalFrom1000Tiemnang.ToString()
					}), num2 + 5, num3 + 15, 0);
				}
				bool flag9 = i == 5;
				if (flag9)
				{
					bool flag10 = Panel.specialInfo != null;
					if (flag10)
					{
						SmallImage.drawSmallImage(g, (int)Panel.spearcialImage, num5 + 4, num6 + 4, 0, 0);
						string[] array = mFont.tahoma_7.splitFontArray(Panel.specialInfo, 120);
						for (int j = 0; j < array.Length; j++)
						{
							mFont.tahoma_7_green2.drawString(g, array[j], num2 + 5, num3 + 3 + j * 12, 0);
						}
					}
					else
					{
						mFont.tahoma_7_green2.drawString(g, string.Empty, num2 + 5, num3 + 9, 0);
					}
				}
				bool flag11 = i < 6;
				if (!flag11)
				{
					int num10 = i - 6;
					SkillTemplate skillTemplate = global::Char.myCharz().nClass.skillTemplates[num10];
					SmallImage.drawSmallImage(g, skillTemplate.iconId, num5 + 4, num6 + 4, 0, 0);
					Skill skill = global::Char.myCharz().getSkill(skillTemplate);
					bool flag12 = skill != null;
					if (flag12)
					{
						mFont.tahoma_7b_blue.drawString(g, skillTemplate.name, num2 + 5, num3 + 3, 0);
						mFont.tahoma_7_blue.drawString(g, mResources.level + ": " + skill.point.ToString(), num2 + num4 - 5, num3 + 3, mFont.RIGHT);
						bool flag13 = skill.point == skillTemplate.maxPoint;
						if (flag13)
						{
							mFont.tahoma_7_green2.drawString(g, mResources.max_level_reach, num2 + 5, num3 + 15, 0);
						}
						else
						{
							bool flag14 = skill.template.isSkillSpec();
							if (flag14)
							{
								string text = mResources.proficiency + ": ";
								int x = mFont.tahoma_7_green2.getWidthExactOf(text) + num2 + 5;
								int num11 = num3 + 15;
								mFont.tahoma_7_green2.drawString(g, text, num2 + 5, num11, 0);
								mFont.tahoma_7_green2.drawString(g, "(" + skill.strCurExp() + ")", num2 + num4 - 5, num11, mFont.RIGHT);
								num11 += 4;
								g.setColor(7169134);
								g.fillRect(x, num11, 50, 5);
								int num12 = (int)(skill.curExp * 50 / 1000);
								g.setColor(11992374);
								g.fillRect(x, num11, num12, 5);
								bool flag15 = skill.curExp < 1000;
								if (flag15)
								{
								}
							}
							else
							{
								Skill skill2 = skillTemplate.skills[skill.point];
								mFont.tahoma_7_green2.drawString(g, string.Concat(new string[]
								{
									mResources.level,
									" ",
									(skill.point + 1).ToString(),
									" ",
									mResources.need,
									" ",
									Res.formatNumber2(skill2.powRequire),
									" ",
									mResources.potential
								}), num2 + 5, num3 + 15, 0);
							}
						}
					}
					else
					{
						Skill skill3 = skillTemplate.skills[0];
						string st6 = string.Concat(new string[]
						{
							mResources.need_upper,
							" ",
							Res.formatNumber2(skill3.powRequire),
							" ",
							mResources.potential_to_learn
						});
						bool flag16 = skill3.template.id == 24 || skill3.template.id == 25 || skill3.template.id == 26;
						if (flag16)
						{
							st6 = string.Concat(new string[]
							{
								mResources.need_upper,
								" ",
								Res.formatNumber2(skill3.powRequire),
								" ",
								mResources.potential_to_learn_tuyetKi
							});
						}
						mFont.tahoma_7b_green.drawString(g, skillTemplate.name, num2 + 5, num3 + 3, 0);
						mFont.tahoma_7_green2.drawString(g, st6, num2 + 5, num3 + 15, 0);
					}
				}
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x0600088D RID: 2189 RVA: 0x0008840C File Offset: 0x0008660C
	private void paintMapTrans(mGraphics g)
	{
		g.setColor(16711680);
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		for (int i = 0; i < this.mapNames.Length; i++)
		{
			int num = this.xScroll + 36;
			int num2 = this.yScroll + i * this.ITEM_HEIGHT;
			int num3 = this.wScroll - 36;
			int h = this.ITEM_HEIGHT - 1;
			int num4 = this.xScroll;
			int num5 = this.yScroll + i * this.ITEM_HEIGHT;
			int num6 = this.ITEM_HEIGHT - 1;
			bool flag = num2 - this.cmy <= this.yScroll + this.hScroll && num2 - this.cmy >= this.yScroll - this.ITEM_HEIGHT;
			if (flag)
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(this.xScroll, num2, this.wScroll, h);
				mFont.tahoma_7b_red.drawString(g, this.mapNames[i], 5, num2 + 1, 0);
				mFont.tahoma_7_grey.drawString(g, this.planetNames[i], 5, num2 + 11, 0);
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x0600088E RID: 2190 RVA: 0x00088574 File Offset: 0x00086774
	private void paintZone(mGraphics g)
	{
		g.setColor(16711680);
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		int[] zones = GameScr.gI().zones;
		int[] pts = GameScr.gI().pts;
		for (int i = 0; i < pts.Length; i++)
		{
			int num = this.xScroll + 36;
			int num2 = this.yScroll + i * this.ITEM_HEIGHT;
			int num3 = this.wScroll - 36;
			int h = this.ITEM_HEIGHT - 1;
			int num4 = this.xScroll;
			int y = this.yScroll + i * this.ITEM_HEIGHT;
			int num5 = 34;
			int h2 = this.ITEM_HEIGHT - 1;
			bool flag = num2 - this.cmy > this.yScroll + this.hScroll || num2 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
			if (!flag)
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(num, num2, num3, h);
				g.setColor(this.zoneColor[pts[i]]);
				g.fillRect(num4, y, num5, h2);
				bool flag2 = zones[i] != -1;
				if (flag2)
				{
					bool flag3 = pts[i] != 1;
					if (flag3)
					{
						mFont.tahoma_7_yellow.drawString(g, zones[i].ToString() + string.Empty, num4 + num5 / 2, num2 + 6, mFont.CENTER);
					}
					else
					{
						mFont.tahoma_7_grey.drawString(g, zones[i].ToString() + string.Empty, num4 + num5 / 2, num2 + 6, mFont.CENTER);
					}
					mFont.tahoma_7_green2.drawString(g, GameScr.gI().numPlayer[i].ToString() + "/" + GameScr.gI().maxPlayer[i].ToString(), num + 5, num2 + 6, 0);
				}
				bool flag4 = GameScr.gI().rankName1[i] != null;
				if (flag4)
				{
					mFont.tahoma_7_grey.drawString(g, GameScr.gI().rankName1[i] + "(Top " + GameScr.gI().rank1[i].ToString() + ")", num + num3 - 2, num2 + 1, mFont.RIGHT);
					mFont.tahoma_7_grey.drawString(g, GameScr.gI().rankName2[i] + "(Top " + GameScr.gI().rank2[i].ToString() + ")", num + num3 - 2, num2 + 11, mFont.RIGHT);
				}
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x0600088F RID: 2191 RVA: 0x0008885C File Offset: 0x00086A5C
	private void paintSpeacialSkill(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		g.setColor(0);
		bool flag = this.currentListLength == 0;
		if (!flag)
		{
			int num = (this.cmy + this.hScroll) / 24 + 1;
			bool flag2 = num < this.hScroll / 24 + 1;
			if (flag2)
			{
				num = this.hScroll / 24 + 1;
			}
			bool flag3 = num > this.currentListLength;
			if (flag3)
			{
				num = this.currentListLength;
			}
			int num2 = this.cmy / 24;
			bool flag4 = num2 >= num;
			if (flag4)
			{
				num2 = num - 1;
			}
			bool flag5 = num2 < 0;
			if (flag5)
			{
				num2 = 0;
			}
			for (int i = num2; i < num; i++)
			{
				int num3 = this.xScroll;
				int num4 = this.yScroll + i * this.ITEM_HEIGHT;
				int num5 = 24;
				int num6 = this.ITEM_HEIGHT - 1;
				int num7 = this.xScroll + num5;
				int num8 = this.yScroll + i * this.ITEM_HEIGHT;
				int num9 = this.wScroll - num5;
				int h = this.ITEM_HEIGHT - 1;
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(num7, num8, num9, h);
				g.setColor((i != this.selected) ? 9993045 : 9541120);
				g.fillRect(num3, num4, num5, num6);
				SmallImage.drawSmallImage(g, (int)global::Char.myCharz().imgSpeacialSkill[this.currentTabIndex][i], num3 + num5 / 2, num4 + num6 / 2, 0, 3);
				string[] array = mFont.tahoma_7_grey.splitFontArray(global::Char.myCharz().infoSpeacialSkill[this.currentTabIndex][i], 140);
				for (int j = 0; j < array.Length; j++)
				{
					mFont.tahoma_7_grey.drawString(g, array[j], num7 + 5, num8 + 1 + j * 11, 0);
				}
			}
			this.paintScrollArrow(g);
		}
	}

	// Token: 0x06000890 RID: 2192 RVA: 0x00088A8C File Offset: 0x00086C8C
	private void paintBox(mGraphics g)
	{
		g.setColor(16711680);
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		try
		{
			Item[] arrItemBox = global::Char.myCharz().arrItemBox;
			this.currentListLength = this.checkCurrentListLength(arrItemBox.Length);
			int num = arrItemBox.Length / 20 + ((arrItemBox.Length % 20 > 0) ? 1 : 0);
			this.TAB_W_NEW = this.wScroll / num;
			for (int i = 0; i < this.currentListLength; i++)
			{
				int num2 = this.xScroll + 36;
				int num3 = this.yScroll + i * this.ITEM_HEIGHT;
				int num4 = this.wScroll - 36;
				int h = this.ITEM_HEIGHT - 1;
				int num5 = this.xScroll;
				int num6 = this.yScroll + i * this.ITEM_HEIGHT;
				int num7 = 34;
				int num8 = this.ITEM_HEIGHT - 1;
				bool flag = num3 - this.cmy > this.yScroll + this.hScroll || num3 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
				if (!flag)
				{
					bool flag2 = i == 0;
					if (flag2)
					{
						for (int j = 0; j < num; j++)
						{
							int num9 = (j == this.newSelected && this.selected == 0) ? ((GameCanvas.gameTick % 10 < 7) ? -1 : 0) : 0;
							g.setColor((j != this.newSelected) ? 15723751 : 16383818);
							g.fillRect(this.xScroll + j * this.TAB_W_NEW, num3 + 9 + num9, this.TAB_W_NEW - 1, 14);
							mFont.tahoma_7_grey.drawString(g, string.Empty + j.ToString(), this.xScroll + j * this.TAB_W_NEW + this.TAB_W_NEW / 2, this.yScroll + 11 + num9, mFont.CENTER);
						}
					}
					else
					{
						g.setColor((i != this.selected) ? 15196114 : 16383818);
						g.fillRect(num2, num3, num4, h);
						g.setColor((i != this.selected) ? 9993045 : 9541120);
						int inventorySelect_body = this.GetInventorySelect_body(i, this.newSelected);
						Item item = arrItemBox[inventorySelect_body];
						bool flag3 = item != null;
						if (flag3)
						{
							for (int k = 0; k < item.itemOption.Length; k++)
							{
								bool flag4 = item.itemOption[k].optionTemplate.id == 72 && item.itemOption[k].param > 0;
								if (flag4)
								{
									sbyte color_Item_Upgrade = Panel.GetColor_Item_Upgrade(item.itemOption[k].param);
									int color_ItemBg = Panel.GetColor_ItemBg((int)color_Item_Upgrade);
									bool flag5 = color_ItemBg != -1;
									if (flag5)
									{
										g.setColor((i != this.selected) ? Panel.GetColor_ItemBg((int)color_Item_Upgrade) : Panel.GetColor_ItemBg((int)color_Item_Upgrade));
									}
								}
							}
						}
						g.fillRect(num5, num6, num7, num8);
						bool flag6 = item == null;
						if (!flag6)
						{
							string str = string.Empty;
							mFont mFont = mFont.tahoma_7_green2;
							bool flag7 = item.itemOption != null;
							if (flag7)
							{
								for (int l = 0; l < item.itemOption.Length; l++)
								{
									bool flag8 = item.itemOption[l].optionTemplate.id == 72;
									if (flag8)
									{
										str = " [+" + item.itemOption[l].getOptionString() + "]";
									}
									bool flag9 = item.itemOption[l].optionTemplate.id == 41;
									if (flag9)
									{
										bool flag10 = item.itemOption[l].param == 1;
										if (flag10)
										{
											mFont = Panel.GetFont(0);
										}
										else
										{
											bool flag11 = item.itemOption[l].param == 2;
											if (flag11)
											{
												mFont = Panel.GetFont(2);
											}
											else
											{
												bool flag12 = item.itemOption[l].param == 3;
												if (flag12)
												{
													mFont = Panel.GetFont(8);
												}
												else
												{
													bool flag13 = item.itemOption[l].param == 4;
													if (flag13)
													{
														mFont = Panel.GetFont(7);
													}
												}
											}
										}
									}
								}
							}
							mFont.drawString(g, item.template.name + str, num2 + 5, num3 + 1, 0);
							string text = string.Empty;
							bool flag14 = item.itemOption != null;
							if (flag14)
							{
								bool flag15 = item.itemOption.Length != 0 && item.itemOption[0] != null;
								if (flag15)
								{
									text += item.itemOption[0].getOptionString();
								}
								mFont mFont2 = mFont.tahoma_7_blue;
								bool flag16 = item.compare < 0 && item.template.type != 5;
								if (flag16)
								{
									mFont2 = mFont.tahoma_7_red;
								}
								bool flag17 = item.itemOption.Length > 1;
								if (flag17)
								{
									for (int m = 1; m < item.itemOption.Length; m++)
									{
										bool flag18 = item.itemOption[m] != null && item.itemOption[m].optionTemplate.id != 102 && item.itemOption[m].optionTemplate.id != 107;
										if (flag18)
										{
											text = text + "," + item.itemOption[m].getOptionString();
										}
									}
								}
								mFont2.drawString(g, text, num2 + 5, num3 + 11, mFont.LEFT);
							}
							SmallImage.drawSmallImage(g, (int)item.template.iconID, num5 + num7 / 2, num6 + num8 / 2, 0, 3);
							bool flag19 = item.itemOption != null;
							if (flag19)
							{
								for (int n = 0; n < item.itemOption.Length; n++)
								{
									this.paintOptItem(g, item.itemOption[n].optionTemplate.id, item.itemOption[n].param, num5, num6, num7, num8);
								}
								for (int num10 = 0; num10 < item.itemOption.Length; num10++)
								{
									this.paintOptSlotItem(g, item.itemOption[num10].optionTemplate.id, item.itemOption[num10].param, num5, num6, num7, num8);
								}
							}
							bool flag20 = item.quantity > 1;
							if (flag20)
							{
								mFont.tahoma_7_yellow.drawString(g, string.Empty + item.quantity.ToString(), num5 + num7, num6 + num8 - mFont.tahoma_7_yellow.getHeight(), 1);
							}
						}
					}
				}
			}
		}
		catch (Exception)
		{
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x06000891 RID: 2193 RVA: 0x000891D4 File Offset: 0x000873D4
	public Member getCurrMember()
	{
		bool flag = this.selected < 2;
		Member result;
		if (flag)
		{
			result = null;
		}
		else
		{
			bool flag2 = this.selected > ((this.member == null) ? this.myMember.size() : this.member.size()) + 1;
			if (flag2)
			{
				result = null;
			}
			else
			{
				result = ((this.member == null) ? ((Member)this.myMember.elementAt(this.selected - 2)) : ((Member)this.member.elementAt(this.selected - 2)));
			}
		}
		return result;
	}

	// Token: 0x06000892 RID: 2194 RVA: 0x00089268 File Offset: 0x00087468
	public ClanMessage getCurrMessage()
	{
		bool flag = this.selected < 2;
		ClanMessage result;
		if (flag)
		{
			result = null;
		}
		else
		{
			bool flag2 = this.selected > ClanMessage.vMessage.size() + 1;
			if (flag2)
			{
				result = null;
			}
			else
			{
				result = (ClanMessage)ClanMessage.vMessage.elementAt(this.selected - 2);
			}
		}
		return result;
	}

	// Token: 0x06000893 RID: 2195 RVA: 0x000892C0 File Offset: 0x000874C0
	public Clan getCurrClan()
	{
		bool flag = this.selected < 2;
		Clan result;
		if (flag)
		{
			result = null;
		}
		else
		{
			bool flag2 = this.selected > this.clans.Length + 1;
			if (flag2)
			{
				result = null;
			}
			else
			{
				result = this.clans[this.selected - 2];
			}
		}
		return result;
	}

	// Token: 0x06000894 RID: 2196 RVA: 0x00089310 File Offset: 0x00087510
	private void paintLogChat(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		g.setColor(0);
		bool flag = this.logChat.size() == 0;
		if (flag)
		{
			mFont.tahoma_7_green2.drawString(g, mResources.no_msg, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll / 2 - mFont.tahoma_7.getHeight() / 2 + 24, 2);
		}
		for (int i = 0; i < this.currentListLength; i++)
		{
			int num = this.xScroll;
			int num2 = this.yScroll + i * this.ITEM_HEIGHT;
			int num3 = 24;
			int h = this.ITEM_HEIGHT - 1;
			int num4 = this.xScroll + num3;
			int num5 = this.yScroll + i * this.ITEM_HEIGHT;
			int num6 = this.wScroll - num3;
			int num7 = this.ITEM_HEIGHT - 1;
			bool flag2 = i == 0;
			if (flag2)
			{
				g.setColor(15196114);
				g.fillRect(num, num5, this.wScroll, num7);
				g.drawImage((i != this.selected) ? GameScr.imgLbtn2 : GameScr.imgLbtnFocus2, this.xScroll + this.wScroll - 5, num5 + 2, StaticObj.TOP_RIGHT);
				((i != this.selected) ? mFont.tahoma_7b_dark : mFont.tahoma_7b_green2).drawString(g, (!this.isViewChatServer) ? mResources.on : mResources.off, this.xScroll + this.wScroll - 22, num5 + 7, 2);
				mFont.tahoma_7_grey.drawString(g, (!this.isViewChatServer) ? mResources.onPlease : mResources.offPlease, this.xScroll + 5, num5 + num7 / 2 - 4, mFont.LEFT);
			}
			else
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(num4, num5, num6, num7);
				g.setColor((i != this.selected) ? 9993045 : 9541120);
				g.fillRect(num, num2, num3, h);
				InfoItem infoItem = (InfoItem)this.logChat.elementAt(i - 1);
				bool flag3 = infoItem.charInfo.headICON != -1;
				if (flag3)
				{
					SmallImage.drawSmallImage(g, infoItem.charInfo.headICON, num, num2, 0, 0);
				}
				else
				{
					Part part = GameScr.parts[infoItem.charInfo.head];
					SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, num + (int)part.pi[global::Char.CharInfo[0][0][0]].dx, num2 + (int)part.pi[global::Char.CharInfo[0][0][0]].dy, 0, 0);
				}
				g.setClip(this.xScroll, this.yScroll + this.cmy, this.wScroll, this.hScroll);
				mFont mFont = mFont.tahoma_7b_dark;
				mFont = mFont.tahoma_7b_green2;
				mFont.drawString(g, infoItem.charInfo.cName, num4 + 5, num5, 0);
				bool flag4 = !infoItem.isChatServer;
				if (flag4)
				{
					mFont.tahoma_7_blue.drawString(g, Res.split(infoItem.s, "|", 0)[2], num4 + 5, num5 + 11, 0);
				}
				else
				{
					mFont.tahoma_7_red.drawString(g, Res.split(infoItem.s, "|", 0)[2], num4 + 5, num5 + 11, 0);
				}
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x06000895 RID: 2197 RVA: 0x000896C8 File Offset: 0x000878C8
	private void paintFlagChange(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		g.setColor(0);
		for (int i = 0; i < this.currentListLength; i++)
		{
			int num = this.xScroll + 26;
			int num2 = this.yScroll + i * this.ITEM_HEIGHT;
			int num3 = this.wScroll - 26;
			int h = this.ITEM_HEIGHT - 1;
			int num4 = this.xScroll;
			int num5 = this.yScroll + i * this.ITEM_HEIGHT;
			int num6 = 24;
			int num7 = this.ITEM_HEIGHT - 1;
			bool flag = num2 - this.cmy > this.yScroll + this.hScroll || num2 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
			if (!flag)
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(num, num2, num3, h);
				g.setColor((i != this.selected) ? 9993045 : 9541120);
				g.fillRect(num4, num5, num6, num7);
				Item item = (Item)this.vFlag.elementAt(i);
				bool flag2 = item == null;
				if (!flag2)
				{
					mFont.tahoma_7_green2.drawString(g, item.template.name, num + 5, num2 + 1, 0);
					string text = string.Empty;
					bool flag3 = item.itemOption != null && item.itemOption.Length >= 1;
					if (flag3)
					{
						bool flag4 = item.itemOption[0] != null && item.itemOption[0].optionTemplate.id != 102 && item.itemOption[0].optionTemplate.id != 107;
						if (flag4)
						{
							text += item.itemOption[0].getOptionString();
						}
						mFont tahoma_7_blue = mFont.tahoma_7_blue;
						tahoma_7_blue.drawString(g, text, num + 5, num2 + 11, 0);
						SmallImage.drawSmallImage(g, (int)item.template.iconID, num4 + num6 / 2, num5 + num7 / 2, 0, 3);
					}
				}
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x06000896 RID: 2198 RVA: 0x00089924 File Offset: 0x00087B24
	private void paintEnemy(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		g.setColor(0);
		bool flag = this.currentListLength == 0;
		if (flag)
		{
			mFont.tahoma_7_green2.drawString(g, mResources.no_enemy, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll / 2 - mFont.tahoma_7.getHeight() / 2, 2);
		}
		else
		{
			for (int i = 0; i < this.currentListLength; i++)
			{
				int num = this.xScroll;
				int num2 = this.yScroll + i * this.ITEM_HEIGHT;
				int num3 = 24;
				int h = this.ITEM_HEIGHT - 1;
				int num4 = this.xScroll + num3;
				int num5 = this.yScroll + i * this.ITEM_HEIGHT;
				int num6 = this.wScroll - num3;
				int h2 = this.ITEM_HEIGHT - 1;
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(num4, num5, num6, h2);
				g.setColor((i != this.selected) ? 9993045 : 9541120);
				g.fillRect(num, num2, num3, h);
				InfoItem infoItem = (InfoItem)this.vEnemy.elementAt(i);
				bool flag2 = infoItem.charInfo.headICON != -1;
				if (flag2)
				{
					SmallImage.drawSmallImage(g, infoItem.charInfo.headICON, num, num2, 0, 0);
				}
				else
				{
					Part part = GameScr.parts[infoItem.charInfo.head];
					SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, num + (int)part.pi[global::Char.CharInfo[0][0][0]].dx, num2 + 3 + (int)part.pi[global::Char.CharInfo[0][0][0]].dy, 0, 0);
				}
				g.setClip(this.xScroll, this.yScroll + this.cmy, this.wScroll, this.hScroll);
				bool isOnline = infoItem.isOnline;
				if (isOnline)
				{
					mFont.tahoma_7b_green.drawString(g, infoItem.charInfo.cName, num4 + 5, num5, 0);
					mFont.tahoma_7_blue.drawString(g, infoItem.s, num4 + 5, num5 + 11, 0);
				}
				else
				{
					mFont.tahoma_7_grey.drawString(g, infoItem.charInfo.cName, num4 + 5, num5, 0);
					mFont.tahoma_7_grey.drawString(g, infoItem.s, num4 + 5, num5 + 11, 0);
				}
			}
			this.paintScrollArrow(g);
		}
	}

	// Token: 0x06000897 RID: 2199 RVA: 0x00089BF0 File Offset: 0x00087DF0
	private void paintFriend(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		g.setColor(0);
		bool flag = this.currentListLength == 0;
		if (flag)
		{
			mFont.tahoma_7_green2.drawString(g, mResources.no_friend, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll / 2 - mFont.tahoma_7.getHeight() / 2, 2);
		}
		else
		{
			for (int i = 0; i < this.currentListLength; i++)
			{
				int num = this.xScroll;
				int num2 = this.yScroll + i * this.ITEM_HEIGHT;
				int num3 = 24;
				int h = this.ITEM_HEIGHT - 1;
				int num4 = this.xScroll + num3;
				int num5 = this.yScroll + i * this.ITEM_HEIGHT;
				int num6 = this.wScroll - num3;
				int h2 = this.ITEM_HEIGHT - 1;
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(num4, num5, num6, h2);
				g.setColor((i != this.selected) ? 9993045 : 9541120);
				g.fillRect(num, num2, num3, h);
				InfoItem infoItem = (InfoItem)this.vFriend.elementAt(i);
				bool flag2 = infoItem.charInfo.headICON != -1;
				if (flag2)
				{
					SmallImage.drawSmallImage(g, infoItem.charInfo.headICON, num, num2, 0, 0);
				}
				else
				{
					Part part = GameScr.parts[infoItem.charInfo.head];
					SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, num + (int)part.pi[global::Char.CharInfo[0][0][0]].dx, num2 + 3 + (int)part.pi[global::Char.CharInfo[0][0][0]].dy, 0, 0);
				}
				g.setClip(this.xScroll, this.yScroll + this.cmy, this.wScroll, this.hScroll);
				bool isOnline = infoItem.isOnline;
				if (isOnline)
				{
					mFont.tahoma_7b_green.drawString(g, infoItem.charInfo.cName, num4 + 5, num5, 0);
					mFont.tahoma_7_blue.drawString(g, infoItem.s, num4 + 5, num5 + 11, 0);
				}
				else
				{
					mFont.tahoma_7_grey.drawString(g, infoItem.charInfo.cName, num4 + 5, num5, 0);
					mFont.tahoma_7_grey.drawString(g, infoItem.s, num4 + 5, num5 + 11, 0);
				}
			}
			this.paintScrollArrow(g);
		}
	}

	// Token: 0x06000898 RID: 2200 RVA: 0x00089EBC File Offset: 0x000880BC
	public void paintPlayerMenu(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		int i = 0;
		while (i < this.vPlayerMenu.size())
		{
			int x = this.xScroll;
			int num = this.yScroll + i * this.ITEM_HEIGHT;
			int num2 = this.wScroll - 1;
			int h = this.ITEM_HEIGHT - 1;
			bool flag = num - this.cmy <= this.yScroll + this.hScroll && num - this.cmy >= this.yScroll - this.ITEM_HEIGHT;
			if (flag)
			{
				Command command = (Command)this.vPlayerMenu.elementAt(i);
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(x, num, num2, h);
				bool flag2 = command.caption2.Equals(string.Empty);
				if (flag2)
				{
					mFont.tahoma_7b_dark.drawString(g, command.caption, this.xScroll + this.wScroll / 2, num + 6, mFont.CENTER);
				}
				else
				{
					mFont.tahoma_7b_dark.drawString(g, command.caption, this.xScroll + this.wScroll / 2, num + 1, mFont.CENTER);
					mFont.tahoma_7b_dark.drawString(g, command.caption2, this.xScroll + this.wScroll / 2, num + 11, mFont.CENTER);
				}
			}
			IL_175:
			i++;
			continue;
			goto IL_175;
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x06000899 RID: 2201 RVA: 0x0008A064 File Offset: 0x00088264
	private void paintClans(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(-this.cmx, -this.cmy);
		g.setColor(0);
		int num = this.xScroll + this.wScroll / 2 - this.clansOption.Length * this.TAB_W / 2;
		bool flag = this.currentListLength == 2;
		if (flag)
		{
			mFont.tahoma_7_green2.drawString(g, this.clanReport, this.xScroll + this.wScroll / 2, this.yScroll + 24 + this.hScroll / 2 - mFont.tahoma_7.getHeight() / 2, 2);
			bool flag2 = this.isMessage && this.myMember.size() == 1;
			if (flag2)
			{
				for (int i = 0; i < mResources.clanEmpty.Length; i++)
				{
					mFont.tahoma_7b_dark.drawString(g, mResources.clanEmpty[i], this.xScroll + this.wScroll / 2, this.yScroll + 24 + this.hScroll / 2 - mResources.clanEmpty.Length * 12 / 2 + i * 12, mFont.CENTER);
				}
			}
		}
		bool flag3 = this.isMessage;
		if (flag3)
		{
			this.currentListLength = ClanMessage.vMessage.size() + 2;
		}
		for (int j = 0; j < this.currentListLength; j++)
		{
			int num2 = this.xScroll;
			int num3 = this.yScroll + j * this.ITEM_HEIGHT;
			int num4 = 24;
			int num5 = this.ITEM_HEIGHT - 1;
			int num6 = this.xScroll + num4;
			int num7 = this.yScroll + j * this.ITEM_HEIGHT;
			int num8 = this.wScroll - num4;
			int num9 = this.ITEM_HEIGHT - 1;
			bool flag4 = num7 - this.cmy > this.yScroll + this.hScroll || num7 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
			if (!flag4)
			{
				int num10 = j;
				int num11 = num10;
				if (num11 != 0)
				{
					if (num11 != 1)
					{
						bool flag5 = this.isSearchClan;
						if (flag5)
						{
							bool flag6 = this.clans == null || this.clans.Length == 0;
							if (!flag6)
							{
								g.setColor((j != this.selected) ? 15196114 : 16383818);
								g.fillRect(num6, num7, num8, num9);
								g.setColor((j != this.selected) ? 9993045 : 9541120);
								g.fillRect(num2, num3, num4, num5);
								bool flag7 = ClanImage.isExistClanImage(this.clans[j - 2].imgID);
								if (flag7)
								{
									bool flag8 = ClanImage.getClanImage((short)this.clans[j - 2].imgID).idImage != null;
									if (flag8)
									{
										SmallImage.drawSmallImage(g, (int)ClanImage.getClanImage((short)this.clans[j - 2].imgID).idImage[0], num2 + num4 / 2, num3 + num5 / 2, 0, StaticObj.VCENTER_HCENTER);
									}
								}
								else
								{
									ClanImage clanImage = new ClanImage();
									clanImage.ID = this.clans[j - 2].imgID;
									bool flag9 = !ClanImage.isExistClanImage(clanImage.ID);
									if (flag9)
									{
										ClanImage.addClanImage(clanImage);
									}
								}
								string st = (this.clans[j - 2].name.Length <= 23) ? this.clans[j - 2].name : (this.clans[j - 2].name.Substring(0, 23) + "...");
								mFont.tahoma_7b_green2.drawString(g, st, num6 + 5, num7, 0);
								g.setClip(num6, num7, num8 - 10, num9);
								mFont.tahoma_7_blue.drawString(g, this.clans[j - 2].slogan, num6 + 5, num7 + 11, 0);
								g.setClip(this.xScroll, this.yScroll + this.cmy, this.wScroll, this.hScroll);
								mFont.tahoma_7_green2.drawString(g, this.clans[j - 2].currMember.ToString() + "/" + this.clans[j - 2].maxMember.ToString(), num6 + num8 - 5, num7, mFont.RIGHT);
							}
						}
						else
						{
							bool flag10 = this.isViewMember;
							if (flag10)
							{
								g.setColor((j != this.selected) ? 15196114 : 16383818);
								g.fillRect(num6, num7, num8, num9);
								g.setColor((j != this.selected) ? 9993045 : 9541120);
								g.fillRect(num2, num3, num4, num5);
								Member member = (this.member == null) ? ((Member)this.myMember.elementAt(j - 2)) : ((Member)this.member.elementAt(j - 2));
								bool flag11 = member.headICON != -1;
								if (flag11)
								{
									SmallImage.drawSmallImage(g, (int)member.headICON, num2, num3, 0, 0);
								}
								else
								{
									Part part = GameScr.parts[(int)member.head];
									SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, num2 + (int)part.pi[global::Char.CharInfo[0][0][0]].dx, num3 + 3 + (int)part.pi[global::Char.CharInfo[0][0][0]].dy, 0, 0);
								}
								g.setClip(this.xScroll, this.yScroll + this.cmy, this.wScroll, this.hScroll);
								mFont mFont = mFont.tahoma_7b_dark;
								bool flag12 = member.role == 0;
								if (flag12)
								{
									mFont = mFont.tahoma_7b_red;
								}
								else
								{
									bool flag13 = member.role == 1;
									if (flag13)
									{
										mFont = mFont.tahoma_7b_green;
									}
									else
									{
										bool flag14 = member.role == 2;
										if (flag14)
										{
											mFont = mFont.tahoma_7b_green2;
										}
									}
								}
								mFont.drawString(g, member.name, num6 + 5, num7, 0);
								mFont.tahoma_7_blue.drawString(g, mResources.power + ": " + member.powerPoint, num6 + 5, num7 + 11, 0);
								SmallImage.drawSmallImage(g, 7223, num6 + num8 - 7, num7 + 12, 0, 3);
								mFont.tahoma_7_blue.drawString(g, string.Empty + member.clanPoint.ToString(), num6 + num8 - 15, num7 + 6, mFont.RIGHT);
							}
							else
							{
								bool flag15 = !this.isMessage || ClanMessage.vMessage.size() == 0;
								if (!flag15)
								{
									ClanMessage clanMessage = (ClanMessage)ClanMessage.vMessage.elementAt(j - 2);
									g.setColor((j != this.selected || clanMessage.option != null) ? 15196114 : 16383818);
									g.fillRect(num2, num3, num8 + num4, num9);
									clanMessage.paint(g, num2, num3);
									bool flag16 = clanMessage.option == null;
									if (!flag16)
									{
										int num12 = this.xScroll + this.wScroll - 2 - clanMessage.option.Length * 40;
										for (int k = 0; k < clanMessage.option.Length; k++)
										{
											bool flag17 = k == this.cSelected && j == this.selected;
											if (flag17)
											{
												g.drawImage(GameScr.imgLbtnFocus2, num12 + k * 40 + 20, num7 + num9 / 2, StaticObj.VCENTER_HCENTER);
												mFont.tahoma_7b_green2.drawString(g, clanMessage.option[k], num12 + k * 40 + 20, num7 + 6, mFont.CENTER);
											}
											else
											{
												g.drawImage(GameScr.imgLbtn2, num12 + k * 40 + 20, num7 + num9 / 2, StaticObj.VCENTER_HCENTER);
												mFont.tahoma_7b_dark.drawString(g, clanMessage.option[k], num12 + k * 40 + 20, num7 + 6, mFont.CENTER);
											}
										}
									}
								}
							}
						}
					}
					else
					{
						g.setColor((j != this.selected) ? 15196114 : 16383818);
						g.fillRect(this.xScroll, num7, this.wScroll, num9);
						bool flag18 = this.clanInfo != null;
						if (flag18)
						{
							mFont.tahoma_7b_dark.drawString(g, this.clanInfo, this.xScroll + this.wScroll / 2, num7 + 6, mFont.CENTER);
						}
					}
				}
				else
				{
					for (int l = 0; l < this.clansOption.Length; l++)
					{
						g.setColor((l != this.cSelected || j != this.selected) ? 15723751 : 16383818);
						g.fillRect(num + l * this.TAB_W, num7, this.TAB_W - 1, 23);
						for (int m = 0; m < this.clansOption[l].Length; m++)
						{
							mFont.tahoma_7_grey.drawString(g, this.clansOption[l][m], num + l * this.TAB_W + this.TAB_W / 2, this.yScroll + m * 11, mFont.CENTER);
						}
					}
				}
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x0600089A RID: 2202 RVA: 0x0008AA1C File Offset: 0x00088C1C
	private void paintArchivement(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		g.setColor(0);
		bool flag = this.currentListLength == 0;
		if (flag)
		{
			mFont.tahoma_7_green2.drawString(g, mResources.no_mission, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll / 2 - mFont.tahoma_7.getHeight() / 2, 2);
		}
		else
		{
			bool flag2 = global::Char.myCharz().arrArchive == null || global::Char.myCharz().arrArchive.Length != this.currentListLength;
			if (!flag2)
			{
				for (int i = 0; i < this.currentListLength; i++)
				{
					int num = this.xScroll;
					int num2 = this.yScroll + i * this.ITEM_HEIGHT;
					int num3 = this.wScroll;
					int num4 = this.ITEM_HEIGHT - 1;
					Archivement archivement = global::Char.myCharz().arrArchive[i];
					g.setColor((i != this.selected || ((archivement.isRecieve || archivement.isFinish) && (!archivement.isRecieve || !archivement.isFinish))) ? 15196114 : 16383818);
					g.fillRect(num, num2, num3, num4);
					bool flag3 = archivement == null;
					if (!flag3)
					{
						bool flag4 = !archivement.isFinish;
						if (flag4)
						{
							mFont.tahoma_7.drawString(g, archivement.info1, num + 5, num2, 0);
							mFont.tahoma_7_green.drawString(g, archivement.money.ToString() + " " + mResources.RUBY, num + num3 - 5, num2, mFont.RIGHT);
							mFont.tahoma_7_red.drawString(g, archivement.info2, num + 5, num2 + 11, 0);
						}
						else
						{
							bool flag5 = archivement.isFinish && !archivement.isRecieve;
							if (flag5)
							{
								mFont.tahoma_7.drawString(g, archivement.info1, num + 5, num2, 0);
								mFont.tahoma_7_blue.drawString(g, mResources.reward_mission + archivement.money.ToString() + " " + mResources.RUBY, num + 5, num2 + 11, 0);
								bool flag6 = i == this.selected;
								if (flag6)
								{
									mFont.tahoma_7b_green2.drawString(g, mResources.receive_upper, num + num3 - 20, num2 + 6, mFont.CENTER);
									mFont.tahoma_7b_dark.drawString(g, mResources.receive_upper, num + num3 - 20, num2 + 6, mFont.CENTER);
								}
								else
								{
									g.drawImage(GameScr.imgLbtn2, num + num3 - 20, num2 + num4 / 2, StaticObj.VCENTER_HCENTER);
									mFont.tahoma_7b_dark.drawString(g, mResources.receive_upper, num + num3 - 20, num2 + 6, mFont.CENTER);
								}
							}
							else
							{
								bool flag7 = archivement.isFinish && archivement.isRecieve;
								if (flag7)
								{
									mFont.tahoma_7_green.drawString(g, archivement.info1, num + 5, num2, 0);
									mFont.tahoma_7_green.drawString(g, archivement.info2, num + 5, num2 + 11, 0);
								}
							}
						}
					}
				}
				this.paintScrollArrow(g);
			}
		}
	}

	// Token: 0x0600089B RID: 2203 RVA: 0x0008AD7C File Offset: 0x00088F7C
	private void paintCombine(mGraphics g)
	{
		g.setColor(16711680);
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		bool flag = this.vItemCombine.size() == 0;
		if (flag)
		{
			bool flag2 = this.combineInfo != null;
			if (flag2)
			{
				for (int i = 0; i < this.combineInfo.Length; i++)
				{
					mFont.tahoma_7b_dark.drawString(g, this.combineInfo[i], this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll / 2 - this.combineInfo.Length * 14 / 2 + i * 14 + 5, 2);
				}
			}
		}
		else
		{
			for (int j = 0; j < this.vItemCombine.size() + 1; j++)
			{
				int num = this.xScroll + 36;
				int num2 = this.yScroll + j * this.ITEM_HEIGHT;
				int num3 = this.wScroll - 36;
				int num4 = this.ITEM_HEIGHT - 1;
				int num5 = this.xScroll;
				int num6 = this.yScroll + j * this.ITEM_HEIGHT;
				int num7 = 34;
				int num8 = this.ITEM_HEIGHT - 1;
				bool flag3 = num2 - this.cmy > this.yScroll + this.hScroll || num2 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
				if (!flag3)
				{
					bool flag4 = j == this.vItemCombine.size();
					if (flag4)
					{
						bool flag5 = this.vItemCombine.size() > 0;
						if (flag5)
						{
							bool flag6 = !GameCanvas.isTouch && j == this.selected;
							if (flag6)
							{
								g.setColor(16383818);
								g.fillRect(num5, num2, this.wScroll, num4 + 2);
							}
							bool flag7 = (j == this.selected && this.keyTouchCombine == 1) || (!GameCanvas.isTouch && j == this.selected);
							if (flag7)
							{
								g.drawImage(GameScr.imgLbtnFocus, this.xScroll + this.wScroll / 2, num2 + num4 / 2 + 1, StaticObj.VCENTER_HCENTER);
								mFont.tahoma_7b_green2.drawString(g, mResources.UPGRADE, this.xScroll + this.wScroll / 2, num2 + num4 / 2 - 4, mFont.CENTER);
							}
							else
							{
								g.drawImage(GameScr.imgLbtn, this.xScroll + this.wScroll / 2, num2 + num4 / 2 + 1, StaticObj.VCENTER_HCENTER);
								mFont.tahoma_7b_dark.drawString(g, mResources.UPGRADE, this.xScroll + this.wScroll / 2, num2 + num4 / 2 - 4, mFont.CENTER);
							}
						}
					}
					else
					{
						g.setColor((j != this.selected) ? 15196114 : 16383818);
						g.fillRect(num, num2, num3, num4);
						g.setColor((j != this.selected) ? 9993045 : 9541120);
						Item item = (Item)this.vItemCombine.elementAt(j);
						bool flag8 = item != null;
						if (flag8)
						{
							for (int k = 0; k < item.itemOption.Length; k++)
							{
								bool flag9 = item.itemOption[k].optionTemplate.id == 72 && item.itemOption[k].param > 0;
								if (flag9)
								{
									sbyte color_Item_Upgrade = Panel.GetColor_Item_Upgrade(item.itemOption[k].param);
									int color_ItemBg = Panel.GetColor_ItemBg((int)color_Item_Upgrade);
									bool flag10 = color_ItemBg != -1;
									if (flag10)
									{
										g.setColor((j != this.selected) ? Panel.GetColor_ItemBg((int)color_Item_Upgrade) : Panel.GetColor_ItemBg((int)color_Item_Upgrade));
									}
								}
							}
						}
						g.fillRect(num5, num6, num7, num8);
						bool flag11 = item == null;
						if (!flag11)
						{
							string str = string.Empty;
							mFont mFont = mFont.tahoma_7_green2;
							bool flag12 = item.itemOption != null;
							if (flag12)
							{
								for (int l = 0; l < item.itemOption.Length; l++)
								{
									bool flag13 = item.itemOption[l].optionTemplate.id == 72;
									if (flag13)
									{
										str = " [+" + item.itemOption[l].param.ToString() + "]";
									}
									bool flag14 = item.itemOption[l].optionTemplate.id == 41;
									if (flag14)
									{
										bool flag15 = item.itemOption[l].param == 1;
										if (flag15)
										{
											mFont = Panel.GetFont(0);
										}
										else
										{
											bool flag16 = item.itemOption[l].param == 2;
											if (flag16)
											{
												mFont = Panel.GetFont(2);
											}
											else
											{
												bool flag17 = item.itemOption[l].param == 3;
												if (flag17)
												{
													mFont = Panel.GetFont(8);
												}
												else
												{
													bool flag18 = item.itemOption[l].param == 4;
													if (flag18)
													{
														mFont = Panel.GetFont(7);
													}
												}
											}
										}
									}
								}
							}
							mFont.drawString(g, item.template.name + str, num + 5, num2 + 1, 0);
							string text = string.Empty;
							bool flag19 = item.itemOption != null;
							if (flag19)
							{
								bool flag20 = item.itemOption.Length != 0 && item.itemOption[0] != null && item.itemOption[0].optionTemplate.id != 102 && item.itemOption[0].optionTemplate.id != 107;
								if (flag20)
								{
									text += item.itemOption[0].getOptionString();
								}
								mFont mFont2 = mFont.tahoma_7_blue;
								bool flag21 = item.compare < 0 && item.template.type != 5;
								if (flag21)
								{
									mFont2 = mFont.tahoma_7_red;
								}
								bool flag22 = item.itemOption.Length > 1;
								if (flag22)
								{
									for (int m = 1; m < item.itemOption.Length; m++)
									{
										bool flag23 = item.itemOption[m] != null && item.itemOption[m].optionTemplate.id != 102 && item.itemOption[m].optionTemplate.id != 107;
										if (flag23)
										{
											text = text + "," + item.itemOption[m].getOptionString();
										}
									}
								}
								mFont2.drawString(g, text, num + 5, num2 + 11, mFont.LEFT);
							}
							SmallImage.drawSmallImage(g, (int)item.template.iconID, num5 + num7 / 2, num6 + num8 / 2, 0, 3);
							bool flag24 = item.itemOption != null;
							if (flag24)
							{
								for (int n = 0; n < item.itemOption.Length; n++)
								{
									this.paintOptItem(g, item.itemOption[n].optionTemplate.id, item.itemOption[n].param, num5, num6, num7, num8);
								}
								for (int num9 = 0; num9 < item.itemOption.Length; num9++)
								{
									this.paintOptSlotItem(g, item.itemOption[num9].optionTemplate.id, item.itemOption[num9].param, num5, num6, num7, num8);
								}
							}
							bool flag25 = item.quantity > 1;
							if (flag25)
							{
								mFont.tahoma_7_yellow.drawString(g, string.Empty + item.quantity.ToString(), num5 + num7, num6 + num8 - mFont.tahoma_7_yellow.getHeight(), 1);
							}
						}
					}
				}
			}
			this.paintScrollArrow(g);
		}
	}

	// Token: 0x0600089C RID: 2204 RVA: 0x0008B5A8 File Offset: 0x000897A8
	private void paintInventory(mGraphics g)
	{
		bool flag = true;
		bool flag2 = flag && this.isnewInventory;
		if (flag2)
		{
			Item[] arrItemBody = global::Char.myCharz().arrItemBody;
			Item[] arrItemBag = global::Char.myCharz().arrItemBag;
			g.setColor(16711680);
			int num = arrItemBody.Length + arrItemBag.Length;
			int num2 = num / 20 + ((num % 20 > 0) ? 1 : 0) + 1;
			int num3 = 0;
			this.TAB_W_NEW = this.wScroll / num2;
			for (int i = num3; i < num2; i++)
			{
				int num4 = (i == this.newSelected && this.selected == 0) ? ((GameCanvas.gameTick % 10 < 7) ? -1 : 0) : 0;
				g.setColor((i != this.newSelected) ? 15723751 : 16383818);
				g.fillRect(this.xScroll + i * this.TAB_W_NEW, 89 + num4 - 10, this.TAB_W_NEW - 1, 21);
				bool flag3 = i == this.newSelected;
				if (flag3)
				{
					g.setColor(13524492);
					int x = this.xScroll + i * this.TAB_W_NEW;
					int num5 = 89 + num4 - 10 + 21;
					g.fillRect(x, num5 - 3, this.TAB_W_NEW - 1, 3);
				}
				mFont.tahoma_7_grey.drawString(g, string.Empty + (i + 1).ToString(), this.xScroll + i * this.TAB_W_NEW + this.TAB_W_NEW / 2, 91 + num4 - 10, mFont.CENTER);
			}
			num3 = 1;
			int num6 = this.xScroll;
			int num7 = this.yScroll + num3 * this.ITEM_HEIGHT;
			int num8 = 34;
			int num9 = this.ITEM_HEIGHT - 1;
			for (int j = 0; j < 4; j++)
			{
				num6 = this.xScroll;
				num7 = this.yScroll + (j + num3) * this.ITEM_HEIGHT;
				bool flag4 = true;
				for (int k = 0; k < 5; k++)
				{
					bool flag5 = this.newSelected > 0;
					Item item;
					if (!flag5)
					{
						bool flag6 = j * 5 + k < arrItemBody.Length;
						if (flag6)
						{
							item = arrItemBody[j * 5 + k];
						}
						break;
					}
					int num10 = (this.newSelected - 1) * 20;
					bool flag7 = j * 5 + k + num10 < arrItemBag.Length;
					if (!flag7)
					{
						break;
					}
					item = arrItemBag[j * 5 + k + num10];
					num6 = this.xScroll + num8 * k;
					int num11 = this.sellectInventory % 5;
					int num12 = this.sellectInventory / 5;
					bool flag8 = this.newSelected > 0;
					if (flag8)
					{
						g.setColor(15196114);
					}
					else
					{
						g.setColor(9993045);
					}
					g.drawRect(num6, num7, num8, num9);
					bool flag9 = j == num12 && k == num11 && this.selected > 0;
					if (flag9)
					{
						g.setColor(16383818);
						this.itemInvenNew = item;
					}
					g.fillRect(num6 + 2, num7 + 2, num8 - 3, num9 - 3);
					bool flag10 = item != null;
					if (flag10)
					{
						int x2 = num6 + Panel.imgNew.getWidth() / 2;
						int y = num7;
						int num13 = 34;
						int h = this.ITEM_HEIGHT - 1;
						SmallImage.drawSmallImage(g, (int)item.template.iconID, num6 + num8 / 2, num7 + num9 / 2, 0, 3);
						bool flag11 = item.quantity > 1;
						if (flag11)
						{
							mFont.tahoma_7_yellow.drawString(g, string.Empty + item.quantity.ToString(), num6, num7 - mFont.tahoma_7_yellow.getHeight(), 1);
						}
						bool flag12 = item.newItem && GameCanvas.gameTick % 10 > 5;
						if (flag12)
						{
							g.drawImage(Panel.imgNew, x2, y, 3);
						}
						for (int l = 0; l < item.itemOption.Length; l++)
						{
							this.paintOptSlotItem(g, item.itemOption[l].optionTemplate.id, item.itemOption[l].param, x2, y, num13, h);
						}
					}
					bool flag13 = !flag4;
					if (flag13)
					{
						break;
					}
				}
			}
			num3 = ((this.newSelected != 0) ? 5 : 3);
			int num14 = this.yScroll + num3 * this.ITEM_HEIGHT + 5;
			bool flag14 = this.newSelected == 0;
			if (flag14)
			{
			}
			num6 = this.xScroll;
			num7 = this.yScroll + num3 * this.ITEM_HEIGHT;
			num8 = 34;
			num9 = this.ITEM_HEIGHT - 1;
			bool flag15 = this.newSelected == 0;
			if (flag15)
			{
				g.setColor(15196114);
				num3 = 1;
				this.nTableItem = 10;
				bool flag16 = this.eBanner != null;
				if (flag16)
				{
					this.eBanner.paint(g);
					this.eBanner.x = num6 + 34 + 34;
					this.eBanner.y = num7 + num9 - 25;
				}
				for (int m = 0; m < 10; m++)
				{
					Item item2 = arrItemBody[m];
					bool flag17 = m < 5;
					if (flag17)
					{
						num6 = this.xScroll;
						num7 = this.yScroll + (m + num3) * this.ITEM_HEIGHT;
					}
					else
					{
						int num15 = 5;
						num6 = this.xScroll + 4 * num8;
						num7 = this.yScroll + (m - num15 + num3) * this.ITEM_HEIGHT;
					}
					g.setColor(15196114);
					g.drawRect(num6, num7, num8, num9);
					bool flag18 = this.sellectInventory == m;
					if (flag18)
					{
						this.itemInvenNew = item2;
						g.setColor(16383818);
					}
					else
					{
						g.setColor(9993045);
					}
					g.fillRect(num6 + 2, num7 + 2, num8 - 3, num9 - 3);
					bool flag19 = item2 == null;
					if (flag19)
					{
						Panel.screenTab6.drawFrame(m, num6 + num8 / 2 - 8, num7 + num9 / 2 - 8, 0, mGraphics.TOP | mGraphics.LEFT, g);
					}
					bool flag20 = item2 != null;
					if (flag20)
					{
						SmallImage.drawSmallImage(g, (int)item2.template.iconID, num6 + num8 / 2, num7 + num9 / 2, 0, 3);
						bool flag21 = item2.quantity > 1;
						if (flag21)
						{
							mFont.tahoma_7_yellow.drawString(g, string.Empty + item2.quantity.ToString(), num6 + 4 * num8, num7 - mFont.tahoma_7_yellow.getHeight(), 1);
						}
					}
				}
				num3 = 1;
				num6 = this.xScroll + 34;
				num7 = this.yScroll + num3 * this.ITEM_HEIGHT;
				num9 = 4 * (this.ITEM_HEIGHT - 1);
				global::Char.myCharz().paintCharBody(g, num6 + 34 + 17, num7 + num9 - 25, 1, 0, true);
				num3 = 3;
				int num16 = 2;
				num6 = this.xScroll + 34;
				num7 = this.yScroll + (1 + num3) * this.ITEM_HEIGHT - 1;
				num8 = 102;
				num9 = this.ITEM_HEIGHT * num16;
				g.setColor(15196114);
				g.drawRect(num6, num7, num8, num9);
				g.setColor(9993045);
				g.fillRect(num6 + 1, num7 + 1, num8 - 2, num9 - 2);
				this.paintItemBodyBagInfo(g, num6 + 3, num7 - 2);
				num3 = ((this.newSelected != 0) ? 5 : 6);
				num14 = this.yScroll + num3 * this.ITEM_HEIGHT;
				g.setColor(15196114);
				bool flag22 = this.newSelected == 0;
				if (flag22)
				{
					num16 = 1;
				}
				g.drawRect(this.xScroll, num14, this.wScroll, this.ITEM_HEIGHT * num16);
				g.setColor(16777215);
				g.fillRect(this.xScroll + 1, num14 + 1, this.wScroll - 2, this.ITEM_HEIGHT * num16 - 2);
			}
			bool flag23 = this.itemInvenNew != null && this.itemInvenNew.itemOption != null;
			if (flag23)
			{
				string str = string.Empty;
				mFont mFont = mFont.tahoma_7_green2;
				bool flag24 = this.itemInvenNew.itemOption != null;
				if (flag24)
				{
					for (int n = 0; n < this.itemInvenNew.itemOption.Length; n++)
					{
						bool flag25 = this.itemInvenNew.itemOption[n].optionTemplate.id == 72;
						if (flag25)
						{
							str = " [+" + this.itemInvenNew.itemOption[n].param.ToString() + "]";
						}
						bool flag26 = this.itemInvenNew.itemOption[n].optionTemplate.id == 41;
						if (flag26)
						{
							bool flag27 = this.itemInvenNew.itemOption[n].param == 1;
							if (flag27)
							{
								mFont = Panel.GetFont(0);
							}
							else
							{
								bool flag28 = this.itemInvenNew.itemOption[n].param == 2;
								if (flag28)
								{
									mFont = Panel.GetFont(2);
								}
								else
								{
									bool flag29 = this.itemInvenNew.itemOption[n].param == 3;
									if (flag29)
									{
										mFont = Panel.GetFont(8);
									}
									else
									{
										bool flag30 = this.itemInvenNew.itemOption[n].param == 4;
										if (flag30)
										{
											mFont = Panel.GetFont(7);
										}
									}
								}
							}
						}
					}
				}
				mFont.drawString(g, this.itemInvenNew.template.name + str, this.xScroll + 5, num14 + 1, 0);
				string text = string.Empty;
				bool flag31 = this.itemInvenNew.itemOption != null;
				if (flag31)
				{
					bool flag32 = this.itemInvenNew.itemOption.Length != 0 && this.itemInvenNew.itemOption[0] != null && this.itemInvenNew.itemOption[0].optionTemplate.id != 102 && this.itemInvenNew.itemOption[0].optionTemplate.id != 107;
					if (flag32)
					{
						text += this.itemInvenNew.itemOption[0].getOptionString();
					}
					mFont mFont2 = mFont.tahoma_7_blue;
					bool flag33 = this.itemInvenNew.compare < 0 && this.itemInvenNew.template.type != 5;
					if (flag33)
					{
						mFont2 = mFont.tahoma_7_red;
					}
					bool flag34 = this.itemInvenNew.itemOption.Length > 1;
					if (flag34)
					{
						for (int num17 = 1; num17 < 2; num17++)
						{
							bool flag35 = this.itemInvenNew.itemOption[num17] != null && this.itemInvenNew.itemOption[num17].optionTemplate.id != 102 && this.itemInvenNew.itemOption[num17].optionTemplate.id != 107;
							if (flag35)
							{
								text = text + "," + this.itemInvenNew.itemOption[num17].getOptionString();
							}
						}
					}
					try
					{
						bool flag36 = mFont2.getWidth(text) > this.wScroll;
						if (flag36)
						{
							text = mFont2.splitFontArray(text, this.wScroll)[0];
						}
					}
					catch (Exception)
					{
					}
					mFont2.drawString(g, text, this.xScroll + 5, num14 + 11, mFont.LEFT);
				}
			}
		}
		bool flag37 = flag && this.isnewInventory;
		if (!flag37)
		{
			g.setColor(16711680);
			Item[] arrItemBody2 = global::Char.myCharz().arrItemBody;
			Item[] arrItemBag2 = global::Char.myCharz().arrItemBag;
			this.currentListLength = this.checkCurrentListLength(arrItemBody2.Length + arrItemBag2.Length);
			int num18 = (arrItemBody2.Length + arrItemBag2.Length) / 20 + (((arrItemBody2.Length + arrItemBag2.Length) % 20 > 0) ? 1 : 0);
			this.TAB_W_NEW = this.wScroll / num18;
			for (int num19 = 0; num19 < num18; num19++)
			{
				int num20 = (num19 == this.newSelected && this.selected == 0) ? ((GameCanvas.gameTick % 10 < 7) ? -1 : 0) : 0;
				g.setColor((num19 != this.newSelected) ? 15723751 : 16383818);
				g.fillRect(this.xScroll + num19 * this.TAB_W_NEW, 89 + num20 - 10, this.TAB_W_NEW - 1, 21);
				bool flag38 = num19 == this.newSelected;
				if (flag38)
				{
					g.setColor(13524492);
					int x3 = this.xScroll + num19 * this.TAB_W_NEW;
					int num21 = 89 + num20 - 10 + 21;
					g.fillRect(x3, num21 - 3, this.TAB_W_NEW - 1, 3);
				}
				mFont.tahoma_7_grey.drawString(g, string.Empty + (num19 + 1).ToString(), this.xScroll + num19 * this.TAB_W_NEW + this.TAB_W_NEW / 2, 91 + num20 - 10, mFont.CENTER);
			}
			g.setClip(this.xScroll, this.yScroll + 21, this.wScroll, this.hScroll - 21);
			g.translate(0, -this.cmy);
			try
			{
				for (int num22 = 1; num22 < this.currentListLength; num22++)
				{
					int num23 = this.xScroll + 36;
					int num24 = this.yScroll + num22 * this.ITEM_HEIGHT;
					int num25 = this.wScroll - 36;
					int h2 = this.ITEM_HEIGHT - 1;
					int num26 = this.xScroll;
					int num27 = this.yScroll + num22 * this.ITEM_HEIGHT;
					int num28 = 34;
					int num29 = this.ITEM_HEIGHT - 1;
					bool flag39 = num24 - this.cmy > this.yScroll + this.hScroll || num24 - this.cmy < this.yScroll - this.ITEM_HEIGHT;
					if (!flag39)
					{
						bool inventorySelect_isbody = this.GetInventorySelect_isbody(num22, this.newSelected, global::Char.myCharz().arrItemBody);
						int inventorySelect_body = this.GetInventorySelect_body(num22, this.newSelected);
						int inventorySelect_bag = this.GetInventorySelect_bag(num22, this.newSelected, global::Char.myCharz().arrItemBody);
						g.setColor((num22 == this.selected) ? 16383818 : ((!inventorySelect_isbody) ? 15723751 : 15196114));
						g.fillRect(num23, num24, num25, h2);
						g.setColor((num22 == this.selected) ? 9541120 : ((!inventorySelect_isbody) ? 11837316 : 9993045));
						Item item3 = (!inventorySelect_isbody) ? arrItemBag2[inventorySelect_bag] : arrItemBody2[inventorySelect_body];
						bool flag40 = item3 != null;
						if (flag40)
						{
							for (int num30 = 0; num30 < item3.itemOption.Length; num30++)
							{
								bool flag41 = item3.itemOption[num30].optionTemplate.id == 72 && item3.itemOption[num30].param > 0;
								if (flag41)
								{
									byte id = (byte)Panel.GetColor_Item_Upgrade(item3.itemOption[num30].param);
									int color_ItemBg = Panel.GetColor_ItemBg((int)id);
									bool flag42 = color_ItemBg != -1;
									if (flag42)
									{
										g.setColor((num22 != this.selected) ? Panel.GetColor_ItemBg((int)id) : Panel.GetColor_ItemBg((int)id));
									}
								}
							}
						}
						g.fillRect(num26, num27, num28, num29);
						bool flag43 = item3 != null && item3.isSelect && GameCanvas.panel.type == 12;
						if (flag43)
						{
							g.setColor((num22 != this.selected) ? 6047789 : 7040779);
							g.fillRect(num26, num27, num28, num29);
						}
						bool flag44 = item3 == null;
						if (!flag44)
						{
							string text2 = string.Empty;
							mFont mFont3 = mFont.tahoma_7_green2;
							bool flag45 = item3.itemOption != null;
							if (flag45)
							{
								for (int num31 = 0; num31 < item3.itemOption.Length; num31++)
								{
									bool flag46 = item3.itemOption[num31].optionTemplate.id == 72;
									if (flag46)
									{
										text2 = " [+" + item3.itemOption[num31].param.ToString() + "]";
									}
									bool flag47 = item3.itemOption[num31].optionTemplate.id == 41;
									if (flag47)
									{
										bool flag48 = item3.itemOption[num31].param == 1;
										if (flag48)
										{
											mFont3 = Panel.GetFont(0);
										}
										else
										{
											bool flag49 = item3.itemOption[num31].param == 2;
											if (flag49)
											{
												mFont3 = Panel.GetFont(2);
											}
											else
											{
												bool flag50 = item3.itemOption[num31].param == 3;
												if (flag50)
												{
													mFont3 = Panel.GetFont(8);
												}
												else
												{
													bool flag51 = item3.itemOption[num31].param == 4;
													if (flag51)
													{
														mFont3 = Panel.GetFont(7);
													}
												}
											}
										}
									}
								}
							}
							mFont3.drawString(g, string.Concat(new string[]
							{
								"[",
								item3.template.id.ToString(),
								"]",
								item3.template.name,
								text2
							}), num23 + 5, num24 + 1, 0);
							string text3 = string.Empty;
							bool flag52 = item3.itemOption != null;
							if (flag52)
							{
								bool flag53 = item3.itemOption.Length != 0 && item3.itemOption[0] != null && item3.itemOption[0].optionTemplate.id != 102 && item3.itemOption[0].optionTemplate.id != 107;
								if (flag53)
								{
									text3 += item3.itemOption[0].getOptionString();
								}
								mFont mFont4 = mFont.tahoma_7_blue;
								bool flag54 = item3.compare < 0 && item3.template.type != 5;
								if (flag54)
								{
									mFont4 = mFont.tahoma_7_red;
								}
								bool flag55 = item3.itemOption.Length > 1;
								if (flag55)
								{
									for (int num32 = 1; num32 < 2; num32++)
									{
										bool flag56 = item3.itemOption[num32] != null && item3.itemOption[num32].optionTemplate.id != 102 && item3.itemOption[num32].optionTemplate.id != 107;
										if (flag56)
										{
											text3 = text3 + "," + item3.itemOption[num32].getOptionString();
										}
									}
								}
								mFont4.drawString(g, text3, num23 + 5, num24 + 11, mFont.LEFT);
							}
							SmallImage.drawSmallImage(g, (int)item3.template.iconID, num26 + num28 / 2, num27 + num29 / 2, 0, 3);
							bool flag57 = item3.itemOption != null;
							if (flag57)
							{
								for (int num33 = 0; num33 < item3.itemOption.Length; num33++)
								{
									this.paintOptItem(g, item3.itemOption[num33].optionTemplate.id, item3.itemOption[num33].param, num26, num27, num28, num29);
								}
								for (int num34 = 0; num34 < item3.itemOption.Length; num34++)
								{
									this.paintOptSlotItem(g, item3.itemOption[num34].optionTemplate.id, item3.itemOption[num34].param, num26, num27, num28, num29);
								}
							}
							bool flag58 = item3.quantity > 1;
							if (flag58)
							{
								mFont.tahoma_7_yellow.drawString(g, string.Empty + item3.quantity.ToString(), num26 + num28, num27 + num29 - mFont.tahoma_7_yellow.getHeight(), 1);
							}
						}
					}
				}
			}
			catch (Exception)
			{
			}
			this.paintScrollArrow(g);
		}
	}

	// Token: 0x0600089D RID: 2205 RVA: 0x0008CA64 File Offset: 0x0008AC64
	private void paintTab(mGraphics g)
	{
		bool flag = this.type == 23 || this.type == 24;
		if (flag)
		{
			g.setColor(13524492);
			g.fillRect(this.X + 1, 78, this.W - 2, 1);
			mFont.tahoma_7b_dark.drawString(g, mResources.gameInfo, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
		}
		else
		{
			bool flag2 = this.type == 20;
			if (flag2)
			{
				g.setColor(13524492);
				g.fillRect(this.X + 1, 78, this.W - 2, 1);
				mFont.tahoma_7b_dark.drawString(g, mResources.account, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
			}
			else
			{
				bool flag3 = this.type == 22;
				if (flag3)
				{
					g.setColor(13524492);
					g.fillRect(this.X + 1, 78, this.W - 2, 1);
					mFont.tahoma_7b_dark.drawString(g, mResources.autoFunction, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
				}
				else
				{
					bool flag4 = this.type == 19;
					if (flag4)
					{
						g.setColor(13524492);
						g.fillRect(this.X + 1, 78, this.W - 2, 1);
						mFont.tahoma_7b_dark.drawString(g, mResources.option, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
					}
					else
					{
						bool flag5 = this.type == 18;
						if (flag5)
						{
							g.setColor(13524492);
							g.fillRect(this.X + 1, 78, this.W - 2, 1);
							mFont.tahoma_7b_dark.drawString(g, mResources.change_flag, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
						}
						else
						{
							bool flag6 = this.type == 13 && this.Equals(GameCanvas.panel2);
							if (flag6)
							{
								g.setColor(13524492);
								g.fillRect(this.X + 1, 78, this.W - 2, 1);
								mFont.tahoma_7b_dark.drawString(g, mResources.item_receive2, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
							}
							else
							{
								bool flag7 = this.type == 12 && GameCanvas.panel2 != null;
								if (flag7)
								{
									g.setColor(13524492);
									g.fillRect(this.X + 1, 78, this.W - 2, 1);
									mFont.tahoma_7b_dark.drawString(g, mResources.UPGRADE, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
								}
								else
								{
									bool flag8 = this.type == 11;
									if (flag8)
									{
										g.setColor(13524492);
										g.fillRect(this.X + 1, 78, this.W - 2, 1);
										mFont.tahoma_7b_dark.drawString(g, mResources.friend, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
									}
									else
									{
										bool flag9 = this.type == 16;
										if (flag9)
										{
											g.setColor(13524492);
											g.fillRect(this.X + 1, 78, this.W - 2, 1);
											mFont.tahoma_7b_dark.drawString(g, mResources.enemy, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
										}
										else
										{
											bool flag10 = this.type == 15;
											if (flag10)
											{
												g.setColor(13524492);
												g.fillRect(this.X + 1, 78, this.W - 2, 1);
												mFont.tahoma_7b_dark.drawString(g, this.topName, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
											}
											else
											{
												bool flag11 = this.type == 2 && GameCanvas.panel2 != null;
												if (flag11)
												{
													g.setColor(13524492);
													g.fillRect(this.X + 1, 78, this.W - 2, 1);
													mFont.tahoma_7b_dark.drawString(g, mResources.chest, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
												}
												else
												{
													bool flag12 = this.type == 9;
													if (flag12)
													{
														g.setColor(13524492);
														g.fillRect(this.X + 1, 78, this.W - 2, 1);
														mFont.tahoma_7b_dark.drawString(g, mResources.achievement_mission, this.xScroll + this.wScroll / 2, 59, mFont.CENTER);
													}
													else
													{
														bool flag13 = this.type == 3;
														if (flag13)
														{
															g.setColor(13524492);
															g.fillRect(this.X + 1, 78, this.W - 2, 1);
															mFont.tahoma_7b_dark.drawString(g, mResources.select_zone, this.startTabPos + this.TAB_W / 2, 59, mFont.CENTER);
														}
														else
														{
															bool flag14 = this.type == 14;
															if (flag14)
															{
																g.setColor(13524492);
																g.fillRect(this.X + 1, 78, this.W - 2, 1);
																mFont.tahoma_7b_dark.drawString(g, mResources.select_map, this.startTabPos + this.TAB_W / 2, 59, mFont.CENTER);
															}
															else
															{
																bool flag15 = this.type == 4;
																if (flag15)
																{
																	mFont.tahoma_7b_dark.drawString(g, mResources.map, this.startTabPos + this.TAB_W / 2, 59, mFont.CENTER);
																	g.setColor(13524492);
																	g.fillRect(this.X + 1, 78, this.W - 2, 1);
																}
																else
																{
																	bool flag16 = this.type == 7;
																	if (flag16)
																	{
																		mFont.tahoma_7b_dark.drawString(g, mResources.trangbi, this.startTabPos + this.TAB_W / 2, 59, mFont.CENTER);
																		g.setColor(13524492);
																		g.fillRect(this.X + 1, 78, this.W - 2, 1);
																	}
																	else
																	{
																		bool flag17 = this.type == 17;
																		if (flag17)
																		{
																			mFont.tahoma_7b_dark.drawString(g, mResources.kigui, this.startTabPos + this.TAB_W / 2, 59, mFont.CENTER);
																			g.setColor(13524492);
																			g.fillRect(this.X + 1, 78, this.W - 2, 1);
																		}
																		else
																		{
																			bool flag18 = this.type == 8;
																			if (flag18)
																			{
																				mFont.tahoma_7b_dark.drawString(g, mResources.msg, this.startTabPos + this.TAB_W / 2, 59, mFont.CENTER);
																				g.setColor(13524492);
																				g.fillRect(this.X + 1, 78, this.W - 2, 1);
																			}
																			else
																			{
																				bool flag19 = this.type == 10;
																				if (flag19)
																				{
																					mFont.tahoma_7b_dark.drawString(g, mResources.wat_do_u_want, this.startTabPos + this.TAB_W / 2, 59, mFont.CENTER);
																					g.setColor(13524492);
																					g.fillRect(this.X + 1, 78, this.W - 2, 1);
																				}
																				else
																				{
																					bool flag20 = this.currentTabIndex == 3 && this.mainTabName.Length != 4;
																					if (flag20)
																					{
																						g.translate(-this.cmx, 0);
																					}
																					for (int i = 0; i < this.currentTabName.Length; i++)
																					{
																						g.setColor((i != this.currentTabIndex) ? 16773296 : 6805896);
																						PopUp.paintPopUp(g, this.startTabPos + i * this.TAB_W, 52, this.TAB_W - 1, 25, (i == this.currentTabIndex) ? 1 : 0, true);
																						bool flag21 = i == this.keyTouchTab;
																						if (flag21)
																						{
																							g.drawImage(ItemMap.imageFlare, this.startTabPos + i * this.TAB_W + this.TAB_W / 2, 62, 3);
																						}
																						mFont mFont = (i != this.currentTabIndex) ? mFont.tahoma_7_grey : mFont.tahoma_7_green2;
																						bool flag22 = !this.currentTabName[i][1].Equals(string.Empty);
																						if (flag22)
																						{
																							mFont.drawString(g, this.currentTabName[i][0], this.startTabPos + i * this.TAB_W + this.TAB_W / 2, 53, mFont.CENTER);
																							mFont.drawString(g, this.currentTabName[i][1], this.startTabPos + i * this.TAB_W + this.TAB_W / 2, 64, mFont.CENTER);
																						}
																						else
																						{
																							mFont.drawString(g, this.currentTabName[i][0], this.startTabPos + i * this.TAB_W + this.TAB_W / 2, 59, mFont.CENTER);
																						}
																						bool flag23 = this.type == 0 && this.currentTabName.Length == 5 && GameScr.isNewClanMessage && GameCanvas.gameTick % 4 == 0;
																						if (flag23)
																						{
																							g.drawImage(ItemMap.imageFlare, this.startTabPos + 3 * this.TAB_W + this.TAB_W / 2, 77, mGraphics.BOTTOM | mGraphics.HCENTER);
																						}
																					}
																					g.setColor(13524492);
																					g.fillRect(1, 78, this.W - 2, 1);
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x0600089E RID: 2206 RVA: 0x0008D428 File Offset: 0x0008B628
	private void paintBottomMoneyInfo(mGraphics g)
	{
		bool flag = this.type != 13 || (this.currentTabIndex != 2 && !this.Equals(GameCanvas.panel2));
		if (flag)
		{
			g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			g.setColor(11837316);
			g.fillRect(this.X + 1, this.H - 15, this.W - 2, 14);
			g.setColor(13524492);
			g.fillRect(this.X + 1, this.H - 15, this.W - 2, 1);
			g.drawImage(Panel.imgXu, this.X + 11, this.H - 7, 3);
			g.drawImage(Panel.imgLuong, this.X + 75, this.H - 8, 3);
			mFont.tahoma_7_yellow.drawString(g, global::Char.myCharz().xuStr + string.Empty, this.X + 24, this.H - 13, mFont.LEFT, mFont.tahoma_7_grey);
			mFont.tahoma_7_yellow.drawString(g, global::Char.myCharz().luongStr + string.Empty, this.X + 85, this.H - 13, mFont.LEFT, mFont.tahoma_7_grey);
			g.drawImage(Panel.imgLuongKhoa, this.X + 130, this.H - 8, 3);
			mFont.tahoma_7_yellow.drawString(g, global::Char.myCharz().luongKhoaStr + string.Empty, this.X + 140, this.H - 13, mFont.LEFT, mFont.tahoma_7_grey);
		}
	}

	// Token: 0x0600089F RID: 2207 RVA: 0x0008D5E8 File Offset: 0x0008B7E8
	private void paintClanInfo(mGraphics g)
	{
		bool flag = global::Char.myCharz().clan == null;
		if (flag)
		{
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), 25, 50, 0, 33);
			mFont.tahoma_7b_white.drawString(g, mResources.not_join_clan, (this.wScroll - 50) / 2 + 50, 20, mFont.CENTER);
		}
		else
		{
			bool flag2 = !this.isViewMember;
			if (flag2)
			{
				Clan clan = global::Char.myCharz().clan;
				bool flag3 = clan != null;
				if (flag3)
				{
					SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), 25, 50, 0, 33);
					mFont.tahoma_7b_white.drawString(g, clan.name, 60, 4, mFont.LEFT, mFont.tahoma_7b_dark);
					mFont.tahoma_7_yellow.drawString(g, mResources.achievement_point + ": " + clan.powerPoint, 60, 16, mFont.LEFT, mFont.tahoma_7_grey);
					mFont.tahoma_7_yellow.drawString(g, mResources.clan_point + ": " + clan.clanPoint.ToString(), 60, 27, mFont.LEFT, mFont.tahoma_7_grey);
					mFont.tahoma_7_yellow.drawString(g, mResources.level + ": " + clan.level.ToString(), 60, 38, mFont.LEFT, mFont.tahoma_7_grey);
					TextInfo.paint(g, clan.slogan, 60, 38, this.wScroll - 70, this.ITEM_HEIGHT, mFont.tahoma_7_yellow);
				}
			}
			else
			{
				Clan clan2 = (this.currClan == null) ? global::Char.myCharz().clan : this.currClan;
				SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), 25, 50, 0, 33);
				mFont.tahoma_7b_white.drawString(g, clan2.name, 60, 4, mFont.LEFT, mFont.tahoma_7b_dark);
				mFont.tahoma_7_yellow.drawString(g, string.Concat(new string[]
				{
					mResources.member,
					": ",
					clan2.currMember.ToString(),
					"/",
					clan2.maxMember.ToString()
				}), 60, 16, mFont.LEFT, mFont.tahoma_7_grey);
				mFont.tahoma_7_yellow.drawString(g, mResources.clan_leader + ": " + clan2.leaderName, 60, 27, mFont.LEFT, mFont.tahoma_7_grey);
				TextInfo.paint(g, clan2.slogan, 60, 38, this.wScroll - 70, this.ITEM_HEIGHT, mFont.tahoma_7_yellow);
			}
		}
	}

	// Token: 0x060008A0 RID: 2208 RVA: 0x0008D878 File Offset: 0x0008BA78
	private void paintToolInfo(mGraphics g)
	{
		mFont.tahoma_7b_white.drawString(g, mResources.dragon_ball + " " + GameMidlet.VERSION, 60, 4, mFont.LEFT, mFont.tahoma_7b_dark);
		mFont.tahoma_7_yellow.drawString(g, mResources.character + ": " + global::Char.myCharz().cName, 60, 16, mFont.LEFT, mFont.tahoma_7_grey);
		string text = (!GameCanvas.loginScr.tfUser.getText().Equals(string.Empty)) ? GameCanvas.loginScr.tfUser.getText() : mResources.not_register_yet;
		mFont.tahoma_7_yellow.drawString(g, string.Concat(new string[]
		{
			mResources.account_server,
			" ",
			ServerListScreen.nameServer[ServerListScreen.ipSelect],
			": ",
			text
		}), 60, 27, mFont.LEFT, mFont.tahoma_7_grey);
	}

	// Token: 0x060008A1 RID: 2209 RVA: 0x0008D968 File Offset: 0x0008BB68
	private void paintGiaoDichInfo(mGraphics g)
	{
		mFont.tahoma_7_yellow.drawString(g, mResources.select_item, 60, 4, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, mResources.lock_trade, 60, 16, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, mResources.wait_opp_lock_trade, 60, 27, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, mResources.press_done, 60, 38, mFont.LEFT, mFont.tahoma_7_grey);
	}

	// Token: 0x060008A2 RID: 2210 RVA: 0x0008D9F1 File Offset: 0x0008BBF1
	private void paintMyInfo(mGraphics g)
	{
		this.paintCharInfo(g, global::Char.myCharz());
	}

	// Token: 0x060008A3 RID: 2211 RVA: 0x0008DA04 File Offset: 0x0008BC04
	private void paintPetInfo(mGraphics g)
	{
		mFont.tahoma_7_yellow.drawString(g, mResources.power + ": " + NinjaUtil.getMoneys(global::Char.myPetz().cPower), this.X + 60, 4, mFont.LEFT, mFont.tahoma_7_grey);
		bool flag = global::Char.myPetz().cPower > 0L;
		if (flag)
		{
			mFont.tahoma_7_yellow.drawString(g, (!global::Char.myPetz().me) ? global::Char.myPetz().currStrLevel : global::Char.myPetz().getStrLevel(), this.X + 60, 16, mFont.LEFT, mFont.tahoma_7_grey);
		}
		bool flag2 = global::Char.myPetz().cDamFull > 0L;
		if (flag2)
		{
			mFont.tahoma_7_yellow.drawString(g, mResources.hit_point + " :" + global::Char.myPetz().cDamFull.ToString(), this.X + 60, 27, mFont.LEFT, mFont.tahoma_7_grey);
		}
		bool flag3 = global::Char.myPetz().cMaxStamina > 0;
		if (flag3)
		{
			mFont.tahoma_7_yellow.drawString(g, mResources.vitality, this.X + 60, 38, mFont.LEFT, mFont.tahoma_7_grey);
			g.drawImage(GameScr.imgMPLost, this.X + 100, 41, 0);
			int num = global::Char.myPetz().cStamina * mGraphics.getImageWidth(GameScr.imgMP) / (int)global::Char.myPetz().cMaxStamina;
			g.setClip(100, this.X + 41, num, 20);
			g.drawImage(GameScr.imgMP, this.X + 100, 41, 0);
		}
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
	}

	// Token: 0x060008A4 RID: 2212 RVA: 0x0008DBB0 File Offset: 0x0008BDB0
	private void paintCharInfo(mGraphics g, global::Char c)
	{
		mFont.tahoma_7b_white.drawString(g, ((GameScr.isNewMember == 1) ? "       " : string.Empty) + c.cName, this.X + 60, 4, mFont.LEFT, mFont.tahoma_7b_dark);
		bool flag = GameScr.isNewMember == 1;
		if (flag)
		{
			SmallImage.drawSmallImage(g, 5427, this.X + 55, 4, 0, 0);
		}
		bool flag2 = c.cPower > 0L;
		if (flag2)
		{
			mFont.tahoma_7_yellow.drawString(g, (!c.me) ? c.currStrLevel : c.getStrLevel(), this.X + 60, 27, mFont.LEFT, mFont.tahoma_7_grey);
		}
		mFont.tahoma_7_yellow.drawString(g, mResources.power + ": " + NinjaUtil.getMoneys(c.cPower), this.X + 60, 38, mFont.LEFT, mFont.tahoma_7_grey);
		bool flag3 = c.cMaxStamina > 0;
		if (flag3)
		{
			mFont.tahoma_7_yellow.drawString(g, mResources.vitality + ": " + (global::Char.myCharz().cStamina / 100).ToString() + " %", this.X + 60, 16, mFont.LEFT, mFont.tahoma_7_grey);
		}
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
	}

	// Token: 0x060008A5 RID: 2213 RVA: 0x0008DD14 File Offset: 0x0008BF14
	private void paintCharInfo(mGraphics g, global::Char c, int x, int y)
	{
		mFont.tahoma_7b_white.drawString(g, ((GameScr.isNewMember == 1) ? "       " : string.Empty) + c.cName, x + 60, y + 4, mFont.LEFT, mFont.tahoma_7b_dark);
		bool flag = GameScr.isNewMember == 1;
		if (flag)
		{
			SmallImage.drawSmallImage(g, 5427, x + 55, y + 4, 0, 0);
		}
		bool flag2 = c.cMaxStamina > 0;
		if (flag2)
		{
			mFont.tahoma_7_yellow.drawString(g, mResources.vitality, x + 60, y + 16, mFont.LEFT, mFont.tahoma_7_grey);
			g.drawImage(GameScr.imgMPLost, x + 95, y + 19, 0);
			int num = c.cStamina * mGraphics.getImageWidth(GameScr.imgMP) / (int)c.cMaxStamina;
			g.drawImage(GameScr.imgMP, x + 95, y + 19, 0);
		}
		bool flag3 = c.cPower > 0L;
		if (flag3)
		{
			mFont.tahoma_7_yellow.drawString(g, (!c.me) ? c.currStrLevel : c.getStrLevel(), x + 60, y + 27, mFont.LEFT, mFont.tahoma_7_grey);
		}
		mFont.tahoma_7_yellow.drawString(g, mResources.power + ": " + NinjaUtil.getMoneys(c.cPower), x + 60, y + 38, mFont.LEFT, mFont.tahoma_7_grey);
	}

	// Token: 0x060008A6 RID: 2214 RVA: 0x0008DE7C File Offset: 0x0008C07C
	private void paintZoneInfo(mGraphics g)
	{
		mFont.tahoma_7b_white.drawString(g, mResources.zone + " " + TileMap.zoneID.ToString(), 60, 4, mFont.LEFT, mFont.tahoma_7b_dark);
		mFont.tahoma_7_yellow.drawString(g, TileMap.mapName, 60, 16, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7b_white.drawString(g, TileMap.zoneID.ToString() + string.Empty, 25, 27, mFont.CENTER);
	}

	// Token: 0x060008A7 RID: 2215 RVA: 0x0008DF04 File Offset: 0x0008C104
	public int getCompare(Item item)
	{
		bool flag = item == null;
		int result;
		if (flag)
		{
			result = -1;
		}
		else
		{
			bool flag2 = item.isTypeBody();
			if (flag2)
			{
				bool flag3 = item.itemOption == null;
				if (flag3)
				{
					result = -1;
				}
				else
				{
					ItemOption itemOption = item.itemOption[0];
					bool flag4 = itemOption.optionTemplate.id == 22;
					if (flag4)
					{
						itemOption.optionTemplate = GameScr.gI().iOptionTemplates[6];
						itemOption.param *= 1000;
					}
					bool flag5 = itemOption.optionTemplate.id == 23;
					if (flag5)
					{
						itemOption.optionTemplate = GameScr.gI().iOptionTemplates[7];
						itemOption.param *= 1000;
					}
					Item item2 = null;
					for (int i = 0; i < global::Char.myCharz().arrItemBody.Length; i++)
					{
						Item item3 = global::Char.myCharz().arrItemBody[i];
						bool flag6 = itemOption.optionTemplate.id == 22;
						if (flag6)
						{
							itemOption.optionTemplate = GameScr.gI().iOptionTemplates[6];
							itemOption.param *= 1000;
						}
						bool flag7 = itemOption.optionTemplate.id == 23;
						if (flag7)
						{
							itemOption.optionTemplate = GameScr.gI().iOptionTemplates[7];
							itemOption.param *= 1000;
						}
						bool flag8 = item3 != null && item3.itemOption != null && item3.template.type == item.template.type;
						if (flag8)
						{
							item2 = item3;
							break;
						}
					}
					bool flag9 = item2 == null;
					if (flag9)
					{
						this.isUp = true;
						result = itemOption.param;
					}
					else
					{
						int num = (item2 == null || item2.itemOption == null) ? itemOption.param : (itemOption.param - item2.itemOption[0].param);
						bool flag10 = num < 0;
						if (flag10)
						{
							this.isUp = false;
						}
						else
						{
							this.isUp = true;
						}
						result = num;
					}
				}
			}
			else
			{
				result = 0;
			}
		}
		return result;
	}

	// Token: 0x060008A8 RID: 2216 RVA: 0x0008E124 File Offset: 0x0008C324
	private void paintMapInfo(mGraphics g)
	{
		mFont.tahoma_7b_white.drawString(g, mResources.MENUGENDER[(int)TileMap.planetID], 60, 4, mFont.LEFT);
		string str = string.Empty;
		bool flag = TileMap.mapID >= 135 && TileMap.mapID <= 138;
		if (flag)
		{
			str = " " + mResources.tang + TileMap.zoneID.ToString();
		}
		mFont.tahoma_7_yellow.drawString(g, TileMap.mapName + str, 60, 16, mFont.LEFT);
		mFont.tahoma_7b_white.drawString(g, mResources.quest_place + ": ", 60, 27, mFont.LEFT);
		bool flag2 = GameScr.getTaskMapId() >= 0 && GameScr.getTaskMapId() <= TileMap.mapNames.Length - 1;
		if (flag2)
		{
			mFont.tahoma_7_yellow.drawString(g, TileMap.mapNames[GameScr.getTaskMapId()], 60, 38, mFont.LEFT);
		}
		else
		{
			mFont.tahoma_7_yellow.drawString(g, mResources.random, 60, 38, mFont.LEFT);
		}
	}

	// Token: 0x060008A9 RID: 2217 RVA: 0x0008E23C File Offset: 0x0008C43C
	private void paintShopInfo(mGraphics g)
	{
		bool flag = this.currentTabIndex == this.currentTabName.Length - 1 && GameCanvas.panel2 == null;
		if (flag)
		{
			this.paintMyInfo(g);
		}
		else
		{
			bool flag2 = this.selected < 0;
			if (flag2)
			{
				bool flag3 = this.typeShop != 2;
				if (flag3)
				{
					mFont.tahoma_7_white.drawString(g, mResources.say_hello, this.X + 60, 14, 0);
					mFont.tahoma_7_white.drawString(g, Panel.strWantToBuy, this.X + 60, 26, 0);
				}
				else
				{
					mFont.tahoma_7_white.drawString(g, mResources.say_hello, this.X + 60, 5, 0);
					mFont.tahoma_7_white.drawString(g, Panel.strWantToBuy, this.X + 60, 17, 0);
					mFont.tahoma_7_white.drawString(g, string.Concat(new string[]
					{
						mResources.page,
						" ",
						(this.currPageShop[this.currentTabIndex] + 1).ToString(),
						"/",
						this.maxPageShop[this.currentTabIndex].ToString()
					}), this.X + 60, 29, 0);
				}
			}
			else
			{
				bool flag4 = this.currentTabIndex < 0 || this.currentTabIndex > global::Char.myCharz().arrItemShop.Length - 1 || this.selected < 0 || this.selected > global::Char.myCharz().arrItemShop[this.currentTabIndex].Length - 1;
				if (!flag4)
				{
					Item item = global::Char.myCharz().arrItemShop[this.currentTabIndex][this.selected];
					bool flag5 = item != null;
					if (flag5)
					{
						bool flag6 = this.Equals(GameCanvas.panel) && this.currentTabIndex <= 3 && this.typeShop == 2;
						if (flag6)
						{
							mFont.tahoma_7b_white.drawString(g, string.Concat(new string[]
							{
								mResources.page,
								" ",
								(this.currPageShop[this.currentTabIndex] + 1).ToString(),
								"/",
								this.maxPageShop[this.currentTabIndex].ToString()
							}), this.X + 55, 4, 0);
						}
						mFont.tahoma_7b_white.drawString(g, item.template.name, this.X + 55, 24, 0);
						string st = mResources.pow_request + " " + Res.formatNumber((long)item.template.strRequire);
						bool flag7 = (long)item.template.strRequire > global::Char.myCharz().cPower;
						if (flag7)
						{
							mFont.tahoma_7_yellow.drawString(g, st, this.X + 55, 35, 0);
						}
						else
						{
							mFont.tahoma_7_green.drawString(g, st, this.X + 55, 35, 0);
						}
					}
				}
			}
		}
	}

	// Token: 0x060008AA RID: 2218 RVA: 0x0008E540 File Offset: 0x0008C740
	private void paintItemBoxInfo(mGraphics g)
	{
		string st = string.Concat(new string[]
		{
			mResources.used,
			": ",
			this.hasUse.ToString(),
			"/",
			global::Char.myCharz().arrItemBox.Length.ToString(),
			" ",
			mResources.place
		});
		mFont.tahoma_7b_white.drawString(g, mResources.chest, 60, 4, 0);
		mFont.tahoma_7_yellow.drawString(g, st, 60, 16, 0);
	}

	// Token: 0x060008AB RID: 2219 RVA: 0x0008E5D0 File Offset: 0x0008C7D0
	private void paintSkillInfo(mGraphics g)
	{
		mFont.tahoma_7_white.drawString(g, "Top " + global::Char.myCharz().rank.ToString(), this.X + 45 + (this.W - 50) / 2, 2, mFont.CENTER);
		mFont.tahoma_7_yellow.drawString(g, mResources.potential_point, this.X + 45 + (this.W - 50) / 2, 14, mFont.CENTER);
		mFont.tahoma_7_white.drawString(g, string.Empty + NinjaUtil.getMoneys(global::Char.myCharz().cTiemNang), this.X + ((GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0) + 45 + (this.W - 50) / 2, 26, mFont.CENTER);
		mFont.tahoma_7_yellow.drawString(g, mResources.active_point + ": " + NinjaUtil.getMoneys(global::Char.myCharz().cNangdong), this.X + ((GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0) + 45 + (this.W - 50) / 2, 38, mFont.CENTER);
	}

	// Token: 0x060008AC RID: 2220 RVA: 0x0008E704 File Offset: 0x0008C904
	private void paintItemBodyBagInfo(mGraphics g)
	{
		mFont.tahoma_7_yellow.drawString(g, string.Concat(new string[]
		{
			mResources.HP,
			": ",
			global::Char.myCharz().cHP.ToString(),
			" / ",
			global::Char.myCharz().cHPFull.ToString()
		}), this.X + 60, 2, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, string.Concat(new string[]
		{
			mResources.KI,
			": ",
			global::Char.myCharz().cMP.ToString(),
			" / ",
			global::Char.myCharz().cMPFull.ToString()
		}), this.X + 60, 14, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, mResources.hit_point + ": " + global::Char.myCharz().cDamFull.ToString(), this.X + 60, 26, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, string.Concat(new string[]
		{
			mResources.armor,
			": ",
			global::Char.myCharz().cDefull.ToString(),
			", ",
			mResources.critical,
			": ",
			global::Char.myCharz().cCriticalFull.ToString(),
			"%"
		}), this.X + 60, 38, mFont.LEFT, mFont.tahoma_7_grey);
	}

	// Token: 0x060008AD RID: 2221 RVA: 0x0008E8A0 File Offset: 0x0008CAA0
	private void paintItemBodyBagInfo(mGraphics g, int x, int y)
	{
		mFont.tahoma_7_yellow.drawString(g, string.Concat(new string[]
		{
			mResources.HP,
			": ",
			global::Char.myCharz().cHP.ToString(),
			" / ",
			global::Char.myCharz().cHPFull.ToString()
		}), x, y + 2, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, string.Concat(new string[]
		{
			mResources.KI,
			": ",
			global::Char.myCharz().cMP.ToString(),
			" / ",
			global::Char.myCharz().cMPFull.ToString()
		}), x, y + 14, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, mResources.hit_point + ": " + global::Char.myCharz().cDamFull.ToString(), x, y + 26, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, string.Concat(new string[]
		{
			mResources.armor,
			": ",
			global::Char.myCharz().cDefull.ToString(),
			", ",
			mResources.critical,
			": ",
			global::Char.myCharz().cCriticalFull.ToString(),
			"%"
		}), x, y + 38, mFont.LEFT, mFont.tahoma_7_grey);
	}

	// Token: 0x060008AE RID: 2222 RVA: 0x0008EA24 File Offset: 0x0008CC24
	private void paintTopInfo(mGraphics g)
	{
		g.setClip(this.X + 1, this.Y, this.W - 2, this.yScroll - 2);
		g.setColor(9993045);
		g.fillRect(this.X, this.Y, this.W - 2, 50);
		switch (this.type)
		{
		case 0:
		{
			bool flag = this.currentTabIndex == 0;
			if (flag)
			{
				SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
				this.paintMyInfo(g);
			}
			bool flag2 = this.currentTabIndex == 1;
			if (flag2)
			{
				SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
				bool flag3 = this.isnewInventory;
				if (flag3)
				{
					this.paintCharInfo(g, global::Char.myCharz());
				}
				else
				{
					this.paintItemBodyBagInfo(g);
				}
			}
			bool flag4 = this.currentTabIndex == 2;
			if (flag4)
			{
				SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
				this.paintSkillInfo(g);
			}
			bool flag5 = this.currentTabIndex == 3;
			if (flag5)
			{
				bool flag6 = this.mainTabName.Length == 5;
				if (flag6)
				{
					this.paintClanInfo(g);
				}
				else
				{
					SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
					this.paintToolInfo(g);
				}
			}
			bool flag7 = this.currentTabIndex == 4;
			if (flag7)
			{
				SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
				this.paintToolInfo(g);
			}
			break;
		}
		case 1:
		{
			bool flag8 = this.currentTabIndex == this.currentTabName.Length - 1 && GameCanvas.panel2 == null;
			if (flag8)
			{
				SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			}
			else
			{
				bool flag9 = global::Char.myCharz().npcFocus != null;
				if (flag9)
				{
					SmallImage.drawSmallImage(g, global::Char.myCharz().npcFocus.avatar, this.X + 25, 50, 0, 33);
				}
			}
			this.paintShopInfo(g);
			break;
		}
		case 2:
		{
			bool flag10 = this.currentTabIndex == 0;
			if (flag10)
			{
				SmallImage.drawSmallImage(g, 526, this.X + 25, 50, 0, 33);
				this.paintItemBoxInfo(g);
			}
			bool flag11 = this.currentTabIndex == 1;
			if (flag11)
			{
				SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
				this.paintItemBodyBagInfo(g);
			}
			break;
		}
		case 3:
			SmallImage.drawSmallImage(g, 561, this.X + 25, 50, 0, 33);
			this.paintZoneInfo(g);
			break;
		case 4:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintMapInfo(g);
			break;
		case 7:
		case 17:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintMyInfo(g);
			break;
		case 8:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintMyInfo(g);
			break;
		case 9:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintMyInfo(g);
			break;
		case 10:
		{
			bool flag12 = this.charMenu != null;
			if (flag12)
			{
				SmallImage.drawSmallImage(g, this.charMenu.avatarz(), this.X + 25, 50, 0, 33);
				this.paintCharInfo(g, this.charMenu);
			}
			break;
		}
		case 11:
		case 16:
		case 23:
		case 24:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintMyInfo(g);
			break;
		case 12:
		{
			bool flag13 = this.currentTabIndex == 0;
			if (flag13)
			{
				int id = 1410;
				for (int i = 0; i < GameScr.vNpc.size(); i++)
				{
					Npc npc = (Npc)GameScr.vNpc.elementAt(i);
					bool flag14 = npc.template.npcTemplateId == this.idNPC;
					if (flag14)
					{
						id = npc.avatar;
					}
				}
				SmallImage.drawSmallImage(g, id, this.X + 25, 50, 0, 33);
				this.paintCombineInfo(g);
			}
			bool flag15 = this.currentTabIndex == 1;
			if (flag15)
			{
				SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
				this.paintMyInfo(g);
			}
			break;
		}
		case 13:
		{
			bool flag16 = this.currentTabIndex == 0 || this.currentTabIndex == 1;
			if (flag16)
			{
				bool flag17 = this.Equals(GameCanvas.panel);
				if (flag17)
				{
					SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
					this.paintGiaoDichInfo(g);
				}
				bool flag18 = this.Equals(GameCanvas.panel2) && this.charMenu != null;
				if (flag18)
				{
					SmallImage.drawSmallImage(g, this.charMenu.avatarz(), this.X + 25, 50, 0, 33);
					this.paintCharInfo(g, this.charMenu);
				}
			}
			bool flag19 = this.currentTabIndex == 2 && this.charMenu != null;
			if (flag19)
			{
				SmallImage.drawSmallImage(g, this.charMenu.avatarz(), this.X + 25, 50, 0, 33);
				this.paintCharInfo(g, this.charMenu);
			}
			break;
		}
		case 14:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintMapInfo(g);
			break;
		case 15:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintMyInfo(g);
			break;
		case 18:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintMyInfo(g);
			break;
		case 19:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintToolInfo(g);
			break;
		case 20:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintToolInfo(g);
			break;
		case 21:
		{
			bool flag20 = this.currentTabIndex == 0;
			if (flag20)
			{
				SmallImage.drawSmallImage(g, global::Char.myPetz().avatarz(), this.X + 25, 50, 0, 33);
				this.paintPetInfo(g);
			}
			bool flag21 = this.currentTabIndex == 1;
			if (flag21)
			{
				SmallImage.drawSmallImage(g, global::Char.myPetz().avatarz(), this.X + 25, 50, 0, 33);
				this.paintPetStatusInfo(g);
			}
			bool flag22 = this.currentTabIndex == 2;
			if (flag22)
			{
				SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
				this.paintItemBodyBagInfo(g);
			}
			break;
		}
		case 22:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintToolInfo(g);
			break;
		case 25:
			SmallImage.drawSmallImage(g, global::Char.myCharz().avatarz(), this.X + 25, 50, 0, 33);
			this.paintMyInfo(g);
			break;
		}
	}

	// Token: 0x060008AF RID: 2223 RVA: 0x0008F235 File Offset: 0x0008D435
	private void paintChatManager(mGraphics g)
	{
	}

	// Token: 0x060008B0 RID: 2224 RVA: 0x0008F238 File Offset: 0x0008D438
	private void paintChatPlayer(mGraphics g)
	{
	}

	// Token: 0x060008B1 RID: 2225 RVA: 0x0008F23C File Offset: 0x0008D43C
	private string getStatus(int status)
	{
		if (!true)
		{
		}
		string result;
		switch (status)
		{
		case 0:
			result = mResources.follow;
			break;
		case 1:
			result = mResources.defend;
			break;
		case 2:
			result = mResources.attack;
			break;
		case 3:
			result = mResources.gohome;
			break;
		default:
			result = "aaa";
			break;
		}
		if (!true)
		{
		}
		return result;
	}

	// Token: 0x060008B2 RID: 2226 RVA: 0x0008F298 File Offset: 0x0008D498
	private void paintPetStatusInfo(mGraphics g)
	{
		mFont.tahoma_7b_white.drawString(g, "HP: " + global::Char.myPetz().cHP.ToString() + "/" + global::Char.myPetz().cHPFull.ToString(), this.X + 60, 4, mFont.LEFT, mFont.tahoma_7b_dark);
		mFont.tahoma_7b_white.drawString(g, "MP: " + global::Char.myPetz().cMP.ToString() + "/" + global::Char.myPetz().cMPFull.ToString(), this.X + 60, 16, mFont.LEFT, mFont.tahoma_7b_dark);
		mFont.tahoma_7_yellow.drawString(g, string.Concat(new string[]
		{
			mResources.critical,
			": ",
			global::Char.myPetz().cCriticalFull.ToString(),
			"   ",
			mResources.armor,
			": ",
			global::Char.myPetz().cDefull.ToString()
		}), this.X + 60, 27, mFont.LEFT, mFont.tahoma_7_grey);
		mFont.tahoma_7_yellow.drawString(g, mResources.status + ": " + this.strStatus[(int)global::Char.myPetz().petStatus], this.X + 60, 38, mFont.LEFT, mFont.tahoma_7_grey);
	}

	// Token: 0x060008B3 RID: 2227 RVA: 0x0008F3FC File Offset: 0x0008D5FC
	private void paintCombineInfo(mGraphics g)
	{
		bool flag = this.combineTopInfo != null;
		if (flag)
		{
			for (int i = 0; i < this.combineTopInfo.Length; i++)
			{
				mFont.tahoma_7_white.drawString(g, this.combineTopInfo[i], this.X + 45 + (this.W - 50) / 2, 5 + i * 14, mFont.CENTER);
			}
		}
	}

	// Token: 0x060008B4 RID: 2228 RVA: 0x0008F466 File Offset: 0x0008D666
	private void paintInfomation(mGraphics g)
	{
	}

	// Token: 0x060008B5 RID: 2229 RVA: 0x0008F46C File Offset: 0x0008D66C
	public void paintMap(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(-this.cmxMap, -this.cmyMap);
		g.drawImage(Panel.imgMap, this.xScroll, this.yScroll, 0);
		int head = global::Char.myCharz().head;
		Part part = GameScr.parts[head];
		SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, this.xMap, this.yMap + 5, 0, 3);
		int align = mFont.CENTER;
		bool flag = this.xMap <= 40;
		if (flag)
		{
			align = mFont.LEFT;
		}
		bool flag2 = this.xMap >= 220;
		if (flag2)
		{
			align = mFont.RIGHT;
		}
		mFont.tahoma_7b_yellow.drawString(g, TileMap.mapName, this.xMap, this.yMap - 12, align, mFont.tahoma_7_grey);
		int num = -1;
		bool flag3 = GameScr.getTaskMapId() != -1;
		if (flag3)
		{
			for (int i = 0; i < Panel.mapId[(int)TileMap.planetID].Length; i++)
			{
				bool flag4 = Panel.mapId[(int)TileMap.planetID][i] == GameScr.getTaskMapId();
				if (flag4)
				{
					num = i;
					break;
				}
				num = 4;
			}
			bool flag5 = GameCanvas.gameTick % 4 > 0;
			if (flag5)
			{
				g.drawImage(ItemMap.imageFlare, this.xScroll + Panel.mapX[(int)TileMap.planetID][num], this.yScroll + Panel.mapY[(int)TileMap.planetID][num], 3);
			}
		}
		bool flag6 = !GameCanvas.isTouch;
		if (flag6)
		{
			g.drawImage(Panel.imgBantay, this.xMove, this.yMove, StaticObj.TOP_RIGHT);
			for (int j = 0; j < Panel.mapX[(int)TileMap.planetID].Length; j++)
			{
				int num2 = Panel.mapX[(int)TileMap.planetID][j] + this.xScroll;
				int num3 = Panel.mapY[(int)TileMap.planetID][j] + this.yScroll;
				bool flag7 = Res.inRect(num2 - 15, num3 - 15, 30, 30, this.xMove, this.yMove);
				if (flag7)
				{
					align = mFont.CENTER;
					bool flag8 = num2 <= 20;
					if (flag8)
					{
						align = mFont.LEFT;
					}
					bool flag9 = num2 >= 220;
					if (flag9)
					{
						align = mFont.RIGHT;
					}
					mFont.tahoma_7b_yellow.drawString(g, TileMap.mapNames[Panel.mapId[(int)TileMap.planetID][j]], num2, num3 - 12, align, mFont.tahoma_7_grey);
					break;
				}
			}
		}
		else
		{
			bool flag10 = !this.trans;
			if (flag10)
			{
				for (int k = 0; k < Panel.mapX[(int)TileMap.planetID].Length; k++)
				{
					int num4 = Panel.mapX[(int)TileMap.planetID][k] + this.xScroll;
					int num5 = Panel.mapY[(int)TileMap.planetID][k] + this.yScroll;
					bool flag11 = Res.inRect(num4 - 15, num5 - 15, 30, 30, this.pX, this.pY);
					if (flag11)
					{
						align = mFont.CENTER;
						bool flag12 = num4 <= 30;
						if (flag12)
						{
							align = mFont.LEFT;
						}
						bool flag13 = num4 >= 220;
						if (flag13)
						{
							align = mFont.RIGHT;
						}
						g.drawImage(Panel.imgBantay, num4, num5, StaticObj.TOP_RIGHT);
						mFont.tahoma_7b_yellow.drawString(g, TileMap.mapNames[Panel.mapId[(int)TileMap.planetID][k]], num4, num5 - 12, align, mFont.tahoma_7_grey);
						break;
					}
				}
			}
		}
		g.translate(-g.getTranslateX(), -g.getTranslateY());
		bool flag14 = num != -1;
		if (flag14)
		{
			bool flag15 = Panel.mapX[(int)TileMap.planetID][num] + this.xScroll < this.cmxMap;
			if (flag15)
			{
				g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 5, this.xScroll + 5, this.yScroll + this.hScroll / 2 - 4, 0);
			}
			bool flag16 = this.cmxMap + this.wScroll < Panel.mapX[(int)TileMap.planetID][num] + this.xScroll;
			if (flag16)
			{
				g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 6, this.xScroll + this.wScroll - 5, this.yScroll + this.hScroll / 2 - 4, StaticObj.TOP_RIGHT);
			}
			bool flag17 = Panel.mapY[(int)TileMap.planetID][num] < this.cmyMap;
			if (flag17)
			{
				g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 1, this.xScroll + this.wScroll / 2, this.yScroll + 5, StaticObj.TOP_CENTER);
			}
			bool flag18 = Panel.mapY[(int)TileMap.planetID][num] > this.cmyMap + this.hScroll;
			if (flag18)
			{
				g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 0, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll - 5, StaticObj.BOTTOM_HCENTER);
			}
		}
	}

	// Token: 0x060008B6 RID: 2230 RVA: 0x0008F9B8 File Offset: 0x0008DBB8
	public void paintTask(mGraphics g)
	{
		int num = (GameCanvas.h <= 300) ? 15 : 20;
		bool flag = Panel.isPaintMap && !GameScr.gI().isMapDocNhan() && !GameScr.gI().isMapFize();
		if (flag)
		{
			g.drawImage((this.keyTouchMapButton != 1) ? GameScr.imgLbtn : GameScr.imgLbtnFocus, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll - num, 3);
			mFont.tahoma_7b_dark.drawString(g, mResources.map, this.xScroll + this.wScroll / 2, this.yScroll + this.hScroll - (num + 5), mFont.CENTER);
		}
		this.xstart = this.xScroll + 5;
		this.ystart = this.yScroll + 14;
		this.yPaint = this.ystart;
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll - 35);
		bool flag2 = this.scroll != null;
		if (flag2)
		{
			bool flag3 = this.scroll.cmy > 0;
			if (flag3)
			{
				g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 1, this.xScroll + this.wScroll - 12, this.yScroll + 3, 0);
			}
			bool flag4 = this.scroll.cmy < this.scroll.cmyLim;
			if (flag4)
			{
				g.drawRegion(Mob.imgHP, 0, 0, 9, 6, 0, this.xScroll + this.wScroll - 12, this.yScroll + this.hScroll - 45, 0);
			}
			g.translate(0, -this.scroll.cmy);
		}
		this.indexRowMax = 0;
		bool flag5 = this.indexMenu == 0;
		if (flag5)
		{
			bool flag6 = false;
			bool flag7 = global::Char.myCharz().taskMaint != null;
			if (flag7)
			{
				for (int i = 0; i < global::Char.myCharz().taskMaint.names.Length; i++)
				{
					mFont.tahoma_7_grey.drawString(g, global::Char.myCharz().taskMaint.names[i], this.xScroll + this.wScroll / 2, this.yPaint - 5 + i * 12, mFont.CENTER);
					this.indexRowMax++;
				}
				this.yPaint += (global::Char.myCharz().taskMaint.names.Length - 1) * 12;
				int num2 = 0;
				string text = string.Empty;
				for (int j = 0; j < global::Char.myCharz().taskMaint.subNames.Length; j++)
				{
					bool flag8 = global::Char.myCharz().taskMaint.subNames[j] != null;
					if (flag8)
					{
						num2 = j;
						text = "- " + global::Char.myCharz().taskMaint.subNames[j];
						bool flag9 = global::Char.myCharz().taskMaint.counts[j] != -1;
						if (flag9)
						{
							bool flag10 = global::Char.myCharz().taskMaint.index == j;
							if (flag10)
							{
								bool flag11 = global::Char.myCharz().taskMaint.counts[j] != 1;
								if (flag11)
								{
									string text2 = text;
									text = string.Concat(new string[]
									{
										text2,
										" (",
										global::Char.myCharz().taskMaint.count.ToString(),
										"/",
										global::Char.myCharz().taskMaint.counts[j].ToString(),
										")"
									});
								}
								bool flag12 = global::Char.myCharz().taskMaint.count == global::Char.myCharz().taskMaint.counts[j];
								if (flag12)
								{
									mFont.tahoma_7.drawString(g, text, this.xstart + 5, this.yPaint += 12, 0);
								}
								else
								{
									mFont mFont = mFont.tahoma_7_grey;
									bool flag13 = !flag6;
									if (flag13)
									{
										flag6 = true;
										mFont = mFont.tahoma_7_blue;
										mFont.drawString(g, text, this.xstart + 5 + ((mFont == mFont.tahoma_7_blue && GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0), this.yPaint += 12, 0);
									}
									else
									{
										mFont.drawString(g, "- ...", this.xstart + 5 + ((mFont == mFont.tahoma_7_blue && GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0), this.yPaint += 12, 0);
									}
								}
							}
							else
							{
								bool flag14 = global::Char.myCharz().taskMaint.index > j;
								if (flag14)
								{
									bool flag15 = global::Char.myCharz().taskMaint.counts[j] != 1;
									if (flag15)
									{
										string text3 = text;
										text = string.Concat(new string[]
										{
											text3,
											" (",
											global::Char.myCharz().taskMaint.counts[j].ToString(),
											"/",
											global::Char.myCharz().taskMaint.counts[j].ToString(),
											")"
										});
									}
									mFont.tahoma_7_white.drawString(g, text, this.xstart + 5, this.yPaint += 12, 0);
								}
								else
								{
									bool flag16 = global::Char.myCharz().taskMaint.counts[j] != 1;
									if (flag16)
									{
										text = text + " 0/" + global::Char.myCharz().taskMaint.counts[j].ToString();
									}
									mFont mFont2 = mFont.tahoma_7_grey;
									bool flag17 = !flag6;
									if (flag17)
									{
										flag6 = true;
										mFont2 = mFont.tahoma_7_blue;
										mFont2.drawString(g, text, this.xstart + 5 + ((mFont2 == mFont.tahoma_7_blue && GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0), this.yPaint += 12, 0);
									}
									else
									{
										mFont2.drawString(g, "- ...", this.xstart + 5 + ((mFont2 == mFont.tahoma_7_blue && GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0), this.yPaint += 12, 0);
									}
								}
							}
						}
						else
						{
							bool flag18 = global::Char.myCharz().taskMaint.index > j;
							if (flag18)
							{
								mFont.tahoma_7_white.drawString(g, text, this.xstart + 5, this.yPaint += 12, 0);
							}
							else
							{
								mFont mFont3 = mFont.tahoma_7_grey;
								bool flag19 = !flag6;
								if (flag19)
								{
									flag6 = true;
									mFont3 = mFont.tahoma_7_blue;
									mFont3.drawString(g, text, this.xstart + 5 + ((mFont3 == mFont.tahoma_7_blue && GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0), this.yPaint += 12, 0);
								}
								else
								{
									mFont3.drawString(g, "- ...", this.xstart + 5 + ((mFont3 == mFont.tahoma_7_blue && GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0), this.yPaint += 12, 0);
								}
							}
						}
						this.indexRowMax++;
					}
					else
					{
						bool flag20 = global::Char.myCharz().taskMaint.index <= j;
						if (flag20)
						{
							text = "- " + global::Char.myCharz().taskMaint.subNames[num2];
							mFont mFont4 = mFont.tahoma_7_grey;
							bool flag21 = !flag6;
							if (flag21)
							{
								flag6 = true;
								mFont4 = mFont.tahoma_7_blue;
							}
							mFont4.drawString(g, text, this.xstart + 5 + ((mFont4 == mFont.tahoma_7_blue && GameCanvas.gameTick % 20 > 10) ? (GameCanvas.gameTick % 4 / 2) : 0), this.yPaint += 12, 0);
						}
					}
				}
				this.yPaint += 5;
				for (int k = 0; k < global::Char.myCharz().taskMaint.details.Length; k++)
				{
					mFont.tahoma_7_green2.drawString(g, global::Char.myCharz().taskMaint.details[k], this.xstart + 5, this.yPaint += 12, 0);
					this.indexRowMax++;
				}
			}
			else
			{
				int taskMapId = GameScr.getTaskMapId();
				sbyte taskNpcId = GameScr.getTaskNpcId();
				string src = string.Empty;
				bool flag22 = taskMapId == -3 || taskNpcId == -3;
				if (flag22)
				{
					src = mResources.DES_TASK[3];
				}
				else
				{
					bool flag23 = global::Char.myCharz().taskMaint == null && global::Char.myCharz().ctaskId == 9 && global::Char.myCharz().nClass.classId == 0;
					if (flag23)
					{
						src = mResources.TASK_INPUT_CLASS;
					}
					else
					{
						bool flag24 = taskNpcId < 0 || taskMapId < 0;
						if (flag24)
						{
							return;
						}
						src = string.Concat(new string[]
						{
							mResources.DES_TASK[0],
							Npc.arrNpcTemplate[(int)taskNpcId].name,
							mResources.DES_TASK[1],
							TileMap.mapNames[taskMapId],
							mResources.DES_TASK[2]
						});
					}
				}
				string[] array = mFont.tahoma_7_white.splitFontArray(src, 150);
				for (int l = 0; l < array.Length; l++)
				{
					bool flag25 = l == 0;
					if (flag25)
					{
						mFont.tahoma_7_white.drawString(g, array[l], this.xstart + 5, this.yPaint = this.ystart, 0);
					}
					else
					{
						mFont.tahoma_7_white.drawString(g, array[l], this.xstart + 5, this.yPaint += 12, 0);
					}
				}
			}
		}
		else
		{
			bool flag26 = this.indexMenu == 1;
			if (flag26)
			{
				this.yPaint = this.ystart - 12;
				for (int m = 0; m < global::Char.myCharz().taskOrders.size(); m++)
				{
					TaskOrder taskOrder = (TaskOrder)global::Char.myCharz().taskOrders.elementAt(m);
					mFont.tahoma_7_white.drawString(g, taskOrder.name, this.xstart + 5, this.yPaint += 12, 0);
					bool flag27 = taskOrder.count == (int)taskOrder.maxCount;
					if (flag27)
					{
						mFont.tahoma_7_white.drawString(g, string.Concat(new string[]
						{
							(taskOrder.taskId != 0) ? mResources.KILLBOSS : mResources.KILL,
							" ",
							Mob.arrMobTemplate[taskOrder.killId].name,
							" (",
							taskOrder.count.ToString(),
							"/",
							taskOrder.maxCount.ToString(),
							")"
						}), this.xstart + 5, this.yPaint += 12, 0);
					}
					else
					{
						mFont.tahoma_7_blue.drawString(g, string.Concat(new string[]
						{
							(taskOrder.taskId != 0) ? mResources.KILLBOSS : mResources.KILL,
							" ",
							Mob.arrMobTemplate[taskOrder.killId].name,
							" (",
							taskOrder.count.ToString(),
							"/",
							taskOrder.maxCount.ToString(),
							")"
						}), this.xstart + 5, this.yPaint += 12, 0);
					}
					this.indexRowMax += 3;
					this.inforW = this.popupW - 25;
					this.paintMultiLine(g, mFont.tahoma_7_grey, taskOrder.description, this.xstart + 5, this.yPaint += 12, 0);
					this.yPaint += 12;
				}
			}
		}
		bool flag28 = this.scroll == null;
		if (flag28)
		{
			this.scroll = new Scroll();
			this.scroll.setStyle(this.indexRowMax, 12, this.xScroll, this.yScroll, this.wScroll, this.hScroll - num - 40, true, 1);
		}
	}

	// Token: 0x060008B7 RID: 2231 RVA: 0x000906E0 File Offset: 0x0008E8E0
	public void paintMultiLine(mGraphics g, mFont f, string[] arr, string str, int x, int y, int align)
	{
		for (int i = 0; i < arr.Length; i++)
		{
			string text = arr[i];
			bool flag = text.StartsWith("c");
			if (flag)
			{
				bool flag2 = text.StartsWith("c0");
				if (flag2)
				{
					text = text.Substring(2);
					f = mFont.tahoma_7b_dark;
				}
				else
				{
					bool flag3 = text.StartsWith("c1");
					if (flag3)
					{
						text = text.Substring(2);
						f = mFont.tahoma_7b_yellow;
					}
					else
					{
						bool flag4 = text.StartsWith("c2");
						if (flag4)
						{
							text = text.Substring(2);
							f = mFont.tahoma_7b_green;
						}
					}
				}
			}
			bool flag5 = i == 0;
			if (flag5)
			{
				f.drawString(g, text, x, y, align);
			}
			else
			{
				bool flag6 = i < this.indexRow + 30 && i > this.indexRow - 30;
				if (flag6)
				{
					f.drawString(g, text, x, y += 12, align);
				}
				else
				{
					y += 12;
				}
				this.yPaint += 12;
				this.indexRowMax++;
			}
		}
	}

	// Token: 0x060008B8 RID: 2232 RVA: 0x00090804 File Offset: 0x0008EA04
	public void paintMultiLine(mGraphics g, mFont f, string str, int x, int y, int align)
	{
		int num = (!GameCanvas.isTouch || GameCanvas.w < 320) ? 10 : 20;
		string[] array = f.splitFontArray(str, this.inforW - num);
		for (int i = 0; i < array.Length; i++)
		{
			bool flag = i == 0;
			if (flag)
			{
				f.drawString(g, array[i], x, y, align);
			}
			else
			{
				bool flag2 = i < this.indexRow + 15 && i > this.indexRow - 15;
				if (flag2)
				{
					f.drawString(g, array[i], x, y += 12, align);
				}
				else
				{
					y += 12;
				}
				this.yPaint += 12;
				this.indexRowMax++;
			}
		}
	}

	// Token: 0x060008B9 RID: 2233 RVA: 0x000908D8 File Offset: 0x0008EAD8
	public void cleanCombine()
	{
		for (int i = 0; i < this.vItemCombine.size(); i++)
		{
			((Item)this.vItemCombine.elementAt(i)).isSelect = false;
		}
		this.vItemCombine.removeAllElements();
	}

	// Token: 0x060008BA RID: 2234 RVA: 0x00090928 File Offset: 0x0008EB28
	public void hideNow()
	{
		bool flag = this.timeShow > 0;
		if (flag)
		{
			this.isClose = false;
		}
		else
		{
			this.cp = null;
			bool flag2 = this.isTypeShop() || TileMap.mapID == 45;
			if (flag2)
			{
				global::Char.myCharz().resetPartTemp();
			}
			bool flag3 = this.chatTField != null && this.type == 13 && this.chatTField.isShow;
			if (flag3)
			{
				this.chatTField = null;
			}
			bool flag4 = this.type == 13 && !this.isAccept;
			if (flag4)
			{
				Service.gI().giaodich(3, -1, -1, -1);
			}
			Res.outz("HIDE PANELLLLLLLLLLLLLLLLLLLLLL");
			SoundMn.gI().buttonClose();
			GameScr.isPaint = true;
			TileMap.lastPlanetId = -1;
			Panel.imgMap = null;
			mSystem.gcc();
			this.isClanOption = false;
			this.isClose = true;
			this.cleanCombine();
			Hint.clickNpc();
			GameCanvas.panel2 = null;
			GameCanvas.clearAllPointerEvent();
			GameCanvas.clearKeyPressed();
			this.pointerDownTime = (this.pointerDownFirstX = 0);
			this.pointerIsDowning = false;
			this.isShow = false;
			bool flag5 = (global::Char.myCharz().cHP <= 0L || global::Char.myCharz().statusMe == 14 || global::Char.myCharz().statusMe == 5) && global::Char.myCharz().meDead;
			if (flag5)
			{
				Command center = new Command(mResources.DIES[0], 11038, GameScr.gI());
				GameScr.gI().center = center;
				global::Char.myCharz().cHP = 0L;
			}
		}
	}

	// Token: 0x060008BB RID: 2235 RVA: 0x00090AC0 File Offset: 0x0008ECC0
	public void hide()
	{
		bool flag = this.timeShow > 0;
		if (flag)
		{
			this.isClose = false;
		}
		else
		{
			this.cp = null;
			bool flag2 = this.isTypeShop() || TileMap.mapID == 45;
			if (flag2)
			{
				global::Char.myCharz().resetPartTemp();
			}
			bool flag3 = this.chatTField != null && this.type == 13 && this.chatTField.isShow;
			if (flag3)
			{
				this.chatTField = null;
			}
			bool flag4 = this.type == 13 && !this.isAccept;
			if (flag4)
			{
				Service.gI().giaodich(3, -1, -1, -1);
			}
			bool flag5 = this.type == 15;
			if (flag5)
			{
				Service.gI().sendThachDau(-1);
			}
			SoundMn.gI().buttonClose();
			GameScr.isPaint = true;
			TileMap.lastPlanetId = -1;
			bool flag6 = Panel.imgMap != null;
			if (flag6)
			{
				Panel.imgMap.texture = null;
				Panel.imgMap = null;
			}
			mSystem.gcc();
			this.isClanOption = false;
			bool flag7 = this.type != 4;
			if (flag7)
			{
				bool flag8 = this.type == 24;
				if (flag8)
				{
					this.setTypeGameInfo();
				}
				else
				{
					bool flag9 = this.type == 23;
					if (flag9)
					{
						this.setTypeMain();
					}
					else
					{
						bool flag10 = this.type == 3 || this.type == 14;
						if (flag10)
						{
							bool flag11 = this.isChangeZone;
							if (flag11)
							{
								this.isClose = true;
							}
							else
							{
								this.setTypeMain();
								this.cmx = (this.cmtoX = 0);
							}
						}
						else
						{
							bool flag12 = this.type == 18 || this.type == 19 || this.type == 20 || this.type == 21;
							if (flag12)
							{
								this.setTypeMain();
								this.cmx = (this.cmtoX = 0);
							}
							else
							{
								bool flag13 = this.type == 8 || this.type == 11 || this.type == 16;
								if (flag13)
								{
									this.setTypeAccount();
									this.cmx = (this.cmtoX = 0);
								}
								else
								{
									this.isClose = true;
								}
							}
						}
					}
				}
			}
			else
			{
				this.setTypeMain();
				this.cmx = (this.cmtoX = 0);
			}
			Hint.clickNpc();
			GameCanvas.panel2 = null;
			GameCanvas.clearAllPointerEvent();
			GameCanvas.clearKeyPressed();
			GameCanvas.isFocusPanel2 = false;
			this.pointerDownTime = (this.pointerDownFirstX = 0);
			this.pointerIsDowning = false;
			bool flag14 = (global::Char.myCharz().cHP <= 0L || global::Char.myCharz().statusMe == 14 || global::Char.myCharz().statusMe == 5) && global::Char.myCharz().meDead;
			if (flag14)
			{
				Command center = new Command(mResources.DIES[0], 11038, GameScr.gI());
				GameScr.gI().center = center;
				global::Char.myCharz().cHP = 0L;
			}
		}
	}

	// Token: 0x060008BC RID: 2236 RVA: 0x00090DD4 File Offset: 0x0008EFD4
	public void update()
	{
		bool flag = this.chatTField != null && this.chatTField.isShow;
		if (flag)
		{
			this.chatTField.update();
		}
		else
		{
			bool flag2 = this.isKiguiXu;
			if (flag2)
			{
				this.delayKigui++;
				bool flag3 = this.delayKigui == 10;
				if (flag3)
				{
					this.delayKigui = 0;
					this.isKiguiXu = false;
					this.chatTField.tfChat.setText(string.Empty);
					this.chatTField.strChat = mResources.kiguiXuchat + " ";
					this.chatTField.tfChat.name = mResources.input_money;
					this.chatTField.to = string.Empty;
					this.chatTField.isShow = true;
					this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_NUMERIC);
					this.chatTField.tfChat.setMaxTextLenght(10);
					bool isTouch = GameCanvas.isTouch;
					if (isTouch)
					{
						this.chatTField.tfChat.doChangeToTextBox();
					}
					bool isWindowsPhone = Main.isWindowsPhone;
					if (isWindowsPhone)
					{
						this.chatTField.tfChat.strInfo = this.chatTField.strChat;
					}
					bool flag4 = !Main.isPC;
					if (flag4)
					{
						this.chatTField.startChat2(this, string.Empty);
					}
				}
			}
			else
			{
				bool flag5 = this.isKiguiLuong;
				if (flag5)
				{
					this.delayKigui++;
					bool flag6 = this.delayKigui == 10;
					if (flag6)
					{
						this.delayKigui = 0;
						this.isKiguiLuong = false;
						this.chatTField.tfChat.setText(string.Empty);
						this.chatTField.strChat = mResources.kiguiLuongchat + "  ";
						this.chatTField.tfChat.name = mResources.input_money;
						this.chatTField.to = string.Empty;
						this.chatTField.isShow = true;
						this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_NUMERIC);
						this.chatTField.tfChat.setMaxTextLenght(10);
						bool isTouch2 = GameCanvas.isTouch;
						if (isTouch2)
						{
							this.chatTField.tfChat.doChangeToTextBox();
						}
						bool isWindowsPhone2 = Main.isWindowsPhone;
						if (isWindowsPhone2)
						{
							this.chatTField.tfChat.strInfo = this.chatTField.strChat;
						}
						bool flag7 = !Main.isPC;
						if (flag7)
						{
							this.chatTField.startChat2(this, string.Empty);
						}
					}
				}
				else
				{
					bool flag8 = this.scroll != null;
					if (flag8)
					{
						this.scroll.updatecm();
					}
					bool flag9 = this.tabIcon != null && this.tabIcon.isShow;
					if (flag9)
					{
						this.tabIcon.update();
					}
					else
					{
						this.moveCamera();
						bool flag10 = this.isTabInven() && this.isnewInventory;
						if (flag10)
						{
							bool flag11 = this.eBanner == null;
							if (flag11)
							{
								this.eBanner = new Effect(205, 0, 0, 3, 10, -1);
								this.eBanner.typeEff = 2;
							}
							bool flag12 = this.eBanner != null;
							if (flag12)
							{
								this.eBanner.update();
							}
						}
						bool flag13 = this.waitToPerform > 0;
						if (flag13)
						{
							this.waitToPerform--;
							bool flag14 = this.waitToPerform == 0;
							if (flag14)
							{
								this.lastSelect[this.currentTabIndex] = this.selected;
								switch (this.type)
								{
								case 0:
									this.doFireMain();
									break;
								case 1:
								case 17:
									this.doFireShop();
									break;
								case 2:
									this.doFireBox();
									break;
								case 3:
									this.doFireZone();
									break;
								case 4:
									this.doFireMap();
									break;
								case 7:
								{
									bool flag15 = this.Equals(GameCanvas.panel2) && GameCanvas.panel.type == 2;
									if (flag15)
									{
										this.doFireBox();
										return;
									}
									this.doFireInventory();
									break;
								}
								case 8:
									this.doFireLogMessage();
									break;
								case 9:
									this.doFireArchivement();
									break;
								case 10:
									this.doFirePlayerMenu();
									break;
								case 11:
									this.doFireFriend();
									break;
								case 12:
									this.doFireCombine();
									break;
								case 13:
									this.doFireGiaoDich();
									break;
								case 14:
									this.doFireMapTrans();
									break;
								case 15:
									this.doFireTop();
									break;
								case 16:
									this.doFireEnemy();
									break;
								case 18:
									this.doFireChangeFlag();
									break;
								case 19:
									this.doFireOption();
									break;
								case 20:
									this.doFireAccount();
									break;
								case 21:
									this.doFirePetMain();
									break;
								case 22:
									this.doFireAuto();
									break;
								case 23:
									this.doFireGameInfo();
									break;
								case 25:
									this.doSpeacialSkill();
									break;
								}
							}
						}
						for (int i = 0; i < ClanMessage.vMessage.size(); i++)
						{
							((ClanMessage)ClanMessage.vMessage.elementAt(i)).update();
						}
						this.updateCombineEff();
					}
				}
			}
		}
	}

	// Token: 0x060008BD RID: 2237 RVA: 0x0009134C File Offset: 0x0008F54C
	private void doSpeacialSkill()
	{
	}

	// Token: 0x060008BE RID: 2238 RVA: 0x00091350 File Offset: 0x0008F550
	private void doFireGameInfo()
	{
		bool flag = this.selected != -1;
		if (flag)
		{
			this.infoSelect = this.selected;
			((GameInfo)Panel.vGameInfo.elementAt(this.infoSelect)).hasRead = true;
			Rms.saveRMSInt(((GameInfo)Panel.vGameInfo.elementAt(this.infoSelect)).id.ToString() + string.Empty, 1);
			this.setTypeGameSubInfo();
		}
	}

	// Token: 0x060008BF RID: 2239 RVA: 0x000913CE File Offset: 0x0008F5CE
	private void doFireAuto()
	{
	}

	// Token: 0x060008C0 RID: 2240 RVA: 0x000913D4 File Offset: 0x0008F5D4
	private void doFirePetMain()
	{
		bool flag = this.currentTabIndex == 0;
		if (flag)
		{
			bool flag2 = this.selected == -1 || this.selected > global::Char.myPetz().arrItemBody.Length - 1;
			if (flag2)
			{
				return;
			}
			MyVector myVector = new MyVector(string.Empty);
			Item item = global::Char.myPetz().arrItemBody[this.selected];
			this.currItem = item;
			bool flag3 = this.currItem != null;
			if (flag3)
			{
				myVector.addElement(new Command(mResources.MOVEOUT, this, 2006, this.currItem));
				GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
				this.addItemDetail(this.currItem);
			}
			else
			{
				this.cp = null;
			}
		}
		bool flag4 = this.currentTabIndex == 1;
		if (flag4)
		{
			this.doFirePetStatus();
		}
		bool flag5 = this.currentTabIndex == 2;
		if (flag5)
		{
			this.doFireInventory();
		}
	}

	// Token: 0x060008C1 RID: 2241 RVA: 0x000914EC File Offset: 0x0008F6EC
	private void doFirePetStatus()
	{
		bool flag = this.selected == -1;
		if (!flag)
		{
			bool flag2 = this.selected == 5;
			if (flag2)
			{
				GameCanvas.startYesNoDlg(mResources.sure_fusion, new Command(mResources.YES, 888351), new Command(mResources.NO, 2001));
			}
			else
			{
				Service.gI().petStatus((sbyte)this.selected);
				bool flag3 = this.selected < 4;
				if (flag3)
				{
					global::Char.myPetz().petStatus = (sbyte)this.selected;
				}
			}
		}
	}

	// Token: 0x060008C2 RID: 2242 RVA: 0x00091578 File Offset: 0x0008F778
	private void doFireTop()
	{
		bool flag = this.selected >= -1;
		if (flag)
		{
			bool flag2 = this.isThachDau;
			if (flag2)
			{
				Service.gI().sendTop(this.topName, (sbyte)this.selected);
			}
			else
			{
				MyVector myVector = new MyVector(string.Empty);
				myVector.addElement(new Command(mResources.CHAR_ORDER[0], this, 9999, (TopInfo)this.vTop.elementAt(this.selected)));
				GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
				this.addThachDauDetail((TopInfo)this.vTop.elementAt(this.selected));
			}
		}
	}

	// Token: 0x060008C3 RID: 2243 RVA: 0x00091649 File Offset: 0x0008F849
	private void doFireMapTrans()
	{
		this.doFireZone();
	}

	// Token: 0x060008C4 RID: 2244 RVA: 0x00091654 File Offset: 0x0008F854
	private void doFireGiaoDich()
	{
		bool flag = this.currentTabIndex == 0 && this.Equals(GameCanvas.panel);
		if (flag)
		{
			this.doFireInventory();
		}
		else
		{
			bool flag2 = (this.currentTabIndex == 0 && this.Equals(GameCanvas.panel2)) || this.currentTabIndex == 2;
			if (flag2)
			{
				bool flag3 = this.Equals(GameCanvas.panel2);
				if (flag3)
				{
					this.currItem = (Item)GameCanvas.panel2.vFriendGD.elementAt(this.selected);
				}
				else
				{
					this.currItem = (Item)GameCanvas.panel.vFriendGD.elementAt(this.selected);
				}
				Res.outz2("toi day select= " + this.selected.ToString());
				MyVector myVector = new MyVector();
				myVector.addElement(new Command(mResources.CLOSE, this, 8000, this.currItem));
				bool flag4 = this.currItem != null;
				if (flag4)
				{
					GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
					this.addItemDetail(this.currItem);
				}
				else
				{
					this.cp = null;
				}
			}
			bool flag5 = this.currentTabIndex == 1;
			if (flag5)
			{
				bool flag6 = this.selected == this.currentListLength - 3;
				if (flag6)
				{
					bool flag7 = this.isLock;
					if (flag7)
					{
						return;
					}
					this.putMoney();
				}
				else
				{
					bool flag8 = this.selected == this.currentListLength - 2;
					if (flag8)
					{
						bool flag9 = !this.isAccept;
						if (flag9)
						{
							this.isLock = !this.isLock;
							bool flag10 = this.isLock;
							if (flag10)
							{
								Service.gI().giaodich(5, -1, -1, -1);
							}
							else
							{
								this.hide();
								InfoDlg.showWait();
								Service.gI().giaodich(3, -1, -1, -1);
							}
						}
						else
						{
							this.isAccept = false;
						}
					}
					else
					{
						bool flag11 = this.selected == this.currentListLength - 1;
						if (flag11)
						{
							bool flag12 = this.isLock && !this.isAccept && this.isFriendLock;
							if (flag12)
							{
								GameCanvas.startYesNoDlg(mResources.do_u_sure_to_trade, new Command(mResources.YES, this, 7002, null), new Command(mResources.NO, this, 4005, null));
							}
						}
						else
						{
							bool flag13 = this.isLock;
							if (flag13)
							{
								return;
							}
							this.currItem = (Item)GameCanvas.panel.vMyGD.elementAt(this.selected);
							MyVector myVector2 = new MyVector();
							myVector2.addElement(new Command(mResources.CLOSE, this, 8000, this.currItem));
							bool flag14 = this.currItem != null;
							if (flag14)
							{
								GameCanvas.menu.startAt(myVector2, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
								this.addItemDetail(this.currItem);
							}
							else
							{
								this.cp = null;
							}
						}
					}
				}
			}
			bool isTouch = GameCanvas.isTouch;
			if (isTouch)
			{
				this.selected = -1;
			}
		}
	}

	// Token: 0x060008C5 RID: 2245 RVA: 0x000919A0 File Offset: 0x0008FBA0
	private void doFireCombine()
	{
		bool flag = this.currentTabIndex == 0;
		if (flag)
		{
			bool flag2 = this.selected == -1 || this.vItemCombine.size() == 0;
			if (flag2)
			{
				return;
			}
			bool flag3 = this.selected == this.vItemCombine.size();
			if (flag3)
			{
				this.keyTouchCombine = -1;
				this.selected = (GameCanvas.isTouch ? -1 : 0);
				InfoDlg.showWait();
				Service.gI().combine(1, this.vItemCombine);
				return;
			}
			bool flag4 = this.selected > this.vItemCombine.size() - 1;
			if (flag4)
			{
				return;
			}
			this.currItem = (Item)GameCanvas.panel.vItemCombine.elementAt(this.selected);
			MyVector myVector = new MyVector();
			myVector.addElement(new Command(mResources.GETOUT, this, 6001, this.currItem));
			bool flag5 = this.currItem != null;
			if (flag5)
			{
				GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
				this.addItemDetail(this.currItem);
			}
			else
			{
				this.cp = null;
			}
		}
		bool flag6 = this.currentTabIndex == 1;
		if (flag6)
		{
			this.doFireInventory();
		}
	}

	// Token: 0x060008C6 RID: 2246 RVA: 0x00091B08 File Offset: 0x0008FD08
	private void doFirePlayerMenu()
	{
		bool flag = this.selected != -1;
		if (flag)
		{
			this.isSelectPlayerMenu = true;
			this.hide();
		}
	}

	// Token: 0x060008C7 RID: 2247 RVA: 0x00091B38 File Offset: 0x0008FD38
	private void doFireShop()
	{
		this.currItem = null;
		bool flag = this.selected < 0;
		if (!flag)
		{
			MyVector myVector = new MyVector();
			bool flag2 = this.currentTabIndex < this.currentTabName.Length - ((GameCanvas.panel2 == null) ? 1 : 0) && this.type != 17;
			if (flag2)
			{
				this.currItem = global::Char.myCharz().arrItemShop[this.currentTabIndex][this.selected];
				bool flag3 = this.currItem != null;
				if (flag3)
				{
					bool isBuySpec = this.currItem.isBuySpec;
					if (isBuySpec)
					{
						bool flag4 = this.currItem.buySpec > 0;
						if (flag4)
						{
							myVector.addElement(new Command(mResources.buy_with + "\n" + Res.formatNumber2((long)this.currItem.buySpec), this, 3005, this.currItem));
						}
					}
					else
					{
						bool flag5 = this.typeShop == 4;
						if (flag5)
						{
							myVector.addElement(new Command(mResources.receive_upper, this, 30001, this.currItem));
							myVector.addElement(new Command(mResources.DELETE, this, 30002, this.currItem));
							myVector.addElement(new Command(mResources.receive_all, this, 30003, this.currItem));
						}
						else
						{
							bool flag6 = this.currItem.buyCoin == 0 && this.currItem.buyGold == 0;
							if (flag6)
							{
								bool flag7 = this.currItem.powerRequire != 0L;
								if (flag7)
								{
									myVector.addElement(new Command(string.Concat(new string[]
									{
										mResources.learn_with,
										"\n",
										Res.formatNumber(this.currItem.powerRequire),
										" \n",
										mResources.potential
									}), this, 3004, this.currItem));
								}
								else
								{
									myVector.addElement(new Command(mResources.receive_upper + "\n" + mResources.free, this, 3000, this.currItem));
								}
							}
							else
							{
								bool flag8 = this.typeShop == 8;
								if (flag8)
								{
									bool flag9 = this.currItem.buyCoin > 0;
									if (flag9)
									{
										myVector.addElement(new Command(string.Concat(new string[]
										{
											mResources.buy_with,
											"\n",
											Res.formatNumber2((long)this.currItem.buyCoin),
											"\n",
											mResources.XU
										}), this, 30001, this.currItem));
									}
									bool flag10 = this.currItem.buyGold > 0;
									if (flag10)
									{
										myVector.addElement(new Command(string.Concat(new string[]
										{
											mResources.buy_with,
											"\n",
											Res.formatNumber2((long)this.currItem.buyGold),
											"\n",
											mResources.LUONG
										}), this, 30002, this.currItem));
									}
								}
								else
								{
									bool flag11 = this.typeShop != 2;
									if (flag11)
									{
										bool flag12 = this.currItem.buyCoin > 0;
										if (flag12)
										{
											myVector.addElement(new Command(string.Concat(new string[]
											{
												mResources.buy_with,
												"\n",
												Res.formatNumber2((long)this.currItem.buyCoin),
												"\n",
												mResources.XU
											}), this, 3000, this.currItem));
										}
										bool flag13 = this.currItem.buyGold > 0;
										if (flag13)
										{
											myVector.addElement(new Command(string.Concat(new string[]
											{
												mResources.buy_with,
												"\n",
												Res.formatNumber2((long)this.currItem.buyGold),
												"\n",
												mResources.LUONG
											}), this, 3001, this.currItem));
										}
									}
									else
									{
										bool flag14 = this.currItem.buyCoin != -1;
										if (flag14)
										{
											myVector.addElement(new Command(string.Concat(new string[]
											{
												mResources.buy_with,
												"\n",
												Res.formatNumber2((long)this.currItem.buyCoin),
												"\n",
												mResources.XU
											}), this, 10016, this.currItem));
										}
										bool flag15 = this.currItem.buyGold != -1;
										if (flag15)
										{
											myVector.addElement(new Command(string.Concat(new string[]
											{
												mResources.buy_with,
												"\n",
												Res.formatNumber2((long)this.currItem.buyGold),
												"\n",
												mResources.LUONG
											}), this, 10017, this.currItem));
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				bool flag16 = this.typeShop == 0;
				if (flag16)
				{
					bool flag17 = this.selected == 0;
					if (flag17)
					{
						this.setNewSelected(global::Char.myCharz().arrItemBody.Length + global::Char.myCharz().arrItemBag.Length, false);
					}
					else
					{
						this.currItem = null;
						bool flag18 = !this.GetInventorySelect_isbody(this.selected, this.newSelected, global::Char.myCharz().arrItemBody);
						if (flag18)
						{
							Item item = global::Char.myCharz().arrItemBag[this.GetInventorySelect_bag(this.selected, this.newSelected, global::Char.myCharz().arrItemBody)];
							bool flag19 = item != null;
							if (flag19)
							{
								this.currItem = item;
							}
						}
						else
						{
							Item item2 = global::Char.myCharz().arrItemBody[this.GetInventorySelect_body(this.selected, this.newSelected)];
							bool flag20 = item2 != null;
							if (flag20)
							{
								this.currItem = item2;
							}
						}
						bool flag21 = this.currItem != null;
						if (flag21)
						{
							myVector.addElement(new Command(mResources.SALE, this, 3002, this.currItem));
						}
					}
				}
				else
				{
					bool flag22 = this.type == 17;
					if (flag22)
					{
						this.currItem = global::Char.myCharz().arrItemShop[4][this.selected];
					}
					else
					{
						this.currItem = global::Char.myCharz().arrItemShop[this.currentTabIndex][this.selected];
					}
					bool flag23 = this.currItem.buyType == 0;
					if (flag23)
					{
						bool flag24 = this.currItem.isHaveOption(87);
						if (flag24)
						{
							myVector.addElement(new Command(mResources.kiguiLuong, this, 10013, this.currItem));
						}
						else
						{
							myVector.addElement(new Command(mResources.kiguiXu, this, 10012, this.currItem));
						}
					}
					else
					{
						bool flag25 = this.currItem.buyType == 1;
						if (flag25)
						{
							myVector.addElement(new Command(mResources.huykigui, this, 10014, this.currItem));
							myVector.addElement(new Command(mResources.upTop, this, 10018, this.currItem));
						}
						else
						{
							bool flag26 = this.currItem.buyType == 2;
							if (flag26)
							{
								myVector.addElement(new Command(mResources.nhantien, this, 10015, this.currItem));
							}
						}
					}
				}
			}
			bool flag27 = this.currItem != null;
			if (flag27)
			{
				global::Char.myCharz().setPartTemp(this.currItem.headTemp, this.currItem.bodyTemp, this.currItem.legTemp, this.currItem.bagTemp);
				GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
				this.addItemDetail(this.currItem);
			}
			else
			{
				this.cp = null;
			}
		}
	}

	// Token: 0x060008C8 RID: 2248 RVA: 0x00092330 File Offset: 0x00090530
	private void doFireArchivement()
	{
		bool flag = this.selected >= 0 && global::Char.myCharz().arrArchive[this.selected].isFinish && !global::Char.myCharz().arrArchive[this.selected].isRecieve;
		if (flag)
		{
			bool flag2 = !GameCanvas.isTouch;
			if (flag2)
			{
				Service.gI().getArchivemnt(this.selected);
			}
			else
			{
				bool flag3 = GameCanvas.px > this.xScroll + this.wScroll - 40;
				if (flag3)
				{
					Service.gI().getArchivemnt(this.selected);
				}
			}
		}
	}

	// Token: 0x060008C9 RID: 2249 RVA: 0x000923D0 File Offset: 0x000905D0
	private void doFireInventory()
	{
		Res.outz("fire inventory");
		bool flag = global::Char.myCharz().statusMe == 14;
		if (flag)
		{
			GameCanvas.startOKDlg(mResources.can_not_do_when_die);
		}
		else
		{
			bool flag2 = this.selected == -1;
			if (!flag2)
			{
				bool flag3 = this.selected == 0;
				if (flag3)
				{
					this.setNewSelected(global::Char.myCharz().arrItemBody.Length + global::Char.myCharz().arrItemBag.Length, false);
				}
				else
				{
					this.currItem = null;
					MyVector myVector = new MyVector();
					bool flag4 = this.isnewInventory;
					if (flag4)
					{
						this.currItem = this.itemInvenNew;
						bool flag5 = this.newSelected == 0;
						if (flag5)
						{
							myVector.addElement(new Command(mResources.GETOUT, this, 2002, this.currItem));
						}
						else
						{
							bool flag6 = GameCanvas.panel.type == 12;
							if (flag6)
							{
								myVector.addElement(new Command(mResources.use_for_combine, this, 6000, this.currItem));
							}
							else
							{
								bool flag7 = GameCanvas.panel.type == 13;
								if (flag7)
								{
									myVector.addElement(new Command(mResources.use_for_trade, this, 7000, this.currItem));
								}
								else
								{
									bool flag8 = this.currItem.isTypeBody();
									if (flag8)
									{
										myVector.addElement(new Command(mResources.USE, this, 2000, this.currItem));
										bool havePet = global::Char.myCharz().havePet;
										if (havePet)
										{
											myVector.addElement(new Command(mResources.MOVEFORPET, this, 2005, this.currItem));
										}
									}
									else
									{
										myVector.addElement(new Command(mResources.USE, this, 2001, this.currItem));
									}
								}
							}
						}
					}
					else
					{
						bool flag9 = !this.GetInventorySelect_isbody(this.selected, this.newSelected, global::Char.myCharz().arrItemBody);
						if (flag9)
						{
							Item item = global::Char.myCharz().arrItemBag[this.GetInventorySelect_bag(this.selected, this.newSelected, global::Char.myCharz().arrItemBody)];
							bool flag10 = item != null;
							if (flag10)
							{
								this.currItem = item;
								bool flag11 = GameCanvas.panel.type == 12;
								if (flag11)
								{
									myVector.addElement(new Command(mResources.use_for_combine, this, 6000, this.currItem));
								}
								else
								{
									bool flag12 = GameCanvas.panel.type == 13;
									if (flag12)
									{
										myVector.addElement(new Command(mResources.use_for_trade, this, 7000, this.currItem));
									}
									else
									{
										bool flag13 = item.isTypeBody();
										if (flag13)
										{
											myVector.addElement(new Command(mResources.USE, this, 2000, this.currItem));
											bool havePet2 = global::Char.myCharz().havePet;
											if (havePet2)
											{
												myVector.addElement(new Command(mResources.MOVEFORPET, this, 2005, this.currItem));
											}
											myVector.addElement(new Command("Add To Set 1", this, 90901, this.currItem));
											myVector.addElement(new Command("Add To Set 2", this, 90902, this.currItem));
										}
										else
										{
											myVector.addElement(new Command(mResources.USE, this, 2001, this.currItem));
										}
									}
								}
							}
						}
						else
						{
							Item item2 = global::Char.myCharz().arrItemBody[this.GetInventorySelect_body(this.selected, this.newSelected)];
							bool flag14 = item2 != null;
							if (flag14)
							{
								this.currItem = item2;
								myVector.addElement(new Command(mResources.GETOUT, this, 2002, this.currItem));
							}
						}
					}
					bool flag15 = this.currItem != null;
					if (flag15)
					{
						global::Char.myCharz().setPartTemp(this.currItem.headTemp, this.currItem.bodyTemp, this.currItem.legTemp, this.currItem.bagTemp);
						bool flag16 = GameCanvas.panel.type != 12 && GameCanvas.panel.type != 13;
						if (flag16)
						{
							bool flag17 = this.position == 0;
							if (flag17)
							{
								myVector.addElement(new Command(mResources.MOVEOUT, this, 2003, this.currItem));
							}
							bool flag18 = this.position == 1;
							if (flag18)
							{
								myVector.addElement(new Command(mResources.SALE, this, 3002, this.currItem));
							}
						}
						GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
						this.addItemDetail(this.currItem);
					}
					else
					{
						this.cp = null;
					}
				}
			}
		}
	}

	// Token: 0x060008CA RID: 2250 RVA: 0x000928AC File Offset: 0x00090AAC
	private void doRada()
	{
		this.hide();
		bool flag = RadarScr.list == null || RadarScr.list.size() == 0;
		if (flag)
		{
			Service.gI().SendRada(0, -1);
			RadarScr.gI().switchToMe();
		}
		else
		{
			RadarScr.gI().switchToMe();
		}
	}

	// Token: 0x060008CB RID: 2251 RVA: 0x00092908 File Offset: 0x00090B08
	private void doFireTool()
	{
		bool flag = this.selected < 0;
		if (!flag)
		{
			bool flag2 = SoundMn.IsDelAcc && this.selected == Panel.strTool.Length - 1;
			if (flag2)
			{
				Service.gI().sendDelAcc();
			}
			else
			{
				bool flag3 = !global::Char.myCharz().havePet;
				if (flag3)
				{
					switch (this.selected)
					{
					case 0:
						this.hide();
						this.doRada();
						break;
					case 1:
						Service.gI().openMenu(54);
						break;
					case 2:
						this.setTypeGameInfo();
						break;
					case 3:
						Service.gI().getFlag(0, -1);
						InfoDlg.showWait();
						break;
					case 4:
					{
						bool flag4 = global::Char.myCharz().statusMe == 14;
						if (flag4)
						{
							GameCanvas.startOKDlg(mResources.can_not_do_when_die);
						}
						else
						{
							Service.gI().openUIZone();
							GameCanvas.panel.setTypeZone();
							GameCanvas.panel.show();
						}
						break;
					}
					case 5:
					{
						GameCanvas.endDlg();
						bool flag5 = global::Char.myCharz().checkLuong() < 5;
						if (flag5)
						{
							GameCanvas.startOKDlg(mResources.not_enough_luong_world_channel);
						}
						else
						{
							bool flag6 = this.chatTField == null;
							if (flag6)
							{
								this.chatTField = new ChatTextField();
								this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
								this.chatTField.initChatTextField();
								this.chatTField.parentScreen = GameCanvas.panel;
							}
							this.chatTField.strChat = mResources.world_channel_5_luong;
							this.chatTField.tfChat.name = mResources.CHAT;
							this.chatTField.to = string.Empty;
							this.chatTField.isShow = true;
							this.chatTField.tfChat.isFocus = true;
							this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
							bool isWindowsPhone = Main.isWindowsPhone;
							if (isWindowsPhone)
							{
								this.chatTField.tfChat.strInfo = this.chatTField.strChat;
							}
							bool flag7 = !Main.isPC;
							if (flag7)
							{
								this.chatTField.startChat2(this, string.Empty);
							}
							else
							{
								bool isTouch = GameCanvas.isTouch;
								if (isTouch)
								{
									this.chatTField.tfChat.doChangeToTextBox();
								}
							}
						}
						break;
					}
					case 6:
						this.setTypeAccount();
						break;
					case 7:
						this.setTypeOption();
						break;
					case 8:
						GameCanvas.loginScr.backToRegister();
						break;
					case 9:
					{
						bool isLogin = GameCanvas.loginScr.isLogin2;
						if (isLogin)
						{
							SoundMn.gI().backToRegister();
						}
						break;
					}
					}
				}
				else
				{
					switch (this.selected)
					{
					case 0:
						this.hide();
						this.doRada();
						break;
					case 1:
						Service.gI().openMenu(54);
						break;
					case 2:
						this.setTypeGameInfo();
						break;
					case 3:
						this.doFirePet();
						break;
					case 4:
						Service.gI().getFlag(0, -1);
						InfoDlg.showWait();
						break;
					case 5:
					{
						bool flag8 = global::Char.myCharz().statusMe == 14;
						if (flag8)
						{
							GameCanvas.startOKDlg(mResources.can_not_do_when_die);
						}
						else
						{
							Service.gI().openUIZone();
							GameCanvas.panel.setTypeZone();
							GameCanvas.panel.show();
						}
						break;
					}
					case 6:
					{
						GameCanvas.endDlg();
						bool flag9 = global::Char.myCharz().checkLuong() < 5;
						if (flag9)
						{
							GameCanvas.startOKDlg(mResources.not_enough_luong_world_channel);
						}
						else
						{
							bool flag10 = this.chatTField == null;
							if (flag10)
							{
								this.chatTField = new ChatTextField();
								this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
								this.chatTField.initChatTextField();
								this.chatTField.parentScreen = GameCanvas.panel;
							}
							this.chatTField.strChat = mResources.world_channel_5_luong;
							this.chatTField.tfChat.name = mResources.CHAT;
							this.chatTField.to = string.Empty;
							this.chatTField.isShow = true;
							this.chatTField.tfChat.isFocus = true;
							this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
							bool isWindowsPhone2 = Main.isWindowsPhone;
							if (isWindowsPhone2)
							{
								this.chatTField.tfChat.strInfo = this.chatTField.strChat;
							}
							bool flag11 = !Main.isPC;
							if (flag11)
							{
								this.chatTField.startChat2(this, string.Empty);
							}
							else
							{
								bool isTouch2 = GameCanvas.isTouch;
								if (isTouch2)
								{
									this.chatTField.tfChat.doChangeToTextBox();
								}
							}
						}
						break;
					}
					case 7:
						this.setTypeAccount();
						break;
					case 8:
						this.setTypeOption();
						break;
					case 9:
						GameCanvas.loginScr.backToRegister();
						break;
					case 10:
					{
						bool isLogin2 = GameCanvas.loginScr.isLogin2;
						if (isLogin2)
						{
							SoundMn.gI().backToRegister();
						}
						break;
					}
					}
				}
			}
		}
	}

	// Token: 0x060008CC RID: 2252 RVA: 0x00092E64 File Offset: 0x00091064
	private void setTypeGameSubInfo()
	{
		string content = ((GameInfo)Panel.vGameInfo.elementAt(this.infoSelect)).content;
		Panel.contenInfo = mFont.tahoma_7_grey.splitFontArray(content, this.wScroll - 40);
		this.currentListLength = Panel.contenInfo.Length;
		this.ITEM_HEIGHT = 16;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		this.type = 24;
		this.setType(0);
	}

	// Token: 0x060008CD RID: 2253 RVA: 0x00092F58 File Offset: 0x00091158
	private void setTypeGameInfo()
	{
		this.currentListLength = Panel.vGameInfo.size();
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		this.type = 23;
		this.setType(0);
	}

	// Token: 0x060008CE RID: 2254 RVA: 0x00093018 File Offset: 0x00091218
	private void doFirePet()
	{
		InfoDlg.showWait();
		Service.gI().petInfo();
		bool flag = GameCanvas.w > 2 * Panel.WIDTH_PANEL;
		if (flag)
		{
			GameCanvas.panel2 = new Panel();
			GameCanvas.panel2.tabName[7] = new string[][]
			{
				new string[]
				{
					string.Empty
				}
			};
			GameCanvas.panel2.setTypeBodyOnly();
			GameCanvas.panel2.show();
			GameCanvas.panel.setTypePetMain();
			GameCanvas.panel.show();
		}
		else
		{
			GameCanvas.panel.tabName[21] = mResources.petMainTab;
			GameCanvas.panel.setTypePetMain();
			GameCanvas.panel.show();
		}
		this.timeShow = 20;
	}

	// Token: 0x060008CF RID: 2255 RVA: 0x000930D8 File Offset: 0x000912D8
	private void searchClan()
	{
		this.chatTField.strChat = mResources.input_clan_name;
		this.chatTField.tfChat.name = mResources.clan_name;
		this.chatTField.to = string.Empty;
		this.chatTField.isShow = true;
		this.chatTField.tfChat.isFocus = true;
		this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.chatTField.tfChat.strInfo = this.chatTField.strChat;
		}
		bool flag = !Main.isPC;
		if (flag)
		{
			this.chatTField.startChat2(this, string.Empty);
		}
	}

	// Token: 0x060008D0 RID: 2256 RVA: 0x00093194 File Offset: 0x00091394
	private void chatClan()
	{
		this.chatTField.strChat = mResources.chat_clan;
		this.chatTField.tfChat.name = mResources.CHAT;
		this.chatTField.to = string.Empty;
		this.chatTField.isShow = true;
		this.chatTField.tfChat.isFocus = true;
		this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.chatTField.tfChat.strInfo = this.chatTField.strChat;
		}
		bool flag = !Main.isPC;
		if (flag)
		{
			this.chatTField.startChat2(this, string.Empty);
		}
	}

	// Token: 0x060008D1 RID: 2257 RVA: 0x00093250 File Offset: 0x00091450
	public void creatClan()
	{
		this.chatTField.strChat = mResources.input_clan_name_to_create;
		this.chatTField.tfChat.name = mResources.input_clan_name;
		this.chatTField.to = string.Empty;
		this.chatTField.isShow = true;
		this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.chatTField.tfChat.strInfo = this.chatTField.strChat;
		}
		bool flag = !Main.isPC;
		if (flag)
		{
			this.chatTField.startChat2(this, string.Empty);
		}
	}

	// Token: 0x060008D2 RID: 2258 RVA: 0x000932FC File Offset: 0x000914FC
	public void putMoney()
	{
		bool flag = this.chatTField == null;
		if (flag)
		{
			this.chatTField = new ChatTextField();
			this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
			this.chatTField.initChatTextField();
			this.chatTField.parentScreen = GameCanvas.panel;
		}
		this.chatTField.strChat = mResources.input_money_to_trade;
		this.chatTField.tfChat.name = mResources.input_money;
		this.chatTField.to = string.Empty;
		this.chatTField.isShow = true;
		this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_NUMERIC);
		this.chatTField.tfChat.setMaxTextLenght(10);
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.chatTField.tfChat.doChangeToTextBox();
		}
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.chatTField.tfChat.strInfo = this.chatTField.strChat;
		}
		bool flag2 = !Main.isPC;
		if (flag2)
		{
			this.chatTField.startChat2(this, string.Empty);
		}
	}

	// Token: 0x060008D3 RID: 2259 RVA: 0x00093434 File Offset: 0x00091634
	public void putQuantily()
	{
		bool flag = this.chatTField == null;
		if (flag)
		{
			this.chatTField = new ChatTextField();
			this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
			this.chatTField.initChatTextField();
			this.chatTField.parentScreen = GameCanvas.panel;
		}
		this.chatTField.strChat = mResources.input_quantity_to_trade;
		this.chatTField.tfChat.name = mResources.input_quantity;
		this.chatTField.to = string.Empty;
		this.chatTField.isShow = true;
		this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_NUMERIC);
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.chatTField.tfChat.doChangeToTextBox();
		}
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.chatTField.tfChat.strInfo = this.chatTField.strChat;
		}
		bool flag2 = !Main.isPC;
		if (flag2)
		{
			this.chatTField.startChat2(this, string.Empty);
		}
	}

	// Token: 0x060008D4 RID: 2260 RVA: 0x0009355C File Offset: 0x0009175C
	public void chagenSlogan()
	{
		this.chatTField.strChat = mResources.input_clan_slogan;
		this.chatTField.tfChat.name = mResources.input_clan_slogan;
		this.chatTField.to = string.Empty;
		this.chatTField.isShow = true;
		this.chatTField.tfChat.isFocus = true;
		this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
		bool isWindowsPhone = Main.isWindowsPhone;
		if (isWindowsPhone)
		{
			this.chatTField.tfChat.strInfo = this.chatTField.strChat;
		}
		bool flag = !Main.isPC;
		if (flag)
		{
			this.chatTField.startChat2(this, string.Empty);
		}
	}

	// Token: 0x060008D5 RID: 2261 RVA: 0x00093618 File Offset: 0x00091818
	public void changeIcon()
	{
		bool flag = this.tabIcon == null;
		if (flag)
		{
			this.tabIcon = new TabClanIcon();
		}
		this.tabIcon.text = this.chatTField.tfChat.getText();
		this.tabIcon.show(false);
		this.chatTField.isShow = false;
	}

	// Token: 0x060008D6 RID: 2262 RVA: 0x00093674 File Offset: 0x00091874
	private void addFriend(InfoItem info)
	{
		string text = "|0|1|" + info.charInfo.cName;
		text += "\n";
		text = ((!info.isOnline) ? (text + "|3|1|" + mResources.is_offline) : (text + "|4|1|" + mResources.is_online));
		text += "\n--";
		string text2 = text;
		text = string.Concat(new string[]
		{
			text2,
			"\n|5|",
			mResources.power,
			": ",
			info.s
		});
		this.cp = new ChatPopup();
		this.popUpDetailInit(this.cp, text);
		this.charInfo = info.charInfo;
		this.currItem = null;
	}

	// Token: 0x060008D7 RID: 2263 RVA: 0x0009373C File Offset: 0x0009193C
	private void doFireEnemy()
	{
		bool flag = this.selected >= 0 && this.vEnemy.size() != 0;
		if (flag)
		{
			MyVector myVector = new MyVector();
			this.currInfoItem = this.selected;
			myVector.addElement(new Command(mResources.REVENGE, this, 10000, (InfoItem)this.vEnemy.elementAt(this.currInfoItem)));
			myVector.addElement(new Command(mResources.DELETE, this, 10001, (InfoItem)this.vEnemy.elementAt(this.currInfoItem)));
			GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
			this.addFriend((InfoItem)this.vEnemy.elementAt(this.selected));
		}
	}

	// Token: 0x060008D8 RID: 2264 RVA: 0x00093828 File Offset: 0x00091A28
	private void doFireFriend()
	{
		bool flag = this.selected >= 0 && this.vFriend.size() != 0;
		if (flag)
		{
			MyVector myVector = new MyVector();
			this.currInfoItem = this.selected;
			myVector.addElement(new Command(mResources.CHAT, this, 8001, (InfoItem)this.vFriend.elementAt(this.currInfoItem)));
			myVector.addElement(new Command(mResources.DELETE, this, 8002, (InfoItem)this.vFriend.elementAt(this.currInfoItem)));
			myVector.addElement(new Command(mResources.den, this, 8004, (InfoItem)this.vFriend.elementAt(this.currInfoItem)));
			GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
			this.addFriend((InfoItem)this.vFriend.elementAt(this.selected));
		}
	}

	// Token: 0x060008D9 RID: 2265 RVA: 0x00093940 File Offset: 0x00091B40
	private void doFireChangeFlag()
	{
		bool flag = this.selected >= 0;
		if (flag)
		{
			MyVector myVector = new MyVector();
			this.currInfoItem = this.selected;
			myVector.addElement(new Command(mResources.change_flag, this, 10030, null));
			myVector.addElement(new Command(mResources.BACK, this, 10031, null));
			GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
		}
	}

	// Token: 0x060008DA RID: 2266 RVA: 0x000939D4 File Offset: 0x00091BD4
	private void doFireLogMessage()
	{
		bool flag = this.selected == 0;
		if (flag)
		{
			this.isViewChatServer = !this.isViewChatServer;
			Rms.saveRMSInt("viewchat", this.isViewChatServer ? 1 : 0);
			bool isTouch = GameCanvas.isTouch;
			if (isTouch)
			{
				this.selected = -1;
			}
		}
		else
		{
			bool flag2 = this.selected >= 0 && this.logChat.size() != 0;
			if (flag2)
			{
				MyVector myVector = new MyVector();
				this.currInfoItem = this.selected - 1;
				myVector.addElement(new Command(mResources.CHAT, this, 8001, (InfoItem)this.logChat.elementAt(this.currInfoItem)));
				myVector.addElement(new Command(mResources.make_friend, this, 8003, (InfoItem)this.logChat.elementAt(this.currInfoItem)));
				GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
				this.addLogMessage((InfoItem)this.logChat.elementAt(this.selected - 1));
			}
		}
	}

	// Token: 0x060008DB RID: 2267 RVA: 0x00093B10 File Offset: 0x00091D10
	private void doFireClanOption()
	{
		try
		{
			this.partID = null;
			this.charInfo = null;
			Res.outz("cSelect= " + this.cSelected.ToString());
			bool flag = this.selected < 0;
			if (flag)
			{
				this.cSelected = -1;
			}
			else
			{
				bool flag2 = global::Char.myCharz().clan == null;
				if (flag2)
				{
					bool flag3 = this.selected == 0;
					if (flag3)
					{
						bool flag4 = this.cSelected == 0;
						if (flag4)
						{
							this.searchClan();
						}
						else
						{
							bool flag5 = this.cSelected == 1;
							if (flag5)
							{
								InfoDlg.showWait();
								this.creatClan();
								Service.gI().getClan(1, -1, null);
							}
						}
					}
					else
					{
						bool flag6 = this.selected != -1;
						if (flag6)
						{
							bool flag7 = this.selected == 1;
							if (flag7)
							{
								bool flag8 = this.isSearchClan;
								if (flag8)
								{
									Service.gI().searchClan(string.Empty);
								}
								else
								{
									bool flag9 = this.isViewMember && this.currClan != null;
									if (flag9)
									{
										GameCanvas.startYesNoDlg(mResources.do_u_want_join_clan + this.currClan.name, new Command(mResources.YES, this, 4000, this.currClan), new Command(mResources.NO, this, 4005, this.currClan));
									}
								}
							}
							else
							{
								bool flag10 = this.isSearchClan;
								if (flag10)
								{
									this.currClan = this.getCurrClan();
									bool flag11 = this.currClan != null;
									if (flag11)
									{
										MyVector myVector = new MyVector();
										myVector.addElement(new Command(mResources.request_join_clan, this, 4000, this.currClan));
										myVector.addElement(new Command(mResources.view_clan_member, this, 4001, this.currClan));
										GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
										this.addClanDetail(this.getCurrClan());
									}
								}
								else
								{
									bool flag12 = this.isViewMember;
									if (flag12)
									{
										this.currMem = this.getCurrMember();
										bool flag13 = this.currMem != null;
										if (flag13)
										{
											MyVector myVector2 = new MyVector();
											myVector2.addElement(new Command(mResources.CLOSE, this, 8000, this.currClan));
											GameCanvas.menu.startAt(myVector2, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
											GameCanvas.menu.startAt(myVector2, 0, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
											this.addClanMemberDetail(this.currMem);
										}
									}
								}
							}
						}
					}
				}
				else
				{
					bool flag14 = this.selected == 0;
					if (flag14)
					{
						bool flag15 = this.isMessage;
						if (flag15)
						{
							bool flag16 = this.cSelected == 0;
							if (flag16)
							{
								bool flag17 = this.myMember.size() > 1;
								if (flag17)
								{
									this.chatClan();
								}
								else
								{
									this.member = null;
									this.isSearchClan = false;
									this.isViewMember = true;
									this.isMessage = false;
									this.currentListLength = this.myMember.size() + 2;
									this.initTabClans();
								}
							}
							bool flag18 = this.cSelected == 1;
							if (flag18)
							{
								Service.gI().clanMessage(1, null, -1);
							}
							bool flag19 = this.cSelected == 2;
							if (flag19)
							{
								this.member = null;
								this.isSearchClan = false;
								this.isViewMember = true;
								this.isMessage = false;
								this.currentListLength = this.myMember.size() + 2;
								this.initTabClans();
								this.getCurrClanOtion();
							}
						}
						else
						{
							bool flag20 = this.isViewMember;
							if (flag20)
							{
								bool flag21 = this.cSelected == 0;
								if (flag21)
								{
									this.isSearchClan = false;
									this.isViewMember = false;
									this.isMessage = true;
									this.currentListLength = ClanMessage.vMessage.size() + 2;
									this.initTabClans();
								}
								bool flag22 = this.cSelected == 1;
								if (flag22)
								{
									bool flag23 = this.myMember.size() > 1;
									if (flag23)
									{
										Service.gI().leaveClan();
									}
									else
									{
										this.chagenSlogan();
									}
								}
								bool flag24 = this.cSelected == 2;
								if (flag24)
								{
									bool flag25 = this.myMember.size() > 1;
									if (flag25)
									{
										this.chagenSlogan();
									}
									else
									{
										Service.gI().getClan(3, -1, null);
									}
								}
								bool flag26 = this.cSelected == 3;
								if (flag26)
								{
									Service.gI().getClan(3, -1, null);
								}
							}
						}
					}
					else
					{
						bool flag27 = this.selected == 1;
						if (flag27)
						{
							bool flag28 = this.isSearchClan;
							if (flag28)
							{
								Service.gI().searchClan(string.Empty);
							}
						}
						else
						{
							bool flag29 = this.isSearchClan;
							if (flag29)
							{
								this.currClan = this.getCurrClan();
								bool flag30 = this.currClan != null;
								if (flag30)
								{
									MyVector myVector3 = new MyVector();
									myVector3.addElement(new Command(mResources.view_clan_member, this, 4001, this.currClan));
									GameCanvas.menu.startAt(myVector3, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
									this.addClanDetail(this.getCurrClan());
								}
							}
							else
							{
								bool flag31 = this.isViewMember;
								if (flag31)
								{
									Res.outz("TOI DAY 1");
									this.currMem = this.getCurrMember();
									bool flag32 = this.currMem != null;
									if (flag32)
									{
										MyVector myVector4 = new MyVector();
										Res.outz("TOI DAY 2");
										bool flag33 = this.member != null;
										if (flag33)
										{
											myVector4.addElement(new Command(mResources.CLOSE, this, 8000, null));
											Res.outz("TOI DAY 3");
										}
										else
										{
											bool flag34 = this.myMember != null;
											if (flag34)
											{
												Res.outz("TOI DAY 4");
												Res.outz("my role= " + global::Char.myCharz().role.ToString());
												bool flag35 = global::Char.myCharz().charID == this.currMem.ID || global::Char.myCharz().role == 2;
												if (flag35)
												{
													myVector4.addElement(new Command(mResources.CLOSE, this, 8000, this.currMem));
												}
												bool flag36 = global::Char.myCharz().role < 2 && global::Char.myCharz().charID != this.currMem.ID;
												if (flag36)
												{
													Res.outz("TOI DAY");
													bool flag37 = this.currMem.role == 0 || this.currMem.role == 1;
													if (flag37)
													{
														myVector4.addElement(new Command(mResources.CLOSE, this, 8000, this.currMem));
													}
													bool flag38 = this.currMem.role == 2;
													if (flag38)
													{
														myVector4.addElement(new Command(mResources.create_clan_co_leader, this, 5002, this.currMem));
													}
													bool flag39 = global::Char.myCharz().role == 0;
													if (flag39)
													{
														myVector4.addElement(new Command(mResources.create_clan_leader, this, 5001, this.currMem));
														bool flag40 = this.currMem.role == 1;
														if (flag40)
														{
															myVector4.addElement(new Command(mResources.disable_clan_mastership, this, 5003, this.currMem));
														}
													}
												}
												bool flag41 = global::Char.myCharz().role < this.currMem.role;
												if (flag41)
												{
													myVector4.addElement(new Command(mResources.kick_clan_mem, this, 5004, this.currMem));
												}
											}
										}
										GameCanvas.menu.startAt(myVector4, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
										this.addClanMemberDetail(this.currMem);
									}
								}
								else
								{
									bool flag42 = this.isMessage;
									if (flag42)
									{
										this.currMess = this.getCurrMessage();
										bool flag43 = this.currMess != null;
										if (flag43)
										{
											bool flag44 = this.currMess.type == 0;
											if (flag44)
											{
												MyVector myVector5 = new MyVector();
												myVector5.addElement(new Command(mResources.CLOSE, this, 8000, this.currMess));
												GameCanvas.menu.startAt(myVector5, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
												this.addMessageDetail(this.currMess);
											}
											else
											{
												bool flag45 = this.currMess.type == 1;
												if (flag45)
												{
													bool flag46 = this.currMess.playerId != global::Char.myCharz().charID && this.cSelected != -1;
													if (flag46)
													{
														Service.gI().clanDonate(this.currMess.id);
													}
												}
												else
												{
													bool flag47 = this.currMess.type == 2 && this.currMess.option != null;
													if (flag47)
													{
														bool flag48 = this.cSelected == 0;
														if (flag48)
														{
															Service.gI().joinClan(this.currMess.id, 1);
														}
														else
														{
															bool flag49 = this.cSelected == 1;
															if (flag49)
															{
																Service.gI().joinClan(this.currMess.id, 0);
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				bool isTouch = GameCanvas.isTouch;
				if (isTouch)
				{
					this.cSelected = -1;
					this.selected = -1;
				}
			}
		}
		catch (Exception)
		{
			throw;
		}
	}

	// Token: 0x060008DC RID: 2268 RVA: 0x00094528 File Offset: 0x00092728
	private void doFireMain()
	{
		try
		{
			bool flag = this.currentTabIndex == 0;
			if (flag)
			{
				this.setTypeMap();
			}
			bool flag2 = this.currentTabIndex == 1;
			if (flag2)
			{
				this.doFireInventory();
			}
			bool flag3 = this.currentTabIndex == 2;
			if (flag3)
			{
				this.doFireSkill();
			}
			bool flag4 = this.currentTabIndex == 3;
			if (flag4)
			{
				bool flag5 = this.mainTabName.Length == 4;
				if (flag5)
				{
					this.doFireTool();
				}
				else
				{
					this.doFireClanOption();
				}
			}
			bool flag6 = this.currentTabIndex == 4;
			if (flag6)
			{
				this.doFireTool();
			}
		}
		catch (Exception ex)
		{
			Res.outz("Throw ex " + ex.StackTrace);
		}
	}

	// Token: 0x060008DD RID: 2269 RVA: 0x000945F8 File Offset: 0x000927F8
	private void doFireSkill()
	{
		bool flag = this.selected < 0;
		if (!flag)
		{
			bool flag2 = global::Char.myCharz().statusMe == 14;
			if (flag2)
			{
				GameCanvas.startOKDlg(mResources.can_not_do_when_die);
			}
			else
			{
				bool flag3 = this.selected == 0 || this.selected == 1 || this.selected == 2 || this.selected == 3 || this.selected == 4 || this.selected == 5;
				if (flag3)
				{
					long cTiemNang = global::Char.myCharz().cTiemNang;
					int cHPGoc = global::Char.myCharz().cHPGoc;
					int cMPGoc = global::Char.myCharz().cMPGoc;
					int cDamGoc = global::Char.myCharz().cDamGoc;
					int cDefGoc = global::Char.myCharz().cDefGoc;
					int cCriticalGoc = global::Char.myCharz().cCriticalGoc;
					int num = 1000;
					bool flag4 = this.selected == 0;
					if (flag4)
					{
						bool flag5 = cTiemNang < (long)(global::Char.myCharz().cHPGoc + num);
						if (flag5)
						{
							GameCanvas.startOKDlg(mResources.not_enough_potential_point1 + global::Char.myCharz().cTiemNang.ToString() + mResources.not_enough_potential_point2 + (global::Char.myCharz().cHPGoc + num).ToString(), false);
							return;
						}
						bool flag6 = cTiemNang > (long)cHPGoc && cTiemNang < (long)(10 * (2 * (cHPGoc + num) + 180) / 2);
						if (flag6)
						{
							GameCanvas.startYesNoDlg(string.Concat(new string[]
							{
								mResources.use_potential_point_for1,
								(cHPGoc + num).ToString(),
								mResources.use_potential_point_for2,
								global::Char.myCharz().hpFrom1000TiemNang.ToString(),
								mResources.for_HP
							}), new Command(mResources.increase_upper, this, 9000, null), new Command(mResources.CANCEL, this, 4007, null));
							return;
						}
						bool flag7 = cTiemNang >= (long)(10 * (2 * (cHPGoc + num) + 180) / 2) && cTiemNang < (long)(100 * (2 * (cHPGoc + num) + 1980) / 2);
						if (flag7)
						{
							MyVector myVector = new MyVector(string.Empty);
							myVector.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								global::Char.myCharz().hpFrom1000TiemNang.ToString(),
								mResources.HP,
								"\n-",
								Res.formatNumber2((long)(cHPGoc + num))
							}), this, 9000, null));
							myVector.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								((int)(10 * global::Char.myCharz().hpFrom1000TiemNang)).ToString(),
								mResources.HP,
								"\n-",
								Res.formatNumber2((long)(10 * (2 * (cHPGoc + num) + 180) / 2))
							}), this, 9006, null));
							GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
							this.addSkillDetail2(this.selected);
						}
						bool flag8 = cTiemNang >= (long)(100 * (2 * (cHPGoc + num) + 1980) / 2);
						if (flag8)
						{
							MyVector myVector2 = new MyVector(string.Empty);
							myVector2.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								global::Char.myCharz().hpFrom1000TiemNang.ToString(),
								mResources.HP,
								"\n-",
								Res.formatNumber2((long)(cHPGoc + num))
							}), this, 9000, null));
							myVector2.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								((int)(10 * global::Char.myCharz().hpFrom1000TiemNang)).ToString(),
								mResources.HP,
								"\n-",
								Res.formatNumber2((long)(10 * (2 * (cHPGoc + num) + 180) / 2))
							}), this, 9006, null));
							myVector2.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								((int)(100 * global::Char.myCharz().hpFrom1000TiemNang)).ToString(),
								mResources.HP,
								"\n-",
								Res.formatNumber2((long)(100 * (2 * (cHPGoc + num) + 1980) / 2))
							}), this, 9007, null));
							GameCanvas.menu.startAt(myVector2, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
							this.addSkillDetail2(this.selected);
						}
					}
					bool flag9 = this.selected == 1;
					if (flag9)
					{
						bool flag10 = global::Char.myCharz().cTiemNang < (long)(global::Char.myCharz().cMPGoc + num);
						if (flag10)
						{
							GameCanvas.startOKDlg(mResources.not_enough_potential_point1 + global::Char.myCharz().cTiemNang.ToString() + mResources.not_enough_potential_point2 + (global::Char.myCharz().cMPGoc + num).ToString());
							return;
						}
						bool flag11 = cTiemNang > (long)cMPGoc && cTiemNang < (long)(10 * (2 * (cMPGoc + num) + 180) / 2);
						if (flag11)
						{
							GameCanvas.startYesNoDlg(string.Concat(new string[]
							{
								mResources.use_potential_point_for1,
								(cMPGoc + num).ToString(),
								mResources.use_potential_point_for2,
								global::Char.myCharz().mpFrom1000TiemNang.ToString(),
								mResources.for_KI
							}), new Command(mResources.increase_upper, this, 9000, null), new Command(mResources.CANCEL, this, 4007, null));
							return;
						}
						bool flag12 = cTiemNang >= (long)(10 * (2 * (cMPGoc + num) + 180) / 2) && cTiemNang < (long)(100 * (2 * (cMPGoc + num) + 1980) / 2);
						if (flag12)
						{
							MyVector myVector3 = new MyVector(string.Empty);
							myVector3.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								global::Char.myCharz().mpFrom1000TiemNang.ToString(),
								mResources.KI,
								"\n-",
								Res.formatNumber2((long)(cHPGoc + num))
							}), this, 9000, null));
							myVector3.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								((int)(10 * global::Char.myCharz().mpFrom1000TiemNang)).ToString(),
								mResources.KI,
								"\n-",
								Res.formatNumber2((long)(10 * (2 * (cHPGoc + num) + 180) / 2))
							}), this, 9006, null));
							GameCanvas.menu.startAt(myVector3, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
							this.addSkillDetail2(this.selected);
						}
						bool flag13 = cTiemNang >= (long)(100 * (2 * (cMPGoc + num) + 1980) / 2);
						if (flag13)
						{
							MyVector myVector4 = new MyVector(string.Empty);
							myVector4.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								global::Char.myCharz().mpFrom1000TiemNang.ToString(),
								mResources.KI,
								"\n-",
								Res.formatNumber2((long)(cMPGoc + num))
							}), this, 9000, null));
							myVector4.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								((int)(10 * global::Char.myCharz().mpFrom1000TiemNang)).ToString(),
								mResources.KI,
								"\n-",
								Res.formatNumber2((long)(10 * (2 * (cMPGoc + num) + 180) / 2))
							}), this, 9006, null));
							myVector4.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								((int)(100 * global::Char.myCharz().mpFrom1000TiemNang)).ToString(),
								mResources.KI,
								"\n-",
								Res.formatNumber2((long)(100 * (2 * (cMPGoc + num) + 1980) / 2))
							}), this, 9007, null));
							GameCanvas.menu.startAt(myVector4, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
							this.addSkillDetail2(this.selected);
						}
					}
					bool flag14 = this.selected == 2;
					if (flag14)
					{
						bool flag15 = global::Char.myCharz().cTiemNang < (long)(global::Char.myCharz().cDamGoc * (int)global::Char.myCharz().expForOneAdd);
						if (flag15)
						{
							GameCanvas.startOKDlg(mResources.not_enough_potential_point1 + global::Char.myCharz().cTiemNang.ToString() + mResources.not_enough_potential_point2 + (cDamGoc * 100).ToString());
							return;
						}
						bool flag16 = cTiemNang > (long)cDamGoc && cTiemNang < (long)(10 * (2 * cDamGoc + 9) / 2 * (int)global::Char.myCharz().expForOneAdd);
						if (flag16)
						{
							GameCanvas.startYesNoDlg(string.Concat(new string[]
							{
								mResources.use_potential_point_for1,
								(cDamGoc * 100).ToString(),
								mResources.use_potential_point_for2,
								global::Char.myCharz().damFrom1000TiemNang.ToString(),
								mResources.for_hit_point
							}), new Command(mResources.increase_upper, this, 9000, null), new Command(mResources.CANCEL, this, 4007, null));
							return;
						}
						bool flag17 = cTiemNang >= (long)(10 * (2 * cDamGoc + 9) / 2 * (int)global::Char.myCharz().expForOneAdd) && cTiemNang < (long)(100 * (2 * cDamGoc + 99) / 2 * (int)global::Char.myCharz().expForOneAdd);
						if (flag17)
						{
							MyVector myVector5 = new MyVector(string.Empty);
							myVector5.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								global::Char.myCharz().damFrom1000TiemNang.ToString(),
								"\n",
								mResources.hit_point,
								"\n-",
								Res.formatNumber2((long)(cDamGoc * 100))
							}), this, 9000, null));
							myVector5.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								((int)(10 * global::Char.myCharz().damFrom1000TiemNang)).ToString(),
								"\n",
								mResources.hit_point,
								"\n-",
								Res.formatNumber2((long)(10 * (2 * cDamGoc + 9) / 2 * (int)global::Char.myCharz().expForOneAdd))
							}), this, 9006, null));
							GameCanvas.menu.startAt(myVector5, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
							this.addSkillDetail2(this.selected);
						}
						bool flag18 = cTiemNang >= (long)(100 * (2 * cDamGoc + 99) / 2 * (int)global::Char.myCharz().expForOneAdd);
						if (flag18)
						{
							MyVector myVector6 = new MyVector(string.Empty);
							myVector6.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								global::Char.myCharz().damFrom1000TiemNang.ToString(),
								"\n",
								mResources.hit_point,
								"\n-",
								Res.formatNumber2((long)(cDamGoc * 100))
							}), this, 9000, null));
							myVector6.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								((int)(10 * global::Char.myCharz().damFrom1000TiemNang)).ToString(),
								"\n",
								mResources.hit_point,
								"\n-",
								Res.formatNumber2((long)(10 * (2 * cDamGoc + 9) / 2 * (int)global::Char.myCharz().expForOneAdd))
							}), this, 9006, null));
							myVector6.addElement(new Command(string.Concat(new string[]
							{
								mResources.increase_upper,
								"\n",
								((int)(100 * global::Char.myCharz().damFrom1000TiemNang)).ToString(),
								"\n",
								mResources.hit_point,
								"\n-",
								Res.formatNumber2((long)(100 * (2 * cDamGoc + 99) / 2 * (int)global::Char.myCharz().expForOneAdd))
							}), this, 9007, null));
							GameCanvas.menu.startAt(myVector6, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
							this.addSkillDetail2(this.selected);
						}
					}
					bool flag19 = this.selected == 3;
					if (flag19)
					{
						bool flag20 = global::Char.myCharz().cTiemNang < (long)(50000 + global::Char.myCharz().cDefGoc * 1000);
						if (flag20)
						{
							GameCanvas.startOKDlg(mResources.not_enough_potential_point1 + NinjaUtil.getMoneys(global::Char.myCharz().cTiemNang) + mResources.not_enough_potential_point2 + NinjaUtil.getMoneys((long)(50000 + global::Char.myCharz().cDefGoc * 1000)));
						}
						else
						{
							long number = (long)(2 * (cDefGoc + 5)) / 2L * 100000L;
							long number2 = 10L * (long)(2 * (cDefGoc + 5) + 9) / 2L * 100000L;
							long number3 = 100L * (long)(2 * (cDefGoc + 5) + 99) / 2L * 100000L;
							mResources.use_potential_point_for1 = mResources.increase_upper;
							MyVector myVector7 = new MyVector(string.Empty);
							myVector7.addElement(new Command(string.Concat(new string[]
							{
								mResources.use_potential_point_for1,
								"\n1 ",
								mResources.armor,
								"\n",
								Res.formatNumber2(number)
							}), this, 9000, null));
							myVector7.addElement(new Command(string.Concat(new string[]
							{
								mResources.use_potential_point_for1,
								"\n10 ",
								mResources.armor,
								"\n",
								Res.formatNumber2(number2)
							}), this, 9006, null));
							myVector7.addElement(new Command(string.Concat(new string[]
							{
								mResources.use_potential_point_for1,
								"\n100 ",
								mResources.armor,
								"\n",
								Res.formatNumber2(number3)
							}), this, 9007, null));
							GameCanvas.menu.startAt(myVector7, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
							this.addSkillDetail2(this.selected);
						}
					}
					else
					{
						bool flag21 = this.selected == 4;
						if (flag21)
						{
							int num2 = global::Char.myCharz().cCriticalGoc;
							bool flag22 = num2 > Panel.t_tiemnang.Length - 1;
							if (flag22)
							{
								num2 = Panel.t_tiemnang.Length - 1;
							}
							long num3 = Panel.t_tiemnang[num2];
							bool flag23 = global::Char.myCharz().cTiemNang < num3;
							if (flag23)
							{
								GameCanvas.startOKDlg(mResources.not_enough_potential_point1 + Res.formatNumber2(global::Char.myCharz().cTiemNang) + mResources.not_enough_potential_point2 + Res.formatNumber2(num3));
							}
							else
							{
								GameCanvas.startYesNoDlg(string.Concat(new string[]
								{
									mResources.use_potential_point_for1,
									Res.formatNumber(num3),
									mResources.use_potential_point_for2,
									global::Char.myCharz().criticalFrom1000Tiemnang.ToString(),
									mResources.for_crit
								}), new Command(mResources.increase_upper, this, 9000, null), new Command(mResources.CANCEL, this, 4007, null));
							}
						}
						else
						{
							bool flag24 = this.selected == 5;
							if (flag24)
							{
								Service.gI().speacialSkill(0);
							}
						}
					}
				}
				else
				{
					int num4 = this.selected - 6;
					SkillTemplate skillTemplate = global::Char.myCharz().nClass.skillTemplates[num4];
					Skill skill = global::Char.myCharz().getSkill(skillTemplate);
					Skill skill2 = null;
					MyVector myVector8 = new MyVector(string.Empty);
					bool flag25 = skill != null;
					if (flag25)
					{
						bool flag26 = skill.point == skillTemplate.maxPoint;
						if (flag26)
						{
							myVector8.addElement(new Command(mResources.make_shortcut, this, 9003, skill.template));
							myVector8.addElement(new Command(mResources.CLOSE, 2));
						}
						else
						{
							skill2 = skillTemplate.skills[skill.point];
							myVector8.addElement(new Command(mResources.UPGRADE, this, 9002, skill2));
							myVector8.addElement(new Command(mResources.make_shortcut, this, 9003, skill.template));
						}
					}
					else
					{
						skill2 = skillTemplate.skills[0];
						myVector8.addElement(new Command(mResources.learn, this, 9004, skill2));
					}
					GameCanvas.menu.startAt(myVector8, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
					this.addSkillDetail(skillTemplate, skill, skill2);
				}
			}
		}
	}

	// Token: 0x060008DE RID: 2270 RVA: 0x000957B8 File Offset: 0x000939B8
	private void addLogMessage(InfoItem info)
	{
		string text = "|0|1|" + info.charInfo.cName;
		text += "\n";
		text += "\n--";
		text = text + "\n|5|" + Res.split(info.s, "|", 0)[2];
		this.cp = new ChatPopup();
		this.popUpDetailInit(this.cp, text);
		this.charInfo = info.charInfo;
		this.currItem = null;
	}

	// Token: 0x060008DF RID: 2271 RVA: 0x00095840 File Offset: 0x00093A40
	private void addSkillDetail2(int type)
	{
		string text = string.Empty;
		int num = 0;
		bool flag = this.selected == 0;
		if (flag)
		{
			num = global::Char.myCharz().cHPGoc + 1000;
		}
		bool flag2 = this.selected == 1;
		if (flag2)
		{
			num = global::Char.myCharz().cMPGoc + 1000;
		}
		bool flag3 = this.selected == 2;
		if (flag3)
		{
			num = global::Char.myCharz().cDamGoc * (int)global::Char.myCharz().expForOneAdd;
		}
		bool flag4 = this.selected == 3;
		if (flag4)
		{
			num = 500000 + global::Char.myCharz().cDefGoc * 100000;
		}
		string text2 = text;
		text = string.Concat(new string[]
		{
			text2,
			"|5|2|",
			mResources.USE,
			" ",
			num.ToString(),
			" ",
			mResources.potential
		});
		bool flag5 = type == 0;
		if (flag5)
		{
			text = text + "\n|5|2|" + mResources.to_gain_20hp;
		}
		bool flag6 = type == 1;
		if (flag6)
		{
			text = text + "\n|5|2|" + mResources.to_gain_20mp;
		}
		bool flag7 = type == 2;
		if (flag7)
		{
			text = text + "\n|5|2|" + mResources.to_gain_1pow;
		}
		bool flag8 = type == 3;
		if (flag8)
		{
			text = text + "\n|5|2|" + mResources.to_gain_1pow;
		}
		this.currItem = null;
		this.partID = null;
		this.charInfo = null;
		this.idIcon = -1;
		this.cp = new ChatPopup();
		this.popUpDetailInit(this.cp, text);
	}

	// Token: 0x060008E0 RID: 2272 RVA: 0x000959D4 File Offset: 0x00093BD4
	private void doFireClanIcon()
	{
	}

	// Token: 0x060008E1 RID: 2273 RVA: 0x000959D8 File Offset: 0x00093BD8
	private void doFireMap()
	{
		bool flag = Panel.imgMap != null;
		if (flag)
		{
			Panel.imgMap.texture = null;
			Panel.imgMap = null;
		}
		TileMap.lastPlanetId = -1;
		mSystem.gcc();
		SmallImage.loadBigRMS();
		this.setTypeMain();
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x060008E2 RID: 2274 RVA: 0x00095A30 File Offset: 0x00093C30
	private void doFireZone()
	{
		bool flag = this.selected != -1;
		if (flag)
		{
			Res.outz("FIRE ZONE");
			this.isChangeZone = true;
			GameCanvas.panel.hide();
		}
	}

	// Token: 0x060008E3 RID: 2275 RVA: 0x00095A70 File Offset: 0x00093C70
	public void updateRequest(int recieve, int maxCap)
	{
		this.cp.says[this.cp.says.Length - 1] = string.Concat(new string[]
		{
			mResources.received,
			" ",
			recieve.ToString(),
			"/",
			maxCap.ToString()
		});
	}

	// Token: 0x060008E4 RID: 2276 RVA: 0x00095AD0 File Offset: 0x00093CD0
	private void doFireBox()
	{
		bool flag = this.selected < 0;
		if (!flag)
		{
			this.currItem = null;
			MyVector myVector = new MyVector();
			bool flag2 = this.currentTabIndex == 0 && !this.Equals(GameCanvas.panel2);
			if (flag2)
			{
				bool flag3 = this.selected == 0;
				if (flag3)
				{
					this.setNewSelected(global::Char.myCharz().arrItemBox.Length, false);
				}
				else
				{
					sbyte b = (sbyte)this.GetInventorySelect_body(this.selected, this.newSelected);
					Item item = global::Char.myCharz().arrItemBox[(int)b];
					bool flag4 = item != null;
					if (flag4)
					{
						bool flag5 = this.isBoxClan;
						if (flag5)
						{
							myVector.addElement(new Command(mResources.GETOUT, this, 1000, item));
							myVector.addElement(new Command(mResources.USE, this, 2010, item));
						}
						else
						{
							bool flag6 = item.isTypeBody();
							if (flag6)
							{
								myVector.addElement(new Command(mResources.GETOUT, this, 1000, item));
							}
							else
							{
								myVector.addElement(new Command(mResources.GETOUT, this, 1000, item));
							}
						}
						this.currItem = item;
					}
				}
			}
			bool flag7 = this.currentTabIndex == 1 || this.Equals(GameCanvas.panel2);
			if (flag7)
			{
				bool flag8 = this.selected == 0;
				if (flag8)
				{
					this.setNewSelected(global::Char.myCharz().arrItemBody.Length + global::Char.myCharz().arrItemBag.Length, true);
				}
				else
				{
					Item[] arrItemBody = global::Char.myCharz().arrItemBody;
					bool flag9 = !this.GetInventorySelect_isbody(this.selected, this.newSelected, arrItemBody);
					if (flag9)
					{
						sbyte b2 = (sbyte)this.GetInventorySelect_bag(this.selected, this.newSelected, arrItemBody);
						Item item2 = global::Char.myCharz().arrItemBag[(int)b2];
						bool flag10 = item2 != null;
						if (flag10)
						{
							myVector.addElement(new Command(mResources.move_to_chest, this, 1001, item2));
							bool flag11 = item2.isTypeBody();
							if (flag11)
							{
								myVector.addElement(new Command(mResources.USE, this, 2000, item2));
							}
							else
							{
								myVector.addElement(new Command(mResources.USE, this, 2001, item2));
							}
							this.currItem = item2;
						}
					}
					else
					{
						Item item3 = global::Char.myCharz().arrItemBody[this.GetInventorySelect_body(this.selected, this.newSelected)];
						bool flag12 = item3 != null;
						if (flag12)
						{
							myVector.addElement(new Command(mResources.move_to_chest2, this, 1002, item3));
							this.currItem = item3;
						}
					}
				}
			}
			bool flag13 = this.currItem != null;
			if (flag13)
			{
				global::Char.myCharz().setPartTemp(this.currItem.headTemp, this.currItem.bodyTemp, this.currItem.legTemp, this.currItem.bagTemp);
				bool flag14 = this.isBoxClan;
				if (flag14)
				{
					myVector.addElement(new Command(mResources.MOVEOUT, this, 2011, this.currItem));
				}
				GameCanvas.menu.startAt(myVector, this.X, (this.selected + 1) * this.ITEM_HEIGHT - this.cmy + this.yScroll);
				this.addItemDetail(this.currItem);
			}
			else
			{
				this.cp = null;
			}
			this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		}
	}

	// Token: 0x060008E5 RID: 2277 RVA: 0x00095E58 File Offset: 0x00094058
	public void itemRequest(sbyte itemAction, string info, sbyte where, sbyte index)
	{
		GameCanvas.endDlg();
		ItemObject itemObject = new ItemObject();
		itemObject.type = (int)itemAction;
		itemObject.id = (int)index;
		itemObject.where = (int)where;
		GameCanvas.startYesNoDlg(info, new Command(mResources.YES, this, 2004, itemObject), new Command(mResources.NO, this, 4005, null));
	}

	// Token: 0x060008E6 RID: 2278 RVA: 0x00095EB4 File Offset: 0x000940B4
	public void saleRequest(sbyte type, string info, short id)
	{
		ItemObject itemObject = new ItemObject();
		itemObject.type = (int)type;
		itemObject.id = (int)id;
		GameCanvas.startYesNoDlg(info, new Command(mResources.YES, this, 3003, itemObject), new Command(mResources.NO, this, 4005, null));
	}

	// Token: 0x060008E7 RID: 2279 RVA: 0x00095F00 File Offset: 0x00094100
	public void perform(int idAction, object p)
	{
		bool flag = idAction == 9999;
		if (flag)
		{
			TopInfo topInfo = (TopInfo)p;
			Service.gI().sendThachDau(topInfo.pId);
		}
		bool flag2 = idAction == 170391;
		if (flag2)
		{
			Rms.clearAll();
			bool flag3 = mGraphics.zoomLevel > 1;
			if (flag3)
			{
				Rms.saveRMSInt("levelScreenKN", 1);
			}
			else
			{
				Rms.saveRMSInt("levelScreenKN", 0);
			}
			GameMidlet.instance.exit();
		}
		bool flag4 = idAction == 6001;
		if (flag4)
		{
			Item item = (Item)p;
			item.isSelect = false;
			GameCanvas.panel.vItemCombine.removeElement(item);
			bool flag5 = GameCanvas.panel.currentTabIndex == 0;
			if (flag5)
			{
				GameCanvas.panel.setTabCombine();
			}
		}
		bool flag6 = idAction == 6000;
		if (flag6)
		{
			Item item2 = (Item)p;
			for (int i = 0; i < GameCanvas.panel.vItemCombine.size(); i++)
			{
				Item item3 = (Item)GameCanvas.panel.vItemCombine.elementAt(i);
				bool flag7 = item3.template.id == item2.template.id;
				if (flag7)
				{
					GameCanvas.startOKDlg(mResources.already_has_item);
					return;
				}
			}
			item2.isSelect = true;
			GameCanvas.panel.vItemCombine.addElement(item2);
			bool flag8 = GameCanvas.panel.currentTabIndex == 0;
			if (flag8)
			{
				GameCanvas.panel.setTabCombine();
			}
		}
		bool flag9 = idAction == 7000;
		if (flag9)
		{
			bool flag10 = this.isLock;
			if (flag10)
			{
				GameCanvas.startOKDlg(mResources.unlock_item_to_trade);
				return;
			}
			Item item4 = (Item)p;
			for (int j = 0; j < GameCanvas.panel.vMyGD.size(); j++)
			{
				Item item5 = (Item)GameCanvas.panel.vMyGD.elementAt(j);
				bool flag11 = item5.indexUI == item4.indexUI;
				if (flag11)
				{
					GameCanvas.startOKDlg(mResources.already_has_item);
					return;
				}
			}
			bool flag12 = item4.quantity > 1;
			if (flag12)
			{
				this.putQuantily();
				return;
			}
			item4.isSelect = true;
			Item item6 = new Item();
			item6.template = item4.template;
			item6.itemOption = item4.itemOption;
			item6.indexUI = item4.indexUI;
			GameCanvas.panel.vMyGD.addElement(item6);
			Service.gI().giaodich(2, -1, (sbyte)item6.indexUI, item6.quantity);
		}
		bool flag13 = idAction == 7001;
		if (flag13)
		{
			Item item7 = (Item)p;
			item7.isSelect = false;
			GameCanvas.panel.vMyGD.removeElement(item7);
			bool flag14 = GameCanvas.panel.currentTabIndex == 1;
			if (flag14)
			{
				GameCanvas.panel.setTabGiaoDich(true);
			}
			Service.gI().giaodich(4, -1, (sbyte)item7.indexUI, -1);
		}
		bool flag15 = idAction == 7002;
		if (flag15)
		{
			this.isAccept = true;
			GameCanvas.endDlg();
			Service.gI().giaodich(7, -1, -1, -1);
			this.hide();
		}
		bool flag16 = idAction == 8003;
		if (flag16)
		{
			InfoItem infoItem = (InfoItem)p;
			Service.gI().friend(1, infoItem.charInfo.charID);
			bool flag17 = this.type != 8;
			if (flag17)
			{
			}
		}
		bool flag18 = idAction == 8002;
		if (flag18)
		{
			InfoItem infoItem2 = (InfoItem)p;
			Service.gI().friend(2, infoItem2.charInfo.charID);
		}
		bool flag19 = idAction == 8004;
		if (flag19)
		{
			InfoItem infoItem3 = (InfoItem)p;
			Service.gI().gotoPlayer(infoItem3.charInfo.charID);
		}
		bool flag20 = idAction == 8001;
		if (flag20)
		{
			Res.outz("chat player");
			InfoItem infoItem4 = (InfoItem)p;
			bool flag21 = this.chatTField == null;
			if (flag21)
			{
				this.chatTField = new ChatTextField();
				this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
				this.chatTField.initChatTextField();
				this.chatTField.parentScreen = GameCanvas.panel;
			}
			this.chatTField.strChat = mResources.chat_player;
			this.chatTField.tfChat.name = mResources.chat_with + " " + infoItem4.charInfo.cName;
			this.chatTField.to = string.Empty;
			this.chatTField.isShow = true;
			this.chatTField.tfChat.isFocus = true;
			this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
			bool isWindowsPhone = Main.isWindowsPhone;
			if (isWindowsPhone)
			{
				this.chatTField.tfChat.strInfo = this.chatTField.strChat;
			}
			bool flag22 = !Main.isPC;
			if (flag22)
			{
				this.chatTField.startChat2(this, string.Empty);
			}
		}
		bool flag23 = idAction == 1000;
		if (flag23)
		{
			Service.gI().getItem(Panel.BOX_BAG, (sbyte)this.GetInventorySelect_body(this.selected, this.newSelected));
		}
		bool flag24 = idAction == 1001;
		if (flag24)
		{
			sbyte id = (sbyte)this.GetInventorySelect_bag(this.selected, this.newSelected, global::Char.myCharz().arrItemBody);
			Service.gI().getItem(Panel.BAG_BOX, id);
		}
		bool flag25 = idAction == 1003;
		if (flag25)
		{
			this.hide();
		}
		bool flag26 = idAction == 1002;
		if (flag26)
		{
			Service.gI().getItem(Panel.BODY_BOX, (sbyte)this.GetInventorySelect_body(this.selected, this.newSelected));
		}
		bool flag27 = idAction == 2011;
		if (flag27)
		{
			Service.gI().useItem(1, 2, (sbyte)this.GetInventorySelect_body(this.selected, this.newSelected), -1);
		}
		bool flag28 = idAction == 2010;
		if (flag28)
		{
			Service.gI().useItem(0, 2, (sbyte)this.GetInventorySelect_body(this.selected, this.newSelected), -1);
			Item item8 = (Item)p;
			bool flag29 = item8 != null && (item8.template.id == 193 || item8.template.id == 194);
			if (flag29)
			{
				GameCanvas.panel.hide();
			}
		}
		bool flag30 = idAction == 2000;
		if (flag30)
		{
			Item[] arrItemBody = global::Char.myCharz().arrItemBody;
			sbyte id2 = (sbyte)this.GetInventorySelect_bag(this.selected, this.newSelected, arrItemBody);
			bool flag31 = this.isnewInventory;
			if (flag31)
			{
				id2 = (sbyte)this.currItem.indexUI;
			}
			Service.gI().getItem(Panel.BAG_BODY, id2);
		}
		bool flag32 = idAction == 90901;
		if (flag32)
		{
			AddSetDo.AddSet1(this.currItem);
		}
		bool flag33 = idAction == 90902;
		if (flag33)
		{
			AddSetDo.AddSet2(this.currItem);
		}
		bool flag34 = idAction == 2001;
		if (flag34)
		{
			Res.outz("use item");
			Item item9 = (Item)p;
			bool inventorySelect_isbody = this.GetInventorySelect_isbody(this.selected, this.newSelected, global::Char.myCharz().arrItemBody);
			sbyte index = inventorySelect_isbody ? ((sbyte)this.GetInventorySelect_body(this.selected, this.newSelected)) : ((sbyte)this.GetInventorySelect_bag(this.selected, this.newSelected, global::Char.myCharz().arrItemBody));
			bool flag35 = this.isnewInventory;
			if (flag35)
			{
				index = (sbyte)this.currItem.indexUI;
				sbyte where = 0;
				bool flag36 = this.newSelected != 0;
				if (flag36)
				{
					where = 1;
				}
				Service.gI().useItem(0, where, index, -1);
			}
			else
			{
				Service.gI().useItem(0, (!inventorySelect_isbody) ? 1 : 0, index, -1);
			}
			bool flag37 = item9.template.id == 193 || item9.template.id == 194;
			if (flag37)
			{
				GameCanvas.panel.hide();
			}
		}
		bool flag38 = idAction == 2002;
		if (flag38)
		{
			bool flag39 = this.isnewInventory;
			if (flag39)
			{
				Service.gI().getItem(Panel.BODY_BAG, (sbyte)this.sellectInventory);
			}
			else
			{
				Service.gI().getItem(Panel.BODY_BAG, (sbyte)this.GetInventorySelect_body(this.selected, this.newSelected));
			}
		}
		bool flag40 = idAction == 2003;
		if (flag40)
		{
			Res.outz("remove item");
			bool inventorySelect_isbody2 = this.GetInventorySelect_isbody(this.selected, this.newSelected, global::Char.myCharz().arrItemBody);
			sbyte index2 = inventorySelect_isbody2 ? ((sbyte)this.GetInventorySelect_body(this.selected, this.newSelected)) : ((sbyte)this.GetInventorySelect_bag(this.selected, this.newSelected, global::Char.myCharz().arrItemBody));
			Service.gI().useItem(1, (!inventorySelect_isbody2) ? 1 : 0, index2, -1);
		}
		bool flag41 = idAction == 2004;
		if (flag41)
		{
			GameCanvas.endDlg();
			ItemObject itemObject = (ItemObject)p;
			sbyte where2 = (sbyte)itemObject.where;
			sbyte index3 = (sbyte)itemObject.id;
			Service.gI().useItem((itemObject.type != 0) ? 2 : 3, where2, index3, -1);
		}
		bool flag42 = idAction == 2005;
		if (flag42)
		{
			sbyte id3 = (sbyte)this.GetInventorySelect_bag(this.selected, this.newSelected, global::Char.myCharz().arrItemBody);
			Service.gI().getItem(Panel.BAG_PET, id3);
		}
		bool flag43 = idAction == 2006;
		if (flag43)
		{
			Item[] arrItemBody2 = global::Char.myPetz().arrItemBody;
			sbyte id4 = (sbyte)this.selected;
			Service.gI().getItem(Panel.PET_BAG, id4);
		}
		bool flag44 = idAction == 30001;
		if (flag44)
		{
			Res.outz("nhan do");
			Service.gI().buyItem(0, this.selected, 0);
		}
		bool flag45 = idAction == 30002;
		if (flag45)
		{
			Res.outz("xoa do");
			Service.gI().buyItem(1, this.selected, 0);
		}
		bool flag46 = idAction == 30003;
		if (flag46)
		{
			Res.outz("nhan tat");
			Service.gI().buyItem(2, this.selected, 0);
		}
		bool flag47 = idAction == 3000;
		if (flag47)
		{
			Res.outz("mua do");
			Item item10 = (Item)p;
			Service.gI().buyItem(0, (int)item10.template.id, 0);
		}
		bool flag48 = idAction == 3001;
		if (flag48)
		{
			Item item11 = (Item)p;
			GameCanvas.msgdlg.pleasewait();
			Service.gI().buyItem(1, (int)item11.template.id, 0);
		}
		bool flag49 = idAction == 3002;
		if (flag49)
		{
			GameCanvas.endDlg();
			bool inventorySelect_isbody3 = this.GetInventorySelect_isbody(this.selected, this.newSelected, global::Char.myCharz().arrItemBody);
			sbyte id5 = inventorySelect_isbody3 ? ((sbyte)this.GetInventorySelect_body(this.selected, this.newSelected)) : ((sbyte)this.GetInventorySelect_bag(this.selected, this.newSelected, global::Char.myCharz().arrItemBody));
			Service.gI().saleItem(0, (!inventorySelect_isbody3) ? 1 : 0, (short)id5);
		}
		bool flag50 = idAction == 3003;
		if (flag50)
		{
			GameCanvas.endDlg();
			ItemObject itemObject2 = (ItemObject)p;
			Service.gI().saleItem(1, (sbyte)itemObject2.type, (short)itemObject2.id);
		}
		bool flag51 = idAction == 3004;
		if (flag51)
		{
			Item item12 = (Item)p;
			Service.gI().buyItem(3, (int)item12.template.id, 0);
		}
		bool flag52 = idAction == 3005;
		if (flag52)
		{
			Res.outz("mua do");
			Item item13 = (Item)p;
			Service.gI().buyItem(3, (int)item13.template.id, 0);
		}
		bool flag53 = idAction == 4000;
		if (flag53)
		{
			Clan clan = (Clan)p;
			bool flag54 = clan != null;
			if (flag54)
			{
				GameCanvas.endDlg();
				Service.gI().clanMessage(2, null, clan.ID);
			}
		}
		bool flag55 = idAction == 4001;
		if (flag55)
		{
			Clan clan2 = (Clan)p;
			bool flag56 = clan2 != null;
			if (flag56)
			{
				InfoDlg.showWait();
				this.clanReport = mResources.PLEASEWAIT;
				Service.gI().clanMember(clan2.ID);
			}
		}
		bool flag57 = idAction == 4005;
		if (flag57)
		{
			GameCanvas.endDlg();
		}
		bool flag58 = idAction == 4007;
		if (flag58)
		{
			GameCanvas.endDlg();
		}
		bool flag59 = idAction == 4006;
		if (flag59)
		{
			ClanMessage clanMessage = (ClanMessage)p;
			Service.gI().clanDonate(clanMessage.id);
		}
		bool flag60 = idAction == 5001;
		if (flag60)
		{
			Member member = (Member)p;
			Service.gI().clanRemote(member.ID, 0);
		}
		bool flag61 = idAction == 5002;
		if (flag61)
		{
			Member member2 = (Member)p;
			Service.gI().clanRemote(member2.ID, 1);
		}
		bool flag62 = idAction == 5003;
		if (flag62)
		{
			Member member3 = (Member)p;
			Service.gI().clanRemote(member3.ID, 2);
		}
		bool flag63 = idAction == 5004;
		if (flag63)
		{
			Member member4 = (Member)p;
			Service.gI().clanRemote(member4.ID, -1);
		}
		bool flag64 = idAction == 9000;
		if (flag64)
		{
			Service.gI().upPotential(this.selected, 1);
			GameCanvas.endDlg();
			InfoDlg.showWait();
		}
		bool flag65 = idAction == 9006;
		if (flag65)
		{
			Service.gI().upPotential(this.selected, 10);
			GameCanvas.endDlg();
			InfoDlg.showWait();
		}
		bool flag66 = idAction == 9007;
		if (flag66)
		{
			Service.gI().upPotential(this.selected, 100);
			GameCanvas.endDlg();
			InfoDlg.showWait();
		}
		bool flag67 = idAction == 9002;
		if (flag67)
		{
			Skill skill = (Skill)p;
			bool flag68 = skill.template.isSkillSpec();
			if (flag68)
			{
				GameCanvas.startOKDlg(mResources.updSkill);
			}
			else
			{
				GameCanvas.startOKDlg(string.Concat(new string[]
				{
					mResources.can_buy_from_Uron1,
					skill.powRequire.ToString(),
					mResources.can_buy_from_Uron2,
					skill.moreInfo,
					mResources.can_buy_from_Uron3
				}));
			}
		}
		bool flag69 = idAction == 9003;
		if (flag69)
		{
			bool flag70 = GameCanvas.isTouch && !Main.isPC;
			if (flag70)
			{
				GameScr.gI().doSetOnScreenSkill((SkillTemplate)p);
			}
			else
			{
				GameScr.gI().doSetKeySkill((SkillTemplate)p);
			}
		}
		bool flag71 = idAction == 9004;
		if (flag71)
		{
			Skill skill2 = (Skill)p;
			bool flag72 = skill2.template.isSkillSpec();
			if (flag72)
			{
				GameCanvas.startOKDlg(mResources.learnSkill);
			}
			else
			{
				GameCanvas.startOKDlg(string.Concat(new string[]
				{
					mResources.can_buy_from_Uron1,
					skill2.powRequire.ToString(),
					mResources.can_buy_from_Uron2,
					skill2.moreInfo,
					mResources.can_buy_from_Uron3
				}));
			}
		}
		bool flag73 = idAction == 10000;
		if (flag73)
		{
			InfoItem infoItem5 = (InfoItem)p;
			Service.gI().enemy(1, infoItem5.charInfo.charID);
			GameCanvas.panel.hideNow();
		}
		bool flag74 = idAction == 10001;
		if (flag74)
		{
			InfoItem infoItem6 = (InfoItem)p;
			Service.gI().enemy(2, infoItem6.charInfo.charID);
			InfoDlg.showWait();
		}
		bool flag75 = idAction == 10021;
		if (flag75)
		{
		}
		bool flag76 = idAction == 10012;
		if (flag76)
		{
			bool flag77 = this.chatTField == null;
			if (flag77)
			{
				this.chatTField = new ChatTextField();
				this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
				this.chatTField.initChatTextField();
				this.chatTField.parentScreen = ((GameCanvas.panel2 != null) ? GameCanvas.panel2 : GameCanvas.panel);
			}
			this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_NUMERIC);
			this.chatTField.tfChat.setText(string.Empty);
			bool flag78 = this.currItem.quantity == 1;
			if (flag78)
			{
				this.chatTField.strChat = mResources.kiguiXuchat;
				this.chatTField.tfChat.name = mResources.input_money;
			}
			else
			{
				this.chatTField.strChat = mResources.input_quantity + " ";
				this.chatTField.tfChat.name = mResources.input_quantity;
			}
			this.chatTField.tfChat.setMaxTextLenght(10);
			this.chatTField.to = string.Empty;
			this.chatTField.isShow = true;
			this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_NUMERIC);
			bool isTouch = GameCanvas.isTouch;
			if (isTouch)
			{
				this.chatTField.tfChat.doChangeToTextBox();
			}
			bool isWindowsPhone2 = Main.isWindowsPhone;
			if (isWindowsPhone2)
			{
				this.chatTField.tfChat.strInfo = this.chatTField.strChat;
			}
			bool flag79 = !Main.isPC;
			if (flag79)
			{
				this.chatTField.startChat2(this, string.Empty);
			}
		}
		bool flag80 = idAction == 10013;
		if (flag80)
		{
			bool flag81 = this.chatTField == null;
			if (flag81)
			{
				this.chatTField = new ChatTextField();
				this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
				this.chatTField.initChatTextField();
				this.chatTField.parentScreen = ((GameCanvas.panel2 != null) ? GameCanvas.panel2 : GameCanvas.panel);
			}
			this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_NUMERIC);
			this.chatTField.tfChat.setText(string.Empty);
			bool flag82 = this.currItem.quantity == 1;
			if (flag82)
			{
				this.chatTField.strChat = mResources.kiguiLuongchat;
				this.chatTField.tfChat.name = mResources.input_money;
			}
			else
			{
				this.chatTField.strChat = mResources.input_quantity + "  ";
				this.chatTField.tfChat.name = mResources.input_quantity;
			}
			this.chatTField.to = string.Empty;
			this.chatTField.isShow = true;
			this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_NUMERIC);
			bool isTouch2 = GameCanvas.isTouch;
			if (isTouch2)
			{
				this.chatTField.tfChat.doChangeToTextBox();
			}
			bool isWindowsPhone3 = Main.isWindowsPhone;
			if (isWindowsPhone3)
			{
				this.chatTField.tfChat.strInfo = this.chatTField.strChat;
			}
			bool flag83 = !Main.isPC;
			if (flag83)
			{
				this.chatTField.startChat2(this, string.Empty);
			}
		}
		bool flag84 = idAction == 10014;
		if (flag84)
		{
			Item item14 = (Item)p;
			Service.gI().kigui(1, item14.itemId, -1, -1, -1);
			InfoDlg.showWait();
		}
		bool flag85 = idAction == 10015;
		if (flag85)
		{
			Item item15 = (Item)p;
			Service.gI().kigui(2, item15.itemId, -1, -1, -1);
			InfoDlg.showWait();
		}
		bool flag86 = idAction == 10016;
		if (flag86)
		{
			Item item16 = (Item)p;
			Service.gI().kigui(3, item16.itemId, 0, item16.buyCoin, -1);
			InfoDlg.showWait();
		}
		bool flag87 = idAction == 10017;
		if (flag87)
		{
			Item item17 = (Item)p;
			Service.gI().kigui(3, item17.itemId, 1, item17.buyGold, -1);
			InfoDlg.showWait();
		}
		bool flag88 = idAction == 10018;
		if (flag88)
		{
			Item item18 = (Item)p;
			Service.gI().kigui(5, item18.itemId, -1, -1, -1);
			InfoDlg.showWait();
		}
		bool flag89 = idAction == 10019;
		if (flag89)
		{
			Session_ME.gI().close();
			Rms.saveRMSString("acc", string.Empty);
			Rms.saveRMSString("pass", string.Empty);
			GameCanvas.loginScr.tfPass.setText(string.Empty);
			GameCanvas.loginScr.tfUser.setText(string.Empty);
			GameCanvas.loginScr.isLogin2 = false;
			GameCanvas.serverScreen.switchToMe();
			GameCanvas.endDlg();
			this.hide();
		}
		bool flag90 = idAction == 10020;
		if (flag90)
		{
			GameCanvas.endDlg();
		}
		bool flag91 = idAction == 10030;
		if (flag91)
		{
			Service.gI().getFlag(1, (sbyte)this.selected);
			GameCanvas.panel.hideNow();
		}
		bool flag92 = idAction == 10031;
		if (flag92)
		{
			Session_ME.gI().close();
		}
		bool flag93 = idAction == 11000;
		if (flag93)
		{
			Service.gI().kigui(0, this.currItem.itemId, 1, this.currItem.buyRuby, 1);
			GameCanvas.endDlg();
		}
		bool flag94 = idAction == 11001;
		if (flag94)
		{
			Service.gI().kigui(0, this.currItem.itemId, 1, this.currItem.buyRuby, this.currItem.quantilyToBuy);
			GameCanvas.endDlg();
		}
		bool flag95 = idAction == 11002;
		if (flag95)
		{
			this.chatTField.isShow = false;
			GameCanvas.endDlg();
		}
	}

	// Token: 0x060008E8 RID: 2280 RVA: 0x00097530 File Offset: 0x00095730
	public void onChatFromMe(string text, string to)
	{
		bool flag = this.chatTField.tfChat.getText() == null || this.chatTField.tfChat.getText().Equals(string.Empty) || text.Equals(string.Empty) || text == null;
		if (flag)
		{
			this.chatTField.isShow = false;
		}
		else
		{
			bool flag2 = this.chatTField.strChat.Equals(mResources.input_clan_name);
			if (flag2)
			{
				InfoDlg.showWait();
				this.chatTField.isShow = false;
				Service.gI().searchClan(text);
			}
			else
			{
				bool flag3 = this.chatTField.strChat.Equals(mResources.chat_clan);
				if (flag3)
				{
					InfoDlg.showWait();
					this.chatTField.isShow = false;
					Service.gI().clanMessage(0, text, -1);
				}
				else
				{
					bool flag4 = this.chatTField.strChat.Equals(mResources.input_clan_name_to_create);
					if (flag4)
					{
						bool flag5 = this.chatTField.tfChat.getText() == string.Empty;
						if (flag5)
						{
							GameScr.info1.addInfo(mResources.clan_name_blank, 0);
						}
						else
						{
							bool flag6 = this.tabIcon == null;
							if (flag6)
							{
								this.tabIcon = new TabClanIcon();
							}
							this.tabIcon.text = this.chatTField.tfChat.getText();
							this.tabIcon.show(false);
							this.chatTField.isShow = false;
						}
					}
					else
					{
						bool flag7 = this.chatTField.strChat.Equals(mResources.input_clan_slogan);
						if (flag7)
						{
							bool flag8 = this.chatTField.tfChat.getText() == string.Empty;
							if (flag8)
							{
								GameScr.info1.addInfo(mResources.clan_slogan_blank, 0);
							}
							else
							{
								Service.gI().getClan(4, global::Char.myCharz().clan.imgID, this.chatTField.tfChat.getText());
								this.chatTField.isShow = false;
							}
						}
						else
						{
							bool flag9 = this.chatTField.strChat.Equals(mResources.input_Inventory_Pass);
							if (flag9)
							{
								try
								{
									int lockInventory = int.Parse(this.chatTField.tfChat.getText());
									this.chatTField.isShow = false;
									this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
									this.hide();
									bool flag10 = this.chatTField.tfChat.getText().Length != 6 || this.chatTField.tfChat.getText().Equals(string.Empty);
									if (flag10)
									{
										GameCanvas.startOKDlg(mResources.input_Inventory_Pass_wrong);
									}
									else
									{
										Service.gI().setLockInventory(lockInventory);
										this.chatTField.isShow = false;
										this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
										this.hide();
									}
									return;
								}
								catch (Exception)
								{
									GameCanvas.startOKDlg(mResources.ALERT_PRIVATE_PASS_2);
									return;
								}
							}
							bool flag11 = this.chatTField.strChat.Equals(mResources.world_channel_5_luong);
							if (flag11)
							{
								bool flag12 = !this.chatTField.tfChat.getText().Equals(string.Empty);
								if (flag12)
								{
									Service.gI().chatGlobal(this.chatTField.tfChat.getText());
									this.chatTField.isShow = false;
									this.hide();
								}
							}
							else
							{
								bool flag13 = this.chatTField.strChat.Equals(mResources.chat_player);
								if (flag13)
								{
									this.chatTField.isShow = false;
									InfoItem infoItem = null;
									bool flag14 = this.type == 8;
									if (flag14)
									{
										infoItem = (InfoItem)this.logChat.elementAt(this.currInfoItem);
									}
									else
									{
										bool flag15 = this.type == 11;
										if (flag15)
										{
											infoItem = (InfoItem)this.vFriend.elementAt(this.currInfoItem);
										}
									}
									bool flag16 = infoItem.charInfo.charID != global::Char.myCharz().charID;
									if (flag16)
									{
										Service.gI().chatPlayer(text, infoItem.charInfo.charID);
									}
								}
								else
								{
									bool flag17 = this.chatTField.strChat.Equals(mResources.input_quantity_to_trade);
									if (flag17)
									{
										int num = 0;
										try
										{
											num = int.Parse(this.chatTField.tfChat.getText());
										}
										catch (Exception)
										{
											GameCanvas.startOKDlg(mResources.input_quantity_wrong);
											this.chatTField.isShow = false;
											this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
											return;
										}
										bool flag18 = num <= 0 || num > this.currItem.quantity;
										if (flag18)
										{
											GameCanvas.startOKDlg(mResources.input_quantity_wrong);
											this.chatTField.isShow = false;
											this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
										}
										else
										{
											this.currItem.isSelect = true;
											Item item = new Item();
											item.template = this.currItem.template;
											item.quantity = num;
											item.indexUI = this.currItem.indexUI;
											item.itemOption = this.currItem.itemOption;
											GameCanvas.panel.vMyGD.addElement(item);
											Service.gI().giaodich(2, -1, (sbyte)item.indexUI, item.quantity);
											this.chatTField.isShow = false;
											this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
										}
									}
									else
									{
										bool flag19 = this.chatTField.strChat == mResources.input_money_to_trade;
										if (flag19)
										{
											int num2 = 0;
											try
											{
												num2 = int.Parse(this.chatTField.tfChat.getText());
											}
											catch (Exception)
											{
												GameCanvas.startOKDlg(mResources.input_money_wrong);
												this.chatTField.isShow = false;
												this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
												return;
											}
											bool flag20 = (long)num2 > global::Char.myCharz().xu;
											if (flag20)
											{
												GameCanvas.startOKDlg(mResources.not_enough_money);
												this.chatTField.isShow = false;
												this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
											}
											else
											{
												this.moneyGD = num2;
												Service.gI().giaodich(2, -1, -1, num2);
												this.chatTField.isShow = false;
												this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
											}
										}
										else
										{
											bool flag21 = this.chatTField.strChat.Equals(mResources.kiguiXuchat);
											if (flag21)
											{
												try
												{
													Service.gI().kigui(0, this.currItem.itemId, 0, int.Parse(this.chatTField.tfChat.getText()), 1);
												}
												catch (Exception)
												{
													GameCanvas.startOKDlg(mResources.input_money_wrong);
												}
												this.chatTField.isShow = false;
											}
											else
											{
												bool flag22 = this.chatTField.strChat.Equals(mResources.kiguiXuchat + " ");
												if (flag22)
												{
													try
													{
														Service.gI().kigui(0, this.currItem.itemId, 0, int.Parse(this.chatTField.tfChat.getText()), this.currItem.quantilyToBuy);
													}
													catch (Exception)
													{
														GameCanvas.startOKDlg(mResources.input_money_wrong);
													}
													this.chatTField.isShow = false;
												}
												else
												{
													bool flag23 = this.chatTField.strChat.Equals(mResources.kiguiLuongchat);
													if (flag23)
													{
														this.doNotiRuby(0);
														this.chatTField.isShow = false;
													}
													else
													{
														bool flag24 = this.chatTField.strChat.Equals(mResources.kiguiLuongchat + "  ");
														if (flag24)
														{
															this.doNotiRuby(1);
															this.chatTField.isShow = false;
														}
														else
														{
															bool flag25 = this.chatTField.strChat.Equals(mResources.input_quantity + " ");
															if (flag25)
															{
																this.currItem.quantilyToBuy = int.Parse(this.chatTField.tfChat.getText());
																bool flag26 = this.currItem.quantilyToBuy > this.currItem.quantity;
																if (flag26)
																{
																	GameCanvas.startOKDlg(mResources.input_quantity_wrong);
																}
																else
																{
																	this.isKiguiXu = true;
																	this.chatTField.isShow = false;
																}
															}
															else
															{
																bool flag27 = this.chatTField.strChat.Equals(mResources.input_quantity + "  ");
																if (flag27)
																{
																	this.currItem.quantilyToBuy = int.Parse(this.chatTField.tfChat.getText());
																	bool flag28 = this.currItem.quantilyToBuy > this.currItem.quantity;
																	if (flag28)
																	{
																		GameCanvas.startOKDlg(mResources.input_quantity_wrong);
																	}
																	else
																	{
																		this.isKiguiLuong = true;
																		this.chatTField.isShow = false;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x060008E9 RID: 2281 RVA: 0x00097E9C File Offset: 0x0009609C
	public void onCancelChat()
	{
		this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_ANY);
	}

	// Token: 0x060008EA RID: 2282 RVA: 0x00097EB8 File Offset: 0x000960B8
	public void setCombineEff(int type)
	{
		this.typeCombine = type;
		this.rS = 90;
		bool flag = this.typeCombine == 0;
		if (flag)
		{
			this.iDotS = 5;
			this.angleS = (this.angleO = 90);
			this.time = 2;
			for (int i = 0; i < this.vItemCombine.size(); i++)
			{
				Item item = (Item)this.vItemCombine.elementAt(i);
				bool flag2 = item != null;
				if (flag2)
				{
					bool flag3 = item.template.type == 14;
					if (flag3)
					{
						this.iconID2 = item.template.iconID;
					}
					else
					{
						this.iconID1 = item.template.iconID;
					}
				}
			}
		}
		else
		{
			bool flag4 = this.typeCombine == 1;
			if (flag4)
			{
				this.iDotS = 2;
				this.angleS = (this.angleO = 0);
				this.time = 1;
				for (int j = 0; j < this.vItemCombine.size(); j++)
				{
					Item item2 = (Item)this.vItemCombine.elementAt(j);
					bool flag5 = item2 != null;
					if (flag5)
					{
						bool flag6 = j == 0;
						if (flag6)
						{
							this.iconID1 = item2.template.iconID;
						}
						else
						{
							this.iconID2 = item2.template.iconID;
						}
					}
				}
			}
			else
			{
				bool flag7 = this.typeCombine == 2;
				if (flag7)
				{
					this.iDotS = 7;
					this.angleS = (this.angleO = 25);
					this.time = 1;
					for (int k = 0; k < this.vItemCombine.size(); k++)
					{
						Item item3 = (Item)this.vItemCombine.elementAt(k);
						bool flag8 = item3 != null;
						if (flag8)
						{
							this.iconID1 = item3.template.iconID;
						}
					}
				}
				else
				{
					bool flag9 = this.typeCombine == 3;
					if (flag9)
					{
						this.xS = GameCanvas.hw;
						this.yS = GameCanvas.hh;
						this.iDotS = 1;
						this.angleS = (this.angleO = 1);
						this.time = 4;
						for (int l = 0; l < this.vItemCombine.size(); l++)
						{
							Item item4 = (Item)this.vItemCombine.elementAt(l);
							bool flag10 = item4 != null;
							if (flag10)
							{
								this.iconID1 = item4.template.iconID;
							}
						}
					}
					else
					{
						bool flag11 = this.typeCombine == 4;
						if (flag11)
						{
							this.iDotS = this.vItemCombine.size();
							this.iconID = new short[this.iDotS];
							this.angleS = (this.angleO = 25);
							this.time = 1;
							for (int m = 0; m < this.vItemCombine.size(); m++)
							{
								Item item5 = (Item)this.vItemCombine.elementAt(m);
								bool flag12 = item5 != null;
								if (flag12)
								{
									this.iconID[m] = item5.template.iconID;
								}
							}
						}
					}
				}
			}
		}
		this.speed = 1;
		this.isSpeedCombine = true;
		this.isDoneCombine = false;
		this.isCompleteEffCombine = false;
		this.iAngleS = 360 / this.iDotS;
		this.xArgS = new int[this.iDotS];
		this.yArgS = new int[this.iDotS];
		this.xDotS = new int[this.iDotS];
		this.yDotS = new int[this.iDotS];
		this.setDotStar();
		this.isPaintCombine = true;
		this.countUpdate = 10;
		this.countR = 30;
		this.countWait = 10;
		this.addTextCombineNPC(this.idNPC, mResources.combineSpell);
	}

	// Token: 0x060008EB RID: 2283 RVA: 0x000982B0 File Offset: 0x000964B0
	private void updateCombineEff()
	{
		this.countUpdate--;
		bool flag = this.countUpdate < 0;
		if (flag)
		{
			this.countUpdate = 0;
		}
		this.countR--;
		bool flag2 = this.countR < 0;
		if (flag2)
		{
			this.countR = 0;
		}
		bool flag3 = this.countUpdate != 0;
		if (!flag3)
		{
			bool flag4 = !this.isCompleteEffCombine;
			if (flag4)
			{
				bool flag5 = this.time > 0;
				if (flag5)
				{
					bool flag6 = this.combineSuccess != -1;
					if (flag6)
					{
						bool flag7 = this.typeCombine == 3;
						if (flag7)
						{
							bool flag8 = GameCanvas.gameTick % 10 == 0;
							if (flag8)
							{
								Effect me = new Effect(21, this.xS - 10, this.yS + 25, 4, 1, 1);
								EffecMn.addEff(me);
								this.time--;
							}
						}
						else
						{
							bool flag9 = GameCanvas.gameTick % 2 == 0;
							if (flag9)
							{
								bool flag10 = this.isSpeedCombine;
								if (flag10)
								{
									bool flag11 = this.speed < 40;
									if (flag11)
									{
										this.speed += 2;
									}
								}
								else
								{
									bool flag12 = this.speed > 10;
									if (flag12)
									{
										this.speed -= 2;
									}
								}
							}
							bool flag13 = this.countR == 0;
							if (flag13)
							{
								bool flag14 = this.isSpeedCombine;
								if (flag14)
								{
									bool flag15 = this.rS > 0;
									if (flag15)
									{
										this.rS -= 5;
									}
									else
									{
										bool flag16 = GameCanvas.gameTick % 10 == 0;
										if (flag16)
										{
											this.isSpeedCombine = false;
											this.time--;
											this.countR = 5;
											this.countWait = 10;
										}
									}
								}
								else
								{
									bool flag17 = this.rS < 90;
									if (flag17)
									{
										this.rS += 5;
									}
									else
									{
										bool flag18 = GameCanvas.gameTick % 10 == 0;
										if (flag18)
										{
											this.isSpeedCombine = true;
											this.countR = 10;
										}
									}
								}
							}
							this.angleS = this.angleO;
							this.angleS -= this.speed;
							bool flag19 = this.angleS >= 360;
							if (flag19)
							{
								this.angleS -= 360;
							}
							bool flag20 = this.angleS < 0;
							if (flag20)
							{
								this.angleS = 360 + this.angleS;
							}
							this.angleO = this.angleS;
							this.setDotStar();
						}
					}
				}
				else
				{
					bool flag21 = GameCanvas.gameTick % 20 == 0;
					if (flag21)
					{
						this.isCompleteEffCombine = true;
					}
				}
				bool flag22 = GameCanvas.gameTick % 20 == 0;
				if (flag22)
				{
					bool flag23 = this.typeCombine != 3;
					if (flag23)
					{
						EffectPanel.addServerEffect(132, this.xS, this.yS, 2);
					}
					EffectPanel.addServerEffect(114, this.xS, this.yS + 20, 2);
				}
			}
			else
			{
				bool flag24 = !this.isCompleteEffCombine;
				if (!flag24)
				{
					bool flag25 = this.combineSuccess == 1;
					if (flag25)
					{
						bool flag26 = this.countWait == 10;
						if (flag26)
						{
							Effect me2 = new Effect(22, this.xS - 3, this.yS + 25, 4, 1, 1);
							EffecMn.addEff(me2);
						}
						this.countWait--;
						bool flag27 = this.countWait < 0;
						if (flag27)
						{
							this.countWait = 0;
						}
						bool flag28 = this.rS < 300;
						if (flag28)
						{
							this.rS = Res.abs(this.rS + 10);
							bool flag29 = this.rS == 20;
							if (flag29)
							{
								this.addTextCombineNPC(this.idNPC, mResources.combineFail);
							}
						}
						else
						{
							bool flag30 = GameCanvas.gameTick % 20 == 0;
							if (flag30)
							{
								bool flag31 = GameCanvas.w > 2 * Panel.WIDTH_PANEL;
								if (flag31)
								{
									GameCanvas.panel2 = new Panel();
									GameCanvas.panel2.tabName[7] = new string[][]
									{
										new string[]
										{
											string.Empty
										}
									};
									GameCanvas.panel2.setTypeBodyOnly();
									GameCanvas.panel2.show();
								}
								this.combineSuccess = -1;
								this.isDoneCombine = true;
								bool flag32 = this.typeCombine == 4;
								if (flag32)
								{
									GameCanvas.panel.hideNow();
								}
							}
						}
						this.setDotStar();
					}
					else
					{
						bool flag33 = this.combineSuccess != 0;
						if (!flag33)
						{
							bool flag34 = this.countWait == 10;
							if (flag34)
							{
								bool flag35 = this.typeCombine == 2;
								if (flag35)
								{
									Effect me3 = new Effect(20, this.xS - 3, this.yS + 15, 4, 2, 1);
									EffecMn.addEff(me3);
								}
								else
								{
									Effect me4 = new Effect(21, this.xS - 10, this.yS + 25, 4, 1, 1);
									EffecMn.addEff(me4);
								}
								this.addTextCombineNPC(this.idNPC, mResources.combineSuccess);
								this.isPaintCombine = false;
							}
							bool flag36 = this.isPaintCombine;
							if (!flag36)
							{
								this.countWait--;
								bool flag37 = this.countWait < -50;
								if (flag37)
								{
									this.countWait = -50;
									bool flag38 = this.typeCombine < 3 && GameCanvas.w > 2 * Panel.WIDTH_PANEL;
									if (flag38)
									{
										GameCanvas.panel2 = new Panel();
										GameCanvas.panel2.tabName[7] = new string[][]
										{
											new string[]
											{
												string.Empty
											}
										};
										GameCanvas.panel2.setTypeBodyOnly();
										GameCanvas.panel2.show();
									}
									this.combineSuccess = -1;
									this.isDoneCombine = true;
									bool flag39 = this.typeCombine == 4;
									if (flag39)
									{
										GameCanvas.panel.hideNow();
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x060008EC RID: 2284 RVA: 0x000988BC File Offset: 0x00096ABC
	public void paintCombineEff(mGraphics g)
	{
		GameScr.gI().paintBlackSky(g);
		this.paintCombineNPC(g);
		bool flag = GameCanvas.gameTick % 4 == 0;
		if (flag)
		{
			g.drawImage(ItemMap.imageFlare, this.xS, this.yS + 15, mGraphics.BOTTOM | mGraphics.HCENTER);
		}
		bool flag2 = this.typeCombine == 0;
		if (flag2)
		{
			for (int i = 0; i < this.yArgS.Length; i++)
			{
				SmallImage.drawSmallImage(g, (int)this.iconID1, this.xS, this.yS, 0, mGraphics.VCENTER | mGraphics.HCENTER);
				bool flag3 = this.isPaintCombine;
				if (flag3)
				{
					SmallImage.drawSmallImage(g, (int)this.iconID2, this.xDotS[i], this.yDotS[i], 0, mGraphics.VCENTER | mGraphics.HCENTER);
				}
			}
		}
		else
		{
			bool flag4 = this.typeCombine == 1;
			if (flag4)
			{
				bool flag5 = !this.isPaintCombine;
				if (flag5)
				{
					SmallImage.drawSmallImage(g, (int)this.iconID3, this.xS, this.yS, 0, mGraphics.VCENTER | mGraphics.HCENTER);
				}
				else
				{
					for (int j = 0; j < this.yArgS.Length; j++)
					{
						SmallImage.drawSmallImage(g, (int)this.iconID1, this.xDotS[0], this.yDotS[0], 0, mGraphics.VCENTER | mGraphics.HCENTER);
						SmallImage.drawSmallImage(g, (int)this.iconID2, this.xDotS[1], this.yDotS[1], 0, mGraphics.VCENTER | mGraphics.HCENTER);
					}
				}
			}
			else
			{
				bool flag6 = this.typeCombine == 2;
				if (flag6)
				{
					bool flag7 = !this.isPaintCombine;
					if (flag7)
					{
						SmallImage.drawSmallImage(g, (int)this.iconID3, this.xS, this.yS, 0, mGraphics.VCENTER | mGraphics.HCENTER);
					}
					else
					{
						for (int k = 0; k < this.yArgS.Length; k++)
						{
							SmallImage.drawSmallImage(g, (int)this.iconID1, this.xDotS[k], this.yDotS[k], 0, mGraphics.VCENTER | mGraphics.HCENTER);
						}
					}
				}
				else
				{
					bool flag8 = this.typeCombine == 3;
					if (flag8)
					{
						bool flag9 = !this.isPaintCombine;
						if (flag9)
						{
							SmallImage.drawSmallImage(g, (int)this.iconID3, this.xS, this.yS, 0, mGraphics.VCENTER | mGraphics.HCENTER);
						}
						else
						{
							SmallImage.drawSmallImage(g, (int)this.iconID1, this.xS, this.yS, 0, mGraphics.VCENTER | mGraphics.HCENTER);
						}
					}
					else
					{
						bool flag10 = this.typeCombine != 4;
						if (!flag10)
						{
							bool flag11 = !this.isPaintCombine;
							if (flag11)
							{
								bool flag12 = this.iconID3 != -1;
								if (flag12)
								{
									SmallImage.drawSmallImage(g, (int)this.iconID3, this.xS, this.yS, 0, mGraphics.VCENTER | mGraphics.HCENTER);
								}
							}
							else
							{
								for (int l = 0; l < this.iconID.Length; l++)
								{
									SmallImage.drawSmallImage(g, (int)this.iconID[l], this.xDotS[l], this.yDotS[l], 0, mGraphics.VCENTER | mGraphics.HCENTER);
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x060008ED RID: 2285 RVA: 0x00098C28 File Offset: 0x00096E28
	private void setDotStar()
	{
		for (int i = 0; i < this.yArgS.Length; i++)
		{
			bool flag = this.angleS >= 360;
			if (flag)
			{
				this.angleS -= 360;
			}
			bool flag2 = this.angleS < 0;
			if (flag2)
			{
				this.angleS = 360 + this.angleS;
			}
			this.yArgS[i] = Res.abs(this.rS * Res.sin(this.angleS) / 1024);
			this.xArgS[i] = Res.abs(this.rS * Res.cos(this.angleS) / 1024);
			bool flag3 = this.angleS < 90;
			if (flag3)
			{
				this.xDotS[i] = this.xS + this.xArgS[i];
				this.yDotS[i] = this.yS - this.yArgS[i];
			}
			else
			{
				bool flag4 = this.angleS >= 90 && this.angleS < 180;
				if (flag4)
				{
					this.xDotS[i] = this.xS - this.xArgS[i];
					this.yDotS[i] = this.yS - this.yArgS[i];
				}
				else
				{
					bool flag5 = this.angleS >= 180 && this.angleS < 270;
					if (flag5)
					{
						this.xDotS[i] = this.xS - this.xArgS[i];
						this.yDotS[i] = this.yS + this.yArgS[i];
					}
					else
					{
						this.xDotS[i] = this.xS + this.xArgS[i];
						this.yDotS[i] = this.yS + this.yArgS[i];
					}
				}
			}
			this.angleS -= this.iAngleS;
		}
	}

	// Token: 0x060008EE RID: 2286 RVA: 0x00098E1C File Offset: 0x0009701C
	public void paintCombineNPC(mGraphics g)
	{
		g.translate(-GameScr.cmx, -GameScr.cmy);
		bool flag = this.typeCombine < 3;
		if (flag)
		{
			for (int i = 0; i < GameScr.vNpc.size(); i++)
			{
				Npc npc = (Npc)GameScr.vNpc.elementAt(i);
				bool flag2 = npc.template.npcTemplateId == this.idNPC;
				if (flag2)
				{
					npc.paint(g);
					bool flag3 = npc.chatInfo != null;
					if (flag3)
					{
						npc.chatInfo.paint(g, npc.cx, npc.cy - npc.ch - GameCanvas.transY, npc.cdir);
					}
				}
			}
		}
		GameCanvas.resetTrans(g);
		bool flag4 = GameCanvas.gameTick % 4 == 0;
		if (flag4)
		{
			g.drawImage(ItemMap.imageFlare, this.xS - 5, this.yS + 15, mGraphics.BOTTOM | mGraphics.HCENTER);
			g.drawImage(ItemMap.imageFlare, this.xS + 5, this.yS + 15, mGraphics.BOTTOM | mGraphics.HCENTER);
			g.drawImage(ItemMap.imageFlare, this.xS, this.yS + 15, mGraphics.BOTTOM | mGraphics.HCENTER);
		}
		for (int j = 0; j < Effect2.vEffect3.size(); j++)
		{
			Effect2 effect = (Effect2)Effect2.vEffect3.elementAt(j);
			effect.paint(g);
		}
	}

	// Token: 0x060008EF RID: 2287 RVA: 0x00098FAC File Offset: 0x000971AC
	public void addTextCombineNPC(int idNPC, string text)
	{
		bool flag = this.typeCombine >= 3;
		if (!flag)
		{
			for (int i = 0; i < GameScr.vNpc.size(); i++)
			{
				Npc npc = (Npc)GameScr.vNpc.elementAt(i);
				bool flag2 = npc.template.npcTemplateId == idNPC;
				if (flag2)
				{
					npc.addInfo(text);
				}
			}
		}
	}

	// Token: 0x060008F0 RID: 2288 RVA: 0x00099018 File Offset: 0x00097218
	public void setTypeOption()
	{
		this.type = 19;
		this.setType(0);
		this.setTabOption();
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x060008F1 RID: 2289 RVA: 0x00099050 File Offset: 0x00097250
	private void setTabOption()
	{
		SoundMn.gI().getStrOption();
		this.currentListLength = Panel.strCauhinh.Length;
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
	}

	// Token: 0x060008F2 RID: 2290 RVA: 0x00099124 File Offset: 0x00097324
	private void paintOption(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		for (int i = 0; i < Panel.strCauhinh.Length; i++)
		{
			int x = this.xScroll;
			int num = this.yScroll + i * this.ITEM_HEIGHT;
			int num2 = this.wScroll - 1;
			int h = this.ITEM_HEIGHT - 1;
			bool flag = num - this.cmy <= this.yScroll + this.hScroll && num - this.cmy >= this.yScroll - this.ITEM_HEIGHT;
			if (flag)
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(x, num, num2, h);
				mFont.tahoma_7b_dark.drawString(g, Panel.strCauhinh[i], this.xScroll + 25, num + 6, mFont.LEFT);
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x060008F3 RID: 2291 RVA: 0x0009923C File Offset: 0x0009743C
	private void doFireOption()
	{
		bool flag = this.selected < 0;
		if (!flag)
		{
			switch (this.selected)
			{
			case 0:
				SoundMn.gI().AuraToolOption();
				break;
			case 1:
				SoundMn.gI().AuraToolOption2();
				break;
			case 2:
				SoundMn.gI().soundToolOption();
				break;
			case 3:
			{
				bool isPC = Main.isPC;
				if (isPC)
				{
					GameCanvas.startYesNoDlg(mResources.changeSizeScreen, new Command(mResources.YES, this, 170391, null), new Command(mResources.NO, this, 4005, null));
				}
				else
				{
					SoundMn.gI().CaseSizeScr();
				}
				break;
			}
			case 4:
			{
				bool isPC2 = Main.isPC;
				if (isPC2)
				{
					GameCanvas.startYesNoDlg(mResources.changeSizeScreen, new Command(mResources.YES, this, 170391, null), new Command(mResources.NO, this, 4005, null));
				}
				else
				{
					SoundMn.gI().CaseAnalog();
				}
				break;
			}
			case 5:
				SoundMn.gI().CaseAnalog();
				break;
			}
		}
	}

	// Token: 0x060008F4 RID: 2292 RVA: 0x0009935C File Offset: 0x0009755C
	public void setTypeAccount()
	{
		this.type = 20;
		this.setType(0);
		this.setTabAccount();
		this.cmx = (this.cmtoX = 0);
	}

	// Token: 0x060008F5 RID: 2293 RVA: 0x00099394 File Offset: 0x00097594
	private void setTabAccount()
	{
		bool iphoneVersionApp = Main.IphoneVersionApp;
		if (iphoneVersionApp)
		{
			Panel.strAccount = new string[]
			{
				mResources.inventory_Pass,
				mResources.friend,
				mResources.enemy,
				mResources.msg
			};
			bool canAutoPlay = GameScr.canAutoPlay;
			if (canAutoPlay)
			{
				Panel.strAccount = new string[]
				{
					mResources.inventory_Pass,
					mResources.friend,
					mResources.enemy,
					mResources.msg,
					mResources.autoFunction
				};
			}
		}
		else
		{
			Panel.strAccount = new string[]
			{
				mResources.inventory_Pass,
				mResources.friend,
				mResources.enemy,
				mResources.msg,
				mResources.charger
			};
			bool canAutoPlay2 = GameScr.canAutoPlay;
			if (canAutoPlay2)
			{
				Panel.strAccount = new string[]
				{
					mResources.inventory_Pass,
					mResources.friend,
					mResources.enemy,
					mResources.msg,
					mResources.charger,
					mResources.autoFunction
				};
			}
			bool flag = (mSystem.clientType == 2 || mSystem.clientType == 7) && mResources.language != 2;
			if (flag)
			{
				Panel.strAccount = new string[]
				{
					mResources.inventory_Pass,
					mResources.friend,
					mResources.enemy,
					mResources.msg,
					mResources.charger
				};
				bool canAutoPlay3 = GameScr.canAutoPlay;
				if (canAutoPlay3)
				{
					Panel.strAccount = new string[]
					{
						mResources.inventory_Pass,
						mResources.friend,
						mResources.enemy,
						mResources.msg,
						mResources.charger,
						mResources.autoFunction
					};
				}
			}
		}
		this.currentListLength = Panel.strAccount.Length;
		this.ITEM_HEIGHT = 24;
		this.selected = (GameCanvas.isTouch ? -1 : 0);
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag2 = this.cmyLim < 0;
		if (flag2)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag3 = this.cmy < 0;
		if (flag3)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag4 = this.cmy > this.cmyLim;
		if (flag4)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
	}

	// Token: 0x060008F6 RID: 2294 RVA: 0x000995FC File Offset: 0x000977FC
	private void paintAccount(mGraphics g)
	{
		g.setClip(this.xScroll, this.yScroll, this.wScroll, this.hScroll);
		g.translate(0, -this.cmy);
		for (int i = 0; i < Panel.strAccount.Length; i++)
		{
			int x = this.xScroll;
			int num = this.yScroll + i * this.ITEM_HEIGHT;
			int num2 = this.wScroll - 1;
			int h = this.ITEM_HEIGHT - 1;
			bool flag = num - this.cmy <= this.yScroll + this.hScroll && num - this.cmy >= this.yScroll - this.ITEM_HEIGHT;
			if (flag)
			{
				g.setColor((i != this.selected) ? 15196114 : 16383818);
				g.fillRect(x, num, num2, h);
				mFont.tahoma_7b_dark.drawString(g, Panel.strAccount[i], this.xScroll + this.wScroll / 2, num + 6, mFont.CENTER);
			}
		}
		this.paintScrollArrow(g);
	}

	// Token: 0x060008F7 RID: 2295 RVA: 0x00099718 File Offset: 0x00097918
	private void doFireAccount()
	{
		bool flag = this.selected < 0;
		if (!flag)
		{
			switch (this.selected)
			{
			case 0:
			{
				GameCanvas.endDlg();
				bool flag2 = this.chatTField == null;
				if (flag2)
				{
					this.chatTField = new ChatTextField();
					this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
					this.chatTField.initChatTextField();
					this.chatTField.parentScreen = GameCanvas.panel;
				}
				this.chatTField.tfChat.setText(string.Empty);
				this.chatTField.strChat = mResources.input_Inventory_Pass;
				this.chatTField.tfChat.name = mResources.input_Inventory_Pass;
				this.chatTField.to = string.Empty;
				this.chatTField.isShow = true;
				this.chatTField.tfChat.isFocus = true;
				this.chatTField.tfChat.setIputType(TField.INPUT_TYPE_NUMERIC);
				bool isTouch = GameCanvas.isTouch;
				if (isTouch)
				{
					this.chatTField.tfChat.doChangeToTextBox();
				}
				bool flag3 = !Main.isPC;
				if (flag3)
				{
					this.chatTField.startChat2(this, string.Empty);
				}
				bool isWindowsPhone = Main.isWindowsPhone;
				if (isWindowsPhone)
				{
					this.chatTField.tfChat.strInfo = this.chatTField.strChat;
				}
				break;
			}
			case 1:
				Service.gI().friend(0, -1);
				InfoDlg.showWait();
				break;
			case 2:
				Service.gI().enemy(0, -1);
				InfoDlg.showWait();
				break;
			case 3:
			{
				this.setTypeMessage();
				bool flag4 = this.chatTField == null;
				if (flag4)
				{
					this.chatTField = new ChatTextField();
					this.chatTField.tfChat.y = GameCanvas.h - 35 - ChatTextField.gI().tfChat.height;
					this.chatTField.initChatTextField();
					this.chatTField.parentScreen = GameCanvas.panel;
				}
				break;
			}
			case 4:
			{
				bool flag5 = mResources.language == 2;
				if (flag5)
				{
					string url = "http://dragonball.indonaga.com/coda/?username=" + GameCanvas.loginScr.tfUser.getText();
					this.hideNow();
					try
					{
						GameMidlet.instance.platformRequest(url);
						break;
					}
					catch (Exception ex)
					{
						ex.StackTrace.ToString();
						break;
					}
				}
				this.hideNow();
				bool flag6 = global::Char.myCharz().taskMaint.taskId <= 10;
				if (flag6)
				{
					GameCanvas.startOKDlg(mResources.finishBomong);
				}
				else
				{
					MoneyCharge.gI().switchToMe();
				}
				break;
			}
			case 5:
				this.setTypeAuto();
				break;
			}
		}
	}

	// Token: 0x060008F8 RID: 2296 RVA: 0x00099A00 File Offset: 0x00097C00
	private void updateKeyOption()
	{
		this.updateKeyScrollView();
	}

	// Token: 0x060008F9 RID: 2297 RVA: 0x00099A0A File Offset: 0x00097C0A
	public void setTypeSpeacialSkill()
	{
		this.type = 25;
		this.setType(0);
		this.setTabSpeacialSkill();
		this.currentTabIndex = 0;
	}

	// Token: 0x060008FA RID: 2298 RVA: 0x00099A2C File Offset: 0x00097C2C
	private void setTabSpeacialSkill()
	{
		this.ITEM_HEIGHT = 24;
		this.currentListLength = global::Char.myCharz().infoSpeacialSkill[this.currentTabIndex].Length;
		this.cmyLim = this.currentListLength * this.ITEM_HEIGHT - this.hScroll;
		bool flag = this.cmyLim < 0;
		if (flag)
		{
			this.cmyLim = 0;
		}
		this.cmy = (this.cmtoY = this.cmyLast[this.currentTabIndex]);
		bool flag2 = this.cmy < 0;
		if (flag2)
		{
			this.cmy = (this.cmtoY = 0);
		}
		bool flag3 = this.cmy > this.cmyLim;
		if (flag3)
		{
			this.cmy = (this.cmtoY = this.cmyLim);
		}
		this.selected = (GameCanvas.isTouch ? -1 : 0);
	}

	// Token: 0x060008FB RID: 2299 RVA: 0x00099B00 File Offset: 0x00097D00
	public bool isTypeShop()
	{
		return this.type == 1;
	}

	// Token: 0x060008FC RID: 2300 RVA: 0x00099B28 File Offset: 0x00097D28
	private void doNotiRuby(int type)
	{
		try
		{
			this.currItem.buyRuby = int.Parse(this.chatTField.tfChat.getText());
		}
		catch (Exception)
		{
			GameCanvas.startOKDlg(mResources.input_money_wrong);
			this.chatTField.isShow = false;
			return;
		}
		Command cmdYes = new Command(mResources.YES, this, (type != 0) ? 11001 : 11000, null);
		Command cmdNo = new Command(mResources.NO, this, 11002, null);
		GameCanvas.startYesNoDlg(mResources.notiRuby, cmdYes, cmdNo);
	}

	// Token: 0x060008FD RID: 2301 RVA: 0x00099BC0 File Offset: 0x00097DC0
	public static void paintUpgradeEffect(int x, int y, int wItem, int hItem, int nline, int cl, mGraphics g)
	{
		try
		{
			int num = (wItem << 1) + (hItem << 1);
			int num2 = num / nline;
			Panel.nsize = Panel.sizeUpgradeEff.Length;
			bool flag = nline > 4;
			if (flag)
			{
				Panel.nsize = 2;
			}
			for (int i = 0; i < nline; i++)
			{
				for (int j = 0; j < Panel.nsize; j++)
				{
					int wSize = (Panel.sizeUpgradeEff[j] <= 1) ? 1 : ((Panel.sizeUpgradeEff[j] >> 1) + 1);
					int x2 = x + Panel.upgradeEffectX(num2 * i, GameCanvas.gameTick - j * 4, wItem, hItem, wSize);
					int y2 = y + Panel.upgradeEffectY(num2 * i, GameCanvas.gameTick - j * 4, wItem, hItem, wSize);
					g.setColor(Panel.colorUpgradeEffect[cl][j]);
					g.fillRect(x2, y2, Panel.sizeUpgradeEff[j], Panel.sizeUpgradeEff[j]);
				}
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060008FE RID: 2302 RVA: 0x00099CD0 File Offset: 0x00097ED0
	private static int upgradeEffectX(int dk, int tick, int wItem, int hitem, int wSize)
	{
		int num = (tick + dk) % ((wItem << 1) + (hitem << 1));
		bool flag = 0 <= num && num < wItem;
		int result;
		if (flag)
		{
			result = num % wItem;
		}
		else
		{
			bool flag2 = wItem <= num && num < wItem + hitem;
			if (flag2)
			{
				result = wItem - wSize;
			}
			else
			{
				bool flag3 = wItem + hitem <= num && num < (wItem << 1) + hitem;
				if (flag3)
				{
					result = wItem - (num - hitem) % wItem - wSize;
				}
				else
				{
					result = 0;
				}
			}
		}
		return result;
	}

	// Token: 0x060008FF RID: 2303 RVA: 0x00099D44 File Offset: 0x00097F44
	private static int upgradeEffectY(int dk, int tick, int wItem, int hitem, int wSize)
	{
		int num = (tick + dk) % ((wItem << 1) + (hitem << 1));
		bool flag = 0 <= num && num < wItem;
		int result;
		if (flag)
		{
			result = 0;
		}
		else
		{
			bool flag2 = wItem <= num && num < wItem + hitem;
			if (flag2)
			{
				result = num % wItem;
			}
			else
			{
				bool flag3 = wItem + hitem <= num && num < (wItem << 1) + hitem;
				if (flag3)
				{
					result = hitem - wSize;
				}
				else
				{
					result = hitem - (num - (wItem << 1)) % hitem - wSize;
				}
			}
		}
		return result;
	}

	// Token: 0x06000900 RID: 2304 RVA: 0x00099DBC File Offset: 0x00097FBC
	public static int GetColor_ItemBg(int id)
	{
		if (!true)
		{
		}
		int result;
		switch (id)
		{
		case 1:
			result = 2786816;
			break;
		case 2:
			result = 7078041;
			break;
		case 3:
			result = 12537346;
			break;
		case 4:
			result = 1269146;
			break;
		case 5:
			result = 13279744;
			break;
		case 6:
			result = 11599872;
			break;
		default:
			result = -1;
			break;
		}
		if (!true)
		{
		}
		return result;
	}

	// Token: 0x06000901 RID: 2305 RVA: 0x00099E30 File Offset: 0x00098030
	public static sbyte GetColor_Item_Upgrade(int lv)
	{
		bool flag = lv < 0;
		sbyte result;
		if (flag)
		{
			result = 0;
		}
		else
		{
			switch (lv)
			{
			case 0:
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
				result = 0;
				break;
			case 9:
				result = 4;
				break;
			case 10:
				result = 1;
				break;
			case 11:
				result = 5;
				break;
			case 12:
				result = 3;
				break;
			case 13:
				result = 2;
				break;
			default:
				result = 6;
				break;
			}
		}
		return result;
	}

	// Token: 0x06000902 RID: 2306 RVA: 0x00099EAC File Offset: 0x000980AC
	public static mFont GetFont(int color)
	{
		mFont result = mFont.tahoma_7;
		switch (color)
		{
		case -1:
			result = mFont.tahoma_7;
			break;
		case 0:
			result = mFont.tahoma_7b_dark;
			break;
		case 1:
			result = mFont.tahoma_7b_green;
			break;
		case 2:
			result = mFont.tahoma_7b_blue;
			break;
		case 3:
			result = mFont.tahoma_7_red;
			break;
		case 4:
			result = mFont.tahoma_7_green;
			break;
		case 5:
			result = mFont.tahoma_7_blue;
			break;
		case 7:
			result = mFont.tahoma_7b_red;
			break;
		case 8:
			result = mFont.tahoma_7b_yellow;
			break;
		}
		return result;
	}

	// Token: 0x06000903 RID: 2307 RVA: 0x00099F44 File Offset: 0x00098144
	public void paintOptItem(mGraphics g, int idOpt, int param, int x, int y, int w, int h)
	{
		switch (idOpt)
		{
		case 34:
		{
			bool flag = this.imgo_0 != null;
			if (flag)
			{
				g.drawImage(this.imgo_0, x, y + h - this.imgo_0.getHeight());
			}
			else
			{
				this.imgo_0 = mSystem.loadImage("/mainImage/o_0.png");
			}
			bool flag2 = this.imgo_1 != null;
			if (flag2)
			{
				g.drawImage(this.imgo_1, x, y + h - this.imgo_1.getHeight());
			}
			else
			{
				this.imgo_1 = mSystem.loadImage("/mainImage/o_1.png");
			}
			break;
		}
		case 35:
		{
			bool flag3 = this.imgo_0 != null;
			if (flag3)
			{
				g.drawImage(this.imgo_0, x, y + h - this.imgo_0.getHeight());
			}
			else
			{
				this.imgo_0 = mSystem.loadImage("/mainImage/o_0.png");
			}
			bool flag4 = this.imgo_2 != null;
			if (flag4)
			{
				g.drawImage(this.imgo_2, x, y + h - this.imgo_2.getHeight());
			}
			else
			{
				this.imgo_2 = mSystem.loadImage("/mainImage/o_2.png");
			}
			break;
		}
		case 36:
		{
			bool flag5 = this.imgo_0 != null;
			if (flag5)
			{
				g.drawImage(this.imgo_0, x, y + h - this.imgo_0.getHeight());
			}
			else
			{
				this.imgo_0 = mSystem.loadImage("/mainImage/o_0.png");
			}
			bool flag6 = this.imgo_3 != null;
			if (flag6)
			{
				g.drawImage(this.imgo_3, x, y + h - this.imgo_3.getHeight());
			}
			else
			{
				this.imgo_3 = mSystem.loadImage("/mainImage/o_3.png");
			}
			break;
		}
		}
	}

	// Token: 0x06000904 RID: 2308 RVA: 0x0009A118 File Offset: 0x00098318
	public void paintOptSlotItem(mGraphics g, int idOpt, int param, int x, int y, int w, int h)
	{
		bool flag = idOpt == 102 && param > ChatPopup.numSlot;
		if (flag)
		{
			sbyte color_Item_Upgrade = Panel.GetColor_Item_Upgrade(param);
			int nline = param - ChatPopup.numSlot;
			Panel.paintUpgradeEffect(x, y, w, h, nline, (int)color_Item_Upgrade, g);
		}
	}

	// Token: 0x06000905 RID: 2309 RVA: 0x0009A15C File Offset: 0x0009835C
	public static mFont setTextColor(int id, int type)
	{
		bool flag = type == 0;
		mFont result;
		if (flag)
		{
			if (!true)
			{
			}
			mFont mFont;
			switch (id)
			{
			case 0:
				mFont = mFont.bigNumber_While;
				goto IL_6A;
			case 1:
				mFont = mFont.bigNumber_green;
				goto IL_6A;
			case 3:
				mFont = mFont.bigNumber_orange;
				goto IL_6A;
			case 4:
				mFont = mFont.bigNumber_blue;
				goto IL_6A;
			case 5:
				mFont = mFont.bigNumber_yellow;
				goto IL_6A;
			case 6:
				mFont = mFont.bigNumber_red;
				goto IL_6A;
			}
			mFont = mFont.bigNumber_While;
			IL_6A:
			if (!true)
			{
			}
			result = mFont;
		}
		else
		{
			if (!true)
			{
			}
			mFont mFont;
			switch (id)
			{
			case 0:
				mFont = mFont.tahoma_7b_white;
				goto IL_DE;
			case 1:
				mFont = mFont.tahoma_7b_green;
				goto IL_DE;
			case 3:
				mFont = mFont.tahoma_7b_yellowSmall2;
				goto IL_DE;
			case 4:
				mFont = mFont.tahoma_7b_blue;
				goto IL_DE;
			case 5:
				mFont = mFont.tahoma_7b_yellow;
				goto IL_DE;
			case 6:
				mFont = mFont.tahoma_7b_red;
				goto IL_DE;
			case 7:
				mFont = mFont.tahoma_7b_dark;
				goto IL_DE;
			}
			mFont = mFont.tahoma_7b_white;
			IL_DE:
			if (!true)
			{
			}
			result = mFont;
		}
		return result;
	}

	// Token: 0x06000906 RID: 2310 RVA: 0x0009A250 File Offset: 0x00098450
	private bool GetInventorySelect_isbody(int select, int subSelect, Item[] arrItem)
	{
		int num = select - 1 + subSelect * 20;
		return subSelect == 0 && num < arrItem.Length;
	}

	// Token: 0x06000907 RID: 2311 RVA: 0x0009A278 File Offset: 0x00098478
	private int GetInventorySelect_body(int select, int subSelect)
	{
		return select - 1 + subSelect * 20;
	}

	// Token: 0x06000908 RID: 2312 RVA: 0x0009A294 File Offset: 0x00098494
	private int GetInventorySelect_bag(int select, int subSelect, Item[] arrItem)
	{
		int num = select - 1 + subSelect * 20;
		return num - arrItem.Length;
	}

	// Token: 0x06000909 RID: 2313 RVA: 0x0009A2B4 File Offset: 0x000984B4
	private bool isTabInven()
	{
		return (this.type == 0 && this.currentTabIndex == 1) || (this.type == 7 && this.currentTabIndex == 0);
	}

	// Token: 0x0600090A RID: 2314 RVA: 0x0009A2FC File Offset: 0x000984FC
	private void updateKeyInvenTab()
	{
		bool flag = this.selected < 0;
		if (!flag)
		{
			bool flag2 = GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23];
			if (flag2)
			{
				this.newSelected--;
				bool flag3 = this.isnewInventory;
				if (flag3)
				{
					this.currentListLength = 5;
				}
				bool flag4 = this.newSelected < 0;
				if (flag4)
				{
					this.newSelected = 0;
					bool isFocusPanel = GameCanvas.isFocusPanel2;
					if (isFocusPanel)
					{
						GameCanvas.isFocusPanel2 = false;
						GameCanvas.panel.selected = 0;
					}
				}
			}
			else
			{
				bool flag5 = !GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24];
				if (!flag5)
				{
					this.newSelected++;
					bool flag6 = this.isnewInventory;
					if (flag6)
					{
						this.currentListLength = 5;
					}
					bool flag7 = this.newSelected > (int)(this.size_tab - 1);
					if (flag7)
					{
						this.newSelected = (int)(this.size_tab - 1);
						bool flag8 = GameCanvas.panel2 != null;
						if (flag8)
						{
							GameCanvas.isFocusPanel2 = true;
							GameCanvas.panel2.selected = 0;
						}
					}
				}
			}
		}
	}

	// Token: 0x0600090B RID: 2315 RVA: 0x0009A41C File Offset: 0x0009861C
	private void updateKeyInventory()
	{
		this.updateKeyScrollView();
		bool flag = this.selected == 0;
		if (flag)
		{
			this.updateKeyInvenTab();
		}
	}

	// Token: 0x0600090C RID: 2316 RVA: 0x0009A448 File Offset: 0x00098648
	private bool IsTabOption()
	{
		bool flag = this.size_tab > 0;
		if (flag)
		{
			bool flag2 = this.currentTabName.Length > 1;
			if (flag2)
			{
				bool flag3 = this.selected == 0;
				if (flag3)
				{
					return true;
				}
			}
			else
			{
				bool flag4 = this.selected >= 0;
				if (flag4)
				{
					return true;
				}
			}
		}
		return false;
	}

	// Token: 0x0600090D RID: 2317 RVA: 0x0009A4A8 File Offset: 0x000986A8
	private int checkCurrentListLength(int arrLength)
	{
		int num = 20;
		int num2 = arrLength / 20 + ((arrLength % 20 > 0) ? 1 : 0);
		this.size_tab = (sbyte)num2;
		bool flag = this.newSelected > num2 - 1;
		if (flag)
		{
			this.newSelected = num2 - 1;
		}
		bool flag2 = arrLength % 20 > 0 && this.newSelected == num2 - 1;
		if (flag2)
		{
			num = arrLength % 20;
		}
		return num + 1;
	}

	// Token: 0x0600090E RID: 2318 RVA: 0x0009A518 File Offset: 0x00098718
	private void setNewSelected(int arrLength, bool resetSelect)
	{
		int num = arrLength / 20 + ((arrLength % 20 > 0) ? 1 : 0);
		int num2 = this.xScroll;
		this.newSelected = (GameCanvas.px - num2) / this.TAB_W_NEW;
		bool flag = this.newSelected > num - 1;
		if (flag)
		{
			this.newSelected = num - 1;
		}
		bool flag2 = GameCanvas.px < num2;
		if (flag2)
		{
			this.newSelected = 0;
		}
		this.setTabInventory(resetSelect);
	}

	// Token: 0x04000F94 RID: 3988
	public bool isShow;

	// Token: 0x04000F95 RID: 3989
	public int X;

	// Token: 0x04000F96 RID: 3990
	public int Y;

	// Token: 0x04000F97 RID: 3991
	public int W;

	// Token: 0x04000F98 RID: 3992
	public int H;

	// Token: 0x04000F99 RID: 3993
	public int ITEM_HEIGHT;

	// Token: 0x04000F9A RID: 3994
	public int TAB_W;

	// Token: 0x04000F9B RID: 3995
	public int TAB_W_NEW;

	// Token: 0x04000F9C RID: 3996
	public int cmtoY;

	// Token: 0x04000F9D RID: 3997
	public int cmy;

	// Token: 0x04000F9E RID: 3998
	public int cmdy;

	// Token: 0x04000F9F RID: 3999
	public int cmvy;

	// Token: 0x04000FA0 RID: 4000
	public int cmyLim;

	// Token: 0x04000FA1 RID: 4001
	public int xc;

	// Token: 0x04000FA2 RID: 4002
	public int[] cmyLast;

	// Token: 0x04000FA3 RID: 4003
	public int cmtoX;

	// Token: 0x04000FA4 RID: 4004
	public int cmx;

	// Token: 0x04000FA5 RID: 4005
	public int cmxLim;

	// Token: 0x04000FA6 RID: 4006
	public int cmxMap;

	// Token: 0x04000FA7 RID: 4007
	public int cmyMap;

	// Token: 0x04000FA8 RID: 4008
	public int cmxMapLim;

	// Token: 0x04000FA9 RID: 4009
	public int cmyMapLim;

	// Token: 0x04000FAA RID: 4010
	public int cmyQuest;

	// Token: 0x04000FAB RID: 4011
	public static Image imgBantay;

	// Token: 0x04000FAC RID: 4012
	public static Image imgX;

	// Token: 0x04000FAD RID: 4013
	public static Image imgMap;

	// Token: 0x04000FAE RID: 4014
	public TabClanIcon tabIcon;

	// Token: 0x04000FAF RID: 4015
	public MyVector vItemCombine = new MyVector();

	// Token: 0x04000FB0 RID: 4016
	public int moneyGD;

	// Token: 0x04000FB1 RID: 4017
	public int friendMoneyGD;

	// Token: 0x04000FB2 RID: 4018
	public bool isLock;

	// Token: 0x04000FB3 RID: 4019
	public bool isFriendLock;

	// Token: 0x04000FB4 RID: 4020
	public bool isAccept;

	// Token: 0x04000FB5 RID: 4021
	public bool isFriendAccep;

	// Token: 0x04000FB6 RID: 4022
	public string topName;

	// Token: 0x04000FB7 RID: 4023
	public ChatTextField chatTField;

	// Token: 0x04000FB8 RID: 4024
	public static string specialInfo;

	// Token: 0x04000FB9 RID: 4025
	public static short spearcialImage;

	// Token: 0x04000FBA RID: 4026
	public static Image imgStar;

	// Token: 0x04000FBB RID: 4027
	public static Image imgMaxStar;

	// Token: 0x04000FBC RID: 4028
	public static Image imgStar8;

	// Token: 0x04000FBD RID: 4029
	public static Image imgStar9;

	// Token: 0x04000FBE RID: 4030
	public static Image imgStarCuongHoa;

	// Token: 0x04000FBF RID: 4031
	public static Image imgNew;

	// Token: 0x04000FC0 RID: 4032
	public static Image imgXu;

	// Token: 0x04000FC1 RID: 4033
	public static Image imgTicket;

	// Token: 0x04000FC2 RID: 4034
	public static Image imgLuong;

	// Token: 0x04000FC3 RID: 4035
	public static Image imgLuongKhoa;

	// Token: 0x04000FC4 RID: 4036
	private static Image imgUp;

	// Token: 0x04000FC5 RID: 4037
	private static Image imgDown;

	// Token: 0x04000FC6 RID: 4038
	private int pa1;

	// Token: 0x04000FC7 RID: 4039
	private int pa2;

	// Token: 0x04000FC8 RID: 4040
	private bool trans;

	// Token: 0x04000FC9 RID: 4041
	private int pX;

	// Token: 0x04000FCA RID: 4042
	private int pY;

	// Token: 0x04000FCB RID: 4043
	private Command left = new Command(mResources.SELECT, 0);

	// Token: 0x04000FCC RID: 4044
	public int type;

	// Token: 0x04000FCD RID: 4045
	public int currentTabIndex;

	// Token: 0x04000FCE RID: 4046
	public int startTabPos;

	// Token: 0x04000FCF RID: 4047
	public int[] lastTabIndex;

	// Token: 0x04000FD0 RID: 4048
	public string[][] currentTabName;

	// Token: 0x04000FD1 RID: 4049
	private int[] currClanOption;

	// Token: 0x04000FD2 RID: 4050
	public int mainTabPos = 4;

	// Token: 0x04000FD3 RID: 4051
	public int shopTabPos = 50;

	// Token: 0x04000FD4 RID: 4052
	public int boxTabPos = 50;

	// Token: 0x04000FD5 RID: 4053
	public string[][] mainTabName;

	// Token: 0x04000FD6 RID: 4054
	public string[] mapNames;

	// Token: 0x04000FD7 RID: 4055
	public string[] planetNames;

	// Token: 0x04000FD8 RID: 4056
	public static string[] strTool = new string[]
	{
		mResources.gameInfo,
		mResources.change_flag,
		mResources.change_zone,
		mResources.chat_world,
		mResources.account,
		mResources.option,
		mResources.change_account
	};

	// Token: 0x04000FD9 RID: 4057
	public static string[] strCauhinh = new string[]
	{
		(!GameCanvas.isPlaySound) ? mResources.turnOnSound : mResources.turnOffSound,
		mResources.increase_vga,
		mResources.analog,
		(mGraphics.zoomLevel <= 1) ? mResources.x2Screen : mResources.x1Screen
	};

	// Token: 0x04000FDA RID: 4058
	public static string[] strAccount = new string[]
	{
		mResources.inventory_Pass,
		mResources.friend,
		mResources.enemy,
		mResources.msg,
		mResources.charger
	};

	// Token: 0x04000FDB RID: 4059
	public static string[] strAuto = new string[]
	{
		mResources.useGem
	};

	// Token: 0x04000FDC RID: 4060
	public static int graphics = 0;

	// Token: 0x04000FDD RID: 4061
	public string[][] shopTabName;

	// Token: 0x04000FDE RID: 4062
	public int[] maxPageShop;

	// Token: 0x04000FDF RID: 4063
	public int[] currPageShop;

	// Token: 0x04000FE0 RID: 4064
	private static string[][] boxTabName = new string[][]
	{
		mResources.chestt,
		mResources.inventory
	};

	// Token: 0x04000FE1 RID: 4065
	private static string[][] boxCombine = new string[][]
	{
		mResources.combine,
		mResources.inventory
	};

	// Token: 0x04000FE2 RID: 4066
	private static string[][] boxZone = new string[][]
	{
		mResources.zonee
	};

	// Token: 0x04000FE3 RID: 4067
	private static string[][] boxMap = new string[][]
	{
		mResources.mapp
	};

	// Token: 0x04000FE4 RID: 4068
	private static string[][] boxGD = new string[][]
	{
		mResources.inventory,
		mResources.item_give,
		mResources.item_receive
	};

	// Token: 0x04000FE5 RID: 4069
	private static string[][] boxPet = mResources.petMainTab;

	// Token: 0x04000FE6 RID: 4070
	public string[][][] tabName = new string[][][]
	{
		null,
		null,
		Panel.boxTabName,
		Panel.boxZone,
		Panel.boxMap,
		null,
		null,
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		Panel.boxCombine,
		Panel.boxGD,
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		Panel.boxPet,
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		},
		new string[][]
		{
			new string[]
			{
				string.Empty
			}
		}
	};

	// Token: 0x04000FE7 RID: 4071
	private static sbyte BOX_BAG = 0;

	// Token: 0x04000FE8 RID: 4072
	private static sbyte BAG_BOX = 1;

	// Token: 0x04000FE9 RID: 4073
	private static sbyte BOX_BODY = 2;

	// Token: 0x04000FEA RID: 4074
	private static sbyte BODY_BOX = 3;

	// Token: 0x04000FEB RID: 4075
	private static sbyte BAG_BODY = 4;

	// Token: 0x04000FEC RID: 4076
	private static sbyte BODY_BAG = 5;

	// Token: 0x04000FED RID: 4077
	private static sbyte BAG_PET = 6;

	// Token: 0x04000FEE RID: 4078
	private static sbyte PET_BAG = 7;

	// Token: 0x04000FEF RID: 4079
	public int hasUse;

	// Token: 0x04000FF0 RID: 4080
	public int hasUseBag;

	// Token: 0x04000FF1 RID: 4081
	public int currentListLength;

	// Token: 0x04000FF2 RID: 4082
	private int[] lastSelect;

	// Token: 0x04000FF3 RID: 4083
	public static int[] mapIdTraidat = new int[]
	{
		21,
		0,
		1,
		2,
		24,
		3,
		4,
		5,
		6,
		27,
		28,
		29,
		30,
		42,
		47,
		46
	};

	// Token: 0x04000FF4 RID: 4084
	public static int[] mapXTraidat = new int[]
	{
		39,
		42,
		105,
		93,
		61,
		93,
		142,
		165,
		210,
		100,
		165,
		220,
		233,
		10,
		125,
		125
	};

	// Token: 0x04000FF5 RID: 4085
	public static int[] mapYTraidat = new int[]
	{
		28,
		60,
		48,
		96,
		88,
		131,
		136,
		95,
		32,
		200,
		189,
		167,
		120,
		110,
		20,
		20
	};

	// Token: 0x04000FF6 RID: 4086
	public static int[] mapIdNamek = new int[]
	{
		22,
		7,
		8,
		9,
		25,
		11,
		12,
		13,
		10,
		31,
		32,
		33,
		34,
		43
	};

	// Token: 0x04000FF7 RID: 4087
	public static int[] mapXNamek = new int[]
	{
		55,
		30,
		93,
		80,
		24,
		149,
		219,
		220,
		233,
		170,
		148,
		195,
		148,
		10
	};

	// Token: 0x04000FF8 RID: 4088
	public static int[] mapYNamek = new int[]
	{
		136,
		84,
		69,
		34,
		25,
		42,
		32,
		110,
		192,
		70,
		106,
		156,
		210,
		57
	};

	// Token: 0x04000FF9 RID: 4089
	public static int[] mapIdSaya = new int[]
	{
		23,
		14,
		15,
		16,
		26,
		17,
		18,
		20,
		19,
		35,
		36,
		37,
		38,
		44
	};

	// Token: 0x04000FFA RID: 4090
	public static int[] mapXSaya = new int[]
	{
		90,
		95,
		144,
		234,
		231,
		122,
		176,
		158,
		205,
		54,
		105,
		159,
		231,
		27
	};

	// Token: 0x04000FFB RID: 4091
	public static int[] mapYSaya = new int[]
	{
		10,
		43,
		20,
		36,
		69,
		87,
		112,
		167,
		160,
		151,
		173,
		207,
		194,
		29
	};

	// Token: 0x04000FFC RID: 4092
	public static int[][] mapId = new int[][]
	{
		Panel.mapIdTraidat,
		Panel.mapIdNamek,
		Panel.mapIdSaya
	};

	// Token: 0x04000FFD RID: 4093
	public static int[][] mapX = new int[][]
	{
		Panel.mapXTraidat,
		Panel.mapXNamek,
		Panel.mapXSaya
	};

	// Token: 0x04000FFE RID: 4094
	public static int[][] mapY = new int[][]
	{
		Panel.mapYTraidat,
		Panel.mapYNamek,
		Panel.mapYSaya
	};

	// Token: 0x04000FFF RID: 4095
	public Item currItem;

	// Token: 0x04001000 RID: 4096
	public Clan currClan;

	// Token: 0x04001001 RID: 4097
	public ClanMessage currMess;

	// Token: 0x04001002 RID: 4098
	public Member currMem;

	// Token: 0x04001003 RID: 4099
	public Clan[] clans;

	// Token: 0x04001004 RID: 4100
	public MyVector member;

	// Token: 0x04001005 RID: 4101
	public MyVector myMember;

	// Token: 0x04001006 RID: 4102
	public MyVector logChat = new MyVector();

	// Token: 0x04001007 RID: 4103
	public MyVector vPlayerMenu = new MyVector();

	// Token: 0x04001008 RID: 4104
	public MyVector vFriend = new MyVector();

	// Token: 0x04001009 RID: 4105
	public MyVector vMyGD = new MyVector();

	// Token: 0x0400100A RID: 4106
	public MyVector vFriendGD = new MyVector();

	// Token: 0x0400100B RID: 4107
	public MyVector vTop = new MyVector();

	// Token: 0x0400100C RID: 4108
	public MyVector vEnemy = new MyVector();

	// Token: 0x0400100D RID: 4109
	public MyVector vFlag = new MyVector();

	// Token: 0x0400100E RID: 4110
	public MyVector vPlayerMenu_id = new MyVector();

	// Token: 0x0400100F RID: 4111
	public Command cmdClose;

	// Token: 0x04001010 RID: 4112
	public static bool CanNapTien = false;

	// Token: 0x04001011 RID: 4113
	public static int WIDTH_PANEL = 240;

	// Token: 0x04001012 RID: 4114
	private int position;

	// Token: 0x04001013 RID: 4115
	public string playerChat;

	// Token: 0x04001014 RID: 4116
	public Dictionary<string, Panel.PlayerChat> chats = new Dictionary<string, Panel.PlayerChat>();

	// Token: 0x04001015 RID: 4117
	public global::Char charMenu;

	// Token: 0x04001016 RID: 4118
	private bool isThachDau;

	// Token: 0x04001017 RID: 4119
	public int typeShop = -1;

	// Token: 0x04001018 RID: 4120
	public int xScroll;

	// Token: 0x04001019 RID: 4121
	public int yScroll;

	// Token: 0x0400101A RID: 4122
	public int wScroll;

	// Token: 0x0400101B RID: 4123
	public int hScroll;

	// Token: 0x0400101C RID: 4124
	public ChatPopup cp;

	// Token: 0x0400101D RID: 4125
	public int idIcon;

	// Token: 0x0400101E RID: 4126
	public int[] partID;

	// Token: 0x0400101F RID: 4127
	private int timeShow;

	// Token: 0x04001020 RID: 4128
	public bool isBoxClan;

	// Token: 0x04001021 RID: 4129
	public int w;

	// Token: 0x04001022 RID: 4130
	private int pa;

	// Token: 0x04001023 RID: 4131
	public int selected;

	// Token: 0x04001024 RID: 4132
	private int cSelected;

	// Token: 0x04001025 RID: 4133
	private int newSelected;

	// Token: 0x04001026 RID: 4134
	private bool isClanOption;

	// Token: 0x04001027 RID: 4135
	public bool isSearchClan;

	// Token: 0x04001028 RID: 4136
	public bool isMessage;

	// Token: 0x04001029 RID: 4137
	public bool isViewMember;

	// Token: 0x0400102A RID: 4138
	public const int TYPE_MAIN = 0;

	// Token: 0x0400102B RID: 4139
	public const int TYPE_SHOP = 1;

	// Token: 0x0400102C RID: 4140
	public const int TYPE_BOX = 2;

	// Token: 0x0400102D RID: 4141
	public const int TYPE_ZONE = 3;

	// Token: 0x0400102E RID: 4142
	public const int TYPE_MAP = 4;

	// Token: 0x0400102F RID: 4143
	public const int TYPE_CLANS = 5;

	// Token: 0x04001030 RID: 4144
	public const int TYPE_INFOMATION = 6;

	// Token: 0x04001031 RID: 4145
	public const int TYPE_BODY = 7;

	// Token: 0x04001032 RID: 4146
	public const int TYPE_MESS = 8;

	// Token: 0x04001033 RID: 4147
	public const int TYPE_ARCHIVEMENT = 9;

	// Token: 0x04001034 RID: 4148
	public const int PLAYER_MENU = 10;

	// Token: 0x04001035 RID: 4149
	public const int TYPE_FRIEND = 11;

	// Token: 0x04001036 RID: 4150
	public const int TYPE_COMBINE = 12;

	// Token: 0x04001037 RID: 4151
	public const int TYPE_GIAODICH = 13;

	// Token: 0x04001038 RID: 4152
	public const int TYPE_MAPTRANS = 14;

	// Token: 0x04001039 RID: 4153
	public const int TYPE_TOP = 15;

	// Token: 0x0400103A RID: 4154
	public const int TYPE_ENEMY = 16;

	// Token: 0x0400103B RID: 4155
	public const int TYPE_KIGUI = 17;

	// Token: 0x0400103C RID: 4156
	public const int TYPE_FLAG = 18;

	// Token: 0x0400103D RID: 4157
	public const int TYPE_OPTION = 19;

	// Token: 0x0400103E RID: 4158
	public const int TYPE_ACCOUNT = 20;

	// Token: 0x0400103F RID: 4159
	public const int TYPE_PET_MAIN = 21;

	// Token: 0x04001040 RID: 4160
	public const int TYPE_AUTO = 22;

	// Token: 0x04001041 RID: 4161
	public const int TYPE_GAMEINFO = 23;

	// Token: 0x04001042 RID: 4162
	public const int TYPE_GAMEINFOSUB = 24;

	// Token: 0x04001043 RID: 4163
	public const int TYPE_SPEACIALSKILL = 25;

	// Token: 0x04001044 RID: 4164
	private int pointerDownTime;

	// Token: 0x04001045 RID: 4165
	private int pointerDownFirstX;

	// Token: 0x04001046 RID: 4166
	private int[] pointerDownLastX = new int[3];

	// Token: 0x04001047 RID: 4167
	private bool pointerIsDowning;

	// Token: 0x04001048 RID: 4168
	private bool isDownWhenRunning;

	// Token: 0x04001049 RID: 4169
	private bool wantUpdateList;

	// Token: 0x0400104A RID: 4170
	private int waitToPerform;

	// Token: 0x0400104B RID: 4171
	private int cmRun;

	// Token: 0x0400104C RID: 4172
	private int keyTouchLock = -1;

	// Token: 0x0400104D RID: 4173
	private int keyToundGD = -1;

	// Token: 0x0400104E RID: 4174
	private int keyTouchCombine = -1;

	// Token: 0x0400104F RID: 4175
	private int keyTouchMapButton = -1;

	// Token: 0x04001050 RID: 4176
	public int indexMouse = -1;

	// Token: 0x04001051 RID: 4177
	private bool justRelease;

	// Token: 0x04001052 RID: 4178
	private int keyTouchTab = -1;

	// Token: 0x04001053 RID: 4179
	private int nTableItem;

	// Token: 0x04001054 RID: 4180
	public string[][] clansOption = new string[][]
	{
		mResources.findClan,
		mResources.createClan
	};

	// Token: 0x04001055 RID: 4181
	public string clanInfo = string.Empty;

	// Token: 0x04001056 RID: 4182
	public string clanReport = string.Empty;

	// Token: 0x04001057 RID: 4183
	private bool isHaveClan;

	// Token: 0x04001058 RID: 4184
	private Scroll scroll;

	// Token: 0x04001059 RID: 4185
	private int cmvx;

	// Token: 0x0400105A RID: 4186
	private int cmdx;

	// Token: 0x0400105B RID: 4187
	private bool isSelectPlayerMenu;

	// Token: 0x0400105C RID: 4188
	private string[] strStatus = new string[]
	{
		mResources.follow,
		mResources.defend,
		mResources.attack,
		mResources.gohome,
		mResources.fusion,
		mResources.fusionForever
	};

	// Token: 0x0400105D RID: 4189
	private static string log;

	// Token: 0x0400105E RID: 4190
	private int tt;

	// Token: 0x0400105F RID: 4191
	private int currentButtonPress;

	// Token: 0x04001060 RID: 4192
	public static long[] t_tiemnang = new long[]
	{
		50000000L,
		250000000L,
		1250000000L,
		5000000000L,
		15000000000L,
		30000000000L,
		45000000000L,
		60000000000L,
		75000000000L,
		90000000000L,
		110000000000L,
		130000000000L,
		150000000000L,
		170000000000L
	};

	// Token: 0x04001061 RID: 4193
	private int[] zoneColor = new int[]
	{
		43520,
		14743570,
		14155776
	};

	// Token: 0x04001062 RID: 4194
	public string[] combineInfo;

	// Token: 0x04001063 RID: 4195
	public string[] combineTopInfo;

	// Token: 0x04001064 RID: 4196
	public static int[] color1 = new int[]
	{
		2327248,
		8982199,
		16713222
	};

	// Token: 0x04001065 RID: 4197
	public static int[] color2 = new int[]
	{
		4583423,
		16719103,
		16714764
	};

	// Token: 0x04001066 RID: 4198
	private int sellectInventory;

	// Token: 0x04001067 RID: 4199
	private Item itemInvenNew;

	// Token: 0x04001068 RID: 4200
	private Effect eBanner;

	// Token: 0x04001069 RID: 4201
	private static FrameImage screenTab6;

	// Token: 0x0400106A RID: 4202
	private bool isUp;

	// Token: 0x0400106B RID: 4203
	private int compare;

	// Token: 0x0400106C RID: 4204
	public static string strWantToBuy = string.Empty;

	// Token: 0x0400106D RID: 4205
	public int xstart;

	// Token: 0x0400106E RID: 4206
	public int ystart;

	// Token: 0x0400106F RID: 4207
	public int popupW = 140;

	// Token: 0x04001070 RID: 4208
	public int popupH = 160;

	// Token: 0x04001071 RID: 4209
	public int cmySK;

	// Token: 0x04001072 RID: 4210
	public int cmtoYSK;

	// Token: 0x04001073 RID: 4211
	public int cmdySK;

	// Token: 0x04001074 RID: 4212
	public int cmvySK;

	// Token: 0x04001075 RID: 4213
	public int cmyLimSK;

	// Token: 0x04001076 RID: 4214
	public int popupY;

	// Token: 0x04001077 RID: 4215
	public int popupX;

	// Token: 0x04001078 RID: 4216
	public int isborderIndex;

	// Token: 0x04001079 RID: 4217
	public int isselectedRow;

	// Token: 0x0400107A RID: 4218
	public int indexSize = 28;

	// Token: 0x0400107B RID: 4219
	public int indexTitle;

	// Token: 0x0400107C RID: 4220
	public int indexSelect;

	// Token: 0x0400107D RID: 4221
	public int indexRow = -1;

	// Token: 0x0400107E RID: 4222
	public int indexRowMax;

	// Token: 0x0400107F RID: 4223
	public int indexMenu;

	// Token: 0x04001080 RID: 4224
	public int columns = 6;

	// Token: 0x04001081 RID: 4225
	public int rows;

	// Token: 0x04001082 RID: 4226
	public int inforX;

	// Token: 0x04001083 RID: 4227
	public int inforY;

	// Token: 0x04001084 RID: 4228
	public int inforW;

	// Token: 0x04001085 RID: 4229
	public int inforH;

	// Token: 0x04001086 RID: 4230
	private int yPaint;

	// Token: 0x04001087 RID: 4231
	private int xMap;

	// Token: 0x04001088 RID: 4232
	private int yMap;

	// Token: 0x04001089 RID: 4233
	private int xMapTask;

	// Token: 0x0400108A RID: 4234
	private int yMapTask;

	// Token: 0x0400108B RID: 4235
	private int xMove;

	// Token: 0x0400108C RID: 4236
	private int yMove;

	// Token: 0x0400108D RID: 4237
	public static bool isPaintMap = true;

	// Token: 0x0400108E RID: 4238
	public bool isClose;

	// Token: 0x0400108F RID: 4239
	private int infoSelect;

	// Token: 0x04001090 RID: 4240
	public static MyVector vGameInfo = new MyVector(string.Empty);

	// Token: 0x04001091 RID: 4241
	public static string[] contenInfo;

	// Token: 0x04001092 RID: 4242
	public bool isViewChatServer;

	// Token: 0x04001093 RID: 4243
	private int currInfoItem;

	// Token: 0x04001094 RID: 4244
	public global::Char charInfo;

	// Token: 0x04001095 RID: 4245
	private bool isChangeZone;

	// Token: 0x04001096 RID: 4246
	private bool isKiguiXu;

	// Token: 0x04001097 RID: 4247
	private bool isKiguiLuong;

	// Token: 0x04001098 RID: 4248
	private int delayKigui;

	// Token: 0x04001099 RID: 4249
	public sbyte combineSuccess = -1;

	// Token: 0x0400109A RID: 4250
	public int idNPC;

	// Token: 0x0400109B RID: 4251
	public int xS;

	// Token: 0x0400109C RID: 4252
	public int yS;

	// Token: 0x0400109D RID: 4253
	private int rS;

	// Token: 0x0400109E RID: 4254
	private int angleS;

	// Token: 0x0400109F RID: 4255
	private int angleO;

	// Token: 0x040010A0 RID: 4256
	private int iAngleS;

	// Token: 0x040010A1 RID: 4257
	private int iDotS;

	// Token: 0x040010A2 RID: 4258
	private int speed;

	// Token: 0x040010A3 RID: 4259
	private int[] xArgS;

	// Token: 0x040010A4 RID: 4260
	private int[] yArgS;

	// Token: 0x040010A5 RID: 4261
	private int[] xDotS;

	// Token: 0x040010A6 RID: 4262
	private int[] yDotS;

	// Token: 0x040010A7 RID: 4263
	private int time;

	// Token: 0x040010A8 RID: 4264
	private int typeCombine;

	// Token: 0x040010A9 RID: 4265
	private int countUpdate;

	// Token: 0x040010AA RID: 4266
	private int countR;

	// Token: 0x040010AB RID: 4267
	private int countWait;

	// Token: 0x040010AC RID: 4268
	private bool isSpeedCombine;

	// Token: 0x040010AD RID: 4269
	private bool isCompleteEffCombine = true;

	// Token: 0x040010AE RID: 4270
	private bool isPaintCombine;

	// Token: 0x040010AF RID: 4271
	public bool isDoneCombine = true;

	// Token: 0x040010B0 RID: 4272
	public short iconID1;

	// Token: 0x040010B1 RID: 4273
	public short iconID2;

	// Token: 0x040010B2 RID: 4274
	public short iconID3;

	// Token: 0x040010B3 RID: 4275
	public short[] iconID;

	// Token: 0x040010B4 RID: 4276
	public string[][] speacialTabName;

	// Token: 0x040010B5 RID: 4277
	public static int[] sizeUpgradeEff = new int[]
	{
		2,
		1,
		1
	};

	// Token: 0x040010B6 RID: 4278
	public static int nsize = 1;

	// Token: 0x040010B7 RID: 4279
	public const sbyte COLOR_WHITE = 0;

	// Token: 0x040010B8 RID: 4280
	public const sbyte COLOR_GREEN = 1;

	// Token: 0x040010B9 RID: 4281
	public const sbyte COLOR_PURPLE = 2;

	// Token: 0x040010BA RID: 4282
	public const sbyte COLOR_ORANGE = 3;

	// Token: 0x040010BB RID: 4283
	public const sbyte COLOR_BLUE = 4;

	// Token: 0x040010BC RID: 4284
	public const sbyte COLOR_YELLOW = 5;

	// Token: 0x040010BD RID: 4285
	public const sbyte COLOR_RED = 6;

	// Token: 0x040010BE RID: 4286
	public const sbyte COLOR_BLACK = 7;

	// Token: 0x040010BF RID: 4287
	public static int[][] colorUpgradeEffect = new int[][]
	{
		new int[]
		{
			16777215,
			15000805,
			13487823,
			11711155,
			9671828,
			7895160
		},
		new int[]
		{
			61952,
			58624,
			52224,
			45824,
			39168,
			32768
		},
		new int[]
		{
			13500671,
			12058853,
			10682572,
			9371827,
			7995545,
			6684800
		},
		new int[]
		{
			16744192,
			15037184,
			13395456,
			11753728,
			10046464,
			8404992
		},
		new int[]
		{
			37119,
			33509,
			28108,
			24499,
			21145,
			17536
		},
		new int[]
		{
			16776192,
			15063040,
			12635136,
			11776256,
			10063872,
			8290304
		},
		new int[]
		{
			16711680,
			15007744,
			13369344,
			11730944,
			10027008,
			8388608
		}
	};

	// Token: 0x040010C0 RID: 4288
	public const int color_item_white = 15987701;

	// Token: 0x040010C1 RID: 4289
	public const int color_item_green = 2786816;

	// Token: 0x040010C2 RID: 4290
	public const int color_item_purple = 7078041;

	// Token: 0x040010C3 RID: 4291
	public const int color_item_orange = 12537346;

	// Token: 0x040010C4 RID: 4292
	public const int color_item_blue = 1269146;

	// Token: 0x040010C5 RID: 4293
	public const int color_item_yellow = 13279744;

	// Token: 0x040010C6 RID: 4294
	public const int color_item_red = 11599872;

	// Token: 0x040010C7 RID: 4295
	public const int color_item_black = 2039326;

	// Token: 0x040010C8 RID: 4296
	private Image imgo_0;

	// Token: 0x040010C9 RID: 4297
	private Image imgo_1;

	// Token: 0x040010CA RID: 4298
	private Image imgo_2;

	// Token: 0x040010CB RID: 4299
	private Image imgo_3;

	// Token: 0x040010CC RID: 4300
	public const int numItem = 20;

	// Token: 0x040010CD RID: 4301
	public const sbyte INVENTORY_TAB = 1;

	// Token: 0x040010CE RID: 4302
	public sbyte size_tab;

	// Token: 0x040010CF RID: 4303
	private bool isnewInventory;

	// Token: 0x020000FF RID: 255
	public class PlayerChat
	{
		// Token: 0x06000CC4 RID: 3268 RVA: 0x000C527C File Offset: 0x000C347C
		public PlayerChat(string name, int charId)
		{
			this.name = name;
			this.charID = charId;
			this.isNewMessage = true;
		}

		// Token: 0x040016E7 RID: 5863
		public string name;

		// Token: 0x040016E8 RID: 5864
		public int charID;

		// Token: 0x040016E9 RID: 5865
		public bool isNewMessage;

		// Token: 0x040016EA RID: 5866
		public List<InfoItem> chats = new List<InfoItem>();
	}
}
using System;
using System.Collections.Generic;

// Token: 0x020000FF RID: 255
public class PlayerChat
{
	// Token: 0x06000CC4 RID: 3268 RVA: 0x000C527C File Offset: 0x000C347C
	public PlayerChat(string name, int charId)
	{
		this.name = name;
		this.charID = charId;
		this.isNewMessage = true;
	}

	// Token: 0x040016E7 RID: 5863
	public string name;

	// Token: 0x040016E8 RID: 5864
	public int charID;

	// Token: 0x040016E9 RID: 5865
	public bool isNewMessage;

	// Token: 0x040016EA RID: 5866
	public List<InfoItem> chats = new List<InfoItem>();
}
using System;

// Token: 0x020000A7 RID: 167
public class Part
{
	// Token: 0x06000910 RID: 2320 RVA: 0x0009A988 File Offset: 0x00098B88
	public Part(int type)
	{
		this.type = type;
		bool flag = type == 0;
		if (flag)
		{
			this.pi = new PartImage[3];
		}
		bool flag2 = type == 1;
		if (flag2)
		{
			this.pi = new PartImage[17];
		}
		bool flag3 = type == 2;
		if (flag3)
		{
			this.pi = new PartImage[14];
		}
		bool flag4 = type == 3;
		if (flag4)
		{
			this.pi = new PartImage[2];
		}
	}

	// Token: 0x040010D0 RID: 4304
	public int type;

	// Token: 0x040010D1 RID: 4305
	public PartImage[] pi;
}
using System;

// Token: 0x020000A8 RID: 168
public class PartImage
{
	// Token: 0x040010D2 RID: 4306
	public short id;

	// Token: 0x040010D3 RID: 4307
	public sbyte dx;

	// Token: 0x040010D4 RID: 4308
	public sbyte dy;
}
using System;
using System.IO;
using AssemblyCSharp.Mod.PickMob;
using AssemblyCSharp.Mod.Xmap;
using Mod.DungPham.KoiOctiiu957;

// Token: 0x0200001E RID: 30
internal class PetRong
{
	// Token: 0x060000DA RID: 218 RVA: 0x00008DFC File Offset: 0x00006FFC
	public static void TimBossTrongVoVong()
	{
		bool flag = PetRong.TimeRanDOmMap < 3000;
		if (flag)
		{
			PetRong.TimeRanDOmMap++;
		}
		bool flag2 = PetRong.TimeRanDOmMap >= 1500;
		if (flag2)
		{
			PetRong.MapBoss = PetRong.ListMap[PetRong.random.Next(PetRong.ListMap.Length)];
			PetRong.TimeRanDOmMap = 0;
		}
	}

	// Token: 0x060000DB RID: 219 RVA: 0x00008E60 File Offset: 0x00007060
	public static bool IsVatPham()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag = itemMap.playerId == global::Char.myCharz().charID || itemMap.playerId == -1;
			bool flag2 = itemMap != null && (itemMap.template.id == 1822 || itemMap.template.id == 1821 || itemMap.template.id == 1820) && flag;
			if (flag2)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060000DC RID: 220 RVA: 0x00008F14 File Offset: 0x00007114
	public static void AutoPet()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.cName.Contains("Rồng nhí") && @char.cTypePk == 5 && @char.cHP > 0L;
			if (flag)
			{
				bool flag2 = global::Char.myCharz().charFocus != @char;
				if (flag2)
				{
					global::Char.myCharz().charFocus = @char;
				}
			}
		}
	}

	// Token: 0x060000DD RID: 221 RVA: 0x00008FA4 File Offset: 0x000071A4
	private static int[] GetPointYsdMax(int xStart, int xEnd)
	{
		int num = TileMap.pxh;
		int num2 = -1;
		bool flag = xStart > xEnd;
		if (flag)
		{
			for (int i = xEnd; i < xStart; i += 24)
			{
				int ysd = PetRong.GetYsd(i);
				bool flag2 = ysd < num;
				if (flag2)
				{
					num = ysd;
					num2 = i;
				}
			}
		}
		else
		{
			for (int j = xEnd; j > xStart; j -= 24)
			{
				int ysd2 = PetRong.GetYsd(j);
				bool flag3 = ysd2 < num;
				if (flag3)
				{
					num = ysd2;
					num2 = j;
				}
			}
		}
		return new int[]
		{
			num2,
			num
		};
	}

	// Token: 0x060000DE RID: 222 RVA: 0x00009040 File Offset: 0x00007240
	private static void Move(int x, int y)
	{
		global::Char @char = global::Char.myCharz();
		bool flag = !Pk9rPickMob.IsVuotDiaHinh;
		if (flag)
		{
			@char.currentMovePoint = new MovePoint(x, y);
		}
		else
		{
			int[] pointYsdMax = PetRong.GetPointYsdMax(@char.cx, x);
			bool flag2 = pointYsdMax[1] >= y || (pointYsdMax[1] >= @char.cy && (@char.statusMe == 2 || @char.statusMe == 1));
			if (flag2)
			{
				pointYsdMax[0] = x;
				pointYsdMax[1] = y;
			}
			@char.currentMovePoint = new MovePoint(pointYsdMax[0], pointYsdMax[1]);
		}
	}

	// Token: 0x060000DF RID: 223 RVA: 0x000090C8 File Offset: 0x000072C8
	private static int GetYsd(int xsd)
	{
		global::Char @char = global::Char.myCharz();
		int num = TileMap.pxh;
		int result = -1;
		for (int i = 24; i < TileMap.pxh; i += 24)
		{
			bool flag = TileMap.tileTypeAt(xsd, i, 2);
			if (flag)
			{
				int num2 = Res.abs(i - @char.cy);
				bool flag2 = num2 < num;
				if (flag2)
				{
					num = num2;
					result = i;
				}
			}
		}
		return result;
	}

	// Token: 0x060000E0 RID: 224 RVA: 0x00009138 File Offset: 0x00007338
	public static bool IsRongNhi()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && @char.cName.Contains("Rồng nhí") && @char.cTypePk == 5 && @char.cHP > 0L;
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x060000E1 RID: 225 RVA: 0x000091B0 File Offset: 0x000073B0
	public static void DenMapBoss()
	{
		bool flag = TileMap.mapID != PetRong.MapBoss && PetRong.MapBoss >= 0 && !Pk9rXmap.IsXmapRunning;
		if (flag)
		{
			XmapController.StartRunToMapId(PetRong.MapBoss);
		}
	}

	// Token: 0x060000E2 RID: 226 RVA: 0x000091F0 File Offset: 0x000073F0
	public static void AutoDuiGa()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			bool flag = itemMap != null && itemMap.template.id == 74;
			if (flag)
			{
				GameScr.info1.addInfo("Hồi sinh rồi :3", 0);
				Service.gI().pickItem(itemMap.itemMapID);
				break;
			}
		}
	}

	// Token: 0x060000E3 RID: 227 RVA: 0x00009268 File Offset: 0x00007468
	public static void UseTDLT()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 521;
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
			}
		}
	}

	// Token: 0x060000E4 RID: 228 RVA: 0x000092D8 File Offset: 0x000074D8
	public static void AutoTdlt()
	{
		bool flag = File.Exists(PetRong.tdlt) && !ItemTime.isExistItem(4387);
		if (flag)
		{
			PetRong.UseTDLT();
		}
		bool flag2 = !File.Exists(PetRong.tdlt) && ItemTime.isExistItem(4387);
		if (flag2)
		{
			PetRong.UseTDLT();
		}
	}

	// Token: 0x060000E5 RID: 229 RVA: 0x00009334 File Offset: 0x00007534
	public static void autoitem()
	{
		for (int i = 0; i < GameScr.vItemMap.size(); i++)
		{
			ItemMap itemMap = (ItemMap)GameScr.vItemMap.elementAt(i);
			global::Char @char = global::Char.myCharz();
			bool flag = itemMap.playerId == @char.charID || itemMap.playerId == -1;
			bool flag2 = itemMap != null && flag && (itemMap.template.id == 1822 || itemMap.template.id == 1821 || itemMap.template.id == 1820);
			if (flag2)
			{
				bool flag3 = Res.abs(itemMap.xEnd - global::Char.myCharz().cx) > 25;
				if (flag3)
				{
					PetRong.Move(itemMap.xEnd, itemMap.yEnd);
				}
				Service.gI().pickItem(itemMap.itemMapID);
				break;
			}
		}
	}

	// Token: 0x060000E6 RID: 230 RVA: 0x0000942C File Offset: 0x0000762C
	public static void TeleportTo(int x, int y)
	{
		global::Char @char = global::Char.myCharz();
		@char.cx = x;
		@char.cy = y;
		Service.gI().charMove();
		bool flag = !ItemTime.isExistItem(4387);
		if (flag)
		{
			@char.cx = x;
			@char.cy = y + 1;
			Service.gI().charMove();
			@char.cx = x;
			@char.cy = y;
			Service.gI().charMove();
		}
	}

	// Token: 0x060000E7 RID: 231 RVA: 0x000094A0 File Offset: 0x000076A0
	public static void XoaNguoi()
	{
		for (int i = 0; i < GameScr.vCharInMap.size(); i++)
		{
			global::Char @char = (global::Char)GameScr.vCharInMap.elementAt(i);
			bool flag = @char != null && !@char.cName.Contains("Rồng nhí");
			if (flag)
			{
				GameScr.vCharInMap.removeElementAt(i);
				break;
			}
		}
	}

	// Token: 0x060000E8 RID: 232 RVA: 0x00009508 File Offset: 0x00007708
	public static void XoaQUai()
	{
		for (int i = 0; i < GameScr.vMob.size(); i++)
		{
			Mob mob = (Mob)GameScr.vMob.elementAt(i);
			bool flag = mob != null;
			if (flag)
			{
				GameScr.vMob.removeElementAt(i);
				break;
			}
		}
	}

	// Token: 0x060000E9 RID: 233 RVA: 0x0000955C File Offset: 0x0000775C
	public static void AnNho()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && (item.template.id == 211 || item.template.id == 212);
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x060000EA RID: 234 RVA: 0x000095E4 File Offset: 0x000077E4
	public static void Update()
	{
		bool flag = global::Char.myCharz().cspeed != 6;
		if (flag)
		{
			global::Char.myCharz().cspeed = 6;
		}
		bool flag2 = GameCanvas.gameTick % 200 == 0 && global::Char.myCharz().cStamina < 100;
		if (flag2)
		{
			PetRong.AnNho();
		}
		bool flag3 = GameCanvas.gameTick % 20 == 0;
		if (flag3)
		{
			PetRong.autoitem();
		}
		bool flag4 = GameCanvas.gameTick % 200 == 0;
		if (flag4)
		{
			PetRong.AutoTdlt();
		}
		bool flag5 = GameCanvas.gameTick % 100 == 0;
		if (flag5)
		{
			PetRong.XaiTrung();
		}
		bool flag6 = GameCanvas.gameTick % 20 == 0 && TileMap.mapID == global::Char.myCharz().cgender + 21;
		if (flag6)
		{
			PetRong.AutoDuiGa();
		}
		bool flag7 = global::Char.myCharz().cHP <= 0L || global::Char.myCharz().meDead;
		if (flag7)
		{
			bool flag8 = GameCanvas.gameTick % 200 == 0;
			if (flag8)
			{
				Service.gI().returnTownFromDead();
			}
		}
		bool flag9 = PetRong.IsRongNhi();
		if (flag9)
		{
			bool flag10 = global::Char.myCharz().npcFocus != null;
			if (flag10)
			{
				global::Char.myCharz().npcFocus = null;
			}
			bool flag11 = GameCanvas.gameTick % 200 == 0;
			if (flag11)
			{
				bool flag12 = global::Char.myCharz().charFocus != null && global::Char.myCharz().charFocus.cName.Contains("Rồng nhí");
				if (flag12)
				{
					PetRong.TrangThai = string.Concat(new string[]
					{
						"Rồng nhí [",
						NinjaUtil.getMoneys(global::Char.myCharz().charFocus.cHP),
						" / ",
						NinjaUtil.getMoneys(global::Char.myCharz().charFocus.cHPFull),
						"]"
					});
				}
			}
			bool isXmapRunning = Pk9rXmap.IsXmapRunning;
			if (isXmapRunning)
			{
				XmapController.FinishXmap();
			}
			PetRong.MapBoss = TileMap.mapID;
			bool flag13 = GameCanvas.gameTick % 20 == 0;
			if (flag13)
			{
				PetRong.AutoPet();
			}
			bool flag14 = !AttackBoss.IsPemBoss;
			if (flag14)
			{
				AttackBoss.IsPemBoss = true;
			}
			bool flag15 = global::Char.myCharz().charFocus != null && global::Char.myCharz().charFocus.cName.Contains("Rồng nhí");
			if (flag15)
			{
				AutoSkill.AutoSendAttack();
			}
		}
		bool flag16 = !PetRong.IsRongNhi();
		if (flag16)
		{
			bool isPemBoss = AttackBoss.IsPemBoss;
			if (isPemBoss)
			{
				AttackBoss.IsPemBoss = false;
			}
			PetRong.TimBossTrongVoVong();
			PetRong.TrangThai = "Đang tìm Rồng nhí - Dự kiến đến :" + TileMap.mapNames[PetRong.MapBoss];
			bool flag17 = !PetRong.IsVatPham();
			if (flag17)
			{
				bool flag18 = GameCanvas.gameTick % 200 == 0;
				if (flag18)
				{
					PetRong.DenMapBoss();
				}
			}
		}
	}

	// Token: 0x060000EB RID: 235 RVA: 0x000098BC File Offset: 0x00007ABC
	public static void XaiTrung()
	{
		for (int i = 0; i < global::Char.myCharz().arrItemBag.Length; i++)
		{
			Item item = global::Char.myCharz().arrItemBag[i];
			bool flag = item != null && item.template.id == 1822 && item.quantity >= 99;
			if (flag)
			{
				Service.gI().useItem(0, 1, -1, item.template.id);
				break;
			}
		}
	}

	// Token: 0x0400008C RID: 140
	public static int MapBoss = -1;

	// Token: 0x0400008D RID: 141
	public static string Mega;

	// Token: 0x0400008E RID: 142
	public static string TrangThai;

	// Token: 0x0400008F RID: 143
	public static long thoigian;

	// Token: 0x04000090 RID: 144
	private static readonly int[] ListMap = new int[]
	{
		3,
		4,
		5,
		6,
		27,
		28,
		29,
		30,
		11,
		12,
		13,
		10,
		31,
		32,
		33,
		34,
		17,
		18,
		19,
		20,
		35,
		36,
		37,
		38,
		24,
		25,
		26
	};

	// Token: 0x04000091 RID: 145
	private static readonly Random random = new Random();

	// Token: 0x04000092 RID: 146
	public static int TimeRanDOmMap = 0;

	// Token: 0x04000093 RID: 147
	public static string tdlt = "Nro_244_Data//Resources//tdlt";
}
using System;

// Token: 0x020000A9 RID: 169
public class PKFlag
{
	// Token: 0x040010D5 RID: 4309
	public sbyte cflag;

	// Token: 0x040010D6 RID: 4310
	public int IDimageFlag;
}
using System;

// Token: 0x020000AA RID: 170
public class PlayerDart
{
	// Token: 0x06000913 RID: 2323 RVA: 0x0009AA10 File Offset: 0x00098C10
	public PlayerDart(global::Char charBelong, int dartType, SkillPaint sp, int x, int y)
	{
		this.skillPaint = sp;
		this.charBelong = charBelong;
		this.info = GameScr.darts[dartType];
		this.va = this.info.va;
		this.x = x;
		this.y = y;
		bool flag = charBelong.mobFocus == null;
		object obj;
		if (flag)
		{
			IMapObject charFocus = charBelong.charFocus;
			obj = charFocus;
		}
		else
		{
			obj = charBelong.mobFocus;
		}
		IMapObject mapObject = (IMapObject)obj;
		this.setAngle(Res.angle(mapObject.getX() - x, mapObject.getY() - y));
	}

	// Token: 0x06000914 RID: 2324 RVA: 0x0009AABB File Offset: 0x00098CBB
	public void setAngle(int angle)
	{
		this.angle = angle;
		this.vx = this.va * Res.cos(angle) >> 10;
		this.vy = this.va * Res.sin(angle) >> 10;
	}

	// Token: 0x06000915 RID: 2325 RVA: 0x0009AAF4 File Offset: 0x00098CF4
	public void update()
	{
		bool flag = !this.isActive;
		if (!flag)
		{
			bool flag2 = this.charBelong.mobFocus == null && this.charBelong.charFocus == null;
			if (flag2)
			{
				this.endMe();
			}
			else
			{
				bool flag3 = this.charBelong.mobFocus == null;
				object obj;
				if (flag3)
				{
					IMapObject charFocus = this.charBelong.charFocus;
					obj = charFocus;
				}
				else
				{
					obj = this.charBelong.mobFocus;
				}
				IMapObject mapObject = (IMapObject)obj;
				for (int i = 0; i < (int)this.info.nUpdate; i++)
				{
					bool flag4 = this.info.tail.Length != 0;
					if (flag4)
					{
						this.darts.addElement(new SmallDart(this.x, this.y));
					}
					int num = (this.charBelong.getX() <= mapObject.getX()) ? -10 : 10;
					this.dx = mapObject.getX() + num - this.x;
					this.dy = mapObject.getY() - mapObject.getH() / 2 - this.y;
					this.life++;
					bool flag5 = Res.abs(this.dx) < 20 && Res.abs(this.dy) < 20;
					if (flag5)
					{
						bool flag6 = this.charBelong.charFocus != null && this.charBelong.charFocus.me;
						if (flag6)
						{
							this.charBelong.charFocus.doInjure(this.charBelong.charFocus.damHP, 0L, this.charBelong.charFocus.isCrit, this.charBelong.charFocus.isMob);
						}
						this.endMe();
						return;
					}
					int num2 = Res.angle(this.dx, this.dy);
					bool flag7 = global::Math.abs(num2 - this.angle) < 90 || this.dx * this.dx + this.dy * this.dy > 4096;
					if (flag7)
					{
						bool flag8 = global::Math.abs(num2 - this.angle) < 15;
						if (flag8)
						{
							this.angle = num2;
						}
						else
						{
							bool flag9 = (num2 - this.angle >= 0 && num2 - this.angle < 180) || num2 - this.angle < -180;
							if (flag9)
							{
								this.angle = Res.fixangle(this.angle + 15);
							}
							else
							{
								this.angle = Res.fixangle(this.angle - 15);
							}
						}
					}
					bool flag10 = !this.isSpeedUp && this.va < 8192;
					if (flag10)
					{
						this.va += 1024;
					}
					this.vx = this.va * Res.cos(this.angle) >> 10;
					this.vy = this.va * Res.sin(this.angle) >> 10;
					this.dx += this.vx;
					int num3 = this.dx >> 10;
					this.x += num3;
					this.dx &= 1023;
					this.dy += this.vy;
					int num4 = this.dy >> 10;
					this.y += num4;
					this.dy &= 1023;
				}
				for (int j = 0; j < this.darts.size(); j++)
				{
					SmallDart smallDart = (SmallDart)this.darts.elementAt(j);
					smallDart.index++;
					bool flag11 = smallDart.index >= this.info.tail.Length;
					if (flag11)
					{
						this.darts.removeElementAt(j);
					}
				}
			}
		}
	}

	// Token: 0x06000916 RID: 2326 RVA: 0x0009AF10 File Offset: 0x00099110
	private void endMe()
	{
		bool flag = !this.charBelong.isUseSkillAfterCharge && this.x >= GameScr.cmx && this.x <= GameScr.cmx + GameCanvas.w;
		if (flag)
		{
			SoundMn.gI().explode_1();
		}
		this.charBelong.setAttack();
		bool me = this.charBelong.me;
		if (me)
		{
			this.charBelong.saveLoadPreviousSkill();
		}
		bool isUseSkillAfterCharge = this.charBelong.isUseSkillAfterCharge;
		if (isUseSkillAfterCharge)
		{
			this.charBelong.isUseSkillAfterCharge = false;
			bool flag2 = this.charBelong.isLockMove && this.charBelong.me && this.charBelong.statusMe != 14 && this.charBelong.statusMe != 5;
			if (flag2)
			{
				this.charBelong.isLockMove = false;
			}
			bool flag3 = this.charBelong.cgender == 2;
			if (flag3)
			{
				int num = (!this.charBelong.me) ? this.charBelong.skillTemplateId : ((int)global::Char.myCharz().myskill.skillId);
				bool flag4 = num < 77 || num > 83;
				if (flag4)
				{
					GameScr.gI().activeSuperPower(this.x, this.y);
				}
			}
			else
			{
				GameScr.gI().activeSuperPower(this.x, this.y);
			}
		}
		this.charBelong.dart = null;
		this.charBelong.isCreateDark = false;
		this.charBelong.skillPaint = null;
		this.charBelong.skillPaintRandomPaint = null;
		this.charBelong.stopUseChargeSkill();
	}

	// Token: 0x06000917 RID: 2327 RVA: 0x0009B0C4 File Offset: 0x000992C4
	public void paint(mGraphics g)
	{
		bool flag = !this.isActive;
		if (!flag)
		{
			int num = MonsterDart.findDirIndexFromAngle(360 - this.angle);
			int num2 = (int)MonsterDart.FRAME[num];
			int transform = MonsterDart.TRANSFORM[num];
			for (int i = this.darts.size() / 2; i < this.darts.size(); i++)
			{
				SmallDart smallDart = (SmallDart)this.darts.elementAt(i);
				SmallImage.drawSmallImage(g, (int)this.info.tailBorder[smallDart.index], smallDart.x, smallDart.y, 0, 3);
			}
			int num3 = GameCanvas.gameTick % this.info.headBorder.Length;
			SmallImage.drawSmallImage(g, (int)this.info.headBorder[num3][num2], this.x, this.y, transform, 3);
			for (int j = 0; j < this.darts.size(); j++)
			{
				SmallDart smallDart2 = (SmallDart)this.darts.elementAt(j);
				SmallImage.drawSmallImage(g, (int)this.info.tail[smallDart2.index], smallDart2.x, smallDart2.y, 0, 3);
			}
			SmallImage.drawSmallImage(g, (int)this.info.head[num3][num2], this.x, this.y, transform, 3);
			for (int k = 0; k < this.darts.size(); k++)
			{
				SmallDart smallDart3 = (SmallDart)this.darts.elementAt(k);
				bool flag2 = Res.abs(MonsterDart.r.nextInt(100)) < (int)this.info.xdPercent;
				if (flag2)
				{
					SmallImage.drawSmallImage(g, (int)((GameCanvas.gameTick % 2 != 0) ? this.info.xd2[smallDart3.index] : this.info.xd1[smallDart3.index]), smallDart3.x, smallDart3.y, 0, 3);
				}
			}
			g.setColor(16711680);
		}
	}

	// Token: 0x040010D7 RID: 4311
	public global::Char charBelong;

	// Token: 0x040010D8 RID: 4312
	public DartInfo info;

	// Token: 0x040010D9 RID: 4313
	public MyVector darts = new MyVector();

	// Token: 0x040010DA RID: 4314
	public int angle;

	// Token: 0x040010DB RID: 4315
	public int vx;

	// Token: 0x040010DC RID: 4316
	public int vy;

	// Token: 0x040010DD RID: 4317
	public int va;

	// Token: 0x040010DE RID: 4318
	public int x;

	// Token: 0x040010DF RID: 4319
	public int y;

	// Token: 0x040010E0 RID: 4320
	public int z;

	// Token: 0x040010E1 RID: 4321
	private int life;

	// Token: 0x040010E2 RID: 4322
	private int dx;

	// Token: 0x040010E3 RID: 4323
	private int dy;

	// Token: 0x040010E4 RID: 4324
	public bool isActive = true;

	// Token: 0x040010E5 RID: 4325
	public bool isSpeedUp;

	// Token: 0x040010E6 RID: 4326
	public SkillPaint skillPaint;
}
using System;

// Token: 0x020000AB RID: 171
public class PlayerData
{
	// Token: 0x06000918 RID: 2328 RVA: 0x0009B2E7 File Offset: 0x000994E7
	public PlayerData(int playerID, string name, short head, short body, short leg, long ppoint)
	{
		this.playerID = playerID;
		this.name = name;
		this.head = head;
		this.body = body;
		this.leg = leg;
		this.powpoint = ppoint;
	}

	// Token: 0x06000919 RID: 2329 RVA: 0x0009B320 File Offset: 0x00099520
	public string getInfo()
	{
		return string.Concat(new string[]
		{
			this.name,
			"\n",
			mResources.power_point,
			" ",
			this.powpoint.ToString()
		});
	}

	// Token: 0x040010E7 RID: 4327
	public int playerID;

	// Token: 0x040010E8 RID: 4328
	public string name;

	// Token: 0x040010E9 RID: 4329
	public short head;

	// Token: 0x040010EA RID: 4330
	public short body;

	// Token: 0x040010EB RID: 4331
	public short leg;

	// Token: 0x040010EC RID: 4332
	public long powpoint;
}
using System;

// Token: 0x020000AC RID: 172
public class PlayerInfo
{
	// Token: 0x0600091A RID: 2330 RVA: 0x0009B36C File Offset: 0x0009956C
	public string getName()
	{
		return this.name;
	}

	// Token: 0x0600091B RID: 2331 RVA: 0x0009B384 File Offset: 0x00099584
	public void setMoney(int m)
	{
		this.xu = m;
		this.strMoney = GameCanvas.getMoneys(this.xu);
	}

	// Token: 0x0600091C RID: 2332 RVA: 0x0009B3A0 File Offset: 0x000995A0
	public void setName(string name)
	{
		this.name = name;
		bool flag = name.Length > 9;
		if (flag)
		{
			this.showName = name.Substring(0, 8);
		}
		else
		{
			this.showName = name;
		}
	}

	// Token: 0x0600091D RID: 2333 RVA: 0x0009B3DE File Offset: 0x000995DE
	public void paint(mGraphics g, int x, int y)
	{
	}

	// Token: 0x0600091E RID: 2334 RVA: 0x0009B3E4 File Offset: 0x000995E4
	public int getExp()
	{
		return this.exp;
	}

	// Token: 0x040010ED RID: 4333
	public string name;

	// Token: 0x040010EE RID: 4334
	public string showName;

	// Token: 0x040010EF RID: 4335
	public string status;

	// Token: 0x040010F0 RID: 4336
	public int IDDB;

	// Token: 0x040010F1 RID: 4337
	private int exp;

	// Token: 0x040010F2 RID: 4338
	public bool isReady;

	// Token: 0x040010F3 RID: 4339
	public int xu;

	// Token: 0x040010F4 RID: 4340
	public int gold;

	// Token: 0x040010F5 RID: 4341
	public string strMoney = string.Empty;

	// Token: 0x040010F6 RID: 4342
	public sbyte finishPosition;

	// Token: 0x040010F7 RID: 4343
	public bool isMaster;

	// Token: 0x040010F8 RID: 4344
	public static Image[] imgStart;

	// Token: 0x040010F9 RID: 4345
	public sbyte[] indexLv;

	// Token: 0x040010FA RID: 4346
	public int onlineTime;
}
using System;

// Token: 0x020000AD RID: 173
public class Point
{
	// Token: 0x06000920 RID: 2336 RVA: 0x0009B410 File Offset: 0x00099610
	public Point()
	{
	}

	// Token: 0x06000921 RID: 2337 RVA: 0x0009B474 File Offset: 0x00099674
	public Point(int x, int y)
	{
		this.x = x;
		this.y = y;
	}

	// Token: 0x06000922 RID: 2338 RVA: 0x0009B4E8 File Offset: 0x000996E8
	public Point(int x, int y, int goc)
	{
		this.x = x;
		this.y = y;
		this.goc = goc;
	}

	// Token: 0x06000923 RID: 2339 RVA: 0x0009B561 File Offset: 0x00099761
	public void update()
	{
		this.f++;
		this.x += this.vx;
		this.y += this.vy;
	}

	// Token: 0x06000924 RID: 2340 RVA: 0x0009B598 File Offset: 0x00099798
	public void update_not_f()
	{
		this.x += this.vx;
		this.y += this.vy;
	}

	// Token: 0x06000925 RID: 2341 RVA: 0x0009B5C4 File Offset: 0x000997C4
	public void paint(mGraphics g)
	{
		bool flag = !this.isRemove;
		if (flag)
		{
			int num = 0;
			bool flag2 = this.isSmall && this.f >= this.fSmall;
			if (flag2)
			{
				num = 1;
			}
			Point.FraEffInMap[this.color].drawFrame(this.frame / 2 + num, this.x, this.y, this.dis, 3, g);
		}
	}

	// Token: 0x06000926 RID: 2342 RVA: 0x0009B638 File Offset: 0x00099838
	public void updateInMap()
	{
		this.f++;
		bool flag = this.maxframe > 1;
		if (flag)
		{
			this.frame++;
			bool flag2 = this.frame / 2 >= this.maxframe;
			if (flag2)
			{
				this.frame = 0;
			}
		}
		bool flag3 = this.f >= this.fRe;
		if (flag3)
		{
			this.isRemove = true;
		}
	}

	// Token: 0x06000927 RID: 2343 RVA: 0x0009B6B0 File Offset: 0x000998B0
	public int setFrameAngle(int goc)
	{
		bool flag = goc <= 15 || goc > 345;
		int result;
		if (flag)
		{
			result = 12;
		}
		else
		{
			int num = (goc - 15) / 15 + 1;
			bool flag2 = num > 24;
			if (flag2)
			{
				num = 24;
			}
			result = (int)this.mpaintone_Arrow[num];
		}
		return result;
	}

	// Token: 0x06000928 RID: 2344 RVA: 0x0009B6FC File Offset: 0x000998FC
	public void create_Arrow(int vMax)
	{
		this.vMax = vMax;
		int dx = this.toX - this.x;
		int dy = this.toY - this.y;
		bool flag = this.x > this.toX;
		if (flag)
		{
			this.dir = 2;
			this.dir_nguoc = 0;
		}
		else
		{
			this.dir = 0;
			this.dir_nguoc = 2;
		}
		this.create_Speed(dx, dy);
	}

	// Token: 0x06000929 RID: 2345 RVA: 0x0009B770 File Offset: 0x00099970
	public void create_Speed(int dx, int dy)
	{
		int frameAngle = Res.angle(dx, dy);
		this.frame = this.setFrameAngle(frameAngle);
		int num = Res.getDistance(dx, dy) / this.vMax;
		bool flag = num == 0;
		if (flag)
		{
			num = 1;
		}
		int num2 = dx / num;
		int num3 = dy / num;
		bool flag2 = num2 == 0 && dx < num;
		if (flag2)
		{
			num2 = ((dx >= 0) ? 1 : -1);
		}
		bool flag3 = num3 == 0 && dy < num;
		if (flag3)
		{
			num3 = ((dy >= 0) ? 1 : -1);
		}
		bool flag4 = Res.abs(num2) > Res.abs(dx);
		if (flag4)
		{
			num2 = dx;
		}
		bool flag5 = Res.abs(num3) > Res.abs(dy);
		if (flag5)
		{
			num3 = dy;
		}
		this.vx = num2;
		this.vy = num3;
	}

	// Token: 0x0600092A RID: 2346 RVA: 0x0009B830 File Offset: 0x00099A30
	public void moveTo_xy(int toX, int toY)
	{
		int num = toX - this.x;
		int dy = toY - this.y;
		bool flag = num > 1;
		if (flag)
		{
			int frameAngle = Res.angle(num, dy);
			this.frame = this.setFrameAngle(frameAngle);
		}
		bool flag2 = Res.abs(this.vx) > 0;
		if (flag2)
		{
			bool flag3 = Res.abs(this.x - toX) < Res.abs(this.vx);
			if (flag3)
			{
				this.x = toX;
				this.vx = 0;
			}
			else
			{
				this.x += this.vx;
			}
		}
		else
		{
			this.x = toX;
			this.vx = 0;
		}
		bool flag4 = Res.abs(this.vy) > 0;
		if (flag4)
		{
			bool flag5 = Res.abs(this.y - toY) < Res.abs(this.vy);
			if (flag5)
			{
				this.y = toY;
				this.vy = 0;
			}
			else
			{
				this.y += this.vy;
			}
		}
		else
		{
			this.y = toY;
			this.vy = 0;
		}
	}

	// Token: 0x0600092B RID: 2347 RVA: 0x0009B950 File Offset: 0x00099B50
	public void paint_Arrow(mGraphics g, FrameImage frm, int anchor, bool isCountFr)
	{
		bool flag = frm != null;
		if (flag)
		{
			int num = frm.nFrame / 3;
			bool flag2 = num < 1;
			if (flag2)
			{
				num = 1;
			}
			int num2 = 3;
			int num3 = (frm.nFrame <= 3) ? (this.f % num) : ((this.f / num2 % 2 != 0) ? 3 : 0);
			int idx = num * (int)this.mImageArrow[this.frame] + num3;
			bool flag3 = frm.nFrame < 3;
			if (flag3)
			{
				idx = this.f / num2 % frm.nFrame;
			}
			if (isCountFr)
			{
				idx = this.f / num2 % frm.nFrame;
			}
			frm.drawFrame(idx, this.x, this.y, (int)this.mXoayArrow[this.frame], anchor, g);
		}
	}

	// Token: 0x040010FB RID: 4347
	public sbyte type;

	// Token: 0x040010FC RID: 4348
	public int x;

	// Token: 0x040010FD RID: 4349
	public int y;

	// Token: 0x040010FE RID: 4350
	public int g;

	// Token: 0x040010FF RID: 4351
	public int v;

	// Token: 0x04001100 RID: 4352
	public int vMax;

	// Token: 0x04001101 RID: 4353
	public int w;

	// Token: 0x04001102 RID: 4354
	public int h;

	// Token: 0x04001103 RID: 4355
	public int color;

	// Token: 0x04001104 RID: 4356
	public int limitY;

	// Token: 0x04001105 RID: 4357
	public int vx;

	// Token: 0x04001106 RID: 4358
	public int vy;

	// Token: 0x04001107 RID: 4359
	public int x2;

	// Token: 0x04001108 RID: 4360
	public int y2;

	// Token: 0x04001109 RID: 4361
	public int toX;

	// Token: 0x0400110A RID: 4362
	public int toY;

	// Token: 0x0400110B RID: 4363
	public int dis;

	// Token: 0x0400110C RID: 4364
	public int f;

	// Token: 0x0400110D RID: 4365
	public int ftam;

	// Token: 0x0400110E RID: 4366
	public int fRe;

	// Token: 0x0400110F RID: 4367
	public int frame;

	// Token: 0x04001110 RID: 4368
	public int maxframe;

	// Token: 0x04001111 RID: 4369
	public int fSmall;

	// Token: 0x04001112 RID: 4370
	public int goc;

	// Token: 0x04001113 RID: 4371
	public int gocT_Arc;

	// Token: 0x04001114 RID: 4372
	public int idir;

	// Token: 0x04001115 RID: 4373
	public int dirThrow;

	// Token: 0x04001116 RID: 4374
	public int dir;

	// Token: 0x04001117 RID: 4375
	public int dir_nguoc;

	// Token: 0x04001118 RID: 4376
	public int idSkill;

	// Token: 0x04001119 RID: 4377
	public int id;

	// Token: 0x0400111A RID: 4378
	public int levelPaint;

	// Token: 0x0400111B RID: 4379
	public int num_per_frame = 1;

	// Token: 0x0400111C RID: 4380
	public int life;

	// Token: 0x0400111D RID: 4381
	public int goc_Arc;

	// Token: 0x0400111E RID: 4382
	public int vx1000;

	// Token: 0x0400111F RID: 4383
	public int vy1000;

	// Token: 0x04001120 RID: 4384
	public int va;

	// Token: 0x04001121 RID: 4385
	public int x1000;

	// Token: 0x04001122 RID: 4386
	public int y1000;

	// Token: 0x04001123 RID: 4387
	public int vX1000;

	// Token: 0x04001124 RID: 4388
	public int vY1000;

	// Token: 0x04001125 RID: 4389
	public long time;

	// Token: 0x04001126 RID: 4390
	public long timecount;

	// Token: 0x04001127 RID: 4391
	public MyVector vecEffPoint;

	// Token: 0x04001128 RID: 4392
	public string name;

	// Token: 0x04001129 RID: 4393
	public string info;

	// Token: 0x0400112A RID: 4394
	public bool isRemove;

	// Token: 0x0400112B RID: 4395
	public bool isSmall;

	// Token: 0x0400112C RID: 4396
	public bool isPaint;

	// Token: 0x0400112D RID: 4397
	public bool isChange;

	// Token: 0x0400112E RID: 4398
	public static FrameImage[] FraEffInMap;

	// Token: 0x0400112F RID: 4399
	public FrameImage fraImgEff;

	// Token: 0x04001130 RID: 4400
	public FrameImage fraImgEff_2;

	// Token: 0x04001131 RID: 4401
	public short index;

	// Token: 0x04001132 RID: 4402
	public byte[] mpaintone_Arrow = new byte[]
	{
		12,
		11,
		10,
		9,
		8,
		7,
		6,
		5,
		4,
		3,
		2,
		1,
		0,
		23,
		22,
		21,
		20,
		19,
		18,
		17,
		16,
		15,
		14,
		13
	};

	// Token: 0x04001133 RID: 4403
	public byte[] mImageArrow = new byte[]
	{
		0,
		0,
		2,
		1,
		1,
		2,
		0,
		0,
		2,
		1,
		1,
		2,
		0,
		0,
		2,
		1,
		1,
		2,
		0,
		0,
		2,
		1,
		1,
		2
	};

	// Token: 0x04001134 RID: 4404
	public byte[] mXoayArrow = new byte[]
	{
		2,
		2,
		3,
		3,
		3,
		4,
		5,
		5,
		5,
		5,
		5,
		1,
		0,
		0,
		0,
		0,
		0,
		7,
		6,
		6,
		6,
		6,
		6,
		2
	};
}
using System;

// Token: 0x020000AE RID: 174
public class PopUp
{
	// Token: 0x0600092C RID: 2348 RVA: 0x0009BA20 File Offset: 0x00099C20
	public PopUp(string info, int x, int y)
	{
		this.sayWidth = 100;
		bool flag = info.Length < 10;
		if (flag)
		{
			this.sayWidth = 60;
		}
		bool flag2 = GameCanvas.w == 128;
		if (flag2)
		{
			this.sayWidth = 128;
		}
		this.says = mFont.tahoma_7b_dark.splitFontArray(info, this.sayWidth - 10);
		this.sayRun = 7;
		this.cx = x - this.sayWidth / 2 - 1;
		this.cy = y - 15 + this.sayRun - this.says.Length * 12 - 10;
		this.cw = this.sayWidth + 2;
		this.ch = (this.says.Length + 1) * 12 + 1;
		while (this.cw % 10 != 0)
		{
			this.cw++;
		}
		while (this.ch % 10 != 0)
		{
			this.ch++;
		}
		bool flag3 = x >= 0 && x <= 24;
		if (flag3)
		{
			this.cx += this.cw / 2 + 30;
		}
		bool flag4 = x <= TileMap.tmw * 24 && x >= TileMap.tmw * 24 - 24;
		if (flag4)
		{
			this.cx -= this.cw / 2 + 6;
		}
		while (this.cx <= 30)
		{
			this.cx += 2;
		}
		while (this.cx + this.cw >= TileMap.tmw * 24 - 30)
		{
			this.cx -= 2;
		}
	}

	// Token: 0x0600092D RID: 2349 RVA: 0x0009BBFC File Offset: 0x00099DFC
	public static void loadBg()
	{
		bool flag = PopUp.goc == null;
		if (flag)
		{
			PopUp.goc = GameCanvas.loadImage("/mainImage/myTexture2dbd3.png");
		}
		bool flag2 = PopUp.imgPopUp == null;
		if (flag2)
		{
			PopUp.imgPopUp = GameCanvas.loadImage("/mainImage/myTexture2dimgPopup.png");
		}
		bool flag3 = PopUp.imgPopUp2 == null;
		if (flag3)
		{
			PopUp.imgPopUp2 = GameCanvas.loadImage("/mainImage/myTexture2dimgPopup2.png");
		}
	}

	// Token: 0x0600092E RID: 2350 RVA: 0x0009BC64 File Offset: 0x00099E64
	public void updateXYWH(string[] info, int x, int y)
	{
		this.sayWidth = 0;
		for (int i = 0; i < info.Length; i++)
		{
			bool flag = this.sayWidth < mFont.tahoma_7b_dark.getWidth(info[i]);
			if (flag)
			{
				this.sayWidth = mFont.tahoma_7b_dark.getWidth(info[i]);
			}
		}
		this.sayWidth += 20;
		this.says = info;
		this.sayRun = 7;
		this.cx = x - this.sayWidth / 2 - 1;
		this.cy = y - 15 + this.sayRun - this.says.Length * 12 - 10;
		this.cw = this.sayWidth + 2;
		this.ch = (this.says.Length + 1) * 12 + 1;
		while (this.cw % 10 != 0)
		{
			this.cw++;
		}
		while (this.ch % 10 != 0)
		{
			this.ch++;
		}
		bool flag2 = x >= 0 && x <= 24;
		if (flag2)
		{
			this.cx += this.cw / 2 + 30;
		}
		bool flag3 = x <= TileMap.tmw * 24 && x >= TileMap.tmw * 24 - 24;
		if (flag3)
		{
			this.cx -= this.cw / 2 + 6;
		}
		while (this.cx <= 30)
		{
			this.cx += 2;
		}
		while (this.cx + this.cw >= TileMap.tmw * 24 - 30)
		{
			this.cx -= 2;
		}
	}

	// Token: 0x0600092F RID: 2351 RVA: 0x0009BE3A File Offset: 0x0009A03A
	public static void addPopUp(int x, int y, string info)
	{
		PopUp.vPopups.addElement(new PopUp(info, x, y));
	}

	// Token: 0x06000930 RID: 2352 RVA: 0x0009BE50 File Offset: 0x0009A050
	public static void addPopUp(PopUp p)
	{
		PopUp.vPopups.addElement(p);
	}

	// Token: 0x06000931 RID: 2353 RVA: 0x0009BE5F File Offset: 0x0009A05F
	public static void removePopUp(PopUp p)
	{
		PopUp.vPopups.removeElement(p);
	}

	// Token: 0x06000932 RID: 2354 RVA: 0x0009BE70 File Offset: 0x0009A070
	public void paintClipPopUp(mGraphics g, int x, int y, int w, int h, int color, bool isFocus)
	{
		bool flag = color == 1;
		if (flag)
		{
			g.fillRect(x, y, w, h, 16777215, 90);
		}
		else
		{
			g.fillRect(x, y, w, h, 0, 77);
		}
	}

	// Token: 0x06000933 RID: 2355 RVA: 0x0009BEB4 File Offset: 0x0009A0B4
	public static void paintPopUp(mGraphics g, int x, int y, int w, int h, int color, bool isButton)
	{
		bool flag = !isButton;
		if (flag)
		{
			g.setColor(0);
			g.fillRect(x + 6, y, w - 14 + 1, h);
			g.fillRect(x, y + 6, w, h - 12 + 1);
			g.setColor(color);
			g.fillRect(x + 6, y + 1, w - 12, h - 2);
			g.fillRect(x + 1, y + 6, w - 2, h - 12);
			g.drawRegion(PopUp.goc, 0, 0, 7, 6, 0, x, y, 0);
			g.drawRegion(PopUp.goc, 0, 0, 7, 6, 2, x + w - 7, y, 0);
			g.drawRegion(PopUp.goc, 0, 0, 7, 6, 1, x, y + h - 6, 0);
			g.drawRegion(PopUp.goc, 0, 0, 7, 6, 3, x + w - 7, y + h - 6, 0);
		}
		else
		{
			Image arg = (color != 1) ? PopUp.imgPopUp : PopUp.imgPopUp2;
			g.drawRegion(arg, 0, 0, 10, 10, 0, x, y, 0);
			g.drawRegion(arg, 0, 20, 10, 10, 0, x + w - 10, y, 0);
			g.drawRegion(arg, 0, 50, 10, 10, 0, x, y + h - 10, 0);
			g.drawRegion(arg, 0, 70, 10, 10, 0, x + w - 10, y + h - 10, 0);
			int num = ((w - 20) % 10 != 0) ? ((w - 20) / 10 + 1) : ((w - 20) / 10);
			int num2 = ((h - 20) % 10 != 0) ? ((h - 20) / 10 + 1) : ((h - 20) / 10);
			for (int i = 0; i < num; i++)
			{
				g.drawRegion(arg, 0, 10, 10, 10, 0, x + 10 + i * 10, y, 0);
			}
			for (int j = 0; j < num2; j++)
			{
				g.drawRegion(arg, 0, 30, 10, 10, 0, x, y + 10 + j * 10, 0);
			}
			for (int k = 0; k < num; k++)
			{
				g.drawRegion(arg, 0, 60, 10, 10, 0, x + 10 + k * 10, y + h - 10, 0);
			}
			for (int l = 0; l < num2; l++)
			{
				g.drawRegion(arg, 0, 40, 10, 10, 0, x + w - 10, y + 10 + l * 10, 0);
			}
			g.setColor((color != 1) ? 16770503 : 12052656);
			g.fillRect(x + 10, y + 10, w - 20, h - 20);
		}
	}

	// Token: 0x06000934 RID: 2356 RVA: 0x0009C150 File Offset: 0x0009A350
	public void paint(mGraphics g)
	{
		bool flag = this.isPaint && this.says != null && ChatPopup.currChatPopup == null && !this.isHide;
		if (flag)
		{
			this.paintClipPopUp(g, this.cx, this.cy - GameCanvas.transY, this.cw, this.ch, (this.timeDelay != 0) ? 1 : 0, true);
			for (int i = 0; i < this.says.Length; i++)
			{
				((this.timeDelay != 0) ? mFont.tahoma_7b_green2 : mFont.tahoma_7b_white).drawString(g, this.says[i], this.cx + this.cw / 2, this.cy + (this.ch / 2 - this.says.Length * 12 / 2) + i * 12 - GameCanvas.transY, 2);
			}
		}
	}

	// Token: 0x06000935 RID: 2357 RVA: 0x0009C234 File Offset: 0x0009A434
	private void update()
	{
		bool flag = global::Char.myCharz().taskMaint != null && global::Char.myCharz().taskMaint.taskId == 0;
		if (flag)
		{
			bool flag2 = this.cx + this.cw >= GameScr.cmx && this.cx <= GameCanvas.w + GameScr.cmx && this.cy + this.ch >= GameScr.cmy && this.cy <= GameCanvas.h + GameScr.cmy;
			if (flag2)
			{
				this.isHide = false;
			}
			else
			{
				this.isHide = true;
			}
		}
		bool flag3 = global::Char.myCharz().taskMaint == null || (global::Char.myCharz().taskMaint != null && global::Char.myCharz().taskMaint.taskId != 0);
		if (flag3)
		{
			bool flag4 = this.cx + this.cw / 2 >= global::Char.myCharz().cx - 100 && this.cx + this.cw / 2 <= global::Char.myCharz().cx + 100 && this.cy + this.ch >= GameScr.cmy && this.cy <= GameCanvas.h + GameScr.cmy;
			if (flag4)
			{
				this.isHide = false;
			}
			else
			{
				this.isHide = true;
			}
		}
		bool flag5 = this.timeDelay > 0;
		if (flag5)
		{
			this.timeDelay--;
			bool flag6 = this.timeDelay == 0 && this.command != null;
			if (flag6)
			{
				this.command.performAction();
			}
		}
		bool flag7 = !this.isWayPoint;
		if (!flag7)
		{
			bool flag8 = global::Char.myCharz().taskMaint != null;
			if (flag8)
			{
				bool flag9 = global::Char.myCharz().taskMaint.taskId == 0;
				if (flag9)
				{
					bool flag10 = global::Char.myCharz().taskMaint.index == 0;
					if (flag10)
					{
						this.isPaint = false;
					}
					bool flag11 = global::Char.myCharz().taskMaint.index == 1;
					if (flag11)
					{
						this.isPaint = true;
					}
					bool flag12 = global::Char.myCharz().taskMaint.index > 1 && global::Char.myCharz().taskMaint.index < 6;
					if (flag12)
					{
						this.isPaint = false;
					}
				}
				else
				{
					bool flag13 = !this.isPaint;
					if (flag13)
					{
						this.tDelay++;
						bool flag14 = this.tDelay == 50;
						if (flag14)
						{
							this.isPaint = true;
						}
					}
				}
			}
			else
			{
				bool flag15 = !this.isPaint;
				if (flag15)
				{
					Hint.isPaint = false;
					this.tDelay++;
					bool flag16 = this.tDelay == 50;
					if (flag16)
					{
						this.isPaint = true;
						Hint.isPaint = true;
					}
				}
			}
		}
	}

	// Token: 0x06000936 RID: 2358 RVA: 0x0009C515 File Offset: 0x0009A715
	public void doClick(int timeDelay)
	{
		this.timeDelay = timeDelay;
	}

	// Token: 0x06000937 RID: 2359 RVA: 0x0009C520 File Offset: 0x0009A720
	public static void paintAll(mGraphics g)
	{
		for (int i = 0; i < PopUp.vPopups.size(); i++)
		{
			((PopUp)PopUp.vPopups.elementAt(i)).paint(g);
		}
	}

	// Token: 0x06000938 RID: 2360 RVA: 0x0009C560 File Offset: 0x0009A760
	public static void updateAll()
	{
		for (int i = 0; i < PopUp.vPopups.size(); i++)
		{
			((PopUp)PopUp.vPopups.elementAt(i)).update();
		}
	}

	// Token: 0x04001135 RID: 4405
	public static MyVector vPopups = new MyVector();

	// Token: 0x04001136 RID: 4406
	public int sayWidth;

	// Token: 0x04001137 RID: 4407
	public int sayRun;

	// Token: 0x04001138 RID: 4408
	public string[] says;

	// Token: 0x04001139 RID: 4409
	public int cx;

	// Token: 0x0400113A RID: 4410
	public int cy;

	// Token: 0x0400113B RID: 4411
	public int cw;

	// Token: 0x0400113C RID: 4412
	public int ch;

	// Token: 0x0400113D RID: 4413
	public static int f;

	// Token: 0x0400113E RID: 4414
	public static int tF;

	// Token: 0x0400113F RID: 4415
	public static int dir;

	// Token: 0x04001140 RID: 4416
	public bool isWayPoint;

	// Token: 0x04001141 RID: 4417
	public int tDelay;

	// Token: 0x04001142 RID: 4418
	private int timeDelay;

	// Token: 0x04001143 RID: 4419
	public Command command;

	// Token: 0x04001144 RID: 4420
	public bool isPaint = true;

	// Token: 0x04001145 RID: 4421
	public bool isHide;

	// Token: 0x04001146 RID: 4422
	public static Image goc;

	// Token: 0x04001147 RID: 4423
	public static Image imgPopUp;

	// Token: 0x04001148 RID: 4424
	public static Image imgPopUp2;

	// Token: 0x04001149 RID: 4425
	public Image imgFocus;

	// Token: 0x0400114A RID: 4426
	public Image imgUnFocus;
}
using System;

// Token: 0x020000AF RID: 175
public class PopUpYesNo : IActionListener
{
	// Token: 0x0600093A RID: 2362 RVA: 0x0009C5AC File Offset: 0x0009A7AC
	public void setPopUp(string info, Command cmdYes, Command cmdNo)
	{
		this.info = new string[]
		{
			info
		};
		this.H = 29;
		this.cmdYes = cmdYes;
		this.cmdNo = cmdNo;
		this.cmdYes.img = (this.cmdNo.img = GameScr.imgNut);
		this.cmdYes.imgFocus = (this.cmdNo.imgFocus = GameScr.imgNutF);
		this.cmdYes.w = mGraphics.getImageWidth(cmdYes.img);
		this.cmdNo.w = mGraphics.getImageWidth(cmdYes.img);
		this.cmdYes.h = mGraphics.getImageHeight(cmdYes.img);
		this.cmdNo.h = mGraphics.getImageHeight(cmdYes.img);
		this.last = mSystem.currentTimeMillis();
		this.dem = this.info[0].Length / 3;
		bool flag = this.dem < 15;
		if (flag)
		{
			this.dem = 15;
		}
		TextInfo.reset();
	}

	// Token: 0x0600093B RID: 2363 RVA: 0x0009C6B4 File Offset: 0x0009A8B4
	public void paint(mGraphics g)
	{
		PopUp.paintPopUp(g, this.X, this.Y, this.W, this.H + ((!GameCanvas.isTouch) ? 10 : 0), 16777215, false);
		bool flag = this.info != null;
		if (flag)
		{
			TextInfo.paint(g, this.info[0], this.X + 5, this.Y + this.H / 2 - ((!GameCanvas.isTouch) ? 6 : 4), this.W - 10, this.H, mFont.tahoma_7);
			bool isTouch = GameCanvas.isTouch;
			if (isTouch)
			{
				this.cmdYes.paint(g);
				mFont.tahoma_7_yellow.drawString(g, this.dem.ToString() + string.Empty, this.cmdYes.x + this.cmdYes.w / 2, this.cmdYes.y + this.cmdYes.h + 5, 2, mFont.tahoma_7_grey);
			}
			else
			{
				bool isQwerty = TField.isQwerty;
				if (isQwerty)
				{
					mFont.tahoma_7b_blue.drawString(g, mResources.do_accept_qwerty + this.dem.ToString() + ")", this.X + this.W / 2, this.Y + this.H - 6, 2);
				}
				else
				{
					mFont.tahoma_7b_blue.drawString(g, mResources.do_accept + this.dem.ToString() + ")", this.X + this.W / 2, this.Y + this.H - 6, 2);
				}
			}
		}
	}

	// Token: 0x0600093C RID: 2364 RVA: 0x0009C85C File Offset: 0x0009AA5C
	public void update()
	{
		bool flag = this.info != null;
		if (flag)
		{
			this.X = GameCanvas.w - 5 - this.W;
			this.Y = 45;
			bool flag2 = GameCanvas.w - 50 > 155 + this.W;
			if (flag2)
			{
				this.X = GameCanvas.w - 55 - this.W;
				this.Y = 5;
			}
			this.cmdYes.x = this.X - 35;
			this.cmdYes.y = this.Y;
			this.curr = mSystem.currentTimeMillis();
			Res.outz("curr - last= " + (this.curr - this.last).ToString());
			bool flag3 = this.curr - this.last >= 1000L;
			if (flag3)
			{
				this.last = mSystem.currentTimeMillis();
				this.dem--;
			}
			bool flag4 = this.dem == 0;
			if (flag4)
			{
				GameScr.gI().popUpYesNo = null;
			}
		}
	}

	// Token: 0x0600093D RID: 2365 RVA: 0x0009C978 File Offset: 0x0009AB78
	public void perform(int idAction, object p)
	{
	}

	// Token: 0x0400114B RID: 4427
	public Command cmdYes;

	// Token: 0x0400114C RID: 4428
	public Command cmdNo;

	// Token: 0x0400114D RID: 4429
	public string[] info;

	// Token: 0x0400114E RID: 4430
	private int X;

	// Token: 0x0400114F RID: 4431
	private int Y;

	// Token: 0x04001150 RID: 4432
	private int W = 120;

	// Token: 0x04001151 RID: 4433
	private int H;

	// Token: 0x04001152 RID: 4434
	private int dem;

	// Token: 0x04001153 RID: 4435
	private long last;

	// Token: 0x04001154 RID: 4436
	private long curr;
}
using System;

// Token: 0x020000B0 RID: 176
public class Position
{
	// Token: 0x0600093F RID: 2367 RVA: 0x0009C98C File Offset: 0x0009AB8C
	public Position()
	{
		this.x = 0;
		this.y = 0;
	}

	// Token: 0x06000940 RID: 2368 RVA: 0x0009C9A4 File Offset: 0x0009ABA4
	public Position(int x, int y, int anchor)
	{
		this.x = x;
		this.y = y;
		this.anchor = anchor;
	}

	// Token: 0x06000941 RID: 2369 RVA: 0x0009C9C3 File Offset: 0x0009ABC3
	public Position(int x, int y)
	{
		this.x = x;
		this.y = y;
	}

	// Token: 0x06000942 RID: 2370 RVA: 0x0009C9DB File Offset: 0x0009ABDB
	public void setPosTo(int xT, int yT)
	{
		this.xTo = (short)xT;
		this.yTo = (short)yT;
		this.distant = (short)Res.distance(this.x, this.y, (int)this.xTo, (int)this.yTo);
	}

	// Token: 0x06000943 RID: 2371 RVA: 0x0009CA14 File Offset: 0x0009AC14
	public int translate()
	{
		bool flag = this.x == (int)this.xTo && this.y == (int)this.yTo;
		int result;
		if (flag)
		{
			result = -1;
		}
		else
		{
			bool flag2 = global::Math.abs(((int)this.xTo - this.x) / 2) <= 1 && global::Math.abs(((int)this.yTo - this.y) / 2) <= 1;
			if (flag2)
			{
				this.x = (int)this.xTo;
				this.y = (int)this.yTo;
				result = 0;
			}
			else
			{
				bool flag3 = this.x != (int)this.xTo;
				if (flag3)
				{
					this.x += ((int)this.xTo - this.x) / 2;
				}
				bool flag4 = this.y != (int)this.yTo;
				if (flag4)
				{
					this.y += ((int)this.yTo - this.y) / 2;
				}
				bool flag5 = Res.distance(this.x, this.y, (int)this.xTo, (int)this.yTo) <= (int)(this.distant / 5);
				if (flag5)
				{
					result = 2;
				}
				else
				{
					result = 1;
				}
			}
		}
		return result;
	}

	// Token: 0x06000944 RID: 2372 RVA: 0x0009CB47 File Offset: 0x0009AD47
	public void update()
	{
		this.layer.update();
	}

	// Token: 0x06000945 RID: 2373 RVA: 0x0009CB56 File Offset: 0x0009AD56
	public void paint(mGraphics g)
	{
		this.layer.paint(g, this.x, this.y);
	}

	// Token: 0x04001155 RID: 4437
	public int x;

	// Token: 0x04001156 RID: 4438
	public int y;

	// Token: 0x04001157 RID: 4439
	public int anchor;

	// Token: 0x04001158 RID: 4440
	public int g;

	// Token: 0x04001159 RID: 4441
	public int v;

	// Token: 0x0400115A RID: 4442
	public int w;

	// Token: 0x0400115B RID: 4443
	public int h;

	// Token: 0x0400115C RID: 4444
	public int color;

	// Token: 0x0400115D RID: 4445
	public int limitY;

	// Token: 0x0400115E RID: 4446
	public Layer layer;

	// Token: 0x0400115F RID: 4447
	public short yTo;

	// Token: 0x04001160 RID: 4448
	public short xTo;

	// Token: 0x04001161 RID: 4449
	public short distant;
}
using System;
using UnityEngine;

// Token: 0x020000B1 RID: 177
public class RadarScr : mScreen
{
	// Token: 0x06000946 RID: 2374 RVA: 0x0009CB74 File Offset: 0x0009AD74
	public RadarScr()
	{
		RadarScr.TYPE_UI = true;
		Image img = mSystem.loadImage("/radar/17.png");
		Image img2 = mSystem.loadImage("/radar/3.png");
		Image img3 = mSystem.loadImage("/radar/23.png");
		RadarScr.fraImgFocus = new FrameImage(img, 28, 28);
		RadarScr.fraImgFocusNone = new FrameImage(img2, 30, 30);
		RadarScr.fraEff = new FrameImage(img3, 11, 11);
		RadarScr.imgUI = mSystem.loadImage("/radar/0.png");
		RadarScr.imgArrow_Left = mSystem.loadImage("/radar/1.png");
		RadarScr.imgArrow_Right = mSystem.loadImage("/radar/2.png");
		RadarScr.imgUIText = mSystem.loadImage("/radar/17.png");
		RadarScr.imgArrow_Down = mSystem.loadImage("/radar/4.png");
		RadarScr.imgLock = mSystem.loadImage("/radar/5.png");
		RadarScr.imgUse_0 = mSystem.loadImage("/radar/6.png");
		RadarScr.imgRank = new Image[7];
		for (int i = 0; i < 7; i++)
		{
			RadarScr.imgRank[i] = mSystem.loadImage("/radar/" + (i + 7).ToString() + ".png");
		}
		RadarScr.imgUse = mSystem.loadImage("/radar/14.png");
		RadarScr.imgBack = mSystem.loadImage("/radar/15.png");
		RadarScr.imgChange = mSystem.loadImage("/radar/16.png");
		RadarScr.imgUIText = mSystem.loadImage("/radar/18.png");
		RadarScr.imgBar_1 = mSystem.loadImage("/radar/19.png");
		RadarScr.imgPro_0 = mSystem.loadImage("/radar/20.png");
		RadarScr.imgPro_1 = mSystem.loadImage("/radar/21.png");
		RadarScr.imgBar_0 = mSystem.loadImage("/radar/22.png");
		RadarScr.wUi = 200;
		RadarScr.hUi = 219;
		RadarScr.xUi = GameCanvas.hw - (RadarScr.wUi + 40) / 2;
		RadarScr.yUi = GameCanvas.hh - RadarScr.hUi / 2;
		RadarScr.xText = RadarScr.xUi + RadarScr.wUi - 81;
		RadarScr.yText = RadarScr.yUi + 29;
		RadarScr.wText = 120;
		RadarScr.hText = 80;
		RadarScr.xyArrow = new int[][]
		{
			new int[]
			{
				RadarScr.xUi + 34,
				RadarScr.yUi + RadarScr.hUi - 42
			},
			new int[]
			{
				RadarScr.xUi + RadarScr.wUi / 2 - RadarScr.imgArrow_Down.getWidth() / 2,
				RadarScr.yUi + RadarScr.hUi / 2 + 33
			},
			new int[]
			{
				RadarScr.xUi + RadarScr.wUi - 41,
				RadarScr.yUi + RadarScr.hUi - 42
			}
		};
		RadarScr.xyItem = new int[][]
		{
			new int[]
			{
				RadarScr.xUi + 25,
				RadarScr.yUi + RadarScr.hUi - 82
			},
			new int[]
			{
				RadarScr.xUi + 57,
				RadarScr.yUi + RadarScr.hUi - 62
			},
			new int[]
			{
				RadarScr.xUi + RadarScr.wUi / 2 - 14,
				RadarScr.yUi + RadarScr.hUi - 102
			},
			new int[]
			{
				RadarScr.xUi + RadarScr.wUi - 57 - 28,
				RadarScr.yUi + RadarScr.hUi - 62
			},
			new int[]
			{
				RadarScr.xUi + RadarScr.wUi - 25 - 28,
				RadarScr.yUi + RadarScr.hUi - 82
			}
		};
		this.dxArrow = new int[2];
		this.dyArrow = 0;
		RadarScr.xMon = RadarScr.xUi + 73;
		RadarScr.yMon = RadarScr.yUi + RadarScr.hUi / 2 + 5;
		RadarScr.yCmd = RadarScr.yUi + RadarScr.hUi - 22;
		RadarScr.xCmd = new int[]
		{
			RadarScr.xUi + RadarScr.wUi / 2 - 8 - 80,
			RadarScr.xUi + RadarScr.wUi / 2 - 8,
			RadarScr.xUi + RadarScr.wUi / 2 - 8 + 80
		};
		RadarScr.dxCmd = new int[3];
		this.yClip = RadarScr.yText + 10 + 70;
		this.hClip = 0;
		RadarScr.list = new MyVector();
		RadarScr.listUse = new MyVector();
		this.page = 1;
		this.maxpage = 2;
	}

	// Token: 0x06000947 RID: 2375 RVA: 0x0009CFB4 File Offset: 0x0009B1B4
	public static RadarScr gI()
	{
		bool flag = RadarScr.instance == null;
		if (flag)
		{
			RadarScr.instance = new RadarScr();
		}
		return RadarScr.instance;
	}

	// Token: 0x06000948 RID: 2376 RVA: 0x0009CFE4 File Offset: 0x0009B1E4
	public void SetRadarScr(MyVector list, int num, int numMax)
	{
		RadarScr.list = list;
		RadarScr.SetNum(num, numMax);
		this.page = 1;
		this.indexFocus = 2;
		this.listIndex();
		RadarScr.TYPE_UI = true;
		RadarScr.SetListUse();
		bool type_UI = RadarScr.TYPE_UI;
		if (type_UI)
		{
			this.maxpage = list.size() / 5 + ((list.size() % 5 > 0) ? 1 : 0);
		}
		else
		{
			this.maxpage = RadarScr.listUse.size() / 5 + ((RadarScr.listUse.size() % 5 > 0) ? 1 : 0);
		}
	}

	// Token: 0x06000949 RID: 2377 RVA: 0x0009D074 File Offset: 0x0009B274
	public static void SetNum(int num, int numMax)
	{
		RadarScr.num = num;
		RadarScr.numMax = numMax;
	}

	// Token: 0x0600094A RID: 2378 RVA: 0x0009D084 File Offset: 0x0009B284
	public static void SetListUse()
	{
		RadarScr.listUse = new MyVector(string.Empty);
		for (int i = 0; i < RadarScr.list.size(); i++)
		{
			Info_RadaScr info_RadaScr = (Info_RadaScr)RadarScr.list.elementAt(i);
			bool flag = info_RadaScr != null && info_RadaScr.isUse == 1;
			if (flag)
			{
				RadarScr.listUse.addElement(info_RadaScr);
			}
		}
	}

	// Token: 0x0600094B RID: 2379 RVA: 0x0009D0F0 File Offset: 0x0009B2F0
	public void listIndex()
	{
		MyVector myVector = RadarScr.listUse;
		bool type_UI = RadarScr.TYPE_UI;
		if (type_UI)
		{
			myVector = RadarScr.list;
		}
		int num = (this.page - 1) * 5;
		int num2 = num + 5;
		for (int i = num; i < num2; i++)
		{
			bool flag = i >= myVector.size();
			if (flag)
			{
				RadarScr.index[i - num] = -1;
			}
			else
			{
				Info_RadaScr info_RadaScr = (Info_RadaScr)myVector.elementAt(i);
				bool flag2 = info_RadaScr != null;
				if (flag2)
				{
					RadarScr.index[i - num] = info_RadaScr.id;
				}
			}
		}
		RadarScr.cmyText = 0;
		RadarScr.hText = 0;
		SoundMn.gI().radarItem();
	}

	// Token: 0x0600094C RID: 2380 RVA: 0x0009D1A4 File Offset: 0x0009B3A4
	public override void update()
	{
		try
		{
			bool flag = RadarScr.hText < 80;
			if (flag)
			{
				RadarScr.hText += 4;
				bool flag2 = RadarScr.hText > 80;
				if (flag2)
				{
					RadarScr.hText = 80;
				}
			}
			this.focus_card = Info_RadaScr.GetInfo(RadarScr.listUse, RadarScr.index[this.indexFocus]);
			bool type_UI = RadarScr.TYPE_UI;
			if (type_UI)
			{
				this.focus_card = Info_RadaScr.GetInfo(RadarScr.list, RadarScr.index[this.indexFocus]);
			}
			GameScr.gI().update();
			bool flag3 = GameCanvas.gameTick % 10 < 6;
			if (flag3)
			{
				bool flag4 = GameCanvas.gameTick % 2 == 0;
				if (flag4)
				{
					this.dyArrow--;
				}
			}
			else
			{
				this.dyArrow = 0;
			}
			bool flag5 = this.focus_card != null;
			if (flag5)
			{
				int num = (int)(this.focus_card.amount * 100 / this.focus_card.max_amount);
				this.hClip = num * RadarScr.imgBar_1.getHeight() / 100;
				int num2 = RadarScr.num * 100 / RadarScr.list.size();
				this.wClip = num2 * RadarScr.imgPro_1.getWidth() / 100;
			}
		}
		catch (Exception ex)
		{
			Debug.LogError("-upd-radaScr-null: " + ex.ToString());
		}
	}

	// Token: 0x0600094D RID: 2381 RVA: 0x0009D318 File Offset: 0x0009B518
	public override void updateKey()
	{
		bool flag = !InfoDlg.isLock;
		if (flag)
		{
			bool flag2 = GameCanvas.isTouch && !ChatTextField.gI().isShow && !GameCanvas.menu.showMenu;
			if (flag2)
			{
				this.updateKeyTouchControl();
			}
			bool flag3 = GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22];
			if (flag3)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] = false;
				this.doKeyText(1);
			}
			bool flag4 = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21];
			if (flag4)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] = false;
				this.doKeyText(-1);
			}
			bool flag5 = GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23];
			if (flag5)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 4 : 23] = false;
				this.doKeyItem(1);
			}
			bool flag6 = GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24];
			if (flag6)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 6 : 24] = false;
				this.doKeyItem(0);
			}
			bool flag7 = GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25];
			if (flag7)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] = false;
				this.doClickUse(1);
			}
			bool flag8 = GameCanvas.keyPressed[13];
			if (flag8)
			{
				this.doClickUse(2);
			}
			bool flag9 = GameCanvas.keyPressed[12];
			if (flag9)
			{
				GameCanvas.keyPressed[12] = false;
				this.doClickUse(0);
			}
			GameCanvas.clearKeyPressed();
		}
	}

	// Token: 0x0600094E RID: 2382 RVA: 0x0009D4AC File Offset: 0x0009B6AC
	private void doChangeUI()
	{
		RadarScr.TYPE_UI = !RadarScr.TYPE_UI;
		this.page = 1;
		this.indexFocus = 0;
		bool type_UI = RadarScr.TYPE_UI;
		if (type_UI)
		{
			this.maxpage = RadarScr.list.size() / 5 + ((RadarScr.list.size() % 5 > 0) ? 1 : 0);
		}
		else
		{
			this.maxpage = RadarScr.listUse.size() / 5 + ((RadarScr.listUse.size() % 5 > 0) ? 1 : 0);
		}
		this.listIndex();
		RadarScr.hText = 0;
	}

	// Token: 0x0600094F RID: 2383 RVA: 0x0009D540 File Offset: 0x0009B740
	private void updateKeyTouchControl()
	{
		bool isPointerClick = GameCanvas.isPointerClick;
		if (isPointerClick)
		{
			for (int i = 0; i < 5; i++)
			{
				bool flag = GameCanvas.isPointerHoldIn(RadarScr.xyItem[i][0], RadarScr.xyItem[i][1], 30, 30) && GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease && i != this.indexFocus;
				if (flag)
				{
					this.doClickItem(i);
				}
			}
			bool flag2 = GameCanvas.isPointerHoldIn(RadarScr.xyArrow[0][0] - 5, RadarScr.xyArrow[0][1] - 5, 20, 20);
			if (flag2)
			{
				bool isPointerDown = GameCanvas.isPointerDown;
				if (isPointerDown)
				{
					this.dxArrow[0] = 1;
				}
				bool flag3 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
				if (flag3)
				{
					this.doClickArrow(0);
					this.dxArrow[0] = 0;
				}
			}
			bool flag4 = GameCanvas.isPointerHoldIn(RadarScr.xyArrow[2][0] - 5, RadarScr.xyArrow[2][1] - 5, 20, 20);
			if (flag4)
			{
				bool isPointerDown2 = GameCanvas.isPointerDown;
				if (isPointerDown2)
				{
					this.dxArrow[1] = 1;
				}
				bool flag5 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
				if (flag5)
				{
					this.doClickArrow(1);
					this.dxArrow[1] = 0;
				}
			}
			for (int j = 0; j < RadarScr.xCmd.Length; j++)
			{
				bool flag6 = GameCanvas.isPointerHoldIn(RadarScr.xCmd[j] - 5, RadarScr.yCmd - 5, 20, 20);
				if (flag6)
				{
					bool isPointerDown3 = GameCanvas.isPointerDown;
					if (isPointerDown3)
					{
						RadarScr.dxCmd[j] = 1;
					}
					bool flag7 = GameCanvas.isPointerClick && GameCanvas.isPointerJustRelease;
					if (flag7)
					{
						this.doClickUse(j);
						RadarScr.dxCmd[j] = 0;
					}
				}
			}
		}
		else
		{
			RadarScr.dxCmd[0] = 0;
			RadarScr.dxCmd[1] = 0;
			RadarScr.dxCmd[2] = 0;
			this.dxArrow[0] = 0;
			this.dxArrow[1] = 0;
		}
		bool flag8 = !GameCanvas.isPointerHoldIn(RadarScr.xText, 0, RadarScr.wText, RadarScr.yText + RadarScr.hText);
		if (!flag8)
		{
			bool isPointerMove = GameCanvas.isPointerMove;
			if (isPointerMove)
			{
				bool flag9 = this.pyy == 0;
				if (flag9)
				{
					this.pyy = GameCanvas.py;
				}
				this.pxx = this.pyy - GameCanvas.py;
				bool flag10 = this.pxx != 0;
				if (flag10)
				{
					RadarScr.cmyText += this.pxx;
					this.pyy = GameCanvas.py;
				}
				bool flag11 = RadarScr.cmyText < 0;
				if (flag11)
				{
					RadarScr.cmyText = 0;
				}
				bool flag12 = RadarScr.cmyText > this.focus_card.cp.lim;
				if (flag12)
				{
					RadarScr.cmyText = this.focus_card.cp.lim;
				}
			}
			else
			{
				this.pyy = 0;
				this.pyy = 0;
			}
		}
	}

	// Token: 0x06000950 RID: 2384 RVA: 0x0009D820 File Offset: 0x0009BA20
	private void doClickUse(int i)
	{
		switch (i)
		{
		case 0:
			this.doChangeUI();
			break;
		case 1:
		{
			bool flag = this.focus_card != null;
			if (flag)
			{
				Service.gI().SendRada(1, this.focus_card.id);
			}
			break;
		}
		case 2:
			GameScr.gI().switchToMe();
			break;
		}
		SoundMn.gI().radarClick();
	}

	// Token: 0x06000951 RID: 2385 RVA: 0x0009D890 File Offset: 0x0009BA90
	private void doClickArrow(int dir)
	{
		bool type_UI = RadarScr.TYPE_UI;
		if (type_UI)
		{
			this.maxpage = RadarScr.list.size() / 5 + ((RadarScr.list.size() % 5 > 0) ? 1 : 0);
		}
		else
		{
			this.maxpage = RadarScr.listUse.size() / 5 + ((RadarScr.listUse.size() % 5 > 0) ? 1 : 0);
		}
		int num = this.page;
		bool flag = dir == 0;
		if (flag)
		{
			bool flag2 = this.page == 1;
			if (flag2)
			{
				return;
			}
			num--;
			bool flag3 = num < 1;
			if (flag3)
			{
				num = 1;
			}
		}
		else
		{
			bool flag4 = this.page == this.maxpage;
			if (flag4)
			{
				return;
			}
			num++;
			bool flag5 = num > this.maxpage;
			if (flag5)
			{
				num = this.maxpage;
			}
		}
		bool flag6 = num != this.page;
		if (flag6)
		{
			this.page = num;
			this.listIndex();
		}
	}

	// Token: 0x06000952 RID: 2386 RVA: 0x0009D985 File Offset: 0x0009BB85
	private void doClickItem(int focus)
	{
		this.indexFocus = focus;
		this.listIndex();
	}

	// Token: 0x06000953 RID: 2387 RVA: 0x0009D998 File Offset: 0x0009BB98
	private void doKeyText(int type)
	{
		RadarScr.cmyText += 12 * type;
		bool flag = RadarScr.cmyText < 0;
		if (flag)
		{
			RadarScr.cmyText = 0;
		}
		bool flag2 = RadarScr.cmyText > this.focus_card.cp.lim;
		if (flag2)
		{
			RadarScr.cmyText = this.focus_card.cp.lim;
		}
	}

	// Token: 0x06000954 RID: 2388 RVA: 0x0009D9FC File Offset: 0x0009BBFC
	private void doKeyItem(int type)
	{
		int num = this.indexFocus;
		int num2 = this.page;
		num = ((type != 0) ? (num - 1) : (num + 1));
		bool flag = num >= RadarScr.index.Length;
		if (flag)
		{
			bool flag2 = this.page < this.maxpage;
			if (flag2)
			{
				num = 0;
				num2++;
			}
			else
			{
				num = RadarScr.index.Length - 1;
			}
		}
		bool flag3 = num < 0;
		if (flag3)
		{
			bool flag4 = this.page > 1;
			if (flag4)
			{
				num = RadarScr.index.Length - 1;
				num2--;
			}
			else
			{
				num = 0;
			}
		}
		bool flag5 = num != this.indexFocus;
		if (flag5)
		{
			this.indexFocus = num;
			RadarScr.cmyText = 0;
			RadarScr.hText = 0;
		}
		bool flag6 = num2 != this.page;
		if (flag6)
		{
			this.page = num2;
			this.listIndex();
		}
	}

	// Token: 0x06000955 RID: 2389 RVA: 0x0009DADC File Offset: 0x0009BCDC
	public override void paint(mGraphics g)
	{
		try
		{
			GameScr.gI().paint(g);
			g.translate(-GameScr.cmx, -GameScr.cmy);
			g.translate(0, GameCanvas.transY);
			GameScr.resetTranslate(g);
			g.drawImage(RadarScr.imgUI, RadarScr.xUi, RadarScr.yUi, 0);
			g.drawImage(RadarScr.imgPro_0, RadarScr.xUi + RadarScr.wUi / 2 - RadarScr.imgPro_0.getWidth() / 2, RadarScr.yUi - RadarScr.imgPro_0.getHeight() / 2 - 2, 0);
			g.setClip(RadarScr.xUi + RadarScr.wUi / 2 - RadarScr.imgPro_0.getWidth() / 2 + 13, RadarScr.yUi - RadarScr.imgPro_0.getHeight() / 2 + 3, this.wClip, RadarScr.imgPro_0.getHeight());
			g.drawImage(RadarScr.imgPro_1, RadarScr.xUi + RadarScr.wUi / 2 - RadarScr.imgPro_0.getWidth() / 2 + 13, RadarScr.yUi - RadarScr.imgPro_0.getHeight() / 2 + 3, 0);
			GameScr.resetTranslate(g);
			g.drawImage(RadarScr.imgChange, RadarScr.xCmd[0], RadarScr.yCmd + RadarScr.dxCmd[0], 0);
			g.drawImage(RadarScr.imgUse_0, RadarScr.xCmd[1], RadarScr.yCmd + RadarScr.dxCmd[1], 0);
			g.drawImage(RadarScr.imgBack, RadarScr.xCmd[2], RadarScr.yCmd + RadarScr.dxCmd[2], 0);
			bool type_UI = RadarScr.TYPE_UI;
			if (type_UI)
			{
				g.drawRegion(RadarScr.imgUse, 0, 0, 17, 17, 0, RadarScr.xCmd[1], RadarScr.yCmd + RadarScr.dxCmd[1], 0);
			}
			else
			{
				g.drawRegion(RadarScr.imgUse, 0, 0, 17, 17, 1, RadarScr.xCmd[1], RadarScr.yCmd + RadarScr.dxCmd[1], 0);
			}
			bool flag = this.focus_card != null;
			if (flag)
			{
				g.setClip(RadarScr.xUi + 30, RadarScr.yUi + 13, RadarScr.wUi - 60, RadarScr.hUi / 2);
				this.focus_card.paintInfo(g, RadarScr.xMon, RadarScr.yMon);
				GameScr.resetTranslate(g);
				mFont.tahoma_7b_yellow.drawString(g, ((this.focus_card.level <= 0) ? " " : ("Lv." + this.focus_card.level.ToString() + " ")) + this.focus_card.name, RadarScr.xUi + RadarScr.wUi / 2, RadarScr.yUi + 15, 2);
				mFont.tahoma_7_white.drawString(g, "no." + this.focus_card.no.ToString(), RadarScr.xUi + 30, RadarScr.yText - 2, 0);
				g.drawImage(RadarScr.imgBar_0, RadarScr.xUi + 36, RadarScr.yText + 10, 0);
				g.setClip(RadarScr.xUi + 36, this.yClip - this.hClip, 7, this.hClip);
				g.drawImage(RadarScr.imgBar_1, RadarScr.xUi + 36, RadarScr.yText + 10, 0);
				GameScr.resetTranslate(g);
				g.drawImage(RadarScr.imgRank[(int)this.focus_card.rank], RadarScr.xUi + 39 - 5 + 14, RadarScr.yText + 12, 0);
			}
			g.setClip(RadarScr.xText, RadarScr.yText, RadarScr.wText + 5, RadarScr.hText + 8);
			bool flag2 = this.focus_card != null;
			if (flag2)
			{
				g.drawImage(RadarScr.imgUIText, RadarScr.xText, RadarScr.yText, 0);
			}
			GameScr.resetTranslate(g);
			g.setClip(RadarScr.xText, RadarScr.yText + 1, RadarScr.wText, RadarScr.hText + 5);
			bool flag3 = this.focus_card != null && this.focus_card.cp != null;
			if (flag3)
			{
				bool flag4 = this.focus_card.cp.says == null;
				if (flag4)
				{
					return;
				}
				this.focus_card.cp.paintRada(g, RadarScr.cmyText);
			}
			GameScr.resetTranslate(g);
			bool flag5 = (!RadarScr.TYPE_UI && RadarScr.listUse.size() > 5) || RadarScr.TYPE_UI;
			if (flag5)
			{
				bool flag6 = this.page > 1;
				if (flag6)
				{
					g.drawImage(RadarScr.imgArrow_Left, RadarScr.xyArrow[0][0], RadarScr.xyArrow[0][1] + this.dxArrow[0], 0);
				}
				bool flag7 = this.page < this.maxpage;
				if (flag7)
				{
					g.drawImage(RadarScr.imgArrow_Right, RadarScr.xyArrow[2][0], RadarScr.xyArrow[2][1] + this.dxArrow[1], 0);
				}
			}
			for (int i = 0; i < RadarScr.index.Length; i++)
			{
				int num = 0;
				int num2 = 0;
				int idx = 0;
				bool flag8 = i == this.indexFocus;
				if (flag8)
				{
					num = this.dyArrow;
					num2 = -10;
					idx = 1;
					g.drawImage(RadarScr.imgArrow_Down, RadarScr.xyItem[i][0] + 10, RadarScr.xyItem[i][1] + this.dyArrow + 29 + num2, 0);
				}
				Info_RadaScr info = Info_RadaScr.GetInfo(RadarScr.listUse, RadarScr.index[i]);
				bool type_UI2 = RadarScr.TYPE_UI;
				if (type_UI2)
				{
					info = Info_RadaScr.GetInfo(RadarScr.list, RadarScr.index[i]);
				}
				bool flag9 = info != null;
				if (flag9)
				{
					RadarScr.fraImgFocus.drawFrame((int)info.rank, RadarScr.xyItem[i][0], RadarScr.xyItem[i][1] + num + num2, 0, 0, g);
					SmallImage.drawSmallImage(g, info.idIcon, RadarScr.xyItem[i][0] + 14, RadarScr.xyItem[i][1] + 14 + num + num2, 0, StaticObj.VCENTER_HCENTER);
					info.paintEff(g, RadarScr.xyItem[i][0], RadarScr.xyItem[i][1] + num + num2);
					bool flag10 = info.level == 0;
					if (flag10)
					{
						g.drawImage(RadarScr.imgLock, RadarScr.xyItem[i][0], RadarScr.xyItem[i][1] + num + num2, 0);
					}
					bool flag11 = i == this.indexFocus;
					if (flag11)
					{
						RadarScr.fraImgFocus.drawFrame(7, RadarScr.xyItem[i][0], RadarScr.xyItem[i][1] + num + num2, 0, 0, g);
					}
					bool flag12 = info.isUse == 1;
					if (flag12)
					{
						RadarScr.fraImgFocus.drawFrame(8, RadarScr.xyItem[i][0], RadarScr.xyItem[i][1] + num + num2, 0, 0, g);
					}
				}
				else
				{
					RadarScr.fraImgFocusNone.drawFrame(idx, RadarScr.xyItem[i][0] - 1, RadarScr.xyItem[i][1] - 1 + num + num2, 0, 0, g);
				}
			}
		}
		catch (Exception ex)
		{
			Debug.LogError("-pnt-radaScr-null: " + ex.ToString());
		}
	}

	// Token: 0x06000956 RID: 2390 RVA: 0x0009E20C File Offset: 0x0009C40C
	public override void switchToMe()
	{
		GameScr.isPaintOther = true;
		base.switchToMe();
	}

	// Token: 0x04001162 RID: 4450
	public const sbyte SUBCMD_ALL = 0;

	// Token: 0x04001163 RID: 4451
	public const sbyte SUBCMD_USE = 1;

	// Token: 0x04001164 RID: 4452
	public const sbyte SUBCMD_LEVEL = 2;

	// Token: 0x04001165 RID: 4453
	public const sbyte SUBCMD_AMOUNT = 3;

	// Token: 0x04001166 RID: 4454
	public const sbyte SUBCMD_AURA = 4;

	// Token: 0x04001167 RID: 4455
	public static RadarScr instance;

	// Token: 0x04001168 RID: 4456
	public static bool TYPE_UI;

	// Token: 0x04001169 RID: 4457
	public static FrameImage fraImgFocus;

	// Token: 0x0400116A RID: 4458
	public static FrameImage fraImgFocusNone;

	// Token: 0x0400116B RID: 4459
	public static FrameImage fraEff;

	// Token: 0x0400116C RID: 4460
	private static Image imgUI;

	// Token: 0x0400116D RID: 4461
	private static Image imgUIText;

	// Token: 0x0400116E RID: 4462
	private static Image imgArrow_Left;

	// Token: 0x0400116F RID: 4463
	private static Image imgArrow_Right;

	// Token: 0x04001170 RID: 4464
	private static Image imgArrow_Down;

	// Token: 0x04001171 RID: 4465
	private static Image imgLock;

	// Token: 0x04001172 RID: 4466
	private static Image imgUse_0;

	// Token: 0x04001173 RID: 4467
	private static Image imgUse;

	// Token: 0x04001174 RID: 4468
	private static Image imgBack;

	// Token: 0x04001175 RID: 4469
	private static Image imgChange;

	// Token: 0x04001176 RID: 4470
	private static Image imgBar_0;

	// Token: 0x04001177 RID: 4471
	private static Image imgBar_1;

	// Token: 0x04001178 RID: 4472
	private static Image imgPro_0;

	// Token: 0x04001179 RID: 4473
	private static Image imgPro_1;

	// Token: 0x0400117A RID: 4474
	private static Image[] imgRank;

	// Token: 0x0400117B RID: 4475
	public static int xUi;

	// Token: 0x0400117C RID: 4476
	public static int yUi;

	// Token: 0x0400117D RID: 4477
	public static int wUi;

	// Token: 0x0400117E RID: 4478
	public static int hUi;

	// Token: 0x0400117F RID: 4479
	public static int xMon;

	// Token: 0x04001180 RID: 4480
	public static int yMon;

	// Token: 0x04001181 RID: 4481
	public static int xText;

	// Token: 0x04001182 RID: 4482
	public static int yText;

	// Token: 0x04001183 RID: 4483
	public static int wText;

	// Token: 0x04001184 RID: 4484
	public static int cmyText;

	// Token: 0x04001185 RID: 4485
	public static int hText;

	// Token: 0x04001186 RID: 4486
	public static int yCmd;

	// Token: 0x04001187 RID: 4487
	public static int[] xCmd = new int[0];

	// Token: 0x04001188 RID: 4488
	public static int[] dxCmd = new int[0];

	// Token: 0x04001189 RID: 4489
	private static int[][] xyArrow;

	// Token: 0x0400118A RID: 4490
	private static int[][] xyItem;

	// Token: 0x0400118B RID: 4491
	private static int[] index = new int[]
	{
		-2,
		-1,
		0,
		1,
		2
	};

	// Token: 0x0400118C RID: 4492
	private int dyArrow;

	// Token: 0x0400118D RID: 4493
	private int[] dxArrow;

	// Token: 0x0400118E RID: 4494
	private int page;

	// Token: 0x0400118F RID: 4495
	private int maxpage;

	// Token: 0x04001190 RID: 4496
	private int indexFocus;

	// Token: 0x04001191 RID: 4497
	public static MyVector list;

	// Token: 0x04001192 RID: 4498
	public static MyVector listUse;

	// Token: 0x04001193 RID: 4499
	private static int num;

	// Token: 0x04001194 RID: 4500
	private static int numMax;

	// Token: 0x04001195 RID: 4501
	private Info_RadaScr focus_card;

	// Token: 0x04001196 RID: 4502
	private int pxx;

	// Token: 0x04001197 RID: 4503
	private int pyy;

	// Token: 0x04001198 RID: 4504
	private int xClip;

	// Token: 0x04001199 RID: 4505
	private int wClip;

	// Token: 0x0400119A RID: 4506
	private int yClip;

	// Token: 0x0400119B RID: 4507
	private int hClip;
}
using System;
using UnityEngine;

// Token: 0x020000B2 RID: 178
public class Res
{
	// Token: 0x06000958 RID: 2392 RVA: 0x0009E24C File Offset: 0x0009C44C
	public static void init()
	{
		Res.cosz = new short[91];
		Res.tanz = new int[91];
		for (int i = 0; i <= 90; i++)
		{
			Res.cosz[i] = Res.sinz[90 - i];
			bool flag = Res.cosz[i] == 0;
			if (flag)
			{
				Res.tanz[i] = int.MaxValue;
			}
			else
			{
				Res.tanz[i] = ((int)Res.sinz[i] << 10) / (int)Res.cosz[i];
			}
		}
	}

	// Token: 0x06000959 RID: 2393 RVA: 0x0009E2D4 File Offset: 0x0009C4D4
	public static int sin(int a)
	{
		a = Res.fixangle(a);
		bool flag = a >= 0 && a < 90;
		int result;
		if (flag)
		{
			result = (int)Res.sinz[a];
		}
		else
		{
			bool flag2 = a >= 90 && a < 180;
			if (flag2)
			{
				result = (int)Res.sinz[180 - a];
			}
			else
			{
				bool flag3 = a >= 180 && a < 270;
				if (flag3)
				{
					result = (int)(-(int)Res.sinz[a - 180]);
				}
				else
				{
					result = (int)(-(int)Res.sinz[360 - a]);
				}
			}
		}
		return result;
	}

	// Token: 0x0600095A RID: 2394 RVA: 0x0009E368 File Offset: 0x0009C568
	public static int cos(int a)
	{
		a = Res.fixangle(a);
		bool flag = a >= 0 && a < 90;
		int result;
		if (flag)
		{
			result = (int)Res.cosz[a];
		}
		else
		{
			bool flag2 = a >= 90 && a < 180;
			if (flag2)
			{
				result = (int)(-(int)Res.cosz[180 - a]);
			}
			else
			{
				bool flag3 = a >= 180 && a < 270;
				if (flag3)
				{
					result = (int)(-(int)Res.cosz[a - 180]);
				}
				else
				{
					result = (int)Res.cosz[360 - a];
				}
			}
		}
		return result;
	}

	// Token: 0x0600095B RID: 2395 RVA: 0x0009E3FC File Offset: 0x0009C5FC
	public static int tan(int a)
	{
		a = Res.fixangle(a);
		bool flag = a >= 0 && a < 90;
		int result;
		if (flag)
		{
			result = Res.tanz[a];
		}
		else
		{
			bool flag2 = a >= 90 && a < 180;
			if (flag2)
			{
				result = -Res.tanz[180 - a];
			}
			else
			{
				bool flag3 = a >= 180 && a < 270;
				if (flag3)
				{
					result = Res.tanz[a - 180];
				}
				else
				{
					result = -Res.tanz[360 - a];
				}
			}
		}
		return result;
	}

	// Token: 0x0600095C RID: 2396 RVA: 0x0009E490 File Offset: 0x0009C690
	public static int atan(int a)
	{
		for (int i = 0; i <= 90; i++)
		{
			bool flag = Res.tanz[i] >= a;
			if (flag)
			{
				return i;
			}
		}
		return 0;
	}

	// Token: 0x0600095D RID: 2397 RVA: 0x0009E4D0 File Offset: 0x0009C6D0
	public static int angle(int dx, int dy)
	{
		bool flag = dx != 0;
		int num;
		if (flag)
		{
			int a = global::Math.abs((dy << 10) / dx);
			num = Res.atan(a);
			bool flag2 = dy >= 0 && dx < 0;
			if (flag2)
			{
				num = 180 - num;
			}
			bool flag3 = dy < 0 && dx < 0;
			if (flag3)
			{
				num = 180 + num;
			}
			bool flag4 = dy < 0 && dx >= 0;
			if (flag4)
			{
				num = 360 - num;
			}
		}
		else
		{
			num = ((dy <= 0) ? 270 : 90);
		}
		return num;
	}

	// Token: 0x0600095E RID: 2398 RVA: 0x0009E568 File Offset: 0x0009C768
	public static int fixangle(int angle)
	{
		bool flag = angle >= 360;
		if (flag)
		{
			angle -= 360;
		}
		bool flag2 = angle < 0;
		if (flag2)
		{
			angle += 360;
		}
		return angle;
	}

	// Token: 0x0600095F RID: 2399 RVA: 0x0009E5A8 File Offset: 0x0009C7A8
	public static sbyte[] TakeSnapShot()
	{
		return null;
	}

	// Token: 0x06000960 RID: 2400 RVA: 0x0009E5BC File Offset: 0x0009C7BC
	public static void outz(string s)
	{
		bool isTest = mSystem.isTest;
		if (isTest)
		{
			Debug.Log(s);
		}
	}

	// Token: 0x06000961 RID: 2401 RVA: 0x0009E5DC File Offset: 0x0009C7DC
	public static void outz(string s, int logIndex)
	{
		bool isTest = mSystem.isTest;
		if (isTest)
		{
			Debug.Log(Res.LOG_CAT[logIndex] + s);
		}
	}

	// Token: 0x06000962 RID: 2402 RVA: 0x0009E608 File Offset: 0x0009C808
	public static void err(string s)
	{
		bool isTest = mSystem.isTest;
		if (isTest)
		{
			Debug.LogError(s);
		}
	}

	// Token: 0x06000963 RID: 2403 RVA: 0x0009E628 File Offset: 0x0009C828
	public static void outz2(string s)
	{
	}

	// Token: 0x06000964 RID: 2404 RVA: 0x0009E62B File Offset: 0x0009C82B
	public static void onScreenDebug(string s)
	{
	}

	// Token: 0x06000965 RID: 2405 RVA: 0x0009E62E File Offset: 0x0009C82E
	public static void paintOnScreenDebug(mGraphics g)
	{
	}

	// Token: 0x06000966 RID: 2406 RVA: 0x0009E631 File Offset: 0x0009C831
	public static void updateOnScreenDebug()
	{
	}

	// Token: 0x06000967 RID: 2407 RVA: 0x0009E634 File Offset: 0x0009C834
	public static string changeString(string str)
	{
		return str;
	}

	// Token: 0x06000968 RID: 2408 RVA: 0x0009E648 File Offset: 0x0009C848
	public static string replace(string _text, string _searchStr, string _replacementStr)
	{
		return _text.Replace(_searchStr, _replacementStr);
	}

	// Token: 0x06000969 RID: 2409 RVA: 0x0009E664 File Offset: 0x0009C864
	public static int xetVX(int goc, int d)
	{
		return Res.cos(Res.fixangle(goc)) * d >> 10;
	}

	// Token: 0x0600096A RID: 2410 RVA: 0x0009E688 File Offset: 0x0009C888
	public static int xetVY(int goc, int d)
	{
		return Res.sin(Res.fixangle(goc)) * d >> 10;
	}

	// Token: 0x0600096B RID: 2411 RVA: 0x0009E6AC File Offset: 0x0009C8AC
	public static int random(int a, int b)
	{
		bool flag = a == b;
		int result;
		if (flag)
		{
			result = a;
		}
		else
		{
			result = a + Res.r.nextInt(b - a);
		}
		return result;
	}

	// Token: 0x0600096C RID: 2412 RVA: 0x0009E6DC File Offset: 0x0009C8DC
	public static int random(int a)
	{
		return Res.r.nextInt(a);
	}

	// Token: 0x0600096D RID: 2413 RVA: 0x0009E6FC File Offset: 0x0009C8FC
	public static int random_Am(int a, int b)
	{
		int num = a + Res.r.nextInt(b - a);
		bool flag = Res.random(2) == 0;
		if (flag)
		{
			num = -num;
		}
		return num;
	}

	// Token: 0x0600096E RID: 2414 RVA: 0x0009E734 File Offset: 0x0009C934
	public static int random_Am_0(int a)
	{
		int num;
		for (num = 0; num == 0; num = Res.r.nextInt() % a)
		{
		}
		return num;
	}

	// Token: 0x0600096F RID: 2415 RVA: 0x0009E764 File Offset: 0x0009C964
	public static int s2tick(int currentTimeMillis)
	{
		int num = currentTimeMillis * 16 / 1000;
		bool flag = currentTimeMillis * 16 % 1000 >= 5;
		if (flag)
		{
			num++;
		}
		return num;
	}

	// Token: 0x06000970 RID: 2416 RVA: 0x0009E7A0 File Offset: 0x0009C9A0
	public static int distance(int x1, int y1, int x2, int y2)
	{
		return Res.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	}

	// Token: 0x06000971 RID: 2417 RVA: 0x0009E7C8 File Offset: 0x0009C9C8
	public static int getDistance(int x, int y)
	{
		return Res.sqrt(x * x + y * y);
	}

	// Token: 0x06000972 RID: 2418 RVA: 0x0009E7E8 File Offset: 0x0009C9E8
	public static int sqrt(int a)
	{
		bool flag = a <= 0;
		int result;
		if (flag)
		{
			result = 0;
		}
		else
		{
			int num = (a + 1) / 2;
			int num2;
			do
			{
				num2 = num;
				num = num / 2 + a / (2 * num);
			}
			while (global::Math.abs(num2 - num) > 1);
			result = num;
		}
		return result;
	}

	// Token: 0x06000973 RID: 2419 RVA: 0x0009E830 File Offset: 0x0009CA30
	public static int rnd(int a)
	{
		return Res.r.nextInt(a);
	}

	// Token: 0x06000974 RID: 2420 RVA: 0x0009E850 File Offset: 0x0009CA50
	public static int abs(int i)
	{
		return (i <= 0) ? (-i) : i;
	}

	// Token: 0x06000975 RID: 2421 RVA: 0x0009E86C File Offset: 0x0009CA6C
	public static bool inRect(int x1, int y1, int width, int height, int x2, int y2)
	{
		return x2 >= x1 && x2 <= x1 + width && y2 >= y1 && y2 <= y1 + height;
	}

	// Token: 0x06000976 RID: 2422 RVA: 0x0009E89C File Offset: 0x0009CA9C
	public static string[] split(string original, string separator, int count)
	{
		int num = original.IndexOf(separator);
		bool flag = num >= 0;
		string[] array;
		if (flag)
		{
			array = Res.split(original.Substring(num + separator.Length), separator, count + 1);
		}
		else
		{
			array = new string[count + 1];
			num = original.Length;
		}
		array[count] = original.Substring(0, num);
		return array;
	}

	// Token: 0x06000977 RID: 2423 RVA: 0x0009E8FC File Offset: 0x0009CAFC
	public static string formatNumber(long number)
	{
		string text = string.Empty;
		string text2 = string.Empty;
		text = string.Empty;
		bool flag = number >= 1000000000L;
		string result;
		if (flag)
		{
			text2 = mResources.billion;
			long num = number % 1000000000L / 100000000L;
			number /= 1000000000L;
			text = number.ToString() + string.Empty;
			bool flag2 = num > 0L;
			if (flag2)
			{
				string str = text;
				result = str + "," + num.ToString() + text2;
			}
			else
			{
				result = text + text2;
			}
		}
		else
		{
			bool flag3 = number >= 1000000L;
			if (flag3)
			{
				text2 = mResources.million;
				long num2 = number % 1000000L / 100000L;
				number /= 1000000L;
				text = number.ToString() + string.Empty;
				bool flag4 = num2 > 0L;
				if (flag4)
				{
					string str2 = text;
					result = str2 + "," + num2.ToString() + text2;
				}
				else
				{
					result = text + text2;
				}
			}
			else
			{
				result = number.ToString() + string.Empty;
			}
		}
		return result;
	}

	// Token: 0x06000978 RID: 2424 RVA: 0x0009EA28 File Offset: 0x0009CC28
	public static string formatNumber2(long number)
	{
		string text = string.Empty;
		string text2 = string.Empty;
		text = string.Empty;
		bool flag = number >= 1000000000L;
		string result;
		if (flag)
		{
			text2 = mResources.billion;
			long num = number % 1000000000L / 10000000L;
			number /= 1000000000L;
			text = number.ToString() + string.Empty;
			bool flag2 = num >= 10L;
			if (flag2)
			{
				bool flag3 = num % 10L == 0L;
				if (flag3)
				{
					num /= 10L;
				}
				string str = text;
				result = str + "," + num.ToString() + text2;
			}
			else
			{
				bool flag4 = num > 0L;
				if (flag4)
				{
					string str2 = text;
					result = str2 + ",0" + num.ToString() + text2;
				}
				else
				{
					result = text + text2;
				}
			}
		}
		else
		{
			bool flag5 = number >= 1000000L;
			if (flag5)
			{
				text2 = mResources.million;
				long num2 = number % 1000000L / 10000L;
				number /= 1000000L;
				text = number.ToString() + string.Empty;
				bool flag6 = num2 >= 10L;
				if (flag6)
				{
					bool flag7 = num2 % 10L == 0L;
					if (flag7)
					{
						num2 /= 10L;
					}
					string str3 = text;
					result = str3 + "," + num2.ToString() + text2;
				}
				else
				{
					bool flag8 = num2 > 0L;
					if (flag8)
					{
						string str4 = text;
						result = str4 + ",0" + num2.ToString() + text2;
					}
					else
					{
						result = text + text2;
					}
				}
			}
			else
			{
				bool flag9 = number >= 10000L;
				if (flag9)
				{
					text2 = "k";
					long num3 = number % 1000L / 10L;
					number /= 1000L;
					text = number.ToString() + string.Empty;
					bool flag10 = num3 >= 10L;
					if (flag10)
					{
						bool flag11 = num3 % 10L == 0L;
						if (flag11)
						{
							num3 /= 10L;
						}
						string str5 = text;
						result = str5 + "," + num3.ToString() + text2;
					}
					else
					{
						bool flag12 = num3 > 0L;
						if (flag12)
						{
							string str6 = text;
							result = str6 + ",0" + num3.ToString() + text2;
						}
						else
						{
							result = text + text2;
						}
					}
				}
				else
				{
					result = number.ToString() + string.Empty;
				}
			}
		}
		return result;
	}

	// Token: 0x0400119C RID: 4508
	private static short[] sinz = new short[]
	{
		0,
		18,
		36,
		54,
		71,
		89,
		107,
		125,
		143,
		160,
		178,
		195,
		213,
		230,
		248,
		265,
		282,
		299,
		316,
		333,
		350,
		367,
		384,
		400,
		416,
		433,
		449,
		465,
		481,
		496,
		512,
		527,
		543,
		558,
		573,
		587,
		602,
		616,
		630,
		644,
		658,
		672,
		685,
		698,
		711,
		724,
		737,
		749,
		761,
		773,
		784,
		796,
		807,
		818,
		828,
		839,
		849,
		859,
		868,
		878,
		887,
		896,
		904,
		912,
		920,
		928,
		935,
		943,
		949,
		956,
		962,
		968,
		974,
		979,
		984,
		989,
		994,
		998,
		1002,
		1005,
		1008,
		1011,
		1014,
		1016,
		1018,
		1020,
		1022,
		1023,
		1023,
		1024,
		1024
	};

	// Token: 0x0400119D RID: 4509
	private static short[] cosz;

	// Token: 0x0400119E RID: 4510
	private static int[] tanz;

	// Token: 0x0400119F RID: 4511
	public static string[] LOG_CAT = new string[]
	{
		"<color=#ff0000ff>[  LOG_CAT  ]</color>",
		"<color=#ff0000ff>[LOG_SESSION]</color>",
		"<color=#ffff00ff>[LOG_SESSION]</color>",
		"<color=#ff0000ff>[LOG_MOBILE ]</color>",
		string.Empty
	};

	// Token: 0x040011A0 RID: 4512
	public static int count;

	// Token: 0x040011A1 RID: 4513
	public static bool isIcon;

	// Token: 0x040011A2 RID: 4514
	public static bool isBig;

	// Token: 0x040011A3 RID: 4515
	public static MyVector debug = new MyVector();

	// Token: 0x040011A4 RID: 4516
	public static MyRandom r = new MyRandom();
}
using System;
using System.IO;
using System.Threading;
using UnityEngine;

// Token: 0x020000B3 RID: 179
public class Rms
{
	// Token: 0x0600097B RID: 2427 RVA: 0x0009ED24 File Offset: 0x0009CF24
	public static void saveRMS(string filename, sbyte[] data)
	{
		bool flag = Thread.CurrentThread.Name == Main.mainThreadName;
		if (flag)
		{
			Rms.__saveRMS(filename, data);
		}
		else
		{
			Rms._saveRMS(filename, data);
		}
	}

	// Token: 0x0600097C RID: 2428 RVA: 0x0009ED60 File Offset: 0x0009CF60
	public static sbyte[] loadRMS(string filename)
	{
		bool flag = Thread.CurrentThread.Name == Main.mainThreadName;
		sbyte[] result;
		if (flag)
		{
			result = Rms.__loadRMS(filename);
		}
		else
		{
			result = Rms._loadRMS(filename);
		}
		return result;
	}

	// Token: 0x0600097D RID: 2429 RVA: 0x0009ED9C File Offset: 0x0009CF9C
	public static string loadRMSString(string fileName)
	{
		sbyte[] array = Rms.loadRMS(fileName);
		bool flag = array == null;
		string result;
		if (flag)
		{
			result = null;
		}
		else
		{
			DataInputStream dataInputStream = new DataInputStream(array);
			try
			{
				string result2 = dataInputStream.readUTF();
				dataInputStream.close();
				return result2;
			}
			catch (Exception ex)
			{
				Cout.println(ex.StackTrace);
			}
			result = null;
		}
		return result;
	}

	// Token: 0x0600097E RID: 2430 RVA: 0x0009EE04 File Offset: 0x0009D004
	public static byte[] convertSbyteToByte(sbyte[] var)
	{
		byte[] array = new byte[var.Length];
		for (int i = 0; i < var.Length; i++)
		{
			bool flag = var[i] > 0;
			if (flag)
			{
				array[i] = (byte)var[i];
			}
			else
			{
				array[i] = (byte)((int)var[i] + 256);
			}
		}
		return array;
	}

	// Token: 0x0600097F RID: 2431 RVA: 0x0009EE5C File Offset: 0x0009D05C
	public static void saveRMSString(string filename, string data)
	{
		DataOutputStream dataOutputStream = new DataOutputStream();
		try
		{
			dataOutputStream.writeUTF(data);
			Rms.saveRMS(filename, dataOutputStream.toByteArray());
			dataOutputStream.close();
		}
		catch (Exception ex)
		{
			Cout.println(ex.StackTrace);
		}
	}

	// Token: 0x06000980 RID: 2432 RVA: 0x0009EEB4 File Offset: 0x0009D0B4
	private static void _saveRMS(string filename, sbyte[] data)
	{
		bool flag = Rms.status != 0;
		if (flag)
		{
			Debug.LogError("Cannot save RMS " + filename + " because current is saving " + Rms.filename);
		}
		else
		{
			Rms.filename = filename;
			Rms.data = data;
			Rms.status = 2;
			int i;
			for (i = 0; i < 500; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Rms.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 500;
			if (flag3)
			{
				Debug.LogError("TOO LONG TO SAVE RMS " + filename);
			}
		}
	}

	// Token: 0x06000981 RID: 2433 RVA: 0x0009EF4C File Offset: 0x0009D14C
	private static sbyte[] _loadRMS(string filename)
	{
		bool flag = Rms.status != 0;
		sbyte[] result;
		if (flag)
		{
			Debug.LogError("Cannot load RMS " + filename + " because current is loading " + Rms.filename);
			result = null;
		}
		else
		{
			Rms.filename = filename;
			Rms.data = null;
			Rms.status = 3;
			int i;
			for (i = 0; i < 500; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Rms.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 500;
			if (flag3)
			{
				Debug.LogError("TOO LONG TO LOAD RMS " + filename);
			}
			result = Rms.data;
		}
		return result;
	}

	// Token: 0x06000982 RID: 2434 RVA: 0x0009EFF0 File Offset: 0x0009D1F0
	public static void update()
	{
		bool flag = Rms.status == 2;
		if (flag)
		{
			Rms.status = 1;
			Rms.__saveRMS(Rms.filename, Rms.data);
			Rms.status = 0;
		}
		else
		{
			bool flag2 = Rms.status == 3;
			if (flag2)
			{
				Rms.status = 1;
				Rms.data = Rms.__loadRMS(Rms.filename);
				Rms.status = 0;
			}
		}
	}

	// Token: 0x06000983 RID: 2435 RVA: 0x0009F054 File Offset: 0x0009D254
	public static int loadRMSInt(string file)
	{
		sbyte[] array = Rms.loadRMS(file);
		return (int)((array != null) ? array[0] : -1);
	}

	// Token: 0x06000984 RID: 2436 RVA: 0x0009F078 File Offset: 0x0009D278
	public static void saveRMSInt(string file, int x)
	{
		try
		{
			Rms.saveRMS(file, new sbyte[]
			{
				(sbyte)x
			});
			bool flag = file == ServerListScreen.RMS_svselect;
			if (flag)
			{
				Debug.LogError(">>>>>>>>Save saveRMSInt: " + file + "  index:" + x.ToString());
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000985 RID: 2437 RVA: 0x0009F0E0 File Offset: 0x0009D2E0
	public static string GetiPhoneDocumentsPath()
	{
		return Application.persistentDataPath;
	}

	// Token: 0x06000986 RID: 2438 RVA: 0x0009F0F8 File Offset: 0x0009D2F8
	private static void __saveRMS(string filename, sbyte[] data)
	{
		string text = Rms.GetiPhoneDocumentsPath() + "/" + filename;
		FileStream fileStream = new FileStream(text, FileMode.Create);
		fileStream.Write(ArrayCast.cast(data), 0, data.Length);
		fileStream.Flush();
		fileStream.Close();
		Main.setBackupIcloud(text);
	}

	// Token: 0x06000987 RID: 2439 RVA: 0x0009F148 File Offset: 0x0009D348
	private static sbyte[] __loadRMS(string filename)
	{
		sbyte[] result;
		try
		{
			FileStream fileStream = new FileStream(Rms.GetiPhoneDocumentsPath() + "/" + filename, FileMode.Open);
			byte[] array = new byte[fileStream.Length];
			fileStream.Read(array, 0, array.Length);
			fileStream.Close();
			sbyte[] array2 = ArrayCast.cast(array);
			result = ArrayCast.cast(array);
		}
		catch (Exception)
		{
			result = null;
		}
		return result;
	}

	// Token: 0x06000988 RID: 2440 RVA: 0x0009F1B8 File Offset: 0x0009D3B8
	public static void clearAll()
	{
		Cout.LogError3("clean rms");
		FileInfo[] files = new DirectoryInfo(Rms.GetiPhoneDocumentsPath() + "/").GetFiles();
		foreach (FileInfo fileInfo in files)
		{
			fileInfo.Delete();
		}
	}

	// Token: 0x06000989 RID: 2441 RVA: 0x0009F20C File Offset: 0x0009D40C
	public static void DeleteStorage(string path)
	{
		try
		{
			File.Delete(Rms.GetiPhoneDocumentsPath() + "/" + path);
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x0600098A RID: 2442 RVA: 0x0009F24C File Offset: 0x0009D44C
	public static string ByteArrayToString(byte[] ba)
	{
		string text = BitConverter.ToString(ba);
		return text.Replace("-", string.Empty);
	}

	// Token: 0x0600098B RID: 2443 RVA: 0x0009F278 File Offset: 0x0009D478
	public static byte[] StringToByteArray(string hex)
	{
		int length = hex.Length;
		byte[] array = new byte[length / 2];
		for (int i = 0; i < length; i += 2)
		{
			array[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
		}
		return array;
	}

	// Token: 0x0600098C RID: 2444 RVA: 0x0009F2C4 File Offset: 0x0009D4C4
	public static void deleteRecord(string name)
	{
		try
		{
			PlayerPrefs.DeleteKey(name);
		}
		catch (Exception ex)
		{
			Cout.println("loi xoa RMS --------------------------" + ex.ToString());
		}
	}

	// Token: 0x0600098D RID: 2445 RVA: 0x0009F308 File Offset: 0x0009D508
	public static void clearRMS()
	{
		Rms.deleteRecord("data");
		Rms.deleteRecord("dataVersion");
		Rms.deleteRecord("map");
		Rms.deleteRecord("mapVersion");
		Rms.deleteRecord("skill");
		Rms.deleteRecord("killVersion");
		Rms.deleteRecord("item");
		Rms.deleteRecord("itemVersion");
	}

	// Token: 0x0600098E RID: 2446 RVA: 0x0009F36E File Offset: 0x0009D56E
	public static void saveIP(string strID)
	{
		Rms.saveRMSString("NRIPlink", strID);
	}

	// Token: 0x0600098F RID: 2447 RVA: 0x0009F380 File Offset: 0x0009D580
	public static string loadIP()
	{
		string text = Rms.loadRMSString("NRIPlink");
		bool flag = text == null;
		string result;
		if (flag)
		{
			result = null;
		}
		else
		{
			result = text;
		}
		return result;
	}

	// Token: 0x040011A5 RID: 4517
	public static int status;

	// Token: 0x040011A6 RID: 4518
	public static sbyte[] data;

	// Token: 0x040011A7 RID: 4519
	public static string filename;

	// Token: 0x040011A8 RID: 4520
	private const int INTERVAL = 5;

	// Token: 0x040011A9 RID: 4521
	private const int MAXTIME = 500;
}
using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x020000B4 RID: 180
public class ScaleGUI
{
	// Token: 0x06000991 RID: 2449 RVA: 0x0009F3B4 File Offset: 0x0009D5B4
	public static void initScaleGUI()
	{
		Cout.println("Init Scale GUI: Screen.w=" + Screen.width.ToString() + " Screen.h=" + Screen.height.ToString());
		ScaleGUI.WIDTH = (float)Screen.width;
		ScaleGUI.HEIGHT = (float)Screen.height;
		ScaleGUI.scaleScreen = false;
		bool flag = Screen.width <= 1200;
		if (flag)
		{
		}
	}

	// Token: 0x06000992 RID: 2450 RVA: 0x0009F424 File Offset: 0x0009D624
	public static void BeginGUI()
	{
		bool flag = ScaleGUI.scaleScreen;
		if (flag)
		{
			ScaleGUI.stack.Add(GUI.matrix);
			Matrix4x4 rhs = default(Matrix4x4);
			float num = (float)Screen.width;
			float num2 = (float)Screen.height;
			float num3 = num / num2;
			Vector3 zero = Vector3.zero;
			float d = (num3 >= ScaleGUI.WIDTH / ScaleGUI.HEIGHT) ? ((float)Screen.height / ScaleGUI.HEIGHT) : ((float)Screen.width / ScaleGUI.WIDTH);
			rhs.SetTRS(zero, Quaternion.identity, Vector3.one * d);
			GUI.matrix *= rhs;
		}
	}

	// Token: 0x06000993 RID: 2451 RVA: 0x0009F4D0 File Offset: 0x0009D6D0
	public static void EndGUI()
	{
		bool flag = ScaleGUI.scaleScreen;
		if (flag)
		{
			GUI.matrix = ScaleGUI.stack[ScaleGUI.stack.Count - 1];
			ScaleGUI.stack.RemoveAt(ScaleGUI.stack.Count - 1);
		}
	}

	// Token: 0x06000994 RID: 2452 RVA: 0x0009F51C File Offset: 0x0009D71C
	public static float scaleX(float x)
	{
		bool flag = !ScaleGUI.scaleScreen;
		float result;
		if (flag)
		{
			result = x;
		}
		else
		{
			x = x * ScaleGUI.WIDTH / (float)Screen.width;
			result = x;
		}
		return result;
	}

	// Token: 0x06000995 RID: 2453 RVA: 0x0009F550 File Offset: 0x0009D750
	public static float scaleY(float y)
	{
		bool flag = !ScaleGUI.scaleScreen;
		float result;
		if (flag)
		{
			result = y;
		}
		else
		{
			y = y * ScaleGUI.HEIGHT / (float)Screen.height;
			result = y;
		}
		return result;
	}

	// Token: 0x040011AA RID: 4522
	public static bool scaleScreen;

	// Token: 0x040011AB RID: 4523
	public static float WIDTH;

	// Token: 0x040011AC RID: 4524
	public static float HEIGHT;

	// Token: 0x040011AD RID: 4525
	private static List<Matrix4x4> stack = new List<Matrix4x4>();
}
using System;

// Token: 0x020000B5 RID: 181
public class Scroll
{
	// Token: 0x06000998 RID: 2456 RVA: 0x0009F59C File Offset: 0x0009D79C
	public void clear()
	{
		this.cmtoX = 0;
		this.cmtoY = 0;
		this.cmx = 0;
		this.cmy = 0;
		this.cmvx = 0;
		this.cmvy = 0;
		this.cmdx = 0;
		this.cmdy = 0;
		this.cmxLim = 0;
		this.cmyLim = 0;
		this.width = 0;
		this.height = 0;
	}

	// Token: 0x06000999 RID: 2457 RVA: 0x0009F600 File Offset: 0x0009D800
	public ScrollResult updateKey()
	{
		bool flag = this.styleUPDOWN;
		ScrollResult result;
		if (flag)
		{
			result = this.updateKeyScrollUpDown(false);
		}
		else
		{
			result = this.updateKeyScrollLeftRight();
		}
		return result;
	}

	// Token: 0x0600099A RID: 2458 RVA: 0x0009F630 File Offset: 0x0009D830
	public ScrollResult updateKey(bool isGetSelectNow)
	{
		bool flag = this.styleUPDOWN;
		ScrollResult result;
		if (flag)
		{
			result = this.updateKeyScrollUpDown(isGetSelectNow);
		}
		else
		{
			result = this.updateKeyScrollLeftRight();
		}
		return result;
	}

	// Token: 0x0600099B RID: 2459 RVA: 0x0009F660 File Offset: 0x0009D860
	private ScrollResult updateKeyScrollUpDown(bool isGetNow)
	{
		int num = this.xPos;
		int num2 = this.yPos;
		int w = this.width;
		int h = this.height;
		bool isPointerDown = GameCanvas.isPointerDown;
		if (isPointerDown)
		{
			bool flag = !this.pointerIsDowning && GameCanvas.isPointer(num, num2, w, h);
			if (flag)
			{
				for (int i = 0; i < this.pointerDownLastX.Length; i++)
				{
					this.pointerDownLastX[0] = GameCanvas.py;
				}
				this.pointerDownFirstX = GameCanvas.py;
				this.pointerIsDowning = true;
				bool flag2 = !isGetNow;
				if (flag2)
				{
					this.selectedItem = -1;
				}
				this.isDownWhenRunning = (this.cmRun != 0);
				this.cmRun = 0;
			}
			else
			{
				bool flag3 = this.pointerIsDowning;
				if (flag3)
				{
					this.pointerDownTime++;
					bool flag4 = this.pointerDownTime > 5 && this.pointerDownFirstX == GameCanvas.py && !this.isDownWhenRunning;
					if (flag4)
					{
						this.pointerDownFirstX = -1000;
						bool flag5 = this.ITEM_PER_LINE > 1;
						if (flag5)
						{
							int num3 = (this.cmtoY + GameCanvas.py - num2) / this.ITEM_SIZE;
							int num4 = (this.cmtoX + GameCanvas.px - num) / this.ITEM_SIZE;
							this.selectedItem = num3 * this.ITEM_PER_LINE + num4;
						}
						else
						{
							this.selectedItem = (this.cmtoY + GameCanvas.py - num2) / this.ITEM_SIZE;
						}
					}
					int num5 = GameCanvas.py - this.pointerDownLastX[0];
					bool flag6 = !isGetNow;
					if (flag6)
					{
						bool flag7 = num5 != 0 && this.selectedItem != -1;
						if (flag7)
						{
							this.selectedItem = -1;
						}
					}
					else
					{
						this.selectedItem = (this.cmtoY + GameCanvas.py - num2) / this.ITEM_SIZE;
					}
					for (int j = this.pointerDownLastX.Length - 1; j > 0; j--)
					{
						this.pointerDownLastX[j] = this.pointerDownLastX[j - 1];
					}
					this.pointerDownLastX[0] = GameCanvas.py;
					this.cmtoY -= num5;
					bool flag8 = this.cmtoY < 0;
					if (flag8)
					{
						this.cmtoY = 0;
					}
					bool flag9 = this.cmtoY > this.cmyLim;
					if (flag9)
					{
						this.cmtoY = this.cmyLim;
					}
					bool flag10 = this.cmy < 0 || this.cmy > this.cmyLim;
					if (flag10)
					{
						num5 /= 2;
					}
					this.cmy -= num5;
				}
			}
		}
		bool isFinish = false;
		bool flag11 = GameCanvas.isPointerJustRelease && this.pointerIsDowning;
		if (flag11)
		{
			int i2 = GameCanvas.py - this.pointerDownLastX[0];
			GameCanvas.isPointerJustRelease = false;
			bool flag12 = Res.abs(i2) < 20 && Res.abs(GameCanvas.py - this.pointerDownFirstX) < 20 && !this.isDownWhenRunning;
			if (flag12)
			{
				this.cmRun = 0;
				this.cmtoY = this.cmy;
				this.pointerDownFirstX = -1000;
				bool flag13 = this.ITEM_PER_LINE > 1;
				if (flag13)
				{
					int num6 = (this.cmtoY + GameCanvas.py - num2) / this.ITEM_SIZE;
					int num7 = (this.cmtoX + GameCanvas.px - num) / this.ITEM_SIZE;
					this.selectedItem = num6 * this.ITEM_PER_LINE + num7;
				}
				else
				{
					this.selectedItem = (this.cmtoY + GameCanvas.py - num2) / this.ITEM_SIZE;
				}
				this.pointerDownTime = 0;
				isFinish = true;
			}
			else
			{
				bool flag14 = this.selectedItem != -1 && this.pointerDownTime > 5;
				if (flag14)
				{
					this.pointerDownTime = 0;
					isFinish = true;
				}
				else
				{
					bool flag15 = (this.selectedItem == -1 && !this.isDownWhenRunning) || (isGetNow && this.selectedItem != -1 && !this.isDownWhenRunning);
					if (flag15)
					{
						bool flag16 = this.cmy < 0;
						if (flag16)
						{
							this.cmtoY = 0;
						}
						else
						{
							bool flag17 = this.cmy > this.cmyLim;
							if (flag17)
							{
								this.cmtoY = this.cmyLim;
							}
							else
							{
								int num8 = GameCanvas.py - this.pointerDownLastX[0] + (this.pointerDownLastX[0] - this.pointerDownLastX[1]) + (this.pointerDownLastX[1] - this.pointerDownLastX[2]);
								num8 = ((num8 > 10) ? 10 : ((num8 < -10) ? -10 : 0));
								this.cmRun = -num8 * 100;
							}
						}
					}
				}
			}
			this.pointerIsDowning = false;
			this.pointerDownTime = 0;
			GameCanvas.isPointerJustRelease = false;
		}
		return new ScrollResult
		{
			selected = this.selectedItem,
			isFinish = isFinish,
			isDowning = this.pointerIsDowning
		};
	}

	// Token: 0x0600099C RID: 2460 RVA: 0x0009FB50 File Offset: 0x0009DD50
	private ScrollResult updateKeyScrollLeftRight()
	{
		int num = this.xPos;
		int y = this.yPos;
		int w = this.width;
		int h = this.height;
		bool isPointerDown = GameCanvas.isPointerDown;
		if (isPointerDown)
		{
			bool flag = !this.pointerIsDowning && GameCanvas.isPointer(num, y, w, h);
			if (flag)
			{
				for (int i = 0; i < this.pointerDownLastX.Length; i++)
				{
					this.pointerDownLastX[0] = GameCanvas.px;
				}
				this.pointerDownFirstX = GameCanvas.px;
				this.pointerIsDowning = true;
				this.selectedItem = -1;
				this.isDownWhenRunning = (this.cmRun != 0);
				this.cmRun = 0;
			}
			else
			{
				bool flag2 = this.pointerIsDowning;
				if (flag2)
				{
					this.pointerDownTime++;
					bool flag3 = this.pointerDownTime > 5 && this.pointerDownFirstX == GameCanvas.px && !this.isDownWhenRunning;
					if (flag3)
					{
						this.pointerDownFirstX = -1000;
						this.selectedItem = (this.cmtoX + GameCanvas.px - num) / this.ITEM_SIZE;
					}
					int num2 = GameCanvas.px - this.pointerDownLastX[0];
					bool flag4 = num2 != 0 && this.selectedItem != -1;
					if (flag4)
					{
						this.selectedItem = -1;
					}
					for (int j = this.pointerDownLastX.Length - 1; j > 0; j--)
					{
						this.pointerDownLastX[j] = this.pointerDownLastX[j - 1];
					}
					this.pointerDownLastX[0] = GameCanvas.px;
					this.cmtoX -= num2;
					bool flag5 = this.cmtoX < 0;
					if (flag5)
					{
						this.cmtoX = 0;
					}
					bool flag6 = this.cmtoX > this.cmxLim;
					if (flag6)
					{
						this.cmtoX = this.cmxLim;
					}
					bool flag7 = this.cmx < 0 || this.cmx > this.cmxLim;
					if (flag7)
					{
						num2 /= 2;
					}
					this.cmx -= num2;
				}
			}
		}
		bool isFinish = false;
		bool flag8 = GameCanvas.isPointerJustRelease && this.pointerIsDowning;
		if (flag8)
		{
			int i2 = GameCanvas.px - this.pointerDownLastX[0];
			GameCanvas.isPointerJustRelease = false;
			bool flag9 = Res.abs(i2) < 20 && Res.abs(GameCanvas.px - this.pointerDownFirstX) < 20 && !this.isDownWhenRunning;
			if (flag9)
			{
				this.cmRun = 0;
				this.cmtoX = this.cmx;
				this.pointerDownFirstX = -1000;
				this.selectedItem = (this.cmtoX + GameCanvas.px - num) / this.ITEM_SIZE;
				this.pointerDownTime = 0;
				isFinish = true;
			}
			else
			{
				bool flag10 = this.selectedItem != -1 && this.pointerDownTime > 5;
				if (flag10)
				{
					this.pointerDownTime = 0;
					isFinish = true;
				}
				else
				{
					bool flag11 = this.selectedItem == -1 && !this.isDownWhenRunning;
					if (flag11)
					{
						bool flag12 = this.cmx < 0;
						if (flag12)
						{
							this.cmtoX = 0;
						}
						else
						{
							bool flag13 = this.cmx > this.cmxLim;
							if (flag13)
							{
								this.cmtoX = this.cmxLim;
							}
							else
							{
								int num3 = GameCanvas.px - this.pointerDownLastX[0] + (this.pointerDownLastX[0] - this.pointerDownLastX[1]) + (this.pointerDownLastX[1] - this.pointerDownLastX[2]);
								num3 = ((num3 > 10) ? 10 : ((num3 < -10) ? -10 : 0));
								this.cmRun = -num3 * 100;
							}
						}
					}
				}
			}
			this.pointerIsDowning = false;
			this.pointerDownTime = 0;
			GameCanvas.isPointerJustRelease = false;
		}
		return new ScrollResult
		{
			selected = this.selectedItem,
			isFinish = isFinish,
			isDowning = this.pointerIsDowning
		};
	}

	// Token: 0x0600099D RID: 2461 RVA: 0x0009FF44 File Offset: 0x0009E144
	public void updatecm()
	{
		bool flag = this.cmRun != 0 && !this.pointerIsDowning;
		if (flag)
		{
			bool flag2 = this.styleUPDOWN;
			if (flag2)
			{
				this.cmtoY += this.cmRun / 100;
				bool flag3 = this.cmtoY < 0;
				if (flag3)
				{
					this.cmtoY = 0;
				}
				else
				{
					bool flag4 = this.cmtoY > this.cmyLim;
					if (flag4)
					{
						this.cmtoY = this.cmyLim;
					}
					else
					{
						this.cmy = this.cmtoY;
					}
				}
			}
			else
			{
				this.cmtoX += this.cmRun / 100;
				bool flag5 = this.cmtoX < 0;
				if (flag5)
				{
					this.cmtoX = 0;
				}
				else
				{
					bool flag6 = this.cmtoX > this.cmxLim;
					if (flag6)
					{
						this.cmtoX = this.cmxLim;
					}
					else
					{
						this.cmx = this.cmtoX;
					}
				}
			}
			this.cmRun = this.cmRun * 9 / 10;
			bool flag7 = this.cmRun < 100 && this.cmRun > -100;
			if (flag7)
			{
				this.cmRun = 0;
			}
		}
		bool flag8 = this.cmx != this.cmtoX && !this.pointerIsDowning;
		if (flag8)
		{
			this.cmvx = this.cmtoX - this.cmx << 2;
			this.cmdx += this.cmvx;
			this.cmx += this.cmdx >> 4;
			this.cmdx &= 15;
		}
		bool flag9 = this.cmy != this.cmtoY && !this.pointerIsDowning;
		if (flag9)
		{
			this.cmvy = this.cmtoY - this.cmy << 2;
			this.cmdy += this.cmvy;
			this.cmy += this.cmdy >> 4;
			this.cmdy &= 15;
		}
	}

	// Token: 0x0600099E RID: 2462 RVA: 0x000A0154 File Offset: 0x0009E354
	public void setStyle(int nItem, int ITEM_SIZE, int xPos, int yPos, int width, int height, bool styleUPDOWN, int ITEM_PER_LINE)
	{
		this.xPos = xPos;
		this.yPos = yPos;
		this.ITEM_SIZE = ITEM_SIZE;
		this.nITEM = nItem;
		this.width = width;
		this.height = height;
		this.styleUPDOWN = styleUPDOWN;
		this.ITEM_PER_LINE = ITEM_PER_LINE;
		Res.outz(string.Concat(new string[]
		{
			"nItem= ",
			nItem.ToString(),
			" ITEMSIZE= ",
			ITEM_SIZE.ToString(),
			" heghit= ",
			height.ToString()
		}));
		if (styleUPDOWN)
		{
			int num = nItem / ITEM_PER_LINE;
			bool flag = nItem % ITEM_PER_LINE != 0;
			if (flag)
			{
				num++;
			}
			this.cmyLim = num * ITEM_SIZE - height;
		}
		else
		{
			this.cmxLim = ITEM_PER_LINE * ITEM_SIZE - width;
		}
		bool flag2 = this.cmyLim < 0;
		if (flag2)
		{
			this.cmyLim = 0;
		}
		bool flag3 = this.cmxLim < 0;
		if (flag3)
		{
			this.cmxLim = 0;
		}
	}

	// Token: 0x0600099F RID: 2463 RVA: 0x000A0250 File Offset: 0x0009E450
	public void moveTo(int to)
	{
		bool flag = this.styleUPDOWN;
		if (flag)
		{
			to -= (this.height - this.ITEM_SIZE) / 2;
			this.cmtoY = to;
			bool flag2 = this.cmtoY < 0;
			if (flag2)
			{
				this.cmtoY = 0;
			}
			bool flag3 = this.cmtoY > this.cmyLim;
			if (flag3)
			{
				this.cmtoY = this.cmyLim;
			}
		}
		else
		{
			to -= (this.width - this.ITEM_SIZE) / 2;
			this.cmtoX = to;
			bool flag4 = this.cmtoX < 0;
			if (flag4)
			{
				this.cmtoX = 0;
			}
			bool flag5 = this.cmtoX > this.cmxLim;
			if (flag5)
			{
				this.cmtoX = this.cmxLim;
			}
		}
	}

	// Token: 0x060009A0 RID: 2464 RVA: 0x000A0310 File Offset: 0x0009E510
	public static Scroll gIz()
	{
		bool flag = Scroll.gI == null;
		if (flag)
		{
			Scroll.gI = new Scroll();
		}
		return Scroll.gI;
	}

	// Token: 0x040011AE RID: 4526
	public int cmtoX;

	// Token: 0x040011AF RID: 4527
	public int cmtoY;

	// Token: 0x040011B0 RID: 4528
	public int cmx;

	// Token: 0x040011B1 RID: 4529
	public int cmy;

	// Token: 0x040011B2 RID: 4530
	public int cmvx;

	// Token: 0x040011B3 RID: 4531
	public int cmvy;

	// Token: 0x040011B4 RID: 4532
	public int cmdx;

	// Token: 0x040011B5 RID: 4533
	public int cmdy;

	// Token: 0x040011B6 RID: 4534
	public int xPos;

	// Token: 0x040011B7 RID: 4535
	public int yPos;

	// Token: 0x040011B8 RID: 4536
	public int width;

	// Token: 0x040011B9 RID: 4537
	public int height;

	// Token: 0x040011BA RID: 4538
	public int cmxLim;

	// Token: 0x040011BB RID: 4539
	public int cmyLim;

	// Token: 0x040011BC RID: 4540
	public static Scroll gI;

	// Token: 0x040011BD RID: 4541
	private int pointerDownTime;

	// Token: 0x040011BE RID: 4542
	private int pointerDownFirstX;

	// Token: 0x040011BF RID: 4543
	private int[] pointerDownLastX = new int[3];

	// Token: 0x040011C0 RID: 4544
	public bool pointerIsDowning;

	// Token: 0x040011C1 RID: 4545
	public bool isDownWhenRunning;

	// Token: 0x040011C2 RID: 4546
	private int cmRun;

	// Token: 0x040011C3 RID: 4547
	public int selectedItem;

	// Token: 0x040011C4 RID: 4548
	public int ITEM_SIZE;

	// Token: 0x040011C5 RID: 4549
	public int nITEM;

	// Token: 0x040011C6 RID: 4550
	public int ITEM_PER_LINE;

	// Token: 0x040011C7 RID: 4551
	public bool styleUPDOWN = true;
}
using System;

// Token: 0x020000B6 RID: 182
public class ScrollResult
{
	// Token: 0x040011C8 RID: 4552
	public bool isDowning;

	// Token: 0x040011C9 RID: 4553
	public int selected = -1;

	// Token: 0x040011CA RID: 4554
	public bool isFinish;
}
using System;
using Assets.src.e;

// Token: 0x020000B7 RID: 183
public class SelectCharScr : mScreen, IActionListener
{
	// Token: 0x060009A3 RID: 2467 RVA: 0x000A036C File Offset: 0x0009E56C
	public SelectCharScr()
	{
		try
		{
			bool flag = !GameCanvas.lowGraphic;
			if (flag)
			{
				SelectCharScr.loadMapFromResource(new sbyte[]
				{
					39,
					40,
					41
				});
			}
			this.loadMapTableFromResource(new sbyte[]
			{
				39,
				40,
				41
			});
		}
		catch (Exception ex)
		{
			Cout.LogError("Tao char loi " + ex.ToString());
		}
		this.cx = 168;
		this.cy = 350;
		short num = 32000;
		SmallImage.imgNew = new Small[(int)num];
		SmallImage.newSmallVersion = new sbyte[(int)num];
		SmallImage.maxSmall = num;
	}

	// Token: 0x060009A4 RID: 2468 RVA: 0x000A045C File Offset: 0x0009E65C
	public static SelectCharScr gI()
	{
		bool flag = SelectCharScr.instance == null;
		if (flag)
		{
			SelectCharScr.instance = new SelectCharScr();
		}
		return SelectCharScr.instance;
	}

	// Token: 0x060009A5 RID: 2469 RVA: 0x000A048C File Offset: 0x0009E68C
	public static void loadMapFromResource(sbyte[] mapID)
	{
		Res.outz("newwwwwwwwww =============");
		for (int i = 0; i < mapID.Length; i++)
		{
			DataInputStream dataInputStream = MyStream.readFile("/mymap/" + mapID[i].ToString());
			MapTemplate.tmw[i] = (int)((ushort)dataInputStream.read());
			MapTemplate.tmh[i] = (int)((ushort)dataInputStream.read());
			Cout.LogError("Thong TIn : " + MapTemplate.tmw[i].ToString() + "::" + MapTemplate.tmh[i].ToString());
			MapTemplate.maps[i] = new int[dataInputStream.available()];
			Cout.LogError("lent= " + MapTemplate.maps[i].Length.ToString());
			for (int j = 0; j < MapTemplate.tmw[i] * MapTemplate.tmh[i]; j++)
			{
				MapTemplate.maps[i][j] = dataInputStream.read();
			}
			MapTemplate.types[i] = new int[MapTemplate.maps[i].Length];
		}
	}

	// Token: 0x060009A6 RID: 2470 RVA: 0x000A05AC File Offset: 0x0009E7AC
	public void loadMapTableFromResource(sbyte[] mapID)
	{
		bool lowGraphic = GameCanvas.lowGraphic;
		if (!lowGraphic)
		{
			DataInputStream dataInputStream = null;
			try
			{
				for (int i = 0; i < mapID.Length; i++)
				{
					dataInputStream = MyStream.readFile("/mymap/mapTable" + mapID[i].ToString());
					Cout.LogError("mapTable : " + mapID[i].ToString());
					short num = dataInputStream.readShort();
					MapTemplate.vCurrItem[i] = new MyVector();
					Res.outz("nItem= " + num.ToString());
					for (int j = 0; j < (int)num; j++)
					{
						short id = dataInputStream.readShort();
						short num2 = dataInputStream.readShort();
						short num3 = dataInputStream.readShort();
						bool flag = TileMap.getBIById((int)id) == null;
						if (!flag)
						{
							BgItem bibyId = TileMap.getBIById((int)id);
							BgItem bgItem = new BgItem();
							bgItem.id = (int)id;
							bgItem.idImage = bibyId.idImage;
							bgItem.dx = bibyId.dx;
							bgItem.dy = bibyId.dy;
							bgItem.x = (int)(num2 * (short)TileMap.size);
							bgItem.y = (int)(num3 * (short)TileMap.size);
							bgItem.layer = bibyId.layer;
							MapTemplate.vCurrItem[i].addElement(bgItem);
							bool flag2 = !BgItem.imgNew.containsKey(bgItem.idImage.ToString() + string.Empty);
							if (flag2)
							{
								try
								{
									Image image = GameCanvas.loadImage("/mapBackGround/" + bgItem.idImage.ToString() + ".png");
									bool flag3 = image == null;
									if (flag3)
									{
										BgItem.imgNew.put(bgItem.idImage.ToString() + string.Empty, Image.createRGBImage(new int[1], 1, 1, true));
										Service.gI().getBgTemplate(bgItem.idImage);
									}
									else
									{
										BgItem.imgNew.put(bgItem.idImage.ToString() + string.Empty, image);
									}
								}
								catch (Exception)
								{
									Image image2 = GameCanvas.loadImage("/mapBackGround/" + bgItem.idImage.ToString() + ".png");
									bool flag4 = image2 == null;
									if (flag4)
									{
										image2 = Image.createRGBImage(new int[1], 1, 1, true);
										Service.gI().getBgTemplate(bgItem.idImage);
									}
									BgItem.imgNew.put(bgItem.idImage.ToString() + string.Empty, image2);
								}
								BgItem.vKeysLast.addElement(bgItem.idImage.ToString() + string.Empty);
							}
							bool flag5 = !BgItem.isExistKeyNews(bgItem.idImage.ToString() + string.Empty);
							if (flag5)
							{
								BgItem.vKeysNew.addElement(bgItem.idImage.ToString() + string.Empty);
							}
							bgItem.changeColor();
						}
					}
				}
			}
			catch (Exception ex)
			{
				Cout.println("LOI TAI loadMapTableFromResource" + ex.ToString());
			}
		}
	}

	// Token: 0x060009A7 RID: 2471 RVA: 0x000A091C File Offset: 0x0009EB1C
	public void doChangeMap()
	{
		TileMap.maps = new int[MapTemplate.maps[this.indexGender].Length];
		for (int i = 0; i < MapTemplate.maps[this.indexGender].Length; i++)
		{
			TileMap.maps[i] = MapTemplate.maps[this.indexGender][i];
		}
		TileMap.types = MapTemplate.types[this.indexGender];
		TileMap.pxh = MapTemplate.pxh[this.indexGender];
		TileMap.pxw = MapTemplate.pxw[this.indexGender];
		TileMap.tileID = MapTemplate.pxw[this.indexGender];
		TileMap.tmw = MapTemplate.tmw[this.indexGender];
		TileMap.tmh = MapTemplate.tmh[this.indexGender];
		TileMap.tileID = this.bgID[this.indexGender] + 1;
		TileMap.loadMainTile();
		TileMap.loadTileCreatChar();
		GameCanvas.loadBG(this.bgID[this.indexGender]);
		GameScr.loadCamera(true, this.cx, this.cy);
	}

	// Token: 0x060009A8 RID: 2472 RVA: 0x000A0A24 File Offset: 0x0009EC24
	public void SetInfoChar(global::Char temp)
	{
		this.mychar = new global::Char();
		this.indexGender = (this.mychar.cgender = temp.cgender);
		this.mychar.head = temp.head;
		this.mychar.headICON = temp.headICON;
		this.mychar.body = temp.body;
		this.mychar.leg = temp.leg;
		this.mychar.bag = temp.bag;
		this.mychar.cName = temp.cName;
		this.switchToMe();
	}

	// Token: 0x060009A9 RID: 2473 RVA: 0x000A0AC4 File Offset: 0x0009ECC4
	public override void switchToMe()
	{
		GameCanvas.menu.showMenu = false;
		GameCanvas.endDlg();
		GameScr.gI().initSelectChar();
		base.switchToMe();
		this.doChangeMap();
		global::Char.isLoadingMap = false;
		ServerListScreen.countDieConnect = 0;
		this.center = new Command(mResources.SELECT, this, 100, null);
		this.left = new Command(mResources.BACK, this, 101, null);
		this.cmdSelectSv = new Command(ServerListScreen.nameServer[ServerListScreen.ipSelect], this, 102, null);
		this.cmdSelectSv.x = 1;
		this.cmdSelectSv.y = 3;
	}

	// Token: 0x060009AA RID: 2474 RVA: 0x000A0B64 File Offset: 0x0009ED64
	public override void paint(mGraphics g)
	{
		bool flag = !Controller.isGet_CLIENT_INFO || SelectCharScr.isWait || global::Char.isLoadingMap;
		if (!flag)
		{
			GameCanvas.paintBGGameScr(g);
			g.translate(-GameScr.cmx, -GameScr.cmy);
			for (int i = 0; i < MapTemplate.vCurrItem[this.indexGender].size(); i++)
			{
				BgItem bgItem = (BgItem)MapTemplate.vCurrItem[this.indexGender].elementAt(i);
				bool flag2 = bgItem.idImage != -1 && bgItem.layer == 1;
				if (flag2)
				{
					bgItem.paint(g);
				}
			}
			TileMap.paintTilemap(g);
			g.drawImage(TileMap.bong, GameScr.cmx + GameCanvas.hw, this.cy + this.dy + 1, 3);
			bool flag3 = this.mychar != null;
			if (flag3)
			{
				this.mychar.paintCharBody(g, GameScr.cmx + GameCanvas.hw, this.cy + this.dy, 1, this.f[this.count], true);
				mFont.tahoma_7b_yellow.drawString(g, this.mychar.cName, GameScr.cmx + GameCanvas.hw, this.cy - 15, mFont.CENTER, mFont.tahoma_7_greySmall);
			}
			g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
			base.paint(g);
			this.cmdSelectSv.paint(g);
		}
	}

	// Token: 0x060009AB RID: 2475 RVA: 0x000A0CDC File Offset: 0x0009EEDC
	public override void update()
	{
		base.update();
		bool flag = !Session_ME.gI().isConnected();
		if (flag)
		{
			SelectCharScr.isWait = true;
			this.count++;
			bool flag2 = this.count > 50;
			if (flag2)
			{
				ServerListScreen.ConnectIP();
				this.count = 0;
			}
		}
		else
		{
			SelectCharScr.isWait = false;
			this.count++;
			bool flag3 = this.count > this.f.Length - 1;
			if (flag3)
			{
				this.count = 0;
			}
			bool flag4 = this.cmdSelectSv != null && this.cmdSelectSv.isPointerPressInside();
			if (flag4)
			{
				this.cmdSelectSv.performAction();
			}
		}
	}

	// Token: 0x060009AC RID: 2476 RVA: 0x000A0D94 File Offset: 0x0009EF94
	public void perform(int idAction, object p)
	{
		switch (idAction)
		{
		case 100:
			GameCanvas.serverScreen.Login_New();
			break;
		case 101:
			ServerListScreen.isAutoLogin = false;
			GameCanvas.serverScreen.switchToMe();
			break;
		case 102:
			ServerListScreen.SetIpSelect(-1, true);
			ServerScr.isShowSv_HaveChar = false;
			Controller.isEXTRA_LINK = false;
			GameCanvas.serverScr.switchToMe();
			break;
		}
	}

	// Token: 0x040011CB RID: 4555
	public static bool isWait;

	// Token: 0x040011CC RID: 4556
	public static SelectCharScr instance;

	// Token: 0x040011CD RID: 4557
	public global::Char mychar;

	// Token: 0x040011CE RID: 4558
	private int indexGender;

	// Token: 0x040011CF RID: 4559
	private int cx;

	// Token: 0x040011D0 RID: 4560
	private int cy;

	// Token: 0x040011D1 RID: 4561
	private int dy = 45;

	// Token: 0x040011D2 RID: 4562
	private Command cmdSelectSv;

	// Token: 0x040011D3 RID: 4563
	private int[] bgID = new int[]
	{
		0,
		4,
		8
	};

	// Token: 0x040011D4 RID: 4564
	private int[] f = new int[]
	{
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1
	};

	// Token: 0x040011D5 RID: 4565
	private int count;
}
using System;

// Token: 0x020000B8 RID: 184
public class ServerEffect : Effect2
{
	// Token: 0x060009AD RID: 2477 RVA: 0x000A0E00 File Offset: 0x0009F000
	public static void addServerEffect(int id, int cx, int cy, int loopCount)
	{
		ServerEffect serverEffect = new ServerEffect();
		serverEffect.eff = GameScr.efs[id - 1];
		serverEffect.x = cx;
		serverEffect.y = cy;
		serverEffect.loopCount = (short)loopCount;
		Effect2.vEffect2.addElement(serverEffect);
	}

	// Token: 0x060009AE RID: 2478 RVA: 0x000A0E48 File Offset: 0x0009F048
	public static void addServerEffect(int id, int cx, int cy, int loopCount, int trans)
	{
		ServerEffect serverEffect = new ServerEffect();
		serverEffect.eff = GameScr.efs[id - 1];
		serverEffect.x = cx;
		serverEffect.y = cy;
		serverEffect.loopCount = (short)loopCount;
		serverEffect.trans = trans;
		Effect2.vEffect2.addElement(serverEffect);
	}

	// Token: 0x060009AF RID: 2479 RVA: 0x000A0E98 File Offset: 0x0009F098
	public static void addServerEffect(int id, Mob m, int loopCount)
	{
		ServerEffect serverEffect = new ServerEffect();
		serverEffect.eff = GameScr.efs[id - 1];
		serverEffect.m = m;
		serverEffect.loopCount = (short)loopCount;
		Effect2.vEffect2.addElement(serverEffect);
	}

	// Token: 0x060009B0 RID: 2480 RVA: 0x000A0ED8 File Offset: 0x0009F0D8
	public static void addServerEffect(int id, global::Char c, int loopCount)
	{
		ServerEffect serverEffect = new ServerEffect();
		serverEffect.eff = GameScr.efs[id - 1];
		serverEffect.c = c;
		serverEffect.loopCount = (short)loopCount;
		Effect2.vEffect2.addElement(serverEffect);
	}

	// Token: 0x060009B1 RID: 2481 RVA: 0x000A0F18 File Offset: 0x0009F118
	public static void addServerEffect(int id, global::Char c, int loopCount, int trans)
	{
		ServerEffect serverEffect = new ServerEffect();
		serverEffect.eff = GameScr.efs[id - 1];
		serverEffect.c = c;
		serverEffect.loopCount = (short)loopCount;
		serverEffect.trans = trans;
		Effect2.vEffect2.addElement(serverEffect);
	}

	// Token: 0x060009B2 RID: 2482 RVA: 0x000A0F60 File Offset: 0x0009F160
	public static void addServerEffectWithTime(int id, int cx, int cy, int timeLengthInSecond)
	{
		ServerEffect serverEffect = new ServerEffect();
		serverEffect.eff = GameScr.efs[id - 1];
		serverEffect.x = cx;
		serverEffect.y = cy;
		serverEffect.endTime = mSystem.currentTimeMillis() + (long)(timeLengthInSecond * 1000);
		Effect2.vEffect2.addElement(serverEffect);
	}

	// Token: 0x060009B3 RID: 2483 RVA: 0x000A0FB4 File Offset: 0x0009F1B4
	public static void addServerEffectWithTime(int id, global::Char c, int timeLengthInSecond)
	{
		ServerEffect serverEffect = new ServerEffect();
		serverEffect.eff = GameScr.efs[id - 1];
		serverEffect.c = c;
		serverEffect.endTime = mSystem.currentTimeMillis() + (long)(timeLengthInSecond * 1000);
		Effect2.vEffect2.addElement(serverEffect);
	}

	// Token: 0x060009B4 RID: 2484 RVA: 0x000A1000 File Offset: 0x0009F200
	public override void paint(mGraphics g)
	{
		bool flag = mGraphics.zoomLevel == 1;
		if (flag)
		{
			GameScr.countEff++;
		}
		bool flag2 = GameScr.countEff < 8;
		if (flag2)
		{
			bool flag3 = this.c != null;
			if (flag3)
			{
				this.x = this.c.cx;
				this.y = this.c.cy + GameCanvas.transY;
			}
			bool flag4 = this.m != null;
			if (flag4)
			{
				this.x = this.m.x;
				this.y = this.m.y + GameCanvas.transY;
			}
			int num = this.x + this.dx0 + this.eff.arrEfInfo[this.i0].dx;
			int num2 = this.y + this.dy0 + this.eff.arrEfInfo[this.i0].dy;
			bool flag5 = GameCanvas.isPaint(num, num2);
			if (flag5)
			{
				SmallImage.drawSmallImage(g, this.eff.arrEfInfo[this.i0].idImg, num, num2, this.trans, mGraphics.VCENTER | mGraphics.HCENTER);
			}
		}
	}

	// Token: 0x060009B5 RID: 2485 RVA: 0x000A1138 File Offset: 0x0009F338
	public override void update()
	{
		bool flag = this.endTime != 0L;
		if (flag)
		{
			this.i0++;
			bool flag2 = this.i0 >= this.eff.arrEfInfo.Length;
			if (flag2)
			{
				this.i0 = 0;
			}
			bool flag3 = mSystem.currentTimeMillis() - this.endTime > 0L;
			if (flag3)
			{
				Effect2.vEffect2.removeElement(this);
			}
		}
		else
		{
			this.i0++;
			bool flag4 = this.i0 >= this.eff.arrEfInfo.Length;
			if (flag4)
			{
				this.loopCount -= 1;
				bool flag5 = this.loopCount <= 0;
				if (flag5)
				{
					Effect2.vEffect2.removeElement(this);
				}
				else
				{
					this.i0 = 0;
				}
			}
		}
		bool flag6 = GameCanvas.gameTick % 11 == 0 && this.c != null && this.c != global::Char.myCharz() && !GameScr.vCharInMap.contains(this.c);
		if (flag6)
		{
			Effect2.vEffect2.removeElement(this);
		}
	}

	// Token: 0x040011D6 RID: 4566
	public EffectCharPaint eff;

	// Token: 0x040011D7 RID: 4567
	private int i0;

	// Token: 0x040011D8 RID: 4568
	private int dx0;

	// Token: 0x040011D9 RID: 4569
	private int dy0;

	// Token: 0x040011DA RID: 4570
	private int x;

	// Token: 0x040011DB RID: 4571
	private int y;

	// Token: 0x040011DC RID: 4572
	private global::Char c;

	// Token: 0x040011DD RID: 4573
	private Mob m;

	// Token: 0x040011DE RID: 4574
	private short loopCount;

	// Token: 0x040011DF RID: 4575
	private long endTime;

	// Token: 0x040011E0 RID: 4576
	private int trans;
}
using System;
using UnityEngine;

// Token: 0x020000B9 RID: 185
public class ServerListScreen : mScreen, IActionListener
{
	// Token: 0x060009B7 RID: 2487 RVA: 0x000A1268 File Offset: 0x0009F468
	public ServerListScreen()
	{
		int num = 4;
		int num2 = num * 32 + 23 + 33;
		bool flag = num2 >= GameCanvas.w;
		if (flag)
		{
			num--;
			num2 = num * 32 + 23 + 33;
		}
		this.initCommand();
		bool flag2 = !GameCanvas.isTouch;
		if (flag2)
		{
			ServerListScreen.selected = 0;
			this.processInput();
		}
		GameScr.loadCamera(true, -1, -1);
		GameScr.cmx = 100;
		GameScr.cmy = 200;
		bool flag3 = this.cmdCallHotline == null;
		if (flag3)
		{
			this.cmdCallHotline = new Command("Gọi hotline", this, 13, null);
			this.cmdCallHotline.x = GameCanvas.w - 75;
			bool flag4 = mSystem.clientType == 1 && !GameCanvas.isTouch;
			if (flag4)
			{
				this.cmdCallHotline.y = GameCanvas.h - 20;
			}
			else
			{
				int num3 = 2;
				this.cmdCallHotline.y = num3 + 6;
			}
		}
		ServerListScreen.cmdUpdateServer = new Command();
		ServerListScreen.cmdUpdateServer.actionChat = delegate(string str)
		{
			string text = str;
			string text2 = str;
			bool flag5 = text == null;
			if (flag5)
			{
				text = ServerListScreen.linkDefault;
			}
			else
			{
				bool flag6 = text == null && text2 != null;
				if (flag6)
				{
					bool flag7 = text2.Equals(string.Empty) || text2.Length < 20;
					if (flag7)
					{
						text2 = ServerListScreen.linkDefault;
					}
					ServerListScreen.getServerList(text2);
				}
				bool flag8 = text != null && text2 == null;
				if (flag8)
				{
					bool flag9 = text.Equals(string.Empty) || text.Length < 20;
					if (flag9)
					{
						text = ServerListScreen.linkDefault;
					}
					ServerListScreen.getServerList(text);
				}
				bool flag10 = text != null && text2 != null;
				if (flag10)
				{
					bool flag11 = text.Length > text2.Length;
					if (flag11)
					{
						ServerListScreen.getServerList(text);
					}
					else
					{
						ServerListScreen.getServerList(text2);
					}
				}
			}
		};
		this.setLinkDefault(mSystem.LANGUAGE);
	}

	// Token: 0x060009B8 RID: 2488 RVA: 0x000A13A8 File Offset: 0x0009F5A8
	public static void createDeleteRMS()
	{
		bool flag = ServerListScreen.cmdDeleteRMS == null;
		if (flag)
		{
			bool flag2 = GameCanvas.serverScreen == null;
			if (flag2)
			{
				GameCanvas.serverScreen = new ServerListScreen();
			}
			ServerListScreen.cmdDeleteRMS = new Command(string.Empty, GameCanvas.serverScreen, 14, null);
			ServerListScreen.cmdDeleteRMS.x = GameCanvas.w - 78;
			ServerListScreen.cmdDeleteRMS.y = GameCanvas.h - 26;
		}
	}

	// Token: 0x060009B9 RID: 2489 RVA: 0x000A1418 File Offset: 0x0009F618
	private void initCommand()
	{
		this.nCmdPlay = 0;
		string text = Rms.loadRMSString("acc");
		bool flag = text == null;
		if (flag)
		{
			bool flag2 = Rms.loadRMS("userAo" + ServerListScreen.ipSelect.ToString()) != null;
			if (flag2)
			{
				this.nCmdPlay = 1;
			}
		}
		else
		{
			bool flag3 = text.Equals(string.Empty);
			if (flag3)
			{
				bool flag4 = Rms.loadRMS("userAo" + ServerListScreen.ipSelect.ToString()) != null;
				if (flag4)
				{
					this.nCmdPlay = 1;
				}
			}
			else
			{
				this.nCmdPlay = 1;
			}
		}
		this.cmd = new Command[(mGraphics.zoomLevel <= 1) ? (4 + this.nCmdPlay) : (3 + this.nCmdPlay)];
		int num = GameCanvas.hh - 15 * this.cmd.Length + 28;
		for (int i = 0; i < this.cmd.Length; i++)
		{
			switch (i)
			{
			case 0:
			{
				this.cmd[0] = new Command(string.Empty, this, 3, null);
				bool flag5 = text == null;
				if (flag5)
				{
					this.cmd[0].caption = mResources.playNew;
					bool flag6 = Rms.loadRMS("userAo" + ServerListScreen.ipSelect.ToString()) != null;
					if (flag6)
					{
						this.cmd[0].caption = mResources.choitiep;
					}
				}
				else
				{
					bool flag7 = text.Equals(string.Empty);
					if (flag7)
					{
						this.cmd[0].caption = mResources.playNew;
						bool flag8 = Rms.loadRMS("userAo" + ServerListScreen.ipSelect.ToString()) != null;
						if (flag8)
						{
							this.cmd[0].caption = mResources.choitiep;
						}
					}
					else
					{
						this.cmd[0].caption = mResources.playAcc + " " + text;
						bool flag9 = this.cmd[0].caption.Length > 23;
						if (flag9)
						{
							this.cmd[0].caption = this.cmd[0].caption.Substring(0, 23);
							Command command = this.cmd[0];
							command.caption += "...";
						}
					}
				}
				break;
			}
			case 1:
			{
				bool flag10 = this.nCmdPlay == 1;
				if (flag10)
				{
					this.cmd[1] = new Command(string.Empty, this, 10100, null);
					this.cmd[1].caption = mResources.playNew;
				}
				else
				{
					this.cmd[1] = new Command(mResources.change_account, this, 7, null);
				}
				break;
			}
			case 2:
			{
				bool flag11 = this.nCmdPlay == 1;
				if (flag11)
				{
					this.cmd[2] = new Command(mResources.change_account, this, 7, null);
				}
				else
				{
					this.cmd[2] = new Command(string.Empty, this, 17, null);
				}
				break;
			}
			case 3:
			{
				bool flag12 = this.nCmdPlay == 1;
				if (flag12)
				{
					this.cmd[3] = new Command(string.Empty, this, 17, null);
				}
				else
				{
					this.cmd[3] = new Command(mResources.option, this, 8, null);
				}
				break;
			}
			case 4:
				this.cmd[4] = new Command(mResources.option, this, 8, null);
				break;
			}
			this.cmd[i].y = num;
			this.cmd[i].setType();
			this.cmd[i].x = (GameCanvas.w - this.cmd[i].w) / 2;
			num += 30;
		}
	}

	// Token: 0x060009BA RID: 2490 RVA: 0x000A17C4 File Offset: 0x0009F9C4
	public static void doUpdateServer()
	{
		bool flag = ServerListScreen.cmdUpdateServer == null && GameCanvas.serverScreen == null;
		if (flag)
		{
			GameCanvas.serverScreen = new ServerListScreen();
		}
		Net.connectHTTP2(ServerListScreen.linkDefault, ServerListScreen.cmdUpdateServer);
	}

	// Token: 0x060009BB RID: 2491 RVA: 0x000A1804 File Offset: 0x0009FA04
	public static void getServerList(string str)
	{
		string[] array = Res.split(str.Trim(), ",", 0);
		Res.outz(">>> getServerList= " + str);
		mResources.loadLanguague(sbyte.Parse(array[array.Length - 2]));
		ServerListScreen.nameServer = new string[array.Length - 2];
		ServerListScreen.address = new string[array.Length - 2];
		ServerListScreen.port = new short[array.Length - 2];
		ServerListScreen.language = new sbyte[array.Length - 2];
		ServerListScreen.typeSv = new sbyte[array.Length - 2];
		ServerListScreen.isNew = new sbyte[array.Length - 2];
		ServerListScreen.hasConnected = new bool[2];
		for (int i = 0; i < array.Length - 2; i++)
		{
			string[] array2 = Res.split(array[i].Trim(), ":", 0);
			ServerListScreen.nameServer[i] = array2[0];
			ServerListScreen.address[i] = array2[1];
			ServerListScreen.port[i] = short.Parse(array2[2]);
			ServerListScreen.language[i] = sbyte.Parse(array2[3].Trim());
			try
			{
				ServerListScreen.typeSv[i] = sbyte.Parse(array2[4].Trim());
			}
			catch (Exception)
			{
				ServerListScreen.typeSv[i] = 0;
			}
			try
			{
				ServerListScreen.isNew[i] = sbyte.Parse(array2[5].Trim());
			}
			catch (Exception)
			{
				ServerListScreen.isNew[i] = 0;
			}
		}
		ServerListScreen.serverPriority = sbyte.Parse(array[array.Length - 1]);
		Res.outz(">>> getServerList= serverPriority: " + ServerListScreen.serverPriority.ToString());
		ServerListScreen.saveIP();
	}

	// Token: 0x060009BC RID: 2492 RVA: 0x000A19AC File Offset: 0x0009FBAC
	public override void paint(mGraphics g)
	{
		bool flag = !ServerListScreen.loadScreen;
		if (flag)
		{
			g.setColor(0);
			g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
		}
		else
		{
			GameCanvas.paintBGGameScr(g);
		}
		int num = 2;
		mFont.tahoma_7_white.drawString(g, string.Concat(new string[]
		{
			"v",
			GameMidlet.VERSION,
			"(",
			mGraphics.zoomLevel.ToString(),
			")"
		}), GameCanvas.w - 2, num + 15, 1, mFont.tahoma_7_grey);
		try
		{
			string text = string.Empty;
			text = ((ServerListScreen.testConnect != 0) ? (text + ServerListScreen.nameServer[ServerListScreen.ipSelect] + " connected") : (text + ServerListScreen.nameServer[ServerListScreen.ipSelect] + " disconnect"));
			bool isTest = mSystem.isTest;
			if (isTest)
			{
				mFont.tahoma_7_white.drawString(g, text, GameCanvas.w - 2, num + 15 + 15, 1, mFont.tahoma_7_grey);
			}
		}
		catch (Exception)
		{
		}
		bool flag2 = !ServerListScreen.isGetData || ServerListScreen.loadScreen;
		if (flag2)
		{
			bool flag3 = mSystem.clientType == 1 && !GameCanvas.isTouch;
			if (flag3)
			{
				mFont.tahoma_7_white.drawString(g, ServerListScreen.linkweb, GameCanvas.w - 2, GameCanvas.h - 15, 1, mFont.tahoma_7_grey);
			}
			else
			{
				mFont.tahoma_7_white.drawString(g, ServerListScreen.linkweb, GameCanvas.w - 2, num, 1, mFont.tahoma_7_grey);
			}
		}
		else
		{
			mFont.tahoma_7_white.drawString(g, ServerListScreen.linkweb, GameCanvas.w - 2, num, 1, mFont.tahoma_7_grey);
		}
		int num2 = (GameCanvas.w < 200) ? 160 : 180;
		ServerListScreen.paintDeleteData(g);
		bool flag4 = !ServerListScreen.loadScreen;
		if (flag4)
		{
			bool flag5 = !ServerListScreen.bigOk;
			if (flag5)
			{
				g.drawImage(LoginScr.imgTitle, GameCanvas.hw, GameCanvas.hh - 32, 3);
				bool flag6 = !ServerListScreen.isGetData;
				if (flag6)
				{
					mFont.tahoma_7b_white.drawString(g, mResources.taidulieudechoi, GameCanvas.hw, GameCanvas.hh + 24, 2);
					bool flag7 = ServerListScreen.cmdDownload != null;
					if (flag7)
					{
						ServerListScreen.cmdDownload.paint(g);
						this.perform(2, null);
					}
				}
				else
				{
					bool flag8 = ServerListScreen.cmdDownload != null;
					if (flag8)
					{
						ServerListScreen.cmdDownload.paint(g);
					}
					mFont.tahoma_7b_white.drawString(g, mResources.downloading_data + ServerListScreen.percent.ToString() + "%", GameCanvas.w / 2, GameCanvas.hh + 24, 2);
					GameScr.paintOngMauPercent(GameScr.frBarPow20, GameScr.frBarPow21, GameScr.frBarPow22, (float)(GameCanvas.w / 2 - 50), (float)(GameCanvas.hh + 45), 100, 100f, g);
					GameScr.paintOngMauPercent(GameScr.frBarPow0, GameScr.frBarPow1, GameScr.frBarPow2, (float)(GameCanvas.w / 2 - 50), (float)(GameCanvas.hh + 45), 100, (float)ServerListScreen.percent, g);
				}
			}
		}
		else
		{
			int num3 = GameCanvas.hh - 15 * this.cmd.Length - 15;
			bool flag9 = num3 < 25;
			if (flag9)
			{
				num3 = 25;
			}
			bool flag10 = LoginScr.imgTitle != null;
			if (flag10)
			{
				g.drawImage(LoginScr.imgTitle, GameCanvas.hw, num3, 3);
			}
			bool flag11 = ServerListScreen.isNewUI;
			if (flag11)
			{
				this.paint_UI_New(g);
			}
			else
			{
				int num4 = this.cmd.Length;
				bool flag12 = mGraphics.zoomLevel > 1;
				if (flag12)
				{
				}
				for (int i = 0; i < num4; i++)
				{
					this.cmd[i].paint(g);
				}
				g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
				bool flag13 = mGraphics.zoomLevel == 1;
				if (flag13)
				{
					bool flag14 = ServerListScreen.testConnect == -1;
					if (flag14)
					{
						bool flag15 = GameCanvas.gameTick % 20 > 10;
						if (flag15)
						{
							g.drawRegion(GameScr.imgRoomStat, 0, 14, 7, 7, 0, (GameCanvas.w - mFont.tahoma_7b_dark.getWidth(this.cmd[2 + this.nCmdPlay].caption) >> 1) - 10, this.cmd[2 + this.nCmdPlay].y + 10, 0);
						}
					}
					else
					{
						g.drawRegion(GameScr.imgRoomStat, 0, ServerListScreen.testConnect * 7, 7, 7, 0, (GameCanvas.w - mFont.tahoma_7b_dark.getWidth(this.cmd[2 + this.nCmdPlay].caption) >> 1) - 10, this.cmd[2 + this.nCmdPlay].y + 9, 0);
					}
				}
			}
		}
		base.paint(g);
	}

	// Token: 0x060009BD RID: 2493 RVA: 0x000A1E88 File Offset: 0x000A0088
	public void selectServer()
	{
		ServerListScreen.flagServer = 30;
		Session_ME.gI().close();
		GameMidlet.IP = ServerListScreen.address[ServerListScreen.ipSelect];
		GameMidlet.PORT = (int)ServerListScreen.port[ServerListScreen.ipSelect];
		GameMidlet.LANGUAGE = (int)ServerListScreen.language[ServerListScreen.ipSelect];
		Rms.saveRMSInt(ServerListScreen.RMS_svselect, ServerListScreen.ipSelect);
		Res.err("1>>>saveRMSInt:  RMS_svselect == " + ServerListScreen.ipSelect.ToString());
		bool flag = ServerListScreen.language[ServerListScreen.ipSelect] != mResources.language;
		if (flag)
		{
			mResources.loadLanguague(ServerListScreen.language[ServerListScreen.ipSelect]);
		}
		LoginScr.serverName = ServerListScreen.nameServer[ServerListScreen.ipSelect];
		this.initCommand();
		ServerListScreen.loadScreen = true;
		ServerListScreen.countDieConnect = 0;
		Controller.isConnectOK = false;
		ServerListScreen.testConnect = -1;
		ServerListScreen.isAutoConect = true;
	}

	// Token: 0x060009BE RID: 2494 RVA: 0x000A1F64 File Offset: 0x000A0164
	public override void update()
	{
		bool flag = ServerListScreen.waitToLogin;
		if (flag)
		{
			ServerListScreen.tWaitToLogin++;
			bool flag2 = ServerListScreen.tWaitToLogin == 50;
			if (flag2)
			{
				GameCanvas.serverScreen.selectServer();
				ServerListScreen.waitToLogin = false;
			}
			bool flag3 = ServerListScreen.tWaitToLogin == 100;
			if (flag3)
			{
				bool flag4 = GameCanvas.loginScr == null;
				if (flag4)
				{
					GameCanvas.loginScr = new LoginScr();
				}
				GameCanvas.loginScr.doLogin();
				Service.gI().finishUpdate();
				ServerListScreen.waitToLogin = false;
			}
		}
		for (int i = 0; i < this.cmd.Length; i++)
		{
			bool flag5 = i == ServerListScreen.selected;
			if (flag5)
			{
				this.cmd[i].isFocus = true;
			}
			else
			{
				this.cmd[i].isFocus = false;
			}
		}
		GameScr.cmx++;
		bool flag6 = !ServerListScreen.loadScreen && (ServerListScreen.bigOk || ServerListScreen.percent == 100);
		if (flag6)
		{
			ServerListScreen.cmdDownload = null;
		}
		base.update();
		bool flag7 = global::Char.isLoadingMap || !ServerListScreen.loadScreen || !ServerListScreen.isAutoConect || GameCanvas.currentScreen != this;
		if (!flag7)
		{
			bool flag8 = !Session_ME.gI().isConnected();
			if (flag8)
			{
				bool flag9 = mSystem.currentTimeMillis() > ServerListScreen.count_reConnect;
				if (flag9)
				{
					ServerListScreen.SetIpSelect(ServerListScreen.ipSelect, true);
					Session_ME.gI().close();
					ServerListScreen.ConnectIP();
					ServerListScreen.count_reConnect = mSystem.currentTimeMillis() + 5000L;
				}
			}
			else
			{
				ServerListScreen.count_reConnect = mSystem.currentTimeMillis() + 5000L;
			}
		}
	}

	// Token: 0x060009BF RID: 2495 RVA: 0x000A2114 File Offset: 0x000A0314
	private void processInput()
	{
		bool flag = ServerListScreen.loadScreen;
		if (flag)
		{
			this.center = new Command(string.Empty, this, this.cmd[ServerListScreen.selected].idAction, null);
		}
		else
		{
			this.center = ServerListScreen.cmdDownload;
		}
	}

	// Token: 0x060009C0 RID: 2496 RVA: 0x000A2160 File Offset: 0x000A0360
	public static void updateDeleteData()
	{
		bool flag = ServerListScreen.cmdDeleteRMS != null && ServerListScreen.cmdDeleteRMS.isPointerPressInside();
		if (flag)
		{
			ServerListScreen.cmdDeleteRMS.performAction();
		}
	}

	// Token: 0x060009C1 RID: 2497 RVA: 0x000A2194 File Offset: 0x000A0394
	public static void paintDeleteData(mGraphics g)
	{
		bool flag = ServerListScreen.cmdDeleteRMS != null;
		if (flag)
		{
			mFont.tahoma_7_white.drawString(g, mResources.xoadulieu, GameCanvas.w - 2, GameCanvas.h - 15, 1, mFont.tahoma_7_grey);
		}
	}

	// Token: 0x060009C2 RID: 2498 RVA: 0x000A21D8 File Offset: 0x000A03D8
	public override void updateKey()
	{
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			ServerListScreen.updateDeleteData();
			bool flag = this.cmdCallHotline != null && this.cmdCallHotline.isPointerPressInside();
			if (flag)
			{
				this.cmdCallHotline.performAction();
			}
			bool flag2 = !ServerListScreen.loadScreen;
			if (flag2)
			{
				bool flag3 = ServerListScreen.cmdDownload != null && ServerListScreen.cmdDownload.isPointerPressInside();
				if (flag3)
				{
					ServerListScreen.cmdDownload.performAction();
				}
				base.updateKey();
				return;
			}
			bool flag4 = ServerListScreen.isNewUI;
			if (flag4)
			{
				for (int i = 0; i < this.cmd_New_Ui.Length; i++)
				{
					bool flag5 = this.cmd_New_Ui[i] != null && this.cmd_New_Ui[i].isPointerPressInside();
					if (flag5)
					{
						this.cmd_New_Ui[i].performAction();
					}
				}
			}
			else
			{
				int num = this.cmd.Length;
				bool flag6 = mGraphics.zoomLevel > 1;
				if (flag6)
				{
				}
				for (int j = 0; j < num; j++)
				{
					bool flag7 = this.cmd[j] != null && this.cmd[j].isPointerPressInside();
					if (flag7)
					{
						this.cmd[j].performAction();
					}
				}
			}
		}
		else
		{
			bool flag8 = ServerListScreen.loadScreen;
			if (flag8)
			{
				bool flag9 = GameCanvas.keyPressed[8];
				if (flag9)
				{
					int num2 = (mGraphics.zoomLevel <= 1) ? 4 : 2;
					GameCanvas.keyPressed[8] = false;
					ServerListScreen.selected++;
					bool flag10 = ServerListScreen.selected > num2;
					if (flag10)
					{
						ServerListScreen.selected = 0;
					}
					this.processInput();
				}
				bool flag11 = GameCanvas.keyPressed[2];
				if (flag11)
				{
					int num3 = (mGraphics.zoomLevel <= 1) ? 4 : 2;
					GameCanvas.keyPressed[2] = false;
					ServerListScreen.selected--;
					bool flag12 = ServerListScreen.selected < 0;
					if (flag12)
					{
						ServerListScreen.selected = num3;
					}
					this.processInput();
				}
			}
		}
		bool flag13 = !ServerListScreen.isWait;
		if (flag13)
		{
			base.updateKey();
		}
	}

	// Token: 0x060009C3 RID: 2499 RVA: 0x000A23F4 File Offset: 0x000A05F4
	public static void saveIP()
	{
		DataOutputStream dataOutputStream = new DataOutputStream();
		try
		{
			dataOutputStream.writeByte(mResources.language);
			dataOutputStream.writeByte((sbyte)ServerListScreen.nameServer.Length);
			for (int i = 0; i < ServerListScreen.nameServer.Length; i++)
			{
				dataOutputStream.writeUTF(ServerListScreen.nameServer[i]);
				dataOutputStream.writeUTF(ServerListScreen.address[i]);
				dataOutputStream.writeShort(ServerListScreen.port[i]);
				dataOutputStream.writeByte(ServerListScreen.language[i]);
				try
				{
					dataOutputStream.writeByte(ServerListScreen.typeSv[i]);
				}
				catch (Exception)
				{
					dataOutputStream.writeByte(0);
				}
				try
				{
					dataOutputStream.writeByte(ServerListScreen.isNew[i]);
				}
				catch (Exception)
				{
					dataOutputStream.writeByte(0);
				}
			}
			dataOutputStream.writeByte(ServerListScreen.serverPriority);
			Rms.saveRMS(ServerListScreen.RMS_NRlink, dataOutputStream.toByteArray());
			dataOutputStream.close();
			SplashScr.loadIP();
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x060009C4 RID: 2500 RVA: 0x000A2510 File Offset: 0x000A0710
	public static bool allServerConnected()
	{
		for (int i = 0; i < 2; i++)
		{
			bool flag = !ServerListScreen.hasConnected[i];
			if (flag)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x060009C5 RID: 2501 RVA: 0x000A2548 File Offset: 0x000A0748
	public static void loadIP()
	{
		sbyte[] array = Rms.loadRMS(ServerListScreen.RMS_NRlink);
		bool flag = array == null;
		if (flag)
		{
			ServerListScreen.getServerList(ServerListScreen.linkDefault);
		}
		else
		{
			DataInputStream dataInputStream = new DataInputStream(array);
			bool flag2 = dataInputStream == null;
			if (!flag2)
			{
				try
				{
					mResources.loadLanguague(dataInputStream.readByte());
					sbyte b = dataInputStream.readByte();
					ServerListScreen.nameServer = new string[(int)b];
					ServerListScreen.address = new string[(int)b];
					ServerListScreen.port = new short[(int)b];
					ServerListScreen.language = new sbyte[(int)b];
					ServerListScreen.typeSv = new sbyte[(int)b];
					ServerListScreen.isNew = new sbyte[(int)b];
					for (int i = 0; i < (int)b; i++)
					{
						ServerListScreen.nameServer[i] = dataInputStream.readUTF();
						ServerListScreen.address[i] = dataInputStream.readUTF();
						ServerListScreen.port[i] = dataInputStream.readShort();
						ServerListScreen.language[i] = dataInputStream.readByte();
						try
						{
							ServerListScreen.typeSv[i] = dataInputStream.readByte();
						}
						catch (Exception)
						{
							ServerListScreen.typeSv[i] = 0;
						}
						try
						{
							ServerListScreen.isNew[i] = dataInputStream.readByte();
						}
						catch (Exception)
						{
							ServerListScreen.isNew[i] = 0;
						}
					}
					ServerListScreen.serverPriority = dataInputStream.readByte();
					dataInputStream.close();
					SplashScr.loadIP();
				}
				catch (Exception)
				{
				}
			}
		}
	}

	// Token: 0x060009C6 RID: 2502 RVA: 0x000A26F4 File Offset: 0x000A08F4
	public override void switchToMe()
	{
		Res.outz(">>>>switchToMe  ServerListScreen: ");
		EffectManager.remove();
		GameScr.cmy = 0;
		GameScr.cmx = 0;
		this.initCommand();
		ServerListScreen.isWait = false;
		GameCanvas.loginScr = null;
		string text = Rms.loadRMSString("ResVersion");
		int num = (text == null || !(text != string.Empty)) ? -1 : int.Parse(text);
		bool flag = num > 0;
		if (flag)
		{
			ServerListScreen.loadScreen = true;
			GameCanvas.loadBG(0);
		}
		ServerListScreen.bigOk = true;
		this.cmd[2 + this.nCmdPlay].caption = mResources.server + ": " + ServerListScreen.nameServer[ServerListScreen.ipSelect];
		this.center = new Command(string.Empty, this, this.cmd[ServerListScreen.selected].idAction, null);
		this.cmd[1 + this.nCmdPlay].caption = mResources.change_account;
		bool flag2 = this.cmd.Length == 4 + this.nCmdPlay;
		if (flag2)
		{
			this.cmd[3 + this.nCmdPlay].caption = mResources.option;
		}
		global::Char.isLoadingMap = false;
		mSystem.resetCurInapp();
		base.switchToMe();
	}

	// Token: 0x060009C7 RID: 2503 RVA: 0x000A2824 File Offset: 0x000A0A24
	public void switchToMe2()
	{
		GameScr.cmy = 0;
		GameScr.cmx = 0;
		this.initCommand();
		ServerListScreen.isWait = false;
		GameCanvas.loginScr = null;
		string text = Rms.loadRMSString("ResVersion");
		int num = (text == null || !(text != string.Empty)) ? -1 : int.Parse(text);
		bool flag = num > 0;
		if (flag)
		{
			ServerListScreen.loadScreen = true;
			GameCanvas.loadBG(0);
		}
		ServerListScreen.bigOk = true;
		this.cmd[2 + this.nCmdPlay].caption = mResources.server + ": " + ServerListScreen.nameServer[ServerListScreen.ipSelect];
		this.center = new Command(string.Empty, this, this.cmd[ServerListScreen.selected].idAction, null);
		this.cmd[1 + this.nCmdPlay].caption = mResources.change_account;
		bool flag2 = this.cmd.Length == 4 + this.nCmdPlay;
		if (flag2)
		{
			this.cmd[3 + this.nCmdPlay].caption = mResources.option;
		}
		mSystem.resetCurInapp();
		base.switchToMe();
	}

	// Token: 0x060009C8 RID: 2504 RVA: 0x000A293B File Offset: 0x000A0B3B
	public void connectOk()
	{
	}

	// Token: 0x060009C9 RID: 2505 RVA: 0x000A2940 File Offset: 0x000A0B40
	public void cancel()
	{
		bool flag = GameCanvas.serverScreen == null;
		if (flag)
		{
			GameCanvas.serverScreen = new ServerListScreen();
		}
		ServerListScreen.demPercent = 0;
		ServerListScreen.percent = 0;
		ServerListScreen.stopDownload = true;
		GameCanvas.serverScreen.show2();
		ServerListScreen.isGetData = false;
		ServerListScreen.cmdDownload.isFocus = true;
		this.center = new Command(string.Empty, this, 2, null);
	}

	// Token: 0x060009CA RID: 2506 RVA: 0x000A29A8 File Offset: 0x000A0BA8
	public void perform(int idAction, object p)
	{
		Res.outz("perform " + idAction.ToString());
		bool flag = idAction == 1000;
		if (flag)
		{
			GameCanvas.connect();
		}
		bool flag2 = idAction == 1 || idAction == 4;
		if (flag2)
		{
			Session_ME.gI().close();
			ServerListScreen.isAutoConect = false;
			ServerListScreen.countDieConnect = 0;
			ServerListScreen.loadScreen = true;
			ServerListScreen.testConnect = 0;
			ServerListScreen.isGetData = false;
			mSystem.println(">>>>>isGetData: " + ServerListScreen.isGetData.ToString());
			Rms.clearAll();
			this.switchToMe();
		}
		bool flag3 = idAction == 2;
		if (flag3)
		{
			ServerListScreen.stopDownload = false;
			ServerListScreen.cmdDownload = new Command(mResources.huy, this, 4, null);
			ServerListScreen.cmdDownload.x = GameCanvas.w / 2 - mScreen.cmdW / 2;
			ServerListScreen.cmdDownload.y = GameCanvas.hh + 65;
			this.right = null;
			bool flag4 = !GameCanvas.isTouch;
			if (flag4)
			{
				ServerListScreen.cmdDownload.x = GameCanvas.w / 2 - mScreen.cmdW / 2;
				ServerListScreen.cmdDownload.y = GameCanvas.h - mScreen.cmdH - 1;
			}
			this.center = new Command(string.Empty, this, 4, null);
			bool flag5 = !ServerListScreen.isGetData;
			if (flag5)
			{
				Service.gI().getResource(1, null);
				bool flag6 = !GameCanvas.isTouch;
				if (flag6)
				{
					ServerListScreen.cmdDownload.isFocus = true;
					this.center = new Command(string.Empty, this, 4, null);
					mSystem.println(">>>>>isGetData: " + ServerListScreen.isGetData.ToString());
				}
				ServerListScreen.isGetData = true;
			}
		}
		bool flag7 = idAction == 3;
		if (flag7)
		{
			Res.outz("toi day");
			this.Login_New();
		}
		bool flag8 = idAction == 10100;
		if (flag8)
		{
			bool flag9 = GameCanvas.loginScr == null;
			if (flag9)
			{
				GameCanvas.loginScr = new LoginScr();
			}
			GameCanvas.loginScr.switchToMe();
			GameCanvas.connect();
			Service.gI().login2(string.Empty);
			Res.outz("tao user ao");
			GameCanvas.startWaitDlg();
			LoginScr.serverName = ServerListScreen.nameServer[ServerListScreen.ipSelect];
		}
		bool flag10 = idAction == 5;
		if (flag10)
		{
			ServerListScreen.doUpdateServer();
			bool flag11 = ServerListScreen.nameServer.Length == 1;
			if (flag11)
			{
				return;
			}
			MyVector myVector = new MyVector(string.Empty);
			for (int i = 0; i < ServerListScreen.nameServer.Length; i++)
			{
				myVector.addElement(new Command(ServerListScreen.nameServer[i], this, 6, null));
			}
			GameCanvas.menu.startAt(myVector, 0);
			bool flag12 = !GameCanvas.isTouch;
			if (flag12)
			{
				GameCanvas.menu.menuSelectedItem = ServerListScreen.ipSelect;
			}
		}
		bool flag13 = idAction == 6;
		if (flag13)
		{
			ServerListScreen.SetIpSelect(GameCanvas.menu.menuSelectedItem, false);
			this.selectServer();
		}
		bool flag14 = idAction == 7;
		if (flag14)
		{
			bool flag15 = GameCanvas.loginScr == null;
			if (flag15)
			{
				GameCanvas.loginScr = new LoginScr();
			}
			GameCanvas.loginScr.switchToMe();
		}
		bool flag16 = idAction == 8;
		if (flag16)
		{
			bool flag17 = Rms.loadRMSInt("lowGraphic") == 1;
			MyVector myVector2 = new MyVector("cau hinh");
			myVector2.addElement(new Command(mResources.cauhinhthap, this, 9, null));
			myVector2.addElement(new Command(mResources.cauhinhcao, this, 10, null));
			GameCanvas.menu.startAt(myVector2, 0);
			bool flag18 = flag17;
			if (flag18)
			{
				GameCanvas.menu.menuSelectedItem = 0;
			}
			else
			{
				GameCanvas.menu.menuSelectedItem = 1;
			}
		}
		bool flag19 = idAction == 9;
		if (flag19)
		{
			Rms.saveRMSInt("lowGraphic", 1);
			GameCanvas.startOK(mResources.plsRestartGame, 8885, null);
		}
		bool flag20 = idAction == 10;
		if (flag20)
		{
			Rms.saveRMSInt("lowGraphic", 0);
			GameCanvas.startOK(mResources.plsRestartGame, 8885, null);
		}
		bool flag21 = idAction == 11;
		if (flag21)
		{
			bool flag22 = GameCanvas.loginScr == null;
			if (flag22)
			{
				GameCanvas.loginScr = new LoginScr();
			}
			GameCanvas.loginScr.switchToMe();
			string text = Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString());
			bool flag23 = text == null || text.Equals(string.Empty);
			if (flag23)
			{
				Service.gI().login2(string.Empty);
			}
			else
			{
				GameCanvas.loginScr.isLogin2 = true;
				GameCanvas.connect();
				Service.gI().setClientType();
				Service.gI().login(text, string.Empty, GameMidlet.VERSION, 1);
			}
			GameCanvas.startWaitDlg(mResources.PLEASEWAIT);
			Res.outz("tao user ao");
		}
		bool flag24 = idAction == 12;
		if (flag24)
		{
			GameMidlet.instance.exit();
		}
		bool flag25 = idAction == 13 && (!ServerListScreen.isGetData || ServerListScreen.loadScreen);
		if (flag25)
		{
			switch (mSystem.clientType)
			{
			case 1:
				mSystem.callHotlineJava();
				break;
			case 3:
			case 5:
				mSystem.callHotlineIphone();
				break;
			case 4:
				mSystem.callHotlinePC();
				break;
			case 6:
				mSystem.callHotlineWindowsPhone();
				break;
			}
		}
		bool flag26 = idAction == 14;
		if (flag26)
		{
			Command cmdYes = new Command(mResources.YES, GameCanvas.serverScreen, 15, null);
			Command cmdNo = new Command(mResources.NO, GameCanvas.serverScreen, 16, null);
			GameCanvas.startYesNoDlg(mResources.deletaDataNote, cmdYes, cmdNo);
		}
		bool flag27 = idAction == 15;
		if (flag27)
		{
			Rms.clearAll();
			GameCanvas.startOK(mResources.plsRestartGame, 8885, null);
		}
		bool flag28 = idAction == 16;
		if (flag28)
		{
			InfoDlg.hide();
			GameCanvas.currentDialog = null;
		}
		bool flag29 = idAction == 17;
		if (flag29)
		{
			bool flag30 = GameCanvas.serverScr == null;
			if (flag30)
			{
				GameCanvas.serverScr = new ServerScr();
			}
			GameCanvas.serverScr.switchToMe();
		}
		bool flag31 = idAction == 18;
		if (flag31)
		{
			GameCanvas.endDlg();
			InfoDlg.hide();
			bool flag32 = GameCanvas.serverScr == null;
			if (flag32)
			{
				GameCanvas.serverScr = new ServerScr();
			}
			GameCanvas.serverScr.switchToMe();
		}
		bool flag33 = idAction == 19;
		if (flag33)
		{
			bool flag34 = mSystem.clientType == 1;
			if (flag34)
			{
				InfoDlg.hide();
				GameCanvas.currentDialog = null;
			}
			else
			{
				ServerListScreen.countDieConnect = 0;
				ServerListScreen.testConnect = 0;
				ServerListScreen.isAutoConect = true;
			}
		}
	}

	// Token: 0x060009CB RID: 2507 RVA: 0x000A3028 File Offset: 0x000A1228
	public void init()
	{
		bool flag = !ServerListScreen.loadScreen;
		if (flag)
		{
			ServerListScreen.cmdDownload = new Command(mResources.taidulieu, this, 2, null);
			ServerListScreen.cmdDownload.isFocus = true;
			ServerListScreen.cmdDownload.x = GameCanvas.w / 2 - mScreen.cmdW / 2;
			ServerListScreen.cmdDownload.y = GameCanvas.hh + 45;
			bool flag2 = ServerListScreen.cmdDownload.y > GameCanvas.h - 26;
			if (flag2)
			{
				ServerListScreen.cmdDownload.y = GameCanvas.h - 26;
			}
		}
		bool flag3 = !GameCanvas.isTouch;
		if (flag3)
		{
			ServerListScreen.selected = 0;
			this.processInput();
		}
	}

	// Token: 0x060009CC RID: 2508 RVA: 0x000A30D4 File Offset: 0x000A12D4
	public void show2()
	{
		Debug.LogError(">>>>ServerListScreen show2: ");
		GameScr.cmx = 0;
		GameScr.cmy = 0;
		this.initCommand();
		ServerListScreen.loadScreen = false;
		ServerListScreen.percent = 0;
		ServerListScreen.bigOk = false;
		ServerListScreen.isGetData = false;
		ServerListScreen.p = 0;
		ServerListScreen.demPercent = 0;
		ServerListScreen.strWait = mResources.PLEASEWAIT;
		global::Char.isLoadingMap = false;
		this.init();
		base.switchToMe();
	}

	// Token: 0x060009CD RID: 2509 RVA: 0x000A3144 File Offset: 0x000A1344
	public void setLinkDefault(sbyte language)
	{
		bool flag = language == 2;
		if (flag)
		{
			bool flag2 = mSystem.clientType == 1;
			if (flag2)
			{
				ServerListScreen.linkDefault = ServerListScreen.javaIn;
			}
			else
			{
				ServerListScreen.linkDefault = ServerListScreen.smartPhoneIn;
			}
		}
		else
		{
			bool flag3 = language == 1;
			if (flag3)
			{
				ServerListScreen.linkDefault = ServerListScreen.javaE;
				bool flag4 = mSystem.clientType == 1;
				if (flag4)
				{
					ServerListScreen.linkDefault = ServerListScreen.javaE;
				}
				else
				{
					ServerListScreen.linkDefault = ServerListScreen.smartPhoneE;
				}
			}
			else
			{
				ServerListScreen.linkDefault = ServerListScreen.javaVN;
				bool flag5 = mSystem.clientType == 1;
				if (flag5)
				{
					ServerListScreen.linkDefault = ServerListScreen.javaVN;
				}
				else
				{
					ServerListScreen.linkDefault = ServerListScreen.smartPhoneVN;
				}
			}
		}
		mSystem.AddIpTest();
	}

	// Token: 0x060009CE RID: 2510 RVA: 0x000A31FC File Offset: 0x000A13FC
	public static void ConnectIP()
	{
		GameMidlet.IP = ServerListScreen.address[ServerListScreen.ipSelect];
		GameMidlet.PORT = (int)ServerListScreen.port[ServerListScreen.ipSelect];
		mResources.loadLanguague(ServerListScreen.language[ServerListScreen.ipSelect]);
		LoginScr.serverName = ServerListScreen.nameServer[ServerListScreen.ipSelect];
		GameCanvas.connect();
	}

	// Token: 0x060009CF RID: 2511 RVA: 0x000A3254 File Offset: 0x000A1454
	public static void SetIpSelect(int index, bool issave)
	{
		Debug.LogError(">>>>SetIpSelect: " + index.ToString() + "  save:" + issave.ToString());
		ServerListScreen.ipSelect = index;
		bool flag = issave;
		if (flag)
		{
			Rms.saveRMSInt(ServerListScreen.RMS_svselect, ServerListScreen.ipSelect);
			Res.err("2>>>saveRMSInt:  RMS_svselect == " + ServerListScreen.ipSelect.ToString());
		}
	}

	// Token: 0x060009D0 RID: 2512 RVA: 0x000A32BC File Offset: 0x000A14BC
	public void Login_New()
	{
		bool flag = GameCanvas.loginScr == null;
		if (flag)
		{
			GameCanvas.loginScr = new LoginScr();
		}
		GameCanvas.loginScr.switchToMe();
		bool flag2 = false;
		bool flag3 = false;
		string text = Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString());
		try
		{
			bool flag4 = !Rms.loadRMSString("acc").Equals(string.Empty);
			if (flag4)
			{
				flag2 = true;
			}
			bool flag5 = !text.Equals(string.Empty);
			if (flag5)
			{
				flag3 = true;
			}
		}
		catch (Exception)
		{
		}
		GameCanvas.connect();
		Service.gI().setClientType();
		bool flag6 = !flag2 && !flag3;
		if (flag6)
		{
			bool flag7 = text == null || text.Equals(string.Empty);
			if (flag7)
			{
				Service.gI().login2(string.Empty);
			}
			else
			{
				GameCanvas.loginScr.isLogin2 = true;
				Service.gI().login(text, string.Empty, GameMidlet.VERSION, 1);
			}
			Rms.saveRMSInt(ServerListScreen.RMS_svselect, ServerListScreen.ipSelect);
			bool connected = Session_ME.connected;
			if (connected)
			{
				GameCanvas.startWaitDlg();
			}
			else
			{
				GameCanvas.startOK(mResources.maychutathoacmatsong + " [3]", 8884, null);
			}
		}
		else
		{
			GameCanvas.loginScr.doLogin();
		}
		LoginScr.serverName = ServerListScreen.nameServer[ServerListScreen.ipSelect];
	}

	// Token: 0x060009D1 RID: 2513 RVA: 0x000A3434 File Offset: 0x000A1634
	public static void LoadRMS_ExtraLink()
	{
		sbyte[] array = Rms.loadRMS(ServerListScreen.RMS_NR_Extralink);
		bool flag = array == null;
		if (flag)
		{
			Controller.isEXTRA_LINK = false;
		}
		else
		{
			DataInputStream dataInputStream = new DataInputStream(array);
			bool flag2 = dataInputStream == null;
			if (!flag2)
			{
				try
				{
					sbyte b = dataInputStream.readByte();
					ServerListScreen.typeClass = new sbyte[(int)b];
					ServerListScreen.listChar = new global::Char[(int)b];
					for (int i = 0; i < (int)b; i++)
					{
						ServerListScreen.typeClass[i] = dataInputStream.readByte();
						bool flag3 = ServerListScreen.typeClass[i] > -1;
						if (flag3)
						{
							ServerListScreen.isHaveChar = true;
							ServerListScreen.listChar[i] = new global::Char();
							ServerListScreen.listChar[i].cgender = (int)ServerListScreen.typeClass[i];
							ServerListScreen.listChar[i].head = (int)dataInputStream.readShort();
							ServerListScreen.listChar[i].body = (int)dataInputStream.readShort();
							ServerListScreen.listChar[i].leg = (int)dataInputStream.readShort();
							ServerListScreen.listChar[i].bag = (int)dataInputStream.readShort();
							ServerListScreen.listChar[i].cName = dataInputStream.readUTF();
						}
					}
					dataInputStream.close();
					Controller.isEXTRA_LINK = true;
				}
				catch (Exception)
				{
				}
			}
		}
	}

	// Token: 0x060009D2 RID: 2514 RVA: 0x000A3588 File Offset: 0x000A1788
	public static void saveRMS_ExtraLink()
	{
		bool flag = ServerListScreen.typeClass == null;
		if (!flag)
		{
			DataOutputStream dataOutputStream = new DataOutputStream();
			try
			{
				dataOutputStream.writeByte((sbyte)ServerListScreen.typeClass.Length);
				for (int i = 0; i < ServerListScreen.typeClass.Length; i++)
				{
					dataOutputStream.writeByte(ServerListScreen.typeClass[i]);
					bool flag2 = ServerListScreen.typeClass[i] > -1 && ServerListScreen.listChar != null && ServerListScreen.listChar[i] != null;
					if (flag2)
					{
						dataOutputStream.writeShort((short)ServerListScreen.listChar[i].head);
						dataOutputStream.writeShort((short)ServerListScreen.listChar[i].body);
						dataOutputStream.writeShort((short)ServerListScreen.listChar[i].leg);
						dataOutputStream.writeShort((short)ServerListScreen.listChar[i].bag);
						dataOutputStream.writeUTF(ServerListScreen.listChar[i].cName);
					}
				}
				Rms.saveRMS(ServerListScreen.RMS_NR_Extralink, dataOutputStream.toByteArray());
				dataOutputStream.close();
				SplashScr.loadIP();
			}
			catch (Exception)
			{
			}
		}
	}

	// Token: 0x060009D3 RID: 2515 RVA: 0x000A36AC File Offset: 0x000A18AC
	public void Set_UI_New()
	{
		bool flag = !GameCanvas.isTouch;
		if (!flag)
		{
			ServerListScreen.isNewUI = true;
			this.cmd_New_Ui = new Command[2];
			int num = GameCanvas.hh - 15 * this.cmd_New_Ui.Length + 28;
			for (int i = 0; i < this.cmd_New_Ui.Length; i++)
			{
				int num2 = i;
				int num3 = num2;
				if (num3 != 0)
				{
					if (num3 == 1)
					{
						this.cmd_New_Ui[1] = new Command(mResources.change_account, this, 7, null);
					}
				}
				else
				{
					this.cmd_New_Ui[0] = new Command(string.Empty, this, 3, null);
					this.cmd_New_Ui[0].caption = mResources.playNew;
					bool flag2 = Rms.loadRMS("userAo" + ServerListScreen.ipSelect.ToString()) != null;
					if (flag2)
					{
						this.cmd_New_Ui[0].caption = mResources.choitiep;
					}
				}
				this.cmd_New_Ui[i].y = num;
				this.cmd_New_Ui[i].setType();
				this.cmd_New_Ui[i].x = (GameCanvas.w - this.cmd_New_Ui[i].w) / 2;
				num += 30;
			}
		}
	}

	// Token: 0x060009D4 RID: 2516 RVA: 0x000A37E0 File Offset: 0x000A19E0
	public void paint_UI_New(mGraphics g)
	{
		bool flag = ServerListScreen.isNewUI;
		if (flag)
		{
			for (int i = 0; i < this.cmd_New_Ui.Length; i++)
			{
				this.cmd_New_Ui[i].paint(g);
			}
		}
	}

	// Token: 0x060009D5 RID: 2517 RVA: 0x000A3824 File Offset: 0x000A1A24
	public static void CheckBack_ServerListScreen()
	{
		bool flag = GameCanvas.serverScreen == null;
		if (flag)
		{
			GameCanvas.serverScreen = new ServerListScreen();
		}
		bool flag2 = false;
		bool flag3 = false;
		try
		{
			bool flag4 = !Rms.loadRMSString("acc").Equals(string.Empty);
			if (flag4)
			{
				flag2 = true;
			}
			bool flag5 = !Rms.loadRMSString("userAo" + ServerListScreen.ipSelect.ToString()).Equals(string.Empty);
			if (flag5)
			{
				flag3 = true;
			}
		}
		catch (Exception)
		{
		}
		Debug.LogError(">>>>CheckBack_ServerListScreen: " + ServerListScreen.ipSelect.ToString() + "  auto login:" + ServerListScreen.isAutoLogin.ToString());
		bool flag6 = ServerListScreen.ipSelect == -1 || !ServerListScreen.isAutoLogin;
		if (flag6)
		{
			GameCanvas.serverScreen.switchToMe();
		}
		else
		{
			bool flag7 = !flag2 && !flag3;
			if (flag7)
			{
				GameCanvas.serverScreen.switchToMe();
			}
			else
			{
				Controller.isEXTRA_LINK = false;
				GameCanvas.serverScreen.switchToMe();
				GameCanvas.serverScreen.Login_New();
			}
		}
	}

	// Token: 0x040011E1 RID: 4577
	public static string[] nameServer;

	// Token: 0x040011E2 RID: 4578
	public static string[] address;

	// Token: 0x040011E3 RID: 4579
	public static sbyte serverPriority;

	// Token: 0x040011E4 RID: 4580
	public static bool[] hasConnected;

	// Token: 0x040011E5 RID: 4581
	public static short[] port;

	// Token: 0x040011E6 RID: 4582
	public static int selected;

	// Token: 0x040011E7 RID: 4583
	public static bool isWait;

	// Token: 0x040011E8 RID: 4584
	public static Command cmdUpdateServer;

	// Token: 0x040011E9 RID: 4585
	public static sbyte[] language;

	// Token: 0x040011EA RID: 4586
	public static sbyte[] typeSv;

	// Token: 0x040011EB RID: 4587
	public static sbyte[] isNew;

	// Token: 0x040011EC RID: 4588
	public static sbyte[] typeClass;

	// Token: 0x040011ED RID: 4589
	public static global::Char[] listChar;

	// Token: 0x040011EE RID: 4590
	public static bool isHaveChar;

	// Token: 0x040011EF RID: 4591
	private Command[] cmd;

	// Token: 0x040011F0 RID: 4592
	private Command cmdCallHotline;

	// Token: 0x040011F1 RID: 4593
	private int nCmdPlay;

	// Token: 0x040011F2 RID: 4594
	public static Command cmdDeleteRMS;

	// Token: 0x040011F3 RID: 4595
	private int lY;

	// Token: 0x040011F4 RID: 4596
	public static string smartPhoneVN = "Vũ trụ 1:dragon1.teamobi.com:14445:0:0:0,Vũ trụ 2:dragon2.teamobi.com:14445:0:0:0,Vũ trụ 3:dragon3.teamobi.com:14445:0:0:0,Vũ trụ 4:dragon4.teamobi.com:14445:0:0:0,Vũ trụ 5:dragon5.teamobi.com:14445:0:0:0,Vũ trụ 6:dragon6.teamobi.com:14445:0:0:0,Vũ trụ 7:dragon7.teamobi.com:14445:0:0:0,Vũ trụ 8:dragon10.teamobi.com:14446:0:0:0,Vũ trụ 9:dragon10.teamobi.com:14447:0:0:0,Vũ trụ 10:dragon10.teamobi.com:14445:0:0:0,Vũ trụ 11:dragon11.teamobi.com:14445:0:0:0,Võ đài liên vũ trụ:dragonwar.teamobi.com:20000:0:0:0,Universe 1:dragon.indonaga.com:14445:1:0:0,Naga:dragon.indonaga.com:14446:2:0:0,0,0";

	// Token: 0x040011F5 RID: 4597
	public static string javaVN = "Vũ trụ 1:112.213.94.23:14445:0:0:0,Vũ trụ 2:210.211.109.199:14445:0:0:0,Vũ trụ 3:112.213.85.88:14445:0:0:0,Vũ trụ 4:27.0.12.164:14445:0:0:0,Vũ trụ 5:27.0.12.16:14445:0:0:0,Vũ trụ 6:27.0.12.173:14445:0:0:0,Vũ trụ 7:112.213.94.223:14445:0:0:0,Vũ trụ 8:27.0.14.66:14446:0:0:0,Vũ trụ 9:27.0.14.66:14447:0:0:0,Vũ trụ 10:27.0.14.66:14445:0:0:0,Vũ trụ 11:112.213.85.35:14445:0:0:0,Võ đài liên vũ trụ:27.0.12.173:20000:0:0:0,Universe 1:52.74.230.22:14445:1:0:0,Naga:52.74.230.22:14446:2:0:0,0,0";

	// Token: 0x040011F6 RID: 4598
	public static string smartPhoneIn = "Naga:dragon.indonaga.com:14446:2:0:0,2,0";

	// Token: 0x040011F7 RID: 4599
	public static string javaIn = "Naga:52.74.230.22:14446:2:0:0,2,0";

	// Token: 0x040011F8 RID: 4600
	public static string smartPhoneE = "Universe 1:dragon.indonaga.com:14445:1:0:0,1,0";

	// Token: 0x040011F9 RID: 4601
	public static string javaE = "Universe 1:52.74.230.22:14445:1:0:0,1,0";

	// Token: 0x040011FA RID: 4602
	public static string linkGetHost = "http://112.213.94.23/mod/server_extra.php";

	// Token: 0x040011FB RID: 4603
	public static string linkDefault = ServerListScreen.javaVN;

	// Token: 0x040011FC RID: 4604
	public const sbyte languageVersion = 2;

	// Token: 0x040011FD RID: 4605
	public new int keyTouch = -1;

	// Token: 0x040011FE RID: 4606
	private int tam;

	// Token: 0x040011FF RID: 4607
	public static bool stopDownload;

	// Token: 0x04001200 RID: 4608
	public static string linkweb = "http://ngocrongonline.com";

	// Token: 0x04001201 RID: 4609
	public static int countDieConnect;

	// Token: 0x04001202 RID: 4610
	public static bool waitToLogin;

	// Token: 0x04001203 RID: 4611
	public static int tWaitToLogin;

	// Token: 0x04001204 RID: 4612
	public static long count_reConnect;

	// Token: 0x04001205 RID: 4613
	public static string RMS_NRlink = "NRlink3";

	// Token: 0x04001206 RID: 4614
	public static int ipSelect;

	// Token: 0x04001207 RID: 4615
	public static int flagServer;

	// Token: 0x04001208 RID: 4616
	public static bool bigOk;

	// Token: 0x04001209 RID: 4617
	public static int percent;

	// Token: 0x0400120A RID: 4618
	public static string strWait;

	// Token: 0x0400120B RID: 4619
	public static int nBig;

	// Token: 0x0400120C RID: 4620
	public static int nBg;

	// Token: 0x0400120D RID: 4621
	public static int demPercent;

	// Token: 0x0400120E RID: 4622
	public static int maxBg;

	// Token: 0x0400120F RID: 4623
	public static bool isGetData = false;

	// Token: 0x04001210 RID: 4624
	public static Command cmdDownload;

	// Token: 0x04001211 RID: 4625
	private Command cmdStart;

	// Token: 0x04001212 RID: 4626
	public string dataSize;

	// Token: 0x04001213 RID: 4627
	public static int p;

	// Token: 0x04001214 RID: 4628
	public static int testConnect = -1;

	// Token: 0x04001215 RID: 4629
	public static bool loadScreen;

	// Token: 0x04001216 RID: 4630
	public static bool isAutoConect = true;

	// Token: 0x04001217 RID: 4631
	public static string RMS_svselect = "svselect";

	// Token: 0x04001218 RID: 4632
	public static string RMS_NR_Extralink = "NRlink_extra";

	// Token: 0x04001219 RID: 4633
	private Command[] cmd_New_Ui;

	// Token: 0x0400121A RID: 4634
	public static bool isNewUI;

	// Token: 0x0400121B RID: 4635
	public static bool isAutoLogin = true;
}
using System;

// Token: 0x020000BA RID: 186
public class ServerScr : mScreen, IActionListener
{
	// Token: 0x060009D7 RID: 2519 RVA: 0x000A39E0 File Offset: 0x000A1BE0
	public ServerScr()
	{
		TileMap.bgID = (int)((byte)(mSystem.currentTimeMillis() % 9L));
		bool flag = TileMap.bgID == 5 || TileMap.bgID == 6;
		if (flag)
		{
			TileMap.bgID = 4;
		}
		GameScr.loadCamera(true, -1, -1);
		GameScr.cmx = 100;
		GameScr.cmy = 200;
	}

	// Token: 0x060009D8 RID: 2520 RVA: 0x000A3AD4 File Offset: 0x000A1CD4
	public override void switchToMe()
	{
		Res.outz("switchToMe >>>>ServerScr: " + Rms.loadRMSInt(ServerListScreen.RMS_svselect).ToString());
		SoundMn.gI().stopAll();
		base.switchToMe();
		this.loadIconHead();
		this.mainSelect = ServerListScreen.ipSelect;
		this.numw = 1;
		this.numh = 1;
		this.Load_NewUI();
		bool flag = !this.isPaintNewUi && !this.isChooseArea;
		if (flag)
		{
			this.cmdGlobal = new Command(this.strArea[0], this, 98, null);
			this.cmdGlobal.x = 0;
			this.cmdGlobal.y = 0;
			this.cmdVietNam = new Command(this.strArea[1], this, 97, null);
			this.cmdVietNam.x = 50;
			this.cmdVietNam.y = 0;
			this.vecServer = new MyVector();
			this.vecServer.addElement(this.cmdGlobal);
			this.vecServer.addElement(this.cmdVietNam);
			this.sort();
		}
	}

	// Token: 0x060009D9 RID: 2521 RVA: 0x000A3BF0 File Offset: 0x000A1DF0
	private void sort()
	{
		this.mainSelect = ServerListScreen.ipSelect;
		this.w2c = 5;
		this.wc = 76;
		this.hc = mScreen.cmdH;
		this.numw = 2;
		bool flag = this.vecServer.size() > 2;
		if (flag)
		{
			this.numw = GameCanvas.w / (this.wc + this.w2c);
		}
		this.numh = this.vecServer.size() / this.numw + ((this.vecServer.size() % this.numw != 0) ? 1 : 0);
		for (int i = 0; i < this.vecServer.size(); i++)
		{
			Command command = (Command)this.vecServer.elementAt(i);
			bool flag2 = command != null;
			if (flag2)
			{
				int num = GameCanvas.hw - this.numw * (this.wc + this.w2c) / 2;
				int num2 = num + i % this.numw * (this.wc + this.w2c);
				int num3 = GameCanvas.hh - this.numh * (this.hc + this.w2c) / 2;
				int num4 = num3 + i / this.numw * (this.hc + this.w2c);
				command.x = num2;
				command.y = num4;
				command.w = this.wc;
			}
		}
	}

	// Token: 0x060009DA RID: 2522 RVA: 0x000A3D5C File Offset: 0x000A1F5C
	private void sort_newUI()
	{
		this.mainSelect = ServerListScreen.ipSelect;
		this.w2c = 5;
		this.wc = 76;
		this.hc = mScreen.cmdH;
		this.numw = 1;
		int num = this.xsub + this.wsub / 2 + 3;
		this.ysubpaint = this.ysub + 5;
		this.numw = this.wsub / (this.wc + this.w2c);
		this.numh = this.vecServer.size() / this.numw + ((this.vecServer.size() % this.numw != 0) ? 1 : 0);
		this.xsubpaint = num - this.numw * (this.wc + this.w2c) / 2;
		for (int i = 0; i < this.vecServer.size(); i++)
		{
			Command command = (Command)this.vecServer.elementAt(i);
			bool flag = command != null;
			if (flag)
			{
				int num2 = this.xsubpaint + i % this.numw * (this.wc + this.w2c);
				int num3 = this.ysubpaint + i / this.numw * (this.hc + this.w2c);
				command.x = num2;
				command.y = num3;
				command.w = this.wc;
			}
		}
		this.list = new ListNew(this.xsub, this.ysub, this.wsub, this.hsub, 0, 0, 0, true);
		this.list.setMaxCamera(this.numh * (this.hc + this.w2c) - this.hsub);
		this.list.resetList();
	}

	// Token: 0x060009DB RID: 2523 RVA: 0x000A3F10 File Offset: 0x000A2110
	public override void update()
	{
		GameScr.cmx++;
		bool flag = GameScr.cmx > GameCanvas.w * 3 + 100;
		if (flag)
		{
			GameScr.cmx = 100;
		}
		bool flag2 = !this.isPaintNewUi;
		if (flag2)
		{
			for (int i = 0; i < this.vecServer.size(); i++)
			{
				Command command = (Command)this.vecServer.elementAt(i);
				bool flag3 = !GameCanvas.isTouch;
				if (flag3)
				{
					bool flag4 = i == this.mainSelect;
					if (flag4)
					{
						bool flag5 = GameCanvas.gameTick % 10 < 4;
						if (flag5)
						{
							command.isFocus = true;
						}
						else
						{
							command.isFocus = false;
						}
						this.cmdCheck = new Command(mResources.SELECT, this, command.idAction, null);
						this.center = this.cmdCheck;
					}
					else
					{
						command.isFocus = false;
					}
				}
				else
				{
					bool flag6 = command != null && command.isPointerPressInside();
					if (flag6)
					{
						command.performAction();
					}
				}
			}
		}
		this.UpdTouch_NewUI();
		this.UpdTouch_NewUI_Popup();
		ServerListScreen.updateDeleteData();
	}

	// Token: 0x060009DC RID: 2524 RVA: 0x000A4038 File Offset: 0x000A2238
	public override void paint(mGraphics g)
	{
		GameCanvas.paintBGGameScr(g);
		bool flag = this.isChooseArea;
		if (flag)
		{
			this.paintChooseArea(g);
		}
		else
		{
			bool flag2 = this.isPaintNewUi;
			if (flag2)
			{
				this.paintNewSelectMenu(g);
				bool flag3 = ServerListScreen.cmdDeleteRMS != null;
				if (flag3)
				{
					mFont.tahoma_7_white.drawString(g, mResources.xoadulieu, GameCanvas.w - 2, GameCanvas.h - 15, 1, mFont.tahoma_7_grey);
				}
			}
			else
			{
				for (int i = 0; i < this.vecServer.size(); i++)
				{
					bool flag4 = this.vecServer.elementAt(i) != null;
					if (flag4)
					{
						((Command)this.vecServer.elementAt(i)).paint(g);
					}
				}
			}
		}
		base.paint(g);
	}

	// Token: 0x060009DD RID: 2525 RVA: 0x000A4108 File Offset: 0x000A2308
	public override void updateKey()
	{
		base.updateKey();
		int num = this.mainSelect % this.numw;
		int num2 = this.mainSelect / this.numw;
		bool flag = GameCanvas.keyPressed[4];
		if (flag)
		{
			bool flag2 = num > 0;
			if (flag2)
			{
				this.mainSelect--;
			}
			GameCanvas.keyPressed[4] = false;
		}
		else
		{
			bool flag3 = GameCanvas.keyPressed[6];
			if (flag3)
			{
				bool flag4 = num < this.numw - 1;
				if (flag4)
				{
					this.mainSelect++;
				}
				GameCanvas.keyPressed[6] = false;
			}
			else
			{
				bool flag5 = GameCanvas.keyPressed[2];
				if (flag5)
				{
					bool flag6 = num2 > 0;
					if (flag6)
					{
						this.mainSelect -= this.numw;
					}
					GameCanvas.keyPressed[2] = false;
				}
				else
				{
					bool flag7 = GameCanvas.keyPressed[8];
					if (flag7)
					{
						bool flag8 = num2 < this.numh - 1;
						if (flag8)
						{
							this.mainSelect += this.numw;
						}
						GameCanvas.keyPressed[8] = false;
					}
				}
			}
		}
		bool flag9 = this.mainSelect < 0;
		if (flag9)
		{
			this.mainSelect = 0;
		}
		bool flag10 = this.mainSelect >= this.vecServer.size();
		if (flag10)
		{
			this.mainSelect = this.vecServer.size() - 1;
		}
		bool flag11 = GameCanvas.keyPressed[5];
		if (flag11)
		{
			((Command)this.vecServer.elementAt(num)).performAction();
			GameCanvas.keyPressed[5] = false;
		}
		GameCanvas.clearKeyPressed();
	}

	// Token: 0x060009DE RID: 2526 RVA: 0x000A4298 File Offset: 0x000A2498
	public void perform(int idAction, object p)
	{
		Res.outz("idAction >>>>   " + idAction.ToString());
		int num = idAction;
		int num2 = num;
		switch (num2)
		{
		case 97:
		{
			bool flag = this.isPaintNewUi;
			if (!flag)
			{
				this.vecServer.removeAllElements();
				for (int i = 0; i < ServerListScreen.nameServer.Length; i++)
				{
					bool flag2 = ServerListScreen.language[i] != 0;
					if (flag2)
					{
						this.vecServer.addElement(new Command(ServerListScreen.nameServer[i], this, 100 + i, null));
					}
				}
				this.sort();
			}
			break;
		}
		case 98:
		{
			bool flag3 = this.isPaintNewUi;
			if (!flag3)
			{
				this.vecServer.removeAllElements();
				for (int j = 0; j < ServerListScreen.nameServer.Length; j++)
				{
					bool flag4 = ServerListScreen.language[j] == 0;
					if (flag4)
					{
						this.vecServer.addElement(new Command(ServerListScreen.nameServer[j], this, 100 + j, null));
					}
				}
				this.sort();
			}
			break;
		}
		case 99:
			Session_ME.gI().clearSendingMessage();
			ServerListScreen.SetIpSelect(this.mainSelect, false);
			GameCanvas.serverScreen.selectServer();
			GameCanvas.serverScreen.switchToMe();
			break;
		default:
			if (num2 != 999)
			{
				Session_ME.gI().close();
				ServerListScreen.SetIpSelect(idAction - 100, true);
				ServerListScreen.ConnectIP();
				bool flag5 = GameCanvas.serverScreen == null;
				if (flag5)
				{
					GameCanvas.serverScreen = new ServerListScreen();
				}
				GameCanvas.serverScreen.selectServer();
				GameCanvas.serverScreen.switchToMe();
			}
			else
			{
				this.Save_RMS_Area();
				this.SetNewSelectMenu((int)this.select_Area, 0);
			}
			break;
		}
	}

	// Token: 0x060009DF RID: 2527 RVA: 0x000A446C File Offset: 0x000A266C
	public void SetNewSelectMenu(int area, int typeSv)
	{
		this.isChooseArea = false;
		bool flag = mSystem.clientType != 1;
		if (flag)
		{
			this.isPaintNewUi = true;
		}
		this.wCheck = 10;
		this.w = GameCanvas.w / 3 * 2;
		this.h = GameCanvas.h / 3 * 2;
		this.x = (GameCanvas.w - this.w) / 2;
		this.y = (GameCanvas.h - this.h) / 2 + 20;
		this.xName = GameCanvas.w / 2;
		this.yName = this.y - 30;
		this.wsub = this.w / 3 * 2;
		this.wPop = this.w - this.wsub - 15;
		bool flag2 = this.wPop < 80;
		if (flag2)
		{
			this.wPop = 80;
			this.wsub = this.w - this.wPop - 15;
		}
		this.hsub = this.h - 10 - this.wCheck;
		this.xsub = this.x + this.w - this.wsub - 5;
		this.ysub = this.y + 5;
		this.xPop = this.x + 5;
		this.yPop = this.y + 5;
		this.hPop = 20;
		this.xinfo = this.x + 5;
		this.yinfo = this.y + this.strTypeSV.Length * (this.hPop + 5) + 5;
		this.winfo = this.wPop;
		this.hinfo = this.h - (5 + this.strTypeSV.Length * (this.hPop + 5) + 5) - this.wCheck;
		this.yBox = 10;
		this.wBox = 70;
		this.hBox = 20;
		this.GetVecTypeSv((sbyte)area, (sbyte)typeSv);
	}

	// Token: 0x060009E0 RID: 2528 RVA: 0x000A4644 File Offset: 0x000A2844
	private void GetVecTypeSv(sbyte area, sbyte typeSv)
	{
		this.vecServer.removeAllElements();
		this.ntypeSv = 1;
		this.select_Area = area;
		mResources.loadLanguague(area);
		for (int i = 0; i < ServerListScreen.nameServer.Length; i++)
		{
			bool flag = area == 1;
			if (flag)
			{
				bool flag2 = ServerListScreen.language[i] != 0 && ServerListScreen.typeSv[i] == 1;
				if (flag2)
				{
					this.ntypeSv = 2;
				}
			}
			else
			{
				bool flag3 = ServerListScreen.typeSv[i] == 1;
				if (flag3)
				{
					this.ntypeSv = 2;
				}
			}
		}
		bool flag4 = typeSv > (sbyte)(this.ntypeSv - 1);
		if (flag4)
		{
			typeSv = (sbyte)(this.ntypeSv - 1);
		}
		this.select_typeSv = typeSv;
		for (int j = 0; j < ServerListScreen.nameServer.Length; j++)
		{
			bool flag5 = area == 1;
			if (flag5)
			{
				bool flag6 = ServerListScreen.language[j] == 0;
				if (!flag6)
				{
					bool flag7 = ServerListScreen.typeSv[j] == 1;
					if (flag7)
					{
						this.ntypeSv = 2;
					}
					bool flag8 = ServerListScreen.typeSv[j] != typeSv;
					if (!flag8)
					{
						int num = -1;
						bool flag9 = ServerListScreen.typeClass != null && j < ServerListScreen.typeClass.Length;
						if (flag9)
						{
							num = (int)ServerListScreen.typeClass[j];
						}
						bool flag10 = !ServerScr.isShowSv_HaveChar || num != -1;
						if (flag10)
						{
							Command command = new Command(ServerListScreen.nameServer[j], this, 100 + j, null);
							command.isPaintNew = (ServerListScreen.isNew[j] == 1);
							bool flag11 = num > -1;
							if (flag11)
							{
								command.imgBtn = ServerScr.iconHead[num];
							}
							this.vecServer.addElement(command);
						}
					}
				}
			}
			else
			{
				bool flag12 = ServerListScreen.typeSv[j] == 1;
				if (flag12)
				{
					this.ntypeSv = 2;
				}
				bool flag13 = ServerListScreen.language[j] != 0 || ServerListScreen.typeSv[j] != typeSv;
				if (!flag13)
				{
					int num2 = -1;
					bool flag14 = ServerListScreen.typeClass != null && j < ServerListScreen.typeClass.Length;
					if (flag14)
					{
						num2 = (int)ServerListScreen.typeClass[j];
					}
					bool flag15 = !ServerScr.isShowSv_HaveChar || num2 != -1;
					if (flag15)
					{
						Command command2 = new Command(ServerListScreen.nameServer[j], this, 100 + j, null);
						command2.isPaintNew = (ServerListScreen.isNew[j] == 1);
						bool flag16 = num2 > -1;
						if (flag16)
						{
							command2.imgBtn = ServerScr.iconHead[num2];
						}
						this.vecServer.addElement(command2);
					}
				}
			}
		}
		this.Sort_NewSv();
		this.sort_newUI();
	}

	// Token: 0x060009E1 RID: 2529 RVA: 0x000A48F8 File Offset: 0x000A2AF8
	private void paintChooseArea(mGraphics g)
	{
		bool flag = this.isChooseArea;
		if (flag)
		{
			this.paint_Area(g, GameCanvas.hw - this.wBox / 2, this.yBox);
			this.paint_Lang(g, GameCanvas.hw + 20, this.yBox);
			this.cmdChooseArea.paint(g);
		}
	}

	// Token: 0x060009E2 RID: 2530 RVA: 0x000A4954 File Offset: 0x000A2B54
	private void paintNewSelectMenu(mGraphics g)
	{
		bool flag = !this.isPaintNewUi;
		if (!flag)
		{
			g.setColor(14601141);
			g.fillRect(this.x, this.y, this.w, this.h);
			PopUp.paintPopUp(g, this.xName - 50, this.yName, 100, 20, 0, true);
			mFont.tahoma_7b_dark.drawString(g, mResources.selectServer2, this.xName, this.yName + 5, 2);
			for (int i = 0; i < this.ntypeSv; i++)
			{
				int num = this.yPop + i * (this.hPop + 5);
				PopUp.paintPopUp(g, this.xPop, num, this.wPop, this.hPop, ((int)this.select_typeSv == i) ? 1 : 0, true);
				mFont.tahoma_7b_dark.drawString(g, this.strTypeSV[i], this.xPop + this.wPop / 2, num + 5, 2);
			}
			g.setColor(10254674);
			g.fillRect(this.xinfo, this.yinfo, this.winfo, this.hinfo);
			string[] array = mFont.tahoma_7.splitFontArray(this.strTypeSV_info[(int)this.select_typeSv], this.winfo - 10);
			for (int j = 0; j < array.Length; j++)
			{
				mFont.tahoma_7_white.drawString(g, array[j], this.xinfo + 5, this.yinfo + 5 + j * 11, 0);
			}
			this.paintShowAllCheck(g);
			this.paint_Area(g, 10, this.yBox);
			this.paint_Lang(g, GameCanvas.w - this.wBox - 10, this.yBox);
			g.setColor(10254674);
			g.fillRect(this.xsub, this.ysub, this.wsub, this.hsub);
			g.setClip(this.xsub, this.ysub, this.wsub, this.hsub);
			g.translate(0, -this.list.cmx);
			for (int k = 0; k < this.vecServer.size(); k++)
			{
				Command command = (Command)this.vecServer.elementAt(k);
				bool flag2 = command != null;
				if (flag2)
				{
					command.paint(g);
					bool flag3 = command.isPaintNew && GameCanvas.gameTick % 10 > 1;
					if (flag3)
					{
						g.drawImage(Panel.imgNew, command.x + 60, command.y, 0);
					}
				}
			}
			GameCanvas.resetTrans(g);
		}
	}

	// Token: 0x060009E3 RID: 2531 RVA: 0x000A4C0C File Offset: 0x000A2E0C
	private void paint_Area(mGraphics g, int x, int y)
	{
		x -= 5;
		this.xPopUp_Area = x;
		PopUp.paintPopUp(g, x, y, this.wBox, this.hBox, 0, true);
		mFont.tahoma_7b_dark.drawString(g, this.strArea[(int)this.select_Area], x + (this.wBox - 10) / 2, y + 5, 2);
		g.drawRegion(Mob.imgHP, 0, 30, 9, 6, 0, x + this.wBox - 10, y + 14, mGraphics.BOTTOM | mGraphics.HCENTER);
		bool flag = !this.isPaint_select_area;
		if (!flag)
		{
			this.yPopUp_Area = y + this.hBox + 5;
			g.setColor(10254674);
			g.fillRect(x, this.yPopUp_Area, this.wBox, this.strArea.Length * this.htext + 1);
			for (int i = 0; i < this.strArea.Length; i++)
			{
				mFont.tahoma_7_white.drawString(g, this.strArea[i], x + this.wBox / 2, this.yPopUp_Area + i * this.htext + 2, 2);
				bool flag2 = (int)this.select_Area == i;
				if (flag2)
				{
					g.setColor(15591444);
					g.drawRect(x + 2, this.yPopUp_Area + i * this.htext + 1, this.wBox - 4, this.htext - 2);
				}
			}
		}
	}

	// Token: 0x060009E4 RID: 2532 RVA: 0x000A4D7A File Offset: 0x000A2F7A
	private void paint_Lang(mGraphics g, int x, int y)
	{
	}

	// Token: 0x060009E5 RID: 2533 RVA: 0x000A4D80 File Offset: 0x000A2F80
	private void UpdTouch_NewUI()
	{
		bool flag = !this.isPaintNewUi;
		if (!flag)
		{
			int num = 0;
			bool flag2 = this.list != null;
			if (flag2)
			{
				this.list.moveCamera();
				bool flag3 = GameCanvas.isPointer(this.xsub, 0, this.wsub, GameCanvas.h);
				if (flag3)
				{
					this.list.update_Pos_UP_DOWN();
				}
				num = this.list.cmx;
			}
			bool flag4 = GameCanvas.isPointer(this.xsub, this.ysub, this.wsub, this.hsub);
			if (flag4)
			{
				int num2 = (GameCanvas.px - this.xsubpaint) / (this.wc + this.w2c) + (GameCanvas.py - this.ysubpaint + num) / (this.hc + this.w2c) * this.numw;
				int num3 = this.vecServer.size();
				bool flag5 = num2 >= 0 && num2 < num3;
				if (flag5)
				{
					this.mainSelect = num2;
					for (int i = 0; i < this.vecServer.size(); i++)
					{
						Command command = (Command)this.vecServer.elementAt(i);
						bool flag6 = command == null;
						if (!flag6)
						{
							bool flag7 = i == this.mainSelect;
							if (flag7)
							{
								bool flag8 = command.isPointerPressInsideCamera(0, num);
								if (flag8)
								{
									command.performAction();
								}
							}
							else
							{
								command.isFocus = false;
							}
						}
					}
				}
			}
			bool flag9 = GameCanvas.isPointer(this.xinfo - 2, this.yinfo + this.hinfo, this.wCheck + 4, this.wCheck + 4) && GameCanvas.isPointerJustRelease;
			if (flag9)
			{
				ServerScr.isShowSv_HaveChar = !ServerScr.isShowSv_HaveChar;
				this.GetVecTypeSv(this.select_Area, this.select_typeSv);
			}
			bool flag10 = this.ntypeSv == 1;
			if (!flag10)
			{
				sbyte b = 0;
				while ((int)b < this.ntypeSv)
				{
					int num4 = this.yPop + (int)b * (this.hPop + 5);
					bool flag11 = GameCanvas.isPointerHoldIn(this.xPop, num4, this.wPop, this.hPop) && GameCanvas.isPointerDown;
					if (flag11)
					{
						this.GetVecTypeSv(this.select_Area, b);
						break;
					}
					b += 1;
				}
			}
		}
	}

	// Token: 0x060009E6 RID: 2534 RVA: 0x000A4FE0 File Offset: 0x000A31E0
	private void UpdTouch_NewUI_Popup()
	{
		bool flag = GameCanvas.isPointer(this.xPopUp_Area, this.yBox, this.wBox, this.hBox) && GameCanvas.isPointerJustRelease;
		if (flag)
		{
			this.isPaint_select_area = !this.isPaint_select_area;
			this.isPaint_select_lang = false;
			GameCanvas.isPointerJustRelease = false;
		}
		bool flag2 = !this.isPaint_select_area;
		if (!flag2)
		{
			sbyte b = 0;
			while ((int)b < this.strArea.Length)
			{
				int num = this.yPopUp_Area + (int)b * this.htext;
				bool flag3 = GameCanvas.isPointerHoldIn(this.xPopUp_Area, num, this.wBox, this.htext) && GameCanvas.isPointerDown;
				if (flag3)
				{
					bool flag4 = this.isChooseArea;
					if (flag4)
					{
						this.select_Area = b;
					}
					else
					{
						this.SetNewSelectMenu((int)b, (int)this.select_typeSv);
					}
					this.isPaint_select_lang = (this.isPaint_select_area = false);
					break;
				}
				b += 1;
			}
		}
	}

	// Token: 0x060009E7 RID: 2535 RVA: 0x000A50E0 File Offset: 0x000A32E0
	private void Load_NewUI()
	{
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			bool flag = Rms.loadRMS("area_select") == null;
			if (flag)
			{
				this.isChooseArea = true;
				this.cmdChooseArea = new Command(mResources.OK, this, 999, null);
				this.cmdChooseArea.x = GameCanvas.hw - 38;
				this.cmdChooseArea.y = GameCanvas.hh + 50;
				this.vecServer = new MyVector();
				this.vecServer.addElement(this.cmdChooseArea);
				this.yBox = GameCanvas.hh - 30;
				this.wBox = 70;
				this.hBox = 20;
			}
			else
			{
				this.isChooseArea = false;
				this.Load_RMS_Area();
				this.SetNewSelectMenu((int)this.select_Area, (int)this.select_typeSv);
			}
		}
	}

	// Token: 0x060009E8 RID: 2536 RVA: 0x000A51B6 File Offset: 0x000A33B6
	private void Save_RMS_Area()
	{
		Rms.saveRMS("area_select", new sbyte[]
		{
			this.select_Area,
			this.select_Lang
		});
	}

	// Token: 0x060009E9 RID: 2537 RVA: 0x000A51DC File Offset: 0x000A33DC
	private void Load_RMS_Area()
	{
		sbyte[] array = Rms.loadRMS("area_select");
		try
		{
			this.select_Area = array[0];
			this.select_Lang = array[1];
		}
		catch (Exception)
		{
			this.select_Area = (this.select_Lang = 0);
		}
	}

	// Token: 0x060009EA RID: 2538 RVA: 0x000A5230 File Offset: 0x000A3430
	public void Sort_NewSv()
	{
		for (int i = 0; i < this.vecServer.size() - 1; i++)
		{
			Command command = (Command)this.vecServer.elementAt(i);
			for (int j = i + 1; j < this.vecServer.size(); j++)
			{
				Command command2 = (Command)this.vecServer.elementAt(j);
				bool flag = command2.isPaintNew && !command.isPaintNew;
				if (flag)
				{
					Command command3 = command2;
					command2 = command;
					command = command3;
					this.vecServer.setElementAt(command, i);
					this.vecServer.setElementAt(command2, j);
				}
			}
		}
	}

	// Token: 0x060009EB RID: 2539 RVA: 0x000A52E8 File Offset: 0x000A34E8
	public void loadIconHead()
	{
		bool flag = ServerScr.iconHead == null;
		if (flag)
		{
			ServerScr.iconHead = new Image[3];
			for (int i = 0; i < ServerScr.iconHead.Length; i++)
			{
				ServerScr.iconHead[i] = GameCanvas.loadImage("/iconHead_" + i.ToString() + ".png");
			}
		}
	}

	// Token: 0x060009EC RID: 2540 RVA: 0x000A534C File Offset: 0x000A354C
	public void paintShowAllCheck(mGraphics g)
	{
		int num = this.xinfo;
		int num2 = this.yinfo + this.hinfo + 2;
		g.setColor(16777215);
		g.fillRect(num, num2, this.wCheck, this.wCheck);
		bool flag = ServerScr.isShowSv_HaveChar;
		if (flag)
		{
			g.setColor(3329330);
			g.fillRect(num + 1, num2 + 1, this.wCheck - 2, this.wCheck - 2);
		}
		mFont.tahoma_7b_dark.drawString(g, this.strShowAll, num + this.wCheck + 2, num2, 0);
	}

	// Token: 0x0400121C RID: 4636
	private int mainSelect;

	// Token: 0x0400121D RID: 4637
	private MyVector vecServer = new MyVector();

	// Token: 0x0400121E RID: 4638
	private Command cmdCheck;

	// Token: 0x0400121F RID: 4639
	public const int icmd = 100;

	// Token: 0x04001220 RID: 4640
	private int wc;

	// Token: 0x04001221 RID: 4641
	private int hc;

	// Token: 0x04001222 RID: 4642
	private int w2c;

	// Token: 0x04001223 RID: 4643
	private int numw;

	// Token: 0x04001224 RID: 4644
	private int numh;

	// Token: 0x04001225 RID: 4645
	private Command cmdGlobal;

	// Token: 0x04001226 RID: 4646
	private Command cmdVietNam;

	// Token: 0x04001227 RID: 4647
	private const string RMS_SELECT_AREA = "area_select";

	// Token: 0x04001228 RID: 4648
	public bool isChooseArea;

	// Token: 0x04001229 RID: 4649
	public bool isPaintNewUi;

	// Token: 0x0400122A RID: 4650
	private ListNew list;

	// Token: 0x0400122B RID: 4651
	public sbyte select_Area;

	// Token: 0x0400122C RID: 4652
	public sbyte select_Lang;

	// Token: 0x0400122D RID: 4653
	public sbyte select_typeSv;

	// Token: 0x0400122E RID: 4654
	private Command cmdChooseArea;

	// Token: 0x0400122F RID: 4655
	private bool isPaint_select_area;

	// Token: 0x04001230 RID: 4656
	private bool isPaint_select_lang;

	// Token: 0x04001231 RID: 4657
	private int x;

	// Token: 0x04001232 RID: 4658
	private int y;

	// Token: 0x04001233 RID: 4659
	private int w;

	// Token: 0x04001234 RID: 4660
	private int h;

	// Token: 0x04001235 RID: 4661
	private int xName;

	// Token: 0x04001236 RID: 4662
	private int yName;

	// Token: 0x04001237 RID: 4663
	private int xsub;

	// Token: 0x04001238 RID: 4664
	private int ysub;

	// Token: 0x04001239 RID: 4665
	private int wsub;

	// Token: 0x0400123A RID: 4666
	private int hsub;

	// Token: 0x0400123B RID: 4667
	private int xsubpaint;

	// Token: 0x0400123C RID: 4668
	private int ysubpaint;

	// Token: 0x0400123D RID: 4669
	private int xPop;

	// Token: 0x0400123E RID: 4670
	private int yPop;

	// Token: 0x0400123F RID: 4671
	private int wPop;

	// Token: 0x04001240 RID: 4672
	private int hPop;

	// Token: 0x04001241 RID: 4673
	private int xinfo;

	// Token: 0x04001242 RID: 4674
	private int yinfo;

	// Token: 0x04001243 RID: 4675
	private int winfo;

	// Token: 0x04001244 RID: 4676
	private int hinfo;

	// Token: 0x04001245 RID: 4677
	private int yBox;

	// Token: 0x04001246 RID: 4678
	private int wBox;

	// Token: 0x04001247 RID: 4679
	private int hBox;

	// Token: 0x04001248 RID: 4680
	private int ntypeSv;

	// Token: 0x04001249 RID: 4681
	private int wCheck;

	// Token: 0x0400124A RID: 4682
	private int xPopUp_Area;

	// Token: 0x0400124B RID: 4683
	private int yPopUp_Area;

	// Token: 0x0400124C RID: 4684
	private int xPopUp_Lang;

	// Token: 0x0400124D RID: 4685
	private int yPopUp_Lang;

	// Token: 0x0400124E RID: 4686
	private int htext = 15;

	// Token: 0x0400124F RID: 4687
	private string[] strLang = new string[]
	{
		"Tiếng Việt",
		"English",
		"Indo"
	};

	// Token: 0x04001250 RID: 4688
	private string[] strArea = new string[]
	{
		"VIỆT NAM",
		"GLOBAL"
	};

	// Token: 0x04001251 RID: 4689
	private string[] strTypeSV = new string[]
	{
		"Máy chủ tiêu chuẩn",
		"Máy chủ Super"
	};

	// Token: 0x04001252 RID: 4690
	private string[] strTypeSV_info = new string[]
	{
		"Máy chủ tiêu chuẩn:\nTiến trình game bình thường.",
		"Máy chủ Super:\n -Không thể giao dịch vàng.\n x3 Sức mạnh\n x3 Tiềm năng\n x3 Vàng\n x3 Vật phẩm khác"
	};

	// Token: 0x04001253 RID: 4691
	private string strShowAll = "Chỉ hiện thị máy chủ đã chơi.";

	// Token: 0x04001254 RID: 4692
	public int cmy;

	// Token: 0x04001255 RID: 4693
	public static Image[] iconHead;

	// Token: 0x04001256 RID: 4694
	public static bool isShowSv_HaveChar;
}
using System;
using AssemblyCSharp.Mod.Xmap;
using Assets.src.g;

// Token: 0x020000BB RID: 187
public class Service
{
	// Token: 0x060009ED RID: 2541 RVA: 0x000A53E4 File Offset: 0x000A35E4
	public static Service gI()
	{
		bool flag = Service.instance == null;
		if (flag)
		{
			Service.instance = new Service();
		}
		return Service.instance;
	}

	// Token: 0x060009EE RID: 2542 RVA: 0x000A5414 File Offset: 0x000A3614
	public void gotoPlayer(int id)
	{
		Message message = null;
		try
		{
			message = new Message(18);
			message.writer().writeInt(id);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009EF RID: 2543 RVA: 0x000A5484 File Offset: 0x000A3684
	public void androidPack()
	{
		bool flag = mSystem.android_pack == null;
		if (!flag)
		{
			Message message = null;
			try
			{
				message = new Message(126);
				message.writer().writeUTF(mSystem.android_pack);
				this.session.sendMessage(message);
			}
			catch (Exception ex)
			{
				ex.StackTrace.ToString();
			}
			finally
			{
				message.cleanup();
			}
		}
	}

	// Token: 0x060009F0 RID: 2544 RVA: 0x000A5508 File Offset: 0x000A3708
	public void charInfo(string day, string month, string year, string address, string cmnd, string dayCmnd, string noiCapCmnd, string sdt, string name)
	{
		Message message = null;
		try
		{
			message = new Message(42);
			message.writer().writeUTF(day);
			message.writer().writeUTF(month);
			message.writer().writeUTF(year);
			message.writer().writeUTF(address);
			message.writer().writeUTF(cmnd);
			message.writer().writeUTF(dayCmnd);
			message.writer().writeUTF(noiCapCmnd);
			message.writer().writeUTF(sdt);
			message.writer().writeUTF(name);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009F1 RID: 2545 RVA: 0x000A55E8 File Offset: 0x000A37E8
	public void androidPack2()
	{
		bool flag = mSystem.android_pack == null;
		if (!flag)
		{
			Message message = null;
			try
			{
				message = new Message(126);
				message.writer().writeUTF(mSystem.android_pack);
				bool flag2 = Session_ME2.gI().isConnected() && !Session_ME2.connecting;
				if (flag2)
				{
					this.session = Session_ME2.gI();
				}
				else
				{
					this.session = Session_ME.gI();
				}
				this.session.sendMessage(message);
				this.session = Session_ME.gI();
			}
			catch (Exception ex)
			{
				ex.StackTrace.ToString();
			}
			finally
			{
				message.cleanup();
			}
		}
	}

	// Token: 0x060009F2 RID: 2546 RVA: 0x000A56B0 File Offset: 0x000A38B0
	public void checkAd(sbyte status)
	{
		Message message = null;
		try
		{
			message = new Message(-44);
			message.writer().writeByte(status);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009F3 RID: 2547 RVA: 0x000A5720 File Offset: 0x000A3920
	public void combine(sbyte action, MyVector id)
	{
		Res.outz("combine");
		Message message = null;
		try
		{
			message = new Message(-81);
			message.writer().writeByte(action);
			bool flag = action == 1;
			if (flag)
			{
				message.writer().writeByte(id.size());
				for (int i = 0; i < id.size(); i++)
				{
					message.writer().writeByte(((Item)id.elementAt(i)).indexUI);
					Res.outz("gui id " + ((Item)id.elementAt(i)).indexUI.ToString());
				}
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009F4 RID: 2548 RVA: 0x000A5804 File Offset: 0x000A3A04
	public void giaodich(sbyte action, int playerID, sbyte index, int num)
	{
		Res.outz2("giao dich action = " + action.ToString());
		Message message = null;
		try
		{
			message = new Message(-86);
			message.writer().writeByte(action);
			bool flag = action == 0 || action == 1;
			if (flag)
			{
				Res.outz2(">>>> len playerID =" + playerID.ToString());
				message.writer().writeInt(playerID);
			}
			bool flag2 = action == 2;
			if (flag2)
			{
				Res.outz2("gui len index =" + index.ToString() + " num= " + num.ToString());
				message.writer().writeByte(index);
				message.writer().writeInt(num);
			}
			bool flag3 = action == 4;
			if (flag3)
			{
				Res.outz2(">>>> len index =" + index.ToString());
				message.writer().writeByte(index);
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009F5 RID: 2549 RVA: 0x000A5928 File Offset: 0x000A3B28
	public void sendClientInput(TField[] t)
	{
		Message message = null;
		try
		{
			Res.outz(" gui input ");
			message = new Message(-125);
			Res.outz("byte lent = " + t.Length.ToString());
			message.writer().writeByte(t.Length);
			for (int i = 0; i < t.Length; i++)
			{
				message.writer().writeUTF(t[i].getText());
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009F6 RID: 2550 RVA: 0x000A59DC File Offset: 0x000A3BDC
	public void speacialSkill(sbyte index)
	{
		Message message = null;
		try
		{
			message = new Message(112);
			message.writer().writeByte(index);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009F7 RID: 2551 RVA: 0x000A5A4C File Offset: 0x000A3C4C
	public void test(short x, short y)
	{
		Res.outz("gui x= " + x.ToString() + " y= " + y.ToString());
		Message message = null;
		try
		{
			message = new Message(0);
			message.writer().writeShort(x);
			message.writer().writeShort(y);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009F8 RID: 2552 RVA: 0x000A5AEC File Offset: 0x000A3CEC
	public void test2()
	{
		Res.outz("gui test1");
		Message message = null;
		try
		{
			message = new Message(1);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009F9 RID: 2553 RVA: 0x000A5B58 File Offset: 0x000A3D58
	public void testJoint()
	{
	}

	// Token: 0x060009FA RID: 2554 RVA: 0x000A5B5C File Offset: 0x000A3D5C
	public void mobCapcha(char ch)
	{
		Res.outz("cap char c= " + ch.ToString());
		Message message = null;
		try
		{
			message = new Message(-85);
			message.writer().writeChar(ch);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009FB RID: 2555 RVA: 0x000A5BD8 File Offset: 0x000A3DD8
	public void friend(sbyte action, int playerId)
	{
		Res.outz("add friend");
		Message message = null;
		try
		{
			message = new Message(-80);
			message.writer().writeByte(action);
			bool flag = playerId != -1;
			if (flag)
			{
				message.writer().writeInt(playerId);
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009FC RID: 2556 RVA: 0x000A5C78 File Offset: 0x000A3E78
	public void getArchivemnt(int index)
	{
		Res.outz("get ngoc");
		Message message = null;
		try
		{
			message = new Message(-76);
			message.writer().writeByte(index);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009FD RID: 2557 RVA: 0x000A5D00 File Offset: 0x000A3F00
	public void getPlayerMenu(int playerID)
	{
		Message message = null;
		try
		{
			message = new Message(-79);
			message.writer().writeInt(playerID);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009FE RID: 2558 RVA: 0x000A5D64 File Offset: 0x000A3F64
	public void clanImage(sbyte id)
	{
		Message message = null;
		try
		{
			message = new Message(-62);
			message.writer().writeByte(id);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x060009FF RID: 2559 RVA: 0x000A5DE0 File Offset: 0x000A3FE0
	public void skill_not_focus(sbyte status)
	{
		Message message = null;
		try
		{
			message = new Message(-45);
			message.writer().writeByte(status);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A00 RID: 2560 RVA: 0x000A5E5C File Offset: 0x000A405C
	public void clanDonate(int id)
	{
		Message message = null;
		try
		{
			message = new Message(-54);
			message.writer().writeInt(id);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A01 RID: 2561 RVA: 0x000A5ED8 File Offset: 0x000A40D8
	public void clanMessage(int type, string text, int clanID)
	{
		Message message = null;
		try
		{
			message = new Message(-51);
			message.writer().writeByte(type);
			bool flag = type == 0;
			if (flag)
			{
				message.writer().writeUTF(text);
			}
			bool flag2 = type == 2;
			if (flag2)
			{
				message.writer().writeInt(clanID);
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A02 RID: 2562 RVA: 0x000A5F80 File Offset: 0x000A4180
	public void useItem(sbyte type, sbyte where, sbyte index, short template)
	{
		Cout.println("USE ITEM! " + type.ToString());
		bool flag = global::Char.myCharz().statusMe == 14;
		if (!flag)
		{
			Message message = null;
			try
			{
				message = new Message(-43);
				message.writer().writeByte(type);
				message.writer().writeByte(where);
				message.writer().writeByte(index);
				bool flag2 = index == -1;
				if (flag2)
				{
					message.writer().writeShort(template);
				}
				this.session.sendMessage(message);
			}
			catch (Exception)
			{
			}
			finally
			{
				message.cleanup();
			}
		}
	}

	// Token: 0x06000A03 RID: 2563 RVA: 0x000A6044 File Offset: 0x000A4244
	public void joinClan(int id, sbyte action)
	{
		Message message = null;
		try
		{
			message = new Message(-49);
			message.writer().writeInt(id);
			message.writer().writeByte(action);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A04 RID: 2564 RVA: 0x000A60CC File Offset: 0x000A42CC
	public void clanMember(int id)
	{
		Message message = null;
		try
		{
			message = new Message(-50);
			message.writer().writeInt(id);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A05 RID: 2565 RVA: 0x000A6148 File Offset: 0x000A4348
	public void searchClan(string text)
	{
		Message message = null;
		try
		{
			message = new Message(-47);
			message.writer().writeUTF(text);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A06 RID: 2566 RVA: 0x000A61C4 File Offset: 0x000A43C4
	public void requestClan(short id)
	{
		Message message = null;
		try
		{
			message = new Message(-53);
			message.writer().writeShort(id);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A07 RID: 2567 RVA: 0x000A6240 File Offset: 0x000A4440
	public void clanRemote(int id, sbyte role)
	{
		Message message = null;
		try
		{
			message = new Message(-56);
			message.writer().writeInt(id);
			message.writer().writeByte(role);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A08 RID: 2568 RVA: 0x000A62C8 File Offset: 0x000A44C8
	public void leaveClan()
	{
		Message message = null;
		try
		{
			message = new Message(-55);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A09 RID: 2569 RVA: 0x000A6338 File Offset: 0x000A4538
	public void clanInvite(sbyte action, int playerID, int clanID, int code)
	{
		Message message = null;
		try
		{
			message = new Message(-57);
			message.writer().writeByte(action);
			bool flag = action == 0;
			if (flag)
			{
				message.writer().writeInt(playerID);
			}
			bool flag2 = action == 1 || action == 2;
			if (flag2)
			{
				message.writer().writeInt(clanID);
				message.writer().writeInt(code);
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A0A RID: 2570 RVA: 0x000A63F8 File Offset: 0x000A45F8
	public void getClan(sbyte action, int id, string text)
	{
		Message message = null;
		try
		{
			message = new Message(-46);
			message.writer().writeByte(action);
			bool flag = action == 2 || action == 4;
			if (flag)
			{
				message.writer().writeShort((short)id);
				message.writer().writeUTF(text);
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A0B RID: 2571 RVA: 0x000A64A0 File Offset: 0x000A46A0
	public void updateCaption(sbyte gender)
	{
		Message message = null;
		try
		{
			message = new Message(-41);
			message.writer().writeByte(gender);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A0C RID: 2572 RVA: 0x000A651C File Offset: 0x000A471C
	public void getItem(sbyte type, sbyte id)
	{
		Message message = null;
		try
		{
			message = new Message(-40);
			message.writer().writeByte(type);
			message.writer().writeByte(id);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A0D RID: 2573 RVA: 0x000A65A4 File Offset: 0x000A47A4
	public void getTask(int npcTemplateId, int menuId, int optionId)
	{
		Message message = null;
		try
		{
			message = new Message(40);
			message.writer().writeByte(npcTemplateId);
			message.writer().writeByte(menuId);
			bool flag = optionId >= 0;
			if (flag)
			{
				message.writer().writeByte(optionId);
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A0E RID: 2574 RVA: 0x000A6648 File Offset: 0x000A4848
	public Message messageNotLogin(sbyte command)
	{
		Message message = new Message(-29);
		message.writer().writeByte(command);
		return message;
	}

	// Token: 0x06000A0F RID: 2575 RVA: 0x000A6670 File Offset: 0x000A4870
	public Message messageNotMap(sbyte command)
	{
		Message message = new Message(-28);
		message.writer().writeByte(command);
		return message;
	}

	// Token: 0x06000A10 RID: 2576 RVA: 0x000A6698 File Offset: 0x000A4898
	public static Message messageSubCommand(sbyte command)
	{
		Message message = new Message(-30);
		message.writer().writeByte(command);
		return message;
	}

	// Token: 0x06000A11 RID: 2577 RVA: 0x000A66C0 File Offset: 0x000A48C0
	public void setClientType()
	{
		bool flag = Rms.loadRMSInt("clienttype") != -1;
		if (flag)
		{
			Main.typeClient = Rms.loadRMSInt("clienttype");
		}
		try
		{
			Res.outz(">>send ClientType1");
			Message message = this.messageNotLogin(2);
			message.writer().writeByte(Main.typeClient);
			message.writer().writeByte(mGraphics.zoomLevel);
			message.writer().writeBoolean(false);
			message.writer().writeInt(GameCanvas.w);
			message.writer().writeInt(GameCanvas.h);
			message.writer().writeBoolean(TField.isQwerty);
			message.writer().writeBoolean(GameCanvas.isTouch);
			message.writer().writeUTF(GameCanvas.getPlatformName() + "|" + GameMidlet.VERSION);
			DataInputStream dataInputStream = MyStream.readFile("/info");
			bool flag2 = dataInputStream != null;
			if (flag2)
			{
				sbyte[] array = new sbyte[dataInputStream.r.buffer.Length];
				dataInputStream.read(ref array);
				bool flag3 = array != null;
				if (flag3)
				{
					message.writer().writeShort(array.Length);
					message.writer().write(array);
				}
			}
			this.session.sendMessage(message);
			message.cleanup();
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
	}

	// Token: 0x06000A12 RID: 2578 RVA: 0x000A684C File Offset: 0x000A4A4C
	public void setClientType2()
	{
		Res.outz("SET CLIENT TYPE");
		bool flag = Rms.loadRMSInt("clienttype") != -1;
		if (flag)
		{
			mSystem.clientType = Rms.loadRMSInt("clienttype");
		}
		try
		{
			Res.outz(">>send ClientType2");
			Message message = this.messageNotLogin(2);
			message.writer().writeByte(mSystem.clientType);
			message.writer().writeByte(mGraphics.zoomLevel);
			Res.outz("gui zoomlevel = " + mGraphics.zoomLevel.ToString());
			message.writer().writeBoolean(false);
			message.writer().writeInt(GameCanvas.w);
			message.writer().writeInt(GameCanvas.h);
			message.writer().writeBoolean(TField.isQwerty);
			message.writer().writeBoolean(GameCanvas.isTouch);
			message.writer().writeUTF(GameCanvas.getPlatformName() + "|" + GameMidlet.VERSION);
			DataInputStream dataInputStream = MyStream.readFile("/info");
			bool flag2 = dataInputStream != null;
			if (flag2)
			{
				sbyte[] array = new sbyte[dataInputStream.r.buffer.Length];
				dataInputStream.read(ref array);
				bool flag3 = array != null;
				if (flag3)
				{
					message.writer().writeShort(array.Length);
					message.writer().write(array);
				}
			}
			this.session = Session_ME2.gI();
			this.session.sendMessage(message);
			this.session = Session_ME.gI();
			message.cleanup();
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
	}

	// Token: 0x06000A13 RID: 2579 RVA: 0x000A6A08 File Offset: 0x000A4C08
	public void sendCheckController()
	{
		Message message = null;
		try
		{
			message = new Message(-120);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			Service.curCheckController = mSystem.currentTimeMillis();
			message.cleanup();
		}
	}

	// Token: 0x06000A14 RID: 2580 RVA: 0x000A6A68 File Offset: 0x000A4C68
	public void sendCheckMap()
	{
		Message message = null;
		try
		{
			message = new Message(-121);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			Service.curCheckMap = mSystem.currentTimeMillis();
			message.cleanup();
		}
	}

	// Token: 0x06000A15 RID: 2581 RVA: 0x000A6AC8 File Offset: 0x000A4CC8
	public void login(string username, string pass, string version, sbyte type)
	{
		Res.outz(string.Concat(new string[]
		{
			"Login ",
			username,
			" ",
			pass,
			" ",
			version
		}));
		try
		{
			Message message = this.messageNotLogin(0);
			message.writer().writeUTF(username);
			message.writer().writeUTF(pass);
			message.writer().writeUTF(version);
			message.writer().writeByte(type);
			this.session.sendMessage(message);
			message.cleanup();
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
	}

	// Token: 0x06000A16 RID: 2582 RVA: 0x000A6B8C File Offset: 0x000A4D8C
	public void requestRegister(string username, string pass, string usernameAo, string passAo, string version)
	{
		try
		{
			Message message = this.messageNotLogin(1);
			message.writer().writeUTF(username);
			message.writer().writeUTF(pass);
			bool flag = usernameAo != null && !usernameAo.Equals(string.Empty);
			if (flag)
			{
				message.writer().writeUTF(usernameAo);
				message.writer().writeUTF("a");
			}
			this.session.sendMessage(message);
			message.cleanup();
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
	}

	// Token: 0x06000A17 RID: 2583 RVA: 0x000A6C38 File Offset: 0x000A4E38
	public void requestChangeMap()
	{
		Message message = new Message(-23);
		this.session.sendMessage(message);
		message.cleanup();
	}

	// Token: 0x06000A18 RID: 2584 RVA: 0x000A6C64 File Offset: 0x000A4E64
	public void magicTree(sbyte type)
	{
		Message message = new Message(-34);
		try
		{
			message.writer().writeByte(type);
			this.session.sendMessage(message);
			message.cleanup();
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000A19 RID: 2585 RVA: 0x000A6CB4 File Offset: 0x000A4EB4
	public void requestChangeZone(int zoneId, int indexUI)
	{
		Message message = new Message(21);
		try
		{
			message.writer().writeByte(zoneId);
			this.session.sendMessage(message);
			message.cleanup();
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000A1A RID: 2586 RVA: 0x000A6D04 File Offset: 0x000A4F04
	public void checkMMove(int second)
	{
		Message message = new Message(-78);
		try
		{
			message.writer().writeInt(second);
			this.session.sendMessage(message);
			message.cleanup();
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000A1B RID: 2587 RVA: 0x000A6D54 File Offset: 0x000A4F54
	public void charMove()
	{
		int num = global::Char.myCharz().cx - global::Char.myCharz().cxSend;
		int num2 = global::Char.myCharz().cy - global::Char.myCharz().cySend;
		bool flag = global::Char.ischangingMap || (num == 0 && num2 == 0) || Controller.isStopReadMessage || global::Char.myCharz().isTeleport || global::Char.myCharz().cy <= 0 || global::Char.myCharz().telePortSkill;
		if (!flag)
		{
			try
			{
				Message message = new Message(-7);
				global::Char.myCharz().cxSend = global::Char.myCharz().cx;
				global::Char.myCharz().cySend = global::Char.myCharz().cy;
				global::Char.myCharz().cdirSend = global::Char.myCharz().cdir;
				global::Char.myCharz().cactFirst = global::Char.myCharz().statusMe;
				bool flag2 = TileMap.tileTypeAt(global::Char.myCharz().cx / (int)TileMap.size, global::Char.myCharz().cy / (int)TileMap.size) == 0;
				if (flag2)
				{
					message.writer().writeByte(1);
				}
				else
				{
					message.writer().writeByte(0);
				}
				message.writer().writeShort(global::Char.myCharz().cx);
				bool flag3 = num2 != 0;
				if (flag3)
				{
					message.writer().writeShort(global::Char.myCharz().cy);
				}
				this.session.sendMessage(message);
				GameScr.tickMove++;
				message.cleanup();
			}
			catch (Exception ex)
			{
				Cout.LogError("LOI CHAR MOVE " + ex.ToString());
			}
		}
	}

	// Token: 0x06000A1C RID: 2588 RVA: 0x000A6F10 File Offset: 0x000A5110
	public void selectCharToPlay(string charname)
	{
		Message message = new Message(-28);
		try
		{
			message.writer().writeByte(1);
			message.writer().writeUTF(charname);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		this.session.sendMessage(message);
	}

	// Token: 0x06000A1D RID: 2589 RVA: 0x000A6F80 File Offset: 0x000A5180
	public void selectZone(sbyte sub, int value)
	{
	}

	// Token: 0x06000A1E RID: 2590 RVA: 0x000A6F84 File Offset: 0x000A5184
	public void createChar(string name, int gender, int hair)
	{
		Message message = new Message(-28);
		try
		{
			message.writer().writeByte(2);
			message.writer().writeUTF(name);
			message.writer().writeByte(gender);
			message.writer().writeByte(hair);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		this.session.sendMessage(message);
	}

	// Token: 0x06000A1F RID: 2591 RVA: 0x000A700C File Offset: 0x000A520C
	public void requestModTemplate(int modTemplateId)
	{
		Message message = null;
		try
		{
			message = new Message(11);
			message.writer().writeShort(modTemplateId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A20 RID: 2592 RVA: 0x000A7088 File Offset: 0x000A5288
	public void requestSkill(int skillId)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(9);
			message.writer().writeShort(skillId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A21 RID: 2593 RVA: 0x000A7104 File Offset: 0x000A5304
	public void requestItemInfo(int typeUI, int indexUI)
	{
		Message message = null;
		try
		{
			message = new Message(35);
			message.writer().writeByte(typeUI);
			message.writer().writeByte(indexUI);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A22 RID: 2594 RVA: 0x000A718C File Offset: 0x000A538C
	public void requestItemPlayer(int charId, int indexUI)
	{
		Message message = null;
		try
		{
			message = new Message(90);
			message.writer().writeInt(charId);
			message.writer().writeByte(indexUI);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A23 RID: 2595 RVA: 0x000A7214 File Offset: 0x000A5414
	public void upSkill(int skillTemplateId, int point)
	{
		Message message = null;
		try
		{
			message = Service.messageSubCommand(17);
			message.writer().writeShort(skillTemplateId);
			message.writer().writeByte(point);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A24 RID: 2596 RVA: 0x000A729C File Offset: 0x000A549C
	public void saleItem(sbyte action, sbyte type, short id)
	{
		Message message = null;
		try
		{
			message = new Message(7);
			message.writer().writeByte(action);
			message.writer().writeByte(type);
			message.writer().writeShort(id);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A25 RID: 2597 RVA: 0x000A7330 File Offset: 0x000A5530
	public void buyItem(sbyte type, int id, int quantity)
	{
		Message message = null;
		try
		{
			message = new Message(6);
			message.writer().writeByte(type);
			message.writer().writeShort(id);
			bool flag = quantity > 1;
			if (flag)
			{
				message.writer().writeShort(quantity);
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A26 RID: 2598 RVA: 0x000A73D0 File Offset: 0x000A55D0
	public void selectSkill(int skillTemplateId)
	{
		Cout.println(global::Char.myCharz().cName + " SELECT SKILL " + skillTemplateId.ToString());
		Message message = null;
		try
		{
			message = new Message(34);
			message.writer().writeShort(skillTemplateId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A27 RID: 2599 RVA: 0x000A746C File Offset: 0x000A566C
	public void getEffData(short id)
	{
		Message message = null;
		try
		{
			message = new Message(-66);
			message.writer().writeShort(id);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A28 RID: 2600 RVA: 0x000A74E8 File Offset: 0x000A56E8
	public void openUIZone()
	{
		Message message = null;
		try
		{
			message = new Message(29);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A29 RID: 2601 RVA: 0x000A7558 File Offset: 0x000A5758
	public void confirmMenu(short npcID, sbyte select)
	{
		Res.outz("confirme menu" + select.ToString());
		Message message = null;
		try
		{
			message = new Message(32);
			message.writer().writeShort(npcID);
			message.writer().writeByte(select);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A2A RID: 2602 RVA: 0x000A75F8 File Offset: 0x000A57F8
	public void openMenu(int npcId)
	{
		Message message = null;
		try
		{
			message = new Message(33);
			message.writer().writeShort(npcId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A2B RID: 2603 RVA: 0x000A7674 File Offset: 0x000A5874
	public void menu(int npcId, int menuId, int optionId)
	{
		Cout.println("menuid: " + menuId.ToString());
		Message message = null;
		try
		{
			message = new Message(22);
			message.writer().writeByte(npcId);
			message.writer().writeByte(menuId);
			message.writer().writeByte(optionId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A2C RID: 2604 RVA: 0x000A7720 File Offset: 0x000A5920
	public void menuId(short menuId)
	{
		Message message = null;
		try
		{
			message = new Message(27);
			message.writer().writeShort(menuId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A2D RID: 2605 RVA: 0x000A779C File Offset: 0x000A599C
	public void textBoxId(short menuId, string str)
	{
		Message message = null;
		try
		{
			message = new Message(88);
			message.writer().writeShort(menuId);
			message.writer().writeUTF(str);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A2E RID: 2606 RVA: 0x000A7824 File Offset: 0x000A5A24
	public void requestItem(int typeUI)
	{
		Message message = null;
		try
		{
			message = Service.messageSubCommand(22);
			message.writer().writeByte(typeUI);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A2F RID: 2607 RVA: 0x000A78A0 File Offset: 0x000A5AA0
	public void boxSort()
	{
		Message message = null;
		try
		{
			message = Service.messageSubCommand(19);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A30 RID: 2608 RVA: 0x000A7910 File Offset: 0x000A5B10
	public void boxCoinOut(int coinOut)
	{
		Message message = null;
		try
		{
			message = Service.messageSubCommand(21);
			message.writer().writeInt(coinOut);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A31 RID: 2609 RVA: 0x000A798C File Offset: 0x000A5B8C
	public void upgradeItem(Item item, Item[] items, bool isGold)
	{
		GameCanvas.msgdlg.pleasewait();
		Message message = null;
		try
		{
			message = new Message(14);
			message.writer().writeBoolean(isGold);
			message.writer().writeByte(item.indexUI);
			for (int i = 0; i < items.Length; i++)
			{
				bool flag = items[i] != null;
				if (flag)
				{
					message.writer().writeByte(items[i].indexUI);
				}
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A32 RID: 2610 RVA: 0x000A7A5C File Offset: 0x000A5C5C
	public void crystalCollectLock(Item[] items)
	{
		GameCanvas.msgdlg.pleasewait();
		Message message = null;
		try
		{
			message = new Message(13);
			for (int i = 0; i < items.Length; i++)
			{
				bool flag = items[i] != null;
				if (flag)
				{
					message.writer().writeByte(items[i].indexUI);
				}
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A33 RID: 2611 RVA: 0x000A7B0C File Offset: 0x000A5D0C
	public void acceptInviteTrade(int playerMapId)
	{
		Message message = null;
		try
		{
			message = new Message(37);
			message.writer().writeInt(playerMapId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A34 RID: 2612 RVA: 0x000A7B88 File Offset: 0x000A5D88
	public void cancelInviteTrade()
	{
		Message message = null;
		try
		{
			message = new Message(50);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A35 RID: 2613 RVA: 0x000A7BF8 File Offset: 0x000A5DF8
	public void tradeAccept()
	{
		Message message = null;
		try
		{
			message = new Message(39);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A36 RID: 2614 RVA: 0x000A7C68 File Offset: 0x000A5E68
	public void tradeItemLock(int coin, Item[] items)
	{
		Message message = null;
		try
		{
			message = new Message(38);
			message.writer().writeInt(coin);
			int num = 0;
			for (int i = 0; i < items.Length; i++)
			{
				bool flag = items[i] != null;
				if (flag)
				{
					num++;
				}
			}
			message.writer().writeByte(num);
			for (int j = 0; j < items.Length; j++)
			{
				bool flag2 = items[j] != null;
				if (flag2)
				{
					message.writer().writeByte(items[j].indexUI);
				}
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A37 RID: 2615 RVA: 0x000A7D58 File Offset: 0x000A5F58
	public void sendPlayerAttack(MyVector vMob, MyVector vChar, int type)
	{
		try
		{
			Res.outz(">>SEND ATTACT  vMob=" + vMob.size().ToString() + "  vChar=" + vChar.size().ToString());
			Message message = null;
			bool flag = type == 0;
			if (!flag)
			{
				bool flag2 = vMob.size() > 0 && vChar.size() > 0;
				if (flag2)
				{
					if (type != 1)
					{
						if (type == 2)
						{
							message = new Message(67);
						}
					}
					else
					{
						message = new Message(-4);
					}
					message.writer().writeByte(vMob.size());
					for (int i = 0; i < vMob.size(); i++)
					{
						Mob mob = (Mob)vMob.elementAt(i);
						message.writer().writeByte(mob.mobId);
					}
					for (int j = 0; j < vChar.size(); j++)
					{
						global::Char @char = (global::Char)vChar.elementAt(j);
						bool flag3 = @char != null;
						if (flag3)
						{
							message.writer().writeInt(@char.charID);
						}
						else
						{
							message.writer().writeInt(-1);
						}
					}
				}
				else
				{
					bool flag4 = vMob.size() > 0;
					if (flag4)
					{
						message = new Message(54);
						for (int k = 0; k < vMob.size(); k++)
						{
							Mob mob2 = (Mob)vMob.elementAt(k);
							bool flag5 = !mob2.isMobMe;
							if (flag5)
							{
								message.writer().writeByte(mob2.mobId);
							}
							else
							{
								message.writer().writeByte(-1);
								message.writer().writeInt(mob2.mobId);
							}
						}
					}
					else
					{
						bool flag6 = vChar.size() > 0;
						if (flag6)
						{
							message = new Message(-60);
							for (int l = 0; l < vChar.size(); l++)
							{
								global::Char char2 = (global::Char)vChar.elementAt(l);
								message.writer().writeInt(char2.charID);
							}
						}
					}
				}
				message.writer().writeSByte((sbyte)global::Char.myCharz().cdir);
				bool flag7 = message != null;
				if (flag7)
				{
					this.session.sendMessage(message);
				}
			}
		}
		catch (Exception)
		{
			Res.err(">>err ATTACT  vMob=" + vMob.size().ToString() + "  vChar=" + vChar.size().ToString());
		}
	}

	// Token: 0x06000A38 RID: 2616 RVA: 0x000A800C File Offset: 0x000A620C
	public void pickItem(int itemMapId)
	{
		Message message = null;
		try
		{
			message = new Message(-20);
			message.writer().writeShort(itemMapId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A39 RID: 2617 RVA: 0x000A8088 File Offset: 0x000A6288
	public void throwItem(int index)
	{
		Message message = null;
		try
		{
			message = new Message(-18);
			message.writer().writeByte(index);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A3A RID: 2618 RVA: 0x000A8104 File Offset: 0x000A6304
	public void returnTownFromDead()
	{
		Message message = null;
		try
		{
			message = new Message(-15);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A3B RID: 2619 RVA: 0x000A8174 File Offset: 0x000A6374
	public void wakeUpFromDead()
	{
		Message message = null;
		try
		{
			message = new Message(-16);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A3C RID: 2620 RVA: 0x000A81E4 File Offset: 0x000A63E4
	public void chat(string text)
	{
		bool flag = Pk9rXmap.Chat(text);
		if (!flag)
		{
			Message message = null;
			try
			{
				message = new Message(44);
				message.writer().writeUTF(text);
				this.session.sendMessage(message);
			}
			catch (Exception ex)
			{
				Cout.println(ex.Message + ex.StackTrace);
			}
			finally
			{
				message.cleanup();
			}
		}
	}

	// Token: 0x06000A3D RID: 2621 RVA: 0x000A826C File Offset: 0x000A646C
	public void updateData()
	{
		Message message = null;
		try
		{
			message = new Message(-87);
			bool flag = Session_ME2.gI().isConnected() && !Session_ME2.connecting;
			if (flag)
			{
				this.session = Session_ME2.gI();
			}
			else
			{
				this.session = Session_ME.gI();
			}
			this.session.sendMessage(message);
			this.session = Session_ME.gI();
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A3E RID: 2622 RVA: 0x000A831C File Offset: 0x000A651C
	public void updateMap()
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(6);
			bool flag = Session_ME2.gI().isConnected() && !Session_ME2.connecting;
			if (flag)
			{
				this.session = Session_ME2.gI();
			}
			else
			{
				this.session = Session_ME.gI();
			}
			this.session.sendMessage(message);
			this.session = Session_ME.gI();
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A3F RID: 2623 RVA: 0x000A83CC File Offset: 0x000A65CC
	public void updateSkill()
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(7);
			bool flag = Session_ME2.gI().isConnected() && !Session_ME2.connecting;
			if (flag)
			{
				this.session = Session_ME2.gI();
			}
			else
			{
				this.session = Session_ME.gI();
			}
			this.session.sendMessage(message);
			this.session = Session_ME.gI();
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A40 RID: 2624 RVA: 0x000A8470 File Offset: 0x000A6670
	public void updateItem()
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(8);
			bool flag = Session_ME2.gI().isConnected() && !Session_ME2.connecting;
			if (flag)
			{
				this.session = Session_ME2.gI();
			}
			else
			{
				this.session = Session_ME.gI();
			}
			this.session.sendMessage(message);
			this.session = Session_ME.gI();
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A41 RID: 2625 RVA: 0x000A8514 File Offset: 0x000A6714
	public void clientOk()
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(13);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A42 RID: 2626 RVA: 0x000A8584 File Offset: 0x000A6784
	public void tradeInvite(int charId)
	{
		Message message = null;
		try
		{
			message = new Message(36);
			message.writer().writeInt(charId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A43 RID: 2627 RVA: 0x000A8600 File Offset: 0x000A6800
	public void addFriend(string name)
	{
		Message message = null;
		try
		{
			message = new Message(53);
			message.writer().writeUTF(name);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A44 RID: 2628 RVA: 0x000A867C File Offset: 0x000A687C
	public void addPartyAccept(int charId)
	{
		Message message = null;
		try
		{
			message = new Message(76);
			message.writer().writeInt(charId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A45 RID: 2629 RVA: 0x000A86F8 File Offset: 0x000A68F8
	public void addPartyCancel(int charId)
	{
		Message message = null;
		try
		{
			message = new Message(77);
			message.writer().writeInt(charId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A46 RID: 2630 RVA: 0x000A8774 File Offset: 0x000A6974
	public void testInvite(int charId)
	{
		Message message = null;
		try
		{
			message = new Message(59);
			message.writer().writeInt(charId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A47 RID: 2631 RVA: 0x000A87F0 File Offset: 0x000A69F0
	public void addCuuSat(int charId)
	{
		Message message = null;
		try
		{
			message = new Message(62);
			message.writer().writeInt(charId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A48 RID: 2632 RVA: 0x000A886C File Offset: 0x000A6A6C
	public void addParty(string name)
	{
		Message message = null;
		try
		{
			message = new Message(75);
			message.writer().writeUTF(name);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A49 RID: 2633 RVA: 0x000A88E8 File Offset: 0x000A6AE8
	public void player_vs_player(sbyte action, sbyte type, int playerId)
	{
		Message message = null;
		try
		{
			message = new Message(-59);
			message.writer().writeByte(action);
			message.writer().writeByte(type);
			message.writer().writeInt(playerId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A4A RID: 2634 RVA: 0x000A897C File Offset: 0x000A6B7C
	public void requestMaptemplate(int maptemplateId)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(10);
			message.writer().writeByte(maptemplateId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A4B RID: 2635 RVA: 0x000A89F8 File Offset: 0x000A6BF8
	public void outParty()
	{
		Message message = null;
		try
		{
			message = new Message(79);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A4C RID: 2636 RVA: 0x000A8A68 File Offset: 0x000A6C68
	public void requestPlayerInfo(MyVector chars)
	{
		Message message = null;
		try
		{
			message = new Message(18);
			message.writer().writeByte(chars.size());
			for (int i = 0; i < chars.size(); i++)
			{
				global::Char @char = (global::Char)chars.elementAt(i);
				message.writer().writeInt(@char.charID);
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A4D RID: 2637 RVA: 0x000A8B20 File Offset: 0x000A6D20
	public void pleaseInputParty(string str)
	{
		Message message = null;
		try
		{
			message = new Message(16);
			message.writer().writeUTF(str);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A4E RID: 2638 RVA: 0x000A8B9C File Offset: 0x000A6D9C
	public void acceptPleaseParty(string str)
	{
		Message message = null;
		try
		{
			message = new Message(17);
			message.writer().writeUTF(str);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A4F RID: 2639 RVA: 0x000A8C18 File Offset: 0x000A6E18
	public void chatPlayer(string text, int id)
	{
		Res.outz("chat player text = " + text);
		Message message = null;
		try
		{
			message = new Message(-72);
			message.writer().writeInt(id);
			message.writer().writeUTF(text);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A50 RID: 2640 RVA: 0x000A8CB0 File Offset: 0x000A6EB0
	public void chatGlobal(string text)
	{
		Message message = null;
		try
		{
			message = new Message(-71);
			message.writer().writeUTF(text);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A51 RID: 2641 RVA: 0x000A8D2C File Offset: 0x000A6F2C
	public void chatPrivate(string to, string text)
	{
		Message message = null;
		try
		{
			message = new Message(91);
			message.writer().writeUTF(to);
			message.writer().writeUTF(text);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A52 RID: 2642 RVA: 0x000A8DB4 File Offset: 0x000A6FB4
	public void sendCardInfo(string NAP, string PIN)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(16);
			message.writer().writeUTF(NAP);
			message.writer().writeUTF(PIN);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A53 RID: 2643 RVA: 0x000A8E3C File Offset: 0x000A703C
	public void saveRms(string key, sbyte[] data)
	{
		Message message = null;
		try
		{
			message = Service.messageSubCommand(60);
			message.writer().writeUTF(key);
			message.writer().writeInt(data.Length);
			message.writer().write(data);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A54 RID: 2644 RVA: 0x000A8ED4 File Offset: 0x000A70D4
	public void loadRMS(string key)
	{
		Cout.println("REQUEST RMS");
		Message message = null;
		try
		{
			message = Service.messageSubCommand(61);
			message.writer().writeUTF(key);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A55 RID: 2645 RVA: 0x000A8F5C File Offset: 0x000A715C
	public void clearTask()
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(17);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A56 RID: 2646 RVA: 0x000A8FCC File Offset: 0x000A71CC
	public void changeName(string name, int id)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(18);
			message.writer().writeInt(id);
			message.writer().writeUTF(name);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A57 RID: 2647 RVA: 0x000A9054 File Offset: 0x000A7254
	public void requestIcon(int id)
	{
		GameCanvas.connect();
		Message message = null;
		try
		{
			message = new Message(-67);
			message.writer().writeInt(id);
			bool flag = Session_ME2.gI().isConnected() && !Session_ME2.connecting;
			if (flag)
			{
				this.session = Session_ME2.gI();
			}
			else
			{
				this.session = Session_ME.gI();
			}
			this.session.sendMessage(message);
			Res.outz(">>>>>>>>>>>>>REQUEST ICON " + id.ToString() + "  isConnected:" + Controller.isGet_CLIENT_INFO.ToString());
			this.session = Session_ME.gI();
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A58 RID: 2648 RVA: 0x000A913C File Offset: 0x000A733C
	public void doConvertUpgrade(int index1, int index2, int index3)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(33);
			message.writer().writeByte(index1);
			message.writer().writeByte(index2);
			message.writer().writeByte(index3);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A59 RID: 2649 RVA: 0x000A91D4 File Offset: 0x000A73D4
	public void inviteClanDun(string name)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(34);
			message.writer().writeUTF(name);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A5A RID: 2650 RVA: 0x000A9250 File Offset: 0x000A7450
	public void inputNumSplit(int indexItem, int numSplit)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(40);
			message.writer().writeByte(indexItem);
			message.writer().writeInt(numSplit);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A5B RID: 2651 RVA: 0x000A92D8 File Offset: 0x000A74D8
	public void activeAccProtect(int pass)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(37);
			message.writer().writeInt(pass);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A5C RID: 2652 RVA: 0x000A9354 File Offset: 0x000A7554
	public void clearAccProtect(int pass)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(41);
			message.writer().writeInt(pass);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A5D RID: 2653 RVA: 0x000A93D0 File Offset: 0x000A75D0
	public void updateActive(int passOld, int passNew)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(38);
			message.writer().writeInt(passOld);
			message.writer().writeInt(passNew);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A5E RID: 2654 RVA: 0x000A9458 File Offset: 0x000A7658
	public void openLockAccProtect(int pass2)
	{
		Message message = null;
		try
		{
			message = this.messageNotMap(39);
			message.writer().writeInt(pass2);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A5F RID: 2655 RVA: 0x000A94D4 File Offset: 0x000A76D4
	public void getBgTemplate(short id)
	{
		Message message = null;
		try
		{
			message = new Message(-32);
			message.writer().writeShort(id);
			bool flag = Session_ME2.gI().isConnected() && !Session_ME2.connecting;
			if (flag)
			{
				this.session = Session_ME2.gI();
			}
			else
			{
				this.session = Session_ME.gI();
			}
			this.session.sendMessage(message);
			this.session = Session_ME.gI();
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A60 RID: 2656 RVA: 0x000A9590 File Offset: 0x000A7790
	public void getMapOffline()
	{
		Message message = null;
		try
		{
			message = new Message(-33);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A61 RID: 2657 RVA: 0x000A9600 File Offset: 0x000A7800
	public void finishUpdate()
	{
		Message message = null;
		try
		{
			message = new Message(-38);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A62 RID: 2658 RVA: 0x000A9670 File Offset: 0x000A7870
	public void finishUpdate(int playerID)
	{
		Message message = null;
		try
		{
			message = new Message(-38);
			message.writer().writeInt(playerID);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A63 RID: 2659 RVA: 0x000A96D4 File Offset: 0x000A78D4
	public void finishLoadMap()
	{
		Message message = null;
		try
		{
			message = new Message(-39);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A64 RID: 2660 RVA: 0x000A9744 File Offset: 0x000A7944
	public void getChest(sbyte action)
	{
		Message message = null;
		try
		{
			message = new Message(-35);
			message.writer().writeByte(action);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A65 RID: 2661 RVA: 0x000A97C0 File Offset: 0x000A79C0
	public void requestBagImage(int ID)
	{
		Message message = null;
		try
		{
			message = new Message(-63);
			message.writer().writeShort(ID);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A66 RID: 2662 RVA: 0x000A983C File Offset: 0x000A7A3C
	public void getBag(sbyte action)
	{
		Message message = null;
		try
		{
			message = new Message(-36);
			message.writer().writeByte(action);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A67 RID: 2663 RVA: 0x000A98B8 File Offset: 0x000A7AB8
	public void getBody(sbyte action)
	{
		Message message = null;
		try
		{
			message = new Message(-37);
			message.writer().writeByte(action);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A68 RID: 2664 RVA: 0x000A9934 File Offset: 0x000A7B34
	public void login2(string user)
	{
		Res.outz("Login 2:  " + user);
		Message message = null;
		try
		{
			message = new Message(-101);
			message.writer().writeUTF(user);
			message.writer().writeByte(1);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A69 RID: 2665 RVA: 0x000A99B8 File Offset: 0x000A7BB8
	public void getMagicTree(sbyte action)
	{
		Message message = null;
		try
		{
			message = new Message(-34);
			message.writer().writeByte(action);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A6A RID: 2666 RVA: 0x000A9A34 File Offset: 0x000A7C34
	public void upPotential(int typePotential, int num)
	{
		Message message = null;
		try
		{
			message = Service.messageSubCommand(16);
			message.writer().writeByte(typePotential);
			message.writer().writeShort(num);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A6B RID: 2667 RVA: 0x000A9ABC File Offset: 0x000A7CBC
	public void getResource(sbyte action, MyVector vResourceIndex)
	{
		Res.outz("request resource action= " + action.ToString());
		Message message = null;
		try
		{
			message = new Message(-74);
			message.writer().writeByte(action);
			bool flag = action == 2 && vResourceIndex != null;
			if (flag)
			{
				message.writer().writeShort(vResourceIndex.size());
				for (int i = 0; i < vResourceIndex.size(); i++)
				{
					message.writer().writeShort(short.Parse((string)vResourceIndex.elementAt(i)));
				}
			}
			bool flag2 = Session_ME2.gI().isConnected() && !Session_ME2.connecting;
			if (flag2)
			{
				this.session = Session_ME2.gI();
			}
			else
			{
				Service.reciveFromMainSession = true;
				this.session = Session_ME.gI();
			}
			this.session.sendMessage(message);
			this.session = Session_ME.gI();
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A6C RID: 2668 RVA: 0x000A9BF4 File Offset: 0x000A7DF4
	public void requestMapSelect(int selected)
	{
		Res.outz("request magic tree");
		Message message = null;
		try
		{
			message = new Message(-91);
			message.writer().writeByte(selected);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A6D RID: 2669 RVA: 0x000A9C64 File Offset: 0x000A7E64
	public void petInfo()
	{
		Message message = null;
		try
		{
			message = new Message(-107);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A6E RID: 2670 RVA: 0x000A9CBC File Offset: 0x000A7EBC
	public void sendTop(string topName, sbyte selected)
	{
		Message message = null;
		try
		{
			message = new Message(-96);
			message.writer().writeUTF(topName);
			message.writer().writeByte(selected);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A6F RID: 2671 RVA: 0x000A9D2C File Offset: 0x000A7F2C
	public void enemy(sbyte b, int charID)
	{
		Message message = null;
		Res.outz("add enemy");
		try
		{
			message = new Message(-99);
			message.writer().writeByte(b);
			bool flag = b == 1 || b == 2;
			if (flag)
			{
				message.writer().writeInt(charID);
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A70 RID: 2672 RVA: 0x000A9DB8 File Offset: 0x000A7FB8
	public void kigui(sbyte action, int itemId, sbyte moneyType, int money, int quaintly)
	{
		Message message = null;
		try
		{
			Res.outz("ki gui action= " + action.ToString());
			message = new Message(-100);
			message.writer().writeByte(action);
			bool flag = action == 0;
			if (flag)
			{
				message.writer().writeShort(itemId);
				message.writer().writeByte(moneyType);
				message.writer().writeInt(money);
				message.writer().writeInt(quaintly);
			}
			bool flag2 = action == 1 || action == 2;
			if (flag2)
			{
				message.writer().writeShort(itemId);
			}
			bool flag3 = action == 3;
			if (flag3)
			{
				message.writer().writeShort(itemId);
				message.writer().writeByte(moneyType);
				message.writer().writeInt(money);
			}
			bool flag4 = action == 4;
			if (flag4)
			{
				message.writer().writeByte(moneyType);
				message.writer().writeByte(money);
				Res.outz("currTab= " + moneyType.ToString() + " page= " + money.ToString());
			}
			bool flag5 = action == 5;
			if (flag5)
			{
				message.writer().writeShort(itemId);
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A71 RID: 2673 RVA: 0x000A9F40 File Offset: 0x000A8140
	public void getFlag(sbyte action, sbyte flagType)
	{
		Message message = null;
		try
		{
			message = new Message(-103);
			message.writer().writeByte(action);
			Res.outz("------------service--  " + action.ToString() + "   " + flagType.ToString());
			bool flag = action != 0;
			if (flag)
			{
				message.writer().writeByte(flagType);
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A72 RID: 2674 RVA: 0x000A9FE0 File Offset: 0x000A81E0
	public void setLockInventory(int pass)
	{
		Message message = null;
		try
		{
			Res.outz("------------setLockInventory:     " + pass.ToString());
			message = new Message(-104);
			message.writer().writeInt(pass);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A73 RID: 2675 RVA: 0x000AA05C File Offset: 0x000A825C
	public void petStatus(sbyte status)
	{
		Message message = null;
		try
		{
			message = new Message(-108);
			message.writer().writeByte(status);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A74 RID: 2676 RVA: 0x000AA0C0 File Offset: 0x000A82C0
	public void transportNow()
	{
		Message message = null;
		try
		{
			Res.outz("------------transportNow  ");
			message = new Message(-105);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A75 RID: 2677 RVA: 0x000AA124 File Offset: 0x000A8324
	public void funsion(sbyte type)
	{
		Message message = null;
		try
		{
			Res.outz("FUNSION");
			message = new Message(125);
			message.writer().writeByte(type);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A76 RID: 2678 RVA: 0x000AA1A0 File Offset: 0x000A83A0
	public void imageSource(MyVector vID)
	{
		Message message = null;
		try
		{
			Res.outz("IMAGE SOURCE size= " + vID.size().ToString());
			message = new Message(-111);
			message.writer().writeShort(vID.size());
			bool flag = vID.size() > 0;
			if (flag)
			{
				for (int i = 0; i < vID.size(); i++)
				{
					Res.outz("gui len str " + ((ImageSource)vID.elementAt(i)).id);
					message.writer().writeUTF(((ImageSource)vID.elementAt(i)).id);
				}
			}
			bool flag2 = Session_ME2.gI().isConnected() && !Session_ME2.connecting;
			if (flag2)
			{
				this.session = Session_ME2.gI();
			}
			else
			{
				this.session = Session_ME.gI();
				Service.reciveFromMainSession = true;
			}
			this.session.sendMessage(message);
			this.session = Session_ME.gI();
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A77 RID: 2679 RVA: 0x000AA2FC File Offset: 0x000A84FC
	public void getQuayso()
	{
		Message message = null;
		try
		{
			message = new Message(-126);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A78 RID: 2680 RVA: 0x000AA360 File Offset: 0x000A8560
	public void sendServerData(sbyte action, int id, sbyte[] data)
	{
		Message message = null;
		try
		{
			Res.outz("SERVER DATA");
			message = new Message(-110);
			message.writer().writeByte(action);
			bool flag = action == 1;
			if (flag)
			{
				message.writer().writeInt(id);
				bool flag2 = data != null;
				if (flag2)
				{
					int num = data.Length;
					message.writer().writeShort(num);
					message.writer().write(ref data, 0, num);
				}
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A79 RID: 2681 RVA: 0x000AA410 File Offset: 0x000A8610
	public void changeOnKeyScr(sbyte[] skill)
	{
		Message message = null;
		try
		{
			message = new Message(-113);
			for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
			{
				message.writer().writeByte(skill[i]);
			}
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A7A RID: 2682 RVA: 0x000AA49C File Offset: 0x000A869C
	public void requestPean()
	{
		Message message = null;
		try
		{
			message = new Message(-114);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A7B RID: 2683 RVA: 0x000AA500 File Offset: 0x000A8700
	public void sendThachDau(int id)
	{
		Res.outz("GUI THACH DAU");
		Message message = null;
		try
		{
			message = new Message(-118);
			message.writer().writeInt(id);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A7C RID: 2684 RVA: 0x000AA57C File Offset: 0x000A877C
	public void messagePlayerMenu(int charId)
	{
		Message message = null;
		try
		{
			message = new Message(-30);
			message.writer().writeByte(63);
			message.writer().writeInt(charId);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A7D RID: 2685 RVA: 0x000AA5FC File Offset: 0x000A87FC
	public void playerMenuAction(int charId, short select)
	{
		Message message = null;
		try
		{
			message = new Message(-30);
			message.writer().writeByte(64);
			message.writer().writeInt(charId);
			message.writer().writeShort(select);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			ex.StackTrace.ToString();
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A7E RID: 2686 RVA: 0x000AA688 File Offset: 0x000A8888
	public void getImgByName(string nameImg)
	{
		Message message = null;
		try
		{
			message = new Message(66);
			message.writer().writeUTF(nameImg);
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A7F RID: 2687 RVA: 0x000AA6EC File Offset: 0x000A88EC
	public void SendCrackBall(byte type, byte soluong)
	{
		Message message = new Message(-127);
		try
		{
			message.writer().writeByte((int)type);
			bool flag = soluong > 0;
			if (flag)
			{
				message.writer().writeByte((int)soluong);
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A80 RID: 2688 RVA: 0x000AA764 File Offset: 0x000A8964
	public void SendRada(int i, int id)
	{
		Message message = new Message(sbyte.MaxValue);
		try
		{
			message.writer().writeByte(i);
			bool flag = id != -1;
			if (flag)
			{
				message.writer().writeShort(id);
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A81 RID: 2689 RVA: 0x000AA7E0 File Offset: 0x000A89E0
	public void sendOptHat(sbyte action)
	{
		Message message = new Message(24);
		try
		{
			bool flag = action == 1;
			if (flag)
			{
				sbyte[] array = Res.TakeSnapShot();
				message.writer().writeByte(1);
				message.writer().writeShort(array.Length);
				message.writer().write(array);
			}
			else
			{
				message.writer().writeByte((global::Char.myCharz().idHat != -1) ? -1 : 0);
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A82 RID: 2690 RVA: 0x000AA890 File Offset: 0x000A8A90
	public void sendDelAcc()
	{
		Message message = new Message(69);
		try
		{
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A83 RID: 2691 RVA: 0x000AA8E4 File Offset: 0x000A8AE4
	public void new_skill_not_focus(sbyte idTemplateSkill, sbyte dir, short x, short y)
	{
		Message message = null;
		try
		{
			message = new Message(-45);
			message.writer().writeSByte(20);
			message.writer().writeSByte(idTemplateSkill);
			message.writer().writeShort(global::Char.myCharz().cx);
			message.writer().writeShort(global::Char.myCharz().cy);
			message.writer().writeSByte(dir);
			message.writer().writeShort(x);
			message.writer().writeShort(y);
			this.session.sendMessage(message);
		}
		catch (Exception ex)
		{
			Cout.println(ex.Message + ex.StackTrace);
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A84 RID: 2692 RVA: 0x000AA9C0 File Offset: 0x000A8BC0
	public void sendCT_ready(sbyte sub, sbyte sub_sub)
	{
		Message message = null;
		try
		{
			message = new Message(24);
			message.writer().writeByte(sub);
			message.writer().writeByte(sub_sub);
			Res.err(" =====> SEND OPTION_HAT " + sub.ToString() + "_" + sub_sub.ToString());
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x06000A85 RID: 2693 RVA: 0x000AAA54 File Offset: 0x000A8C54
	public void sendCmdExtra(sbyte sub, string user, string pass)
	{
		Message message = new Message(24);
		try
		{
			message.writer().writeByte(sub);
			bool flag = sub == sbyte.MaxValue;
			if (flag)
			{
				message.writer().writeUTF(user);
				message.writer().writeUTF(pass);
				Controller.isEXTRA_LINK = false;
				Res.err(string.Concat(new string[]
				{
					" =====> SEND EXTRA_LINK ",
					sub.ToString(),
					" user:",
					user,
					" pass:",
					pass
				}));
			}
			this.session.sendMessage(message);
		}
		catch (Exception)
		{
		}
		finally
		{
			message.cleanup();
		}
	}

	// Token: 0x04001257 RID: 4695
	private ISession session = Session_ME.gI();

	// Token: 0x04001258 RID: 4696
	protected static Service instance;

	// Token: 0x04001259 RID: 4697
	public static long curCheckController;

	// Token: 0x0400125A RID: 4698
	public static long curCheckMap;

	// Token: 0x0400125B RID: 4699
	public static long logController;

	// Token: 0x0400125C RID: 4700
	public static long logMap;

	// Token: 0x0400125D RID: 4701
	public int demGui;

	// Token: 0x0400125E RID: 4702
	public static bool reciveFromMainSession;
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using UnityEngine;

// Token: 0x020000BC RID: 188
public class Session_ME : ISession
{
	// Token: 0x06000A87 RID: 2695 RVA: 0x000AAB30 File Offset: 0x000A8D30
	public Session_ME()
	{
		Debug.Log("init Session_ME");
	}

	// Token: 0x06000A88 RID: 2696 RVA: 0x000AAB45 File Offset: 0x000A8D45
	public void clearSendingMessage()
	{
		Session_ME.sender.sendingMessage.Clear();
	}

	// Token: 0x06000A89 RID: 2697 RVA: 0x000AAB58 File Offset: 0x000A8D58
	public static Session_ME gI()
	{
		bool flag = Session_ME.instance == null;
		if (flag)
		{
			Session_ME.instance = new Session_ME();
		}
		return Session_ME.instance;
	}

	// Token: 0x06000A8A RID: 2698 RVA: 0x000AAB88 File Offset: 0x000A8D88
	public bool isConnected()
	{
		return Session_ME.connected && Session_ME.sc != null && Session_ME.dis != null;
	}

	// Token: 0x06000A8B RID: 2699 RVA: 0x000AABB3 File Offset: 0x000A8DB3
	public void setHandler(IMessageHandler msgHandler)
	{
		Session_ME.messageHandler = msgHandler;
	}

	// Token: 0x06000A8C RID: 2700 RVA: 0x000AABBC File Offset: 0x000A8DBC
	public void connect(string host, int port)
	{
		bool flag = Session_ME.connected || Session_ME.connecting;
		if (flag)
		{
			Debug.Log(">>>return connect ...!" + Session_ME.connected.ToString() + "  ::  " + Session_ME.connecting.ToString());
		}
		else
		{
			bool flag2 = mSystem.currentTimeMillis() < this.timeWaitConnect;
			if (flag2)
			{
				Debug.LogError(">>>>chặn việc nó kết nối 2 3 lần liên tục");
			}
			else
			{
				this.timeWaitConnect = mSystem.currentTimeMillis() + 50L;
				bool flag3 = Session_ME.isMainSession;
				if (flag3)
				{
					ServerListScreen.testConnect = -1;
				}
				this.host = host;
				this.port = port;
				Session_ME.getKeyComplete = false;
				this.close();
				Debug.Log("connecting...!");
				Debug.Log("host: " + host);
				Debug.Log("port: " + port.ToString());
				Session_ME.initThread = new Thread(new ThreadStart(this.NetworkInit));
				Session_ME.initThread.Start();
			}
		}
	}

	// Token: 0x06000A8D RID: 2701 RVA: 0x000AACC0 File Offset: 0x000A8EC0
	private void NetworkInit()
	{
		Session_ME.isCancel = false;
		Session_ME.connecting = true;
		Thread.CurrentThread.Priority = System.Threading.ThreadPriority.Highest;
		Session_ME.connected = true;
		try
		{
			this.doConnect(this.host, this.port);
			Session_ME.messageHandler.onConnectOK(Session_ME.isMainSession);
		}
		catch (Exception)
		{
			bool flag = Session_ME.messageHandler != null;
			if (flag)
			{
				this.close();
				Session_ME.messageHandler.onConnectionFail(Session_ME.isMainSession);
			}
		}
	}

	// Token: 0x06000A8E RID: 2702 RVA: 0x000AAD50 File Offset: 0x000A8F50
	public void doConnectDirect(string host, int port)
	{
		Session_ME.sc = new TcpClient();
		Session_ME.sc.Connect(host, port);
		Session_ME.dataStream = Session_ME.sc.GetStream();
		Session_ME.dis = new BinaryReader(Session_ME.dataStream, new UTF8Encoding());
		Session_ME.dos = new BinaryWriter(Session_ME.dataStream, new UTF8Encoding());
		Session_ME.sendThread = new Thread(new ThreadStart(Session_ME.sender.run));
		Session_ME.sendThread.Start();
		Session_ME.MessageCollector @object = new Session_ME.MessageCollector();
		Cout.LogError("new -----");
		Session_ME.collectorThread = new Thread(new ThreadStart(@object.run));
		Session_ME.collectorThread.Start();
		Session_ME.timeConnected = Session_ME.currentTimeMillis();
		Session_ME.connecting = false;
		Session_ME.doSendMessage(new Message(-27));
		Session_ME.key = null;
	}

	// Token: 0x06000A8F RID: 2703 RVA: 0x000AAE28 File Offset: 0x000A9028
	public void doConnect(string host, int port)
	{
		bool flag = DataAccount.Proxy == "none";
		if (flag)
		{
			Cout.LogError("\ud83d\udd39 Không sử dụng proxy, kết nối trực tiếp...");
			this.doConnectDirect(host, port);
		}
		else
		{
			string[] array = DataAccount.Proxy.Split(new char[]
			{
				':'
			});
			bool flag2 = array.Length == 4;
			if (flag2)
			{
				string text = array[0];
				int num;
				bool flag3 = int.TryParse(array[1], out num);
				if (flag3)
				{
					string proxyUser = array[2];
					string proxyPass = array[3];
					Cout.LogError(string.Format("\ud83d\udd39 Kết nối qua proxy {0}:{1}...", text, num));
					this.doConnectWithProxy(host, port, text, num, proxyUser, proxyPass);
				}
				else
				{
					Cout.LogError("❌ Lỗi: Cổng proxy không hợp lệ!");
				}
			}
			else
			{
				Cout.LogError("❌ Lỗi: Định dạng proxy không hợp lệ!");
			}
		}
	}

	// Token: 0x06000A90 RID: 2704 RVA: 0x000AAEF0 File Offset: 0x000A90F0
	public void doConnectWithProxy(string host, int port, string proxyIP, int proxyPort, string proxyUser, string proxyPass)
	{
		try
		{
			Session_ME.sc = new TcpClient();
			Session_ME.sc.Connect(proxyIP, proxyPort);
			Session_ME.dataStream = Session_ME.sc.GetStream();
			Session_ME.dis = new BinaryReader(Session_ME.dataStream, new UTF8Encoding());
			Session_ME.dos = new BinaryWriter(Session_ME.dataStream, new UTF8Encoding());
			string text = Convert.ToBase64String(Encoding.ASCII.GetBytes(proxyUser + ":" + proxyPass));
			string s = string.Concat(new string[]
			{
				string.Format("CONNECT {0}:{1} HTTP/1.1\r\n", host, port),
				string.Format("Host: {0}:{1}\r\n", host, port),
				"Proxy-Authorization: Basic ",
				text,
				"\r\n\r\n"
			});
			Session_ME.dos.Write(Encoding.ASCII.GetBytes(s));
			Session_ME.dos.Flush();
			byte[] array = new byte[1024];
			int num = Session_ME.dataStream.Read(array, 0, array.Length);
			string @string = Encoding.ASCII.GetString(array, 0, num);
			bool flag = !@string.Contains("200 Connection established");
			if (flag)
			{
				throw new Exception("Không thể kết nối qua proxy! Lỗi: " + @string);
			}
			Session_ME.sendThread = new Thread(new ThreadStart(Session_ME.sender.run));
			Session_ME.sendThread.Start();
			Session_ME.MessageCollector @object = new Session_ME.MessageCollector();
			Session_ME.collectorThread = new Thread(new ThreadStart(@object.run));
			Session_ME.collectorThread.Start();
			Session_ME.timeConnected = Session_ME.currentTimeMillis();
			Session_ME.connecting = false;
			Session_ME.doSendMessage(new Message(-27));
			Session_ME.key = null;
			GameCanvas.startOKDlg(string.Format("\ud83d\ude80 Kết nối hoàn tất!\nProxy:{0}:{1}:{2}:{3}", new object[]
			{
				proxyIP,
				proxyPort,
				proxyUser,
				proxyPass
			}), true);
		}
		catch (Exception ex)
		{
			GameCanvas.startOKDlg(ex.Message, true);
		}
	}

	// Token: 0x06000A91 RID: 2705 RVA: 0x000AB0FC File Offset: 0x000A92FC
	public void sendMessage(Message message)
	{
		Session_ME.count++;
		Res.outz("SEND MSG: " + message.command.ToString());
		Session_ME.sender.AddMessage(message);
	}

	// Token: 0x06000A92 RID: 2706 RVA: 0x000AB134 File Offset: 0x000A9334
	private static void doSendMessage(Message m)
	{
		sbyte[] data = m.getData();
		try
		{
			bool flag = Session_ME.getKeyComplete;
			if (flag)
			{
				sbyte value = Session_ME.writeKey(m.command);
				Session_ME.dos.Write(value);
			}
			else
			{
				Session_ME.dos.Write(m.command);
			}
			bool flag2 = data != null;
			if (flag2)
			{
				int num = data.Length;
				bool flag3 = Session_ME.getKeyComplete;
				if (flag3)
				{
					int num2 = (int)Session_ME.writeKey((sbyte)(num >> 8));
					Session_ME.dos.Write((sbyte)num2);
					int num3 = (int)Session_ME.writeKey((sbyte)(num & 255));
					Session_ME.dos.Write((sbyte)num3);
				}
				else
				{
					Session_ME.dos.Write((ushort)num);
				}
				bool flag4 = Session_ME.getKeyComplete;
				if (flag4)
				{
					for (int i = 0; i < data.Length; i++)
					{
						sbyte value2 = Session_ME.writeKey(data[i]);
						Session_ME.dos.Write(value2);
					}
				}
				Session_ME.sendByteCount += 5 + data.Length;
			}
			else
			{
				bool flag5 = Session_ME.getKeyComplete;
				if (flag5)
				{
					int num4 = 0;
					int num5 = (int)Session_ME.writeKey((sbyte)(num4 >> 8));
					Session_ME.dos.Write((sbyte)num5);
					int num6 = (int)Session_ME.writeKey((sbyte)(num4 & 255));
					Session_ME.dos.Write((sbyte)num6);
				}
				else
				{
					Session_ME.dos.Write(0);
				}
				Session_ME.sendByteCount += 5;
			}
			Session_ME.dos.Flush();
		}
		catch (Exception ex)
		{
			Debug.Log(ex.StackTrace);
			Session_ME.dos.Flush();
		}
	}

	// Token: 0x06000A93 RID: 2707 RVA: 0x000AB2EC File Offset: 0x000A94EC
	public static sbyte readKey(sbyte b)
	{
		sbyte[] array = Session_ME.key;
		sbyte b2 = Session_ME.curR;
		Session_ME.curR = b2 + 1;
		sbyte result = (sbyte)(((int)array[(int)b2] & 255) ^ ((int)b & 255));
		bool flag = (int)Session_ME.curR >= Session_ME.key.Length;
		if (flag)
		{
			Session_ME.curR %= (sbyte)Session_ME.key.Length;
		}
		return result;
	}

	// Token: 0x06000A94 RID: 2708 RVA: 0x000AB354 File Offset: 0x000A9554
	public static sbyte writeKey(sbyte b)
	{
		sbyte[] array = Session_ME.key;
		sbyte b2 = Session_ME.curW;
		Session_ME.curW = b2 + 1;
		sbyte result = (sbyte)(((int)array[(int)b2] & 255) ^ ((int)b & 255));
		bool flag = (int)Session_ME.curW >= Session_ME.key.Length;
		if (flag)
		{
			Session_ME.curW %= (sbyte)Session_ME.key.Length;
		}
		return result;
	}

	// Token: 0x06000A95 RID: 2709 RVA: 0x000AB3BC File Offset: 0x000A95BC
	public static void onRecieveMsg(Message msg)
	{
		bool flag = Thread.CurrentThread.Name == Main.mainThreadName;
		if (flag)
		{
			Session_ME.messageHandler.onMessage(msg);
		}
		else
		{
			Session_ME.recieveMsg.addElement(msg);
		}
	}

	// Token: 0x06000A96 RID: 2710 RVA: 0x000AB400 File Offset: 0x000A9600
	public static void update()
	{
		while (Session_ME.recieveMsg.size() > 0)
		{
			Message message = (Message)Session_ME.recieveMsg.elementAt(0);
			bool isStopReadMessage = Controller.isStopReadMessage;
			if (isStopReadMessage)
			{
				break;
			}
			bool flag = message == null;
			if (flag)
			{
				Session_ME.recieveMsg.removeElementAt(0);
				break;
			}
			Session_ME.messageHandler.onMessage(message);
			Session_ME.recieveMsg.removeElementAt(0);
		}
	}

	// Token: 0x06000A97 RID: 2711 RVA: 0x000AB46F File Offset: 0x000A966F
	public void close()
	{
		Session_ME.cleanNetwork();
	}

	// Token: 0x06000A98 RID: 2712 RVA: 0x000AB478 File Offset: 0x000A9678
	private static void cleanNetwork()
	{
		Session_ME.key = null;
		Session_ME.curR = 0;
		Session_ME.curW = 0;
		Debug.LogError(">>>cleanNetwork ...!");
		try
		{
			Session_ME.connected = false;
			Session_ME.connecting = false;
			bool flag = Session_ME.sc != null;
			if (flag)
			{
				Session_ME.sc.Close();
				Session_ME.sc = null;
			}
			bool flag2 = Session_ME.dataStream != null;
			if (flag2)
			{
				Session_ME.dataStream.Close();
				Session_ME.dataStream = null;
			}
			bool flag3 = Session_ME.dos != null;
			if (flag3)
			{
				Session_ME.dos.Close();
				Session_ME.dos = null;
			}
			bool flag4 = Session_ME.dis != null;
			if (flag4)
			{
				Session_ME.dis.Close();
				Session_ME.dis = null;
			}
			bool flag5 = Thread.CurrentThread.Name == Main.mainThreadName;
			if (flag5)
			{
				bool flag6 = Session_ME.sendThread != null;
				if (flag6)
				{
					Session_ME.sendThread.Abort();
				}
				Session_ME.sendThread = null;
				bool flag7 = Session_ME.initThread != null;
				if (flag7)
				{
					Session_ME.initThread.Abort();
				}
				Session_ME.initThread = null;
				bool flag8 = Session_ME.collectorThread != null;
				if (flag8)
				{
					Session_ME.collectorThread.Abort();
				}
				Session_ME.collectorThread = null;
			}
			else
			{
				Session_ME.sendThread = null;
				Session_ME.initThread = null;
				Session_ME.collectorThread = null;
			}
			bool flag9 = Session_ME.isMainSession;
			if (flag9)
			{
				ServerListScreen.testConnect = 0;
			}
			Controller.isGet_CLIENT_INFO = false;
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000A99 RID: 2713 RVA: 0x000AB600 File Offset: 0x000A9800
	public static int currentTimeMillis()
	{
		return Environment.TickCount;
	}

	// Token: 0x06000A9A RID: 2714 RVA: 0x000AB618 File Offset: 0x000A9818
	public static byte convertSbyteToByte(sbyte var)
	{
		bool flag = var > 0;
		byte result;
		if (flag)
		{
			result = (byte)var;
		}
		else
		{
			result = (byte)((int)var + 256);
		}
		return result;
	}

	// Token: 0x06000A9B RID: 2715 RVA: 0x000AB640 File Offset: 0x000A9840
	public static byte[] convertSbyteToByte(sbyte[] var)
	{
		byte[] array = new byte[var.Length];
		for (int i = 0; i < var.Length; i++)
		{
			bool flag = var[i] > 0;
			if (flag)
			{
				array[i] = (byte)var[i];
			}
			else
			{
				array[i] = (byte)((int)var[i] + 256);
			}
		}
		return array;
	}

	// Token: 0x06000A9C RID: 2716 RVA: 0x000AB698 File Offset: 0x000A9898
	public bool isCompareIPConnect()
	{
		return true;
	}

	// Token: 0x0400125F RID: 4703
	protected static Session_ME instance = new Session_ME();

	// Token: 0x04001260 RID: 4704
	private static NetworkStream dataStream;

	// Token: 0x04001261 RID: 4705
	private static BinaryReader dis;

	// Token: 0x04001262 RID: 4706
	private static BinaryWriter dos;

	// Token: 0x04001263 RID: 4707
	public static IMessageHandler messageHandler;

	// Token: 0x04001264 RID: 4708
	public static bool isMainSession = true;

	// Token: 0x04001265 RID: 4709
	private static TcpClient sc;

	// Token: 0x04001266 RID: 4710
	public static bool connected;

	// Token: 0x04001267 RID: 4711
	public static bool connecting;

	// Token: 0x04001268 RID: 4712
	private static Session_ME.Sender sender = new Session_ME.Sender();

	// Token: 0x04001269 RID: 4713
	public static Thread initThread;

	// Token: 0x0400126A RID: 4714
	public static Thread collectorThread;

	// Token: 0x0400126B RID: 4715
	public static Thread sendThread;

	// Token: 0x0400126C RID: 4716
	public static int sendByteCount;

	// Token: 0x0400126D RID: 4717
	public static int recvByteCount;

	// Token: 0x0400126E RID: 4718
	private static bool getKeyComplete;

	// Token: 0x0400126F RID: 4719
	public static sbyte[] key = null;

	// Token: 0x04001270 RID: 4720
	private static sbyte curR;

	// Token: 0x04001271 RID: 4721
	private static sbyte curW;

	// Token: 0x04001272 RID: 4722
	private static int timeConnected;

	// Token: 0x04001273 RID: 4723
	private long lastTimeConn;

	// Token: 0x04001274 RID: 4724
	public static string strRecvByteCount = string.Empty;

	// Token: 0x04001275 RID: 4725
	public static bool isCancel;

	// Token: 0x04001276 RID: 4726
	private string host;

	// Token: 0x04001277 RID: 4727
	private int port;

	// Token: 0x04001278 RID: 4728
	private long timeWaitConnect;

	// Token: 0x04001279 RID: 4729
	public static int count;

	// Token: 0x0400127A RID: 4730
	public static MyVector recieveMsg = new MyVector();

	// Token: 0x02000101 RID: 257
	public class Sender
	{
		// Token: 0x06000CC8 RID: 3272 RVA: 0x000C539F File Offset: 0x000C359F
		public Sender()
		{
			this.sendingMessage = new List<Message>();
		}

		// Token: 0x06000CC9 RID: 3273 RVA: 0x000C53B4 File Offset: 0x000C35B4
		public void AddMessage(Message message)
		{
			this.sendingMessage.Add(message);
		}

		// Token: 0x06000CCA RID: 3274 RVA: 0x000C53C4 File Offset: 0x000C35C4
		public void run()
		{
			while (Session_ME.connected)
			{
				try
				{
					bool getKeyComplete = Session_ME.getKeyComplete;
					if (getKeyComplete)
					{
						while (this.sendingMessage.Count > 0)
						{
							Message m = this.sendingMessage[0];
							Session_ME.doSendMessage(m);
							this.sendingMessage.RemoveAt(0);
						}
					}
					try
					{
						Thread.Sleep(5);
					}
					catch (Exception ex)
					{
						Cout.LogError(ex.ToString());
					}
				}
				catch (Exception)
				{
					Res.outz("error send message! ");
				}
			}
		}

		// Token: 0x040016ED RID: 5869
		public List<Message> sendingMessage;
	}

	// Token: 0x02000102 RID: 258
	private class MessageCollector
	{
		// Token: 0x06000CCB RID: 3275 RVA: 0x000C5470 File Offset: 0x000C3670
		public void run()
		{
			try
			{
				while (Session_ME.connected)
				{
					Message message = this.readMessage();
					bool flag = message == null;
					if (flag)
					{
						break;
					}
					try
					{
						bool flag2 = message.command == -27;
						if (flag2)
						{
							this.getKey(message);
						}
						else
						{
							Session_ME.onRecieveMsg(message);
						}
					}
					catch (Exception)
					{
						Cout.println("LOI NHAN  MESS THU 1");
					}
					try
					{
						Thread.Sleep(5);
					}
					catch (Exception)
					{
						Cout.println("LOI NHAN  MESS THU 2");
					}
				}
			}
			catch (Exception ex)
			{
				Debug.Log("error read message!");
				Debug.Log(ex.Message.ToString());
			}
			bool flag3 = !Session_ME.connected;
			if (!flag3)
			{
				bool flag4 = Session_ME.messageHandler != null;
				if (flag4)
				{
					bool flag5 = Session_ME.currentTimeMillis() - Session_ME.timeConnected > 500;
					if (flag5)
					{
						Session_ME.messageHandler.onDisconnected(Session_ME.isMainSession);
					}
					else
					{
						Session_ME.messageHandler.onConnectionFail(Session_ME.isMainSession);
					}
				}
				bool flag6 = Session_ME.sc != null;
				if (flag6)
				{
					Session_ME.cleanNetwork();
				}
			}
		}

		// Token: 0x06000CCC RID: 3276 RVA: 0x000C55B8 File Offset: 0x000C37B8
		private void getKey(Message message)
		{
			try
			{
				sbyte b = message.reader().readSByte();
				Session_ME.key = new sbyte[(int)b];
				for (int i = 0; i < (int)b; i++)
				{
					Session_ME.key[i] = message.reader().readSByte();
				}
				for (int j = 0; j < Session_ME.key.Length - 1; j++)
				{
					ref sbyte ptr = ref Session_ME.key[j + 1];
					ptr ^= Session_ME.key[j];
				}
				Session_ME.getKeyComplete = true;
				GameMidlet.IP2 = message.reader().readUTF();
				GameMidlet.PORT2 = message.reader().readInt();
				GameMidlet.isConnect2 = (message.reader().readByte() != 0);
				bool flag = Session_ME.isMainSession && GameMidlet.isConnect2;
				if (flag)
				{
					GameCanvas.connect2();
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x06000CCD RID: 3277 RVA: 0x000C56B0 File Offset: 0x000C38B0
		private Message readMessage2(sbyte cmd)
		{
			int num = (int)Session_ME.readKey(Session_ME.dis.ReadSByte()) + 128;
			int num2 = (int)Session_ME.readKey(Session_ME.dis.ReadSByte()) + 128;
			int num3 = (int)Session_ME.readKey(Session_ME.dis.ReadSByte()) + 128;
			int num4 = (num3 * 256 + num2) * 256 + num;
			sbyte[] array = new sbyte[num4];
			byte[] src = Session_ME.dis.ReadBytes(num4);
			Buffer.BlockCopy(src, 0, array, 0, num4);
			Session_ME.recvByteCount += 5 + num4;
			int num5 = Session_ME.recvByteCount + Session_ME.sendByteCount;
			Session_ME.strRecvByteCount = (num5 / 1024).ToString() + "." + (num5 % 1024 / 102).ToString() + "Kb";
			bool getKeyComplete = Session_ME.getKeyComplete;
			if (getKeyComplete)
			{
				for (int i = 0; i < array.Length; i++)
				{
					array[i] = Session_ME.readKey(array[i]);
				}
			}
			return new Message(cmd, array);
		}

		// Token: 0x06000CCE RID: 3278 RVA: 0x000C57D0 File Offset: 0x000C39D0
		private Message readMessage()
		{
			try
			{
				sbyte b = Session_ME.dis.ReadSByte();
				bool getKeyComplete = Session_ME.getKeyComplete;
				if (getKeyComplete)
				{
					b = Session_ME.readKey(b);
				}
				bool flag = b == -32 || b == -66 || b == 11 || b == -67 || b == -74 || b == -87 || b == 66 || b == 12;
				if (flag)
				{
					return this.readMessage2(b);
				}
				bool getKeyComplete2 = Session_ME.getKeyComplete;
				int num;
				if (getKeyComplete2)
				{
					sbyte b2 = Session_ME.dis.ReadSByte();
					sbyte b3 = Session_ME.dis.ReadSByte();
					num = (((int)Session_ME.readKey(b2) & 255) << 8 | ((int)Session_ME.readKey(b3) & 255));
				}
				else
				{
					sbyte b4 = Session_ME.dis.ReadSByte();
					sbyte b5 = Session_ME.dis.ReadSByte();
					num = (((int)b4 & 65280) | ((int)b5 & 255));
				}
				sbyte[] array = new sbyte[num];
				byte[] src = Session_ME.dis.ReadBytes(num);
				Buffer.BlockCopy(src, 0, array, 0, num);
				Session_ME.recvByteCount += 5 + num;
				int num2 = Session_ME.recvByteCount + Session_ME.sendByteCount;
				Session_ME.strRecvByteCount = (num2 / 1024).ToString() + "." + (num2 % 1024 / 102).ToString() + "Kb";
				bool getKeyComplete3 = Session_ME.getKeyComplete;
				if (getKeyComplete3)
				{
					for (int i = 0; i < array.Length; i++)
					{
						array[i] = Session_ME.readKey(array[i]);
					}
				}
				return new Message(b, array);
			}
			catch (Exception ex)
			{
				Debug.Log(ex.StackTrace.ToString());
			}
			return null;
		}
	}
}
using System;
using System.Threading;
using UnityEngine;

// Token: 0x02000102 RID: 258
private class MessageCollector
{
	// Token: 0x06000CCB RID: 3275 RVA: 0x000C5470 File Offset: 0x000C3670
	public void run()
	{
		try
		{
			while (Session_ME.connected)
			{
				Message message = this.readMessage();
				bool flag = message == null;
				if (flag)
				{
					break;
				}
				try
				{
					bool flag2 = message.command == -27;
					if (flag2)
					{
						this.getKey(message);
					}
					else
					{
						Session_ME.onRecieveMsg(message);
					}
				}
				catch (Exception)
				{
					Cout.println("LOI NHAN  MESS THU 1");
				}
				try
				{
					Thread.Sleep(5);
				}
				catch (Exception)
				{
					Cout.println("LOI NHAN  MESS THU 2");
				}
			}
		}
		catch (Exception ex)
		{
			Debug.Log("error read message!");
			Debug.Log(ex.Message.ToString());
		}
		bool flag3 = !Session_ME.connected;
		if (!flag3)
		{
			bool flag4 = Session_ME.messageHandler != null;
			if (flag4)
			{
				bool flag5 = Session_ME.currentTimeMillis() - Session_ME.timeConnected > 500;
				if (flag5)
				{
					Session_ME.messageHandler.onDisconnected(Session_ME.isMainSession);
				}
				else
				{
					Session_ME.messageHandler.onConnectionFail(Session_ME.isMainSession);
				}
			}
			bool flag6 = Session_ME.sc != null;
			if (flag6)
			{
				Session_ME.cleanNetwork();
			}
		}
	}

	// Token: 0x06000CCC RID: 3276 RVA: 0x000C55B8 File Offset: 0x000C37B8
	private void getKey(Message message)
	{
		try
		{
			sbyte b = message.reader().readSByte();
			Session_ME.key = new sbyte[(int)b];
			for (int i = 0; i < (int)b; i++)
			{
				Session_ME.key[i] = message.reader().readSByte();
			}
			for (int j = 0; j < Session_ME.key.Length - 1; j++)
			{
				ref sbyte ptr = ref Session_ME.key[j + 1];
				ptr ^= Session_ME.key[j];
			}
			Session_ME.getKeyComplete = true;
			GameMidlet.IP2 = message.reader().readUTF();
			GameMidlet.PORT2 = message.reader().readInt();
			GameMidlet.isConnect2 = (message.reader().readByte() != 0);
			bool flag = Session_ME.isMainSession && GameMidlet.isConnect2;
			if (flag)
			{
				GameCanvas.connect2();
			}
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000CCD RID: 3277 RVA: 0x000C56B0 File Offset: 0x000C38B0
	private Message readMessage2(sbyte cmd)
	{
		int num = (int)Session_ME.readKey(Session_ME.dis.ReadSByte()) + 128;
		int num2 = (int)Session_ME.readKey(Session_ME.dis.ReadSByte()) + 128;
		int num3 = (int)Session_ME.readKey(Session_ME.dis.ReadSByte()) + 128;
		int num4 = (num3 * 256 + num2) * 256 + num;
		sbyte[] array = new sbyte[num4];
		byte[] src = Session_ME.dis.ReadBytes(num4);
		Buffer.BlockCopy(src, 0, array, 0, num4);
		Session_ME.recvByteCount += 5 + num4;
		int num5 = Session_ME.recvByteCount + Session_ME.sendByteCount;
		Session_ME.strRecvByteCount = (num5 / 1024).ToString() + "." + (num5 % 1024 / 102).ToString() + "Kb";
		bool getKeyComplete = Session_ME.getKeyComplete;
		if (getKeyComplete)
		{
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = Session_ME.readKey(array[i]);
			}
		}
		return new Message(cmd, array);
	}

	// Token: 0x06000CCE RID: 3278 RVA: 0x000C57D0 File Offset: 0x000C39D0
	private Message readMessage()
	{
		try
		{
			sbyte b = Session_ME.dis.ReadSByte();
			bool getKeyComplete = Session_ME.getKeyComplete;
			if (getKeyComplete)
			{
				b = Session_ME.readKey(b);
			}
			bool flag = b == -32 || b == -66 || b == 11 || b == -67 || b == -74 || b == -87 || b == 66 || b == 12;
			if (flag)
			{
				return this.readMessage2(b);
			}
			bool getKeyComplete2 = Session_ME.getKeyComplete;
			int num;
			if (getKeyComplete2)
			{
				sbyte b2 = Session_ME.dis.ReadSByte();
				sbyte b3 = Session_ME.dis.ReadSByte();
				num = (((int)Session_ME.readKey(b2) & 255) << 8 | ((int)Session_ME.readKey(b3) & 255));
			}
			else
			{
				sbyte b4 = Session_ME.dis.ReadSByte();
				sbyte b5 = Session_ME.dis.ReadSByte();
				num = (((int)b4 & 65280) | ((int)b5 & 255));
			}
			sbyte[] array = new sbyte[num];
			byte[] src = Session_ME.dis.ReadBytes(num);
			Buffer.BlockCopy(src, 0, array, 0, num);
			Session_ME.recvByteCount += 5 + num;
			int num2 = Session_ME.recvByteCount + Session_ME.sendByteCount;
			Session_ME.strRecvByteCount = (num2 / 1024).ToString() + "." + (num2 % 1024 / 102).ToString() + "Kb";
			bool getKeyComplete3 = Session_ME.getKeyComplete;
			if (getKeyComplete3)
			{
				for (int i = 0; i < array.Length; i++)
				{
					array[i] = Session_ME.readKey(array[i]);
				}
			}
			return new Message(b, array);
		}
		catch (Exception ex)
		{
			Debug.Log(ex.StackTrace.ToString());
		}
		return null;
	}
}
using System;
using System.Collections.Generic;
using System.Threading;

// Token: 0x02000101 RID: 257
public class Sender
{
	// Token: 0x06000CC8 RID: 3272 RVA: 0x000C539F File Offset: 0x000C359F
	public Sender()
	{
		this.sendingMessage = new List<Message>();
	}

	// Token: 0x06000CC9 RID: 3273 RVA: 0x000C53B4 File Offset: 0x000C35B4
	public void AddMessage(Message message)
	{
		this.sendingMessage.Add(message);
	}

	// Token: 0x06000CCA RID: 3274 RVA: 0x000C53C4 File Offset: 0x000C35C4
	public void run()
	{
		while (Session_ME.connected)
		{
			try
			{
				bool getKeyComplete = Session_ME.getKeyComplete;
				if (getKeyComplete)
				{
					while (this.sendingMessage.Count > 0)
					{
						Message m = this.sendingMessage[0];
						Session_ME.doSendMessage(m);
						this.sendingMessage.RemoveAt(0);
					}
				}
				try
				{
					Thread.Sleep(5);
				}
				catch (Exception ex)
				{
					Cout.LogError(ex.ToString());
				}
			}
			catch (Exception)
			{
				Res.outz("error send message! ");
			}
		}
	}

	// Token: 0x040016ED RID: 5869
	public List<Message> sendingMessage;
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using UnityEngine;

// Token: 0x020000BD RID: 189
public class Session_ME2 : ISession
{
	// Token: 0x06000A9E RID: 2718 RVA: 0x000AB6E1 File Offset: 0x000A98E1
	public Session_ME2()
	{
		Debug.Log("init Session_ME");
	}

	// Token: 0x06000A9F RID: 2719 RVA: 0x000AB6F6 File Offset: 0x000A98F6
	public void clearSendingMessage()
	{
		Session_ME2.sender.sendingMessage.Clear();
	}

	// Token: 0x06000AA0 RID: 2720 RVA: 0x000AB70C File Offset: 0x000A990C
	public static Session_ME2 gI()
	{
		bool flag = Session_ME2.instance == null;
		if (flag)
		{
			Session_ME2.instance = new Session_ME2();
		}
		return Session_ME2.instance;
	}

	// Token: 0x06000AA1 RID: 2721 RVA: 0x000AB73C File Offset: 0x000A993C
	public bool isConnected()
	{
		return Session_ME2.connected && Session_ME2.sc != null && Session_ME2.dis != null;
	}

	// Token: 0x06000AA2 RID: 2722 RVA: 0x000AB767 File Offset: 0x000A9967
	public void setHandler(IMessageHandler msgHandler)
	{
		Session_ME2.messageHandler = msgHandler;
	}

	// Token: 0x06000AA3 RID: 2723 RVA: 0x000AB770 File Offset: 0x000A9970
	public void connect(string host, int port)
	{
		bool flag = !Session_ME2.connected && !Session_ME2.connecting && mSystem.currentTimeMillis() >= this.timeWaitConnect;
		if (flag)
		{
			this.timeWaitConnect = mSystem.currentTimeMillis() + 50L;
			this.host = host;
			this.port = port;
			Session_ME2.getKeyComplete = false;
			this.close();
			Debug.Log("connecting...!");
			Debug.Log("host: " + host);
			Debug.Log("port: " + port.ToString());
			Session_ME2.initThread = new Thread(new ThreadStart(this.NetworkInit));
			Session_ME2.initThread.Start();
		}
	}

	// Token: 0x06000AA4 RID: 2724 RVA: 0x000AB828 File Offset: 0x000A9A28
	private void NetworkInit()
	{
		Session_ME2.isCancel = false;
		Session_ME2.connecting = true;
		Thread.CurrentThread.Priority = System.Threading.ThreadPriority.Highest;
		Session_ME2.connected = true;
		try
		{
			this.doConnect(this.host, this.port);
			Session_ME2.messageHandler.onConnectOK(Session_ME2.isMainSession);
		}
		catch (Exception)
		{
			bool flag = Session_ME2.messageHandler != null;
			if (flag)
			{
				this.close();
				Session_ME2.messageHandler.onConnectionFail(Session_ME2.isMainSession);
			}
		}
	}

	// Token: 0x06000AA5 RID: 2725 RVA: 0x000AB8B8 File Offset: 0x000A9AB8
	public void doConnectDirect(string host, int port)
	{
		Session_ME2.sc = new TcpClient();
		Session_ME2.sc.Connect(host, port);
		Session_ME2.dataStream = Session_ME2.sc.GetStream();
		Session_ME2.dis = new BinaryReader(Session_ME2.dataStream, new UTF8Encoding());
		Session_ME2.dos = new BinaryWriter(Session_ME2.dataStream, new UTF8Encoding());
		Session_ME2.sendThread = new Thread(new ThreadStart(Session_ME2.sender.run));
		Session_ME2.sendThread.Start();
		Session_ME2.MessageCollector @object = new Session_ME2.MessageCollector();
		Cout.LogError("new -----");
		Session_ME2.collectorThread = new Thread(new ThreadStart(@object.run));
		Session_ME2.collectorThread.Start();
		Session_ME2.timeConnected = Session_ME2.currentTimeMillis();
		Session_ME2.connecting = false;
		Session_ME2.doSendMessage(new Message(-27));
		Session_ME2.key = null;
	}

	// Token: 0x06000AA6 RID: 2726 RVA: 0x000AB990 File Offset: 0x000A9B90
	public void doConnect(string host, int port)
	{
		bool flag = DataAccount.Proxy == "none";
		if (flag)
		{
			Cout.LogError("\ud83d\udd39 Không sử dụng proxy, kết nối trực tiếp...");
			this.doConnectDirect(host, port);
		}
		else
		{
			string[] array = DataAccount.Proxy.Split(new char[]
			{
				':'
			});
			bool flag2 = array.Length == 4;
			if (flag2)
			{
				string text = array[0];
				int num;
				bool flag3 = int.TryParse(array[1], out num);
				if (flag3)
				{
					string proxyUser = array[2];
					string proxyPass = array[3];
					Cout.LogError(string.Format("\ud83d\udd39 Kết nối qua proxy {0}:{1}...", text, num));
					this.doConnectWithProxy(host, port, text, num, proxyUser, proxyPass);
				}
				else
				{
					Cout.LogError("❌ Lỗi: Cổng proxy không hợp lệ!");
				}
			}
			else
			{
				Cout.LogError("❌ Lỗi: Định dạng proxy không hợp lệ!");
			}
		}
	}

	// Token: 0x06000AA7 RID: 2727 RVA: 0x000ABA58 File Offset: 0x000A9C58
	public void doConnectWithProxy(string host, int port, string proxyIP, int proxyPort, string proxyUser, string proxyPass)
	{
		try
		{
			Session_ME2.sc = new TcpClient();
			Session_ME2.sc.Connect(proxyIP, proxyPort);
			Session_ME2.dataStream = Session_ME2.sc.GetStream();
			Session_ME2.dis = new BinaryReader(Session_ME2.dataStream, new UTF8Encoding());
			Session_ME2.dos = new BinaryWriter(Session_ME2.dataStream, new UTF8Encoding());
			string text = Convert.ToBase64String(Encoding.ASCII.GetBytes(proxyUser + ":" + proxyPass));
			string s = string.Concat(new string[]
			{
				string.Format("CONNECT {0}:{1} HTTP/1.1\r\n", host, port),
				string.Format("Host: {0}:{1}\r\n", host, port),
				"Proxy-Authorization: Basic ",
				text,
				"\r\n\r\n"
			});
			Session_ME2.dos.Write(Encoding.ASCII.GetBytes(s));
			Session_ME2.dos.Flush();
			byte[] array = new byte[1024];
			int count = Session_ME2.dataStream.Read(array, 0, array.Length);
			string @string = Encoding.ASCII.GetString(array, 0, count);
			bool flag = !@string.Contains("200 Connection established");
			if (flag)
			{
				throw new Exception("Không thể kết nối qua proxy! Lỗi: " + @string);
			}
			Session_ME2.sendThread = new Thread(new ThreadStart(Session_ME2.sender.run));
			Session_ME2.sendThread.Start();
			Session_ME2.MessageCollector @object = new Session_ME2.MessageCollector();
			Session_ME2.collectorThread = new Thread(new ThreadStart(@object.run));
			Session_ME2.collectorThread.Start();
			Session_ME2.timeConnected = Session_ME2.currentTimeMillis();
			Session_ME2.connecting = false;
			Session_ME2.doSendMessage(new Message(-27));
			Session_ME2.key = null;
			GameCanvas.startOKDlg(string.Format("\ud83d\ude80 Kết nối hoàn tất!\nProxy:{0}:{1}:{2}:{3}", new object[]
			{
				proxyIP,
				proxyPort,
				proxyUser,
				proxyPass
			}), true);
		}
		catch (Exception ex)
		{
			GameCanvas.startOKDlg(ex.Message, true);
		}
	}

	// Token: 0x06000AA8 RID: 2728 RVA: 0x000ABC64 File Offset: 0x000A9E64
	public void sendMessage(Message message)
	{
		Res.outz("SEND MSG: " + message.command.ToString());
		Session_ME2.sender.AddMessage(message);
	}

	// Token: 0x06000AA9 RID: 2729 RVA: 0x000ABC90 File Offset: 0x000A9E90
	private static void doSendMessage(Message m)
	{
		sbyte[] data = m.getData();
		try
		{
			bool flag = Session_ME2.getKeyComplete;
			if (flag)
			{
				sbyte value = Session_ME2.writeKey(m.command);
				Session_ME2.dos.Write(value);
			}
			else
			{
				Session_ME2.dos.Write(m.command);
			}
			bool flag2 = data != null;
			if (flag2)
			{
				int num = data.Length;
				bool flag3 = Session_ME2.getKeyComplete;
				if (flag3)
				{
					int num2 = (int)Session_ME2.writeKey((sbyte)(num >> 8));
					Session_ME2.dos.Write((sbyte)num2);
					int num3 = (int)Session_ME2.writeKey((sbyte)(num & 255));
					Session_ME2.dos.Write((sbyte)num3);
				}
				else
				{
					Session_ME2.dos.Write((ushort)num);
				}
				bool flag4 = Session_ME2.getKeyComplete;
				if (flag4)
				{
					for (int i = 0; i < data.Length; i++)
					{
						sbyte value2 = Session_ME2.writeKey(data[i]);
						Session_ME2.dos.Write(value2);
					}
				}
				Session_ME2.sendByteCount += 5 + data.Length;
			}
			else
			{
				bool flag5 = Session_ME2.getKeyComplete;
				if (flag5)
				{
					int num4 = 0;
					int num5 = (int)Session_ME2.writeKey((sbyte)(num4 >> 8));
					Session_ME2.dos.Write((sbyte)num5);
					int num6 = (int)Session_ME2.writeKey((sbyte)(num4 & 255));
					Session_ME2.dos.Write((sbyte)num6);
				}
				else
				{
					Session_ME2.dos.Write(0);
				}
				Session_ME2.sendByteCount += 5;
			}
			Session_ME2.dos.Flush();
		}
		catch (Exception ex)
		{
			Debug.Log(ex.StackTrace);
		}
	}

	// Token: 0x06000AAA RID: 2730 RVA: 0x000ABE3C File Offset: 0x000AA03C
	public static sbyte readKey(sbyte b)
	{
		sbyte[] array = Session_ME2.key;
		sbyte b2 = Session_ME2.curR;
		Session_ME2.curR = b2 + 1;
		sbyte result = (sbyte)(((int)array[(int)b2] & 255) ^ ((int)b & 255));
		bool flag = (int)Session_ME2.curR >= Session_ME2.key.Length;
		if (flag)
		{
			Session_ME2.curR %= (sbyte)Session_ME2.key.Length;
		}
		return result;
	}

	// Token: 0x06000AAB RID: 2731 RVA: 0x000ABEA4 File Offset: 0x000AA0A4
	public static sbyte writeKey(sbyte b)
	{
		sbyte[] array = Session_ME2.key;
		sbyte b2 = Session_ME2.curW;
		Session_ME2.curW = b2 + 1;
		sbyte result = (sbyte)(((int)array[(int)b2] & 255) ^ ((int)b & 255));
		bool flag = (int)Session_ME2.curW >= Session_ME2.key.Length;
		if (flag)
		{
			Session_ME2.curW %= (sbyte)Session_ME2.key.Length;
		}
		return result;
	}

	// Token: 0x06000AAC RID: 2732 RVA: 0x000ABF0C File Offset: 0x000AA10C
	public static void onRecieveMsg(Message msg)
	{
		bool flag = Thread.CurrentThread.Name == Main.mainThreadName;
		if (flag)
		{
			Session_ME2.messageHandler.onMessage(msg);
		}
		else
		{
			Session_ME2.recieveMsg.addElement(msg);
		}
	}

	// Token: 0x06000AAD RID: 2733 RVA: 0x000ABF50 File Offset: 0x000AA150
	public static void update()
	{
		while (Session_ME2.recieveMsg.size() > 0)
		{
			Message message = (Message)Session_ME2.recieveMsg.elementAt(0);
			bool isStopReadMessage = Controller.isStopReadMessage;
			if (isStopReadMessage)
			{
				break;
			}
			bool flag = message == null;
			if (flag)
			{
				Session_ME2.recieveMsg.removeElementAt(0);
				break;
			}
			Session_ME2.messageHandler.onMessage(message);
			Session_ME2.recieveMsg.removeElementAt(0);
		}
	}

	// Token: 0x06000AAE RID: 2734 RVA: 0x000ABFBF File Offset: 0x000AA1BF
	public void close()
	{
		Session_ME2.cleanNetwork();
	}

	// Token: 0x06000AAF RID: 2735 RVA: 0x000ABFC8 File Offset: 0x000AA1C8
	private static void cleanNetwork()
	{
		Session_ME2.key = null;
		Session_ME2.curR = 0;
		Session_ME2.curW = 0;
		try
		{
			Session_ME2.connected = false;
			Session_ME2.connecting = false;
			bool flag = Session_ME2.sc != null;
			if (flag)
			{
				Session_ME2.sc.Close();
				Session_ME2.sc = null;
			}
			bool flag2 = Session_ME2.dataStream != null;
			if (flag2)
			{
				Session_ME2.dataStream.Close();
				Session_ME2.dataStream = null;
			}
			bool flag3 = Session_ME2.dos != null;
			if (flag3)
			{
				Session_ME2.dos.Close();
				Session_ME2.dos = null;
			}
			bool flag4 = Session_ME2.dis != null;
			if (flag4)
			{
				Session_ME2.dis.Close();
				Session_ME2.dis = null;
			}
			Session_ME2.sendThread = null;
			Session_ME2.collectorThread = null;
		}
		catch (Exception)
		{
		}
	}

	// Token: 0x06000AB0 RID: 2736 RVA: 0x000AC098 File Offset: 0x000AA298
	public static int currentTimeMillis()
	{
		return Environment.TickCount;
	}

	// Token: 0x06000AB1 RID: 2737 RVA: 0x000AC0B0 File Offset: 0x000AA2B0
	public static byte convertSbyteToByte(sbyte var)
	{
		bool flag = var > 0;
		byte result;
		if (flag)
		{
			result = (byte)var;
		}
		else
		{
			result = (byte)((int)var + 256);
		}
		return result;
	}

	// Token: 0x06000AB2 RID: 2738 RVA: 0x000AC0D8 File Offset: 0x000AA2D8
	public static byte[] convertSbyteToByte(sbyte[] var)
	{
		byte[] array = new byte[var.Length];
		for (int i = 0; i < var.Length; i++)
		{
			bool flag = var[i] > 0;
			if (flag)
			{
				array[i] = (byte)var[i];
			}
			else
			{
				array[i] = (byte)((int)var[i] + 256);
			}
		}
		return array;
	}

	// Token: 0x0400127B RID: 4731
	protected static Session_ME2 instance = new Session_ME2();

	// Token: 0x0400127C RID: 4732
	private static NetworkStream dataStream;

	// Token: 0x0400127D RID: 4733
	private static BinaryReader dis;

	// Token: 0x0400127E RID: 4734
	private static BinaryWriter dos;

	// Token: 0x0400127F RID: 4735
	public static IMessageHandler messageHandler;

	// Token: 0x04001280 RID: 4736
	public static bool isMainSession = true;

	// Token: 0x04001281 RID: 4737
	private static TcpClient sc;

	// Token: 0x04001282 RID: 4738
	public static bool connected;

	// Token: 0x04001283 RID: 4739
	public static bool connecting;

	// Token: 0x04001284 RID: 4740
	private static Session_ME2.Sender sender = new Session_ME2.Sender();

	// Token: 0x04001285 RID: 4741
	public static Thread initThread;

	// Token: 0x04001286 RID: 4742
	public static Thread collectorThread;

	// Token: 0x04001287 RID: 4743
	public static Thread sendThread;

	// Token: 0x04001288 RID: 4744
	public static int sendByteCount;

	// Token: 0x04001289 RID: 4745
	public static int recvByteCount;

	// Token: 0x0400128A RID: 4746
	private static bool getKeyComplete;

	// Token: 0x0400128B RID: 4747
	public static sbyte[] key = null;

	// Token: 0x0400128C RID: 4748
	private static sbyte curR;

	// Token: 0x0400128D RID: 4749
	private static sbyte curW;

	// Token: 0x0400128E RID: 4750
	private static int timeConnected;

	// Token: 0x0400128F RID: 4751
	private long lastTimeConn;

	// Token: 0x04001290 RID: 4752
	public static string strRecvByteCount = string.Empty;

	// Token: 0x04001291 RID: 4753
	public static bool isCancel;

	// Token: 0x04001292 RID: 4754
	private string host;

	// Token: 0x04001293 RID: 4755
	private int port;

	// Token: 0x04001294 RID: 4756
	private long timeWaitConnect;

	// Token: 0x04001295 RID: 4757
	public static MyVector recieveMsg = new MyVector();

	// Token: 0x02000103 RID: 259
	public class Sender
	{
		// Token: 0x06000CD0 RID: 3280 RVA: 0x000C59AD File Offset: 0x000C3BAD
		public Sender()
		{
			this.sendingMessage = new List<Message>();
		}

		// Token: 0x06000CD1 RID: 3281 RVA: 0x000C59C2 File Offset: 0x000C3BC2
		public void AddMessage(Message message)
		{
			this.sendingMessage.Add(message);
		}

		// Token: 0x06000CD2 RID: 3282 RVA: 0x000C59D4 File Offset: 0x000C3BD4
		public void run()
		{
			while (Session_ME2.connected)
			{
				try
				{
					bool getKeyComplete = Session_ME2.getKeyComplete;
					if (getKeyComplete)
					{
						while (this.sendingMessage.Count > 0)
						{
							Message m = this.sendingMessage[0];
							Session_ME2.doSendMessage(m);
							this.sendingMessage.RemoveAt(0);
						}
					}
					try
					{
						Thread.Sleep(5);
					}
					catch (Exception ex)
					{
						Cout.LogError(ex.ToString());
					}
				}
				catch (Exception)
				{
					Res.outz("error send message! ");
				}
			}
		}

		// Token: 0x040016EE RID: 5870
		public List<Message> sendingMessage;
	}

	// Token: 0x02000104 RID: 260
	private class MessageCollector
	{
		// Token: 0x06000CD3 RID: 3283 RVA: 0x000C5A80 File Offset: 0x000C3C80
		public void run()
		{
			try
			{
				while (Session_ME2.connected)
				{
					Message message = this.readMessage();
					bool flag = message == null;
					if (flag)
					{
						break;
					}
					try
					{
						bool flag2 = message.command == -27;
						if (flag2)
						{
							this.getKey(message);
						}
						else
						{
							Session_ME2.onRecieveMsg(message);
						}
					}
					catch (Exception)
					{
						Cout.println("LOI NHAN  MESS THU 1");
					}
					try
					{
						Thread.Sleep(5);
					}
					catch (Exception)
					{
						Cout.println("LOI NHAN  MESS THU 2");
					}
				}
			}
			catch (Exception ex)
			{
				Debug.Log("error read message!");
				Debug.Log(ex.Message.ToString());
			}
			bool flag3 = !Session_ME2.connected;
			if (!flag3)
			{
				bool flag4 = Session_ME2.messageHandler != null;
				if (flag4)
				{
					bool flag5 = Session_ME2.currentTimeMillis() - Session_ME2.timeConnected > 500;
					if (flag5)
					{
						Session_ME2.messageHandler.onDisconnected(Session_ME2.isMainSession);
					}
					else
					{
						Session_ME2.messageHandler.onConnectionFail(Session_ME2.isMainSession);
					}
				}
				bool flag6 = Session_ME2.sc != null;
				if (flag6)
				{
					Session_ME2.cleanNetwork();
				}
			}
		}

		// Token: 0x06000CD4 RID: 3284 RVA: 0x000C5BC8 File Offset: 0x000C3DC8
		private void getKey(Message message)
		{
			try
			{
				sbyte b = message.reader().readSByte();
				Session_ME2.key = new sbyte[(int)b];
				for (int i = 0; i < (int)b; i++)
				{
					Session_ME2.key[i] = message.reader().readSByte();
				}
				for (int j = 0; j < Session_ME2.key.Length - 1; j++)
				{
					ref sbyte ptr = ref Session_ME2.key[j + 1];
					ptr ^= Session_ME2.key[j];
				}
				Session_ME2.getKeyComplete = true;
				GameMidlet.IP2 = message.reader().readUTF();
				GameMidlet.PORT2 = message.reader().readInt();
				GameMidlet.isConnect2 = (message.reader().readByte() != 0);
				bool flag = Session_ME2.isMainSession && GameMidlet.isConnect2;
				if (flag)
				{
					GameCanvas.connect2();
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x06000CD5 RID: 3285 RVA: 0x000C5CC0 File Offset: 0x000C3EC0
		private Message readMessage2(sbyte cmd)
		{
			int num = (int)Session_ME2.readKey(Session_ME2.dis.ReadSByte()) + 128;
			int num2 = (int)Session_ME2.readKey(Session_ME2.dis.ReadSByte()) + 128;
			int num3 = (int)Session_ME2.readKey(Session_ME2.dis.ReadSByte()) + 128;
			int num4 = (num3 * 256 + num2) * 256 + num;
			Cout.LogError("SIZE = " + num4.ToString());
			sbyte[] array = new sbyte[num4];
			byte[] src = Session_ME2.dis.ReadBytes(num4);
			Buffer.BlockCopy(src, 0, array, 0, num4);
			Session_ME2.recvByteCount += 5 + num4;
			int num5 = Session_ME2.recvByteCount + Session_ME2.sendByteCount;
			Session_ME2.strRecvByteCount = (num5 / 1024).ToString() + "." + (num5 % 1024 / 102).ToString() + "Kb";
			bool getKeyComplete = Session_ME2.getKeyComplete;
			if (getKeyComplete)
			{
				for (int i = 0; i < array.Length; i++)
				{
					array[i] = Session_ME2.readKey(array[i]);
				}
			}
			return new Message(cmd, array);
		}

		// Token: 0x06000CD6 RID: 3286 RVA: 0x000C5DF8 File Offset: 0x000C3FF8
		private Message readMessage()
		{
			try
			{
				sbyte b = Session_ME2.dis.ReadSByte();
				bool getKeyComplete = Session_ME2.getKeyComplete;
				if (getKeyComplete)
				{
					b = Session_ME2.readKey(b);
				}
				bool flag = b == -32 || b == -66 || b == 11 || b == -67 || b == -74 || b == -87;
				if (flag)
				{
					return this.readMessage2(b);
				}
				bool getKeyComplete2 = Session_ME2.getKeyComplete;
				int num;
				if (getKeyComplete2)
				{
					sbyte b2 = Session_ME2.dis.ReadSByte();
					sbyte b3 = Session_ME2.dis.ReadSByte();
					num = (((int)Session_ME2.readKey(b2) & 255) << 8 | ((int)Session_ME2.readKey(b3) & 255));
				}
				else
				{
					sbyte b4 = Session_ME2.dis.ReadSByte();
					sbyte b5 = Session_ME2.dis.ReadSByte();
					num = (((int)b4 & 65280) | ((int)b5 & 255));
				}
				sbyte[] array = new sbyte[num];
				byte[] src = Session_ME2.dis.ReadBytes(num);
				Buffer.BlockCopy(src, 0, array, 0, num);
				Session_ME2.recvByteCount += 5 + num;
				int num2 = Session_ME2.recvByteCount + Session_ME2.sendByteCount;
				Session_ME2.strRecvByteCount = (num2 / 1024).ToString() + "." + (num2 % 1024 / 102).ToString() + "Kb";
				bool getKeyComplete3 = Session_ME2.getKeyComplete;
				if (getKeyComplete3)
				{
					for (int i = 0; i < array.Length; i++)
					{
						array[i] = Session_ME2.readKey(array[i]);
					}
				}
				return new Message(b, array);
			}
			catch (Exception ex)
			{
				Debug.Log(ex.StackTrace.ToString());
			}
			return null;
		}
	}
}
using System;

// Token: 0x02000016 RID: 22
public struct SetDo1
{
	// Token: 0x06000085 RID: 133 RVA: 0x00006170 File Offset: 0x00004370
	public SetDo1(int type, string infor)
	{
		this.type = type;
		this.info = infor;
	}

	// Token: 0x0400006A RID: 106
	public string info;

	// Token: 0x0400006B RID: 107
	public int type;
}
using System;

// Token: 0x02000017 RID: 23
public struct SetDo2
{
	// Token: 0x06000086 RID: 134 RVA: 0x00006181 File Offset: 0x00004381
	public SetDo2(int type, string infor)
	{
		this.type = type;
		this.info = infor;
	}

	// Token: 0x0400006C RID: 108
	public string info;

	// Token: 0x0400006D RID: 109
	public int type;
}
using System;

// Token: 0x020000BE RID: 190
public class Skill
{
	// Token: 0x06000AB4 RID: 2740 RVA: 0x000AC164 File Offset: 0x000AA364
	public string strCurExp()
	{
		bool flag = this.curExp / 10 >= 100;
		string result;
		if (flag)
		{
			result = "MAX";
		}
		else
		{
			bool flag2 = this.curExp % 10 == 0;
			if (flag2)
			{
				result = ((int)(this.curExp / 10)).ToString() + "%";
			}
			else
			{
				int num = (int)(this.curExp % 10);
				result = ((int)(this.curExp / 10)).ToString() + "." + (num % 10).ToString() + "%";
			}
		}
		return result;
	}

	// Token: 0x06000AB5 RID: 2741 RVA: 0x000AC1FC File Offset: 0x000AA3FC
	public string strTimeReplay()
	{
		bool flag = this.coolDown % 1000 == 0;
		string result;
		if (flag)
		{
			result = (this.coolDown / 1000).ToString() + string.Empty;
		}
		else
		{
			int num = this.coolDown % 1000;
			result = (this.coolDown / 1000).ToString() + "." + ((num % 100 != 0) ? (num / 10) : (num / 100)).ToString();
		}
		return result;
	}

	// Token: 0x06000AB6 RID: 2742 RVA: 0x000AC288 File Offset: 0x000AA488
	public void paint(int x, int y, mGraphics g)
	{
		SmallImage.drawSmallImage(g, this.template.iconId, x, y, 0, StaticObj.VCENTER_HCENTER);
		long num = mSystem.currentTimeMillis();
		long num2 = num - this.lastTimeUseThisSkill;
		bool flag = num2 < (long)this.coolDown;
		if (flag)
		{
			g.setColor(2721889, 0.7f);
			bool flag2 = this.paintCanNotUseSkill && GameCanvas.gameTick % 6 > 2;
			if (flag2)
			{
				g.setColor(876862);
			}
			int num3 = (int)(num2 * 20L / (long)this.coolDown);
			g.fillRect(x - 10, y - 10 + num3, 20, 20 - num3);
		}
		else
		{
			this.paintCanNotUseSkill = false;
		}
	}

	// Token: 0x04001296 RID: 4758
	public const sbyte ATT_STAND = 0;

	// Token: 0x04001297 RID: 4759
	public const sbyte ATT_FLY = 1;

	// Token: 0x04001298 RID: 4760
	public const sbyte SKILL_AUTO_USE = 0;

	// Token: 0x04001299 RID: 4761
	public const sbyte SKILL_CLICK_USE_ATTACK = 1;

	// Token: 0x0400129A RID: 4762
	public const sbyte SKILL_CLICK_USE_BUFF = 2;

	// Token: 0x0400129B RID: 4763
	public const sbyte SKILL_CLICK_NPC = 3;

	// Token: 0x0400129C RID: 4764
	public const sbyte SKILL_CLICK_LIVE = 4;

	// Token: 0x0400129D RID: 4765
	public SkillTemplate template;

	// Token: 0x0400129E RID: 4766
	public short skillId;

	// Token: 0x0400129F RID: 4767
	public int point;

	// Token: 0x040012A0 RID: 4768
	public long powRequire;

	// Token: 0x040012A1 RID: 4769
	public int coolDown;

	// Token: 0x040012A2 RID: 4770
	public long lastTimeUseThisSkill;

	// Token: 0x040012A3 RID: 4771
	public int dx;

	// Token: 0x040012A4 RID: 4772
	public int dy;

	// Token: 0x040012A5 RID: 4773
	public int maxFight;

	// Token: 0x040012A6 RID: 4774
	public int manaUse;

	// Token: 0x040012A7 RID: 4775
	public SkillOption[] options;

	// Token: 0x040012A8 RID: 4776
	public bool paintCanNotUseSkill;

	// Token: 0x040012A9 RID: 4777
	public short damage;

	// Token: 0x040012AA RID: 4778
	public string moreInfo;

	// Token: 0x040012AB RID: 4779
	public short price;

	// Token: 0x040012AC RID: 4780
	public short curExp;
}
using System;

// Token: 0x020000BF RID: 191
public class SkillInfoPaint
{
	// Token: 0x040012AD RID: 4781
	public int status;

	// Token: 0x040012AE RID: 4782
	public int effS0Id;

	// Token: 0x040012AF RID: 4783
	public int e0dx;

	// Token: 0x040012B0 RID: 4784
	public int e0dy;

	// Token: 0x040012B1 RID: 4785
	public int effS1Id;

	// Token: 0x040012B2 RID: 4786
	public int e1dx;

	// Token: 0x040012B3 RID: 4787
	public int e1dy;

	// Token: 0x040012B4 RID: 4788
	public int effS2Id;

	// Token: 0x040012B5 RID: 4789
	public int e2dx;

	// Token: 0x040012B6 RID: 4790
	public int e2dy;

	// Token: 0x040012B7 RID: 4791
	public int arrowId;

	// Token: 0x040012B8 RID: 4792
	public int adx;

	// Token: 0x040012B9 RID: 4793
	public int ady;
}
using System;

// Token: 0x020000C0 RID: 192
public class SkillOption
{
	// Token: 0x06000AB9 RID: 2745 RVA: 0x000AC34C File Offset: 0x000AA54C
	public string getOptionString()
	{
		bool flag = this.optionString == null;
		if (flag)
		{
			this.optionString = NinjaUtil.replace(this.optionTemplate.name, "#", string.Empty + this.param.ToString());
		}
		return this.optionString;
	}

	// Token: 0x040012BA RID: 4794
	public int param;

	// Token: 0x040012BB RID: 4795
	public SkillOptionTemplate optionTemplate;

	// Token: 0x040012BC RID: 4796
	public string optionString;
}
using System;

// Token: 0x020000C1 RID: 193
public class SkillOptionTemplate
{
	// Token: 0x040012BD RID: 4797
	public int id;

	// Token: 0x040012BE RID: 4798
	public string name;
}
using System;

// Token: 0x020000C2 RID: 194
public class SkillPaint
{
	// Token: 0x040012BF RID: 4799
	public int id;

	// Token: 0x040012C0 RID: 4800
	public int effectHappenOnMob;

	// Token: 0x040012C1 RID: 4801
	public int numEff;

	// Token: 0x040012C2 RID: 4802
	public SkillInfoPaint[] skillStand;

	// Token: 0x040012C3 RID: 4803
	public SkillInfoPaint[] skillfly;
}
using System;

// Token: 0x020000C3 RID: 195
public class Skills
{
	// Token: 0x06000ABD RID: 2749 RVA: 0x000AC3BE File Offset: 0x000AA5BE
	public static void add(Skill skill)
	{
		Skills.skills.put(skill.skillId, skill);
	}

	// Token: 0x06000ABE RID: 2750 RVA: 0x000AC3D8 File Offset: 0x000AA5D8
	public static Skill get(short skillId)
	{
		return (Skill)Skills.skills.get(skillId);
	}

	// Token: 0x040012C4 RID: 4804
	public static MyHashTable skills = new MyHashTable();
}
using System;

// Token: 0x020000C4 RID: 196
public class SkillTemplate
{
	// Token: 0x06000AC1 RID: 2753 RVA: 0x000AC414 File Offset: 0x000AA614
	public bool isBuffToPlayer()
	{
		return this.type == 2;
	}

	// Token: 0x06000AC2 RID: 2754 RVA: 0x000AC43C File Offset: 0x000AA63C
	public bool isUseAlone()
	{
		return this.type == 3;
	}

	// Token: 0x06000AC3 RID: 2755 RVA: 0x000AC464 File Offset: 0x000AA664
	public bool isAttackSkill()
	{
		return this.type == 1;
	}

	// Token: 0x06000AC4 RID: 2756 RVA: 0x000AC48C File Offset: 0x000AA68C
	public bool isSkillSpec()
	{
		return this.type == 4;
	}

	// Token: 0x040012C5 RID: 4805
	public sbyte id;

	// Token: 0x040012C6 RID: 4806
	public int classId;

	// Token: 0x040012C7 RID: 4807
	public string name;

	// Token: 0x040012C8 RID: 4808
	public int maxPoint;

	// Token: 0x040012C9 RID: 4809
	public int manaUseType;

	// Token: 0x040012CA RID: 4810
	public int type;

	// Token: 0x040012CB RID: 4811
	public int iconId;

	// Token: 0x040012CC RID: 4812
	public string[] description;

	// Token: 0x040012CD RID: 4813
	public Skill[] skills;

	// Token: 0x040012CE RID: 4814
	public string damInfo;
}
using System;

// Token: 0x020000C5 RID: 197
public class SmallDart
{
	// Token: 0x06000AC6 RID: 2758 RVA: 0x000AC4BA File Offset: 0x000AA6BA
	public SmallDart(int x, int y)
	{
		this.x = x;
		this.y = y;
	}

	// Token: 0x040012CF RID: 4815
	public int index;

	// Token: 0x040012D0 RID: 4816
	public int x;

	// Token: 0x040012D1 RID: 4817
	public int y;
}
using System;
using Assets.src.e;

// Token: 0x020000C6 RID: 198
public class SmallImage
{
	// Token: 0x06000AC7 RID: 2759 RVA: 0x000AC4D2 File Offset: 0x000AA6D2
	public SmallImage()
	{
		this.readImage();
	}

	// Token: 0x06000AC8 RID: 2760 RVA: 0x000AC4E4 File Offset: 0x000AA6E4
	public static void loadBigRMS()
	{
		bool flag = SmallImage.imgbig == null;
		if (flag)
		{
			SmallImage.imgbig = new Image[]
			{
				GameCanvas.loadImageRMS("/img/Big0.png"),
				GameCanvas.loadImageRMS("/img/Big1.png"),
				GameCanvas.loadImageRMS("/img/Big2.png"),
				GameCanvas.loadImageRMS("/img/Big3.png"),
				GameCanvas.loadImageRMS("/img/Big4.png")
			};
		}
	}

	// Token: 0x06000AC9 RID: 2761 RVA: 0x000AC54C File Offset: 0x000AA74C
	public static void freeBig()
	{
		SmallImage.imgbig = null;
		mSystem.gcc();
	}

	// Token: 0x06000ACA RID: 2762 RVA: 0x000AC55B File Offset: 0x000AA75B
	public static void loadBigImage()
	{
		SmallImage.imgEmpty = Image.createRGBImage(new int[1], 1, 1, true);
	}

	// Token: 0x06000ACB RID: 2763 RVA: 0x000AC571 File Offset: 0x000AA771
	public static void init()
	{
		SmallImage.instance = null;
		SmallImage.instance = new SmallImage();
	}

	// Token: 0x06000ACC RID: 2764 RVA: 0x000AC584 File Offset: 0x000AA784
	public void readData(byte[] data)
	{
	}

	// Token: 0x06000ACD RID: 2765 RVA: 0x000AC588 File Offset: 0x000AA788
	public void readImage()
	{
		int num = 0;
		try
		{
			DataInputStream dataInputStream = new DataInputStream(Rms.loadRMS("NR_image"));
			short num2 = dataInputStream.readShort();
			SmallImage.smallImg = new int[(int)num2][];
			for (int i = 0; i < SmallImage.smallImg.Length; i++)
			{
				SmallImage.smallImg[i] = new int[5];
			}
			for (int j = 0; j < (int)num2; j++)
			{
				num++;
				SmallImage.smallImg[j][0] = dataInputStream.readUnsignedByte();
				SmallImage.smallImg[j][1] = (int)dataInputStream.readShort();
				SmallImage.smallImg[j][2] = (int)dataInputStream.readShort();
				SmallImage.smallImg[j][3] = (int)dataInputStream.readShort();
				SmallImage.smallImg[j][4] = (int)dataInputStream.readShort();
			}
		}
		catch (Exception ex)
		{
			Cout.LogError3("Loi readImage: " + ex.ToString() + "i= " + num.ToString());
		}
	}

	// Token: 0x06000ACE RID: 2766 RVA: 0x000AC68C File Offset: 0x000AA88C
	public static void clearHastable()
	{
	}

	// Token: 0x06000ACF RID: 2767 RVA: 0x000AC690 File Offset: 0x000AA890
	public static void createImage(int id)
	{
		Res.outz("is request =" + id.ToString() + " zoom=" + mGraphics.zoomLevel.ToString());
		bool flag = mGraphics.zoomLevel == 1;
		if (flag)
		{
			Image image = GameCanvas.loadImage("/SmallImage/Small" + id.ToString() + ".png");
			bool flag2 = image != null;
			if (flag2)
			{
				SmallImage.imgNew[id] = new Small(image, id);
			}
			else
			{
				SmallImage.imgNew[id] = new Small(SmallImage.imgEmpty, id);
				bool flag3 = GameCanvas.currentScreen == GameCanvas._SelectCharScr;
				if (flag3)
				{
					Service.gI().requestIcon(id);
				}
				else
				{
					SmallImage.vt_images_watingDowload.addElement(SmallImage.imgNew[id]);
				}
			}
		}
		else
		{
			Image image2 = GameCanvas.loadImage("/SmallImage/Small" + id.ToString() + ".png");
			bool flag4 = image2 != null;
			if (flag4)
			{
				SmallImage.imgNew[id] = new Small(image2, id);
			}
			else
			{
				bool flag5 = false;
				sbyte[] array = Rms.loadRMS(mGraphics.zoomLevel.ToString() + "Small" + id.ToString());
				bool flag6 = array != null;
				if (flag6)
				{
					bool flag7 = SmallImage.newSmallVersion != null && array.Length % 127 != (int)SmallImage.newSmallVersion[id];
					if (flag7)
					{
						flag5 = true;
					}
					bool flag8 = !flag5;
					if (flag8)
					{
						Image image3 = Image.createImage(array, 0, array.Length);
						bool flag9 = image3 != null;
						if (flag9)
						{
							SmallImage.imgNew[id] = new Small(image3, id);
						}
						else
						{
							flag5 = true;
						}
					}
				}
				else
				{
					flag5 = true;
				}
				bool flag10 = flag5;
				if (flag10)
				{
					SmallImage.imgNew[id] = new Small(SmallImage.imgEmpty, id);
					bool flag11 = GameCanvas.currentScreen == GameCanvas._SelectCharScr;
					if (flag11)
					{
						Service.gI().requestIcon(id);
					}
					else
					{
						SmallImage.vt_images_watingDowload.addElement(SmallImage.imgNew[id]);
					}
				}
			}
		}
	}

	// Token: 0x06000AD0 RID: 2768 RVA: 0x000AC880 File Offset: 0x000AAA80
	public static void drawSmallImage(mGraphics g, int id, int x, int y, int transform, int anchor)
	{
		bool flag = SmallImage.imgbig == null;
		if (flag)
		{
			Small small = SmallImage.imgNew[id];
			bool flag2 = small == null;
			if (flag2)
			{
				SmallImage.createImage(id);
			}
			else
			{
				g.drawRegion(small, 0, 0, mGraphics.getImageWidth(small.img), mGraphics.getImageHeight(small.img), transform, x, y, anchor);
			}
		}
		else
		{
			bool flag3 = SmallImage.smallImg != null;
			if (flag3)
			{
				bool flag4 = id >= SmallImage.smallImg.Length || SmallImage.smallImg[id][1] >= 256 || SmallImage.smallImg[id][3] >= 256 || SmallImage.smallImg[id][2] >= 256 || SmallImage.smallImg[id][4] >= 256;
				if (flag4)
				{
					Small small2 = SmallImage.imgNew[id];
					bool flag5 = small2 == null;
					if (flag5)
					{
						SmallImage.createImage(id);
					}
					else
					{
						small2.paint(g, transform, x, y, anchor);
					}
				}
				else
				{
					bool flag6 = SmallImage.imgbig[SmallImage.smallImg[id][0]] != null;
					if (flag6)
					{
						g.drawRegion(SmallImage.imgbig[SmallImage.smallImg[id][0]], SmallImage.smallImg[id][1], SmallImage.smallImg[id][2], SmallImage.smallImg[id][3], SmallImage.smallImg[id][4], transform, x, y, anchor);
					}
				}
			}
			else
			{
				bool flag7 = GameCanvas.currentScreen != GameScr.gI();
				if (flag7)
				{
					Small small3 = SmallImage.imgNew[id];
					bool flag8 = small3 == null;
					if (flag8)
					{
						SmallImage.createImage(id);
					}
					else
					{
						small3.paint(g, transform, x, y, anchor);
					}
				}
			}
		}
	}

	// Token: 0x06000AD1 RID: 2769 RVA: 0x000ACA24 File Offset: 0x000AAC24
	public static void drawSmallImage(mGraphics g, int id, int f, int x, int y, int w, int h, int transform, int anchor)
	{
		bool flag = SmallImage.imgbig == null;
		if (flag)
		{
			Small small = SmallImage.imgNew[id];
			bool flag2 = small == null;
			if (flag2)
			{
				SmallImage.createImage(id);
			}
			else
			{
				g.drawRegion(small.img, 0, f * w, w, h, transform, x, y, anchor);
			}
		}
		else
		{
			bool flag3 = SmallImage.smallImg != null;
			if (flag3)
			{
				bool flag4 = id >= SmallImage.smallImg.Length || SmallImage.smallImg[id] == null || SmallImage.smallImg[id][1] >= 256 || SmallImage.smallImg[id][3] >= 256 || SmallImage.smallImg[id][2] >= 256 || SmallImage.smallImg[id][4] >= 256;
				if (flag4)
				{
					Small small2 = SmallImage.imgNew[id];
					bool flag5 = small2 == null;
					if (flag5)
					{
						SmallImage.createImage(id);
					}
					else
					{
						small2.paint(g, transform, f, x, y, w, h, anchor);
					}
				}
				else
				{
					bool flag6 = SmallImage.smallImg[id][0] != 4 && SmallImage.imgbig[SmallImage.smallImg[id][0]] != null;
					if (flag6)
					{
						g.drawRegion(SmallImage.imgbig[SmallImage.smallImg[id][0]], 0, f * w, w, h, transform, x, y, anchor);
					}
					else
					{
						Small small3 = SmallImage.imgNew[id];
						bool flag7 = small3 == null;
						if (flag7)
						{
							SmallImage.createImage(id);
						}
						else
						{
							small3.paint(g, transform, f, x, y, w, h, anchor);
						}
					}
				}
			}
			else
			{
				bool flag8 = GameCanvas.currentScreen != GameScr.gI();
				if (flag8)
				{
					Small small4 = SmallImage.imgNew[id];
					bool flag9 = small4 == null;
					if (flag9)
					{
						SmallImage.createImage(id);
					}
					else
					{
						small4.paint(g, transform, f, x, y, w, h, anchor);
					}
				}
			}
		}
	}

	// Token: 0x06000AD2 RID: 2770 RVA: 0x000ACC04 File Offset: 0x000AAE04
	public static void update()
	{
		int num = 0;
		bool flag = GameCanvas.gameTick % 1000 != 0;
		if (!flag)
		{
			for (int i = 0; i < SmallImage.imgNew.Length; i++)
			{
				bool flag2 = SmallImage.imgNew[i] != null;
				if (flag2)
				{
					num++;
					SmallImage.imgNew[i].update();
					SmallImage.smallCount++;
				}
			}
			bool flag3 = num > 200 && GameCanvas.lowGraphic;
			if (flag3)
			{
				SmallImage.imgNew = new Small[(int)SmallImage.maxSmall];
			}
		}
	}

	// Token: 0x040012D2 RID: 4818
	public static int[][] smallImg;

	// Token: 0x040012D3 RID: 4819
	public static SmallImage instance;

	// Token: 0x040012D4 RID: 4820
	public static Image[] imgbig;

	// Token: 0x040012D5 RID: 4821
	public static Small[] imgNew;

	// Token: 0x040012D6 RID: 4822
	public static MyVector vKeys = new MyVector();

	// Token: 0x040012D7 RID: 4823
	public static Image imgEmpty = null;

	// Token: 0x040012D8 RID: 4824
	public static sbyte[] newSmallVersion;

	// Token: 0x040012D9 RID: 4825
	public static MyVector vt_images_watingDowload = new MyVector();

	// Token: 0x040012DA RID: 4826
	public static int smallCount;

	// Token: 0x040012DB RID: 4827
	public static short maxSmall;
}
using System;
using System.Threading;
using UnityEngine;

// Token: 0x020000C7 RID: 199
public class SMS
{
	// Token: 0x06000AD4 RID: 2772 RVA: 0x000ACCB4 File Offset: 0x000AAEB4
	public static int send(string content, string to)
	{
		bool flag = Thread.CurrentThread.Name == Main.mainThreadName;
		int result;
		if (flag)
		{
			result = SMS.__send(content, to);
		}
		else
		{
			result = SMS._send(content, to);
		}
		return result;
	}

	// Token: 0x06000AD5 RID: 2773 RVA: 0x000ACCF0 File Offset: 0x000AAEF0
	private static int _send(string content, string to)
	{
		bool flag = SMS.status != 0;
		if (flag)
		{
			for (int i = 0; i < 500; i++)
			{
				Thread.Sleep(5);
				bool flag2 = SMS.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = SMS.status != 0;
			if (flag3)
			{
				Cout.LogError("CANNOT SEND SMS " + content + " WHEN SENDING " + SMS._content);
				return -1;
			}
		}
		SMS._content = content;
		SMS._to = to;
		SMS._result = -1;
		SMS.status = 2;
		int j;
		for (j = 0; j < 500; j++)
		{
			Thread.Sleep(5);
			bool flag4 = SMS.status == 0;
			if (flag4)
			{
				break;
			}
		}
		bool flag5 = j == 500;
		if (flag5)
		{
			Debug.LogError("TOO LONG FOR SEND SMS " + content);
			SMS.status = 0;
		}
		else
		{
			Debug.Log(string.Concat(new string[]
			{
				"Send SMS ",
				content,
				" done in ",
				(j * 5).ToString(),
				"ms"
			}));
		}
		return SMS._result;
	}

	// Token: 0x06000AD6 RID: 2774 RVA: 0x000ACE28 File Offset: 0x000AB028
	private static int __send(string content, string to)
	{
		int num = iOSPlugins.Check();
		Cout.println("vao sms ko " + num.ToString());
		bool flag = num >= 0;
		if (flag)
		{
			SMS.f = true;
			SMS.sendEnable = true;
			iOSPlugins.SMSsend(to, content, num);
			Screen.orientation = ScreenOrientation.AutoRotation;
		}
		return num;
	}

	// Token: 0x06000AD7 RID: 2775 RVA: 0x000ACE84 File Offset: 0x000AB084
	public static void update()
	{
		float num = Time.time;
		bool flag = num - (float)SMS.time > 1f;
		if (flag)
		{
			SMS.time++;
		}
		bool flag2 = SMS.f;
		if (flag2)
		{
			SMS.OnSMS();
		}
		bool flag3 = SMS.status == 2;
		if (flag3)
		{
			SMS.status = 1;
			try
			{
				SMS._result = SMS.__send(SMS._content, SMS._to);
			}
			catch (Exception)
			{
				Debug.Log("CANNOT SEND SMS");
			}
			SMS.status = 0;
		}
	}

	// Token: 0x06000AD8 RID: 2776 RVA: 0x000ACF1C File Offset: 0x000AB11C
	private static void OnSMS()
	{
		bool flag = SMS.sendEnable;
		if (flag)
		{
			bool flag2 = iOSPlugins.checkRotation() == 1;
			if (flag2)
			{
				Screen.orientation = ScreenOrientation.LandscapeLeft;
			}
			else
			{
				bool flag3 = iOSPlugins.checkRotation() == -1;
				if (flag3)
				{
					Screen.orientation = ScreenOrientation.Portrait;
				}
				else
				{
					bool flag4 = iOSPlugins.checkRotation() == 0;
					if (flag4)
					{
						Screen.orientation = ScreenOrientation.AutoRotation;
					}
					else
					{
						bool flag5 = iOSPlugins.checkRotation() == 2;
						if (flag5)
						{
							Screen.orientation = ScreenOrientation.LandscapeRight;
						}
						else
						{
							bool flag6 = iOSPlugins.checkRotation() == 3;
							if (flag6)
							{
								Screen.orientation = ScreenOrientation.PortraitUpsideDown;
							}
						}
					}
				}
			}
			bool flag7 = SMS.time0 < 5;
			if (flag7)
			{
				SMS.time0++;
			}
			else
			{
				iOSPlugins.Send();
				SMS.sendEnable = false;
				SMS.time0 = 0;
			}
		}
		bool flag8 = iOSPlugins.unpause() == 1;
		if (flag8)
		{
			Screen.orientation = ScreenOrientation.LandscapeLeft;
			bool flag9 = SMS.time0 < 5;
			if (flag9)
			{
				SMS.time0++;
			}
			else
			{
				SMS.f = false;
				iOSPlugins.back();
				SMS.time0 = 0;
			}
		}
	}

	// Token: 0x040012DC RID: 4828
	private const int INTERVAL = 5;

	// Token: 0x040012DD RID: 4829
	private const int MAXTIME = 500;

	// Token: 0x040012DE RID: 4830
	private static int status;

	// Token: 0x040012DF RID: 4831
	private static int _result;

	// Token: 0x040012E0 RID: 4832
	private static string _to;

	// Token: 0x040012E1 RID: 4833
	private static string _content;

	// Token: 0x040012E2 RID: 4834
	private static bool f;

	// Token: 0x040012E3 RID: 4835
	private static int time;

	// Token: 0x040012E4 RID: 4836
	public static bool sendEnable;

	// Token: 0x040012E5 RID: 4837
	private static int time0;
}
using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

// Token: 0x02000018 RID: 24
internal class SocketInPut
{
	// Token: 0x06000087 RID: 135 RVA: 0x00006194 File Offset: 0x00004394
	public static void Bom()
	{
		try
		{
			for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
			{
				Skill skill = GameScr.onScreenSkill[i];
				bool flag = skill != null && skill.template.id == 14 && GameScr.timehoibom <= 0L;
				if (flag)
				{
					GameScr.gI().doUseSkillNotFocus(skill);
					break;
				}
			}
		}
		catch
		{
		}
	}

	// Token: 0x06000088 RID: 136 RVA: 0x00006210 File Offset: 0x00004410
	public static void ThoiMien()
	{
		bool flag = !global::Char.myCharz().charFocus.cName.Contains("Broly");
		if (!flag)
		{
			try
			{
				for (int i = 0; i < GameScr.onScreenSkill.Length; i++)
				{
					Skill skill = GameScr.onScreenSkill[i];
					bool flag2 = skill != null && skill.template.id == 22 && GameScr.timehoithoimien <= 0L;
					if (flag2)
					{
						GameScr.gI().doUseSkill(skill, true);
						break;
					}
				}
			}
			catch
			{
			}
		}
	}

	// Token: 0x06000089 RID: 137 RVA: 0x000062B4 File Offset: 0x000044B4
	public static void Start()
	{
		TcpListener listener = new TcpListener(IPAddress.Any, SocketInPut.PORT);
		listener.Start();
		GameScr.info1.addInfo("Kết nối thành công, đang lắng nghe từ Server...", 0);
		new Thread(delegate()
		{
			for (;;)
			{
				try
				{
					TcpClient tcpClient = listener.AcceptTcpClient();
					NetworkStream stream = tcpClient.GetStream();
					byte[] array = new byte[1024];
					int count = stream.Read(array, 0, array.Length);
					string @string = Encoding.UTF8.GetString(array, 0, count);
					bool flag = @string != null && @string.Contains("bom");
					if (flag)
					{
						GameScr.info1.addInfo("Bommmmmm!", 0);
						string s = @string.Split(new char[]
						{
							'|'
						})[1];
						bool flag2 = DataAccount.Team == int.Parse(s) && DataAccount.Type < 3;
						if (flag2)
						{
							SocketInPut.Bom();
							SocketInPut.ThoiMien();
						}
					}
					else
					{
						bool flag3 = @string != null && @string.Contains("dokhu");
						if (flag3)
						{
							bool flag4 = !AutoBroly.isDoKhu;
							if (flag4)
							{
								GameScr.info1.addInfo("Dò Khu : ON", 0);
								AutoBroly.isDoKhu = true;
							}
							else
							{
								GameScr.info1.addInfo("Dò Khu : OFF", 0);
								AutoBroly.isDoKhu = false;
							}
						}
						else
						{
							bool flag5 = @string != null && @string.Contains("hopthe");
							if (flag5)
							{
								GameScr.info1.addInfo("Bông Tai Potara!", 0);
								string s2 = @string.Split(new char[]
								{
									'|'
								})[1];
								bool flag6 = DataAccount.Team == int.Parse(s2);
								if (flag6)
								{
									ChucNangPhu.AutoBongTai();
								}
							}
							else
							{
								bool flag7 = @string != null && @string.Contains("bohuyet");
								if (flag7)
								{
									GameScr.info1.addInfo("Dùng Bổ huyết!", 0);
									string s3 = @string.Split(new char[]
									{
										'|'
									})[1];
									bool flag8 = DataAccount.Type == 1 && DataAccount.Team == int.Parse(s3);
									if (flag8)
									{
										ChucNangPhu.AnBoHuyet();
									}
								}
								else
								{
									bool flag9 = @string != null && @string.Contains("ttnl");
									if (flag9)
									{
										GameScr.info1.addInfo("Tái tạo năng lượng!", 0);
										string s4 = @string.Split(new char[]
										{
											'|'
										})[1];
										bool flag10 = DataAccount.Type == 1 && DataAccount.Team == int.Parse(s4);
										if (flag10)
										{
											Lmao.ttnl();
										}
									}
									else
									{
										bool flag11 = @string != null && @string.Contains("sp");
										if (flag11)
										{
											GameScr.info1.addInfo("Tập hợp", 0);
											string s5 = @string.Split(new char[]
											{
												'|'
											})[1];
											string s6 = @string.Split(new char[]
											{
												'|'
											})[2];
											string s7 = @string.Split(new char[]
											{
												'|'
											})[3];
											bool flag12 = DataAccount.Type == 1 || DataAccount.Type == 2;
											if (flag12)
											{
												bool flag13 = DataAccount.Team == int.Parse(s7);
												if (flag13)
												{
													AutoBroly.Map = int.Parse(s5);
													AutoBroly.Khu = int.Parse(s6);
												}
											}
											bool flag14 = DataAccount.Type == 3 && !File.Exists("Nro_244_Data//Resources//dokhu");
											if (flag14)
											{
												AutoBroly.Map = int.Parse(s5);
												AutoBroly.Khu = int.Parse(s6);
											}
										}
									}
								}
							}
						}
					}
					tcpClient.Close();
				}
				catch (Exception ex)
				{
					GameScr.info1.addInfo("Lỗi: " + ex.Message, 0);
				}
			}
		}).Start();
	}

	// Token: 0x0400006E RID: 110
	public static int PORT = DataAccount.ID + 1000;
}
using System;
using System.Net.Sockets;
using System.Text;

// Token: 0x02000019 RID: 25
internal class SocketOutPut
{
	// Token: 0x0600008C RID: 140 RVA: 0x0000632C File Offset: 0x0000452C
	public static void Send(string message)
	{
		try
		{
			using (TcpClient tcpClient = new TcpClient("127.0.0.1", 8888))
			{
				NetworkStream stream = tcpClient.GetStream();
				byte[] bytes = Encoding.UTF8.GetBytes(message);
				stream.Write(bytes, 0, bytes.Length);
			}
		}
		catch
		{
		}
	}
}
using System;
using System.Threading;
using UnityEngine;

// Token: 0x020000C8 RID: 200
public class Sound
{
	// Token: 0x06000ADA RID: 2778 RVA: 0x000AD02E File Offset: 0x000AB22E
	public static void setActivity(SoundMn.AssetManager ac)
	{
	}

	// Token: 0x06000ADB RID: 2779 RVA: 0x000AD034 File Offset: 0x000AB234
	public static void stop()
	{
		for (int i = 0; i < Sound.player.Length; i++)
		{
			bool flag = Sound.player[i] != null;
			if (flag)
			{
				Sound.player[i].GetComponent<AudioSource>().Pause();
			}
		}
	}

	// Token: 0x06000ADC RID: 2780 RVA: 0x000AD080 File Offset: 0x000AB280
	public static bool isPlaying()
	{
		return false;
	}

	// Token: 0x06000ADD RID: 2781 RVA: 0x000AD094 File Offset: 0x000AB294
	public static void init()
	{
		GameObject gameObject = new GameObject();
		gameObject.name = "Audio Player";
		gameObject.transform.position = Vector3.zero;
		gameObject.AddComponent<AudioListener>();
		Sound.SoundBGLoop = gameObject.AddComponent<AudioSource>();
	}

	// Token: 0x06000ADE RID: 2782 RVA: 0x000AD0D8 File Offset: 0x000AB2D8
	public static void init(int[] musicID, int[] sID)
	{
		bool flag = Sound.player == null && Sound.music == null;
		if (flag)
		{
			Sound.init();
			Sound.l1 = musicID.Length;
			Sound.player = new GameObject[musicID.Length + sID.Length];
			Sound.music = new AudioClip[musicID.Length + sID.Length];
			for (int i = 0; i < Sound.player.Length; i++)
			{
				string fileName = (i >= Sound.l1) ? ("/sound/" + (i - Sound.l1).ToString()) : ("/music/" + i.ToString());
				Sound.getAssetSoundFile(fileName, i);
			}
		}
	}

	// Token: 0x06000ADF RID: 2783 RVA: 0x000AD188 File Offset: 0x000AB388
	public static void playSound(int id, float volume)
	{
		Sound.play(id + Sound.l1, volume);
	}

	// Token: 0x06000AE0 RID: 2784 RVA: 0x000AD199 File Offset: 0x000AB399
	public static void playSound1(int id, float volume)
	{
		Sound.play(id, volume);
	}

	// Token: 0x06000AE1 RID: 2785 RVA: 0x000AD1A4 File Offset: 0x000AB3A4
	public static void getAssetSoundFile(string fileName, int pos)
	{
		Sound.stop(pos);
		string filename = string.Empty;
		filename = Main.res + fileName;
		Sound.load(filename, pos);
	}

	// Token: 0x06000AE2 RID: 2786 RVA: 0x000AD1D4 File Offset: 0x000AB3D4
	public static void stopAllz()
	{
		for (int i = 0; i < Sound.music.Length; i++)
		{
			Sound.stop(i);
		}
		for (int j = 0; j < Sound.l1; j++)
		{
			Sound.sTopSoundBG(j);
		}
	}

	// Token: 0x06000AE3 RID: 2787 RVA: 0x000AD220 File Offset: 0x000AB420
	public static void stopAllBg()
	{
		for (int i = 0; i < Sound.music.Length; i++)
		{
			Sound.stop(i);
		}
		Sound.sTopSoundBG(0);
		Sound.sTopSoundRun();
		Sound.stopSoundNatural(0);
	}

	// Token: 0x06000AE4 RID: 2788 RVA: 0x000AD261 File Offset: 0x000AB461
	public static void update()
	{
	}

	// Token: 0x06000AE5 RID: 2789 RVA: 0x000AD264 File Offset: 0x000AB464
	public static void stopMusic(int x)
	{
		bool isPlaySound = GameCanvas.isPlaySound;
		if (isPlaySound)
		{
			Sound.stop(x);
		}
	}

	// Token: 0x06000AE6 RID: 2790 RVA: 0x000AD284 File Offset: 0x000AB484
	public static void play(int id, float volume)
	{
		bool flag = !Sound.isNotPlay && GameCanvas.isPlaySound;
		if (flag)
		{
			Sound.start(volume, id);
		}
	}

	// Token: 0x06000AE7 RID: 2791 RVA: 0x000AD2B0 File Offset: 0x000AB4B0
	public static void playSoundRun(int id, float volume)
	{
		bool flag = GameCanvas.isPlaySound && !(Sound.SoundRun == null);
		if (flag)
		{
			Sound.SoundRun.GetComponent<AudioSource>().loop = true;
			Sound.SoundRun.GetComponent<AudioSource>().clip = Sound.music[id];
			Sound.SoundRun.GetComponent<AudioSource>().volume = volume;
			Sound.SoundRun.GetComponent<AudioSource>().Play();
		}
	}

	// Token: 0x06000AE8 RID: 2792 RVA: 0x000AD325 File Offset: 0x000AB525
	public static void sTopSoundRun()
	{
		Sound.SoundRun.GetComponent<AudioSource>().Stop();
	}

	// Token: 0x06000AE9 RID: 2793 RVA: 0x000AD338 File Offset: 0x000AB538
	public static bool isPlayingSound()
	{
		bool flag = Sound.SoundRun == null;
		return !flag && Sound.SoundRun.GetComponent<AudioSource>().isPlaying;
	}

	// Token: 0x06000AEA RID: 2794 RVA: 0x000AD370 File Offset: 0x000AB570
	public static void playSoundNatural(int id, float volume, bool isLoop)
	{
		bool flag = GameCanvas.isPlaySound && !(Sound.SoundBGLoop == null);
		if (flag)
		{
			Sound.SoundWater.GetComponent<AudioSource>().loop = isLoop;
			Sound.SoundWater.GetComponent<AudioSource>().clip = Sound.music[id];
			Sound.SoundWater.GetComponent<AudioSource>().volume = volume;
			Sound.SoundWater.GetComponent<AudioSource>().Play();
		}
	}

	// Token: 0x06000AEB RID: 2795 RVA: 0x000AD3E5 File Offset: 0x000AB5E5
	public static void stopSoundNatural(int id)
	{
		Sound.SoundWater.GetComponent<AudioSource>().Stop();
	}

	// Token: 0x06000AEC RID: 2796 RVA: 0x000AD3F8 File Offset: 0x000AB5F8
	public static bool isPlayingSoundatural(int id)
	{
		bool flag = Sound.SoundWater == null;
		return !flag && Sound.SoundWater.GetComponent<AudioSource>().isPlaying;
	}

	// Token: 0x06000AED RID: 2797 RVA: 0x000AD430 File Offset: 0x000AB630
	public static void playMus(int type, float vl, bool loop)
	{
		bool flag = !Sound.isNotPlay;
		if (flag)
		{
			vl -= 0.3f;
			bool flag2 = vl <= 0f;
			if (flag2)
			{
				vl = 0.01f;
			}
			Sound.playSoundBGLoop(type, vl);
		}
	}

	// Token: 0x06000AEE RID: 2798 RVA: 0x000AD478 File Offset: 0x000AB678
	public static void playSoundBGLoop(int id, float volume)
	{
		bool isPlaySound = GameCanvas.isPlaySound;
		if (isPlaySound)
		{
			bool flag = id == SoundMn.AIR_SHIP;
			if (flag)
			{
				Sound.playSound1(id, volume + 0.2f);
			}
			else
			{
				bool flag2 = !(Sound.SoundBGLoop == null) && !Sound.isPlayingSoundBG(id);
				if (flag2)
				{
					Sound.SoundBGLoop.GetComponent<AudioSource>().loop = true;
					Sound.SoundBGLoop.GetComponent<AudioSource>().clip = Sound.music[id];
					Sound.SoundBGLoop.GetComponent<AudioSource>().volume = volume;
					Sound.SoundBGLoop.GetComponent<AudioSource>().Play();
				}
			}
		}
	}

	// Token: 0x06000AEF RID: 2799 RVA: 0x000AD51A File Offset: 0x000AB71A
	public static void sTopSoundBG(int id)
	{
		Sound.SoundBGLoop.GetComponent<AudioSource>().Stop();
	}

	// Token: 0x06000AF0 RID: 2800 RVA: 0x000AD530 File Offset: 0x000AB730
	public static bool isPlayingSoundBG(int id)
	{
		bool flag = Sound.SoundBGLoop == null;
		return !flag && Sound.SoundBGLoop.GetComponent<AudioSource>().isPlaying;
	}

	// Token: 0x06000AF1 RID: 2801 RVA: 0x000AD568 File Offset: 0x000AB768
	public static void load(string filename, int pos)
	{
		bool flag = Thread.CurrentThread.Name == Main.mainThreadName;
		if (flag)
		{
			Sound.__load(filename, pos);
		}
		else
		{
			Sound._load(filename, pos);
		}
	}

	// Token: 0x06000AF2 RID: 2802 RVA: 0x000AD5A4 File Offset: 0x000AB7A4
	private static void _load(string filename, int pos)
	{
		bool flag = Sound.status != 0;
		if (flag)
		{
			Cout.LogError("CANNOT LOAD AUDIO " + filename + " WHEN LOADING " + Sound.filenametemp);
		}
		else
		{
			Sound.filenametemp = filename;
			Sound.postem = pos;
			Sound.status = 2;
			int i;
			for (i = 0; i < 100; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Sound.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 100;
			if (flag3)
			{
				Cout.LogError("TOO LONG FOR LOAD AUDIO " + filename);
			}
			else
			{
				Cout.Log(string.Concat(new string[]
				{
					"Load Audio ",
					filename,
					" done in ",
					(i * 5).ToString(),
					"ms"
				}));
			}
		}
	}

	// Token: 0x06000AF3 RID: 2803 RVA: 0x000AD675 File Offset: 0x000AB875
	private static void __load(string filename, int pos)
	{
		Sound.music[pos] = (AudioClip)Resources.Load(filename, typeof(AudioClip));
		GameObject.Find("Main Camera").AddComponent<AudioSource>();
		Sound.player[pos] = GameObject.Find("Main Camera");
	}

	// Token: 0x06000AF4 RID: 2804 RVA: 0x000AD6B8 File Offset: 0x000AB8B8
	public static void start(float volume, int pos)
	{
		bool flag = Thread.CurrentThread.Name == Main.mainThreadName;
		if (flag)
		{
			Sound.__start(volume, pos);
		}
		else
		{
			Sound._start(volume, pos);
		}
	}

	// Token: 0x06000AF5 RID: 2805 RVA: 0x000AD6F4 File Offset: 0x000AB8F4
	public static void _start(float volume, int pos)
	{
		bool flag = Sound.status != 0;
		if (flag)
		{
			Debug.LogError("CANNOT START AUDIO WHEN STARTING");
		}
		else
		{
			Sound.volumetem = volume;
			Sound.postem = pos;
			Sound.status = 3;
			int i;
			for (i = 0; i < 100; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Sound.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 100;
			if (flag3)
			{
				Debug.LogError("TOO LONG FOR START AUDIO");
			}
			else
			{
				Debug.Log("Start Audio done in " + (i * 5).ToString() + "ms");
			}
		}
	}

	// Token: 0x06000AF6 RID: 2806 RVA: 0x000AD794 File Offset: 0x000AB994
	public static void __start(float volume, int pos)
	{
		bool flag = !(Sound.player[pos] == null);
		if (flag)
		{
			Sound.player[pos].GetComponent<AudioSource>().PlayOneShot(Sound.music[pos], volume);
		}
	}

	// Token: 0x06000AF7 RID: 2807 RVA: 0x000AD7D4 File Offset: 0x000AB9D4
	public static void stop(int pos)
	{
		bool flag = Thread.CurrentThread.Name == Main.mainThreadName;
		if (flag)
		{
			Sound.__stop(pos);
		}
		else
		{
			Sound._stop(pos);
		}
	}

	// Token: 0x06000AF8 RID: 2808 RVA: 0x000AD810 File Offset: 0x000ABA10
	public static void _stop(int pos)
	{
		bool flag = Sound.status != 0;
		if (flag)
		{
			Debug.LogError("CANNOT STOP AUDIO WHEN STOPPING");
		}
		else
		{
			Sound.postem = pos;
			Sound.status = 4;
			int i;
			for (i = 0; i < 100; i++)
			{
				Thread.Sleep(5);
				bool flag2 = Sound.status == 0;
				if (flag2)
				{
					break;
				}
			}
			bool flag3 = i == 100;
			if (flag3)
			{
				Debug.LogError("TOO LONG FOR STOP AUDIO");
			}
			else
			{
				Debug.Log("Stop Audio done in " + (i * 5).ToString() + "ms");
			}
		}
	}

	// Token: 0x06000AF9 RID: 2809 RVA: 0x000AD8AC File Offset: 0x000ABAAC
	public static void __stop(int pos)
	{
		bool flag = Sound.player[pos] != null;
		if (flag)
		{
			Sound.player[pos].GetComponent<AudioSource>().Stop();
		}
	}

	// Token: 0x040012E6 RID: 4838
	private const int INTERVAL = 5;

	// Token: 0x040012E7 RID: 4839
	private const int MAXTIME = 100;

	// Token: 0x040012E8 RID: 4840
	public static int status;

	// Token: 0x040012E9 RID: 4841
	public static int postem;

	// Token: 0x040012EA RID: 4842
	public static int timestart;

	// Token: 0x040012EB RID: 4843
	private static string filenametemp;

	// Token: 0x040012EC RID: 4844
	private static float volumetem;

	// Token: 0x040012ED RID: 4845
	public static bool isSound = false;

	// Token: 0x040012EE RID: 4846
	public static bool isNotPlay;

	// Token: 0x040012EF RID: 4847
	public static bool stopAll;

	// Token: 0x040012F0 RID: 4848
	public static AudioSource SoundWater;

	// Token: 0x040012F1 RID: 4849
	public static AudioSource SoundRun;

	// Token: 0x040012F2 RID: 4850
	public static AudioSource SoundBGLoop;

	// Token: 0x040012F3 RID: 4851
	public static AudioClip[] music;

	// Token: 0x040012F4 RID: 4852
	public static GameObject[] player;

	// Token: 0x040012F5 RID: 4853
	public static sbyte MLogin;

	// Token: 0x040012F6 RID: 4854
	public static sbyte MBClick = 1;

	// Token: 0x040012F7 RID: 4855
	public static sbyte MTone = 2;

	// Token: 0x040012F8 RID: 4856
	public static sbyte MSanzu = 3;

	// Token: 0x040012F9 RID: 4857
	public static sbyte MChakumi = 4;

	// Token: 0x040012FA RID: 4858
	public static sbyte MChai = 5;

	// Token: 0x040012FB RID: 4859
	public static sbyte MOshin = 6;

	// Token: 0x040012FC RID: 4860
	public static sbyte MEchigo = 7;

	// Token: 0x040012FD RID: 4861
	public static sbyte MKojin = 8;

	// Token: 0x040012FE RID: 4862
	public static sbyte MHaruna = 9;

	// Token: 0x040012FF RID: 4863
	public static sbyte MHirosaki = 10;

	// Token: 0x04001300 RID: 4864
	public static sbyte MOokaza = 11;

	// Token: 0x04001301 RID: 4865
	public static sbyte MGiotuyet = 12;

	// Token: 0x04001302 RID: 4866
	public static sbyte MHangdong = 13;

	// Token: 0x04001303 RID: 4867
	public static sbyte MDeKeu = 14;

	// Token: 0x04001304 RID: 4868
	public static sbyte MChimKeu = 15;

	// Token: 0x04001305 RID: 4869
	public static sbyte MBuocChan = 16;

	// Token: 0x04001306 RID: 4870
	public static sbyte MNuocChay = 17;

	// Token: 0x04001307 RID: 4871
	public static sbyte MBomMau = 18;

	// Token: 0x04001308 RID: 4872
	public static sbyte MKiemGo = 19;

	// Token: 0x04001309 RID: 4873
	public static sbyte MKiem = 20;

	// Token: 0x0400130A RID: 4874
	public static sbyte MTieu = 21;

	// Token: 0x0400130B RID: 4875
	public static sbyte MKunai = 22;

	// Token: 0x0400130C RID: 4876
	public static sbyte MCung = 23;

	// Token: 0x0400130D RID: 4877
	public static sbyte MDao = 24;

	// Token: 0x0400130E RID: 4878
	public static sbyte MQuat = 25;

	// Token: 0x0400130F RID: 4879
	public static sbyte MCung2 = 26;

	// Token: 0x04001310 RID: 4880
	public static sbyte MTieu2 = 27;

	// Token: 0x04001311 RID: 4881
	public static sbyte MTieu3 = 28;

	// Token: 0x04001312 RID: 4882
	public static sbyte MKiem2 = 29;

	// Token: 0x04001313 RID: 4883
	public static sbyte MKiem3 = 30;

	// Token: 0x04001314 RID: 4884
	public static sbyte MDao2 = 31;

	// Token: 0x04001315 RID: 4885
	public static sbyte MDao3 = 32;

	// Token: 0x04001316 RID: 4886
	public static sbyte MCung3 = 33;

	// Token: 0x04001317 RID: 4887
	public static int l1;
}
using System;

// Token: 0x020000C9 RID: 201
public class SoundMn
{
	// Token: 0x06000AFC RID: 2812 RVA: 0x000AD9DA File Offset: 0x000ABBDA
	public static void init(SoundMn.AssetManager ac)
	{
		Sound.setActivity(ac);
	}

	// Token: 0x06000AFD RID: 2813 RVA: 0x000AD9E4 File Offset: 0x000ABBE4
	public static SoundMn gI()
	{
		bool flag = SoundMn.gIz == null;
		if (flag)
		{
			SoundMn.gIz = new SoundMn();
		}
		return SoundMn.gIz;
	}

	// Token: 0x06000AFE RID: 2814 RVA: 0x000ADA14 File Offset: 0x000ABC14
	public void loadSound(int mapID)
	{
		Sound.init(new int[]
		{
			SoundMn.AIR_SHIP,
			SoundMn.RAIN,
			SoundMn.TAITAONANGLUONG
		}, new int[]
		{
			SoundMn.GET_ITEM,
			SoundMn.MOVE,
			SoundMn.LOW_PUNCH,
			SoundMn.LOW_KICK,
			SoundMn.FLY,
			SoundMn.JUMP,
			SoundMn.PANEL_OPEN,
			SoundMn.BUTTON_CLOSE,
			SoundMn.BUTTON_CLICK,
			SoundMn.MEDIUM_PUNCH,
			SoundMn.MEDIUM_KICK,
			SoundMn.PANEL_OPEN,
			SoundMn.EAT_PEAN,
			SoundMn.OPEN_DIALOG,
			SoundMn.NORMAL_KAME,
			SoundMn.NAMEK_KAME,
			SoundMn.XAYDA_KAME,
			SoundMn.EXPLODE_1,
			SoundMn.EXPLODE_2,
			SoundMn.TRAIDAT_KAME,
			SoundMn.HP_UP,
			SoundMn.THAIDUONGHASAN,
			SoundMn.HOISINH,
			SoundMn.GONG,
			SoundMn.KHICHAY,
			SoundMn.BIG_EXPLODE,
			SoundMn.NAMEK_LAZER,
			SoundMn.NAMEK_CHARGE,
			SoundMn.RADAR_CLICK,
			SoundMn.RADAR_ITEM,
			SoundMn.FIREWORK,
			SoundMn.KAMEX10_0,
			SoundMn.KAMEX10_1,
			SoundMn.DESTROY_0,
			SoundMn.DESTROY_1,
			SoundMn.MAFUBA_0,
			SoundMn.MAFUBA_1,
			SoundMn.MAFUBA_2,
			SoundMn.DESTROY_2
		});
	}

	// Token: 0x06000AFF RID: 2815 RVA: 0x000ADBA4 File Offset: 0x000ABDA4
	public void getSoundOption()
	{
		bool flag = GameCanvas.loginScr.isLogin2 && global::Char.myCharz().taskMaint != null && global::Char.myCharz().taskMaint.taskId >= 2;
		if (flag)
		{
			Panel.strTool = new string[]
			{
				mResources.radaCard,
				mResources.quayso,
				mResources.gameInfo,
				mResources.change_flag,
				mResources.change_zone,
				mResources.chat_world,
				mResources.account,
				mResources.option,
				mResources.change_account,
				mResources.REGISTOPROTECT
			};
			bool havePet = global::Char.myCharz().havePet;
			if (havePet)
			{
				Panel.strTool = new string[]
				{
					mResources.radaCard,
					mResources.quayso,
					mResources.gameInfo,
					mResources.pet,
					mResources.change_flag,
					mResources.change_zone,
					mResources.chat_world,
					mResources.account,
					mResources.option,
					mResources.change_account,
					mResources.REGISTOPROTECT
				};
			}
		}
		else
		{
			Panel.strTool = new string[]
			{
				mResources.radaCard,
				mResources.quayso,
				mResources.gameInfo,
				mResources.change_flag,
				mResources.change_zone,
				mResources.chat_world,
				mResources.account,
				mResources.option,
				mResources.change_account
			};
			bool havePet2 = global::Char.myCharz().havePet;
			if (havePet2)
			{
				Panel.strTool = new string[]
				{
					mResources.radaCard,
					mResources.quayso,
					mResources.gameInfo,
					mResources.pet,
					mResources.change_flag,
					mResources.change_zone,
					mResources.chat_world,
					mResources.account,
					mResources.option,
					mResources.change_account
				};
			}
		}
		bool isDelAcc = SoundMn.IsDelAcc;
		if (isDelAcc)
		{
			string[] array = new string[Panel.strTool.Length + 1];
			for (int i = 0; i < Panel.strTool.Length; i++)
			{
				array[i] = Panel.strTool[i];
			}
			array[Panel.strTool.Length] = mResources.delacc;
			Panel.strTool = array;
		}
	}

	// Token: 0x06000B00 RID: 2816 RVA: 0x000ADDE4 File Offset: 0x000ABFE4
	public void getStrOption()
	{
		string str = "[x]   ";
		string str2 = "[  ]   ";
		bool isPC = Main.isPC;
		if (isPC)
		{
			Panel.strCauhinh = new string[]
			{
				(!global::Char.isPaintAura) ? (str2 + mResources.aura_off.Trim()) : (str + mResources.aura_off.Trim()),
				(!global::Char.isPaintAura2) ? (str2 + mResources.aura_off_2.Trim()) : (str + mResources.aura_off_2.Trim()),
				(!GameCanvas.isPlaySound) ? (str2 + mResources.turnOffSound) : (str + mResources.turnOffSound),
				(mGraphics.zoomLevel <= 1) ? (str2 + mResources.x2Screen) : (str + mResources.x1Screen)
			};
		}
		else
		{
			string text = (GameScr.isAnalog != 0) ? (str + mResources.turnOffAnalog) : (str2 + mResources.turnOnAnalog);
			bool flag = !GameCanvas.isTouch;
			if (flag)
			{
				text = (GameScr.isPaintChatVip ? (str + mResources.serverchat_off) : (str2 + mResources.serverchat_off));
			}
			Panel.strCauhinh = new string[]
			{
				(!global::Char.isPaintAura) ? (str2 + mResources.aura_off.Trim()) : (str + mResources.aura_off.Trim()),
				(!global::Char.isPaintAura2) ? (str2 + mResources.aura_off_2.Trim()) : (str + mResources.aura_off_2.Trim()),
				(!GameCanvas.isPlaySound) ? (str2 + mResources.turnOffSound) : (str + mResources.turnOffSound),
				(!GameCanvas.lowGraphic) ? (str2 + mResources.cauhinhthap) : (str + mResources.cauhinhthap),
				text
			};
		}
	}

	// Token: 0x06000B01 RID: 2817 RVA: 0x000ADFB3 File Offset: 0x000AC1B3
	public void HP_MPup()
	{
		Sound.playSound(SoundMn.HP_UP, 0.5f);
	}

	// Token: 0x06000B02 RID: 2818 RVA: 0x000ADFC8 File Offset: 0x000AC1C8
	public void charPunch(bool isKick, float volumn)
	{
		bool flag = !global::Char.myCharz().me;
		if (flag)
		{
			SoundMn.volume /= 2f;
		}
		bool flag2 = volumn <= 0f;
		if (flag2)
		{
			volumn = 0.01f;
		}
		int num = Res.random(0, 3);
		if (isKick)
		{
			Sound.playSound((num != 0) ? SoundMn.MEDIUM_KICK : SoundMn.LOW_KICK, 0.1f);
		}
		else
		{
			Sound.playSound((num != 0) ? SoundMn.MEDIUM_PUNCH : SoundMn.LOW_PUNCH, 0.1f);
		}
		this.poolCount++;
	}

	// Token: 0x06000B03 RID: 2819 RVA: 0x000AE066 File Offset: 0x000AC266
	public void thaiduonghasan()
	{
		Sound.playSound(SoundMn.THAIDUONGHASAN, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B04 RID: 2820 RVA: 0x000AE087 File Offset: 0x000AC287
	public void rain()
	{
		Sound.playMus(SoundMn.RAIN, 0.3f, true);
	}

	// Token: 0x06000B05 RID: 2821 RVA: 0x000AE09B File Offset: 0x000AC29B
	public void gongName()
	{
		Sound.playSound(SoundMn.NAMEK_CHARGE, 0.3f);
		this.poolCount++;
	}

	// Token: 0x06000B06 RID: 2822 RVA: 0x000AE0BC File Offset: 0x000AC2BC
	public void gong()
	{
		Sound.playSound(SoundMn.GONG, 0.2f);
		this.poolCount++;
	}

	// Token: 0x06000B07 RID: 2823 RVA: 0x000AE0DD File Offset: 0x000AC2DD
	public void getItem()
	{
		Sound.playSound(SoundMn.GET_ITEM, 0.3f);
		this.poolCount++;
	}

	// Token: 0x06000B08 RID: 2824 RVA: 0x000AE100 File Offset: 0x000AC300
	public void soundToolOption()
	{
		GameCanvas.isPlaySound = !GameCanvas.isPlaySound;
		bool isPlaySound = GameCanvas.isPlaySound;
		if (isPlaySound)
		{
			SoundMn.gI().loadSound(TileMap.mapID);
			Rms.saveRMSInt("isPlaySound", 1);
		}
		else
		{
			SoundMn.gI().closeSound();
			Rms.saveRMSInt("isPlaySound", 0);
		}
		this.getStrOption();
	}

	// Token: 0x06000B09 RID: 2825 RVA: 0x000AE164 File Offset: 0x000AC364
	public void chatVipToolOption()
	{
		GameScr.isPaintChatVip = !GameScr.isPaintChatVip;
		bool isPaintChatVip = GameScr.isPaintChatVip;
		if (isPaintChatVip)
		{
			Rms.saveRMSInt("serverchat", 0);
		}
		else
		{
			Rms.saveRMSInt("serverchat", 1);
		}
		this.getStrOption();
	}

	// Token: 0x06000B0A RID: 2826 RVA: 0x000AE1B0 File Offset: 0x000AC3B0
	public void analogToolOption()
	{
		bool flag = GameScr.isAnalog == 0;
		if (flag)
		{
			GameScr.isAnalog = 1;
			Rms.saveRMSInt("analog", GameScr.isAnalog);
			GameScr.setSkillBarPosition();
		}
		else
		{
			GameScr.isAnalog = 0;
			Rms.saveRMSInt("analog", GameScr.isAnalog);
			GameScr.setSkillBarPosition();
		}
		this.getStrOption();
	}

	// Token: 0x06000B0B RID: 2827 RVA: 0x000AE210 File Offset: 0x000AC410
	public void CaseAnalog()
	{
		bool flag = !Main.isPC;
		if (flag)
		{
			bool flag2 = !GameCanvas.isTouch;
			if (flag2)
			{
				this.chatVipToolOption();
			}
			else
			{
				this.analogToolOption();
			}
		}
	}

	// Token: 0x06000B0C RID: 2828 RVA: 0x000AE24C File Offset: 0x000AC44C
	public void CaseSizeScr()
	{
		bool lowGraphic = GameCanvas.lowGraphic;
		if (lowGraphic)
		{
			Rms.saveRMSInt("lowGraphic", 0);
			GameCanvas.startOK(mResources.plsRestartGame, 8885, null);
		}
		else
		{
			Rms.saveRMSInt("lowGraphic", 1);
			GameCanvas.startOK(mResources.plsRestartGame, 8885, null);
		}
		this.getStrOption();
	}

	// Token: 0x06000B0D RID: 2829 RVA: 0x000AE2AC File Offset: 0x000AC4AC
	public void AuraToolOption()
	{
		bool isPaintAura = global::Char.isPaintAura;
		if (isPaintAura)
		{
			Rms.saveRMSInt("isPaintAura", 0);
			global::Char.isPaintAura = false;
		}
		else
		{
			Rms.saveRMSInt("isPaintAura", 1);
			global::Char.isPaintAura = true;
		}
		this.getStrOption();
	}

	// Token: 0x06000B0E RID: 2830 RVA: 0x000AE2F4 File Offset: 0x000AC4F4
	public void AuraToolOption2()
	{
		bool isPaintAura = global::Char.isPaintAura2;
		if (isPaintAura)
		{
			Rms.saveRMSInt("isPaintAura2", 0);
			global::Char.isPaintAura2 = false;
		}
		else
		{
			Rms.saveRMSInt("isPaintAura2", 1);
			global::Char.isPaintAura2 = true;
		}
		this.getStrOption();
	}

	// Token: 0x06000B0F RID: 2831 RVA: 0x000AE33C File Offset: 0x000AC53C
	public void HatToolOption()
	{
		Service.gI().sendOptHat(0);
	}

	// Token: 0x06000B10 RID: 2832 RVA: 0x000AE34B File Offset: 0x000AC54B
	public void update()
	{
	}

	// Token: 0x06000B11 RID: 2833 RVA: 0x000AE34E File Offset: 0x000AC54E
	public void closeSound()
	{
		Sound.stopAll = true;
		this.stopAll();
	}

	// Token: 0x06000B12 RID: 2834 RVA: 0x000AE360 File Offset: 0x000AC560
	public void openSound()
	{
		bool flag = Sound.music == null;
		if (flag)
		{
			this.loadSound(0);
		}
		Sound.stopAll = false;
	}

	// Token: 0x06000B13 RID: 2835 RVA: 0x000AE38A File Offset: 0x000AC58A
	public void bigeExlode()
	{
		Sound.playSound(SoundMn.BIG_EXPLODE, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B14 RID: 2836 RVA: 0x000AE3AB File Offset: 0x000AC5AB
	public void explode_1()
	{
		Sound.playSound(SoundMn.EXPLODE_1, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B15 RID: 2837 RVA: 0x000AE3CC File Offset: 0x000AC5CC
	public void explode_2()
	{
		Sound.playSound(SoundMn.EXPLODE_1, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B16 RID: 2838 RVA: 0x000AE3ED File Offset: 0x000AC5ED
	public void traidatKame()
	{
		Sound.playSound(SoundMn.TRAIDAT_KAME, 1f);
		this.poolCount++;
	}

	// Token: 0x06000B17 RID: 2839 RVA: 0x000AE40E File Offset: 0x000AC60E
	public void namekKame()
	{
		Sound.playSound(SoundMn.NAMEK_KAME, 0.3f);
		this.poolCount++;
	}

	// Token: 0x06000B18 RID: 2840 RVA: 0x000AE42F File Offset: 0x000AC62F
	public void nameLazer()
	{
		Sound.playSound(SoundMn.NAMEK_LAZER, 0.3f);
		this.poolCount++;
	}

	// Token: 0x06000B19 RID: 2841 RVA: 0x000AE450 File Offset: 0x000AC650
	public void xaydaKame()
	{
		Sound.playSound(SoundMn.XAYDA_KAME, 0.3f);
		this.poolCount++;
	}

	// Token: 0x06000B1A RID: 2842 RVA: 0x000AE474 File Offset: 0x000AC674
	public void mobKame(int type)
	{
		int id = SoundMn.XAYDA_KAME;
		bool flag = type == 13;
		if (flag)
		{
			id = SoundMn.NORMAL_KAME;
		}
		Sound.playSound(id, 0.1f);
		this.poolCount++;
	}

	// Token: 0x06000B1B RID: 2843 RVA: 0x000AE4B4 File Offset: 0x000AC6B4
	public void charRun(float volumn)
	{
		bool flag = !global::Char.myCharz().me;
		if (flag)
		{
			SoundMn.volume /= 2f;
			bool flag2 = volumn <= 0f;
			if (flag2)
			{
				volumn = 0.01f;
			}
		}
		bool flag3 = GameCanvas.gameTick % 8 == 0;
		if (flag3)
		{
			Sound.playSound(SoundMn.MOVE, volumn);
			this.poolCount++;
		}
	}

	// Token: 0x06000B1C RID: 2844 RVA: 0x000AE528 File Offset: 0x000AC728
	public void monkeyRun(float volumn)
	{
		bool flag = GameCanvas.gameTick % 8 == 0;
		if (flag)
		{
			Sound.playSound(SoundMn.KHICHAY, 0.2f);
			this.poolCount++;
		}
	}

	// Token: 0x06000B1D RID: 2845 RVA: 0x000AE564 File Offset: 0x000AC764
	public void charFall()
	{
		Sound.playSound(SoundMn.MOVE, 0.1f);
		this.poolCount++;
	}

	// Token: 0x06000B1E RID: 2846 RVA: 0x000AE585 File Offset: 0x000AC785
	public void charJump()
	{
		Sound.playSound(SoundMn.MOVE, 0.2f);
		this.poolCount++;
	}

	// Token: 0x06000B1F RID: 2847 RVA: 0x000AE5A6 File Offset: 0x000AC7A6
	public void panelOpen()
	{
		Sound.playSound(SoundMn.PANEL_OPEN, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B20 RID: 2848 RVA: 0x000AE5C7 File Offset: 0x000AC7C7
	public void buttonClose()
	{
		Sound.playSound(SoundMn.BUTTON_CLOSE, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B21 RID: 2849 RVA: 0x000AE5E8 File Offset: 0x000AC7E8
	public void buttonClick()
	{
		Sound.playSound(SoundMn.BUTTON_CLICK, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B22 RID: 2850 RVA: 0x000AE609 File Offset: 0x000AC809
	public void stopMove()
	{
	}

	// Token: 0x06000B23 RID: 2851 RVA: 0x000AE60C File Offset: 0x000AC80C
	public void charFly()
	{
		Sound.playSound(SoundMn.FLY, 0.2f);
		this.poolCount++;
	}

	// Token: 0x06000B24 RID: 2852 RVA: 0x000AE62D File Offset: 0x000AC82D
	public void stopFly()
	{
	}

	// Token: 0x06000B25 RID: 2853 RVA: 0x000AE630 File Offset: 0x000AC830
	public void openMenu()
	{
		Sound.playSound(SoundMn.BUTTON_CLOSE, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B26 RID: 2854 RVA: 0x000AE651 File Offset: 0x000AC851
	public void panelClick()
	{
		Sound.playSound(SoundMn.PANEL_CLICK, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B27 RID: 2855 RVA: 0x000AE672 File Offset: 0x000AC872
	public void eatPeans()
	{
		Sound.playSound(SoundMn.EAT_PEAN, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B28 RID: 2856 RVA: 0x000AE693 File Offset: 0x000AC893
	public void openDialog()
	{
		Sound.playSound(SoundMn.OPEN_DIALOG, 0.5f);
	}

	// Token: 0x06000B29 RID: 2857 RVA: 0x000AE6A6 File Offset: 0x000AC8A6
	public void hoisinh()
	{
		Sound.playSound(SoundMn.HOISINH, 0.5f);
		this.poolCount++;
	}

	// Token: 0x06000B2A RID: 2858 RVA: 0x000AE6C7 File Offset: 0x000AC8C7
	public void taitao()
	{
		Sound.playMus(SoundMn.TAITAONANGLUONG, 0.5f, true);
	}

	// Token: 0x06000B2B RID: 2859 RVA: 0x000AE6DB File Offset: 0x000AC8DB
	public void taitaoPause()
	{
	}

	// Token: 0x06000B2C RID: 2860 RVA: 0x000AE6E0 File Offset: 0x000AC8E0
	public bool isPlayRain()
	{
		bool result;
		try
		{
			result = Sound.isPlayingSound();
		}
		catch (Exception)
		{
			result = false;
		}
		return result;
	}

	// Token: 0x06000B2D RID: 2861 RVA: 0x000AE710 File Offset: 0x000AC910
	public bool isPlayAirShip()
	{
		return false;
	}

	// Token: 0x06000B2E RID: 2862 RVA: 0x000AE724 File Offset: 0x000AC924
	public void airShip()
	{
		SoundMn.cout++;
		bool flag = SoundMn.cout % 2 == 0;
		if (flag)
		{
			Sound.playMus(SoundMn.AIR_SHIP, 0.3f, false);
		}
	}

	// Token: 0x06000B2F RID: 2863 RVA: 0x000AE75F File Offset: 0x000AC95F
	public void pauseAirShip()
	{
	}

	// Token: 0x06000B30 RID: 2864 RVA: 0x000AE762 File Offset: 0x000AC962
	public void resumeAirShip()
	{
	}

	// Token: 0x06000B31 RID: 2865 RVA: 0x000AE765 File Offset: 0x000AC965
	public void stopAll()
	{
		Sound.stopAllz();
	}

	// Token: 0x06000B32 RID: 2866 RVA: 0x000AE76E File Offset: 0x000AC96E
	public void backToRegister()
	{
		Session_ME.gI().close();
		GameCanvas.panel.hide();
		GameCanvas.loginScr.actRegister();
		GameCanvas.loginScr.switchToMe();
	}

	// Token: 0x06000B33 RID: 2867 RVA: 0x000AE7A0 File Offset: 0x000AC9A0
	public void newKame()
	{
		this.poolCount++;
		bool flag = this.poolCount % 15 == 0;
		if (flag)
		{
			Sound.playSound(SoundMn.TRAIDAT_KAME, 0.5f);
		}
	}

	// Token: 0x06000B34 RID: 2868 RVA: 0x000AE7DE File Offset: 0x000AC9DE
	public void radarClick()
	{
		Sound.playSound(SoundMn.RADAR_CLICK, 0.5f);
	}

	// Token: 0x06000B35 RID: 2869 RVA: 0x000AE7F1 File Offset: 0x000AC9F1
	public void radarItem()
	{
		Sound.playSound(SoundMn.RADAR_ITEM, 0.5f);
	}

	// Token: 0x06000B36 RID: 2870 RVA: 0x000AE804 File Offset: 0x000ACA04
	public static void playSound(int x, int y, int id, float volume)
	{
		Sound.playSound(id, volume);
	}

	// Token: 0x04001318 RID: 4888
	public static bool IsDelAcc;

	// Token: 0x04001319 RID: 4889
	public static SoundMn gIz;

	// Token: 0x0400131A RID: 4890
	public static bool isSound = true;

	// Token: 0x0400131B RID: 4891
	public static float volume = 0.5f;

	// Token: 0x0400131C RID: 4892
	private static int MAX_VOLUME = 10;

	// Token: 0x0400131D RID: 4893
	public static SoundMn.MediaPlayer[] music;

	// Token: 0x0400131E RID: 4894
	public static SoundMn.SoundPool[] sound;

	// Token: 0x0400131F RID: 4895
	public static int[] soundID;

	// Token: 0x04001320 RID: 4896
	public static int AIR_SHIP;

	// Token: 0x04001321 RID: 4897
	public static int RAIN = 1;

	// Token: 0x04001322 RID: 4898
	public static int TAITAONANGLUONG = 2;

	// Token: 0x04001323 RID: 4899
	public static int GET_ITEM;

	// Token: 0x04001324 RID: 4900
	public static int MOVE = 1;

	// Token: 0x04001325 RID: 4901
	public static int LOW_PUNCH = 2;

	// Token: 0x04001326 RID: 4902
	public static int LOW_KICK = 3;

	// Token: 0x04001327 RID: 4903
	public static int FLY = 4;

	// Token: 0x04001328 RID: 4904
	public static int JUMP = 5;

	// Token: 0x04001329 RID: 4905
	public static int PANEL_OPEN = 6;

	// Token: 0x0400132A RID: 4906
	public static int BUTTON_CLOSE = 7;

	// Token: 0x0400132B RID: 4907
	public static int BUTTON_CLICK = 8;

	// Token: 0x0400132C RID: 4908
	public static int MEDIUM_PUNCH = 9;

	// Token: 0x0400132D RID: 4909
	public static int MEDIUM_KICK = 10;

	// Token: 0x0400132E RID: 4910
	public static int PANEL_CLICK = 11;

	// Token: 0x0400132F RID: 4911
	public static int EAT_PEAN = 12;

	// Token: 0x04001330 RID: 4912
	public static int OPEN_DIALOG = 13;

	// Token: 0x04001331 RID: 4913
	public static int NORMAL_KAME = 14;

	// Token: 0x04001332 RID: 4914
	public static int NAMEK_KAME = 15;

	// Token: 0x04001333 RID: 4915
	public static int XAYDA_KAME = 16;

	// Token: 0x04001334 RID: 4916
	public static int EXPLODE_1 = 17;

	// Token: 0x04001335 RID: 4917
	public static int EXPLODE_2 = 18;

	// Token: 0x04001336 RID: 4918
	public static int TRAIDAT_KAME = 19;

	// Token: 0x04001337 RID: 4919
	public static int HP_UP = 20;

	// Token: 0x04001338 RID: 4920
	public static int THAIDUONGHASAN = 21;

	// Token: 0x04001339 RID: 4921
	public static int HOISINH = 22;

	// Token: 0x0400133A RID: 4922
	public static int GONG = 23;

	// Token: 0x0400133B RID: 4923
	public static int KHICHAY = 24;

	// Token: 0x0400133C RID: 4924
	public static int BIG_EXPLODE = 25;

	// Token: 0x0400133D RID: 4925
	public static int NAMEK_LAZER = 26;

	// Token: 0x0400133E RID: 4926
	public static int NAMEK_CHARGE = 27;

	// Token: 0x0400133F RID: 4927
	public static int RADAR_CLICK = 28;

	// Token: 0x04001340 RID: 4928
	public static int RADAR_ITEM = 29;

	// Token: 0x04001341 RID: 4929
	public static int FIREWORK = 30;

	// Token: 0x04001342 RID: 4930
	public static int KAMEX10_0 = 31;

	// Token: 0x04001343 RID: 4931
	public static int KAMEX10_1 = 32;

	// Token: 0x04001344 RID: 4932
	public static int DESTROY_0 = 33;

	// Token: 0x04001345 RID: 4933
	public static int DESTROY_1 = 34;

	// Token: 0x04001346 RID: 4934
	public static int MAFUBA_0 = 35;

	// Token: 0x04001347 RID: 4935
	public static int MAFUBA_1 = 36;

	// Token: 0x04001348 RID: 4936
	public static int MAFUBA_2 = 37;

	// Token: 0x04001349 RID: 4937
	public static int DESTROY_2 = 38;

	// Token: 0x0400134A RID: 4938
	public bool freePool;

	// Token: 0x0400134B RID: 4939
	public int poolCount;

	// Token: 0x0400134C RID: 4940
	public static int cout = 1;

	// Token: 0x02000105 RID: 261
	public class MediaPlayer
	{
	}

	// Token: 0x02000106 RID: 262
	public class SoundPool
	{
	}

	// Token: 0x02000107 RID: 263
	public class AssetManager
	{
	}
}
using System;

// Token: 0x020000CA RID: 202
public class SplashScr : mScreen
{
	// Token: 0x06000B39 RID: 2873 RVA: 0x000AE950 File Offset: 0x000ACB50
	public SplashScr()
	{
		SplashScr.instance = this;
	}

	// Token: 0x06000B3A RID: 2874 RVA: 0x000AE968 File Offset: 0x000ACB68
	public static void loadSplashScr()
	{
		SplashScr.splashScrStat = 0;
	}

	// Token: 0x06000B3B RID: 2875 RVA: 0x000AE974 File Offset: 0x000ACB74
	public override void update()
	{
		SplashScr.splashScrStat++;
		bool flag = SplashScr.splashScrStat == 30 && !this.isCheckConnect;
		if (flag)
		{
			DataAccount.Doc();
			this.isCheckConnect = true;
			bool flag2 = Rms.loadRMSInt("serverchat") != -1;
			if (flag2)
			{
				GameScr.isPaintChatVip = (Rms.loadRMSInt("serverchat") == 0);
			}
			bool flag3 = Rms.loadRMSInt("isPlaySound") != -1;
			if (flag3)
			{
				GameCanvas.isPlaySound = (Rms.loadRMSInt("isPlaySound") == 1);
			}
			bool isPlaySound = GameCanvas.isPlaySound;
			if (isPlaySound)
			{
				SoundMn.gI().loadSound(TileMap.mapID);
			}
			SoundMn.gI().getStrOption();
			ServerListScreen.loadIP();
		}
		bool flag4 = SplashScr.splashScrStat >= 150;
		if (flag4)
		{
			bool flag5 = Session_ME.gI().isConnected();
			if (flag5)
			{
				ServerListScreen.loadScreen = true;
				GameCanvas.serverScreen.switchToMe();
			}
			else
			{
				mSystem.onDisconnected();
				bool flag6 = GameCanvas.serverScreen == null;
				if (flag6)
				{
					GameCanvas.serverScreen = new ServerListScreen();
				}
				GameCanvas.serverScreen.switchToMe();
			}
		}
		ServerListScreen.updateDeleteData();
	}

	// Token: 0x06000B3C RID: 2876 RVA: 0x000AEAA4 File Offset: 0x000ACCA4
	public static void loadIP()
	{
		Res.err(">>>>>loadIP:  svselect == " + Rms.loadRMSInt(ServerListScreen.RMS_svselect).ToString());
		ServerListScreen.SetIpSelect(Rms.loadRMSInt(ServerListScreen.RMS_svselect), false);
		bool flag = ServerListScreen.ipSelect == -1;
		if (flag)
		{
			Res.err(">>>loadIP:  svselect == -1");
			bool flag2 = ServerListScreen.serverPriority == -1;
			if (flag2)
			{
				ServerListScreen.SetIpSelect((int)ServerListScreen.serverPriority, true);
			}
			else
			{
				ServerListScreen.SetIpSelect((int)ServerListScreen.serverPriority, true);
			}
		}
		ServerListScreen.ConnectIP();
	}

	// Token: 0x06000B3D RID: 2877 RVA: 0x000AEB30 File Offset: 0x000ACD30
	public override void paint(mGraphics g)
	{
		bool flag = SplashScr.imgLogo != null && SplashScr.splashScrStat < 30;
		if (flag)
		{
			g.setColor(16777215);
			g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
			g.drawImage(SplashScr.imgLogo, GameCanvas.w / 2, GameCanvas.h / 2, 3);
		}
		bool flag2 = SplashScr.nData != -1;
		if (flag2)
		{
			g.setColor(0);
			g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
			g.drawImage(LoginScr.imgTitle, GameCanvas.w / 2, GameCanvas.h / 2 - 24, StaticObj.BOTTOM_HCENTER);
			GameCanvas.paintShukiren(GameCanvas.hw, GameCanvas.h / 2 + 24, g);
			mFont.tahoma_7b_white.drawString(g, mResources.downloading_data + (SplashScr.nData * 100 / SplashScr.maxData).ToString() + "%", GameCanvas.w / 2, GameCanvas.h / 2, 2);
		}
		else
		{
			bool flag3 = SplashScr.splashScrStat >= 30;
			if (flag3)
			{
				g.setColor(0);
				g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
				GameCanvas.paintShukiren(GameCanvas.hw, GameCanvas.hh, g);
				ServerListScreen.paintDeleteData(g);
			}
		}
	}

	// Token: 0x06000B3E RID: 2878 RVA: 0x000AEC7F File Offset: 0x000ACE7F
	public static void loadImg()
	{
	}

	// Token: 0x0400134D RID: 4941
	public static int splashScrStat;

	// Token: 0x0400134E RID: 4942
	private bool isCheckConnect;

	// Token: 0x0400134F RID: 4943
	private bool isSwitchToLogin;

	// Token: 0x04001350 RID: 4944
	public static int nData = -1;

	// Token: 0x04001351 RID: 4945
	public static int maxData = -1;

	// Token: 0x04001352 RID: 4946
	public static SplashScr instance;

	// Token: 0x04001353 RID: 4947
	public static Image imgLogo;

	// Token: 0x04001354 RID: 4948
	private int timeLoading = 10;

	// Token: 0x04001355 RID: 4949
	public long TIMEOUT;
}
using System;

// Token: 0x020000CB RID: 203
public class Sprite
{
	// Token: 0x04001356 RID: 4950
	public const int TRANS_MIRROR = 2;

	// Token: 0x04001357 RID: 4951
	public const int TRANS_MIRROR_ROT180 = 1;

	// Token: 0x04001358 RID: 4952
	public const int TRANS_MIRROR_ROT270 = 4;

	// Token: 0x04001359 RID: 4953
	public const int TRANS_MIRROR_ROT90 = 7;

	// Token: 0x0400135A RID: 4954
	public const int TRANS_NONE = 0;

	// Token: 0x0400135B RID: 4955
	public const int TRANS_ROT180 = 3;

	// Token: 0x0400135C RID: 4956
	public const int TRANS_ROT270 = 6;

	// Token: 0x0400135D RID: 4957
	public const int TRANS_ROT90 = 5;
}
using System;

// Token: 0x020000CC RID: 204
public class StaticObj
{
	// Token: 0x0400135E RID: 4958
	public static int TOP_CENTER = mGraphics.TOP | mGraphics.HCENTER;

	// Token: 0x0400135F RID: 4959
	public static int TOP_LEFT = mGraphics.TOP | mGraphics.LEFT;

	// Token: 0x04001360 RID: 4960
	public static int TOP_RIGHT = mGraphics.TOP | mGraphics.RIGHT;

	// Token: 0x04001361 RID: 4961
	public static int BOTTOM_HCENTER = mGraphics.BOTTOM | mGraphics.HCENTER;

	// Token: 0x04001362 RID: 4962
	public static int BOTTOM_LEFT = mGraphics.BOTTOM | mGraphics.LEFT;

	// Token: 0x04001363 RID: 4963
	public static int BOTTOM_RIGHT = mGraphics.BOTTOM | mGraphics.RIGHT;

	// Token: 0x04001364 RID: 4964
	public static int VCENTER_HCENTER = mGraphics.VCENTER | mGraphics.HCENTER;

	// Token: 0x04001365 RID: 4965
	public static int VCENTER_LEFT = mGraphics.VCENTER | mGraphics.LEFT;

	// Token: 0x04001366 RID: 4966
	public const string SAVE_SKILL = "skill";

	// Token: 0x04001367 RID: 4967
	public const string SAVE_VERSIONUPDATE = "versionUpdate";

	// Token: 0x04001368 RID: 4968
	public const string SAVE_KEYKILL = "keyskill";

	// Token: 0x04001369 RID: 4969
	public const string SAVE_ITEM = "item";

	// Token: 0x0400136A RID: 4970
	public const int NORMAL = 0;

	// Token: 0x0400136B RID: 4971
	public const int UP_FALL = 1;

	// Token: 0x0400136C RID: 4972
	public const int UP_RUN = 2;

	// Token: 0x0400136D RID: 4973
	public const int FALL_RIGHT = 3;

	// Token: 0x0400136E RID: 4974
	public const int FALL_LEFT = 4;

	// Token: 0x0400136F RID: 4975
	public const int MOD_ATTACK_ME = 100;

	// Token: 0x04001370 RID: 4976
	public const int TYPE_PLAYER = 3;

	// Token: 0x04001371 RID: 4977
	public const int TYPE_NON = 0;

	// Token: 0x04001372 RID: 4978
	public const int TYPE_VUKHI = 1;

	// Token: 0x04001373 RID: 4979
	public const int TYPE_AO = 2;

	// Token: 0x04001374 RID: 4980
	public const int TYPE_LIEN = 3;

	// Token: 0x04001375 RID: 4981
	public const int TYPE_TAY = 4;

	// Token: 0x04001376 RID: 4982
	public const int TYPE_NHAN = 5;

	// Token: 0x04001377 RID: 4983
	public const int TYPE_QUAN = 6;

	// Token: 0x04001378 RID: 4984
	public const int TYPE_BOI = 7;

	// Token: 0x04001379 RID: 4985
	public const int TYPE_GIAY = 8;

	// Token: 0x0400137A RID: 4986
	public const int TYPE_PHU = 9;

	// Token: 0x0400137B RID: 4987
	public const int TYPE_OTHER = 11;

	// Token: 0x0400137C RID: 4988
	public const int TYPE_CRYSTAL = 15;

	// Token: 0x0400137D RID: 4989
	public const int FOCUS_MOD = 1;

	// Token: 0x0400137E RID: 4990
	public const int FOCUS_ITEM = 2;

	// Token: 0x0400137F RID: 4991
	public const int FOCUS_PLAYER = 3;

	// Token: 0x04001380 RID: 4992
	public const int FOCUS_ZONE = 4;

	// Token: 0x04001381 RID: 4993
	public const int FOCUS_NPC = 5;

	// Token: 0x04001382 RID: 4994
	public static int[] SKYCOLOR = new int[]
	{
		1618168,
		1938102,
		43488,
		16316528,
		1628316,
		3270903,
		3576979,
		6999725,
		14594155,
		8562616,
		16026508,
		1052688,
		13952747,
		15268088,
		1628316,
		2631752,
		4079166
	};
}
using System;
using System.IO;

// Token: 0x020000CD RID: 205
internal class Status
{
	// Token: 0x17000001 RID: 1
	// (get) Token: 0x06000B43 RID: 2883 RVA: 0x000AED48 File Offset: 0x000ACF48
	public static string FilePath
	{
		get
		{
			return string.Format("Nro_244_Data/Resources/Status/acc{0}", DataAccount.ID);
		}
	}

	// Token: 0x06000B44 RID: 2884 RVA: 0x000AED5E File Offset: 0x000ACF5E
	private static void Wait(int time)
	{
		Status.IsWait = true;
		Status.TimeStartWait = mSystem.currentTimeMillis();
		Status.TimeWait = (long)time;
	}

	// Token: 0x06000B45 RID: 2885 RVA: 0x000AED78 File Offset: 0x000ACF78
	private static bool IsWaiting()
	{
		bool flag = Status.IsWait && mSystem.currentTimeMillis() - Status.TimeStartWait >= Status.TimeWait;
		if (flag)
		{
			Status.IsWait = false;
		}
		return Status.IsWait;
	}

	// Token: 0x06000B46 RID: 2886 RVA: 0x000AEDBC File Offset: 0x000ACFBC
	public static void Update()
	{
		bool flag = Status.IsWaiting();
		if (!flag)
		{
			try
			{
				File.WriteAllText(Status.FilePath, AutoBroly.TrangThai);
			}
			catch
			{
			}
			Status.Wait(2000);
		}
	}

	// Token: 0x04001383 RID: 4995
	private static bool IsWait;

	// Token: 0x04001384 RID: 4996
	private static long TimeStartWait;

	// Token: 0x04001385 RID: 4997
	private static long TimeWait;

	// Token: 0x04001386 RID: 4998
	public static string StatusMe;
}
using System;

// Token: 0x020000CE RID: 206
public class T1 : mResources
{
	// Token: 0x06000B48 RID: 2888 RVA: 0x000AEE18 File Offset: 0x000AD018
	public static void load()
	{
		mResources.confirmChangeServer = "Bạn có muốn đổi máy chủ khác không?";
		mResources.chooseDefaultsv = "Chọn máy chủ mặc định";
		mResources.winLose = "Thắng/Thua: ";
		mResources.learnSkill = "Tới Whis (Hành tinh Bill) để học tuyệt kỹ";
		mResources.updSkill = "Khi đạt tối đa thành thạo, hãy đến Whis (Hành tinh Bill) để nâng cấp tuyệt kỹ";
		mResources.proficiency = "Thành thạo";
		mResources.delacc = "Xóa tài khoản";
		mResources.notiINAPP = "Hôm nay bạn đã nạp nhiều ngọc. Ngày mai hãy nạp tiếp nhé!";
		mResources.notiRuby = "Khi bán thành công sẽ nhận lại Hồng Ngọc không phải Ngọc, bạn có muốn tiếp tục kí gửi?";
		mResources.equip = "Sử dụng";
		mResources.unlock = "Mở khóa";
		mResources.radaCard = "Sổ sưu tầm";
		mResources.not_enough_money_1 = "Bạn không đủ";
		mResources.functionMaintain1 = "Chức năng tạm dừng để bảo trì";
		mResources.napngoc = "Nạp Ngọc";
		mResources.nhatvatpham = "Bạn có chắc muốn nhặt vật phẩm này không ?";
		mResources.xinchucmung = "Xin chúc mừng, bạn đã giành được giải thưởng Con số may mắn";
		mResources.tang = "tầng";
		mResources.kquaVongQuay = "Con số may mắn";
		mResources.quayso = "Mini game";
		mResources.gameInfo = "Thông báo";
		mResources.useGem = "Tự động hồi sinh";
		mResources.autoFunction = "Chức năng auto";
		mResources.sure_fusion = "Bạn có chắc muốn kết hợp vĩnh viễn với đệ tử của mình không? Bạn sẽ mất đệ tử và toàn bộ trang bị đệ tử đang mặc, toàn bộ sức mạnh của đệ tử sẽ chuyển thành tiềm năng của bạn";
		mResources.fusionForever = "Hợp thể vĩnh viễn";
		mResources.fusion = "Hợp thể";
		mResources.nhanngoc = "Nhận ngọc";
		mResources.vuilongnhapduthongtin = "Vui lòng nhập đúng số lượng cho phép";
		mResources.choitiep = "Chơi tiếp";
		mResources.gohome = "Về nhà";
		mResources.status = "Trạng thái";
		mResources.attack = "Tấn công";
		mResources.defend = "Bảo vệ";
		mResources.follow = "Đi theo";
		mResources.pet = "Đệ tử";
		mResources.maychutathoacmatsong = "Máy chủ tắt hoặc mất sóng";
		mResources.cauhinhthap = "Cấu hình thấp";
		mResources.cauhinhcao = "Cấu hình cao";
		mResources.cauhinhthuong = "Cấu hình thường";
		mResources.taidulieu = "Tải dữ liệu";
		mResources.xoadulieu = "Xóa dữ liệu";
		mResources.deletaDataNote = "Bạn cần xóa trong trường hợp có lỗi tải dữ liệu. Khi xóa xong, bạn phải tải lại toàn bộ để có thể chơi.";
		mResources.huy = "Hủy";
		mResources.choigame = "Chơi game";
		mResources.taidulieudechoi = "Vui lòng tải dữ liệu để chơi";
		mResources.chuacotaikhoan = "Chưa có tài khoản";
		mResources.combineSpell = "Úm ba la xì bùa...";
		mResources.combineSuccess = "Chúc mừng con nhé";
		mResources.combineFail = "Chúc con may mắn lần sau";
		mResources.fasterQuestion = "Bạn có đến tương lai ngay bây giờ với giá 1 ngọc không ?";
		mResources.faster = "Tăng tốc";
		mResources.remain = "Còn lại";
		mResources.turnOnAnalog = "Bàn phím ảo";
		mResources.turnOffAnalog = "Bàn phím ảo";
		mResources.analog = "Bàn phím ảo";
		mResources.inventory_Pass = "Mã bảo vệ";
		mResources.input_Inventory_Pass = "Nhập mã bảo vệ";
		mResources.input_Inventory_Pass_wrong = "Mã bảo vệ phải có độ dài là 6 số.";
		mResources.regNote = "Vui lòng nhập số điện thoại hoặc địa chỉ email,sau đó nhập mật khẩu để tạo tài khoản mới";
		mResources.note = "Bạn sẽ mất tài khoản đang chơi và không thể khôi phục được nếu đổi tài khoản khác, bạn có đồng ý không ?";
		mResources.REGISTOPROTECT = "Đăng kí để bảo vệ tài khoản";
		mResources.finishBomong = "Bạn phải hoàn thành nhiệm vụ tìm ngọc 6 sao mới có thể nạp tiền";
		mResources.charger = "Diễn đàn và Nạp Ngọc";
		mResources.charger = "Nạp tiền";
		mResources.notYetSell = "Chưa có vật phẩm rao bán";
		mResources.getUp = "Kéo lên để cập nhật thêm";
		mResources.getDown = "Kéo xuống để cập nhật thêm";
		mResources.page = "Trang";
		mResources.upTop = "Up Top";
		mResources.num = "Số lượng";
		mResources.kiguiXu = "Bán bằng\nvàng";
		mResources.kiguiLuong = "Bán bằng\nngọc";
		mResources.kiguiXuchat = "Bán bằng vàng";
		mResources.kiguiLuongchat = "Bán bằng ngọc";
		mResources.huykigui = "Hủy\nkí gửi";
		mResources.nhantien = "Nhận tiền";
		mResources.daban = "Đã bán";
		mResources.dangban = "Đang bán";
		mResources.kigui = "Kí gửi";
		mResources.turnOnSound = "Âm thanh";
		mResources.turnOffSound = "Âm thanh";
		mResources.rank = "Hạng";
		mResources.selectServer2 = "Chọn máy chủ";
		mResources.active_point = "Năng động";
		mResources.REGISTERING = "Đang đăng ký";
		mResources.SENDINGMSG = "Đang gửi tin nhắn..";
		mResources.SENTMSG = "Đã gửi tin nhắn, xin chờ tin nhắn xác nhận.";
		mResources.NOSENDMSG = "Không thể gởi tin nhắn. Xin kiểm tra tiền và thử khởi động lại game.";
		mResources.sendMsgSuccess = "Gửi tin nhắn thành công";
		mResources.cannotSendMsg = "Không thể gửi tin nhắn";
		mResources.sendGuessMsgSuccess = "Chúc mừng bạn đã gởi tin nhắn dự đoán thành công.";
		mResources.sendMsgFail = "Tin nhắn gửi không thành công.";
		mResources.ALERT_PRIVATE_PASS_1 = "Mật khẩu phải có độ dài là 6 ký tự.";
		mResources.ALERT_PRIVATE_PASS_2 = "Mật khẩu bảo vệ chỉ cho nhập số.";
		mResources.INPUT_PRIVATE_PASS = "Nhập mật khẩu bảo vệ";
		mResources.change_account = "Đổi tài khoản";
		mResources.alreadyHadAccount1 = "Bạn đã từng chơi và có tài khoản Ngọc Rồng Online ở máy chủ ";
		mResources.alreadyHadAccount2 = " từ trước ?";
		mResources.userBlank = "Bạn chưa nhập email hoặc số di động.";
		mResources.passwordBlank = "Bạn chưa nhập mật khẩu";
		mResources.accTooShort = "Tên tài khoản phải nhiều hơn 5 ký tự";
		mResources.phoneInvalid = "Số di động không hợp lệ. Xin nhập theo mẫu 0912345678 hoặc 84918765432";
		mResources.emailInvalid = "Email không hợp lệ. Xin nhập theo mẫu tencuaban@yahoo.com hoặc tencuaban@gmail.com";
		mResources.registerNewAcc = "Đăng ký\ntài khoản\nmới";
		mResources.selectServer = "Chọn\nmáy chủ";
		mResources.forgetPass = "Quên M.khẩu";
		mResources.password = "Mật khẩu";
		mResources.LOGINLABELS = new string[]
		{
			"Chưa có tài khoản xin",
			"chọn menu đăng ký."
		};
		mResources.msg = "Tin nhắn";
		mResources.msgg = new string[]
		{
			"Tin",
			"nhắn"
		};
		mResources.no_msg = "Không có tin nhắn";
		mResources.cancelAccountProtection = "Bạn có muốn huỷ chức năng bảo vệ tài khoản không ?";
		mResources.plsCheckAcc = "Kiểm tra chính xác để lấy lại được tài khoản nếu sau này quên mật khẩu\n";
		mResources.phone = "Số di động";
		mResources.email = "Địa chỉ mail";
		mResources.acc = "TK";
		mResources.pwd = "MK";
		mResources.goToWebForPassword = "Để lấy lại mật khẩu, xin vui lòng vào website http://ngocrongonline.com/matkhau";
		mResources.dragon_ball = "Ngọc rồng";
		mResources.character = "Nhân vật";
		mResources.account = "Tài khoản";
		mResources.account_server = "Máy chủ";
		mResources.char_name_blank = "Bạn chưa nhập tên nhân vật";
		mResources.char_name_short = "Tên nhân vật quá ngắn";
		mResources.char_name_long = "Tên nhân vật không được quá 15 kí tự";
		mResources.changeNameChar = "Nhân vật cần đổi tên";
		mResources.char_name = "Tên nhân vật";
		mResources.login = "Đăng nhập";
		mResources.login2 = "Đ.Nhập";
		mResources.register = "Đăng ký";
		mResources.den = "Dịch \nchuyển tới";
		mResources.REVENGE = "Trả thù";
		mResources.WAIT = "Chờ";
		mResources.PLEASEWAIT = "Xin chờ";
		mResources.CONNECTING = "Đang kết nối";
		mResources.LOGGING = "Đang đăng nhập";
		mResources.no_enemy = "Không có kẻ thù";
		mResources.LOADING = "Đang tải... ";
		mResources.downloading_data = "Đang tải ";
		mResources.select_server = "Chọn";
		mResources.pls_restart_game_error = "Có lỗi xảy ra, xin vui lòng khởi động lại game.";
		mResources.pls_restart_game_error2 = "Có lỗi xảy ra.";
		mResources.lost_connection = "Mất kết nối với máy chủ ";
		mResources.check_3G = "Không thể kết nối, xin kiểm tra lại GPRS/3G/Wifi.";
		mResources.UPDATE = "Cập nhật";
		mResources.change_zone = "Đổi khu vực";
		mResources.select_zone = "Chọn khu vực";
		mResources.website = "Website\ndiễn đàn";
		mResources.server = "Máy chủ";
		mResources.planet = "Hành tinh";
		mResources.MENUME = new string[]
		{
			"Hành trang",
			"Kỹ năng",
			"Tiềm năng",
			"Thông tin",
			"Trang bị"
		};
		mResources.MENUNEWCHAR = new string[]
		{
			string.Empty,
			"Dân tộc: ",
			"Tóc: "
		};
		mResources.MENUGENDER = new string[]
		{
			"Trái đất",
			"Namếc",
			"Xayda"
		};
		bool flag = mSystem.clientType == 7;
		if (flag)
		{
			mResources.MENUGENDER = new string[]
			{
				"Rồng đất",
				"Rồng xanh",
				"Rồng đỏ"
			};
		}
		mResources.CHAR_ORDER = new string[]
		{
			"Thách đấu",
			"Luyện tập",
			"Cừu sát",
			"Kết bạn",
			"Mời vào bang",
			"Phục hồi",
			"Xem thông tin",
			"Chat riêng",
			"Mời vào tộc",
			"Chặn xin vào tộc"
		};
		mResources.mainTab1 = new string[][]
		{
			new string[]
			{
				"Nhiệm",
				"Vụ"
			},
			new string[]
			{
				"Hành",
				"Trang"
			},
			new string[]
			{
				"Kỹ",
				"Năng"
			},
			new string[]
			{
				"Chức",
				"Năng"
			}
		};
		mResources.mainTab2 = new string[][]
		{
			new string[]
			{
				"Nhiệm",
				"Vụ"
			},
			new string[]
			{
				"Hành",
				"Trang"
			},
			new string[]
			{
				"Kỹ",
				"Năng"
			},
			new string[]
			{
				"Bang",
				"Hội"
			},
			new string[]
			{
				"Chức",
				"Năng"
			}
		};
		mResources.petMainTab = new string[][]
		{
			new string[]
			{
				"Đệ",
				"Tử"
			},
			new string[]
			{
				"Trạng",
				"Thái"
			},
			new string[]
			{
				"Hành",
				"Trang"
			}
		};
		mResources.petMainTab2 = new string[][]
		{
			new string[]
			{
				"Đệ",
				"Tử"
			},
			new string[]
			{
				"Trạng",
				"Thái"
			}
		};
		mResources.key_skill_qwerty = new string[]
		{
			"Vào\nphím 1",
			"Vào\nphím 2",
			"Vào\nphím 3",
			"Vào\nphím 4",
			"Vào\nphím 5",
			"Vào\nphím 6",
			"Vào\nphím 7",
			"Vào\nphím 8",
			"Vào\nphím 9",
			"Vào\nphím 0"
		};
		mResources.key_skill = new string[]
		{
			"Vào\nphím 7",
			"Vào\nphím 8",
			"Vào\nphím 9",
			"Vào\nphím 10",
			"Vào\nphím 11",
			string.Empty,
			string.Empty,
			string.Empty,
			string.Empty,
			string.Empty
		};
		mResources.SKILL_FAIL = "Chiêu đánh hiện tại của bạn chưa nâng cấp độ";
		mResources.HP_EMPTY = "Đã hết đậu thần. Cậu hãy về thu hoạch thêm";
		mResources.ZONE_HERE = "Bạn đang ở khu vực này";
		mResources.DES_TASK = new string[]
		{
			"Hãy đi tìm ",
			" ở ",
			" để nhận nhiệm vụ.",
			"Bạn đã hoàn thành hết nhiệm vụ phiên bản này, vui lòng chờ cho đến khi ra phiên bản tiếp theo."
		};
		mResources.DIES = new string[]
		{
			"Kiệt sức",
			"Chờ",
			"Về nhà",
			"Hồi sinh\nngay\n(1 ngọc)"
		};
		mResources.SYNTHESIS = new string[]
		{
			"Bản đồ",
			"Nhiệm vụ",
			"Gia tộc"
		};
		mResources.tips = new string[]
		{
			"Đậu thần dùng để tăng KI và HP ngay lập tức",
			"Bạn chỉ mang theo người được 10 hạt đậu. Nếu muốn mang nhiều hơn, hãy xin từ bạn bè trong Bang",
			"Tất cả các sách kỹ năng đều có thể học miễn phí tại Quy Lão Kame, khi bạn có đủ điểm tiềm năng",
			"Bạn không thể bay, dùng kỹ năng, nếu hết KI",
			"Tấn công quái vật cùng bạn bè trong Bang sẽ mang lại nhiều điểm tiềm năng hơn đánh một mình",
			"Tập luyện với bạn bè tại khu vực thích hợp sẽ mang lại nhiều điểm tiềm năng hơn đánh quái vật",
			"Khi được nâng cấp, đậu thần sẽ phục hồi nhiều HP và KI hơn",
			"Vào trò chơi đều đặn mỗi ngày để nhận được Ngọc miễn phí",
			"Đùi gà sẽ phục hồi 100% HP, KI. Cà chua phục hồi 100% KI. Cà rốt phục hồi 100% HP",
			"Cây đậu thần kết một hạt sau một thời gian, cho dù bạn đang offline",
			"Sau 3 ngày không tham gia trò chơi, bạn sẽ bị giảm sức mạnh do lười luyện tập",
			"Bạn sẽ giảm thể lực khi đánh quái, nhưng sẽ tăng lại thể lực khi không đánh nữa",
			"Khi nào hết ngọc, bạn hãy đến chỗ Bò Mộng"
		};
		mResources.TASK_INPUT_CLASS = "Sau khi gia nhập vào lớp học, thì có thể nhận nhiệm vụ từ hiệu trưởng";
		mResources.SERI_NUM = "Số seri";
		mResources.CARD_CODE = "Mã thẻ";
		mResources.pay_card = "Nạp thẻ Vina, Mobi, Viettel, Gate";
		mResources.pay_card2 = "Nạp thẻ";
		mResources.serial_blank = "Vui lòng nhập số serial";
		mResources.card_code_blank = "Vui lòng nhập mã code";
		mResources.billion = "Tỉ";
		mResources.million = "Tr";
		mResources.MENU = "Menu";
		mResources.CLOSE = "Đóng";
		mResources.ON = "Bật";
		mResources.OFF = "Tắt";
		mResources.ENABLE = "Kích hoạt";
		mResources.DELETE = "Xóa";
		mResources.VIEW = "Xem";
		mResources.CONTINUE = "Tiếp tục";
		mResources.NEXTSTEP = "Tiếp theo";
		mResources.USE = "Sử dụng";
		mResources.SORT = "Sắp xếp";
		mResources.YES = "Có";
		mResources.NO = "Không";
		mResources.EXIT = "Thoát";
		mResources.CHAT = "Chat";
		mResources.OK = "OK";
		mResources.retry = "Thử lại";
		mResources.uncheck = "Bỏ";
		mResources.remember = "Nhớ";
		mResources.ACCEPT = "Đồng ý";
		mResources.CANCEL = "Hủy";
		mResources.SELECT = "Chọn";
		mResources.enter = "Đi vào";
		mResources.open_link = "Mở link";
		mResources.DOYOUWANTEXIT = "Bạn có muốn thoát game không ?";
		mResources.NEWCHAR = "Tạo mới";
		mResources.BACK = "Đóng";
		mResources.LOCKED = "Đã khóa";
		mResources.KILL = "Tiêu diệt";
		mResources.KILLBOSS = "Bắt tà thú";
		mResources.NOLOCK = "Không khóa";
		mResources.XU = "vàng";
		mResources.LUONG = "ngọc";
		mResources.RUBY = "hồng ngọc";
		mResources.PK_NOW = "Điểm hiếu chiến của bạn hiện tại là ";
		mResources.CUU_SAT = " bắt đầu cừu sát bạn";
		mResources.NOT_ENOUGH_MP = "Không đủ KI để sử dụng";
		mResources.you_receive = "Bạn nhận được";
		mResources.MONTH = "tháng";
		mResources.WEEK = "tuần";
		mResources.DAY = "ngày";
		mResources.HOUR = "giờ";
		mResources.SECOND = "giây";
		mResources.MINUTE = "phút";
		mResources.LEARN_SKILL = "Bạn học được ";
		mResources.friend = "Bạn bè";
		mResources.enemy = "Kẻ thù";
		mResources.no_friend = "Không có bạn bè";
		mResources.chat_world = "Chat thế giới";
		mResources.change_flag = "Đổi cờ";
		mResources.option = "Cấu hình";
		mResources.high = "Cao";
		mResources.medium = "Vừa";
		mResources.low = "Thấp";
		mResources.increase_vga = "Tăng đồ họa (cho máy mạnh)";
		mResources.decrease_vga = "Giảm đồ họa (cho máy yếu)";
		mResources.serverchat_off = "Thông báo từ máy chủ";
		mResources.serverchat_on = "Thông báo từ máy chủ";
		mResources.aura_on = "Hào quang đặc biệt";
		mResources.aura_off = "Hào quang đặc biệt";
		mResources.aura_on_2 = "Hào quang sức mạnh";
		mResources.aura_off_2 = "Hào quang sức mạnh";
		mResources.hat_on = "Hiện phụ kiện";
		mResources.hat_off = "Phụ kiện";
		mResources.x2Screen = "Màn hình lớn";
		mResources.x1Screen = "Màn hình nhỏ";
		mResources.changeSizeScreen = "Bạn có muốn thoát game để thay đổi cỡ màn hình không ?";
		mResources.chest = "Rương đồ";
		mResources.chestt = new string[]
		{
			"Rương",
			"Đồ"
		};
		mResources.inventory = new string[]
		{
			"Hành",
			"Trang"
		};
		mResources.combine = new string[]
		{
			"Kết",
			"hợp"
		};
		mResources.mapp = new string[]
		{
			"Bản",
			"đồ"
		};
		mResources.item_give = new string[]
		{
			"Item",
			"cho"
		};
		mResources.item_receive = new string[]
		{
			"Item",
			"nhận"
		};
		mResources.zonee = new string[]
		{
			"Khu",
			"Vực"
		};
		mResources.zone = "Khu vực";
		mResources.map = "Bản đồ";
		mResources.item_receive2 = "Item nhận";
		mResources.item = "Item";
		mResources.give_upper = "Cho";
		mResources.receive_upper = "Nhận";
		mResources.receive_all = "Nhận tất";
		mResources.no_map = "Chưa có bản đồ cho khu vực này";
		mResources.go_to_quest = "Hãy đến vị trí chớp nháy trên bản đồ để làm nhiệm vụ";
		mResources.from_earth = "Dành cho Trái Đất\n";
		mResources.from_namec = "Dành cho Namếc\n";
		mResources.from_sayda = "Dành cho Xayda\n";
		mResources.expire = "Hạn dùng";
		mResources.pow_request = "Sức mạnh yêu cầu";
		mResources.your_pow = "Sức mạnh của bạn";
		mResources.used = "Đã dùng";
		mResources.place = "ô";
		mResources.FOREVER = "vĩnh viễn";
		mResources.NOUPGRADE = "Chưa nâng cấp";
		mResources.NOTUPGRADE = "Không thể nâng cấp";
		mResources.UPGRADE = "Nâng cấp";
		mResources.UPGRADING = "Đang nâng cấp";
		mResources.make_shortcut = "Gán ô\nphím tắt";
		mResources.into_place = "Vào ô\nthứ ";
		mResources.move_to_chest = "Cất vào\nrương";
		mResources.move_to_chest2 = "Cất vào rương";
		mResources.press_chat_querty = "Nhấn phím # để chat";
		mResources.press_chat = "Nhấn phím c để chat";
		mResources.saying = "Nói chuyện";
		mResources.miss = "Hụt";
		mResources.donate = "Cho";
		mResources.receive = "Nhận";
		mResources.press_twice = "Nhấn 2 lần";
		mResources.can_harvest = "Có thể thu hoạch";
		mResources.do_accept_qwerty = "Nhấn Y để đồng ý (";
		mResources.do_accept = "Nhấn # để đồng ý (";
		mResources.plsRestartGame = "Xin khởi động lại game để cập nhật dữ liệu";
		mResources.is_online = "Đang online";
		mResources.is_offline = "Đang offline";
		mResources.make_friend = "Kết bạn";
		mResources.chat_player = "Chat player";
		mResources.chat_with = "Chat với";
		mResources.clan_capsuledonate = "Capsule cho bang";
		mResources.clan_capsuleself = "Capsule cá nhân";
		mResources.clan_point = "Capsule bang";
		mResources.give_pea = "Cho đậu";
		mResources.receive_pea = "Nhận đậu";
		mResources.request_pea = "Xin đậu";
		mResources.time = " lần";
		mResources.received = "Đã nhận";
		mResources.power = "Sức mạnh";
		mResources.join_date = "Ngày gia nhập";
		mResources.clan_leader = "Bang chủ";
		mResources.clan_coleader = "Phó bang";
		mResources.power_point = "Điểm sức mạnh";
		mResources.member = "Thành viên";
		mResources.memberr = new string[]
		{
			"Thành",
			"viên"
		};
		mResources.chatClan = new string[]
		{
			"Chat",
			"bang"
		};
		mResources.leaveClan = new string[]
		{
			"Rời",
			"bang"
		};
		mResources.createClan = new string[]
		{
			"Lập",
			"bang"
		};
		mResources.findClan = new string[]
		{
			"Tìm",
			"bang"
		};
		mResources.khau_hieuu = new string[]
		{
			"Khẩu",
			"hiệu"
		};
		mResources.bieu_tuongg = new string[]
		{
			"Biểu",
			"tượng"
		};
		mResources.request_pea2 = new string[]
		{
			"Xin",
			"đậu"
		};
		mResources.level = "Cấp";
		mResources.clan_birthday = "Ngày thành lập: ";
		mResources.clan_list = "Danh sách bang";
		mResources.create = "Lập";
		mResources.find = "Tìm";
		mResources.leave = "Rời";
		mResources.not_join_clan = "Chưa vào bang";
		mResources.clanEmpty = new string[]
		{
			"Hiện tại bang chỉ có",
			" 1 thành viên là bạn.",
			" Xin chờ có người xin vào.",
			" Bạn có thể chọn vào nhân vật",
			" khác để mời họ vào bang"
		};
		mResources.input_clan_name = "Nhập tên bang";
		mResources.clan_name = "Tên bang";
		mResources.chat_clan = "Chat bang";
		mResources.input_clan_name_to_create = "Nhập tên bang cần tạo";
		mResources.input_clan_slogan = "Nhập khẩu hiệu bang";
		mResources.do_u_want_join_clan = "Bạn có muốn xin vào bang ";
		mResources.select_clan_icon = "Chọn biểu tượng bang";
		mResources.request_join_clan = "Xin vào";
		mResources.view_clan_member = "Xem thành\nviên";
		mResources.create_clan_co_leader = "Phong\nphó bang";
		mResources.create_clan_leader = "Phong\nchủ bang";
		mResources.disable_clan_mastership = "Cắt chức";
		mResources.kick_clan_mem = "Loại thành viên";
		mResources.clan_name_blank = "Bạn hãy nhập tên bang";
		mResources.clan_slogan_blank = "Bạn hãy nhập khẩu hiệu bang";
		mResources.cannot_find_clan = "Không tìm thấy bang";
		mResources.ago = "trước";
		mResources.findingClan = "Đang tìm bang";
		mResources.trade = "Giao dịch";
		mResources.not_lock_trade = " chưa khóa giao dịch";
		mResources.not_lock_trade_upper = "Chưa khóa giao dịch";
		mResources.locked_trade = " đã khóa giao dịch";
		mResources.locked_trade_upper = "Đã khóa giao dịch";
		mResources.lock_trade = "Khóa giao dịch";
		mResources.wait_opp_lock_trade = "Chờ đối thủ khóa";
		mResources.press_done = "Nhất nút 'Xong'";
		mResources.THROW = "Bỏ ra đất";
		mResources.SPLIT = "Tách";
		mResources.done = "Xong";
		mResources.opponent = "Đối phương";
		mResources.you = "Bạn";
		mResources.mlock = "Khóa";
		mResources.money_trade = "Số tiền giao dịch";
		mResources.GETOUT = "Lấy ra";
		mResources.MOVEOUT = "Bỏ ra";
		mResources.MOVEFORPET = "Cho đệ tử";
		mResources.GETOUTMONEY = "Rút xu";
		mResources.GETINMONEY = "Cất xu";
		mResources.SENDMONEY = "Chuyển xu";
		mResources.GETIN = "Cất vào";
		mResources.SALE = "Bán";
		mResources.SALES = "Bán nhiều";
		mResources.SALEALL = "Bán hết";
		mResources.BUY = "Mua";
		mResources.BUYS = "Mua nhiều";
		mResources.input_money_to_trade = "Nhập số tiền muốn giao dịch";
		mResources.input_money = "Nhập số tiền";
		mResources.input_money_wrong = "Nhập sai số tiền, vui lòng nhập lại";
		mResources.not_enough_money = "Bạn không đủ tiền, vui lòng nhập lại";
		mResources.input_quantity_to_trade = "Nhập số lượng muốn giao dịch";
		mResources.input_quantity = "Nhập số lượng";
		mResources.input_quantity_wrong = "Nhập sai số lượng, vui lòng nhập lại";
		mResources.already_has_item = "Đã có vật phẩm này";
		mResources.unlock_item_to_trade = "Vui lòng mở khóa trước khi sử dụng vật phẩm để giao dịch";
		mResources.root = "gốc";
		mResources.need = "cần";
		mResources.need_upper = "Đủ";
		mResources.free = "Miễn phí";
		mResources.free1 = "Miễn";
		mResources.free2 = "phí";
		mResources.select_item = "Chọn vật phẩm";
		mResources.random = "Bất kì";
		mResources.say_hello = "Xin chào!";
		mResources.say_wat_do_u_want_to_buy = "Cậu muốn mua gì?";
		mResources.say_wat_do_u_want_to_buy2 = "Con muốn học gì?";
		mResources.do_u_sure_to_trade = "Bạn có chắc muốn giao dịch với những vật phẩm trên không ?";
		mResources.learn_with = "Học với";
		mResources.buy_with = "Mua bằng";
		mResources.can_not_do_when_die = "Không thể thực hiện khi đang kiệt sức";
		mResources.use_for_combine = "Sử dụng\nđể\nkết hợp";
		mResources.use_for_trade = "Sử dụng\nđể\ngiao dịch";
		mResources.not_enough_luong_world_channel = "Bạn không đủ ngọc để chat kênh thế giới";
		mResources.world_channel_5_luong = "Chat kênh thế giới (5 ngọc)";
		mResources.want_to_trade = " muốn giao dịch với bạn, bạn có đồng ý không ?";
		mResources.hasJustUpgrade1 = "Bạn vừa nâng cấp ";
		mResources.hasJustUpgrade2 = " sang cấp ";
		mResources.potential_to_learn = "tiềm năng đến Sư phụ để học";
		mResources.potential_point = "Điểm tiềm năng";
		mResources.achievement_point = "Điểm thành tích";
		mResources.increase = "tăng";
		mResources.increase_upper = "Tăng";
		mResources.not_enough_potential_point1 = "Bạn chỉ có ";
		mResources.not_enough_potential_point2 = " điểm tiềm năng. Hãy luyện tập thêm để có đủ ";
		mResources.use_potential_point_for1 = "Bạn có muốn dùng ";
		mResources.use_potential_point_for2 = " tiềm năng để tăng vào ";
		mResources.for_HP = " HP không?";
		mResources.for_KI = " KI không?";
		mResources.for_hit_point = " sức đánh không?";
		mResources.for_armor = " giáp không?";
		mResources.for_crit = " chí mạng không?";
		mResources.can_buy_from_Uron1 = "Khi có ";
		mResources.can_buy_from_Uron2 = " tiềm năng, bạn sẽ được nâng cấp miễn phí ";
		mResources.can_buy_from_Uron3 = ". Ngoài ra bạn có thể mua Bí Kíp từ Urôn để học nhanh";
		mResources.HP = "HP";
		mResources.KI = "KI";
		mResources.hit_point = "Sức đánh";
		mResources.armor = "Giáp";
		mResources.vitality = "Thể lực";
		mResources.critical = "Chí mạng";
		mResources.cap_do = "Cấp độ";
		mResources.KI_consume = "KI tiêu hao: ";
		mResources.cooldown = "Hồi chiêu";
		mResources.milisecond = "miligiây";
		mResources.max_level_reach = "Đã đạt cấp tối đa";
		mResources.next_level_require = "Cấp kế cần ";
		mResources.potential = "tiềm năng";
		mResources.not_learn = "Chưa học";
		mResources.learn_require = "Để học cần ";
		mResources.learn = "Học";
		mResources.to_gain_20hp = "để tăng 20 HP gốc";
		mResources.to_gain_20mp = "để tăng 20 MP gốc";
		mResources.to_gain_1pow = "để tăng 1 sức mạnh gốc";
		mResources.hairStyleName = new string[][]
		{
			new string[]
			{
				"Gohan",
				"Krillin",
				"Yamcha"
			},
			new string[]
			{
				"Ốc tiêu",
				"Pocollo",
				"Kami"
			},
			new string[]
			{
				"Cađic",
				"Rađic",
				"Kakalot"
			}
		};
		bool flag2 = mSystem.clientType == 7;
		if (flag2)
		{
			mResources.hairStyleName = new string[][]
			{
				new string[]
				{
					"Hango",
					"Linkhi",
					"Chayam"
				},
				new string[]
				{
					"Deden",
					"Cololo",
					"Mika"
				},
				new string[]
				{
					"Tageve",
					"Ditra",
					"Rotkaka"
				}
			};
		}
		mResources.hp_ki_full = "HP và KI đã đầy, không cần dùng đậu thần";
		mResources.quest_place = "Địa điểm nhiệm vụ";
		mResources.no_mission = "Không có nhiệm vụ";
		mResources.reward_mission = "Hoàn thành, thưởng ";
		mResources.achievement_mission = "Nhiệm vụ thành tích";
		mResources.trangbi = "Trang bị";
		mResources.wat_do_u_want = "Bạn muốn làm gì";
		mResources.select_map = "Chọn nơi muốn đến";
		mResources.off = "Chọn";
		mResources.on = "Chọn";
		mResources.offPlease = "Chọn để ẩn chat thế giới";
		mResources.onPlease = "Chọn để hiện chat thế giới";
		mResources.playNew = "Chơi mới";
		mResources.playAcc = "";
		mResources.not_register_yet = "Chưa đăng ký";
		mResources.countDown_waitingroom = "Vui lòng chờ: ";
		mResources.potential_to_learn_tuyetKi = "tiềm năng đến Whis để học";
	}
}
using System;

// Token: 0x020000CF RID: 207
public class T2 : mResources
{
	// Token: 0x06000B4A RID: 2890 RVA: 0x000B05BC File Offset: 0x000AE7BC
	public static void load()
	{
		mResources.confirmChangeServer = "Do you want to change server?";
		mResources.chooseDefaultsv = "Default server connect";
		mResources.winLose = "Win/Lose: ";
		mResources.learnSkill = "Go to Whis (Beerus Planet) to learn skill";
		mResources.updSkill = "When reach maximum proficiency, go to Whis (Beerus Planet) to upgrade skill";
		mResources.proficiency = "Proficiency";
		mResources.delacc = "Delete account";
		mResources.notiINAPP = "You bought many gems today. Let's try again tomorrow!";
		mResources.notiRuby = "When selling successfully, you will receive Ruby non Gem. Do you want to continue consign?";
		mResources.equip = "Equip";
		mResources.unlock = "Unlock";
		mResources.radaCard = "Collection book";
		mResources.not_enough_money_1 = "Not enough";
		mResources.functionMaintain1 = "Function in maintenance.";
		mResources.napngoc = "Buy more gems";
		mResources.nhatvatpham = "Are you sure you want to pick this item ?";
		mResources.xinchucmung = "Congratulations, you have won lucky number";
		mResources.tang = "level";
		mResources.kquaVongQuay = "Results lucky number";
		mResources.quayso = "Who to Choose";
		mResources.gameInfo = "Notification";
		mResources.useGem = "Auto reborn";
		mResources.autoFunction = "Auto function";
		mResources.sure_fusion = "Are you sure you fusion forever with your disciple? You will lost your disciple and all disciple's equip, all disciple's power will convert to your potential.";
		mResources.fusionForever = "Fusion dance forever";
		mResources.fusion = "Fusion dance";
		mResources.nhanngoc = "Receive gem";
		mResources.vuilongnhapduthongtin = "Please, enter the valid quantity";
		mResources.choitiep = "Continue";
		mResources.gohome = "Go home";
		mResources.status = "Status";
		mResources.attack = "Attack";
		mResources.defend = "Protect";
		mResources.follow = "Follow";
		mResources.pet = "Disciple";
		mResources.den = "Go to";
		mResources.maychutathoacmatsong = "Connect fail, please try again";
		mResources.cauhinhthap = "Low graphics";
		mResources.cauhinhcao = "High graphics";
		mResources.cauhinhthuong = "Medium graphics";
		mResources.taidulieu = "Download";
		mResources.xoadulieu = "Clear data";
		mResources.deletaDataNote = "When game have data errors, you should delete data. After delete data, you have to download data to play game.";
		mResources.huy = "Cancel";
		mResources.choigame = "Play game";
		mResources.taidulieudechoi = "Please download data to play";
		mResources.chuacotaikhoan = "Not have account";
		mResources.combineSpell = "Abracadabra...";
		mResources.combineSuccess = "Congratulations my dear";
		mResources.combineFail = "Better luck next time my dear";
		mResources.fasterQuestion = "Do you want go to future now with 1 gem ?";
		mResources.faster = "Speed up";
		mResources.remain = "Remain";
		mResources.turnOnAnalog = "Turn on analog";
		mResources.turnOffAnalog = "Turn off analog";
		mResources.analog = "Analog";
		mResources.inventory_Pass = "Security password";
		mResources.input_Inventory_Pass = "Enter Security password";
		mResources.input_Inventory_Pass_wrong = "Security password must be 6 number.";
		mResources.regNote = "Please enter your number phone or email ,then enter your password to create new account";
		mResources.note = "You will lost your account forever if you change to another account,do you agree ?";
		mResources.REGISTOPROTECT = "Register to protect account";
		mResources.finishBomong = "You must finish the mission find 6 star dragon ball to recharge";
		mResources.charger = "Forum and Buy more gems";
		mResources.napngoc = "Buy more gems";
		mResources.notYetSell = "No items to buy";
		mResources.getUp = "Hold up to get more";
		mResources.getDown = "Hold down to get more";
		mResources.page = "Page";
		mResources.upTop = "Up top";
		mResources.num = "Quaintly";
		mResources.kiguiXu = "Consign by\ngold";
		mResources.kiguiLuong = "Consign by\ngem";
		mResources.kiguiXuchat = "Consign by gold";
		mResources.kiguiLuongchat = "Consign by gem";
		mResources.huykigui = "Cancel\nconsign";
		mResources.nhantien = "Get\nmoney";
		mResources.daban = "Sold";
		mResources.dangban = "Selling";
		mResources.kigui = "Consign";
		mResources.turnOffSound = "Sound";
		mResources.turnOnSound = "Sound";
		mResources.no_enemy = "No enemy";
		mResources.selectServer2 = "Select server";
		mResources.rank = "Rank";
		mResources.active_point = "Active point";
		mResources.REGISTERING = "Registering";
		mResources.SENDINGMSG = "Sending message..";
		mResources.SENTMSG = "Sent message, please wait for confirmed message.";
		mResources.NOSENDMSG = "Message can not be delivered. Please check your account and restart game.";
		mResources.MOVEFORPET = "User for\ndisciple";
		mResources.sendMsgSuccess = "Message delivered";
		mResources.cannotSendMsg = "Can not send message";
		mResources.sendGuessMsgSuccess = "Congratulation, you have just send predicted message successfully.";
		mResources.sendMsgFail = "Message sending failed.";
		mResources.ALERT_PRIVATE_PASS_1 = "Password must be 6 characters length.";
		mResources.ALERT_PRIVATE_PASS_2 = "Enter number for private password only.";
		mResources.INPUT_PRIVATE_PASS = "Enter private password";
		mResources.change_account = "Change account";
		mResources.alreadyHadAccount1 = "Did you already play and own a Dragon Ball Online's account at server ";
		mResources.alreadyHadAccount2 = " before ?";
		mResources.userBlank = "You didn't enter you email or phone number.";
		mResources.passwordBlank = "You didn't enter password";
		mResources.accTooShort = "Account name must be longer than 5 character";
		mResources.phoneInvalid = "Phone number is invalid. Please enter like these following form: 0912345678 or 84918765432";
		mResources.emailInvalid = "Email is invalid. Please enter like these following form: yournamehere@yahoo.com or yournamehere@gmail.com";
		mResources.registerNewAcc = "Register\nnew\naccount";
		mResources.selectServer = "Select\nserver";
		mResources.forgetPass = "Forget pwd";
		mResources.password = "Password";
		mResources.LOGINLABELS = new string[]
		{
			"Didn't have account? Please",
			"choose register menu."
		};
		mResources.msg = "Message";
		mResources.msgg = new string[]
		{
			"Message",
			string.Empty
		};
		mResources.no_msg = "No message";
		mResources.cancelAccountProtection = "Do you want to cancel account protection function ?";
		mResources.plsCheckAcc = "Please check your account information carefully to recover account, in case forgot password\n";
		mResources.phone = "Phone number";
		mResources.email = "Email";
		mResources.acc = "Acc";
		mResources.pwd = "Pwd";
		mResources.goToWebForPassword = "To recover password, please visit website http://ngocrongonline.com/matkhau";
		mResources.dragon_ball = "Dragon Ball";
		mResources.character = "Character";
		mResources.account = "Account";
		mResources.account_server = "Server";
		mResources.char_name_blank = "You didn't enter character name";
		mResources.char_name_short = "Character name can not too short";
		mResources.char_name_long = "Character name can not longer than 15 characters";
		mResources.changeNameChar = "Character need to change name";
		mResources.char_name = "Character name";
		mResources.login = "Log in";
		mResources.login2 = "Log in";
		mResources.register = "Register";
		mResources.den = "Go to";
		mResources.REVENGE = "Revenge";
		mResources.WAIT = "Wait";
		mResources.PLEASEWAIT = "Please wait";
		mResources.CONNECTING = "Connecting";
		mResources.LOGGING = "Logging";
		mResources.LOADING = "Loading... ";
		mResources.downloading_data = "Downloading ";
		mResources.select_server = "Select server";
		mResources.pls_restart_game_error = "Error! please restart game.";
		mResources.pls_restart_game_error2 = "Error!.";
		mResources.lost_connection = "Lost connection ";
		mResources.check_3G = "Can not connect, please check your GPRS/3G/Wifi connection.";
		mResources.UPDATE = "Update";
		mResources.change_zone = "Change zone";
		mResources.select_zone = "Select zone";
		mResources.website = "Website\nforum";
		mResources.server = "Server";
		mResources.planet = "Planet";
		mResources.MENUME = new string[]
		{
			"Inventory",
			"Skill",
			"Potential",
			"Info",
			"Equipment"
		};
		mResources.MENUNEWCHAR = new string[]
		{
			string.Empty,
			"People: ",
			"Hair: "
		};
		mResources.MENUGENDER = new string[]
		{
			"Earth",
			"Namekian",
			"Saiyan"
		};
		bool flag = mSystem.clientType == 7;
		if (flag)
		{
			mResources.MENUGENDER = new string[]
			{
				"Earth dragon",
				"Green dragon",
				"Red dragon"
			};
		}
		mResources.CHAR_ORDER = new string[]
		{
			"Challenge",
			"Practice",
			"PK",
			"Add friend",
			"Invite clan",
			"Recover",
			"Information",
			"Private chat",
			"Invite to clan",
			"Block invite to clan"
		};
		mResources.mainTab1 = new string[][]
		{
			new string[]
			{
				"Quest",
				string.Empty
			},
			new string[]
			{
				"Inven-",
				"tory"
			},
			new string[]
			{
				"Skill",
				string.Empty
			},
			new string[]
			{
				"Func-",
				"tion"
			}
		};
		mResources.mainTab2 = new string[][]
		{
			new string[]
			{
				"Quest",
				string.Empty
			},
			new string[]
			{
				"Inven-",
				"tory"
			},
			new string[]
			{
				"Skill",
				string.Empty
			},
			new string[]
			{
				"Clan",
				string.Empty
			},
			new string[]
			{
				"Func-",
				"tion"
			}
		};
		mResources.petMainTab = new string[][]
		{
			new string[]
			{
				"Dis-",
				"ciple"
			},
			new string[]
			{
				"Status",
				string.Empty
			},
			new string[]
			{
				"Inven-",
				"tory"
			}
		};
		mResources.petMainTab2 = new string[][]
		{
			new string[]
			{
				"Dis-",
				"ciple"
			},
			new string[]
			{
				"Status",
				string.Empty
			}
		};
		mResources.key_skill_qwerty = new string[]
		{
			"Add\nkey 1",
			"Add\nkey 2",
			"Add\nkey 3",
			"Add\nkey 4",
			"Add\nkey 5",
			"Add\nkey 6",
			"Add\nkey 7",
			"Add\nkey 8",
			"Add\nkey 9",
			"Add\nkey 0"
		};
		mResources.key_skill = new string[]
		{
			"Add\nkey 7",
			"Add\nkey 8",
			"Add\nkey 9",
			"Add\nkey 10",
			"Add\nkey 11",
			string.Empty,
			string.Empty,
			string.Empty,
			string.Empty,
			string.Empty
		};
		mResources.SKILL_FAIL = "Your current attack skill didn't add points";
		mResources.HP_EMPTY = "Out of Senzu Bean. Come back and harvest more";
		mResources.ZONE_HERE = "You are already in this zone";
		mResources.DES_TASK = new string[]
		{
			"Find ",
			" at ",
			" to receive quest.",
			"You now complete all quests of this version, please wait for upcoming version."
		};
		mResources.DIES = new string[]
		{
			"Exhausted",
			"Wait",
			"Return\nhome",
			"Revive\nnow\n(1 gem)"
		};
		mResources.SYNTHESIS = new string[]
		{
			"Map",
			"Quest",
			"Clan"
		};
		mResources.tips = new string[]
		{
			"Senzu Bean is used for recovering HP and KI immediately",
			"You can only keep 10 Senzu Beans belong with you. If you want to have more, ask from your clan's friend",
			"All skills can be learnt free at Kame-Sennin, when you have enough potential points",
			"You can not fly or use skill if out of KI",
			"Attack monsters with your clan's friend will bring more potential points than training alone",
			"Training with your friends at appropriate zone will brought more potential points than attack monsters",
			"When upgraded, Senzu Bean will recover more HP and KI",
			"Login daily to get free Gem",
			"Chicken drumsticks will recover 100% HP and KI. Tomato recover 100% KI. Carrot recover 100% HP",
			"Senzu Bean tree will ripe after a period, even though you are offline",
			"If you don't login in 3 days, you power will decrease because of your laziness",
			"Your strength will decrease when attack monster, but it will increase when you stop",
			"Out of Gem? Go find NPC Bora"
		};
		mResources.TASK_INPUT_CLASS = "After join class, you can receive quest from Head Master";
		mResources.SERI_NUM = "Serial number";
		mResources.CARD_CODE = "Card's code";
		mResources.pay_card = "Pay Vina ,Mobi, Viettel, VTC";
		mResources.pay_card2 = "Pay card";
		mResources.serial_blank = "Please enter serial number";
		mResources.card_code_blank = "Please enter card's code";
		mResources.billion = "bil";
		mResources.million = "mil";
		mResources.MENU = "Menu";
		mResources.CLOSE = "Close";
		mResources.ON = "On";
		mResources.OFF = "Off";
		mResources.ENABLE = "Enable";
		mResources.DELETE = "Clear";
		mResources.VIEW = "View";
		mResources.CONTINUE = "Continue";
		mResources.NEXTSTEP = "Next";
		mResources.USE = "Use";
		mResources.SORT = "Sort";
		mResources.YES = "Yes";
		mResources.NO = "No";
		mResources.EXIT = "Exit";
		mResources.CHAT = "Chat";
		mResources.OK = "OK";
		mResources.retry = "Retry";
		mResources.uncheck = "Uncheck";
		mResources.remember = "Remember";
		mResources.ACCEPT = "Accept";
		mResources.CANCEL = "Cancel";
		mResources.SELECT = "Select";
		mResources.enter = "Enter";
		mResources.open_link = "Open link";
		mResources.DOYOUWANTEXIT = "Do you want to quit?";
		mResources.NEWCHAR = "New character";
		mResources.BACK = "Back";
		mResources.LOCKED = "Locked";
		mResources.KILL = "Kill";
		mResources.KILLBOSS = "Kill boss";
		mResources.NOLOCK = "No lock";
		mResources.XU = "gold";
		mResources.LUONG = "gem";
		mResources.RUBY = "ruby";
		mResources.PK_NOW = "You PK point is ";
		mResources.CUU_SAT = " attacks you";
		mResources.NOT_ENOUGH_MP = "Not enough KI to use";
		mResources.you_receive = "You have received";
		mResources.MONTH = "month";
		mResources.WEEK = "week";
		mResources.DAY = "day";
		mResources.HOUR = "hour";
		mResources.SECOND = "second";
		mResources.MINUTE = "minute";
		mResources.LEARN_SKILL = "You have learnt ";
		mResources.friend = "Friend";
		mResources.enemy = "Enemy";
		mResources.no_friend = "No friend";
		mResources.chat_world = "World chat";
		mResources.change_flag = "Change Flag";
		mResources.option = "Option";
		mResources.high = "High";
		mResources.medium = "Medium";
		mResources.low = "Low";
		mResources.increase_vga = "Increase resolution (strong devices)";
		mResources.decrease_vga = "Decrease resolution (weak devices)";
		mResources.serverchat_off = "Server notice";
		mResources.serverchat_on = "Server notice";
		mResources.aura_on = "Special aura";
		mResources.aura_off = "Special aura";
		mResources.aura_on_2 = "Power aura";
		mResources.aura_off_2 = "Power aura";
		mResources.hat_on = "Show accessories";
		mResources.hat_off = "Hide accessories";
		mResources.x1Screen = "Small screen";
		mResources.x2Screen = "Big screen";
		mResources.changeSizeScreen = "Do you want to exit game to change screen size?";
		mResources.chest = "Chest";
		mResources.chestt = new string[]
		{
			"Chest",
			string.Empty
		};
		mResources.inventory = new string[]
		{
			"Inven-",
			"tory"
		};
		mResources.combine = new string[]
		{
			"Combine",
			string.Empty
		};
		mResources.mapp = new string[]
		{
			"Map",
			string.Empty
		};
		mResources.item_give = new string[]
		{
			"Give",
			"item"
		};
		mResources.item_receive = new string[]
		{
			"Receive",
			"item"
		};
		mResources.zonee = new string[]
		{
			"Zone",
			string.Empty
		};
		mResources.zone = "Zone";
		mResources.map = "Map";
		mResources.item_receive2 = "Receive item";
		mResources.item = "Item";
		mResources.give_upper = "Give";
		mResources.receive_upper = "Receive";
		mResources.receive_all = "Receive All";
		mResources.no_map = "Have no map for this area";
		mResources.go_to_quest = "Go to the flashing point on the map for quest";
		mResources.from_earth = "For Earth only\n";
		mResources.from_namec = "For Namekian Only\n";
		mResources.from_sayda = "For Xaiyan Only\n";
		mResources.expire = "Expire";
		mResources.pow_request = "Power required";
		mResources.your_pow = "Your power";
		mResources.used = "Used";
		mResources.place = "place";
		mResources.FOREVER = "forever";
		mResources.NOUPGRADE = "Not upgraded";
		mResources.NOTUPGRADE = "Can't upgrade";
		mResources.UPGRADE = "Upgrade";
		mResources.UPGRADING = "Upgrading";
		mResources.make_shortcut = "Add\nShort cut";
		mResources.into_place = "Into\nplace ";
		mResources.move_to_chest = "Move to\nchest";
		mResources.move_to_chest2 = "Move to\nchest";
		mResources.press_chat_querty = "Press # to chat";
		mResources.press_chat = "Press c to chat";
		mResources.saying = "Chat";
		mResources.miss = "Miss";
		mResources.donate = "Donate";
		mResources.receive = "Receive";
		mResources.press_twice = "Double Tap";
		mResources.can_harvest = "Can harvest";
		mResources.do_accept_qwerty = "Press Y to accept (";
		mResources.do_accept = "Press # to accept (";
		mResources.plsRestartGame = "Please restart game to update data";
		mResources.is_online = "Online";
		mResources.is_offline = "Offline";
		mResources.make_friend = "Make friend";
		mResources.chat_player = "Chat player";
		mResources.chat_with = "Chat with";
		mResources.clan_capsuledonate = "Capsule Donate";
		mResources.clan_capsuleself = "Personal Capsule";
		mResources.clan_point = "Clan's Capsule";
		mResources.give_pea = "Give bean";
		mResources.receive_pea = "Receive bean";
		mResources.request_pea = "Request bean";
		mResources.time = " time";
		mResources.received = "Received";
		mResources.power = "Power";
		mResources.join_date = "Join date";
		mResources.clan_leader = "Clan Leader";
		mResources.clan_coleader = "Clan coleader";
		mResources.power_point = "Power points";
		mResources.member = "Member";
		mResources.memberr = new string[]
		{
			"Member",
			string.Empty
		};
		mResources.chatClan = new string[]
		{
			"Chat",
			"clan"
		};
		mResources.leaveClan = new string[]
		{
			"Leave",
			"clan"
		};
		mResources.createClan = new string[]
		{
			"Create",
			"clan"
		};
		mResources.findClan = new string[]
		{
			"Find",
			"clan"
		};
		mResources.khau_hieuu = new string[]
		{
			"Slogan"
		};
		mResources.bieu_tuongg = new string[]
		{
			"Icon"
		};
		mResources.request_pea2 = new string[]
		{
			"Request",
			"bean"
		};
		mResources.level = "Level";
		mResources.clan_birthday = "Clan birthday";
		mResources.clan_list = "Clan list";
		mResources.create = "Create";
		mResources.find = "Find";
		mResources.leave = "Leave";
		mResources.not_join_clan = "Not joint clan";
		mResources.clanEmpty = new string[]
		{
			"You are the only one",
			" member of this clan.",
			" Someone may request to join.",
			" You can select other players",
			" to invite them join clan"
		};
		mResources.input_clan_name = "Enter clan's name";
		mResources.clan_name = "Clan's name";
		mResources.chat_clan = "Clan chat";
		mResources.input_clan_name_to_create = "Enter clan's name you want to create";
		mResources.input_clan_slogan = "Enter clan's slogan";
		mResources.do_u_want_join_clan = "Do you want to join clan ";
		mResources.select_clan_icon = "Select clan's icon";
		mResources.request_join_clan = "Request join\nclan";
		mResources.view_clan_member = "View clan's\nmember";
		mResources.create_clan_co_leader = "Order\ncoleader";
		mResources.create_clan_leader = "Order\nleader";
		mResources.disable_clan_mastership = "Dismiss";
		mResources.kick_clan_mem = "Kick member";
		mResources.clan_name_blank = "Please enter clan's name";
		mResources.clan_slogan_blank = "Please enter clan's slogan";
		mResources.cannot_find_clan = "Can not find clan";
		mResources.ago = "ago";
		mResources.findingClan = "Finding clan";
		mResources.trade = "Trade";
		mResources.not_lock_trade = " didn't lock transaction";
		mResources.not_lock_trade_upper = "Transaction is not locked";
		mResources.locked_trade = " locked transaction";
		mResources.locked_trade_upper = "Transaction is locked";
		mResources.lock_trade = "Lock transaction";
		mResources.wait_opp_lock_trade = "Wait opponent to lock transaction";
		mResources.press_done = "Press 'Done'";
		mResources.THROW = "Throw";
		mResources.SPLIT = "Split";
		mResources.done = "Done";
		mResources.opponent = "Opponent";
		mResources.you = "You";
		mResources.mlock = "Lock";
		mResources.money_trade = "Transaction amount";
		mResources.GETOUT = "Move to Equipment";
		mResources.MOVEOUT = "Remove";
		mResources.MOVEFORPET = "User for\ndisciple";
		mResources.GETOUTMONEY = "Withdrawn gold";
		mResources.GETINMONEY = "Deposit gold";
		mResources.SENDMONEY = "Transfer gold";
		mResources.GETIN = "Deposit";
		mResources.SALE = "Sale";
		mResources.SALES = "Sale many";
		mResources.SALEALL = "Sell all";
		mResources.BUY = "Buy";
		mResources.BUYS = "Buy many";
		mResources.input_money_to_trade = "Enter money to trade";
		mResources.input_money = "Enter money";
		mResources.input_money_wrong = "Enter wrong amount, please try again";
		mResources.not_enough_money = "Not enough money, please try again";
		mResources.input_quantity_to_trade = "Enter quantity you want to trade";
		mResources.input_quantity = "Enter quantity";
		mResources.input_quantity_wrong = "Enter wrong quantity, please try again";
		mResources.already_has_item = "You already have this item";
		mResources.unlock_item_to_trade = "Please unlock before trade this item";
		mResources.root = "Base";
		mResources.need = "need";
		mResources.need_upper = "Need";
		mResources.free = "Free";
		mResources.free1 = "Free";
		mResources.free2 = string.Empty;
		mResources.select_item = "Select item";
		mResources.random = "Random";
		mResources.say_hello = "Hello!";
		mResources.say_wat_do_u_want_to_buy = "What do you want to buy?";
		mResources.say_wat_do_u_want_to_buy2 = "What do you want to learn?";
		mResources.do_u_sure_to_trade = "Are you sure you want to trade with those items?";
		mResources.learn_with = "Learn with";
		mResources.buy_with = "Buy with";
		mResources.can_not_do_when_die = "You can not perform this action when dying";
		mResources.use_for_combine = "Use\nfor\ncombine";
		mResources.use_for_trade = "Use\nfor\ntrade";
		mResources.not_enough_luong_world_channel = "You don't have enough gem to chat on world channel";
		mResources.world_channel_5_luong = "Chat on world channel (5 gems)";
		mResources.want_to_trade = " want to trade with you, do you accept?";
		mResources.hasJustUpgrade1 = "You have just upgrade ";
		mResources.hasJustUpgrade2 = " to ";
		mResources.potential_to_learn = "potential to Whis to learn";
		mResources.potential_point = "Potential points";
		mResources.achievement_point = "Achievement point";
		mResources.increase = "increase";
		mResources.increase_upper = "Increase";
		mResources.not_enough_potential_point1 = "You only have ";
		mResources.not_enough_potential_point2 = " potential pts. Let's practice more to earn ";
		mResources.use_potential_point_for1 = "Do you want to use ";
		mResources.use_potential_point_for2 = " potential pts to add ";
		mResources.for_HP = " for HP?";
		mResources.for_KI = " for KI?";
		mResources.for_hit_point = " for attack?";
		mResources.for_armor = " for armor?";
		mResources.for_crit = " for critical?";
		mResources.can_buy_from_Uron1 = "When you have ";
		mResources.can_buy_from_Uron2 = " potential points, you can upgrade for free ";
		mResources.can_buy_from_Uron3 = ". Beside that, you can buy recipes at Uron to learn quickly";
		mResources.HP = "HP";
		mResources.KI = "KI";
		mResources.hit_point = "Attack";
		mResources.armor = "Armor";
		mResources.vitality = "Vitality";
		mResources.critical = "Critical";
		mResources.cap_do = "Level";
		mResources.KI_consume = "KI consume: ";
		mResources.cooldown = "Cooldown";
		mResources.milisecond = "millisecond";
		mResources.max_level_reach = "Maximum level reached";
		mResources.next_level_require = "Next level required ";
		mResources.potential = "potential";
		mResources.not_learn = "Not learnt";
		mResources.learn_require = "Require ";
		mResources.learn = "Learn";
		mResources.to_gain_20hp = "to gain 20 HP";
		mResources.to_gain_20mp = "to gain 20 MP";
		mResources.to_gain_1pow = "to gain 1 power point";
		mResources.hairStyleName = new string[][]
		{
			new string[]
			{
				"Gohan",
				"Krillin",
				"Yamcha"
			},
			new string[]
			{
				"Dende",
				"Piccolo",
				"Kami"
			},
			new string[]
			{
				"Vegeta",
				"Raditz",
				"Kakarot"
			}
		};
		bool flag2 = mSystem.clientType == 7;
		if (flag2)
		{
			mResources.hairStyleName = new string[][]
			{
				new string[]
				{
					"Hango",
					"Linkhi",
					"Chayam"
				},
				new string[]
				{
					"Deden",
					"Cololo",
					"Mika"
				},
				new string[]
				{
					"Tageve",
					"Ditra",
					"Rotkaka"
				}
			};
		}
		mResources.hp_ki_full = "HP and KI are full, no need to use bean";
		mResources.quest_place = "Quest place";
		mResources.no_mission = "You don't have quest";
		mResources.reward_mission = "Complete, reward ";
		mResources.achievement_mission = "Achievement quest";
		mResources.trangbi = "Equipment";
		mResources.wat_do_u_want = "What do you want to do";
		mResources.off = "Select";
		mResources.on = "Select";
		mResources.select_map = "Select your destination";
		mResources.offPlease = "Select to disable world channel";
		mResources.onPlease = "Select to enable world channel";
		mResources.playNew = "New game";
		mResources.playAcc = "Play acc";
		mResources.not_register_yet = "Not register yet";
		mResources.countDown_waitingroom = "CountDown: ";
		mResources.potential_to_learn_tuyetKi = "potential to Whis to learn";
	}
}
using System;

// Token: 0x020000D0 RID: 208
public class T3 : mResources
{
	// Token: 0x06000B4C RID: 2892 RVA: 0x000B1D64 File Offset: 0x000AFF64
	public static void load()
	{
		mResources.confirmChangeServer = "Apakah Anda ingin mengubah server?";
		mResources.chooseDefaultsv = "Default server connect";
		mResources.winLose = "Menang/Kehilangan: ";
		mResources.learnSkill = "Pergi ke Whis (Beerus Planet) untuk mempelajari keterampilan";
		mResources.updSkill = "Saat mencapai kemahiran maksimum, pergi ke Whis (Beerus Planet) untuk meningkatkan keterampilan Anda";
		mResources.proficiency = "Kecakapan";
		mResources.delacc = "Delete account";
		mResources.notiINAPP = "Anda membeli banyak permata hari ini. Mari kita coba lagi besok!";
		mResources.notiRuby = "Saat menjual dengan sukses, Anda akan menerima Ruby non Gem. Apakah Anda ingin melanjutkan menyerahkan?";
		mResources.equip = "Mengalati";
		mResources.unlock = "Membuka kunci";
		mResources.radaCard = "Buku koleksi";
		mResources.not_enough_money_1 = "Uang tidak";
		mResources.functionMaintain1 = "Fungsi dalam maintenance.";
		mResources.napngoc = "Beli lebih gems";
		mResources.nhatvatpham = "Yakin ingin memilih barang ini ?";
		mResources.xinchucmung = "Hadiah Selamat , Andari has memenangkan Angka keberuntungan";
		mResources.tang = "Tingkat";
		mResources.den = "bergeser ke";
		mResources.kquaVongQuay = "Hasil angka keberuntungan";
		mResources.quayso = "Siapa yang harus hipilih";
		mResources.gameInfo = "Pemberitahuan";
		mResources.useGem = "Auto terlahir kembali";
		mResources.autoFunction = "Auto fungsi";
		mResources.sure_fusion = "Apakah kamu yakin fusion selamanya dengan muridmu? Kamu akan kehilangan muridmu dan perlengkapan semua murid, dan semua power muridmu kan ditambahkan ke potensial anda";
		mResources.fusionForever = "Fusion selama-lamanya";
		mResources.fusion = "Fusion dance";
		mResources.nhanngoc = "Receive gem";
		mResources.vuilongnhapduthongtin = "Masukkan informasi lengkap";
		mResources.choitiep = "Terus";
		mResources.gohome = "Pulang";
		mResources.status = "Status";
		mResources.attack = "Serang";
		mResources.defend = "Lindungi";
		mResources.follow = "Ikut";
		mResources.pet = "Murid";
		mResources.maychutathoacmatsong = "Koneksi gagal, harap coba kembali";
		mResources.cauhinhthap = "Grafis kurang";
		mResources.cauhinhcao = "Grafik tinggi";
		mResources.cauhinhthuong = "Grafik medium";
		mResources.taidulieu = "Download";
		mResources.xoadulieu = "Hapus data";
		mResources.deletaDataNote = "Kamu harus manghapus data ketika data game error. Setelah selesai manghapus, kamu harus download data lagi untuk bermain.";
		mResources.huy = "Batal";
		mResources.choigame = "Main game";
		mResources.taidulieudechoi = "Harap download data untuk main";
		mResources.chuacotaikhoan = "Tidak memiliki account";
		mResources.combineSpell = "Abracadabra...";
		mResources.combineSuccess = "Selamat sayangku";
		mResources.combineFail = "Semoga beruntung lain kali sayangku";
		mResources.fasterQuestion = "Apakah kamu ingin ke masa depan dengan 1 gem?";
		mResources.faster = "Naikkan kecepatan";
		mResources.remain = "Sisa";
		mResources.turnOnAnalog = "Nyalakan analog";
		mResources.turnOffAnalog = "Matikan analog";
		mResources.analog = "Analog";
		mResources.inventory_Pass = "Persediaan Sandi";
		mResources.input_Inventory_Pass = "Masukkan password keamanan";
		mResources.input_Inventory_Pass_wrong = "Password keamanan harus berupa 6 angka";
		mResources.regNote = "Harap masukkan nomor HP atau email, kemudian masukkan password untuk membuat account baru";
		mResources.note = "Kamu akan kehilangan account kamu selamanya jika kamu berganti ke account yang lain. Apakah kamu setuju?";
		mResources.REGISTOPROTECT = "Daftar untuk melindungi account";
		mResources.finishBomong = "Kamu harus menyelesaikan misi mencari Dragon Ball bintang 6 untuk recharge";
		mResources.charger = "Forum and Beli lebih gems";
		mResources.notYetSell = "Tidak ada item untuk dibeli";
		mResources.getUp = "Tekan atas untuk mendapatkan lebih banyak";
		mResources.getDown = "Tekan bawah untuk mendapatkan lebih banyak";
		mResources.page = "Halaman";
		mResources.upTop = "Ke atas";
		mResources.num = "Tidak lazim";
		mResources.kiguiXu = "Serahkan dengan\ngold";
		mResources.kiguiLuong = "Beri dengan gem";
		mResources.kiguiXuchat = "Beri dengan gold";
		mResources.kiguiLuongchat = "Serahkan dengan\ngem";
		mResources.huykigui = "Batal\nmenyerahkan";
		mResources.nhantien = "Ambil\nuang";
		mResources.daban = "Terjual";
		mResources.dangban = "Menjual";
		mResources.kigui = "Serahkan";
		mResources.turnOffSound = "Swara";
		mResources.turnOnSound = "Swara";
		mResources.no_enemy = "Tidak ada musuh";
		mResources.selectServer2 = "Pilih server";
		mResources.rank = "Peringkat";
		mResources.active_point = " Active point ";
		mResources.REGISTERING = "Mendaftar";
		mResources.SENDINGMSG = "Mengirim pesan...";
		mResources.SENTMSG = "Pesan terkirim, harap tunggu konfirmasi";
		mResources.NOSENDMSG = "Pesan tidak bisa dikirim. Harap periksa account anda dan mulai kembali game-nya";
		mResources.MOVEFORPET = "User untuk\nmurid";
		mResources.sendMsgSuccess = "Pesan terkirim";
		mResources.cannotSendMsg = "Pesan tidak bisa dikirim";
		mResources.sendGuessMsgSuccess = "Selamat, kamu baru saja berhasil mengirim pesan yang diprediksi.";
		mResources.sendMsgFail = "Pengiriman pesan gagal.";
		mResources.ALERT_PRIVATE_PASS_1 = "Password harus sepanjang 6 karakter (huruf)";
		mResources.ALERT_PRIVATE_PASS_2 = "Masukkan nomor untuk password pribadi saja";
		mResources.INPUT_PRIVATE_PASS = "Masukkan password pribadi";
		mResources.change_account = "Pilih akun";
		mResources.alreadyHadAccount1 = "Apakah kamu telah bermain dan memiliki account pada server Dragon Ball Online sebelumnya?";
		mResources.alreadyHadAccount2 = "sebelumnya?";
		mResources.userBlank = "Email atau nomor HP tidak dimasukkan";
		mResources.passwordBlank = "Password tidak dimasukkan";
		mResources.accTooShort = "Nama account harus lebih panjang dari 5 karakter";
		mResources.phoneInvalid = "Nomor HP tidak berlaku. Harap masukkan dengan format berikut: 0912345678 atau 84918765432";
		mResources.emailInvalid = "Email tidak berlaku. Harap masukkan seperti format berikut: yournamehere@yahoo.com atau yournamehere@gmail.com";
		mResources.registerNewAcc = "Daftarkan account\nbaru\n";
		mResources.selectServer = "Pilih\nserver";
		mResources.forgetPass = "Lupa pass\n";
		mResources.password = "Password";
		mResources.LOGINLABELS = new string[]
		{
			"Tidak memiliki account? Harap",
			"memilih menu daftar"
		};
		mResources.msg = "Pesan";
		mResources.msgg = new string[]
		{
			"Pesan",
			string.Empty
		};
		mResources.no_msg = "Tidak ada pesan";
		mResources.cancelAccountProtection = "Apakah kamu ingin membatalkan fungsi perlindungan account";
		mResources.plsCheckAcc = "Harap periksa informasi account dengan baik untuk me-recover account. Jika lupa password\n";
		mResources.phone = "Nomor HP";
		mResources.email = "Email";
		mResources.acc = "Acc";
		mResources.pwd = "Pwd";
		mResources.goToWebForPassword = "Untuk me-recover password harap kunjungi website http://ngocrongonline.com/matkhau";
		mResources.dragon_ball = "Dragon Ball";
		mResources.character = "Karakter";
		mResources.account = "Account";
		mResources.account_server = "Server";
		mResources.char_name_blank = "Nama karakter tidak dimasukkan";
		mResources.char_name_short = "Nama karakter terlalu pendek";
		mResources.char_name_long = "Nama karakter tidak bisa lebih dari 15 huruf";
		mResources.changeNameChar = "Nama karakter harus diganti";
		mResources.char_name = "Nama karakter";
		mResources.login = "Masuk";
		mResources.login2 = "Masuk";
		mResources.register = "Daftar";
		mResources.den = "bergeser ke";
		mResources.REVENGE = "Balas dendam";
		mResources.WAIT = "Tunggu";
		mResources.PLEASEWAIT = "Harap tunggu";
		mResources.CONNECTING = "Menyambung";
		mResources.LOGGING = "Logging";
		mResources.LOADING = "Loading...";
		mResources.downloading_data = "Downloading ";
		mResources.select_server = "Pilih server";
		mResources.pls_restart_game_error = "Error! Harap ulang kembali game.";
		mResources.pls_restart_game_error2 = "Error!.";
		mResources.lost_connection = "Koneksi terputus";
		mResources.check_3G = "Tidak bisa terhubung, harap periksa jaringan GPRS/3G/Wifi";
		mResources.UPDATE = "Update";
		mResources.change_zone = "Ubah zona";
		mResources.select_zone = "Pilih zona";
		mResources.website = "Website\nforum";
		mResources.server = "Server";
		mResources.planet = "Planet";
		mResources.MENUME = new string[]
		{
			"Inventory",
			"Kriya",
			"Potential",
			"Info",
			"Perlengkapan"
		};
		mResources.MENUNEWCHAR = new string[]
		{
			string.Empty,
			"Planit:",
			"Rambut:"
		};
		mResources.MENUGENDER = new string[]
		{
			"Earth",
			"Namekian",
			"Saiyan"
		};
		mResources.CHAR_ORDER = new string[]
		{
			"Tantangan",
			"Praktek",
			"PK",
			"Tambah teman",
			"Undang clan",
			"Recover",
			"Informasi",
			"Chat pribadi",
			"Undang ke clan",
			"Blok undangan ke clan"
		};
		mResources.mainTab1 = new string[][]
		{
			new string[]
			{
				"Quest",
				string.Empty
			},
			new string[]
			{
				"Inven-",
				"tory"
			},
			new string[]
			{
				"Skill",
				string.Empty
			},
			new string[]
			{
				"Func-",
				"tion"
			}
		};
		mResources.mainTab2 = new string[][]
		{
			new string[]
			{
				"Quest",
				string.Empty
			},
			new string[]
			{
				"Inven-",
				"tory"
			},
			new string[]
			{
				"Skill",
				string.Empty
			},
			new string[]
			{
				"Clan",
				string.Empty
			},
			new string[]
			{
				"Func-",
				"tion"
			}
		};
		mResources.petMainTab = new string[][]
		{
			new string[]
			{
				"Dis-",
				"ciple"
			},
			new string[]
			{
				"Status",
				string.Empty
			},
			new string[]
			{
				"Inven-",
				"tory"
			}
		};
		mResources.petMainTab2 = new string[][]
		{
			new string[]
			{
				"Dis-",
				"ciple"
			},
			new string[]
			{
				"Status",
				string.Empty
			}
		};
		mResources.key_skill_qwerty = new string[]
		{
			"Tambah\n1",
			"Tambah\n2",
			"Tambah\n3",
			"Tambah\n4",
			"Tambah\n5",
			"Tambah\n6",
			"Tambah\n7",
			"Tambah\n8",
			"Tambah\n9",
			"Tambah\n0"
		};
		mResources.key_skill = new string[]
		{
			"Tambah\n7",
			"Tambah\n8",
			"Tambah\n9",
			"Tambah\n10",
			"Tambah\n11",
			string.Empty,
			string.Empty,
			string.Empty,
			string.Empty,
			string.Empty
		};
		mResources.SKILL_FAIL = "Teknik seranganmu tidak menambah point";
		mResources.HP_EMPTY = "Senzu Bean habis. Datang kembali untuk mengambil lagi";
		mResources.ZONE_HERE = "Kamu sudah di daerah ini";
		mResources.DES_TASK = new string[]
		{
			"Fenemukan",
			"di",
			"untuk menerima quest.",
			"Kamu telah menyelesaikan semua quest di versi ini",
			"harap menunggu versi yang akan datang."
		};
		mResources.DIES = new string[]
		{
			"Darah habis",
			"Tunggu",
			"Kembali ke rumah",
			"Revive sekarang\n(1 gem)"
		};
		mResources.SYNTHESIS = new string[]
		{
			"Peta",
			"Penca\n-rian",
			"Clan"
		};
		mResources.tips = new string[]
		{
			"Minta dari teman clanmu",
			"Semua skill bisa dipelajari dengan gratis di Kame-Sennin",
			"Jika kamu mempunya potential points yang cukup",
			"Kamu tidak bisa terbang atau menggunakan skill jika KI habis",
			"Serang monster dengan teman clan akan mendapatkan potential points lebih daripada latihan sendiri",
			"Berlatih bersama teman di zona yang tepat akan memberi potential points lebih daripada menyerang monster",
			"Saat diupgrade",
			"Senzu bean akan mengisi lebih banyak HP dan KI",
			"Log in setiap hari untuk mendapatkan Gem gratis",
			"Paha ayam akan mengisi HP dan KI sebanyak 100%. Tomat mengisi 100% KI. Wortel mengisi 100% HP.",
			"Pohon Senzu Bean akan berbuah secara berkala",
			"meskipun kamu offline",
			"Jika kamu tidak log in dalam 3 hari",
			"powermu akan menurun karena kemalasanmu",
			"Kekuatanmu akan berkurang saat menyerang monster",
			"tapi akan bertambah jika kamu berhenti",
			"Kehabisan Gem? Cari NPC Bora"
		};
		mResources.TASK_INPUT_CLASS = "Setelah bergabung di kelas, kamu akan menerima quest dari Kepala Sekolah";
		mResources.SERI_NUM = "Nomor seri";
		mResources.CARD_CODE = "Kode kartu";
		mResources.pay_card = "Pay Vina, Mobi, Viettel, VTC";
		mResources.pay_card2 = "Kartu bayar";
		mResources.serial_blank = "Harap masukkan nomor seri";
		mResources.card_code_blank = "Harap masukkan kode kartu";
		mResources.billion = "bil";
		mResources.million = "mil";
		mResources.MENU = "Menu";
		mResources.CLOSE = "Tutup";
		mResources.ON = "Pilih";
		mResources.OFF = "Pilih";
		mResources.ENABLE = "Nyalakan";
		mResources.DELETE = "Clear";
		mResources.VIEW = "Lihat";
		mResources.CONTINUE = "Lanjut";
		mResources.NEXTSTEP = "Berikut";
		mResources.USE = "Pakai";
		mResources.SORT = "Sortir";
		mResources.YES = "Ya";
		mResources.NO = "Tidak";
		mResources.EXIT = "Keluar";
		mResources.CHAT = "Chat";
		mResources.OK = "OK";
		mResources.retry = "Coba kembali";
		mResources.uncheck = "Uncheck";
		mResources.remember = "Ingat";
		mResources.ACCEPT = "Terima";
		mResources.CANCEL = "Batal";
		mResources.SELECT = "Pilih";
		mResources.enter = "Enter";
		mResources.open_link = "Buka link";
		mResources.DOYOUWANTEXIT = "Apakah kamu mau berhenti?";
		mResources.NEWCHAR = "Karakter baru";
		mResources.BACK = "Kembali";
		mResources.LOCKED = "Terkunci";
		mResources.KILL = "Bunuh";
		mResources.KILLBOSS = "Bunuh boss";
		mResources.NOLOCK = "Tidak ada kunci";
		mResources.XU = "gold";
		mResources.LUONG = "gem";
		mResources.RUBY = "ruby";
		mResources.PK_NOW = "PK Point kamu adalah";
		mResources.CUU_SAT = "menyerangmu";
		mResources.NOT_ENOUGH_MP = "Tidak cukup KI";
		mResources.you_receive = "Kamu menerima";
		mResources.MONTH = "bulan";
		mResources.WEEK = "minggu";
		mResources.DAY = "hari";
		mResources.HOUR = "jam";
		mResources.SECOND = "detik";
		mResources.MINUTE = "menit";
		mResources.LEARN_SKILL = "Kamu telah mempelajari";
		mResources.friend = "Teman";
		mResources.enemy = "Musuh";
		mResources.no_friend = "Tidak ada teman";
		mResources.chat_world = "World chat";
		mResources.change_flag = "Ganti bendera";
		mResources.option = "Pilihan";
		mResources.high = "Tinggi";
		mResources.medium = "Sedang";
		mResources.low = "Rendah";
		mResources.increase_vga = "Naikkan resolusi (device kuat)";
		mResources.decrease_vga = "Turunkan resolusi (device lemah)";
		mResources.serverchat_off = "Kabar Server";
		mResources.serverchat_on = "Kabar Server";
		mResources.aura_on = "Aura khusus";
		mResources.aura_off = "Aura khusus";
		mResources.aura_on_2 = "Aura daya";
		mResources.aura_off_2 = "Aura daya";
		mResources.hat_on = "Tampilkan aksesoris";
		mResources.hat_off = "Sembunyikan aksesoris";
		mResources.x1Screen = "Layar kecil";
		mResources.x2Screen = "Layar besar";
		mResources.changeSizeScreen = "Apakah kamu ingin keluar untuk merubah ukuran layar?";
		mResources.chest = "Peti";
		mResources.chestt = new string[]
		{
			"Peti",
			string.Empty
		};
		mResources.inventory = new string[]
		{
			"Inven-",
			"taris"
		};
		mResources.combine = new string[]
		{
			"mengga-",
			"bungkan"
		};
		mResources.mapp = new string[]
		{
			"Peta",
			string.Empty
		};
		mResources.item_give = new string[]
		{
			"membe-",
			"rikan"
		};
		mResources.item_receive = new string[]
		{
			"mene-",
			"rima"
		};
		mResources.zonee = new string[]
		{
			"Zona",
			string.Empty
		};
		mResources.zone = "Zona";
		mResources.map = "Peta";
		mResources.item_receive2 = "Terima item";
		mResources.item = "Item";
		mResources.give_upper = "Beri";
		mResources.receive_upper = "Terima";
		mResources.receive_all = "Terima semua";
		mResources.no_map = "Tidak ada peta untuk area ini";
		mResources.go_to_quest = "Pergi ke titik berkedip di peta untuk pencarian";
		mResources.from_earth = "Hanya untuk Bumi\n";
		mResources.from_namec = "Hanya untuk Namekian\n";
		mResources.from_sayda = "Hanya untuk Xaiyan\n";
		mResources.expire = "Expire";
		mResources.pow_request = "Power dibutuhkan";
		mResources.your_pow = "Power kamu";
		mResources.used = "Dipakai";
		mResources.place = "tempat";
		mResources.FOREVER = "selamanya";
		mResources.NOUPGRADE = "Tidak diupgrade";
		mResources.NOTUPGRADE = "Tidak bisa upgrade";
		mResources.UPGRADE = "Upgrade";
		mResources.UPGRADING = "Sedang mengupgrade";
		mResources.make_shortcut = "Tambahkan\nShort cut";
		mResources.into_place = "di\ntempat";
		mResources.move_to_chest = "Pindahkan ke peti";
		mResources.move_to_chest2 = "Pindahkan ke peti";
		mResources.press_chat_querty = "Tekan # untuk chat";
		mResources.press_chat = "Tekan c untuk chat";
		mResources.saying = "Chat";
		mResources.miss = "Meleset";
		mResources.donate = "Sumbang";
		mResources.receive = "Terima";
		mResources.press_twice = "Tekan dua kali";
		mResources.can_harvest = "Bisa memanen";
		mResources.do_accept_qwerty = "Tekan Y untuk terima (";
		mResources.do_accept = "Tekan # untuk terima (";
		mResources.plsRestartGame = "Harap ulangi game";
		mResources.is_online = "Online";
		mResources.is_offline = "Offline";
		mResources.make_friend = "Berteman";
		mResources.chat_player = "Chat dengan pemain";
		mResources.chat_with = "Chat dengan";
		mResources.clan_capsuledonate = "Capsule Donate";
		mResources.clan_capsuleself = "Personal Capsule";
		mResources.clan_point = "Clan's Capsule";
		mResources.give_pea = "Berikan bean";
		mResources.receive_pea = "Terima bean";
		mResources.request_pea = "Minta bean";
		mResources.time = "waktu";
		mResources.received = "Diterima";
		mResources.power = "Power";
		mResources.join_date = "Tanggal bergabung";
		mResources.clan_leader = "Pemimpin Clan";
		mResources.clan_coleader = "Wakil pemimpin clan";
		mResources.power_point = "Power points";
		mResources.member = "Anggota";
		mResources.memberr = new string[]
		{
			"Anggota",
			string.Empty
		};
		mResources.chatClan = new string[]
		{
			"Chat",
			"clan"
		};
		mResources.leaveClan = new string[]
		{
			"Menin-",
			"ggalkan"
		};
		mResources.createClan = new string[]
		{
			"Memb-",
			"uat"
		};
		mResources.findClan = new string[]
		{
			"Mene-",
			"mukan"
		};
		mResources.khau_hieuu = new string[]
		{
			"Slogan"
		};
		mResources.bieu_tuongg = new string[]
		{
			"Icon"
		};
		mResources.request_pea2 = new string[]
		{
			"Permintaan",
			"kacang"
		};
		mResources.level = "Level";
		mResources.clan_birthday = "Ulang tahun clan";
		mResources.clan_list = "Daftar clan";
		mResources.create = "Buat";
		mResources.find = "Cari";
		mResources.leave = "Pergi";
		mResources.not_join_clan = "Tidak bergabung dengan clan";
		mResources.clanEmpty = new string[]
		{
			"Kamulah satu-satunya",
			"anggota klan ini",
			"Seseorang bisa meminta untuk bergabung",
			"Kamu bisa memilih pemain lain",
			"untuk mengundang mereka ke clan"
		};
		mResources.input_clan_name = "Masukkan nama clan";
		mResources.clan_name = "Nama clan";
		mResources.chat_clan = "Chat clan";
		mResources.input_clan_name_to_create = "Masukkan nama clan yang ingin kamu buat";
		mResources.input_clan_slogan = "Masukkan slogan clan";
		mResources.do_u_want_join_clan = "Apakah kamu ingin bergabung dengan clan?";
		mResources.select_clan_icon = "Pilih icon clan";
		mResources.request_join_clan = "Permintaan bergabung ke clan";
		mResources.view_clan_member = "Lihat anggota clan";
		mResources.create_clan_co_leader = "Memerintah wakil pemimpin\n";
		mResources.create_clan_leader = "Memerintah pemimpin\n";
		mResources.disable_clan_mastership = "Bubarkan";
		mResources.kick_clan_mem = "Keluarkan anggota";
		mResources.clan_name_blank = "Harap masukkan nama clan";
		mResources.clan_slogan_blank = "Harap masukkan slogan clan";
		mResources.cannot_find_clan = "Tidak bisa menemukan clan";
		mResources.ago = "lalu";
		mResources.findingClan = "Mencari clan";
		mResources.trade = "Bertukar";
		mResources.not_lock_trade = "Tidak mengunci transaksi";
		mResources.not_lock_trade_upper = "Transaksi tidak terkunci";
		mResources.locked_trade = "Transaksi terkunci";
		mResources.locked_trade_upper = "Transaksi dikunci";
		mResources.lock_trade = "Kunci transaksi";
		mResources.wait_opp_lock_trade = "Menunggu lawan mengunci transaksi";
		mResources.press_done = "Tekan 'Selesai'";
		mResources.THROW = "Lempar";
		mResources.SPLIT = "Bagi";
		mResources.done = "Selesai";
		mResources.opponent = "Lawan";
		mResources.you = "Kamu";
		mResources.mlock = "Kunci";
		mResources.money_trade = "Jumlah Transaksi";
		mResources.GETOUT = "Keluar";
		mResources.MOVEOUT = "Tinggalkan";
		mResources.GETOUTMONEY = "Tarik gold";
		mResources.GETINMONEY = "Deposit gold";
		mResources.SENDMONEY = "Transfer gold";
		mResources.GETIN = "Deposit";
		mResources.SALE = "Jual";
		mResources.SALES = "Jual banyak";
		mResources.SALEALL = "Jual semua";
		mResources.BUY = "Beli";
		mResources.BUYS = "Beli banyak";
		mResources.input_money_to_trade = "Masukkan uang untuk bertransaksi";
		mResources.input_money = "Masukkan uang";
		mResources.input_money_wrong = "Jumlah salah, harap ulang kembali";
		mResources.not_enough_money = "Uang tidak cukup, harap ulang kembali";
		mResources.input_quantity_to_trade = "Masukkan jumlah yang hendak ditukarkan";
		mResources.input_quantity = "Masukkan jumlah";
		mResources.input_quantity_wrong = "Jumlah salah, harap ulang kembali";
		mResources.already_has_item = "Kamu telah memiliki item ini";
		mResources.unlock_item_to_trade = "Harap diunlock sebelum bertukar item ini";
		mResources.root = "Dasar";
		mResources.need = "butuh";
		mResources.need_upper = "Butuh";
		mResources.free = "Bebas";
		mResources.free1 = "Gratis";
		mResources.free2 = string.Empty;
		mResources.select_item = "Pilih item";
		mResources.random = "Acak";
		mResources.say_hello = "Halo!";
		mResources.say_wat_do_u_want_to_buy = "Apa yang ingin kamu beli?";
		mResources.say_wat_do_u_want_to_buy2 = "Apa yang ingin kamu pelajari?";
		mResources.do_u_sure_to_trade = "Apakah kamu yakin ingin bertukar dengan item ini?";
		mResources.learn_with = "Belajar dengan";
		mResources.buy_with = "Beli dengan";
		mResources.can_not_do_when_die = "Kamu tidak bisa melakukan ini saat mati";
		mResources.use_for_combine = "Gunakan untuk kombinasi";
		mResources.use_for_trade = "Gunakan untuk bertukar";
		mResources.not_enough_luong_world_channel = "Tidak cukup gem untuk chat di world channel";
		mResources.world_channel_5_luong = "Chat di world channel (5 gem)";
		mResources.want_to_trade = "ingin bertukar dengan kamu, terima?";
		mResources.hasJustUpgrade1 = "Kamu baru saja mengupgrade";
		mResources.hasJustUpgrade2 = "ke";
		mResources.potential_to_learn = "potential untuk Master untuk belajar";
		mResources.potential_to_learn_tuyetKi = "potential untuk Whis untuk belajar";
		mResources.potential_point = "Potential points";
		mResources.achievement_point = " Achievement point ";
		mResources.increase = "bertambah";
		mResources.increase_upper = "Bertambah";
		mResources.not_enough_potential_point1 = "Kamu hanya memiliki";
		mResources.not_enough_potential_point2 = "potential points. Mari latihan lagi untuk mendapatkannya.";
		mResources.use_potential_point_for1 = "Apakah kamu ingin menggunakan";
		mResources.use_potential_point_for2 = "potential pts untuk ditambahkan";
		mResources.for_HP = "untuk HP?";
		mResources.for_KI = "untuk KI?";
		mResources.for_hit_point = "untuk serangan?";
		mResources.for_armor = "untuk armor?";
		mResources.for_crit = "untuk critical?";
		mResources.can_buy_from_Uron1 = "Saat kamu punya";
		mResources.can_buy_from_Uron2 = "potential points, kamu bisa meng-upgrade dengan gratis";
		mResources.can_buy_from_Uron3 = "Disamping itu kamu bisa membeli resep di Uron untuk belajar dengan cepat";
		mResources.HP = "HP";
		mResources.KI = "KI";
		mResources.hit_point = "Serang";
		mResources.armor = "Armor";
		mResources.vitality = "Vitality";
		mResources.critical = "Critical";
		mResources.cap_do = "Level";
		mResources.KI_consume = "Pemakaian KI:";
		mResources.cooldown = "Tenang";
		mResources.milisecond = "milidetik";
		mResources.max_level_reach = "Level maksimum tercapai";
		mResources.next_level_require = "Level berikut dibutuhkan";
		mResources.potential = "potential";
		mResources.not_learn = "Belum dipelajari";
		mResources.learn_require = "Butuh";
		mResources.learn = "Belajar";
		mResources.to_gain_20hp = "untuk mendapatkan 20 HP";
		mResources.to_gain_20mp = "untuk mendapatkan 20 MP";
		mResources.to_gain_1pow = "untuk mendapatkan 1 power point";
		mResources.hairStyleName = new string[][]
		{
			new string[]
			{
				"Gohan",
				"Krillin",
				"Yamcha"
			},
			new string[]
			{
				"Dende",
				"Piccolo",
				"Kami"
			},
			new string[]
			{
				"Vegeta",
				"Raditz",
				"Kakarot"
			}
		};
		mResources.hp_ki_full = "HP dan KI penuh, tidak perlu menggunakan bean";
		mResources.quest_place = "Tempat quest";
		mResources.no_mission = "Kamu tidak memiliki quest.";
		mResources.reward_mission = "Hadiah karena selesai";
		mResources.achievement_mission = "Quest achievement";
		mResources.trangbi = "Perlengkapan";
		mResources.wat_do_u_want = "Apa yang ingin kamu lakukan";
		mResources.off = "Pilih";
		mResources.on = "Pilih";
		mResources.select_map = "Pilih tujuanmu";
		mResources.offPlease = "OK untuk menonaktifkan Dunia Saluran";
		mResources.onPlease = "OK untuk menyalakan world channel";
		mResources.playNew = "Game baru";
		mResources.playAcc = "Account bermain";
		mResources.not_register_yet = "Tidak mendaftar belum";
		mResources.countDown_waitingroom = "CountDown: ";
	}
}
using System;

// Token: 0x020000D1 RID: 209
public class TabClanIcon : IActionListener
{
	// Token: 0x06000B4E RID: 2894 RVA: 0x000B3478 File Offset: 0x000B1678
	public TabClanIcon()
	{
		this.left = new Command(mResources.SELECT, this, 1, null);
		this.right = new Command(mResources.CLOSE, this, 2, null);
	}

	// Token: 0x06000B4F RID: 2895 RVA: 0x000B34D0 File Offset: 0x000B16D0
	public void init()
	{
		bool flag = this.isGetName;
		if (flag)
		{
			this.w = 170;
			this.h = 118;
			this.x = GameCanvas.w / 2 - this.w / 2;
			this.y = GameCanvas.h / 2 - this.h / 2;
		}
		else
		{
			this.w = 170;
			this.h = 170;
			this.x = GameCanvas.w / 2 - this.w / 2;
			this.y = GameCanvas.h / 2 - this.h / 2;
			bool flag2 = GameCanvas.h < 240;
			if (flag2)
			{
				this.y -= 10;
			}
		}
		this.cmx = this.x;
		this.cmtoX = 0;
		bool flag3 = !this.isRequest;
		if (flag3)
		{
			this.nItem = ClanImage.vClanImage.size();
		}
		else
		{
			this.nItem = this.vItems.size();
		}
		bool isTouch = GameCanvas.isTouch;
		if (isTouch)
		{
			this.left.x = this.x;
			this.left.y = this.y + this.h + 5;
			this.right.x = this.x + this.w - 68;
			this.right.y = this.y + this.h + 5;
		}
		TabClanIcon.scrMain = new Scroll();
		TabClanIcon.scrMain.setStyle(this.nItem, this.WIDTH, this.x, this.y + this.disStart, this.w, this.h - this.disStart, true, 1);
	}

	// Token: 0x06000B50 RID: 2896 RVA: 0x000B368C File Offset: 0x000B188C
	public void show(bool isGetName)
	{
		bool flag = global::Char.myCharz().clan != null;
		if (flag)
		{
			this.isUpdate = true;
		}
		this.isShow = true;
		this.isGetName = isGetName;
		this.init();
	}

	// Token: 0x06000B51 RID: 2897 RVA: 0x000B36C9 File Offset: 0x000B18C9
	public void showRequest(int msgID)
	{
		this.isShow = true;
		this.isRequest = true;
		this.msgID = msgID;
		this.init();
	}

	// Token: 0x06000B52 RID: 2898 RVA: 0x000B36E8 File Offset: 0x000B18E8
	public void hide()
	{
		this.cmtoX = this.x + this.w;
		SmallImage.clearHastable();
	}

	// Token: 0x06000B53 RID: 2899 RVA: 0x000B3704 File Offset: 0x000B1904
	public void paintPeans(mGraphics g)
	{
	}

	// Token: 0x06000B54 RID: 2900 RVA: 0x000B3708 File Offset: 0x000B1908
	public void paintIcon(mGraphics g)
	{
		g.translate(-this.cmx, 0);
		PopUp.paintPopUp(g, this.x, this.y - 17, this.w, this.h + 17, -1, true);
		mFont.tahoma_7b_dark.drawString(g, mResources.select_clan_icon, this.x + this.w / 2, this.y - 7, 2);
		bool flag = this.lastSelect >= 0 && this.lastSelect <= ClanImage.vClanImage.size() - 1;
		if (flag)
		{
			ClanImage clanImage = (ClanImage)ClanImage.vClanImage.elementAt(this.lastSelect);
			bool flag2 = clanImage.idImage != null;
			if (flag2)
			{
				global::Char.myCharz().paintBag(g, clanImage.idImage, GameCanvas.w / 2, this.y + 45, 1, false);
			}
		}
		global::Char.myCharz().paintCharBody(g, GameCanvas.w / 2, this.y + 45, 1, global::Char.myCharz().cf, false);
		g.setClip(this.x, this.y + this.disStart, this.w, this.h - this.disStart - 10);
		bool flag3 = TabClanIcon.scrMain != null;
		if (flag3)
		{
			g.translate(0, -TabClanIcon.scrMain.cmy);
		}
		for (int i = 0; i < this.nItem; i++)
		{
			int num = this.x + 10;
			int num2 = this.y + i * this.WIDTH + this.disStart;
			bool flag4 = num2 + this.WIDTH - ((TabClanIcon.scrMain != null) ? TabClanIcon.scrMain.cmy : 0) >= this.y + this.disStart && num2 - ((TabClanIcon.scrMain != null) ? TabClanIcon.scrMain.cmy : 0) <= this.y + this.disStart + this.h;
			if (flag4)
			{
				ClanImage clanImage2 = (ClanImage)ClanImage.vClanImage.elementAt(i);
				mFont mFont = mFont.tahoma_7_grey;
				bool flag5 = i == this.lastSelect;
				if (flag5)
				{
					mFont = mFont.tahoma_7_blue;
				}
				bool flag6 = clanImage2.name != null;
				if (flag6)
				{
					mFont.drawString(g, clanImage2.name, num + 20, num2, 0);
				}
				bool flag7 = clanImage2.xu > 0;
				if (flag7)
				{
					mFont.drawString(g, clanImage2.xu.ToString() + " " + mResources.XU, num + this.w - 20, num2, mFont.RIGHT);
				}
				else
				{
					bool flag8 = clanImage2.luong > 0;
					if (flag8)
					{
						mFont.drawString(g, clanImage2.luong.ToString() + " " + mResources.LUONG, num + this.w - 20, num2, mFont.RIGHT);
					}
				}
				bool flag9 = clanImage2.idImage != null;
				if (flag9)
				{
					SmallImage.drawSmallImage(g, (int)clanImage2.idImage[0], num, num2, 0, 0);
				}
			}
		}
		g.translate(0, -g.getTranslateY());
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
		GameCanvas.paintz.paintCmdBar(g, this.left, this.center, this.right);
	}

	// Token: 0x06000B55 RID: 2901 RVA: 0x000B3A6C File Offset: 0x000B1C6C
	public void paint(mGraphics g)
	{
		bool flag = !this.isRequest;
		if (flag)
		{
			this.paintIcon(g);
		}
		else
		{
			this.paintPeans(g);
		}
	}

	// Token: 0x06000B56 RID: 2902 RVA: 0x000B3AA0 File Offset: 0x000B1CA0
	public void update()
	{
		bool flag = TabClanIcon.scrMain != null;
		if (flag)
		{
			TabClanIcon.scrMain.updatecm();
		}
		bool flag2 = this.cmx != this.cmtoX;
		if (flag2)
		{
			this.cmvx = this.cmtoX - this.cmx << 2;
			this.cmdx += this.cmvx;
			this.cmx += this.cmdx >> 3;
			this.cmdx &= 15;
		}
		bool flag3 = global::Math.abs(this.cmtoX - this.cmx) < 10;
		if (flag3)
		{
			this.cmx = this.cmtoX;
		}
		bool flag4 = this.cmx >= this.x + this.w - 10 && this.cmtoX >= this.x + this.w - 10;
		if (flag4)
		{
			this.isShow = false;
		}
	}

	// Token: 0x06000B57 RID: 2903 RVA: 0x000B3B98 File Offset: 0x000B1D98
	public void updateKey()
	{
		bool flag = this.left != null && (GameCanvas.keyPressed[12] || mScreen.getCmdPointerLast(this.left));
		if (flag)
		{
			this.left.performAction();
		}
		bool flag2 = this.right != null && (GameCanvas.keyPressed[13] || mScreen.getCmdPointerLast(this.right));
		if (flag2)
		{
			this.right.performAction();
		}
		bool flag3 = this.center != null && (GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25] || mScreen.getCmdPointerLast(this.center));
		if (flag3)
		{
			this.center.performAction();
		}
		bool flag4 = !this.isGetName;
		if (flag4)
		{
			bool flag5 = TabClanIcon.scrMain == null;
			if (flag5)
			{
				return;
			}
			bool isTouch = GameCanvas.isTouch;
			if (isTouch)
			{
				TabClanIcon.scrMain.updateKey();
				this.select = TabClanIcon.scrMain.selectedItem;
			}
			bool flag6 = GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21];
			if (flag6)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 2 : 21] = false;
				this.select--;
				bool flag7 = this.select < 0;
				if (flag7)
				{
					this.select = this.nItem - 1;
				}
				TabClanIcon.scrMain.moveTo(this.select * TabClanIcon.scrMain.ITEM_SIZE);
			}
			bool flag8 = GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22];
			if (flag8)
			{
				GameCanvas.keyPressed[(!Main.isPC) ? 8 : 22] = false;
				this.select++;
				bool flag9 = this.select > this.nItem - 1;
				if (flag9)
				{
					this.select = 0;
				}
				TabClanIcon.scrMain.moveTo(this.select * TabClanIcon.scrMain.ITEM_SIZE);
			}
			bool flag10 = this.select != -1;
			if (flag10)
			{
				this.lastSelect = this.select;
			}
		}
		GameCanvas.clearKeyHold();
		GameCanvas.clearKeyPressed();
	}

	// Token: 0x06000B58 RID: 2904 RVA: 0x000B3DB8 File Offset: 0x000B1FB8
	public void perform(int idAction, object p)
	{
		bool flag = idAction == 2;
		if (flag)
		{
			this.hide();
		}
		bool flag2 = idAction != 1 || this.isGetName;
		if (!flag2)
		{
			bool flag3 = !this.isRequest;
			if (flag3)
			{
				bool flag4 = this.lastSelect >= 0;
				if (flag4)
				{
					this.hide();
					bool flag5 = global::Char.myCharz().clan == null;
					if (flag5)
					{
						Service.gI().getClan(2, ((ClanImage)ClanImage.vClanImage.elementAt(this.lastSelect)).ID, this.text);
					}
					else
					{
						Service.gI().getClan(4, ((ClanImage)ClanImage.vClanImage.elementAt(this.lastSelect)).ID, string.Empty);
					}
				}
			}
			else
			{
				bool flag6 = this.lastSelect >= 0;
				if (flag6)
				{
					Item item = (Item)this.vItems.elementAt(this.select);
				}
			}
		}
	}

	// Token: 0x04001387 RID: 4999
	private int x;

	// Token: 0x04001388 RID: 5000
	private int y;

	// Token: 0x04001389 RID: 5001
	private int w;

	// Token: 0x0400138A RID: 5002
	private int h;

	// Token: 0x0400138B RID: 5003
	private Command left;

	// Token: 0x0400138C RID: 5004
	private Command right;

	// Token: 0x0400138D RID: 5005
	private Command center;

	// Token: 0x0400138E RID: 5006
	private int WIDTH = 24;

	// Token: 0x0400138F RID: 5007
	public int nItem;

	// Token: 0x04001390 RID: 5008
	private int disStart = 50;

	// Token: 0x04001391 RID: 5009
	public static Scroll scrMain;

	// Token: 0x04001392 RID: 5010
	public int cmtoX;

	// Token: 0x04001393 RID: 5011
	public int cmx;

	// Token: 0x04001394 RID: 5012
	public int cmvx;

	// Token: 0x04001395 RID: 5013
	public int cmdx;

	// Token: 0x04001396 RID: 5014
	public bool isShow;

	// Token: 0x04001397 RID: 5015
	public bool isGetName;

	// Token: 0x04001398 RID: 5016
	public string text;

	// Token: 0x04001399 RID: 5017
	private bool isRequest;

	// Token: 0x0400139A RID: 5018
	private bool isUpdate;

	// Token: 0x0400139B RID: 5019
	public MyVector vItems = new MyVector();

	// Token: 0x0400139C RID: 5020
	private int msgID;

	// Token: 0x0400139D RID: 5021
	private int select;

	// Token: 0x0400139E RID: 5022
	private int lastSelect;

	// Token: 0x0400139F RID: 5023
	private ScrollResult sr;
}
using System;

// Token: 0x020000D2 RID: 210
public class Task
{
	// Token: 0x06000B59 RID: 2905 RVA: 0x000B3EB8 File Offset: 0x000B20B8
	public Task(short taskId, sbyte index, string name, string detail, string[] subNames, short[] counts, short count, string[] contentInfo)
	{
		this.taskId = taskId;
		this.index = (int)index;
		this.names = mFont.tahoma_7b_green2.splitFontArray(name, Panel.WIDTH_PANEL - 20);
		this.details = mFont.tahoma_7.splitFontArray(detail, Panel.WIDTH_PANEL - 20);
		this.subNames = subNames;
		this.counts = counts;
		this.count = count;
		this.contentInfo = contentInfo;
	}

	// Token: 0x040013A0 RID: 5024
	public int index;

	// Token: 0x040013A1 RID: 5025
	public int max;

	// Token: 0x040013A2 RID: 5026
	public short[] counts;

	// Token: 0x040013A3 RID: 5027
	public short taskId;

	// Token: 0x040013A4 RID: 5028
	public string[] names;

	// Token: 0x040013A5 RID: 5029
	public string[] details;

	// Token: 0x040013A6 RID: 5030
	public string[] subNames;

	// Token: 0x040013A7 RID: 5031
	public string[] contentInfo;

	// Token: 0x040013A8 RID: 5032
	public short count;
}
using System;

// Token: 0x020000D3 RID: 211
public class TaskOrder
{
	// Token: 0x06000B5A RID: 2906 RVA: 0x000B3F2E File Offset: 0x000B212E
	public TaskOrder(sbyte taskId, short count, short maxCount, string name, string description, sbyte killId, sbyte mapId)
	{
		this.count = (int)count;
		this.maxCount = maxCount;
		this.taskId = (int)taskId;
		this.name = name;
		this.description = description;
		this.killId = (int)killId;
		this.mapId = (int)mapId;
	}

	// Token: 0x040013A9 RID: 5033
	public const sbyte TASK_DAY = 0;

	// Token: 0x040013AA RID: 5034
	public const sbyte TASK_BOSS = 1;

	// Token: 0x040013AB RID: 5035
	public int taskId;

	// Token: 0x040013AC RID: 5036
	public int count;

	// Token: 0x040013AD RID: 5037
	public short maxCount;

	// Token: 0x040013AE RID: 5038
	public string name;

	// Token: 0x040013AF RID: 5039
	public string description;

	// Token: 0x040013B0 RID: 5040
	public int killId;

	// Token: 0x040013B1 RID: 5041
	public int mapId;
}
using System;

// Token: 0x020000D4 RID: 212
public class TaskTemplate
{
	// Token: 0x040013B2 RID: 5042
	public short taskId;

	// Token: 0x040013B3 RID: 5043
	public string name;

	// Token: 0x040013B4 RID: 5044
	public string[] subNames;
}
using System;
using AssemblyCSharp.Mod.Xmap;

// Token: 0x020000D5 RID: 213
public class Teleport
{
	// Token: 0x06000B5C RID: 2908 RVA: 0x000B3F78 File Offset: 0x000B2178
	public Teleport(int x, int y, int headId, int dir, int type, bool isMe, int planet)
	{
		this.x = x;
		this.y = 5;
		this.y2 = y;
		this.headId = headId;
		this.type = type;
		this.isMe = isMe;
		this.dir = dir;
		this.planet = planet;
		this.tPrepare = 0;
		int i = 0;
		while (i < 100)
		{
			i++;
			this.y2 += 12;
			bool flag = TileMap.tileTypeAt(x, this.y2, 2);
			if (flag)
			{
				bool flag2 = this.y2 % 24 != 0;
				if (flag2)
				{
					this.y2 -= this.y2 % 24;
				}
				break;
			}
		}
		this.isDown = true;
		this.isUp = false;
		bool flag3 = this.planet > 2;
		if (flag3)
		{
			this.y2 += 4;
			bool flag4 = Teleport.maybay[3] == null;
			if (flag4)
			{
				Teleport.maybay[3] = GameCanvas.loadImage("/mainImage/myTexture2dmaybay4a.png");
			}
			bool flag5 = Teleport.maybay[4] == null;
			if (flag5)
			{
				Teleport.maybay[4] = GameCanvas.loadImage("/mainImage/myTexture2dmaybay4b.png");
			}
			bool flag6 = Teleport.hole == null;
			if (flag6)
			{
				Teleport.hole = GameCanvas.loadImage("/mainImage/hole.png");
			}
		}
		else
		{
			bool flag7 = Teleport.maybay[planet] == null;
			if (flag7)
			{
				Teleport.maybay[planet] = GameCanvas.loadImage("/mainImage/myTexture2dmaybay" + (planet + 1).ToString() + ".png");
			}
		}
		bool flag8 = x > GameScr.cmx && x < GameScr.cmx + GameCanvas.w && this.y2 > 100 && !SoundMn.gI().isPlayAirShip() && !SoundMn.gI().isPlayRain();
		if (flag8)
		{
			this.createShip = true;
			SoundMn.gI().airShip();
		}
	}

	// Token: 0x06000B5D RID: 2909 RVA: 0x000B415B File Offset: 0x000B235B
	public static void addTeleport(Teleport p)
	{
		Teleport.vTeleport.addElement(p);
	}

	// Token: 0x06000B5E RID: 2910 RVA: 0x000B416C File Offset: 0x000B236C
	public void paintHole(mGraphics g)
	{
		bool flag = this.planet > 2 && this.tHole;
		if (flag)
		{
			g.drawImage(Teleport.hole, this.x, this.y2 + 20, StaticObj.BOTTOM_HCENTER);
		}
	}

	// Token: 0x06000B5F RID: 2911 RVA: 0x000B41B4 File Offset: 0x000B23B4
	public void paint(mGraphics g)
	{
		bool flag = global::Char.isLoadingMap || this.x < GameScr.cmx || this.x > GameScr.cmx + GameCanvas.w;
		if (!flag)
		{
			Part part = GameScr.parts[this.headId];
			int num = 0;
			int num2 = 0;
			bool flag2 = this.planet == 0;
			if (flag2)
			{
				num = 15;
				num2 = 40;
			}
			bool flag3 = this.planet == 1;
			if (flag3)
			{
				num = 7;
				num2 = 55;
			}
			bool flag4 = this.planet == 2;
			if (flag4)
			{
				num = 18;
				num2 = 52;
			}
			bool flag5 = this.painHead && this.planet < 3;
			if (flag5)
			{
				SmallImage.drawSmallImage(g, (int)part.pi[global::Char.CharInfo[0][0][0]].id, this.x + ((this.dir != 1) ? (-num) : num), this.y - num2, (this.dir != 1) ? 2 : 0, StaticObj.TOP_CENTER);
			}
			bool flag6 = this.planet < 3;
			if (flag6)
			{
				g.drawRegion(Teleport.maybay[this.planet], 0, 0, mGraphics.getImageWidth(Teleport.maybay[this.planet]), mGraphics.getImageHeight(Teleport.maybay[this.planet]), (this.dir == 1) ? 2 : 0, this.x, this.y, StaticObj.BOTTOM_HCENTER);
			}
			else
			{
				bool flag7 = this.isDown;
				if (flag7)
				{
					bool flag8 = this.tPrepare > 10;
					if (flag8)
					{
						g.drawRegion(Teleport.maybay[4], 0, 0, mGraphics.getImageWidth(Teleport.maybay[4]), mGraphics.getImageHeight(Teleport.maybay[4]), (this.dir == 1) ? 2 : 0, (this.dir != 1) ? (this.x + 11) : (this.x - 11), this.y + 2, StaticObj.BOTTOM_HCENTER);
					}
					else
					{
						g.drawRegion(Teleport.maybay[3], 0, 0, mGraphics.getImageWidth(Teleport.maybay[3]), mGraphics.getImageHeight(Teleport.maybay[3]), (this.dir == 1) ? 2 : 0, this.x, this.y, StaticObj.BOTTOM_HCENTER);
					}
				}
				else
				{
					bool flag9 = this.tPrepare < 20;
					if (flag9)
					{
						g.drawRegion(Teleport.maybay[4], 0, 0, mGraphics.getImageWidth(Teleport.maybay[4]), mGraphics.getImageHeight(Teleport.maybay[4]), (this.dir == 1) ? 2 : 0, (this.dir != 1) ? (this.x + 11) : (this.x - 11), this.y + 2, StaticObj.BOTTOM_HCENTER);
					}
					else
					{
						g.drawRegion(Teleport.maybay[3], 0, 0, mGraphics.getImageWidth(Teleport.maybay[3]), mGraphics.getImageHeight(Teleport.maybay[3]), (this.dir == 1) ? 2 : 0, this.x, this.y, StaticObj.BOTTOM_HCENTER);
					}
				}
			}
		}
	}

	// Token: 0x06000B60 RID: 2912 RVA: 0x000B44B8 File Offset: 0x000B26B8
	public void update()
	{
		bool flag = Pk9rXmap.XoaTauBay(this);
		if (!flag)
		{
			bool flag2 = this.planet > 2 && this.paintFire && this.y != -80;
			if (flag2)
			{
				bool flag3 = this.isDown && this.tPrepare == 0;
				if (flag3)
				{
					bool flag4 = GameCanvas.gameTick % 3 == 0;
					if (flag4)
					{
						ServerEffect.addServerEffect(1, this.x, this.y, 1, 0);
					}
				}
				else
				{
					bool flag5 = this.isUp && GameCanvas.gameTick % 3 == 0;
					if (flag5)
					{
						ServerEffect.addServerEffect(1, this.x, this.y + 16, 1, 1);
					}
				}
			}
			this.tFire++;
			bool flag6 = this.tFire > 3;
			if (flag6)
			{
				this.tFire = 0;
			}
			bool flag7 = this.isDown;
			if (flag7)
			{
				this.paintFire = true;
				this.painHead = (this.type != 0);
				bool flag8 = this.planet < 3;
				if (flag8)
				{
					int num = this.y2 - this.y >> 3;
					bool flag9 = num < 1;
					if (flag9)
					{
						num = 1;
						this.paintFire = false;
					}
					this.y += num;
				}
				else
				{
					bool flag10 = GameCanvas.gameTick % 2 == 0;
					if (flag10)
					{
						this.vy++;
					}
					bool flag11 = this.y2 - this.y < this.vy;
					if (flag11)
					{
						this.y = this.y2;
						this.paintFire = false;
					}
					else
					{
						this.y += this.vy;
					}
				}
				bool flag12 = this.isMe && this.type == 1 && global::Char.myCharz().isTeleport;
				if (flag12)
				{
					global::Char.myCharz().cx = this.x;
					global::Char.myCharz().cy = this.y - 30;
					global::Char.myCharz().statusMe = 4;
					GameScr.cmtoX = this.x - GameScr.gW2;
					GameScr.cmtoY = this.y - GameScr.gH23 - 1;
					GameScr.info1.isUpdate = false;
				}
				bool flag13 = GameScr.findCharInMap(this.id) != null && !this.isMe && this.type == 1 && GameScr.findCharInMap(this.id).isTeleport;
				if (flag13)
				{
					GameScr.findCharInMap(this.id).cx = this.x;
					GameScr.findCharInMap(this.id).cy = this.y - 30;
					GameScr.findCharInMap(this.id).statusMe = 4;
				}
				bool flag14 = Res.abs(this.y - this.y2) < 50 && TileMap.tileTypeAt(this.x, this.y, 2);
				if (flag14)
				{
					this.tHole = true;
					bool flag15 = this.planet < 3;
					if (flag15)
					{
						SoundMn.gI().pauseAirShip();
						bool flag16 = this.y % 24 != 0;
						if (flag16)
						{
							this.y -= this.y % 24;
						}
						this.tPrepare++;
						bool flag17 = this.tPrepare > 10;
						if (flag17)
						{
							this.tPrepare = 0;
							this.isDown = false;
							this.isUp = true;
							this.paintFire = false;
						}
						bool flag18 = this.type == 1;
						if (flag18)
						{
							bool flag19 = this.isMe;
							if (flag19)
							{
								global::Char.myCharz().isTeleport = false;
							}
							else
							{
								bool flag20 = GameScr.findCharInMap(this.id) != null;
								if (flag20)
								{
									GameScr.findCharInMap(this.id).isTeleport = false;
								}
							}
							this.painHead = false;
						}
					}
					else
					{
						this.y = this.y2;
						bool flag21 = !this.isShock;
						if (flag21)
						{
							ServerEffect.addServerEffect(92, this.x + 4, this.y + 14, 1, 0);
							GameScr.shock_scr = 10;
							this.isShock = true;
						}
						this.tPrepare++;
						bool flag22 = this.tPrepare > 30;
						if (flag22)
						{
							this.tPrepare = 0;
							this.isDown = false;
							this.isUp = true;
							this.paintFire = false;
						}
						bool flag23 = this.type == 1;
						if (flag23)
						{
							bool flag24 = this.isMe;
							if (flag24)
							{
								global::Char.myCharz().isTeleport = false;
							}
							else
							{
								bool flag25 = GameScr.findCharInMap(this.id) != null;
								if (flag25)
								{
									GameScr.findCharInMap(this.id).isTeleport = false;
								}
							}
							this.painHead = false;
						}
					}
				}
			}
			else
			{
				bool flag26 = this.isUp;
				if (flag26)
				{
					this.tPrepare++;
					bool flag27 = this.tPrepare > 30;
					if (flag27)
					{
						int num2 = this.y2 + 24 - this.y >> 3;
						bool flag28 = num2 > 30;
						if (flag28)
						{
							num2 = 30;
						}
						this.y -= num2;
						this.paintFire = true;
					}
					else
					{
						bool flag29 = this.tPrepare == 14 && this.createShip;
						if (flag29)
						{
							SoundMn.gI().resumeAirShip();
						}
						bool flag30 = this.tPrepare > 0 && this.type == 0;
						if (flag30)
						{
							bool flag31 = this.isMe;
							if (flag31)
							{
								global::Char.myCharz().isTeleport = false;
								bool flag32 = global::Char.myCharz().statusMe != 14;
								if (flag32)
								{
									global::Char.myCharz().statusMe = 3;
								}
								global::Char.myCharz().cvy = -3;
							}
							else
							{
								bool flag33 = GameScr.findCharInMap(this.id) != null;
								if (flag33)
								{
									GameScr.findCharInMap(this.id).isTeleport = false;
									bool flag34 = GameScr.findCharInMap(this.id).statusMe != 14;
									if (flag34)
									{
										GameScr.findCharInMap(this.id).statusMe = 3;
									}
									GameScr.findCharInMap(this.id).cvy = -3;
								}
							}
							this.painHead = false;
						}
						bool flag35 = this.tPrepare > 12 && this.type == 0;
						if (flag35)
						{
							bool flag36 = this.isMe;
							if (flag36)
							{
								global::Char.myCharz().isTeleport = true;
							}
							else
							{
								bool flag37 = GameScr.findCharInMap(this.id) != null;
								if (flag37)
								{
									GameScr.findCharInMap(this.id).cx = this.x;
									GameScr.findCharInMap(this.id).cy = this.y;
									GameScr.findCharInMap(this.id).isTeleport = true;
								}
							}
							this.painHead = true;
						}
					}
					bool flag38 = this.isMe;
					if (flag38)
					{
						bool flag39 = this.type == 0;
						if (flag39)
						{
							GameScr.cmtoX = this.x - GameScr.gW2;
							GameScr.cmtoY = this.y - GameScr.gH23 - 1;
						}
						bool flag40 = this.type == 1;
						if (flag40)
						{
							GameScr.info1.isUpdate = true;
						}
					}
					bool flag41 = this.y <= -80;
					if (flag41)
					{
						bool flag42 = this.isMe && this.type == 0;
						if (flag42)
						{
							Controller.isStopReadMessage = false;
							global::Char.ischangingMap = true;
						}
						bool flag43 = !this.isMe && GameScr.findCharInMap(this.id) != null && this.type == 0;
						if (flag43)
						{
							GameScr.vCharInMap.removeElement(GameScr.findCharInMap(this.id));
						}
						bool flag44 = this.planet < 3;
						if (flag44)
						{
							Teleport.vTeleport.removeElement(this);
						}
						else
						{
							this.y = -80;
							this.tDelayHole++;
							bool flag45 = this.tDelayHole > 80;
							if (flag45)
							{
								this.tDelayHole = 0;
								Teleport.vTeleport.removeElement(this);
							}
						}
					}
				}
			}
			bool flag46 = this.paintFire && this.planet < 3 && Res.abs(this.y - this.y2) <= 50 && GameCanvas.gameTick % 5 == 0;
			if (flag46)
			{
				Effect me = new Effect(19, this.x, this.y2 + 20, 2, 1, -1);
				EffecMn.addEff(me);
			}
		}
	}

	// Token: 0x040013B5 RID: 5045
	public static MyVector vTeleport = new MyVector();

	// Token: 0x040013B6 RID: 5046
	public int x;

	// Token: 0x040013B7 RID: 5047
	public int y;

	// Token: 0x040013B8 RID: 5048
	public int headId;

	// Token: 0x040013B9 RID: 5049
	public int type;

	// Token: 0x040013BA RID: 5050
	public bool isMe;

	// Token: 0x040013BB RID: 5051
	public int y2;

	// Token: 0x040013BC RID: 5052
	public int id;

	// Token: 0x040013BD RID: 5053
	public int dir;

	// Token: 0x040013BE RID: 5054
	public int planet;

	// Token: 0x040013BF RID: 5055
	public static Image[] maybay = new Image[5];

	// Token: 0x040013C0 RID: 5056
	public static Image hole;

	// Token: 0x040013C1 RID: 5057
	public bool isUp;

	// Token: 0x040013C2 RID: 5058
	public bool isDown;

	// Token: 0x040013C3 RID: 5059
	private bool createShip;

	// Token: 0x040013C4 RID: 5060
	public bool paintFire;

	// Token: 0x040013C5 RID: 5061
	private bool painHead;

	// Token: 0x040013C6 RID: 5062
	private int tPrepare;

	// Token: 0x040013C7 RID: 5063
	private int vy = 1;

	// Token: 0x040013C8 RID: 5064
	private int tFire;

	// Token: 0x040013C9 RID: 5065
	private int tDelayHole;

	// Token: 0x040013CA RID: 5066
	private bool tHole;

	// Token: 0x040013CB RID: 5067
	private bool isShock;
}
using System;

// Token: 0x020000D6 RID: 214
public class TextInfo
{
	// Token: 0x06000B62 RID: 2914 RVA: 0x000B4D2E File Offset: 0x000B2F2E
	public static void reset()
	{
		TextInfo.dx = 0;
		TextInfo.tx = 0;
		TextInfo.isBack = false;
	}

	// Token: 0x06000B63 RID: 2915 RVA: 0x000B4D44 File Offset: 0x000B2F44
	public static void paint(mGraphics g, string str, int x, int y, int w, int h, mFont f)
	{
		bool flag = TextInfo.wStr != f.getWidth(str) || !TextInfo.laststring.Equals(str);
		if (flag)
		{
			TextInfo.laststring = str;
			TextInfo.dx = 0;
			TextInfo.wStr = f.getWidth(str);
			TextInfo.isBack = false;
			TextInfo.tx = 0;
		}
		g.setClip(x, y, w, h);
		bool flag2 = TextInfo.wStr > w;
		if (flag2)
		{
			f.drawString(g, str, x - TextInfo.dx, y, 0);
		}
		else
		{
			f.drawString(g, str, x + w / 2, y, 2);
		}
		GameCanvas.resetTrans(g);
		bool flag3 = TextInfo.wStr <= w;
		if (!flag3)
		{
			bool flag4 = !TextInfo.isBack;
			if (flag4)
			{
				TextInfo.tx++;
				bool flag5 = TextInfo.tx > 50;
				if (flag5)
				{
					TextInfo.dx++;
					bool flag6 = TextInfo.dx >= TextInfo.wStr;
					if (flag6)
					{
						TextInfo.tx = 0;
						TextInfo.dx = -w + 30;
						TextInfo.isBack = true;
					}
				}
			}
			else
			{
				bool flag7 = TextInfo.dx < 0;
				if (flag7)
				{
					int num = w + TextInfo.dx >> 1;
					TextInfo.dx += num;
				}
				bool flag8 = TextInfo.dx > 0;
				if (flag8)
				{
					TextInfo.dx = 0;
				}
				bool flag9 = TextInfo.dx == 0;
				if (flag9)
				{
					TextInfo.tx++;
					bool flag10 = TextInfo.tx == 50;
					if (flag10)
					{
						TextInfo.tx = 0;
						TextInfo.isBack = false;
					}
				}
			}
		}
	}

	// Token: 0x040013CC RID: 5068
	public static int dx;

	// Token: 0x040013CD RID: 5069
	public static int tx;

	// Token: 0x040013CE RID: 5070
	public static int wStr;

	// Token: 0x040013CF RID: 5071
	public static bool isBack;

	// Token: 0x040013D0 RID: 5072
	public static string laststring = string.Empty;
}
using System;
using System.Threading;

// Token: 0x020000D7 RID: 215
public class TField : IActionListener
{
	// Token: 0x06000B66 RID: 2918 RVA: 0x000B4EF4 File Offset: 0x000B30F4
	public TField(mScreen parentScr)
	{
		this.text = string.Empty;
		this.parentScr = parentScr;
		this.init();
	}

	// Token: 0x06000B67 RID: 2919 RVA: 0x000B4F98 File Offset: 0x000B3198
	public TField()
	{
		this.text = string.Empty;
		this.init();
	}

	// Token: 0x06000B68 RID: 2920 RVA: 0x000B5034 File Offset: 0x000B3234
	public TField(int x, int y, int w, int h)
	{
		this.text = string.Empty;
		this.init();
		this.x = x;
		this.y = y;
		this.width = w;
		this.height = h;
	}

	// Token: 0x06000B69 RID: 2921 RVA: 0x000B50EC File Offset: 0x000B32EC
	public TField(string text, int maxLen, int inputType)
	{
		this.text = text;
		this.maxTextLenght = maxLen;
		this.inputType = inputType;
		this.init();
		this.isTfield = true;
	}

	// Token: 0x06000B6A RID: 2922 RVA: 0x000B5198 File Offset: 0x000B3398
	public static bool setNormal(char ch)
	{
		bool flag = (ch < '0' || ch > '9') && (ch < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z');
		return !flag;
	}

	// Token: 0x06000B6B RID: 2923 RVA: 0x000B51D8 File Offset: 0x000B33D8
	public void doChangeToTextBox()
	{
	}

	// Token: 0x06000B6C RID: 2924 RVA: 0x000B51DC File Offset: 0x000B33DC
	public static void setVendorTypeMode(int mode)
	{
		bool flag = mode == TField.MOTO;
		if (flag)
		{
			TField.print[0] = "0";
			TField.print[10] = " *";
			TField.print[11] = "#";
			TField.changeModeKey = 35;
		}
		else
		{
			bool flag2 = mode == TField.NOKIA;
			if (flag2)
			{
				TField.print[0] = " 0";
				TField.print[10] = "*";
				TField.print[11] = "#";
				TField.changeModeKey = 35;
			}
			else
			{
				bool flag3 = mode == TField.ORTHER;
				if (flag3)
				{
					TField.print[0] = "0";
					TField.print[10] = "*";
					TField.print[11] = " #";
					TField.changeModeKey = 42;
				}
			}
		}
	}

	// Token: 0x06000B6D RID: 2925 RVA: 0x000B52A0 File Offset: 0x000B34A0
	public void init()
	{
		TField.CARET_HEIGHT = mScreen.ITEM_HEIGHT + 1;
		this.cmdClear = new Command(mResources.DELETE, this, 1000, null);
		bool isPC = Main.isPC;
		if (isPC)
		{
			TField.typeXpeed = 0;
		}
		bool flag = TField.imgTf == null;
		if (flag)
		{
			TField.imgTf = GameCanvas.loadImage("/mainImage/myTexture2dtf.png");
		}
	}

	// Token: 0x06000B6E RID: 2926 RVA: 0x000B5300 File Offset: 0x000B3500
	public void clearKeyWhenPutText(int keyCode)
	{
		bool flag = keyCode == -8 && this.timeDelayKyCode <= 0;
		if (flag)
		{
			bool flag2 = this.timeDelayKyCode <= 0;
			if (flag2)
			{
				this.timeDelayKyCode = 1;
			}
			this.clear();
		}
	}

	// Token: 0x06000B6F RID: 2927 RVA: 0x000B5348 File Offset: 0x000B3548
	public void clearAllText()
	{
		this.text = string.Empty;
		bool flag = TField.kb != null;
		if (flag)
		{
			TField.kb.text = string.Empty;
		}
		this.caretPos = 0;
		this.setOffset(0);
		this.setPasswordTest();
	}

	// Token: 0x06000B70 RID: 2928 RVA: 0x000B5394 File Offset: 0x000B3594
	public void clear()
	{
		bool flag = this.caretPos > 0 && this.text.Length > 0;
		if (flag)
		{
			this.text = this.text.Substring(0, this.caretPos - 1);
			this.caretPos--;
			this.setOffset(0);
			this.setPasswordTest();
			bool flag2 = TField.kb != null;
			if (flag2)
			{
				TField.kb.text = this.text;
			}
		}
	}

	// Token: 0x06000B71 RID: 2929 RVA: 0x000B5418 File Offset: 0x000B3618
	public void clearAll()
	{
		bool flag = this.caretPos > 0 && this.text.Length > 0;
		if (flag)
		{
			this.text = this.text.Substring(0, this.text.Length - 1);
			this.caretPos--;
			this.setOffset();
			this.setPasswordTest();
			this.setFocusWithKb(true);
			bool flag2 = TField.kb != null;
			if (flag2)
			{
				TField.kb.text = string.Empty;
			}
		}
	}

	// Token: 0x06000B72 RID: 2930 RVA: 0x000B54A8 File Offset: 0x000B36A8
	public void setOffset()
	{
		bool flag = this.paintedText != null && mFont.tahoma_8b != null;
		if (flag)
		{
			bool flag2 = this.inputType == TField.INPUT_TYPE_PASSWORD;
			if (flag2)
			{
				this.paintedText = this.passwordText;
			}
			else
			{
				this.paintedText = this.text;
			}
			bool flag3 = this.offsetX < 0 && mFont.tahoma_8b.getWidth(this.paintedText) + this.offsetX < this.width - TField.TEXT_GAP_X - 13 - TField.typingModeAreaWidth;
			if (flag3)
			{
				this.offsetX = this.width - 10 - TField.typingModeAreaWidth - mFont.tahoma_8b.getWidth(this.paintedText);
			}
			bool flag4 = this.offsetX + mFont.tahoma_8b.getWidth(this.paintedText.Substring(0, this.caretPos)) <= 0;
			if (flag4)
			{
				this.offsetX = -mFont.tahoma_8b.getWidth(this.paintedText.Substring(0, this.caretPos));
				this.offsetX += 40;
			}
			else
			{
				bool flag5 = this.offsetX + mFont.tahoma_8b.getWidth(this.paintedText.Substring(0, this.caretPos)) >= this.width - 12 - TField.typingModeAreaWidth;
				if (flag5)
				{
					this.offsetX = this.width - 10 - TField.typingModeAreaWidth - mFont.tahoma_8b.getWidth(this.paintedText.Substring(0, this.caretPos)) - 2 * TField.TEXT_GAP_X;
				}
			}
			bool flag6 = this.offsetX > 0;
			if (flag6)
			{
				this.offsetX = 0;
			}
		}
	}

	// Token: 0x06000B73 RID: 2931 RVA: 0x000B565C File Offset: 0x000B385C
	private void keyPressedAny(int keyCode)
	{
		string[] array = (this.inputType != TField.INPUT_TYPE_PASSWORD && this.inputType != TField.INPUT_ALPHA_NUMBER_ONLY) ? TField.print : TField.printA;
		bool flag = keyCode == TField.lastKey;
		if (flag)
		{
			this.indexOfActiveChar = (this.indexOfActiveChar + 1) % array[keyCode - 48].Length;
			char c = array[keyCode - 48][this.indexOfActiveChar];
			object arg = (TField.mode == 0) ? char.ToLower(c) : ((TField.mode == 1) ? char.ToUpper(c) : ((TField.mode != 2) ? array[keyCode - 48][array[keyCode - 48].Length - 1] : char.ToUpper(c)));
			string str = this.text.Substring(0, this.caretPos - 1) + arg;
			bool flag2 = this.caretPos < this.text.Length;
			if (flag2)
			{
				str += this.text.Substring(this.caretPos, this.text.Length);
			}
			this.text = str;
			this.keyInActiveState = TField.MAX_TIME_TO_CONFIRM_KEY[TField.typeXpeed];
			this.setPasswordTest();
		}
		else
		{
			bool flag3 = this.text.Length < this.maxTextLenght;
			if (flag3)
			{
				bool flag4 = TField.mode == 1 && TField.lastKey != -1984;
				if (flag4)
				{
					TField.mode = 0;
				}
				this.indexOfActiveChar = 0;
				char c2 = array[keyCode - 48][this.indexOfActiveChar];
				object arg = (TField.mode == 0) ? char.ToLower(c2) : ((TField.mode == 1) ? char.ToUpper(c2) : ((TField.mode != 2) ? array[keyCode - 48][array[keyCode - 48].Length - 1] : char.ToUpper(c2)));
				string str2 = this.text.Substring(0, this.caretPos) + arg;
				bool flag5 = this.caretPos < this.text.Length;
				if (flag5)
				{
					str2 += this.text.Substring(this.caretPos, this.text.Length);
				}
				this.text = str2;
				this.keyInActiveState = TField.MAX_TIME_TO_CONFIRM_KEY[TField.typeXpeed];
				this.caretPos++;
				this.setPasswordTest();
				this.setOffset();
			}
		}
		TField.lastKey = keyCode;
	}

	// Token: 0x06000B74 RID: 2932 RVA: 0x000B58E4 File Offset: 0x000B3AE4
	private void keyPressedAscii(int keyCode)
	{
		bool flag = (this.inputType == TField.INPUT_TYPE_PASSWORD || this.inputType == TField.INPUT_ALPHA_NUMBER_ONLY) && (keyCode < 48 || keyCode > 57) && (keyCode < 65 || keyCode > 90) && (keyCode < 97 || keyCode > 122);
		if (!flag)
		{
			bool flag2 = this.text.Length < this.maxTextLenght;
			if (flag2)
			{
				string str = this.text.Substring(0, this.caretPos) + ((char)keyCode).ToString();
				bool flag3 = this.caretPos < this.text.Length;
				if (flag3)
				{
					str += this.text.Substring(this.caretPos, this.text.Length - this.caretPos);
				}
				this.text = str;
				this.caretPos++;
				this.setPasswordTest();
				this.setOffset(0);
			}
			bool flag4 = TField.kb != null;
			if (flag4)
			{
				TField.kb.text = this.text;
			}
		}
	}

	// Token: 0x06000B75 RID: 2933 RVA: 0x000B5A04 File Offset: 0x000B3C04
	public static void setMode()
	{
		TField.mode++;
		bool flag = TField.mode > 3;
		if (flag)
		{
			TField.mode = 0;
		}
		TField.lastKey = TField.changeModeKey;
		TField.timeChangeMode = (long)(Environment.TickCount / 1000);
	}

	// Token: 0x06000B76 RID: 2934 RVA: 0x000B5A50 File Offset: 0x000B3C50
	private void setDau()
	{
		this.timeDau = (long)(Environment.TickCount / 100);
		bool flag = this.indexDau == -1;
		if (flag)
		{
			for (int i = this.caretPos; i > 0; i--)
			{
				char c = this.text[i - 1];
				for (int j = 0; j < TField.printDau.Length; j++)
				{
					char c2 = TField.printDau[j];
					bool flag2 = c == c2;
					if (flag2)
					{
						this.indexTemplate = j;
						this.indexCong = 0;
						this.indexDau = i - 1;
						return;
					}
				}
			}
			this.indexDau = -1;
		}
		else
		{
			this.indexCong++;
			bool flag3 = this.indexCong >= 6;
			if (flag3)
			{
				this.indexCong = 0;
			}
			string str = this.text.Substring(0, this.indexDau);
			string str2 = this.text.Substring(this.indexDau + 1);
			string str3 = TField.printDau.Substring(this.indexTemplate + this.indexCong, 1);
			this.text = str + str3 + str2;
		}
	}

	// Token: 0x06000B77 RID: 2935 RVA: 0x000B5B84 File Offset: 0x000B3D84
	public bool keyPressed(int keyCode)
	{
		bool flag = Main.isPC && keyCode == -8;
		bool result;
		if (flag)
		{
			this.clearKeyWhenPutText(-8);
			result = true;
		}
		else
		{
			bool flag2 = keyCode == 8 || keyCode == -8 || keyCode == 204;
			if (flag2)
			{
				this.clear();
				result = true;
			}
			else
			{
				bool flag3 = TField.isQwerty && keyCode >= 32;
				if (flag3)
				{
					this.keyPressedAscii(keyCode);
					result = false;
				}
				else
				{
					bool flag4 = keyCode == TField.changeDau && this.inputType == TField.INPUT_TYPE_ANY;
					if (flag4)
					{
						this.setDau();
						result = false;
					}
					else
					{
						bool flag5 = keyCode == 42;
						if (flag5)
						{
							keyCode = 58;
						}
						bool flag6 = keyCode == 35;
						if (flag6)
						{
							keyCode = 59;
						}
						bool flag7 = keyCode >= 48 && keyCode <= 59;
						if (flag7)
						{
							bool flag8 = this.inputType == TField.INPUT_TYPE_ANY || this.inputType == TField.INPUT_TYPE_PASSWORD || this.inputType == TField.INPUT_ALPHA_NUMBER_ONLY;
							if (flag8)
							{
								this.keyPressedAny(keyCode);
							}
							else
							{
								bool flag9 = this.inputType == TField.INPUT_TYPE_NUMERIC;
								if (flag9)
								{
									this.keyPressedAscii(keyCode);
									this.keyInActiveState = 1;
								}
							}
						}
						else
						{
							this.indexOfActiveChar = 0;
							TField.lastKey = -1984;
							bool flag10 = keyCode == 14 && !this.lockArrow;
							if (flag10)
							{
								bool flag11 = this.caretPos > 0;
								if (flag11)
								{
									this.caretPos--;
									this.setOffset(0);
									this.showCaretCounter = TField.MAX_SHOW_CARET_COUNER;
									return false;
								}
							}
							else
							{
								bool flag12 = keyCode == 15 && !this.lockArrow;
								if (flag12)
								{
									bool flag13 = this.caretPos < this.text.Length;
									if (flag13)
									{
										this.caretPos++;
										this.setOffset(0);
										this.showCaretCounter = TField.MAX_SHOW_CARET_COUNER;
										return false;
									}
								}
								else
								{
									bool flag14 = keyCode == 19;
									if (flag14)
									{
										this.clear();
										return false;
									}
									TField.lastKey = keyCode;
								}
							}
						}
						result = true;
					}
				}
			}
		}
		return result;
	}

	// Token: 0x06000B78 RID: 2936 RVA: 0x000B5DB4 File Offset: 0x000B3FB4
	public void setOffset(int index)
	{
		bool flag = this.inputType == TField.INPUT_TYPE_PASSWORD;
		if (flag)
		{
			this.paintedText = this.passwordText;
		}
		else
		{
			this.paintedText = this.text;
		}
		int num = mFont.tahoma_8b.getWidth(this.paintedText.Substring(0, this.caretPos));
		if (index != -1)
		{
			if (index != 1)
			{
				this.offsetX = -(num - (this.width - 12));
			}
			else
			{
				bool flag2 = num + this.offsetX > this.width - 25 && this.caretPos < this.paintedText.Length && this.caretPos > 0;
				if (flag2)
				{
					this.offsetX -= mFont.tahoma_8b.getWidth(this.paintedText.Substring(this.caretPos - 1, 1));
				}
			}
		}
		else
		{
			bool flag3 = num + this.offsetX < 15 && this.caretPos > 0 && this.caretPos < this.paintedText.Length;
			if (flag3)
			{
				this.offsetX += mFont.tahoma_8b.getWidth(this.paintedText.Substring(this.caretPos, 1));
			}
		}
		bool flag4 = this.offsetX > 0;
		if (flag4)
		{
			this.offsetX = 0;
		}
		else
		{
			bool flag5 = this.offsetX < 0;
			if (flag5)
			{
				int num2 = mFont.tahoma_8b.getWidth(this.paintedText) - (this.width - 12);
				bool flag6 = this.offsetX < -num2;
				if (flag6)
				{
					this.offsetX = -num2;
				}
			}
		}
	}

	// Token: 0x06000B79 RID: 2937 RVA: 0x000B5F60 File Offset: 0x000B4160
	public void paintInputTf(mGraphics g, bool iss, int x, int y, int w, int h, int xText, int yText, string text, string info)
	{
		g.setColor(0);
		if (iss)
		{
			g.drawRegion(TField.imgTf, 0, 81, 29, 27, 0, x, y, 0);
			g.drawRegion(TField.imgTf, 0, 135, 29, 27, 0, x + w - 29, y, 0);
			g.drawRegion(TField.imgTf, 0, 108, 29, 27, 0, x + w - 58, y, 0);
			for (int i = 0; i < (w - 58) / 29; i++)
			{
				g.drawRegion(TField.imgTf, 0, 108, 29, 27, 0, x + 29 + i * 29, y, 0);
			}
		}
		else
		{
			g.drawRegion(TField.imgTf, 0, 0, 29, 27, 0, x, y, 0);
			g.drawRegion(TField.imgTf, 0, 54, 29, 27, 0, x + w - 29, y, 0);
			g.drawRegion(TField.imgTf, 0, 27, 29, 27, 0, x + w - 58, y, 0);
			for (int j = 0; j < (w - 58) / 29; j++)
			{
				g.drawRegion(TField.imgTf, 0, 27, 29, 27, 0, x + 29 + j * 29, y, 0);
			}
		}
		g.setClip(x + 3, y + 1, w - 4, h);
		bool flag = text != null && !text.Equals(string.Empty);
		if (flag)
		{
			mFont.tahoma_8b.drawString(g, text, xText, yText, 0);
		}
		else
		{
			bool flag2 = info != null;
			if (flag2)
			{
				if (iss)
				{
					mFont.tahoma_7b_focus.drawString(g, info, xText, yText, 0);
				}
				else
				{
					mFont.tahoma_7b_unfocus.drawString(g, info, xText, yText, 0);
				}
			}
		}
	}

	// Token: 0x06000B7A RID: 2938 RVA: 0x000B612C File Offset: 0x000B432C
	public void paint(mGraphics g)
	{
		g.setClip(0, 0, GameCanvas.w, GameCanvas.h);
		bool flag = this.isFocused();
		bool flag2 = this.inputType == TField.INPUT_TYPE_PASSWORD;
		if (flag2)
		{
			this.paintedText = this.passwordText;
		}
		else
		{
			this.paintedText = this.text;
		}
		this.paintInputTf(g, flag, this.x, this.y - 1, this.width, this.height + 5, TField.TEXT_GAP_X + this.offsetX + this.x + 1, this.y + (this.height - mFont.tahoma_8b.getHeight()) / 2 + 2, this.paintedText, this.name);
		g.setClip(this.x + 3, this.y + 1, this.width - 4, this.height - 2);
		g.setColor(0);
		bool flag3 = flag && this.isPaintMouse && this.isPaintCarret;
		if (flag3)
		{
			bool flag4 = this.keyInActiveState == 0 && (this.showCaretCounter > 0 || this.counter / TField.CARET_SHOWING_TIME % 4 == 0);
			if (flag4)
			{
				g.setColor(7999781);
				g.fillRect(TField.TEXT_GAP_X + 1 + this.offsetX + this.x + mFont.tahoma_8b.getWidth(this.paintedText.Substring(0, this.caretPos) + "a") - TField.CARET_WIDTH - mFont.tahoma_8b.getWidth("a"), this.y + (this.height - TField.CARET_HEIGHT) / 2 + 5, TField.CARET_WIDTH, TField.CARET_HEIGHT);
			}
			GameCanvas.resetTrans(g);
			bool flag5 = this.text != null && this.text.Length > 0 && GameCanvas.isTouch;
			if (flag5)
			{
				g.drawImage(GameCanvas.imgClear, this.x + this.width - 13, this.y + this.height / 2 + 3, mGraphics.VCENTER | mGraphics.HCENTER);
			}
		}
	}

	// Token: 0x06000B7B RID: 2939 RVA: 0x000B6350 File Offset: 0x000B4550
	private bool isFocused()
	{
		return this.isFocus;
	}

	// Token: 0x06000B7C RID: 2940 RVA: 0x000B6368 File Offset: 0x000B4568
	public string subString(string str, int index, int indexTo)
	{
		bool flag = index >= 0 && indexTo > str.Length - 1;
		string result;
		if (flag)
		{
			result = str.Substring(index);
		}
		else
		{
			bool flag2 = index < 0 || index > str.Length - 1 || indexTo < 0 || indexTo > str.Length - 1;
			if (flag2)
			{
				result = string.Empty;
			}
			else
			{
				string text = string.Empty;
				for (int i = index; i < indexTo; i++)
				{
					text += str[i].ToString();
				}
				result = text;
			}
		}
		return result;
	}

	// Token: 0x06000B7D RID: 2941 RVA: 0x000B6400 File Offset: 0x000B4600
	private void setPasswordTest()
	{
		bool flag = this.inputType == TField.INPUT_TYPE_PASSWORD;
		if (flag)
		{
			this.passwordText = string.Empty;
			for (int i = 0; i < this.text.Length; i++)
			{
				this.passwordText += "*";
			}
			bool flag2 = this.keyInActiveState > 0 && this.caretPos > 0;
			if (flag2)
			{
				this.passwordText = this.passwordText.Substring(0, this.caretPos - 1) + this.text[this.caretPos - 1].ToString() + this.passwordText.Substring(this.caretPos, this.passwordText.Length);
			}
		}
	}

	// Token: 0x06000B7E RID: 2942 RVA: 0x000B64D4 File Offset: 0x000B46D4
	public void update()
	{
		this.isPaintCarret = true;
		bool isPC = Main.isPC;
		if (isPC)
		{
			bool flag = this.timeDelayKyCode > 0;
			if (flag)
			{
				this.timeDelayKyCode--;
			}
			bool flag2 = this.timeDelayKyCode <= 0;
			if (flag2)
			{
				this.timeDelayKyCode = 0;
			}
		}
		bool flag3 = TField.kb != null && TField.currentTField == this;
		if (flag3)
		{
			bool flag4 = TField.kb.text.Length < 40 && this.isFocus;
			if (flag4)
			{
				this.setText(TField.kb.text);
			}
			bool flag5 = TField.kb.done && this.cmdDoneAction != null;
			if (flag5)
			{
				this.cmdDoneAction.performAction();
			}
		}
		this.counter++;
		bool flag6 = this.keyInActiveState > 0;
		if (flag6)
		{
			this.keyInActiveState--;
			bool flag7 = this.keyInActiveState == 0;
			if (flag7)
			{
				this.indexOfActiveChar = 0;
				bool flag8 = TField.mode == 1 && TField.lastKey != TField.changeModeKey && this.isFocus;
				if (flag8)
				{
					TField.mode = 0;
				}
				TField.lastKey = -1984;
				this.setPasswordTest();
			}
		}
		bool flag9 = this.showCaretCounter > 0;
		if (flag9)
		{
			this.showCaretCounter--;
		}
		bool isPointerJustRelease = GameCanvas.isPointerJustRelease;
		if (isPointerJustRelease)
		{
			this.setTextBox();
		}
		bool flag10 = this.indexDau != -1 && (long)(Environment.TickCount / 100) - this.timeDau > 5L;
		if (flag10)
		{
			this.indexDau = -1;
		}
	}

	// Token: 0x06000B7F RID: 2943 RVA: 0x000B6688 File Offset: 0x000B4888
	public void setTextBox()
	{
		bool flag = GameCanvas.isPointerHoldIn(this.x + this.width - 20, this.y, 40, this.height);
		if (flag)
		{
			this.clearAllText();
			this.isFocus = true;
		}
		else
		{
			bool flag2 = GameCanvas.isPointerHoldIn(this.x, this.y, this.width - 20, this.height);
			if (flag2)
			{
				this.setFocusWithKb(true);
			}
			else
			{
				this.setFocus(false);
			}
		}
	}

	// Token: 0x06000B80 RID: 2944 RVA: 0x000B670C File Offset: 0x000B490C
	public void setFocus(bool isFocus)
	{
		bool flag = this.isFocus != isFocus;
		if (flag)
		{
			TField.mode = 0;
		}
		TField.lastKey = -1984;
		TField.timeChangeMode = (long)((int)(DateTime.Now.Ticks / 1000L));
		this.isFocus = isFocus;
		if (isFocus)
		{
			TField.currentTField = this;
			bool flag2 = TField.kb != null;
			if (flag2)
			{
				TField.kb.text = TField.currentTField.text;
			}
		}
	}

	// Token: 0x06000B81 RID: 2945 RVA: 0x000B6790 File Offset: 0x000B4990
	public void setFocusWithKb(bool isFocus)
	{
		bool flag = this.isFocus != isFocus;
		if (flag)
		{
			TField.mode = 0;
		}
		TField.lastKey = -1984;
		TField.timeChangeMode = (long)((int)(DateTime.Now.Ticks / 1000L));
		this.isFocus = isFocus;
		bool flag2 = isFocus;
		if (flag2)
		{
			TField.currentTField = this;
		}
		else
		{
			bool flag3 = TField.currentTField == this;
			if (flag3)
			{
				TField.currentTField = null;
			}
		}
		bool flag4 = Thread.CurrentThread.Name == Main.mainThreadName && TField.currentTField != null;
		if (flag4)
		{
			isFocus = true;
			TouchScreenKeyboard.hideInput = !TField.currentTField.showSubTextField;
			TouchScreenKeyboardType t = TouchScreenKeyboardType.ASCIICapable;
			bool flag5 = this.inputType == TField.INPUT_TYPE_NUMERIC;
			if (flag5)
			{
				t = TouchScreenKeyboardType.NumberPad;
			}
			bool type = false;
			bool flag6 = this.inputType == TField.INPUT_TYPE_PASSWORD;
			if (flag6)
			{
				type = true;
			}
			TField.kb = TouchScreenKeyboard.Open(TField.currentTField.text, t, false, false, type, false, TField.currentTField.name);
			bool flag7 = TField.kb != null;
			if (flag7)
			{
				TField.kb.text = TField.currentTField.text;
			}
			Cout.LogWarning("SHOW KEYBOARD FOR " + TField.currentTField.text);
		}
	}

	// Token: 0x06000B82 RID: 2946 RVA: 0x000B68E0 File Offset: 0x000B4AE0
	public string getText()
	{
		return this.text;
	}

	// Token: 0x06000B83 RID: 2947 RVA: 0x000B68F8 File Offset: 0x000B4AF8
	public void clearKb()
	{
		bool flag = TField.kb != null;
		if (flag)
		{
			TField.kb.text = string.Empty;
		}
	}

	// Token: 0x06000B84 RID: 2948 RVA: 0x000B6924 File Offset: 0x000B4B24
	public void setText(string text)
	{
		bool flag = text != null;
		if (flag)
		{
			TField.lastKey = -1984;
			this.keyInActiveState = 0;
			this.indexOfActiveChar = 0;
			this.text = text;
			this.paintedText = text;
			bool flag2 = text == string.Empty;
			if (flag2)
			{
				TouchScreenKeyboard.Clear();
			}
			this.setPasswordTest();
			this.caretPos = text.Length;
			this.setOffset();
		}
	}

	// Token: 0x06000B85 RID: 2949 RVA: 0x000B6994 File Offset: 0x000B4B94
	public void insertText(string text)
	{
		this.text = this.text.Substring(0, this.caretPos) + text + this.text.Substring(this.caretPos);
		this.setPasswordTest();
		this.caretPos += text.Length;
		this.setOffset();
	}

	// Token: 0x06000B86 RID: 2950 RVA: 0x000B69F4 File Offset: 0x000B4BF4
	public int getMaxTextLenght()
	{
		return this.maxTextLenght;
	}

	// Token: 0x06000B87 RID: 2951 RVA: 0x000B6A0C File Offset: 0x000B4C0C
	public void setMaxTextLenght(int maxTextLenght)
	{
		this.maxTextLenght = maxTextLenght;
	}

	// Token: 0x06000B88 RID: 2952 RVA: 0x000B6A18 File Offset: 0x000B4C18
	public int getIputType()
	{
		return this.inputType;
	}

	// Token: 0x06000B89 RID: 2953 RVA: 0x000B6A30 File Offset: 0x000B4C30
	public void setIputType(int iputType)
	{
		this.inputType = iputType;
		this.setMaxTextLenght(500);
	}

	// Token: 0x06000B8A RID: 2954 RVA: 0x000B6A48 File Offset: 0x000B4C48
	public void perform(int idAction, object p)
	{
		bool flag = idAction == 1000;
		if (flag)
		{
			this.clear();
		}
	}

	// Token: 0x040013D1 RID: 5073
	public bool isFocus;

	// Token: 0x040013D2 RID: 5074
	public int x;

	// Token: 0x040013D3 RID: 5075
	public int y;

	// Token: 0x040013D4 RID: 5076
	public int width;

	// Token: 0x040013D5 RID: 5077
	public int height;

	// Token: 0x040013D6 RID: 5078
	public bool lockArrow;

	// Token: 0x040013D7 RID: 5079
	public bool justReturnFromTextBox;

	// Token: 0x040013D8 RID: 5080
	public bool paintFocus = true;

	// Token: 0x040013D9 RID: 5081
	public const sbyte KEY_LEFT = 14;

	// Token: 0x040013DA RID: 5082
	public const sbyte KEY_RIGHT = 15;

	// Token: 0x040013DB RID: 5083
	public const sbyte KEY_CLEAR = 19;

	// Token: 0x040013DC RID: 5084
	public static int typeXpeed = 2;

	// Token: 0x040013DD RID: 5085
	private static readonly int[] MAX_TIME_TO_CONFIRM_KEY = new int[]
	{
		30,
		14,
		11,
		9,
		6,
		4,
		2
	};

	// Token: 0x040013DE RID: 5086
	private static int CARET_HEIGHT = 0;

	// Token: 0x040013DF RID: 5087
	private static readonly int CARET_WIDTH = 1;

	// Token: 0x040013E0 RID: 5088
	private static readonly int CARET_SHOWING_TIME = 5;

	// Token: 0x040013E1 RID: 5089
	private static readonly int TEXT_GAP_X = 4;

	// Token: 0x040013E2 RID: 5090
	private static readonly int MAX_SHOW_CARET_COUNER = 10;

	// Token: 0x040013E3 RID: 5091
	public static readonly int INPUT_TYPE_ANY = 0;

	// Token: 0x040013E4 RID: 5092
	public static readonly int INPUT_TYPE_NUMERIC = 1;

	// Token: 0x040013E5 RID: 5093
	public static readonly int INPUT_TYPE_PASSWORD = 2;

	// Token: 0x040013E6 RID: 5094
	public static readonly int INPUT_ALPHA_NUMBER_ONLY = 3;

	// Token: 0x040013E7 RID: 5095
	private static string[] print = new string[]
	{
		" 0",
		".,@?!_1\"/$-():*+<=>;%&~#%^&*{}[];'/1",
		"abc2áàảãạâấầẩẫậăắằẳẵặ2",
		"def3đéèẻẽẹêếềểễệ3",
		"ghi4íìỉĩị4",
		"jkl5",
		"mno6óòỏõọôốồổỗộơớờởỡợ6",
		"pqrs7",
		"tuv8úùủũụưứừửữự8",
		"wxyz9ýỳỷỹỵ9",
		"*",
		"#"
	};

	// Token: 0x040013E8 RID: 5096
	private static string[] printA = new string[]
	{
		"0",
		"1",
		"abc2",
		"def3",
		"ghi4",
		"jkl5",
		"mno6",
		"pqrs7",
		"tuv8",
		"wxyz9",
		"0",
		"0"
	};

	// Token: 0x040013E9 RID: 5097
	private static string[] printBB = new string[]
	{
		" 0",
		"er1",
		"ty2",
		"ui3",
		"df4",
		"gh5",
		"jk6",
		"cv7",
		"bn8",
		"m9",
		"0",
		"0",
		"qw!",
		"as?",
		"zx",
		"op.",
		"l,"
	};

	// Token: 0x040013EA RID: 5098
	private string text = string.Empty;

	// Token: 0x040013EB RID: 5099
	private string passwordText = string.Empty;

	// Token: 0x040013EC RID: 5100
	private string paintedText = string.Empty;

	// Token: 0x040013ED RID: 5101
	private int caretPos;

	// Token: 0x040013EE RID: 5102
	private int counter;

	// Token: 0x040013EF RID: 5103
	private int maxTextLenght = 500;

	// Token: 0x040013F0 RID: 5104
	private int offsetX;

	// Token: 0x040013F1 RID: 5105
	private static int lastKey = -1984;

	// Token: 0x040013F2 RID: 5106
	private int keyInActiveState;

	// Token: 0x040013F3 RID: 5107
	private int indexOfActiveChar;

	// Token: 0x040013F4 RID: 5108
	private int showCaretCounter = TField.MAX_SHOW_CARET_COUNER;

	// Token: 0x040013F5 RID: 5109
	private int inputType = TField.INPUT_TYPE_ANY;

	// Token: 0x040013F6 RID: 5110
	public static bool isQwerty = true;

	// Token: 0x040013F7 RID: 5111
	public static int typingModeAreaWidth;

	// Token: 0x040013F8 RID: 5112
	public static int mode = 0;

	// Token: 0x040013F9 RID: 5113
	public static long timeChangeMode;

	// Token: 0x040013FA RID: 5114
	public static readonly string[] modeNotify = new string[]
	{
		"abc",
		"Abc",
		"ABC",
		"123"
	};

	// Token: 0x040013FB RID: 5115
	public static readonly int NOKIA = 0;

	// Token: 0x040013FC RID: 5116
	public static readonly int MOTO = 1;

	// Token: 0x040013FD RID: 5117
	public static readonly int ORTHER = 2;

	// Token: 0x040013FE RID: 5118
	public static readonly int BB = 3;

	// Token: 0x040013FF RID: 5119
	public static int changeModeKey = 11;

	// Token: 0x04001400 RID: 5120
	public static readonly sbyte abc = 0;

	// Token: 0x04001401 RID: 5121
	public static readonly sbyte Abc = 1;

	// Token: 0x04001402 RID: 5122
	public static readonly sbyte ABC = 2;

	// Token: 0x04001403 RID: 5123
	public static readonly sbyte number123 = 3;

	// Token: 0x04001404 RID: 5124
	public static TField currentTField;

	// Token: 0x04001405 RID: 5125
	public bool isTfield;

	// Token: 0x04001406 RID: 5126
	public bool isPaintMouse = true;

	// Token: 0x04001407 RID: 5127
	public string name = string.Empty;

	// Token: 0x04001408 RID: 5128
	public string title = string.Empty;

	// Token: 0x04001409 RID: 5129
	public string strInfo;

	// Token: 0x0400140A RID: 5130
	public Command cmdClear;

	// Token: 0x0400140B RID: 5131
	public Command cmdDoneAction;

	// Token: 0x0400140C RID: 5132
	private mScreen parentScr;

	// Token: 0x0400140D RID: 5133
	private int timeDelayKyCode;

	// Token: 0x0400140E RID: 5134
	private int holdCount;

	// Token: 0x0400140F RID: 5135
	public static int changeDau;

	// Token: 0x04001410 RID: 5136
	private int indexDau = -1;

	// Token: 0x04001411 RID: 5137
	private int indexTemplate;

	// Token: 0x04001412 RID: 5138
	private int indexCong;

	// Token: 0x04001413 RID: 5139
	private long timeDau;

	// Token: 0x04001414 RID: 5140
	private static string printDau = "aáàảãạâấầẩẫậăắằẳẵặeéèẻẽẹêếềểễệiíìỉĩịoóòỏõọôốồổỗộơớờởỡợuúùủũụưứừửữựyýỳỷỹỵ";

	// Token: 0x04001415 RID: 5141
	public static Image imgTf;

	// Token: 0x04001416 RID: 5142
	public int timePutKeyClearAll;

	// Token: 0x04001417 RID: 5143
	public int timeClearFirt;

	// Token: 0x04001418 RID: 5144
	public bool isPaintCarret;

	// Token: 0x04001419 RID: 5145
	public bool showSubTextField = true;

	// Token: 0x0400141A RID: 5146
	public static TouchScreenKeyboard kb;

	// Token: 0x0400141B RID: 5147
	public static int[][] BBKEY = new int[][]
	{
		new int[]
		{
			32,
			48
		},
		new int[]
		{
			49,
			69
		},
		new int[]
		{
			50,
			84
		},
		new int[]
		{
			51,
			85
		},
		new int[]
		{
			52,
			68
		},
		new int[]
		{
			53,
			71
		},
		new int[]
		{
			54,
			74
		},
		new int[]
		{
			55,
			67
		},
		new int[]
		{
			56,
			66
		},
		new int[]
		{
			57,
			77
		},
		new int[]
		{
			42,
			128
		},
		new int[]
		{
			35,
			137
		},
		new int[]
		{
			33,
			113
		},
		new int[]
		{
			63,
			97
		},
		new int[]
		{
			64,
			121,
			122
		},
		new int[]
		{
			46,
			111
		},
		new int[]
		{
			44,
			108
		}
	};
}
using System;

// Token: 0x020000D8 RID: 216
public class TileMap
{
	// Token: 0x06000B8C RID: 2956 RVA: 0x000B6E28 File Offset: 0x000B5028
	public static void loadBg()
	{
		TileMap.bong = GameCanvas.loadImage("/mainImage/myTexture2dbong.png");
		bool flag = mGraphics.zoomLevel != 1 && !Main.isIpod && !Main.isIphone4;
		if (flag)
		{
			TileMap.imgLight = GameCanvas.loadImage("/bg/light.png");
		}
	}

	// Token: 0x06000B8D RID: 2957 RVA: 0x000B6E74 File Offset: 0x000B5074
	public static bool isVoDaiMap()
	{
		return TileMap.mapID == 51 || TileMap.mapID == 103 || TileMap.mapID == 112 || TileMap.mapID == 113 || TileMap.mapID == 129 || TileMap.mapID == 130;
	}

	// Token: 0x06000B8E RID: 2958 RVA: 0x000B6ED0 File Offset: 0x000B50D0
	public static bool isTrainingMap()
	{
		return TileMap.mapID == 39 || TileMap.mapID == 40 || TileMap.mapID == 41;
	}

	// Token: 0x06000B8F RID: 2959 RVA: 0x000B6F0C File Offset: 0x000B510C
	public static bool mapPhuBang()
	{
		return GameScr.phuban_Info != null && TileMap.mapID == (int)GameScr.phuban_Info.idmapPaint;
	}

	// Token: 0x06000B90 RID: 2960 RVA: 0x000B6F44 File Offset: 0x000B5144
	public static BgItem getBIById(int id)
	{
		for (int i = 0; i < TileMap.vItemBg.size(); i++)
		{
			BgItem bgItem = (BgItem)TileMap.vItemBg.elementAt(i);
			bool flag = bgItem.id == id;
			if (flag)
			{
				return bgItem;
			}
		}
		return null;
	}

	// Token: 0x06000B91 RID: 2961 RVA: 0x000B6F98 File Offset: 0x000B5198
	public static bool isOfflineMap()
	{
		for (int i = 0; i < TileMap.offlineId.Length; i++)
		{
			bool flag = TileMap.mapID == TileMap.offlineId[i];
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000B92 RID: 2962 RVA: 0x000B6FDC File Offset: 0x000B51DC
	public static bool isHighterMap()
	{
		for (int i = 0; i < TileMap.offlineId.Length; i++)
		{
			bool flag = TileMap.mapID == TileMap.highterId[i];
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000B93 RID: 2963 RVA: 0x000B7020 File Offset: 0x000B5220
	public static bool isToOfflineMap()
	{
		for (int i = 0; i < TileMap.toOfflineId.Length; i++)
		{
			bool flag = TileMap.mapID == TileMap.toOfflineId[i];
			if (flag)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000B94 RID: 2964 RVA: 0x000B7062 File Offset: 0x000B5262
	public static void freeTilemap()
	{
		TileMap.imgTile = null;
		mSystem.gcc();
	}

	// Token: 0x06000B95 RID: 2965 RVA: 0x000B7071 File Offset: 0x000B5271
	public static void loadTileCreatChar()
	{
	}

	// Token: 0x06000B96 RID: 2966 RVA: 0x000B7074 File Offset: 0x000B5274
	public static bool isExistMoreOne(int id)
	{
		bool flag = id == 156 || id == 330 || id == 345 || id == 334;
		bool result;
		if (flag)
		{
			result = false;
		}
		else
		{
			bool flag2 = TileMap.mapID == 54 || TileMap.mapID == 55 || TileMap.mapID == 56 || TileMap.mapID == 57 || TileMap.mapID == 58 || TileMap.mapID == 59 || TileMap.mapID == 103;
			if (flag2)
			{
				result = false;
			}
			else
			{
				int num = 0;
				for (int i = 0; i < TileMap.vCurrItem.size(); i++)
				{
					BgItem bgItem = (BgItem)TileMap.vCurrItem.elementAt(i);
					bool flag3 = bgItem.id == id;
					if (flag3)
					{
						num++;
					}
				}
				bool flag4 = num > 2;
				result = flag4;
			}
		}
		return result;
	}

	// Token: 0x06000B97 RID: 2967 RVA: 0x000B715C File Offset: 0x000B535C
	public static void loadTileImage()
	{
		bool flag = TileMap.imgWaterfall == null;
		if (flag)
		{
			TileMap.imgWaterfall = GameCanvas.loadImageRMS("/tWater/wtf.png");
		}
		bool flag2 = TileMap.imgTopWaterfall == null;
		if (flag2)
		{
			TileMap.imgTopWaterfall = GameCanvas.loadImageRMS("/tWater/twtf.png");
		}
		bool flag3 = TileMap.imgWaterflow == null;
		if (flag3)
		{
			TileMap.imgWaterflow = GameCanvas.loadImageRMS("/tWater/wts.png");
		}
		bool flag4 = TileMap.imgWaterlowN == null;
		if (flag4)
		{
			TileMap.imgWaterlowN = GameCanvas.loadImageRMS("/tWater/wtsN.png");
		}
		bool flag5 = TileMap.imgWaterlowN2 == null;
		if (flag5)
		{
			TileMap.imgWaterlowN2 = GameCanvas.loadImageRMS("/tWater/wtsN2.png");
		}
		mSystem.gcc();
	}

	// Token: 0x06000B98 RID: 2968 RVA: 0x000B7204 File Offset: 0x000B5404
	public static void setTile(int index, int[] mapsArr, int type)
	{
		for (int i = 0; i < mapsArr.Length; i++)
		{
			bool flag = TileMap.maps[index] == mapsArr[i];
			if (flag)
			{
				TileMap.types[index] |= type;
				break;
			}
		}
	}

	// Token: 0x06000B99 RID: 2969 RVA: 0x000B724C File Offset: 0x000B544C
	public static void loadMap(int tileId)
	{
		TileMap.pxh = TileMap.tmh * (int)TileMap.size;
		TileMap.pxw = TileMap.tmw * (int)TileMap.size;
		Res.outz("load tile ID= " + TileMap.tileID.ToString());
		int num = tileId - 1;
		try
		{
			for (int i = 0; i < TileMap.tmw * TileMap.tmh; i++)
			{
				for (int j = 0; j < TileMap.tileType[num].Length; j++)
				{
					TileMap.setTile(i, TileMap.tileIndex[num][j], TileMap.tileType[num][j]);
				}
			}
		}
		catch (Exception)
		{
			Cout.println("Error Load Map");
			GameMidlet.instance.exit();
		}
	}

	// Token: 0x06000B9A RID: 2970 RVA: 0x000B7318 File Offset: 0x000B5518
	public static bool isInAirMap()
	{
		return TileMap.mapID == 45 || TileMap.mapID == 46 || TileMap.mapID == 48;
	}

	// Token: 0x06000B9B RID: 2971 RVA: 0x000B7354 File Offset: 0x000B5554
	public static bool isDoubleMap()
	{
		return TileMap.isMapDouble || TileMap.mapID == 45 || TileMap.mapID == 46 || TileMap.mapID == 48 || TileMap.mapID == 51 || TileMap.mapID == 52 || TileMap.mapID == 103 || TileMap.mapID == 112 || TileMap.mapID == 113 || TileMap.mapID == 115 || TileMap.mapID == 117 || TileMap.mapID == 118 || TileMap.mapID == 119 || TileMap.mapID == 120 || TileMap.mapID == 121 || TileMap.mapID == 125 || TileMap.mapID == 129 || TileMap.mapID == 130;
	}

	// Token: 0x06000B9C RID: 2972 RVA: 0x000B7428 File Offset: 0x000B5628
	public static void getTile()
	{
		bool flag = Main.typeClient == 3 || Main.typeClient == 5;
		if (flag)
		{
			bool flag2 = mGraphics.zoomLevel == 1;
			if (flag2)
			{
				TileMap.imgTile = new Image[1];
				TileMap.imgTile[0] = GameCanvas.loadImage("/t/" + TileMap.tileID.ToString() + ".png");
			}
			else
			{
				TileMap.imgTile = new Image[100];
				for (int i = 0; i < TileMap.imgTile.Length; i++)
				{
					TileMap.imgTile[i] = GameCanvas.loadImage(string.Concat(new string[]
					{
						"/t/",
						TileMap.tileID.ToString(),
						"/",
						(i + 1).ToString(),
						".png"
					}));
				}
			}
		}
		else
		{
			bool flag3 = mGraphics.zoomLevel == 1;
			if (flag3)
			{
				bool flag4 = TileMap.imgTile != null;
				if (flag4)
				{
					for (int j = 0; j < TileMap.imgTile.Length; j++)
					{
						bool flag5 = TileMap.imgTile[j] != null;
						if (flag5)
						{
							TileMap.imgTile[j].texture = null;
							TileMap.imgTile[j] = null;
						}
					}
					mSystem.gcc();
				}
				TileMap.imgTile = new Image[100];
				string path = string.Empty;
				for (int k = 0; k < TileMap.imgTile.Length; k++)
				{
					path = ((k >= 9) ? ("/t/" + TileMap.tileID.ToString() + "/t_" + (k + 1).ToString()) : ("/t/" + TileMap.tileID.ToString() + "/t_0" + (k + 1).ToString()));
					TileMap.imgTile[k] = GameCanvas.loadImage(path);
				}
			}
			else
			{
				Image image = GameCanvas.loadImageRMS("/t/" + TileMap.tileID.ToString() + "$1.png");
				bool flag6 = image != null;
				if (flag6)
				{
					Rms.DeleteStorage("x" + mGraphics.zoomLevel.ToString() + "t" + TileMap.tileID.ToString());
					TileMap.imgTile = new Image[100];
					for (int l = 0; l < TileMap.imgTile.Length; l++)
					{
						TileMap.imgTile[l] = GameCanvas.loadImageRMS(string.Concat(new string[]
						{
							"/t/",
							TileMap.tileID.ToString(),
							"$",
							(l + 1).ToString(),
							".png"
						}));
					}
				}
				else
				{
					image = GameCanvas.loadImageRMS("/t/" + TileMap.tileID.ToString() + ".png");
					bool flag7 = image != null;
					if (flag7)
					{
						Rms.DeleteStorage("$");
						TileMap.imgTile = new Image[1];
						TileMap.imgTile[0] = image;
					}
				}
			}
		}
	}

	// Token: 0x06000B9D RID: 2973 RVA: 0x000B7730 File Offset: 0x000B5930
	public static void paintTile(mGraphics g, int frame, int indexX, int indexY)
	{
		bool flag = TileMap.imgTile != null;
		if (flag)
		{
			bool flag2 = TileMap.imgTile.Length == 1;
			if (flag2)
			{
				g.setColor(0);
				g.drawRect(indexX * (int)TileMap.size, indexY * (int)TileMap.size, (int)TileMap.size, (int)TileMap.size);
			}
			else
			{
				g.setColor(0);
				g.drawRect(indexX * (int)TileMap.size, indexY * (int)TileMap.size, (int)TileMap.size, (int)TileMap.size);
			}
		}
	}

	// Token: 0x06000B9E RID: 2974 RVA: 0x000B77B0 File Offset: 0x000B59B0
	public static void paintTile(mGraphics g, int frame, int x, int y, int w, int h)
	{
		bool flag = TileMap.imgTile != null;
		if (flag)
		{
			bool flag2 = TileMap.imgTile.Length == 1;
			if (flag2)
			{
				g.setColor(0);
				g.drawRect(x, y, w, h);
			}
			else
			{
				g.setColor(0);
				g.drawRect(x, y, w, h);
			}
		}
	}

	// Token: 0x06000B9F RID: 2975 RVA: 0x000B780C File Offset: 0x000B5A0C
	public static void paintTilemapLOW(mGraphics g)
	{
		for (int i = GameScr.gssx; i < GameScr.gssxe; i++)
		{
			for (int j = GameScr.gssy; j < GameScr.gssye; j++)
			{
				int num = TileMap.maps[j * TileMap.tmw + i] - 1;
				bool flag = num != -1;
				if (flag)
				{
					TileMap.paintTile(g, num, i, j);
				}
				bool flag2 = (TileMap.tileTypeAt(i, j) & 32) == 32;
				if (flag2)
				{
					g.drawRegion(TileMap.imgWaterfall, 0, 24 * (GameCanvas.gameTick % 4), 24, 24, 0, i * (int)TileMap.size, j * (int)TileMap.size, 0);
				}
				else
				{
					bool flag3 = (TileMap.tileTypeAt(i, j) & 64) == 64;
					if (flag3)
					{
						bool flag4 = (TileMap.tileTypeAt(i, j - 1) & 32) == 32;
						if (flag4)
						{
							g.drawRegion(TileMap.imgWaterfall, 0, 24 * (GameCanvas.gameTick % 4), 24, 24, 0, i * (int)TileMap.size, j * (int)TileMap.size, 0);
						}
						else
						{
							bool flag5 = (TileMap.tileTypeAt(i, j - 1) & 4096) == 4096;
							if (flag5)
							{
								TileMap.paintTile(g, 21, i, j);
							}
						}
						Image arg = (TileMap.tileID == 5) ? TileMap.imgWaterlowN : ((TileMap.tileID != 8) ? TileMap.imgWaterflow : TileMap.imgWaterlowN2);
						g.drawRegion(arg, 0, (GameCanvas.gameTick % 8 >> 2) * 24, 24, 24, 0, i * (int)TileMap.size, j * (int)TileMap.size, 0);
					}
				}
				bool flag6 = (TileMap.tileTypeAt(i, j) & 2048) == 2048;
				if (flag6)
				{
					bool flag7 = (TileMap.tileTypeAt(i, j - 1) & 32) == 32;
					if (flag7)
					{
						g.drawRegion(TileMap.imgWaterfall, 0, 24 * (GameCanvas.gameTick % 4), 24, 24, 0, i * (int)TileMap.size, j * (int)TileMap.size, 0);
					}
					else
					{
						bool flag8 = (TileMap.tileTypeAt(i, j - 1) & 4096) == 4096;
						if (flag8)
						{
							TileMap.paintTile(g, 21, i, j);
						}
					}
					TileMap.paintTile(g, TileMap.maps[j * TileMap.tmw + i] - 1, i, j);
				}
			}
		}
	}

	// Token: 0x06000BA0 RID: 2976 RVA: 0x000B7A50 File Offset: 0x000B5C50
	public static void paintTilemap(mGraphics g)
	{
		bool isLoadingMap = global::Char.isLoadingMap;
		if (!isLoadingMap)
		{
			GameScr.gI().paintBgItem(g, 1);
			for (int i = 0; i < GameScr.vItemMap.size(); i++)
			{
				((ItemMap)GameScr.vItemMap.elementAt(i)).paintAuraItemEff(g);
			}
			for (int j = GameScr.gssx; j < GameScr.gssxe; j++)
			{
				for (int k = GameScr.gssy; k < GameScr.gssye; k++)
				{
					bool flag = j == 0 || j == TileMap.tmw - 1;
					if (!flag)
					{
						int num = TileMap.maps[k * TileMap.tmw + j] - 1;
						bool flag2 = (TileMap.tileTypeAt(j, k) & 256) == 256;
						if (!flag2)
						{
							bool flag3 = (TileMap.tileTypeAt(j, k) & 32) == 32;
							if (flag3)
							{
								g.drawRegion(TileMap.imgWaterfall, 0, 24 * (GameCanvas.gameTick % 8 >> 1), 24, 24, 0, j * (int)TileMap.size, k * (int)TileMap.size, 0);
							}
							else
							{
								bool flag4 = (TileMap.tileTypeAt(j, k) & 128) == 128;
								if (flag4)
								{
									g.drawRegion(TileMap.imgTopWaterfall, 0, 24 * (GameCanvas.gameTick % 8 >> 1), 24, 24, 0, j * (int)TileMap.size, k * (int)TileMap.size, 0);
								}
								else
								{
									bool flag5 = TileMap.tileID == 13 && num != -1;
									if (!flag5)
									{
										bool flag6 = TileMap.tileID == 2 && (TileMap.tileTypeAt(j, k) & 512) == 512 && num != -1;
										if (flag6)
										{
											TileMap.paintTile(g, num, j * (int)TileMap.size, k * (int)TileMap.size, 24, 1);
											TileMap.paintTile(g, num, j * (int)TileMap.size, k * (int)TileMap.size + 1, 24, 24);
										}
										bool flag7 = TileMap.tileID == 3;
										if (flag7)
										{
										}
										bool flag8 = (TileMap.tileTypeAt(j, k) & 16) == 16;
										if (flag8)
										{
											TileMap.bx = j * (int)TileMap.size - GameScr.cmx;
											TileMap.dbx = TileMap.bx - GameScr.gW2;
											TileMap.dfx = (int)(TileMap.size - 2) * TileMap.dbx / (int)TileMap.size;
											TileMap.fx = TileMap.dfx + GameScr.gW2;
											TileMap.paintTile(g, num, TileMap.fx + GameScr.cmx, k * (int)TileMap.size, 24, 24);
										}
										else
										{
											bool flag9 = (TileMap.tileTypeAt(j, k) & 512) == 512;
											if (flag9)
											{
												bool flag10 = num != -1;
												if (flag10)
												{
													TileMap.paintTile(g, num, j * (int)TileMap.size, k * (int)TileMap.size, 24, 1);
													TileMap.paintTile(g, num, j * (int)TileMap.size, k * (int)TileMap.size + 1, 24, 24);
												}
											}
											else
											{
												bool flag11 = num != -1;
												if (flag11)
												{
													TileMap.paintTile(g, num, j, k);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			bool flag12 = GameScr.cmx < 24;
			if (flag12)
			{
				for (int l = GameScr.gssy; l < GameScr.gssye; l++)
				{
					int num2 = TileMap.maps[l * TileMap.tmw + 1] - 1;
					bool flag13 = num2 != -1;
					if (flag13)
					{
						TileMap.paintTile(g, num2, 0, l);
					}
				}
			}
			bool flag14 = GameScr.cmx <= GameScr.cmxLim;
			if (!flag14)
			{
				int num3 = TileMap.tmw - 2;
				for (int m = GameScr.gssy; m < GameScr.gssye; m++)
				{
					int num4 = TileMap.maps[m * TileMap.tmw + num3] - 1;
					bool flag15 = num4 != -1;
					if (flag15)
					{
						TileMap.paintTile(g, num4, num3 + 1, m);
					}
				}
			}
		}
	}

	// Token: 0x06000BA1 RID: 2977 RVA: 0x000B7E6C File Offset: 0x000B606C
	public static bool isWaterEff()
	{
		bool flag = TileMap.mapID == 54 || TileMap.mapID == 55 || TileMap.mapID == 56 || TileMap.mapID == 57 || TileMap.mapID == 138 || TileMap.mapID == 167;
		return !flag;
	}

	// Token: 0x06000BA2 RID: 2978 RVA: 0x000B7EC8 File Offset: 0x000B60C8
	public static void paintOutTilemap(mGraphics g)
	{
		bool lowGraphic = GameCanvas.lowGraphic;
		if (!lowGraphic)
		{
			int num = 0;
			for (int i = GameScr.gssx; i < GameScr.gssxe; i++)
			{
				for (int j = GameScr.gssy; j < GameScr.gssye; j++)
				{
					num++;
					bool flag = (TileMap.tileTypeAt(i, j) & 64) != 64;
					if (!flag)
					{
						Image arg = (TileMap.tileID == 5) ? TileMap.imgWaterlowN : ((TileMap.tileID != 8) ? TileMap.imgWaterflow : TileMap.imgWaterlowN2);
						bool flag2 = !TileMap.isWaterEff();
						if (flag2)
						{
							g.drawRegion(arg, 0, 0, 24, 24, 0, i * (int)TileMap.size, j * (int)TileMap.size - 1, 0);
							g.drawRegion(arg, 0, 0, 24, 24, 0, i * (int)TileMap.size, j * (int)TileMap.size - 3, 0);
						}
						g.drawRegion(arg, 0, (GameCanvas.gameTick % 8 >> 2) * 24, 24, 24, 0, i * (int)TileMap.size, j * (int)TileMap.size - 12, 0);
						bool flag3 = TileMap.yWater == 0 && TileMap.isWaterEff();
						if (flag3)
						{
							TileMap.yWater = j * (int)TileMap.size - 12;
							int color = 16777215;
							bool flag4 = GameCanvas.typeBg == 2;
							if (flag4)
							{
								color = 10871287;
							}
							else
							{
								bool flag5 = GameCanvas.typeBg == 4;
								if (flag5)
								{
									color = 8111470;
								}
								else
								{
									bool flag6 = GameCanvas.typeBg == 7;
									if (flag6)
									{
										color = 5693125;
									}
									else
									{
										bool flag7 = GameCanvas.typeBg == 19;
										if (flag7)
										{
											color = 16711680;
										}
									}
								}
							}
							BackgroudEffect.addWater(color, TileMap.yWater + 15);
						}
					}
				}
			}
			BackgroudEffect.paintWaterAll(g);
		}
	}

	// Token: 0x06000BA3 RID: 2979 RVA: 0x000B80A0 File Offset: 0x000B62A0
	public static void loadMapFromResource(int mapID)
	{
		DataInputStream dataInputStream = MyStream.readFile("/mymap/" + mapID.ToString());
		TileMap.tmw = (int)((ushort)dataInputStream.read());
		TileMap.tmh = (int)((ushort)dataInputStream.read());
		TileMap.maps = new int[dataInputStream.available()];
		for (int i = 0; i < TileMap.tmw * TileMap.tmh; i++)
		{
			TileMap.maps[i] = (int)((ushort)dataInputStream.read());
		}
		TileMap.types = new int[TileMap.maps.Length];
	}

	// Token: 0x06000BA4 RID: 2980 RVA: 0x000B812C File Offset: 0x000B632C
	public static int tileAt(int x, int y)
	{
		int result;
		try
		{
			result = TileMap.maps[y * TileMap.tmw + x];
		}
		catch (Exception)
		{
			result = 1000;
		}
		return result;
	}

	// Token: 0x06000BA5 RID: 2981 RVA: 0x000B8168 File Offset: 0x000B6368
	public static int tileTypeAt(int x, int y)
	{
		int result;
		try
		{
			result = TileMap.types[y * TileMap.tmw + x];
		}
		catch (Exception)
		{
			result = 1000;
		}
		return result;
	}

	// Token: 0x06000BA6 RID: 2982 RVA: 0x000B81A4 File Offset: 0x000B63A4
	public static int tileTypeAtPixel(int px, int py)
	{
		int result;
		try
		{
			result = TileMap.types[py / (int)TileMap.size * TileMap.tmw + px / (int)TileMap.size];
		}
		catch (Exception)
		{
			result = 1000;
		}
		return result;
	}

	// Token: 0x06000BA7 RID: 2983 RVA: 0x000B81EC File Offset: 0x000B63EC
	public static bool tileTypeAt(int px, int py, int t)
	{
		bool result;
		try
		{
			result = ((TileMap.types[py / (int)TileMap.size * TileMap.tmw + px / (int)TileMap.size] & t) == t);
		}
		catch (Exception)
		{
			result = false;
		}
		return result;
	}

	// Token: 0x06000BA8 RID: 2984 RVA: 0x000B8238 File Offset: 0x000B6438
	public static void setTileTypeAtPixel(int px, int py, int t)
	{
		TileMap.types[py / (int)TileMap.size * TileMap.tmw + px / (int)TileMap.size] |= t;
	}

	// Token: 0x06000BA9 RID: 2985 RVA: 0x000B825F File Offset: 0x000B645F
	public static void setTileTypeAt(int x, int y, int t)
	{
		TileMap.types[y * TileMap.tmw + x] = t;
	}

	// Token: 0x06000BAA RID: 2986 RVA: 0x000B8272 File Offset: 0x000B6472
	public static void killTileTypeAt(int px, int py, int t)
	{
		TileMap.types[py / (int)TileMap.size * TileMap.tmw + px / (int)TileMap.size] &= ~t;
	}

	// Token: 0x06000BAB RID: 2987 RVA: 0x000B829C File Offset: 0x000B649C
	public static int tileYofPixel(int py)
	{
		return py / (int)TileMap.size * (int)TileMap.size;
	}

	// Token: 0x06000BAC RID: 2988 RVA: 0x000B82BC File Offset: 0x000B64BC
	public static int tileXofPixel(int px)
	{
		return px / (int)TileMap.size * (int)TileMap.size;
	}

	// Token: 0x06000BAD RID: 2989 RVA: 0x000B82DC File Offset: 0x000B64DC
	public static void loadMainTile()
	{
		bool flag = TileMap.lastTileID != TileMap.tileID;
		if (flag)
		{
			TileMap.getTile();
			TileMap.lastTileID = TileMap.tileID;
		}
	}

	// Token: 0x0400141C RID: 5148
	public const int T_EMPTY = 0;

	// Token: 0x0400141D RID: 5149
	public const int T_TOP = 2;

	// Token: 0x0400141E RID: 5150
	public const int T_LEFT = 4;

	// Token: 0x0400141F RID: 5151
	public const int T_RIGHT = 8;

	// Token: 0x04001420 RID: 5152
	public const int T_TREE = 16;

	// Token: 0x04001421 RID: 5153
	public const int T_WATERFALL = 32;

	// Token: 0x04001422 RID: 5154
	public const int T_WATERFLOW = 64;

	// Token: 0x04001423 RID: 5155
	public const int T_TOPFALL = 128;

	// Token: 0x04001424 RID: 5156
	public const int T_OUTSIDE = 256;

	// Token: 0x04001425 RID: 5157
	public const int T_DOWN1PIXEL = 512;

	// Token: 0x04001426 RID: 5158
	public const int T_BRIDGE = 1024;

	// Token: 0x04001427 RID: 5159
	public const int T_UNDERWATER = 2048;

	// Token: 0x04001428 RID: 5160
	public const int T_SOLIDGROUND = 4096;

	// Token: 0x04001429 RID: 5161
	public const int T_BOTTOM = 8192;

	// Token: 0x0400142A RID: 5162
	public const int T_DIE = 16384;

	// Token: 0x0400142B RID: 5163
	public const int T_HEBI = 32768;

	// Token: 0x0400142C RID: 5164
	public const int T_BANG = 65536;

	// Token: 0x0400142D RID: 5165
	public const int T_JUM8 = 131072;

	// Token: 0x0400142E RID: 5166
	public const int T_NT0 = 262144;

	// Token: 0x0400142F RID: 5167
	public const int T_NT1 = 524288;

	// Token: 0x04001430 RID: 5168
	public const int T_CENTER = 1;

	// Token: 0x04001431 RID: 5169
	public static int tmw;

	// Token: 0x04001432 RID: 5170
	public static int tmh;

	// Token: 0x04001433 RID: 5171
	public static int pxw;

	// Token: 0x04001434 RID: 5172
	public static int pxh;

	// Token: 0x04001435 RID: 5173
	public static int tileID;

	// Token: 0x04001436 RID: 5174
	public static int lastTileID = -1;

	// Token: 0x04001437 RID: 5175
	public static int[] maps;

	// Token: 0x04001438 RID: 5176
	public static int[] types;

	// Token: 0x04001439 RID: 5177
	public static Image[] imgTile;

	// Token: 0x0400143A RID: 5178
	public static Image imgTileSmall;

	// Token: 0x0400143B RID: 5179
	public static Image imgMiniMap;

	// Token: 0x0400143C RID: 5180
	public static Image imgWaterfall;

	// Token: 0x0400143D RID: 5181
	public static Image imgTopWaterfall;

	// Token: 0x0400143E RID: 5182
	public static Image imgWaterflow;

	// Token: 0x0400143F RID: 5183
	public static Image imgWaterlowN;

	// Token: 0x04001440 RID: 5184
	public static Image imgWaterlowN2;

	// Token: 0x04001441 RID: 5185
	public static Image imgWaterF;

	// Token: 0x04001442 RID: 5186
	public static Image imgLeaf;

	// Token: 0x04001443 RID: 5187
	public static sbyte size = 24;

	// Token: 0x04001444 RID: 5188
	private static int bx;

	// Token: 0x04001445 RID: 5189
	private static int dbx;

	// Token: 0x04001446 RID: 5190
	private static int fx;

	// Token: 0x04001447 RID: 5191
	private static int dfx;

	// Token: 0x04001448 RID: 5192
	public static string[] instruction;

	// Token: 0x04001449 RID: 5193
	public static int[] iX;

	// Token: 0x0400144A RID: 5194
	public static int[] iY;

	// Token: 0x0400144B RID: 5195
	public static int[] iW;

	// Token: 0x0400144C RID: 5196
	public static int iCount;

	// Token: 0x0400144D RID: 5197
	public static bool isMapDouble = false;

	// Token: 0x0400144E RID: 5198
	public static string mapName = string.Empty;

	// Token: 0x0400144F RID: 5199
	public static sbyte versionMap = 1;

	// Token: 0x04001450 RID: 5200
	public static int mapID;

	// Token: 0x04001451 RID: 5201
	public static int lastBgID = -1;

	// Token: 0x04001452 RID: 5202
	public static int zoneID;

	// Token: 0x04001453 RID: 5203
	public static int bgID;

	// Token: 0x04001454 RID: 5204
	public static int bgType;

	// Token: 0x04001455 RID: 5205
	public static int lastType = -1;

	// Token: 0x04001456 RID: 5206
	public static int typeMap;

	// Token: 0x04001457 RID: 5207
	public static sbyte planetID;

	// Token: 0x04001458 RID: 5208
	public static sbyte lastPlanetId = -1;

	// Token: 0x04001459 RID: 5209
	public static long timeTranMini;

	// Token: 0x0400145A RID: 5210
	public static MyVector vGo = new MyVector();

	// Token: 0x0400145B RID: 5211
	public static MyVector vItemBg = new MyVector();

	// Token: 0x0400145C RID: 5212
	public static MyVector vCurrItem = new MyVector();

	// Token: 0x0400145D RID: 5213
	public static string[] mapNames;

	// Token: 0x0400145E RID: 5214
	public static sbyte MAP_NORMAL = 0;

	// Token: 0x0400145F RID: 5215
	public static Image bong;

	// Token: 0x04001460 RID: 5216
	public const int TRAIDAT_DOINUI = 0;

	// Token: 0x04001461 RID: 5217
	public const int TRAIDAT_RUNG = 1;

	// Token: 0x04001462 RID: 5218
	public const int TRAIDAT_DAORUA = 2;

	// Token: 0x04001463 RID: 5219
	public const int TRAIDAT_DADO = 3;

	// Token: 0x04001464 RID: 5220
	public const int NAMEK_THUNGLUNG = 5;

	// Token: 0x04001465 RID: 5221
	public const int NAMEK_DOINUI = 4;

	// Token: 0x04001466 RID: 5222
	public const int NAMEK_RUNG = 6;

	// Token: 0x04001467 RID: 5223
	public const int NAMEK_DAO = 7;

	// Token: 0x04001468 RID: 5224
	public const int SAYAI_DOINUI = 8;

	// Token: 0x04001469 RID: 5225
	public const int SAYAI_RUNG = 9;

	// Token: 0x0400146A RID: 5226
	public const int SAYAI_CITY = 10;

	// Token: 0x0400146B RID: 5227
	public const int SAYAI_NIGHT = 11;

	// Token: 0x0400146C RID: 5228
	public const int KAMISAMA = 12;

	// Token: 0x0400146D RID: 5229
	public const int TIME_ROOM = 13;

	// Token: 0x0400146E RID: 5230
	public const int HELL = 15;

	// Token: 0x0400146F RID: 5231
	public const int BEERUS = 16;

	// Token: 0x04001470 RID: 5232
	public const int THE_HELL = 19;

	// Token: 0x04001471 RID: 5233
	public static Image[] bgItem = new Image[8];

	// Token: 0x04001472 RID: 5234
	public static MyVector vObject = new MyVector();

	// Token: 0x04001473 RID: 5235
	public static int[] offlineId = new int[]
	{
		21,
		22,
		23,
		39,
		40,
		41
	};

	// Token: 0x04001474 RID: 5236
	public static int[] highterId = new int[]
	{
		21,
		22,
		23,
		24,
		25,
		26
	};

	// Token: 0x04001475 RID: 5237
	public static int[] toOfflineId = new int[]
	{
		0,
		7,
		14
	};

	// Token: 0x04001476 RID: 5238
	public static int[][] tileType;

	// Token: 0x04001477 RID: 5239
	public static int[][][] tileIndex;

	// Token: 0x04001478 RID: 5240
	public static Image imgLight = GameCanvas.loadImage("/bg/light.png");

	// Token: 0x04001479 RID: 5241
	public static int sizeMiniMap = 2;

	// Token: 0x0400147A RID: 5242
	public static int gssx;

	// Token: 0x0400147B RID: 5243
	public static int gssxe;

	// Token: 0x0400147C RID: 5244
	public static int gssy;

	// Token: 0x0400147D RID: 5245
	public static int gssye;

	// Token: 0x0400147E RID: 5246
	public static int countx;

	// Token: 0x0400147F RID: 5247
	public static int county;

	// Token: 0x04001480 RID: 5248
	private static int[] colorMini = new int[]
	{
		5257738,
		8807192
	};

	// Token: 0x04001481 RID: 5249
	public static int yWater = 0;
}
using System;

// Token: 0x020000D9 RID: 217
public class Timer
{
	// Token: 0x06000BB0 RID: 2992 RVA: 0x000B8409 File Offset: 0x000B6609
	public static void setTimer(IActionListener actionListener, int action, long timeEllapse)
	{
		Timer.timeListener = actionListener;
		Timer.idAction = action;
		Timer.timeExecute = mSystem.currentTimeMillis() + timeEllapse;
		Timer.isON = true;
	}

	// Token: 0x06000BB1 RID: 2993 RVA: 0x000B842C File Offset: 0x000B662C
	public static void update()
	{
		long num = mSystem.currentTimeMillis();
		bool flag = !Timer.isON || num <= Timer.timeExecute;
		if (!flag)
		{
			Timer.isON = false;
			try
			{
				bool flag2 = Timer.idAction > 0;
				if (flag2)
				{
					GameScr.gI().actionPerform(Timer.idAction, null);
				}
			}
			catch (Exception)
			{
			}
		}
	}

	// Token: 0x04001482 RID: 5250
	public static IActionListener timeListener;

	// Token: 0x04001483 RID: 5251
	public static int idAction;

	// Token: 0x04001484 RID: 5252
	public static long timeExecute;

	// Token: 0x04001485 RID: 5253
	public static bool isON;
}
using System;

// Token: 0x020000DA RID: 218
public class TopInfo
{
	// Token: 0x04001486 RID: 5254
	public int headID;

	// Token: 0x04001487 RID: 5255
	public int headICON = -1;

	// Token: 0x04001488 RID: 5256
	public short body;

	// Token: 0x04001489 RID: 5257
	public short leg;

	// Token: 0x0400148A RID: 5258
	public string name;

	// Token: 0x0400148B RID: 5259
	public string info;

	// Token: 0x0400148C RID: 5260
	public int pId;

	// Token: 0x0400148D RID: 5261
	public int rank;

	// Token: 0x0400148E RID: 5262
	public string info2;
}
using System;

// Token: 0x020000DB RID: 219
public class TouchScreenKeyboard
{
	// Token: 0x06000BB4 RID: 2996 RVA: 0x000B84B8 File Offset: 0x000B66B8
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType t, bool b1, bool b2, bool type, bool b3, string caption)
	{
		return null;
	}

	// Token: 0x06000BB5 RID: 2997 RVA: 0x000B84CB File Offset: 0x000B66CB
	public static void Clear()
	{
	}

	// Token: 0x0400148F RID: 5263
	public static bool hideInput;

	// Token: 0x04001490 RID: 5264
	public static bool visible;

	// Token: 0x04001491 RID: 5265
	public bool done;

	// Token: 0x04001492 RID: 5266
	public bool active;

	// Token: 0x04001493 RID: 5267
	public string text;
}
using System;

// Token: 0x020000DC RID: 220
public enum TouchScreenKeyboardType
{
	// Token: 0x04001495 RID: 5269
	Default,
	// Token: 0x04001496 RID: 5270
	ASCIICapable,
	// Token: 0x04001497 RID: 5271
	NumberPad
}
using System;

// Token: 0x020000DD RID: 221
public class TransportScr : mScreen, IActionListener
{
	// Token: 0x06000BB7 RID: 2999 RVA: 0x000B84D8 File Offset: 0x000B66D8
	public TransportScr()
	{
		this.posX = new int[this.n];
		this.posY = new int[this.n];
		for (int i = 0; i < this.n; i++)
		{
			this.posX[i] = Res.random(0, GameCanvas.w);
			this.posY[i] = i * (GameCanvas.h / this.n);
		}
		this.posX2 = new int[this.n];
		this.posY2 = new int[this.n];
		for (int j = 0; j < this.n; j++)
		{
			this.posX2[j] = Res.random(0, GameCanvas.w);
			this.posY2[j] = j * (GameCanvas.h / this.n);
		}
	}

	// Token: 0x06000BB8 RID: 3000 RVA: 0x000B85C0 File Offset: 0x000B67C0
	public static TransportScr gI()
	{
		bool flag = TransportScr.instance == null;
		if (flag)
		{
			TransportScr.instance = new TransportScr();
		}
		return TransportScr.instance;
	}

	// Token: 0x06000BB9 RID: 3001 RVA: 0x000B85F0 File Offset: 0x000B67F0
	public override void switchToMe()
	{
		bool flag = TransportScr.ship == null;
		if (flag)
		{
			TransportScr.ship = GameCanvas.loadImage("/mainImage/myTexture2dfutherShip.png");
		}
		bool flag2 = TransportScr.taungam == null;
		if (flag2)
		{
			TransportScr.taungam = GameCanvas.loadImage("/mainImage/taungam.png");
		}
		this.isSpeed = false;
		this.transNow = false;
		bool flag3 = global::Char.myCharz().checkLuong() > 0 && this.type == 0;
		if (flag3)
		{
			this.center = new Command(mResources.faster, this, 1, null);
		}
		else
		{
			this.center = null;
		}
		this.currSpeed = 0;
		base.switchToMe();
	}

	// Token: 0x06000BBA RID: 3002 RVA: 0x000B8694 File Offset: 0x000B6894
	public override void paint(mGraphics g)
	{
		g.setColor((this.type != 0) ? 3056895 : 0);
		g.fillRect(0, 0, GameCanvas.w, GameCanvas.h);
		for (int i = 0; i < this.n; i++)
		{
			g.setColor((this.type != 0) ? 11140863 : 14802654);
			g.fillRect(this.posX[i], this.posY[i], 10, 2);
		}
		bool flag = this.type == 0;
		if (flag)
		{
			g.drawRegion(TransportScr.ship, 0, 0, 72, 95, 7, this.cmx + this.currSpeed, GameCanvas.h / 2, 3);
		}
		bool flag2 = this.type == 1;
		if (flag2)
		{
			g.drawRegion(TransportScr.taungam, 0, 0, 144, 79, 2, this.cmx + this.currSpeed, GameCanvas.h / 2, 3);
		}
		for (int j = 0; j < this.n; j++)
		{
			g.setColor((this.type != 0) ? 7536127 : 14935011);
			g.fillRect(this.posX2[j], this.posY2[j], 18, 3);
		}
		base.paint(g);
	}

	// Token: 0x06000BBB RID: 3003 RVA: 0x000B87E8 File Offset: 0x000B69E8
	public override void update()
	{
		bool flag = this.type == 0;
		if (flag)
		{
			bool flag2 = !this.isSpeed;
			if (flag2)
			{
				this.currSpeed = GameCanvas.w / 2 * (int)this.time / (int)this.maxTime;
			}
		}
		else
		{
			this.currSpeed += 2;
		}
		Controller.isStopReadMessage = false;
		this.cmx = (((GameCanvas.w / 2 + this.cmx) / 2 + this.cmx) / 2 + this.cmx) / 2;
		bool flag3 = this.type == 1;
		if (flag3)
		{
			this.cmx = 0;
		}
		for (int i = 0; i < this.n; i++)
		{
			this.posX[i] -= this.speed / 2;
			bool flag4 = this.posX[i] < -20;
			if (flag4)
			{
				this.posX[i] = GameCanvas.w;
			}
		}
		for (int j = 0; j < this.n; j++)
		{
			this.posX2[j] -= this.speed;
			bool flag5 = this.posX2[j] < -20;
			if (flag5)
			{
				this.posX2[j] = GameCanvas.w;
			}
		}
		bool flag6 = GameCanvas.gameTick % 3 == 0;
		if (flag6)
		{
			this.speed += ((!this.isSpeed) ? 1 : 2);
		}
		bool flag7 = this.speed > ((!this.isSpeed) ? 25 : 80);
		if (flag7)
		{
			this.speed = ((!this.isSpeed) ? 25 : 80);
		}
		this.curr = mSystem.currentTimeMillis();
		bool flag8 = this.curr - this.last >= 1000L;
		if (flag8)
		{
			this.time += 1;
			this.last = this.curr;
		}
		bool flag9 = this.isSpeed;
		if (flag9)
		{
			this.currSpeed += 3;
		}
		bool flag10 = this.currSpeed >= GameCanvas.w / 2 + 30 && !this.transNow;
		if (flag10)
		{
			this.transNow = true;
			Service.gI().transportNow();
		}
		base.update();
	}

	// Token: 0x06000BBC RID: 3004 RVA: 0x000B8A2C File Offset: 0x000B6C2C
	public override void updateKey()
	{
		base.updateKey();
	}

	// Token: 0x06000BBD RID: 3005 RVA: 0x000B8A38 File Offset: 0x000B6C38
	public void perform(int idAction, object p)
	{
		bool flag = idAction == 1;
		if (flag)
		{
			GameCanvas.startYesNoDlg(mResources.fasterQuestion, new Command(mResources.YES, this, 2, null), new Command(mResources.NO, this, 3, null));
		}
		bool flag2 = idAction == 2 && global::Char.myCharz().checkLuong() > 0;
		if (flag2)
		{
			this.isSpeed = true;
			GameCanvas.endDlg();
			this.center = null;
		}
		bool flag3 = idAction == 3;
		if (flag3)
		{
			GameCanvas.endDlg();
		}
	}

	// Token: 0x04001498 RID: 5272
	public static TransportScr instance;

	// Token: 0x04001499 RID: 5273
	public static Image ship;

	// Token: 0x0400149A RID: 5274
	public static Image taungam;

	// Token: 0x0400149B RID: 5275
	public sbyte type;

	// Token: 0x0400149C RID: 5276
	public int speed = 5;

	// Token: 0x0400149D RID: 5277
	public int[] posX;

	// Token: 0x0400149E RID: 5278
	public int[] posY;

	// Token: 0x0400149F RID: 5279
	public int[] posX2;

	// Token: 0x040014A0 RID: 5280
	public int[] posY2;

	// Token: 0x040014A1 RID: 5281
	private int cmx;

	// Token: 0x040014A2 RID: 5282
	private int n = 20;

	// Token: 0x040014A3 RID: 5283
	public short time;

	// Token: 0x040014A4 RID: 5284
	public short maxTime;

	// Token: 0x040014A5 RID: 5285
	public long last;

	// Token: 0x040014A6 RID: 5286
	public long curr;

	// Token: 0x040014A7 RID: 5287
	private bool isSpeed;

	// Token: 0x040014A8 RID: 5288
	private bool transNow;

	// Token: 0x040014A9 RID: 5289
	private int currSpeed;
}
using System;

// Token: 0x020000DE RID: 222
public class Waypoint : IActionListener
{
	// Token: 0x06000BBE RID: 3006 RVA: 0x000B8AB4 File Offset: 0x000B6CB4
	public Waypoint(short minX, short minY, short maxX, short maxY, bool isEnter, bool isOffline, string name)
	{
		this.minX = minX;
		this.minY = minY;
		this.maxX = maxX;
		this.maxY = maxY;
		name = Res.changeString(name);
		this.isEnter = isEnter;
		this.isOffline = isOffline;
		bool flag = ((TileMap.mapID == 21 || TileMap.mapID == 22 || TileMap.mapID == 23) && this.minX >= 0 && this.minX <= 24) || (((TileMap.mapID == 0 && global::Char.myCharz().cgender != 0) || (TileMap.mapID == 7 && global::Char.myCharz().cgender != 1) || (TileMap.mapID == 14 && global::Char.myCharz().cgender != 2)) && isOffline);
		if (!flag)
		{
			bool flag2 = TileMap.isInAirMap() || TileMap.mapID == 47;
			if (flag2)
			{
				bool flag3 = minY <= 150 || !TileMap.isInAirMap();
				if (flag3)
				{
					this.popup = new PopUp(name, (int)(minX + (maxX - minX) / 2), (int)(maxY - ((minX <= 100) ? 48 : 24)));
					this.popup.command = new Command(null, this, 1, this);
					this.popup.isWayPoint = true;
					this.popup.isPaint = false;
					PopUp.addPopUp(this.popup);
					TileMap.vGo.addElement(this);
				}
			}
			else
			{
				bool flag4 = !isEnter && !isOffline;
				if (flag4)
				{
					this.popup = new PopUp(name, (int)minX, (int)(minY - 24));
					this.popup.command = new Command(null, this, 1, this);
					this.popup.isWayPoint = true;
					this.popup.isPaint = false;
					PopUp.addPopUp(this.popup);
				}
				else
				{
					bool flag5 = TileMap.isTrainingMap();
					if (flag5)
					{
						this.popup = new PopUp(name, (int)minX, (int)(minY - 16));
					}
					else
					{
						int x = (int)(minX + (maxX - minX) / 2);
						this.popup = new PopUp(name, x, (int)(minY - ((minY == 0) ? -32 : 16)));
					}
					this.popup.command = new Command(null, this, 2, this);
					this.popup.isWayPoint = true;
					this.popup.isPaint = false;
					PopUp.addPopUp(this.popup);
				}
				TileMap.vGo.addElement(this);
			}
		}
	}

	// Token: 0x06000BBF RID: 3007 RVA: 0x000B8D10 File Offset: 0x000B6F10
	public void perform(int idAction, object p)
	{
		if (idAction != 1)
		{
			if (idAction == 2)
			{
				GameScr.gI().auto = 0;
				bool flag = global::Char.myCharz().isInEnterOfflinePoint() != null;
				if (flag)
				{
					Service.gI().charMove();
					InfoDlg.showWait();
					Service.gI().getMapOffline();
					global::Char.ischangingMap = true;
				}
				else
				{
					bool flag2 = global::Char.myCharz().isInEnterOnlinePoint() != null;
					if (flag2)
					{
						Service.gI().charMove();
						Service.gI().requestChangeMap();
						global::Char.isLockKey = true;
						global::Char.ischangingMap = true;
						GameCanvas.clearKeyHold();
						GameCanvas.clearKeyPressed();
						InfoDlg.showWait();
					}
					else
					{
						int xEnd = (int)((this.minX + this.maxX) / 2);
						int yEnd = (int)this.maxY;
						global::Char.myCharz().currentMovePoint = new MovePoint(xEnd, yEnd);
						global::Char.myCharz().cdir = ((global::Char.myCharz().cx - global::Char.myCharz().currentMovePoint.xEnd <= 0) ? 1 : -1);
						global::Char.myCharz().endMovePointCommand = new Command(null, this, 2, null);
					}
				}
			}
		}
		else
		{
			int xEnd2 = (int)((this.minX + this.maxX) / 2);
			int yEnd2 = (int)this.maxY;
			bool flag3 = this.maxY > this.minY + 24;
			if (flag3)
			{
				yEnd2 = (int)((this.minY + this.maxY) / 2);
			}
			GameScr.gI().auto = 0;
			global::Char.myCharz().currentMovePoint = new MovePoint(xEnd2, yEnd2);
			global::Char.myCharz().cdir = ((global::Char.myCharz().cx - global::Char.myCharz().currentMovePoint.xEnd <= 0) ? 1 : -1);
			Service.gI().charMove();
		}
	}

	// Token: 0x040014AA RID: 5290
	public short minX;

	// Token: 0x040014AB RID: 5291
	public short minY;

	// Token: 0x040014AC RID: 5292
	public short maxX;

	// Token: 0x040014AD RID: 5293
	public short maxY;

	// Token: 0x040014AE RID: 5294
	public bool isEnter;

	// Token: 0x040014AF RID: 5295
	public bool isOffline;

	// Token: 0x040014B0 RID: 5296
	public PopUp popup;
}


